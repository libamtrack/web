// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 1292880;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        stringToUTF8(name, dirp + pos + 11, 256);
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }function _exit(status) {
      __exit(status);
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

  
  function _llvm_log10_f32(x) {
      return Math.log(x) / Math.LN10; // TODO: Math.log10, when browser support is there
    }function _llvm_log10_f64() {
  return _llvm_log10_f32.apply(null, arguments)
  }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__get_daylight())>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ddi(x) { err("Invalid function pointer called with signature 'ddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { err("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddiiii(x) { err("Invalid function pointer called with signature 'viddiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ddi": nullFunc_ddi, "nullFunc_di": nullFunc_di, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_viddiiii": nullFunc_viddiiii, "nullFunc_vii": nullFunc_vii, "nullFunc_viiii": nullFunc_viiii, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall195": ___syscall195, "___syscall197": ___syscall197, "___syscall220": ___syscall220, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__exit": __exit, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exit": _exit, "_getenv": _getenv, "_llvm_log10_f32": _llvm_log10_f32, "_llvm_log10_f64": _llvm_log10_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_localtime": _localtime, "_localtime_r": _localtime_r, "_time": _time, "_tzset": _tzset, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ddi=env.nullFunc_ddi;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_viddiiii=env.nullFunc_viddiiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall195=env.___syscall195;
  var ___syscall197=env.___syscall197;
  var ___syscall220=env.___syscall220;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __exit=env.__exit;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _exit=env._exit;
  var _getenv=env._getenv;
  var _llvm_log10_f32=env._llvm_log10_f32;
  var _llvm_log10_f64=env._llvm_log10_f64;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _localtime=env._localtime;
  var _localtime_r=env._localtime_r;
  var _time=env._time;
  var _tzset=env._tzset;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _AT_test_fun($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $4 + $5;
 STACKTOP = sp;return (+$6);
}
function _AT_run_CPPSC_method($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = +$12;
 $13 = $13|0;
 $14 = $14|0;
 $15 = +$15;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 $24 = $24|0;
 $25 = $25|0;
 $26 = $26|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0;
 var $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0.0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $vararg_buffer49 = sp + 208|0;
 $vararg_buffer46 = sp + 200|0;
 $vararg_buffer43 = sp + 192|0;
 $vararg_buffer40 = sp + 184|0;
 $vararg_buffer37 = sp + 176|0;
 $vararg_buffer34 = sp + 168|0;
 $vararg_buffer31 = sp + 160|0;
 $vararg_buffer28 = sp + 152|0;
 $vararg_buffer25 = sp + 144|0;
 $vararg_buffer22 = sp + 136|0;
 $vararg_buffer19 = sp + 128|0;
 $vararg_buffer16 = sp + 120|0;
 $vararg_buffer11 = sp + 96|0;
 $vararg_buffer8 = sp + 88|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 56|0;
 $38 = sp + 372|0;
 $56 = sp + 324|0;
 $57 = sp + 280|0;
 $59 = sp + 272|0;
 $66 = sp + 244|0;
 $72 = sp + 32|0;
 $75 = sp + 24|0;
 $78 = sp + 8|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $4;
 $32 = $5;
 $33 = $6;
 $34 = $7;
 $35 = $8;
 $36 = $9;
 $37 = $10;
 HEAP32[$38>>2] = $11;
 $39 = $12;
 $80 = $13&1;
 $40 = $80;
 $81 = $14&1;
 $41 = $81;
 $42 = $15;
 $82 = $16&1;
 $43 = $82;
 $83 = $17&1;
 $44 = $83;
 $45 = $18;
 $46 = $19;
 $47 = $20;
 $48 = $21;
 $49 = $22;
 $50 = $23;
 $51 = $24;
 $52 = $25;
 $53 = $26;
 $55 = 0;
 $84 = $40;
 $85 = $84&1;
 L1: do {
  if ($85) {
   $86 = (_fopen(71964,71974)|0);
   $55 = $86;
   $87 = $55;
   $88 = ($87|0)==(0|0);
   if ($88) {
    STACKTOP = sp;return;
   }
   $89 = (_time((0|0))|0);
   HEAP32[$56>>2] = $89;
   $90 = (_localtime(($56|0))|0);
   dest=$57; src=$90; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $91 = $55;
   (_fprintf($91,71976,$vararg_buffer)|0);
   $92 = $55;
   $93 = ((($57)) + 20|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + 1900)|0;
   $96 = ((($57)) + 16|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 1)|0;
   $99 = ((($57)) + 12|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($57)) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($57)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = HEAP32[$57>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $95;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $98;
   $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr4>>2] = $100;
   $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr5>>2] = $102;
   $vararg_ptr6 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr6>>2] = $104;
   $vararg_ptr7 = ((($vararg_buffer1)) + 20|0);
   HEAP32[$vararg_ptr7>>2] = $105;
   (_fprintf($92,72003,$vararg_buffer1)|0);
   $106 = $55;
   $107 = $27;
   HEAP32[$vararg_buffer8>>2] = $107;
   (_fprintf($106,72033,$vararg_buffer8)|0);
   $58 = 0;
   while(1) {
    $108 = $58;
    $109 = $27;
    $110 = ($108|0)<($109|0);
    if (!($110)) {
     break L1;
    }
    $111 = $55;
    $112 = $28;
    $113 = $58;
    $114 = (($112) + ($113<<3)|0);
    $115 = +HEAPF64[$114>>3];
    $116 = $29;
    $117 = $58;
    $118 = (($116) + ($117<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $30;
    $121 = $58;
    $122 = (($120) + ($121<<3)|0);
    $123 = +HEAPF64[$122>>3];
    HEAPF64[$vararg_buffer11>>3] = $115;
    $vararg_ptr14 = ((($vararg_buffer11)) + 8|0);
    HEAP32[$vararg_ptr14>>2] = $119;
    $vararg_ptr15 = ((($vararg_buffer11)) + 16|0);
    HEAPF64[$vararg_ptr15>>3] = $123;
    (_fprintf($111,72103,$vararg_buffer11)|0);
    $124 = $58;
    $125 = (($124) + 1)|0;
    $58 = $125;
   }
  }
 } while(0);
 $126 = $45;
 HEAPF64[$126>>3] = 0.0;
 $127 = $46;
 HEAPF64[$127>>3] = 0.0;
 $128 = $47;
 HEAPF64[$128>>3] = 0.0;
 $129 = $48;
 HEAPF64[$129>>3] = 0.0;
 $130 = $49;
 HEAPF64[$130>>3] = 0.0;
 $131 = $50;
 HEAPF64[$131>>3] = 0.0;
 $132 = $51;
 HEAP32[$132>>2] = 0;
 $133 = $52;
 HEAPF64[$133>>3] = 0.0;
 $134 = $53;
 HEAPF64[$134>>3] = 0.0;
 $135 = $27;
 $136 = $28;
 $137 = $29;
 $138 = $31;
 $139 = $33;
 $140 = $34;
 $141 = $35;
 $142 = HEAP32[$38>>2]|0;
 $143 = $32;
 $144 = (_AT_n_bins_for_single_impact_local_dose_distrib($135,$136,$137,$138,$139,$140,$141,$142,$143)|0);
 HEAP32[$59>>2] = $144;
 $145 = $40;
 $146 = $145&1;
 if ($146) {
  $147 = $55;
  $148 = HEAP32[$59>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $148;
  (_fprintf($147,72122,$vararg_buffer16)|0);
 }
 $149 = $27;
 $150 = $149<<3;
 $151 = (_calloc($150,8)|0);
 $60 = $151;
 $152 = $27;
 $153 = $28;
 $154 = $29;
 $155 = $31;
 $156 = $33;
 $157 = $34;
 $158 = $35;
 $159 = $32;
 $160 = $60;
 _AT_RDD_f1_parameters_mixed_field($152,$153,$154,$155,$156,$157,$158,$159,$160);
 $161 = $40;
 $162 = $161&1;
 if ($162) {
  $163 = $55;
  $164 = $60;
  $165 = +HEAPF64[$164>>3];
  HEAPF64[$vararg_buffer19>>3] = $165;
  (_fprintf($163,72138,$vararg_buffer19)|0);
  $166 = $55;
  $167 = $60;
  $168 = ((($167)) + 8|0);
  $169 = +HEAPF64[$168>>3];
  HEAPF64[$vararg_buffer22>>3] = $169;
  (_fprintf($166,72175,$vararg_buffer22)|0);
  $170 = $55;
  $171 = $60;
  $172 = ((($171)) + 16|0);
  $173 = +HEAPF64[$172>>3];
  HEAPF64[$vararg_buffer25>>3] = $173;
  (_fprintf($170,72192,$vararg_buffer25)|0);
  $174 = $55;
  $175 = $60;
  $176 = ((($175)) + 24|0);
  $177 = +HEAPF64[$176>>3];
  HEAPF64[$vararg_buffer28>>3] = $177;
  (_fprintf($174,72222,$vararg_buffer28)|0);
  $178 = $55;
  $179 = $60;
  $180 = ((($179)) + 32|0);
  $181 = +HEAPF64[$180>>3];
  HEAPF64[$vararg_buffer31>>3] = $181;
  (_fprintf($178,72240,$vararg_buffer31)|0);
  $182 = $55;
  $183 = $60;
  $184 = ((($183)) + 40|0);
  $185 = +HEAPF64[$184>>3];
  HEAPF64[$vararg_buffer34>>3] = $185;
  (_fprintf($182,72258,$vararg_buffer34)|0);
  $186 = $55;
  $187 = $60;
  $188 = ((($187)) + 48|0);
  $189 = +HEAPF64[$188>>3];
  HEAPF64[$vararg_buffer37>>3] = $189;
  (_fprintf($186,72284,$vararg_buffer37)|0);
  $190 = $55;
  $191 = $60;
  $192 = ((($191)) + 56|0);
  $193 = +HEAPF64[$192>>3];
  HEAPF64[$vararg_buffer40>>3] = $193;
  (_fprintf($190,72319,$vararg_buffer40)|0);
 }
 $194 = HEAP32[$59>>2]|0;
 $195 = (_calloc($194,8)|0);
 $61 = $195;
 $196 = HEAP32[$59>>2]|0;
 $197 = (_calloc($196,8)|0);
 $62 = $197;
 $198 = HEAP32[$59>>2]|0;
 $199 = (_calloc($198,8)|0);
 $63 = $199;
 $200 = $27;
 $201 = $28;
 $202 = $29;
 $203 = $30;
 $204 = $31;
 $205 = $33;
 $206 = $34;
 $207 = $35;
 $208 = HEAP32[$38>>2]|0;
 $209 = HEAP32[$59>>2]|0;
 $210 = $60;
 $211 = $32;
 $212 = $61;
 $213 = $62;
 $214 = $63;
 _AT_single_impact_local_dose_distrib($200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214);
 $215 = $27;
 $216 = (_calloc($215,8)|0);
 $64 = $216;
 $217 = $30;
 $218 = +HEAPF64[$217>>3];
 $219 = $218 < 0.0;
 L16: do {
  if ($219) {
   $220 = $27;
   $221 = (_calloc($220,8)|0);
   $65 = $221;
   $54 = 0;
   while(1) {
    $222 = $54;
    $223 = $27;
    $224 = ($222|0)<($223|0);
    if (!($224)) {
     break;
    }
    $225 = $30;
    $226 = $54;
    $227 = (($225) + ($226<<3)|0);
    $228 = +HEAPF64[$227>>3];
    $229 = -1.0 * $228;
    $230 = $65;
    $231 = $54;
    $232 = (($230) + ($231<<3)|0);
    HEAPF64[$232>>3] = $229;
    $233 = $54;
    $234 = (($233) + 1)|0;
    $54 = $234;
   }
   $235 = $27;
   $236 = $28;
   $237 = $29;
   $238 = $65;
   $239 = $31;
   $240 = $32;
   $241 = $64;
   _AT_fluence_cm2_from_dose_Gy($235,$236,$237,$238,$239,$240,$241);
   $242 = $65;
   _free($242);
  } else {
   $54 = 0;
   while(1) {
    $243 = $54;
    $244 = $27;
    $245 = ($243|0)<($244|0);
    if (!($245)) {
     break L16;
    }
    $246 = $30;
    $247 = $54;
    $248 = (($246) + ($247<<3)|0);
    $249 = +HEAPF64[$248>>3];
    $250 = $64;
    $251 = $54;
    $252 = (($250) + ($251<<3)|0);
    HEAPF64[$252>>3] = $249;
    $253 = $54;
    $254 = (($253) + 1)|0;
    $54 = $254;
   }
  }
 } while(0);
 $255 = $27;
 $256 = $28;
 $257 = $29;
 $258 = $64;
 $259 = $31;
 $260 = $35;
 $261 = $32;
 $262 = (+_AT_mean_number_of_tracks_contrib($255,$256,$257,$258,$259,$260,$261));
 $263 = $49;
 HEAPF64[$263>>3] = $262;
 $264 = $64;
 _free($264);
 $265 = $40;
 $266 = $265&1;
 if ($266) {
  $267 = $55;
  $268 = $49;
  $269 = +HEAPF64[$268>>3];
  HEAPF64[$vararg_buffer43>>3] = $269;
  (_fprintf($267,72350,$vararg_buffer43)|0);
 }
 $270 = $49;
 $271 = +HEAPF64[$270>>3];
 $272 = $39;
 $273 = HEAP32[$38>>2]|0;
 $274 = HEAP32[$59>>2]|0;
 $275 = $61;
 $276 = $62;
 $277 = $63;
 $278 = $50;
 $279 = $51;
 _AT_n_bins_for_low_fluence_local_dose_distribution($271,$272,$273,$274,$275,$276,$277,$66,$278,$279);
 $280 = $40;
 $281 = $280&1;
 if ($281) {
  $282 = $55;
  $283 = $50;
  $284 = +HEAPF64[$283>>3];
  HEAPF64[$vararg_buffer46>>3] = $284;
  (_fprintf($282,72388,$vararg_buffer46)|0);
  $285 = $55;
  $286 = $51;
  $287 = HEAP32[$286>>2]|0;
  HEAP32[$vararg_buffer49>>2] = $287;
  (_fprintf($285,72427,$vararg_buffer49)|0);
 }
 $288 = HEAP32[$66>>2]|0;
 $289 = (_calloc($288,8)|0);
 $67 = $289;
 $290 = HEAP32[$66>>2]|0;
 $291 = (_calloc($290,8)|0);
 $68 = $291;
 $292 = HEAP32[$66>>2]|0;
 $293 = (_calloc($292,8)|0);
 $69 = $293;
 $294 = HEAP32[$66>>2]|0;
 $295 = (_calloc($294,8)|0);
 $70 = $295;
 $296 = HEAP32[$66>>2]|0;
 $297 = (_calloc($296,8)|0);
 $71 = $297;
 HEAPF64[$72>>3] = 0.0;
 $298 = HEAP32[$59>>2]|0;
 $299 = HEAP32[$38>>2]|0;
 $300 = $61;
 $301 = $62;
 $302 = $63;
 $303 = HEAP32[$66>>2]|0;
 $304 = $67;
 $305 = $68;
 $306 = $69;
 _AT_low_fluence_local_dose_distribution($298,$299,$300,$301,$302,$303,$304,$305,$306);
 $307 = $49;
 $308 = +HEAPF64[$307>>3];
 $309 = HEAP32[$66>>2]|0;
 $310 = $67;
 $311 = $68;
 $312 = $69;
 $313 = $70;
 $314 = $71;
 $315 = $46;
 $316 = $40;
 $317 = $316&1;
 $318 = $41;
 $319 = $318&1;
 $320 = $42;
 $321 = $43;
 $322 = $321&1;
 _AT_SuccessiveConvolutions($308,$309,$38,$59,$310,$311,$312,$72,$313,$314,$315,$317,$319,$320,$322);
 $323 = HEAP32[$59>>2]|0;
 $73 = $323;
 $324 = $73;
 $325 = (_calloc($324,8)|0);
 $74 = $325;
 $326 = $73;
 $327 = $67;
 $328 = $69;
 $329 = $36;
 $330 = $37;
 $331 = $44;
 $332 = $331&1;
 $333 = $74;
 _AT_get_response_distribution_from_dose_distribution($326,$327,$328,$329,$330,$332,$333);
 $334 = $73;
 $335 = $68;
 $336 = $69;
 $337 = $74;
 $338 = (+_AT_get_ion_response_from_response_distribution($334,$335,$336,$337));
 $339 = $47;
 HEAPF64[$339>>3] = $338;
 $340 = $73;
 $341 = $67;
 $342 = $68;
 $343 = $69;
 $344 = $36;
 $345 = $37;
 $346 = $44;
 $347 = $346&1;
 $348 = (+_AT_get_gamma_response_for_average_dose($340,$341,$342,$343,$344,$345,$347));
 $349 = $48;
 HEAPF64[$349>>3] = $348;
 $350 = $47;
 $351 = +HEAPF64[$350>>3];
 $352 = $48;
 $353 = +HEAPF64[$352>>3];
 $354 = $351 / $353;
 $355 = $45;
 HEAPF64[$355>>3] = $354;
 HEAPF64[$75>>3] = 0.0;
 $76 = 0.0;
 $77 = 1;
 HEAPF64[$78>>3] = 0.0;
 $356 = $36;
 $357 = $37;
 _AT_gamma_response(1,$78,$356,$357,0,$75);
 $358 = +HEAPF64[$75>>3];
 $359 = $358 > 0.0;
 if ($359) {
  $360 = +HEAPF64[$75>>3];
  $361 = (+Math_log((+$360)));
  $76 = $361;
 }
 $362 = +HEAPF64[$72>>3];
 $363 = $76;
 $364 = $362 * $363;
 $365 = $52;
 HEAPF64[$365>>3] = $364;
 $54 = 0;
 while(1) {
  $366 = $54;
  $367 = $73;
  $368 = ($366|0)<($367|0);
  if (!($368)) {
   break;
  }
  $79 = 0.0;
  $369 = $74;
  $370 = $54;
  $371 = (($369) + ($370<<3)|0);
  $372 = +HEAPF64[$371>>3];
  $373 = $372 > 0.0;
  if ($373) {
   $374 = $74;
   $375 = $54;
   $376 = (($374) + ($375<<3)|0);
   $377 = +HEAPF64[$376>>3];
   $378 = (+Math_log((+$377)));
   $79 = $378;
  }
  $379 = $69;
  $380 = $54;
  $381 = (($379) + ($380<<3)|0);
  $382 = +HEAPF64[$381>>3];
  $383 = $79;
  $384 = $382 * $383;
  $385 = $68;
  $386 = $54;
  $387 = (($385) + ($386<<3)|0);
  $388 = +HEAPF64[$387>>3];
  $389 = $384 * $388;
  $390 = $52;
  $391 = +HEAPF64[$390>>3];
  $392 = $391 + $389;
  HEAPF64[$390>>3] = $392;
  $393 = $54;
  $394 = (($393) + 1)|0;
  $54 = $394;
 }
 $395 = $52;
 $396 = +HEAPF64[$395>>3];
 $397 = (+Math_exp((+$396)));
 $398 = $52;
 HEAPF64[$398>>3] = $397;
 $399 = +HEAPF64[$72>>3];
 $400 = +HEAPF64[$75>>3];
 $401 = $399 * $400;
 $402 = $53;
 HEAPF64[$402>>3] = $401;
 $54 = 0;
 while(1) {
  $403 = $54;
  $404 = $73;
  $405 = ($403|0)<($404|0);
  if (!($405)) {
   break;
  }
  $406 = $69;
  $407 = $54;
  $408 = (($406) + ($407<<3)|0);
  $409 = +HEAPF64[$408>>3];
  $410 = $74;
  $411 = $54;
  $412 = (($410) + ($411<<3)|0);
  $413 = +HEAPF64[$412>>3];
  $414 = $409 * $413;
  $415 = $68;
  $416 = $54;
  $417 = (($415) + ($416<<3)|0);
  $418 = +HEAPF64[$417>>3];
  $419 = $414 * $418;
  $420 = $53;
  $421 = +HEAPF64[$420>>3];
  $422 = $421 + $419;
  HEAPF64[$420>>3] = $422;
  $423 = $54;
  $424 = (($423) + 1)|0;
  $54 = $424;
 }
 $425 = $60;
 _free($425);
 $426 = $61;
 _free($426);
 $427 = $62;
 _free($427);
 $428 = $63;
 _free($428);
 $429 = $67;
 _free($429);
 $430 = $68;
 _free($430);
 $431 = $69;
 _free($431);
 $432 = $70;
 _free($432);
 $433 = $71;
 _free($433);
 $434 = $74;
 _free($434);
 $435 = $40;
 $436 = $435&1;
 if (!($436)) {
  STACKTOP = sp;return;
 }
 $437 = $55;
 (_fclose($437)|0);
 STACKTOP = sp;return;
}
function _AT_run_CPPSS_method($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = +$13;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0;
 var $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0;
 var $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0;
 var $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0;
 var $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0, $403 = 0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $vararg_buffer54 = sp + 320|0;
 $vararg_buffer52 = sp + 312|0;
 $vararg_buffer50 = sp + 304|0;
 $vararg_buffer48 = sp + 296|0;
 $vararg_buffer42 = sp + 264|0;
 $vararg_buffer39 = sp + 256|0;
 $vararg_buffer33 = sp + 224|0;
 $vararg_buffer30 = sp + 216|0;
 $vararg_buffer27 = sp + 208|0;
 $vararg_buffer24 = sp + 200|0;
 $vararg_buffer21 = sp + 192|0;
 $vararg_buffer18 = sp + 184|0;
 $vararg_buffer16 = sp + 176|0;
 $vararg_buffer13 = sp + 168|0;
 $vararg_buffer11 = sp + 160|0;
 $vararg_buffer9 = sp + 152|0;
 $vararg_buffer7 = sp + 144|0;
 $vararg_buffer5 = sp + 136|0;
 $vararg_buffer3 = sp + 128|0;
 $vararg_buffer1 = sp + 120|0;
 $vararg_buffer = sp + 112|0;
 $46 = sp + 364|0;
 $47 = sp + 88|0;
 $48 = sp + 360|0;
 $56 = sp + 64|0;
 $58 = sp + 48|0;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 $20 = $3;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 (_printf(72452,$vararg_buffer)|0);
 (_printf(72452,$vararg_buffer1)|0);
 (_printf(72515,$vararg_buffer3)|0);
 (_printf(72550,$vararg_buffer5)|0);
 $34 = 0;
 $69 = $31;
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = (_fopen(72552,81473)|0);
  $34 = $71;
  $72 = $34;
  $73 = ($72|0)==(0|0);
  if ($73) {
   STACKTOP = sp;return;
  }
 }
 $74 = $17;
 $75 = $18;
 $76 = $19;
 $77 = $21;
 $78 = $23;
 $79 = $24;
 $80 = $25;
 $81 = $29;
 $82 = $22;
 $83 = (_AT_n_bins_for_single_impact_local_dose_distrib($74,$75,$76,$77,$78,$79,$80,$81,$82)|0);
 $35 = $83;
 $84 = $17;
 $85 = $84<<3;
 $86 = (_calloc($85,8)|0);
 $36 = $86;
 $87 = $17;
 $88 = $18;
 $89 = $19;
 $90 = $21;
 $91 = $23;
 $92 = $24;
 $93 = $25;
 $94 = $22;
 $95 = $36;
 _AT_RDD_f1_parameters_mixed_field($87,$88,$89,$90,$91,$92,$93,$94,$95);
 $96 = $35;
 $97 = (_calloc($96,8)|0);
 $37 = $97;
 $98 = $35;
 $99 = (_calloc($98,8)|0);
 $38 = $99;
 $100 = $35;
 $101 = (_calloc($100,8)|0);
 $39 = $101;
 $102 = $17;
 $103 = $18;
 $104 = $19;
 $105 = $20;
 $106 = $21;
 $107 = $23;
 $108 = $24;
 $109 = $25;
 $110 = $29;
 $111 = $35;
 $112 = $36;
 $113 = $22;
 $114 = $37;
 $115 = $38;
 $116 = $39;
 _AT_single_impact_local_dose_distrib($102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116);
 $117 = $17;
 $118 = (_calloc($117,8)|0);
 $40 = $118;
 $119 = $17;
 $120 = (_calloc($119,8)|0);
 $41 = $120;
 $121 = $20;
 $122 = +HEAPF64[$121>>3];
 $123 = $122 < 0.0;
 $42 = 0;
 if ($123) {
  while(1) {
   $124 = $42;
   $125 = $17;
   $126 = ($124|0)<($125|0);
   if (!($126)) {
    break;
   }
   $127 = $20;
   $128 = $42;
   $129 = (($127) + ($128<<3)|0);
   $130 = +HEAPF64[$129>>3];
   $131 = -1.0 * $130;
   $132 = $41;
   $133 = $42;
   $134 = (($132) + ($133<<3)|0);
   HEAPF64[$134>>3] = $131;
   $135 = $42;
   $136 = (($135) + 1)|0;
   $42 = $136;
  }
  $137 = $17;
  $138 = $18;
  $139 = $19;
  $140 = $41;
  $141 = $21;
  $142 = $22;
  $143 = $40;
  _AT_fluence_cm2_from_dose_Gy($137,$138,$139,$140,$141,$142,$143);
 } else {
  while(1) {
   $144 = $42;
   $145 = $17;
   $146 = ($144|0)<($145|0);
   if (!($146)) {
    break;
   }
   $147 = $20;
   $148 = $42;
   $149 = (($147) + ($148<<3)|0);
   $150 = +HEAPF64[$149>>3];
   $151 = $40;
   $152 = $42;
   $153 = (($151) + ($152<<3)|0);
   HEAPF64[$153>>3] = $150;
   $154 = $42;
   $155 = (($154) + 1)|0;
   $42 = $155;
  }
  $156 = $17;
  $157 = $18;
  $158 = $19;
  $159 = $40;
  $160 = $21;
  $161 = $22;
  $162 = $41;
  _AT_dose_Gy_from_fluence_cm2($156,$157,$158,$159,$160,$161,$162);
 }
 $163 = $17;
 $164 = (_calloc($163,8)|0);
 $43 = $164;
 $165 = $17;
 $166 = $40;
 $167 = $43;
 _AT_normalize($165,$166,$167);
 $168 = $17;
 $169 = $18;
 $170 = $19;
 $171 = $40;
 $172 = $21;
 $173 = $25;
 $174 = $22;
 $175 = (+_AT_mean_number_of_tracks_contrib($168,$169,$170,$171,$172,$173,$174));
 $44 = $175;
 $176 = $40;
 _free($176);
 $177 = $41;
 _free($177);
 $178 = $17;
 $179 = (_calloc($178,8)|0);
 $45 = $179;
 $180 = $43;
 $181 = +HEAPF64[$180>>3];
 $182 = $45;
 HEAPF64[$182>>3] = $181;
 $183 = $17;
 $184 = ($183|0)>(1);
 L17: do {
  if ($184) {
   $42 = 1;
   while(1) {
    $185 = $42;
    $186 = $17;
    $187 = ($185|0)<($186|0);
    if (!($187)) {
     break L17;
    }
    $188 = $45;
    $189 = $42;
    $190 = (($189) - 1)|0;
    $191 = (($188) + ($190<<3)|0);
    $192 = +HEAPF64[$191>>3];
    $193 = $43;
    $194 = $42;
    $195 = (($193) + ($194<<3)|0);
    $196 = +HEAPF64[$195>>3];
    $197 = $192 + $196;
    $198 = $45;
    $199 = $42;
    $200 = (($198) + ($199<<3)|0);
    $201 = +HEAPF64[$200>>3];
    $202 = $201 + $197;
    HEAPF64[$200>>3] = $202;
    $203 = $42;
    $204 = (($203) + 1)|0;
    $42 = $204;
   }
  }
 } while(0);
 $205 = $43;
 _free($205);
 $206 = $44;
 $207 = $30;
 $208 = $29;
 $209 = $35;
 $210 = $37;
 $211 = $38;
 $212 = $39;
 _AT_n_bins_for_low_fluence_local_dose_distribution($206,$207,$208,$209,$210,$211,$212,$46,$47,$48);
 $213 = HEAP32[$46>>2]|0;
 $214 = (_calloc($213,8)|0);
 $49 = $214;
 $215 = HEAP32[$46>>2]|0;
 $216 = (_calloc($215,8)|0);
 $50 = $216;
 $217 = HEAP32[$46>>2]|0;
 $218 = (_calloc($217,8)|0);
 $51 = $218;
 $52 = 0.0;
 $219 = $35;
 $220 = $29;
 $221 = $37;
 $222 = $38;
 $223 = $39;
 $224 = HEAP32[$46>>2]|0;
 $225 = $49;
 $226 = $50;
 $227 = $51;
 _AT_low_fluence_local_dose_distribution($219,$220,$221,$222,$223,$224,$225,$226,$227);
 $42 = 0;
 while(1) {
  $228 = $42;
  $229 = HEAP32[$46>>2]|0;
  $230 = ($228|0)<($229|0);
  if (!($230)) {
   break;
  }
  $231 = $51;
  $232 = $42;
  $233 = (($231) + ($232<<3)|0);
  HEAPF64[$233>>3] = 0.0;
  $234 = $42;
  $235 = (($234) + 1)|0;
  $42 = $235;
 }
 $236 = $32;
 $237 = ($236|0)!=(0);
 (_printf(72550,$vararg_buffer7)|0);
 if ($237) {
  $238 = $32;
  HEAP32[$vararg_buffer9>>2] = $238;
  (_printf(72562,$vararg_buffer9)|0);
 } else {
  (_printf(72619,$vararg_buffer11)|0);
 }
 $239 = (_gsl_rng_alloc(71244)|0);
 $53 = $239;
 $240 = $53;
 _gsl_rng_set($240,12345678);
 $59 = 1;
 $241 = $49;
 $242 = HEAP32[$46>>2]|0;
 $243 = (($242) - 1)|0;
 $244 = (($241) + ($243<<3)|0);
 $245 = +HEAPF64[$244>>3];
 $246 = (+_llvm_log10_f64((+$245)));
 $62 = $246;
 $247 = $49;
 $248 = +HEAPF64[$247>>3];
 $249 = (+_llvm_log10_f64((+$248)));
 $63 = $249;
 $250 = $62;
 $251 = $63;
 $252 = $250 - $251;
 $253 = HEAP32[$46>>2]|0;
 $254 = (+($253|0));
 $255 = $252 / $254;
 $64 = $255;
 $42 = 0;
 while(1) {
  $256 = $42;
  $257 = $28;
  $258 = ($256|0)<($257|0);
  if (!($258)) {
   break;
  }
  $259 = $53;
  $260 = $44;
  $261 = (_gsl_ran_poisson($259,$260)|0);
  $54 = $261;
  $55 = 0.0;
  $57 = 1.0;
  $65 = 0;
  while(1) {
   $262 = $65;
   $263 = $54;
   $264 = ($262|0)<($263|0);
   if (!($264)) {
    break;
   }
   $265 = $53;
   $266 = (+_gsl_rng_uniform($265));
   $60 = $266;
   $66 = 0;
   while(1) {
    $267 = $66;
    $268 = $17;
    $269 = ($267|0)<($268|0);
    if (!($269)) {
     break;
    }
    $270 = $45;
    $271 = $66;
    $272 = (($270) + ($271<<3)|0);
    $273 = +HEAPF64[$272>>3];
    $274 = $60;
    $275 = $273 >= $274;
    if ($275) {
     break;
    }
    $276 = $66;
    $277 = (($276) + 1)|0;
    $66 = $277;
   }
   $278 = $53;
   $279 = (+_gsl_rng_uniform($278));
   $60 = $279;
   $280 = $32;
   $281 = ($280|0)!=(0);
   if ($281) {
    $282 = $32;
    $283 = (+($282|0));
    $284 = $60;
    $285 = $32;
    $286 = (+($285|0));
    $287 = $286 - 1.0;
    $288 = (+Math_pow((+$284),(+$287)));
    $289 = $283 * $288;
    $290 = $57;
    $291 = $290 * $289;
    $57 = $291;
    $292 = $60;
    $293 = $32;
    $294 = (+($293|0));
    $295 = (+Math_pow((+$292),(+$294)));
    $60 = $295;
   }
   $296 = $36;
   $297 = $66;
   $298 = ($297*9)|0;
   $299 = (($298) + 2)|0;
   $300 = (($296) + ($299<<3)|0);
   $301 = +HEAPF64[$300>>3];
   $302 = $60;
   $303 = (+Math_sqrt((+$302)));
   $304 = $301 * $303;
   HEAPF64[$58>>3] = $304;
   $305 = $59;
   $306 = $18;
   $307 = $66;
   $308 = (($306) + ($307<<3)|0);
   $309 = +HEAPF64[$308>>3];
   $310 = $19;
   $311 = $66;
   $312 = (($310) + ($311<<2)|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = $21;
   $315 = $23;
   $316 = $24;
   $317 = $25;
   $318 = $22;
   (_AT_D_RDD_Gy($305,$58,$309,$313,$314,$315,$316,$317,$318,$56)|0);
   $319 = +HEAPF64[$56>>3];
   $320 = $55;
   $321 = $320 + $319;
   $55 = $321;
   $322 = $65;
   $323 = (($322) + 1)|0;
   $65 = $323;
  }
  $324 = $55;
  $325 = $324 == 0.0;
  if ($325) {
   $326 = $57;
   $327 = $52;
   $328 = $327 + $326;
   $52 = $328;
  } else {
   $329 = $55;
   $330 = (+_llvm_log10_f64((+$329)));
   $331 = $63;
   $332 = $330 - $331;
   $333 = $64;
   $334 = 3.0 * $333;
   $335 = $334 / 2.0;
   $336 = $332 + $335;
   $337 = $64;
   $338 = $336 / $337;
   $339 = (+Math_floor((+$338)));
   $340 = (~~(($339)));
   $61 = $340;
   $341 = $61;
   $342 = HEAP32[$46>>2]|0;
   $343 = ($341|0)>($342|0);
   if ($343) {
    $344 = HEAP32[$46>>2]|0;
    $61 = $344;
   }
   $345 = $57;
   $346 = $50;
   $347 = $61;
   $348 = (($347) - 1)|0;
   $349 = (($346) + ($348<<3)|0);
   $350 = +HEAPF64[$349>>3];
   $351 = $345 / $350;
   $352 = $51;
   $353 = $61;
   $354 = (($353) - 1)|0;
   $355 = (($352) + ($354<<3)|0);
   $356 = +HEAPF64[$355>>3];
   $357 = $356 + $351;
   HEAPF64[$355>>3] = $357;
  }
  $358 = $42;
  $359 = (($358|0) % 100)&-1;
  $360 = ($359|0)==(0);
  if ($360) {
   $361 = $42;
   HEAP32[$vararg_buffer13>>2] = $361;
   (_printf(72651,$vararg_buffer13)|0);
  }
  $362 = $42;
  $363 = (($362) + 1)|0;
  $42 = $363;
 }
 $67 = 0.0;
 $68 = 0.0;
 $42 = 0;
 while(1) {
  $364 = $42;
  $365 = HEAP32[$46>>2]|0;
  $366 = ($364|0)<($365|0);
  if (!($366)) {
   break;
  }
  $367 = $50;
  $368 = $42;
  $369 = (($367) + ($368<<3)|0);
  $370 = +HEAPF64[$369>>3];
  $371 = $51;
  $372 = $42;
  $373 = (($371) + ($372<<3)|0);
  $374 = +HEAPF64[$373>>3];
  $375 = $370 * $374;
  $376 = $67;
  $377 = $376 + $375;
  $67 = $377;
  $378 = $42;
  $379 = (($378) + 1)|0;
  $42 = $379;
 }
 $380 = $52;
 $381 = $67;
 $382 = $381 + $380;
 $67 = $382;
 $42 = 0;
 while(1) {
  $383 = $42;
  $384 = HEAP32[$46>>2]|0;
  $385 = ($383|0)<($384|0);
  if (!($385)) {
   break;
  }
  $386 = $67;
  $387 = $51;
  $388 = $42;
  $389 = (($387) + ($388<<3)|0);
  $390 = +HEAPF64[$389>>3];
  $391 = $390 / $386;
  HEAPF64[$389>>3] = $391;
  $392 = $49;
  $393 = $42;
  $394 = (($392) + ($393<<3)|0);
  $395 = +HEAPF64[$394>>3];
  $396 = $50;
  $397 = $42;
  $398 = (($396) + ($397<<3)|0);
  $399 = +HEAPF64[$398>>3];
  $400 = $395 * $399;
  $401 = $51;
  $402 = $42;
  $403 = (($401) + ($402<<3)|0);
  $404 = +HEAPF64[$403>>3];
  $405 = $400 * $404;
  $406 = $68;
  $407 = $406 + $405;
  $68 = $407;
  $408 = $42;
  $409 = (($408) + 1)|0;
  $42 = $409;
 }
 $410 = $31;
 $411 = ($410|0)!=(0);
 if ($411) {
  $412 = $34;
  (_fprintf($412,72666,$vararg_buffer16)|0);
  $413 = $34;
  $414 = $28;
  HEAP32[$vararg_buffer18>>2] = $414;
  (_fprintf($413,72673,$vararg_buffer18)|0);
  $415 = $34;
  $416 = $68;
  HEAPF64[$vararg_buffer21>>3] = $416;
  (_fprintf($415,72694,$vararg_buffer21)|0);
  $417 = $34;
  $418 = $67;
  HEAPF64[$vararg_buffer24>>3] = $418;
  (_fprintf($417,72717,$vararg_buffer24)|0);
  $419 = $34;
  $420 = HEAP32[$46>>2]|0;
  HEAP32[$vararg_buffer27>>2] = $420;
  (_fprintf($419,72740,$vararg_buffer27)|0);
  $421 = $34;
  $422 = $52;
  HEAPF64[$vararg_buffer30>>3] = $422;
  (_fprintf($421,72756,$vararg_buffer30)|0);
  $42 = 0;
  while(1) {
   $423 = $42;
   $424 = HEAP32[$46>>2]|0;
   $425 = ($423|0)<($424|0);
   $426 = $34;
   if (!($425)) {
    break;
   }
   $427 = $42;
   $428 = (($427) + 1)|0;
   $429 = $49;
   $430 = $42;
   $431 = (($429) + ($430<<3)|0);
   $432 = +HEAPF64[$431>>3];
   $433 = $50;
   $434 = $42;
   $435 = (($433) + ($434<<3)|0);
   $436 = +HEAPF64[$435>>3];
   $437 = $51;
   $438 = $42;
   $439 = (($437) + ($438<<3)|0);
   $440 = +HEAPF64[$439>>3];
   HEAP32[$vararg_buffer33>>2] = $428;
   $vararg_ptr36 = ((($vararg_buffer33)) + 8|0);
   HEAPF64[$vararg_ptr36>>3] = $432;
   $vararg_ptr37 = ((($vararg_buffer33)) + 16|0);
   HEAPF64[$vararg_ptr37>>3] = $436;
   $vararg_ptr38 = ((($vararg_buffer33)) + 24|0);
   HEAPF64[$vararg_ptr38>>3] = $440;
   (_fprintf($426,72767,$vararg_buffer33)|0);
   $441 = $42;
   $442 = (($441) + 1)|0;
   $42 = $442;
  }
  $443 = $35;
  HEAP32[$vararg_buffer39>>2] = $443;
  (_fprintf($426,72793,$vararg_buffer39)|0);
  $42 = 0;
  while(1) {
   $444 = $42;
   $445 = $35;
   $446 = ($444|0)<($445|0);
   $447 = $34;
   if (!($446)) {
    break;
   }
   $448 = $42;
   $449 = (($448) + 1)|0;
   $450 = $37;
   $451 = $42;
   $452 = (($450) + ($451<<3)|0);
   $453 = +HEAPF64[$452>>3];
   $454 = $38;
   $455 = $42;
   $456 = (($454) + ($455<<3)|0);
   $457 = +HEAPF64[$456>>3];
   $458 = $39;
   $459 = $42;
   $460 = (($458) + ($459<<3)|0);
   $461 = +HEAPF64[$460>>3];
   HEAP32[$vararg_buffer42>>2] = $449;
   $vararg_ptr45 = ((($vararg_buffer42)) + 8|0);
   HEAPF64[$vararg_ptr45>>3] = $453;
   $vararg_ptr46 = ((($vararg_buffer42)) + 16|0);
   HEAPF64[$vararg_ptr46>>3] = $457;
   $vararg_ptr47 = ((($vararg_buffer42)) + 24|0);
   HEAPF64[$vararg_ptr47>>3] = $461;
   (_fprintf($447,72767,$vararg_buffer42)|0);
   $462 = $42;
   $463 = (($462) + 1)|0;
   $42 = $463;
  }
  (_fprintf($447,72550,$vararg_buffer48)|0);
  $464 = $34;
  (_fprintf($464,72809,$vararg_buffer50)|0);
  $465 = $34;
  (_fprintf($465,72838,$vararg_buffer52)|0);
  $466 = $34;
  (_fprintf($466,72838,$vararg_buffer54)|0);
  $467 = $34;
  (_fclose($467)|0);
 }
 $468 = $45;
 _free($468);
 STACKTOP = sp;return;
}
function _AT_GSM_sample_particle_positions($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $21 = (_gsl_rng_alloc(71244)|0);
 $14 = $21;
 $22 = $14;
 $23 = $10;
 $24 = HEAP32[$23>>2]|0;
 _gsl_rng_set($22,$24);
 $25 = $7;
 $26 = $8;
 $27 = (+_AT_sum($25,$26));
 $15 = $27;
 $28 = $7;
 $29 = (_calloc($28,8)|0);
 $16 = $29;
 $30 = $7;
 $31 = $8;
 $32 = $16;
 _AT_normalize($30,$31,$32);
 $33 = $9;
 $34 = 100.0 * $33;
 $35 = (+_gsl_pow_2($34));
 $19 = $35;
 $18 = 0;
 while(1) {
  $36 = $18;
  $37 = $7;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $19;
  $40 = $15;
  $41 = $39 * $40;
  $42 = $16;
  $43 = $18;
  $44 = (($42) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $41 * $45;
  $17 = $46;
  $47 = $14;
  $48 = $17;
  $49 = (_gsl_ran_poisson($47,$48)|0);
  $50 = $11;
  $51 = $18;
  $52 = (($50) + ($51<<2)|0);
  HEAP32[$52>>2] = $49;
  $53 = $11;
  $54 = $18;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_calloc($56,8)|0);
  $58 = $12;
  $59 = $18;
  $60 = (($58) + ($59<<2)|0);
  HEAP32[$60>>2] = $57;
  $61 = $11;
  $62 = $18;
  $63 = (($61) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_calloc($64,8)|0);
  $66 = $13;
  $67 = $18;
  $68 = (($66) + ($67<<2)|0);
  HEAP32[$68>>2] = $65;
  $69 = $18;
  $70 = (($69) + 1)|0;
  $18 = $70;
 }
 $71 = $16;
 _free($71);
 $18 = 0;
 while(1) {
  $72 = $18;
  $73 = $7;
  $74 = ($72|0)<($73|0);
  if (!($74)) {
   break;
  }
  $20 = 0;
  while(1) {
   $75 = $20;
   $76 = $11;
   $77 = $18;
   $78 = (($76) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($75|0)<($79|0);
   if (!($80)) {
    break;
   }
   $81 = $14;
   $82 = (+_gsl_rng_uniform_pos($81));
   $83 = $9;
   $84 = $82 * $83;
   $85 = $12;
   $86 = $18;
   $87 = (($85) + ($86<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $20;
   $90 = (($88) + ($89<<3)|0);
   HEAPF64[$90>>3] = $84;
   $91 = $14;
   $92 = (+_gsl_rng_uniform_pos($91));
   $93 = $9;
   $94 = $92 * $93;
   $95 = $13;
   $96 = $18;
   $97 = (($95) + ($96<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $20;
   $100 = (($98) + ($99<<3)|0);
   HEAPF64[$100>>3] = $94;
   $101 = $20;
   $102 = (($101) + 1)|0;
   $20 = $102;
  }
  $103 = $18;
  $104 = (($103) + 1)|0;
  $18 = $104;
 }
 $105 = $14;
 $106 = (_gsl_rng_get($105)|0);
 $107 = $10;
 HEAP32[$107>>2] = $106;
 $108 = $14;
 _gsl_rng_free($108);
 STACKTOP = sp;return;
}
function _AT_GSM_dose_grid_from_particles_positions($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = +$12;
 $13 = $13|0;
 var $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0;
 var $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0;
 var $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0.0;
 var $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $47 = $14;
 $48 = (_calloc($47,8)|0);
 $32 = $48;
 $49 = $14;
 $50 = $15;
 $51 = $17;
 $52 = $20;
 $53 = $32;
 _AT_max_electron_ranges_m($49,$50,$51,$52,$53);
 $33 = 0.0;
 $28 = 0;
 while(1) {
  $54 = $28;
  $55 = $14;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  $57 = $33;
  $58 = $32;
  $59 = $28;
  $60 = (($58) + ($59<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $57 > $61;
  if ($62) {
   $63 = $33;
   $68 = $63;
  } else {
   $64 = $32;
   $65 = $28;
   $66 = (($64) + ($65<<3)|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $67;
  }
  $33 = $68;
  $69 = $28;
  $70 = (($69) + 1)|0;
  $28 = $70;
 }
 $71 = $14;
 $72 = (_calloc($71,4)|0);
 $34 = $72;
 $73 = $14;
 $74 = (_calloc($73,4)|0);
 $35 = $74;
 $75 = $14;
 $76 = (_calloc($75,4)|0);
 $36 = $76;
 $28 = 0;
 while(1) {
  $77 = $28;
  $78 = $14;
  $79 = ($77|0)<($78|0);
  if (!($79)) {
   break;
  }
  $80 = $35;
  $81 = $28;
  $82 = (($80) + ($81<<2)|0);
  HEAP32[$82>>2] = 0;
  $83 = $36;
  $84 = $28;
  $85 = (($83) + ($84<<2)|0);
  HEAP32[$85>>2] = 0;
  $86 = $28;
  $87 = (($86) + 1)|0;
  $28 = $87;
 }
 $29 = 0;
 while(1) {
  $88 = $29;
  $89 = $25;
  $90 = ($88|0)<($89|0);
  if (!($90)) {
   break;
  }
  $91 = $33;
  $92 = $29;
  $93 = (+($92|0));
  $94 = $93 + 0.5;
  $95 = $26;
  $96 = $94 * $95;
  $97 = $91 + $96;
  $37 = $97;
  $28 = 0;
  while(1) {
   $98 = $28;
   $99 = $25;
   $100 = ($98|0)<($99|0);
   if (!($100)) {
    break;
   }
   $101 = $33;
   $102 = $28;
   $103 = (+($102|0));
   $104 = $103 + 0.5;
   $105 = $26;
   $106 = $104 * $105;
   $107 = $101 + $106;
   $38 = $107;
   $30 = 0;
   while(1) {
    $108 = $30;
    $109 = $14;
    $110 = ($108|0)<($109|0);
    if (!($110)) {
     break;
    }
    $31 = 0;
    while(1) {
     $111 = $31;
     $112 = $22;
     $113 = $30;
     $114 = (($112) + ($113<<2)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($111|0)<($115|0);
     if (!($116)) {
      break;
     }
     $117 = $23;
     $118 = $30;
     $119 = (($117) + ($118<<2)|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $31;
     $122 = (($120) + ($121<<3)|0);
     $123 = +HEAPF64[$122>>3];
     $124 = $38;
     $125 = $123 - $124;
     $126 = (+_gsl_pow_2($125));
     $127 = $24;
     $128 = $30;
     $129 = (($127) + ($128<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $31;
     $132 = (($130) + ($131<<3)|0);
     $133 = +HEAPF64[$132>>3];
     $134 = $37;
     $135 = $133 - $134;
     $136 = (+_gsl_pow_2($135));
     $137 = $126 + $136;
     $138 = (+Math_sqrt((+$137)));
     $39 = $138;
     $139 = $39;
     $140 = $32;
     $141 = $30;
     $142 = (($140) + ($141<<3)|0);
     $143 = +HEAPF64[$142>>3];
     $144 = $139 <= $143;
     if ($144) {
      $145 = $35;
      $146 = $30;
      $147 = (($145) + ($146<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (($148) + 1)|0;
      HEAP32[$147>>2] = $149;
     }
     $150 = $31;
     $151 = (($150) + 1)|0;
     $31 = $151;
    }
    $152 = $30;
    $153 = (($152) + 1)|0;
    $30 = $153;
   }
   $154 = $28;
   $155 = (($154) + 1)|0;
   $28 = $155;
  }
  $156 = $29;
  $157 = (($156) + 1)|0;
  $29 = $157;
 }
 $30 = 0;
 while(1) {
  $158 = $30;
  $159 = $14;
  $160 = ($158|0)<($159|0);
  if (!($160)) {
   break;
  }
  $161 = $35;
  $162 = $30;
  $163 = (($161) + ($162<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (_calloc($164,8)|0);
  $166 = $34;
  $167 = $30;
  $168 = (($166) + ($167<<2)|0);
  HEAP32[$168>>2] = $165;
  $169 = $30;
  $170 = (($169) + 1)|0;
  $30 = $170;
 }
 $29 = 0;
 while(1) {
  $171 = $29;
  $172 = $25;
  $173 = ($171|0)<($172|0);
  if (!($173)) {
   break;
  }
  $174 = $33;
  $175 = $29;
  $176 = (+($175|0));
  $177 = $176 + 0.5;
  $178 = $26;
  $179 = $177 * $178;
  $180 = $174 + $179;
  $40 = $180;
  $28 = 0;
  while(1) {
   $181 = $28;
   $182 = $25;
   $183 = ($181|0)<($182|0);
   if (!($183)) {
    break;
   }
   $184 = $33;
   $185 = $28;
   $186 = (+($185|0));
   $187 = $186 + 0.5;
   $188 = $26;
   $189 = $187 * $188;
   $190 = $184 + $189;
   $41 = $190;
   $30 = 0;
   while(1) {
    $191 = $30;
    $192 = $14;
    $193 = ($191|0)<($192|0);
    if (!($193)) {
     break;
    }
    $31 = 0;
    while(1) {
     $194 = $31;
     $195 = $22;
     $196 = $30;
     $197 = (($195) + ($196<<2)|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ($194|0)<($198|0);
     if (!($199)) {
      break;
     }
     $200 = $23;
     $201 = $30;
     $202 = (($200) + ($201<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = $31;
     $205 = (($203) + ($204<<3)|0);
     $206 = +HEAPF64[$205>>3];
     $207 = $41;
     $208 = $206 - $207;
     $209 = (+_gsl_pow_2($208));
     $210 = $24;
     $211 = $30;
     $212 = (($210) + ($211<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $31;
     $215 = (($213) + ($214<<3)|0);
     $216 = +HEAPF64[$215>>3];
     $217 = $40;
     $218 = $216 - $217;
     $219 = (+_gsl_pow_2($218));
     $220 = $209 + $219;
     $221 = (+Math_sqrt((+$220)));
     $42 = $221;
     $222 = $42;
     $223 = $32;
     $224 = $30;
     $225 = (($223) + ($224<<3)|0);
     $226 = +HEAPF64[$225>>3];
     $227 = $222 <= $226;
     if ($227) {
      $228 = $42;
      $229 = $34;
      $230 = $30;
      $231 = (($229) + ($230<<2)|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = $36;
      $234 = $30;
      $235 = (($233) + ($234<<2)|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (($232) + ($236<<3)|0);
      HEAPF64[$237>>3] = $228;
      $238 = $36;
      $239 = $30;
      $240 = (($238) + ($239<<2)|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = (($241) + 1)|0;
      HEAP32[$240>>2] = $242;
     }
     $243 = $31;
     $244 = (($243) + 1)|0;
     $31 = $244;
    }
    $245 = $30;
    $246 = (($245) + 1)|0;
    $30 = $246;
   }
   $247 = $28;
   $248 = (($247) + 1)|0;
   $28 = $248;
  }
  $249 = $29;
  $250 = (($249) + 1)|0;
  $29 = $250;
 }
 $251 = $14;
 $252 = (_calloc($251,4)|0);
 $43 = $252;
 $28 = 0;
 while(1) {
  $253 = $28;
  $254 = $14;
  $255 = ($253|0)<($254|0);
  if (!($255)) {
   break;
  }
  $256 = $35;
  $257 = $28;
  $258 = (($256) + ($257<<2)|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (_calloc($259,8)|0);
  $261 = $43;
  $262 = $28;
  $263 = (($261) + ($262<<2)|0);
  HEAP32[$263>>2] = $260;
  $264 = $35;
  $265 = $28;
  $266 = (($264) + ($265<<2)|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = $34;
  $269 = $28;
  $270 = (($268) + ($269<<2)|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $15;
  $273 = $28;
  $274 = (($272) + ($273<<3)|0);
  $275 = +HEAPF64[$274>>3];
  $276 = $16;
  $277 = $28;
  $278 = (($276) + ($277<<2)|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $17;
  $281 = $18;
  $282 = $19;
  $283 = $20;
  $284 = $21;
  $285 = $43;
  $286 = $28;
  $287 = (($285) + ($286<<2)|0);
  $288 = HEAP32[$287>>2]|0;
  (_AT_D_RDD_Gy($267,$271,$275,$279,$280,$281,$282,$283,$284,$288)|0);
  $289 = $28;
  $290 = (($289) + 1)|0;
  $28 = $290;
 }
 $28 = 0;
 while(1) {
  $291 = $28;
  $292 = $14;
  $293 = ($291|0)<($292|0);
  $294 = $34;
  if (!($293)) {
   break;
  }
  $295 = $28;
  $296 = (($294) + ($295<<2)|0);
  $297 = HEAP32[$296>>2]|0;
  _free($297);
  $298 = $36;
  $299 = $28;
  $300 = (($298) + ($299<<2)|0);
  HEAP32[$300>>2] = 0;
  $301 = $28;
  $302 = (($301) + 1)|0;
  $28 = $302;
 }
 _free($294);
 $303 = $35;
 _free($303);
 $29 = 0;
 while(1) {
  $304 = $29;
  $305 = $25;
  $306 = ($304|0)<($305|0);
  if (!($306)) {
   break;
  }
  $307 = $33;
  $308 = $29;
  $309 = (+($308|0));
  $310 = $309 + 0.5;
  $311 = $26;
  $312 = $310 * $311;
  $313 = $307 + $312;
  $44 = $313;
  $28 = 0;
  while(1) {
   $314 = $28;
   $315 = $25;
   $316 = ($314|0)<($315|0);
   if (!($316)) {
    break;
   }
   $317 = $33;
   $318 = $28;
   $319 = (+($318|0));
   $320 = $319 + 0.5;
   $321 = $26;
   $322 = $320 * $321;
   $323 = $317 + $322;
   $45 = $323;
   $324 = $27;
   $325 = $28;
   $326 = (($324) + ($325<<2)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = $29;
   $329 = (($327) + ($328<<3)|0);
   HEAPF64[$329>>3] = 0.0;
   $30 = 0;
   while(1) {
    $330 = $30;
    $331 = $14;
    $332 = ($330|0)<($331|0);
    if (!($332)) {
     break;
    }
    $31 = 0;
    while(1) {
     $333 = $31;
     $334 = $22;
     $335 = $30;
     $336 = (($334) + ($335<<2)|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = ($333|0)<($337|0);
     if (!($338)) {
      break;
     }
     $339 = $23;
     $340 = $30;
     $341 = (($339) + ($340<<2)|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = $31;
     $344 = (($342) + ($343<<3)|0);
     $345 = +HEAPF64[$344>>3];
     $346 = $45;
     $347 = $345 - $346;
     $348 = (+_gsl_pow_2($347));
     $349 = $24;
     $350 = $30;
     $351 = (($349) + ($350<<2)|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = $31;
     $354 = (($352) + ($353<<3)|0);
     $355 = +HEAPF64[$354>>3];
     $356 = $44;
     $357 = $355 - $356;
     $358 = (+_gsl_pow_2($357));
     $359 = $348 + $358;
     $360 = (+Math_sqrt((+$359)));
     $46 = $360;
     $361 = $46;
     $362 = $32;
     $363 = $30;
     $364 = (($362) + ($363<<3)|0);
     $365 = +HEAPF64[$364>>3];
     $366 = $361 <= $365;
     if ($366) {
      $367 = $43;
      $368 = $30;
      $369 = (($367) + ($368<<2)|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = $36;
      $372 = $30;
      $373 = (($371) + ($372<<2)|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (($370) + ($374<<3)|0);
      $376 = +HEAPF64[$375>>3];
      $377 = $27;
      $378 = $28;
      $379 = (($377) + ($378<<2)|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = $29;
      $382 = (($380) + ($381<<3)|0);
      $383 = +HEAPF64[$382>>3];
      $384 = $383 + $376;
      HEAPF64[$382>>3] = $384;
      $385 = $36;
      $386 = $30;
      $387 = (($385) + ($386<<2)|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = (($388) + 1)|0;
      HEAP32[$387>>2] = $389;
     }
     $390 = $31;
     $391 = (($390) + 1)|0;
     $31 = $391;
    }
    $392 = $30;
    $393 = (($392) + 1)|0;
    $30 = $393;
   }
   $394 = $28;
   $395 = (($394) + 1)|0;
   $28 = $395;
  }
  $396 = $29;
  $397 = (($396) + 1)|0;
  $29 = $397;
 }
 $28 = 0;
 while(1) {
  $398 = $28;
  $399 = $14;
  $400 = ($398|0)<($399|0);
  $401 = $43;
  if (!($400)) {
   break;
  }
  $402 = $28;
  $403 = (($401) + ($402<<2)|0);
  $404 = HEAP32[$403>>2]|0;
  _free($404);
  $405 = $28;
  $406 = (($405) + 1)|0;
  $28 = $406;
 }
 _free($401);
 $407 = $36;
 _free($407);
 $408 = $32;
 _free($408);
 STACKTOP = sp;return;
}
function _AT_GSM_local_dose_distrib_from_dose_grid($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $15 = $12;
  $16 = $6;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $13 = 0;
  while(1) {
   $18 = $13;
   $19 = $6;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    break;
   }
   $21 = $7;
   $22 = $12;
   $23 = (($21) + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $13;
   $26 = (($24) + ($25<<3)|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $27 == 0.0;
   if ($28) {
    $29 = $10;
    $30 = +HEAPF64[$29>>3];
    $31 = $30 + 1.0;
    HEAPF64[$29>>3] = $31;
   } else {
    $32 = $8;
    $33 = $9;
    $34 = $7;
    $35 = $12;
    $36 = (($34) + ($35<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $13;
    $39 = (($37) + ($38<<3)|0);
    $40 = +HEAPF64[$39>>3];
    $41 = (_AT_histoOld_bin_no($32,$33,$40)|0);
    $14 = $41;
    $42 = $11;
    $43 = $14;
    $44 = (($42) + ($43<<3)|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $45 + 1.0;
    HEAPF64[$44>>3] = $46;
   }
   $47 = $13;
   $48 = (($47) + 1)|0;
   $13 = $48;
  }
  $49 = $12;
  $50 = (($49) + 1)|0;
  $12 = $50;
 }
 $12 = 0;
 while(1) {
  $51 = $12;
  $52 = $8;
  $53 = ($51|0)<($52|0);
  $54 = $6;
  $55 = (+($54|0));
  $56 = (+_gsl_pow_2($55));
  if (!($53)) {
   break;
  }
  $57 = $11;
  $58 = $12;
  $59 = (($57) + ($58<<3)|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $60 / $56;
  HEAPF64[$59>>3] = $61;
  $62 = $12;
  $63 = (($62) + 1)|0;
  $12 = $63;
 }
 $64 = $10;
 $65 = +HEAPF64[$64>>3];
 $66 = $65 / $56;
 HEAPF64[$64>>3] = $66;
 STACKTOP = sp;return;
}
function _AT_GSM_response_grid_from_dose_grid($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $13 = $4&1;
 $10 = $13;
 $11 = $5;
 $12 = 0;
 while(1) {
  $14 = $12;
  $15 = $6;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = $9;
  $19 = $12;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $7;
  $23 = $8;
  $24 = $10;
  $25 = $24&1;
  $26 = $11;
  $27 = $12;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  _AT_gamma_response($17,$21,$22,$23,$25,$29);
  $30 = $12;
  $31 = (($30) + 1)|0;
  $12 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_run_GSM_method($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = +$14;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 $24 = $24|0;
 $25 = $25|0;
 var $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0;
 var $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0;
 var $405 = 0.0, $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0;
 var $423 = 0.0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0.0;
 var $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0.0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0.0, $459 = 0;
 var $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0;
 var $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0.0, $494 = 0, $495 = 0;
 var $496 = 0.0, $497 = 0, $498 = 0.0, $499 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0, $505 = 0.0, $506 = 0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0.0, $513 = 0;
 var $514 = 0.0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0;
 var $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0.0, $549 = 0.0, $55 = 0;
 var $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0;
 var $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $65 = sp + 112|0;
 $70 = sp + 24|0;
 $72 = sp + 8|0;
 $26 = $0;
 $27 = $1;
 $28 = $2;
 $29 = $3;
 $30 = $4;
 $31 = $5;
 $32 = $6;
 $33 = $7;
 $34 = $8;
 $35 = $9;
 $36 = $10;
 $37 = $11;
 $74 = $12&1;
 $38 = $74;
 $39 = $13;
 $40 = $14;
 $75 = $15&1;
 $41 = $75;
 $42 = $16;
 $43 = $17;
 $44 = $18;
 $45 = $19;
 $46 = $20;
 $47 = $21;
 $48 = $22;
 $49 = $23;
 $50 = $24;
 $51 = $25;
 $76 = $42;
 HEAPF64[$76>>3] = 0.0;
 $77 = $43;
 HEAPF64[$77>>3] = 0.0;
 $78 = $44;
 HEAPF64[$78>>3] = 0.0;
 $79 = $45;
 HEAPF64[$79>>3] = 0.0;
 $80 = $46;
 HEAPF64[$80>>3] = 0.0;
 $81 = $47;
 HEAPF64[$81>>3] = 0.0;
 $82 = $48;
 HEAPF64[$82>>3] = 0.0;
 $83 = $49;
 HEAPF64[$83>>3] = 0.0;
 $84 = $50;
 HEAPF64[$84>>3] = 0.0;
 $85 = $51;
 HEAPF64[$85>>3] = 0.0;
 $86 = $26;
 $87 = (_calloc($86,8)|0);
 $55 = $87;
 $88 = $29;
 $89 = +HEAPF64[$88>>3];
 $90 = $89 < 0.0;
 L1: do {
  if ($90) {
   $91 = $26;
   $92 = (_calloc($91,8)|0);
   $56 = $92;
   $52 = 0;
   while(1) {
    $93 = $52;
    $94 = $26;
    $95 = ($93|0)<($94|0);
    if (!($95)) {
     break;
    }
    $96 = $29;
    $97 = $52;
    $98 = (($96) + ($97<<3)|0);
    $99 = +HEAPF64[$98>>3];
    $100 = -1.0 * $99;
    $101 = $56;
    $102 = $52;
    $103 = (($101) + ($102<<3)|0);
    HEAPF64[$103>>3] = $100;
    $104 = $52;
    $105 = (($104) + 1)|0;
    $52 = $105;
   }
   $106 = $26;
   $107 = $27;
   $108 = $28;
   $109 = $56;
   $110 = $30;
   $111 = $31;
   $112 = $55;
   _AT_fluence_cm2_from_dose_Gy($106,$107,$108,$109,$110,$111,$112);
   $113 = $56;
   _free($113);
  } else {
   $52 = 0;
   while(1) {
    $114 = $52;
    $115 = $26;
    $116 = ($114|0)<($115|0);
    if (!($116)) {
     break L1;
    }
    $117 = $29;
    $118 = $52;
    $119 = (($117) + ($118<<3)|0);
    $120 = +HEAPF64[$119>>3];
    $121 = $55;
    $122 = $52;
    $123 = (($121) + ($122<<3)|0);
    HEAPF64[$123>>3] = $120;
    $124 = $52;
    $125 = (($124) + 1)|0;
    $52 = $125;
   }
  }
 } while(0);
 $57 = 0.0;
 $52 = 0;
 while(1) {
  $126 = $52;
  $127 = $26;
  $128 = ($126|0)<($127|0);
  if (!($128)) {
   break;
  }
  $129 = $57;
  $130 = $27;
  $131 = $52;
  $132 = (($130) + ($131<<3)|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $30;
  $135 = $34;
  $136 = (+_AT_max_electron_range_m($133,$134,$135));
  $137 = $129 > $136;
  if ($137) {
   $138 = $57;
   $146 = $138;
  } else {
   $139 = $27;
   $140 = $52;
   $141 = (($139) + ($140<<3)|0);
   $142 = +HEAPF64[$141>>3];
   $143 = $30;
   $144 = $34;
   $145 = (+_AT_max_electron_range_m($142,$143,$144));
   $146 = $145;
  }
  $57 = $146;
  $147 = $52;
  $148 = (($147) + 1)|0;
  $52 = $148;
 }
 $149 = $40;
 $150 = $39;
 $151 = (+($150|0));
 $152 = $149 * $151;
 $153 = $57;
 $154 = 2.0099999999999998 * $153;
 $155 = $152 + $154;
 $58 = $155;
 $156 = $26;
 $157 = (_calloc($156,8)|0);
 $59 = $157;
 $158 = $26;
 $159 = (_calloc($158,4)|0);
 $60 = $159;
 $160 = $26;
 $161 = (_calloc($160,4)|0);
 $61 = $161;
 $162 = $39;
 $163 = (_calloc($162,4)|0);
 $62 = $163;
 $164 = $39;
 $165 = $39;
 $166 = Math_imul($164, $165)|0;
 $167 = (_calloc($166,8)|0);
 $168 = $62;
 HEAP32[$168>>2] = $167;
 $52 = 1;
 while(1) {
  $169 = $52;
  $170 = $39;
  $171 = ($169|0)<($170|0);
  if (!($171)) {
   break;
  }
  $172 = $62;
  $173 = HEAP32[$172>>2]|0;
  $174 = $52;
  $175 = $39;
  $176 = Math_imul($174, $175)|0;
  $177 = (($173) + ($176<<3)|0);
  $178 = $62;
  $179 = $52;
  $180 = (($178) + ($179<<2)|0);
  HEAP32[$180>>2] = $177;
  $181 = $52;
  $182 = (($181) + 1)|0;
  $52 = $182;
 }
 $183 = $39;
 $184 = (_calloc($183,4)|0);
 $63 = $184;
 $185 = $39;
 $186 = $39;
 $187 = Math_imul($185, $186)|0;
 $188 = (_calloc($187,8)|0);
 $189 = $63;
 HEAP32[$189>>2] = $188;
 $52 = 1;
 while(1) {
  $190 = $52;
  $191 = $39;
  $192 = ($190|0)<($191|0);
  if (!($192)) {
   break;
  }
  $193 = $63;
  $194 = HEAP32[$193>>2]|0;
  $195 = $52;
  $196 = $39;
  $197 = Math_imul($195, $196)|0;
  $198 = (($194) + ($197<<3)|0);
  $199 = $63;
  $200 = $52;
  $201 = (($199) + ($200<<2)|0);
  HEAP32[$201>>2] = $198;
  $202 = $52;
  $203 = (($202) + 1)|0;
  $52 = $203;
 }
 $204 = (_gsl_rng_alloc(71244)|0);
 $64 = $204;
 $205 = $64;
 _gsl_rng_set($205,137);
 $206 = $64;
 $207 = (_gsl_rng_get($206)|0);
 HEAP32[$65>>2] = $207;
 $54 = 0;
 while(1) {
  $208 = $54;
  $209 = $37;
  $210 = ($208|0)<($209|0);
  if (!($210)) {
   break;
  }
  $211 = $26;
  $212 = $55;
  $213 = $58;
  $214 = $59;
  $215 = $60;
  $216 = $61;
  _AT_GSM_sample_particle_positions($211,$212,$213,$65,$214,$215,$216);
  $66 = 0;
  $52 = 0;
  while(1) {
   $217 = $52;
   $218 = $26;
   $219 = ($217|0)<($218|0);
   if (!($219)) {
    break;
   }
   $220 = $59;
   $221 = $52;
   $222 = (($220) + ($221<<2)|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = $66;
   $225 = (($224) + ($223))|0;
   $66 = $225;
   $226 = $52;
   $227 = (($226) + 1)|0;
   $52 = $227;
  }
  $228 = $26;
  $229 = $27;
  $230 = $28;
  $231 = $30;
  $232 = $32;
  $233 = $33;
  $234 = $34;
  $235 = $31;
  $236 = $59;
  $237 = $60;
  $238 = $61;
  $239 = $39;
  $240 = $40;
  $241 = $62;
  _AT_GSM_dose_grid_from_particles_positions($228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241);
  $52 = 0;
  while(1) {
   $242 = $52;
   $243 = $26;
   $244 = ($242|0)<($243|0);
   if (!($244)) {
    break;
   }
   $245 = $60;
   $246 = $52;
   $247 = (($245) + ($246<<2)|0);
   $248 = HEAP32[$247>>2]|0;
   _free($248);
   $249 = $61;
   $250 = $52;
   $251 = (($249) + ($250<<2)|0);
   $252 = HEAP32[$251>>2]|0;
   _free($252);
   $253 = $52;
   $254 = (($253) + 1)|0;
   $52 = $254;
  }
  $255 = $54;
  $256 = ($255|0)==(0);
  if ($256) {
   $67 = 0;
   $257 = (_fopen(72900,81473)|0);
   $67 = $257;
   $258 = $67;
   $259 = ($258|0)==(0|0);
   if ($259) {
    label = 63;
    break;
   }
   $260 = $67;
   (_fprintf($260,72916,$vararg_buffer)|0);
   $53 = 0;
   while(1) {
    $261 = $53;
    $262 = $39;
    $263 = ($261|0)<($262|0);
    if (!($263)) {
     break;
    }
    $264 = $57;
    $265 = $53;
    $266 = (+($265|0));
    $267 = $266 + 0.5;
    $268 = $40;
    $269 = $267 * $268;
    $270 = $264 + $269;
    $68 = $270;
    $52 = 0;
    while(1) {
     $271 = $52;
     $272 = $39;
     $273 = ($271|0)<($272|0);
     if (!($273)) {
      break;
     }
     $274 = $57;
     $275 = $52;
     $276 = (+($275|0));
     $277 = $276 + 0.5;
     $278 = $40;
     $279 = $277 * $278;
     $280 = $274 + $279;
     $69 = $280;
     $281 = $67;
     $282 = $69;
     $283 = $68;
     $284 = $62;
     $285 = $52;
     $286 = (($284) + ($285<<2)|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = $53;
     $289 = (($287) + ($288<<3)|0);
     $290 = +HEAPF64[$289>>3];
     HEAPF64[$vararg_buffer6>>3] = $282;
     $vararg_ptr8 = ((($vararg_buffer6)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $283;
     $vararg_ptr9 = ((($vararg_buffer6)) + 16|0);
     HEAPF64[$vararg_ptr9>>3] = $290;
     (_fprintf($281,72930,$vararg_buffer6)|0);
     $291 = $52;
     $292 = (($291) + 1)|0;
     $52 = $292;
    }
    $293 = $53;
    $294 = (($293) + 1)|0;
    $53 = $294;
   }
   $295 = $67;
   (_fclose($295)|0);
  }
  $296 = $39;
  $297 = $35;
  $298 = $36;
  $299 = $62;
  $300 = $41;
  $301 = $300&1;
  $302 = $63;
  _AT_GSM_response_grid_from_dose_grid($296,$297,$298,$299,$301,$302);
  HEAPF64[$70>>3] = 0.0;
  $71 = 0.0;
  $52 = 0;
  while(1) {
   $303 = $52;
   $304 = $39;
   $305 = ($303|0)<($304|0);
   if (!($305)) {
    break;
   }
   $53 = 0;
   while(1) {
    $306 = $53;
    $307 = $39;
    $308 = ($306|0)<($307|0);
    if (!($308)) {
     break;
    }
    $309 = $62;
    $310 = $52;
    $311 = (($309) + ($310<<2)|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $53;
    $314 = (($312) + ($313<<3)|0);
    $315 = +HEAPF64[$314>>3];
    $316 = +HEAPF64[$70>>3];
    $317 = $316 + $315;
    HEAPF64[$70>>3] = $317;
    $318 = $63;
    $319 = $52;
    $320 = (($318) + ($319<<2)|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = $53;
    $323 = (($321) + ($322<<3)|0);
    $324 = +HEAPF64[$323>>3];
    $325 = $71;
    $326 = $325 + $324;
    $71 = $326;
    $327 = $53;
    $328 = (($327) + 1)|0;
    $53 = $328;
   }
   $329 = $52;
   $330 = (($329) + 1)|0;
   $52 = $330;
  }
  $331 = $39;
  $332 = (+($331|0));
  $333 = (+_gsl_pow_2($332));
  $334 = +HEAPF64[$70>>3];
  $335 = $334 / $333;
  HEAPF64[$70>>3] = $335;
  $336 = $39;
  $337 = (+($336|0));
  $338 = (+_gsl_pow_2($337));
  $339 = $71;
  $340 = $339 / $338;
  $71 = $340;
  $341 = $41;
  $342 = $341&1;
  if ($342) {
   $343 = $71;
   $344 = -1.0 * $343;
   $345 = (+Math_exp((+$344)));
   $71 = $345;
   $346 = $35;
   $347 = ($346|0)==(4);
   $348 = $35;
   $349 = ($348|0)==(2);
   $or$cond = $347 | $349;
   $350 = $35;
   $351 = ($350|0)==(3);
   $or$cond3 = $or$cond | $351;
   $352 = $35;
   $353 = ($352|0)==(6);
   $or$cond5 = $or$cond3 | $353;
   if ($or$cond5) {
    $354 = $71;
    $355 = 1.0 - $354;
    $71 = $355;
   }
  }
  HEAPF64[$72>>3] = 0.0;
  $356 = $35;
  $357 = $36;
  _AT_gamma_response(1,$70,$356,$357,0,$72);
  $73 = 0.0;
  $358 = +HEAPF64[$72>>3];
  $359 = $358 > 0.0;
  if ($359) {
   $360 = $71;
   $361 = +HEAPF64[$72>>3];
   $362 = $360 / $361;
   $73 = $362;
  }
  $363 = $73;
  $364 = $42;
  $365 = +HEAPF64[$364>>3];
  $366 = $365 + $363;
  HEAPF64[$364>>3] = $366;
  $367 = +HEAPF64[$70>>3];
  $368 = $43;
  $369 = +HEAPF64[$368>>3];
  $370 = $369 + $367;
  HEAPF64[$368>>3] = $370;
  $371 = $71;
  $372 = $44;
  $373 = +HEAPF64[$372>>3];
  $374 = $373 + $371;
  HEAPF64[$372>>3] = $374;
  $375 = +HEAPF64[$72>>3];
  $376 = $45;
  $377 = +HEAPF64[$376>>3];
  $378 = $377 + $375;
  HEAPF64[$376>>3] = $378;
  $379 = $66;
  $380 = (+($379|0));
  $381 = $46;
  $382 = +HEAPF64[$381>>3];
  $383 = $382 + $380;
  HEAPF64[$381>>3] = $383;
  $384 = $73;
  $385 = (+_gsl_pow_2($384));
  $386 = $47;
  $387 = +HEAPF64[$386>>3];
  $388 = $387 + $385;
  HEAPF64[$386>>3] = $388;
  $389 = +HEAPF64[$70>>3];
  $390 = (+_gsl_pow_2($389));
  $391 = $48;
  $392 = +HEAPF64[$391>>3];
  $393 = $392 + $390;
  HEAPF64[$391>>3] = $393;
  $394 = $71;
  $395 = (+_gsl_pow_2($394));
  $396 = $49;
  $397 = +HEAPF64[$396>>3];
  $398 = $397 + $395;
  HEAPF64[$396>>3] = $398;
  $399 = +HEAPF64[$72>>3];
  $400 = (+_gsl_pow_2($399));
  $401 = $50;
  $402 = +HEAPF64[$401>>3];
  $403 = $402 + $400;
  HEAPF64[$401>>3] = $403;
  $404 = $66;
  $405 = (+($404|0));
  $406 = (+_gsl_pow_2($405));
  $407 = $51;
  $408 = +HEAPF64[$407>>3];
  $409 = $408 + $406;
  HEAPF64[$407>>3] = $409;
  $410 = $54;
  $411 = (($410) + 1)|0;
  $54 = $411;
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return;
 }
 $412 = $37;
 $413 = (+($412|0));
 $414 = $42;
 $415 = +HEAPF64[$414>>3];
 $416 = $415 / $413;
 HEAPF64[$414>>3] = $416;
 $417 = $37;
 $418 = (+($417|0));
 $419 = $43;
 $420 = +HEAPF64[$419>>3];
 $421 = $420 / $418;
 HEAPF64[$419>>3] = $421;
 $422 = $37;
 $423 = (+($422|0));
 $424 = $44;
 $425 = +HEAPF64[$424>>3];
 $426 = $425 / $423;
 HEAPF64[$424>>3] = $426;
 $427 = $37;
 $428 = (+($427|0));
 $429 = $45;
 $430 = +HEAPF64[$429>>3];
 $431 = $430 / $428;
 HEAPF64[$429>>3] = $431;
 $432 = $37;
 $433 = (+($432|0));
 $434 = $46;
 $435 = +HEAPF64[$434>>3];
 $436 = $435 / $433;
 HEAPF64[$434>>3] = $436;
 $437 = $37;
 $438 = (+($437|0));
 $439 = $47;
 $440 = +HEAPF64[$439>>3];
 $441 = $440 / $438;
 HEAPF64[$439>>3] = $441;
 $442 = $37;
 $443 = (+($442|0));
 $444 = $48;
 $445 = +HEAPF64[$444>>3];
 $446 = $445 / $443;
 HEAPF64[$444>>3] = $446;
 $447 = $37;
 $448 = (+($447|0));
 $449 = $49;
 $450 = +HEAPF64[$449>>3];
 $451 = $450 / $448;
 HEAPF64[$449>>3] = $451;
 $452 = $37;
 $453 = (+($452|0));
 $454 = $50;
 $455 = +HEAPF64[$454>>3];
 $456 = $455 / $453;
 HEAPF64[$454>>3] = $456;
 $457 = $37;
 $458 = (+($457|0));
 $459 = $51;
 $460 = +HEAPF64[$459>>3];
 $461 = $460 / $458;
 HEAPF64[$459>>3] = $461;
 $462 = $42;
 $463 = +HEAPF64[$462>>3];
 $464 = (+_gsl_pow_2($463));
 $465 = $47;
 $466 = +HEAPF64[$465>>3];
 $467 = $466 - $464;
 HEAPF64[$465>>3] = $467;
 $468 = $43;
 $469 = +HEAPF64[$468>>3];
 $470 = (+_gsl_pow_2($469));
 $471 = $48;
 $472 = +HEAPF64[$471>>3];
 $473 = $472 - $470;
 HEAPF64[$471>>3] = $473;
 $474 = $44;
 $475 = +HEAPF64[$474>>3];
 $476 = (+_gsl_pow_2($475));
 $477 = $49;
 $478 = +HEAPF64[$477>>3];
 $479 = $478 - $476;
 HEAPF64[$477>>3] = $479;
 $480 = $45;
 $481 = +HEAPF64[$480>>3];
 $482 = (+_gsl_pow_2($481));
 $483 = $50;
 $484 = +HEAPF64[$483>>3];
 $485 = $484 - $482;
 HEAPF64[$483>>3] = $485;
 $486 = $46;
 $487 = +HEAPF64[$486>>3];
 $488 = (+_gsl_pow_2($487));
 $489 = $51;
 $490 = +HEAPF64[$489>>3];
 $491 = $490 - $488;
 HEAPF64[$489>>3] = $491;
 $492 = $47;
 $493 = +HEAPF64[$492>>3];
 $494 = 0.0 > $493;
 if ($494) {
  $498 = 0.0;
 } else {
  $495 = $47;
  $496 = +HEAPF64[$495>>3];
  $498 = $496;
 }
 $497 = $47;
 HEAPF64[$497>>3] = $498;
 $499 = $48;
 $500 = +HEAPF64[$499>>3];
 $501 = 0.0 > $500;
 if ($501) {
  $505 = 0.0;
 } else {
  $502 = $48;
  $503 = +HEAPF64[$502>>3];
  $505 = $503;
 }
 $504 = $48;
 HEAPF64[$504>>3] = $505;
 $506 = $49;
 $507 = +HEAPF64[$506>>3];
 $508 = 0.0 > $507;
 if ($508) {
  $512 = 0.0;
 } else {
  $509 = $49;
  $510 = +HEAPF64[$509>>3];
  $512 = $510;
 }
 $511 = $49;
 HEAPF64[$511>>3] = $512;
 $513 = $50;
 $514 = +HEAPF64[$513>>3];
 $515 = 0.0 > $514;
 if ($515) {
  $519 = 0.0;
 } else {
  $516 = $50;
  $517 = +HEAPF64[$516>>3];
  $519 = $517;
 }
 $518 = $50;
 HEAPF64[$518>>3] = $519;
 $520 = $51;
 $521 = +HEAPF64[$520>>3];
 $522 = 0.0 > $521;
 if ($522) {
  $526 = 0.0;
 } else {
  $523 = $51;
  $524 = +HEAPF64[$523>>3];
  $526 = $524;
 }
 $525 = $51;
 HEAPF64[$525>>3] = $526;
 $527 = $37;
 $528 = ($527|0)>(1);
 if ($528) {
  $529 = $47;
  $530 = +HEAPF64[$529>>3];
  $531 = $37;
  $532 = (+($531|0));
  $533 = $532 - 1.0;
  $534 = $530 / $533;
  $535 = (+Math_sqrt((+$534)));
  $536 = $47;
  HEAPF64[$536>>3] = $535;
  $537 = $48;
  $538 = +HEAPF64[$537>>3];
  $539 = $37;
  $540 = (+($539|0));
  $541 = $540 - 1.0;
  $542 = $538 / $541;
  $543 = (+Math_sqrt((+$542)));
  $544 = $48;
  HEAPF64[$544>>3] = $543;
  $545 = $49;
  $546 = +HEAPF64[$545>>3];
  $547 = $37;
  $548 = (+($547|0));
  $549 = $548 - 1.0;
  $550 = $546 / $549;
  $551 = (+Math_sqrt((+$550)));
  $552 = $49;
  HEAPF64[$552>>3] = $551;
  $553 = $50;
  $554 = +HEAPF64[$553>>3];
  $555 = $37;
  $556 = (+($555|0));
  $557 = $556 - 1.0;
  $558 = $554 / $557;
  $559 = (+Math_sqrt((+$558)));
  $560 = $50;
  HEAPF64[$560>>3] = $559;
  $561 = $51;
  $562 = +HEAPF64[$561>>3];
  $563 = $37;
  $564 = (+($563|0));
  $565 = $564 - 1.0;
  $566 = $562 / $565;
  $567 = (+Math_sqrt((+$566)));
  $568 = $51;
  HEAPF64[$568>>3] = $567;
 }
 $569 = $64;
 _gsl_rng_free($569);
 $570 = $62;
 $571 = HEAP32[$570>>2]|0;
 _free($571);
 $572 = $62;
 _free($572);
 $573 = $63;
 $574 = HEAP32[$573>>2]|0;
 _free($574);
 $575 = $63;
 _free($575);
 $576 = $55;
 _free($576);
 $577 = $59;
 _free($577);
 $578 = $60;
 _free($578);
 $579 = $61;
 _free($579);
 STACKTOP = sp;return;
}
function _AT_GSM_multiple_local_dose_distrib($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = +$10;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0;
 var $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0;
 var $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0;
 var $200 = 0, $201 = 0, $202 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $48 = sp;
 $52 = sp + 28|0;
 $22 = $0;
 $23 = $1;
 $24 = $2;
 $25 = $3;
 $26 = $4;
 $27 = $5;
 $28 = $6;
 $29 = $7;
 $30 = $8;
 $31 = $9;
 $32 = $10;
 $33 = $11;
 $34 = $12;
 $35 = $13;
 $36 = $14;
 $37 = $15;
 $38 = $16;
 $39 = $17;
 $40 = $18;
 $41 = $19;
 $42 = $20;
 $43 = $21;
 $54 = $35;
 $55 = $36;
 $56 = $37;
 _AT_histoOld_get_bin_widths($54,$55,$56);
 $57 = $38;
 HEAPF64[$57>>3] = 0.0;
 $58 = $39;
 HEAPF64[$58>>3] = 0.0;
 $44 = 0;
 while(1) {
  $59 = $44;
  $60 = $35;
  $61 = ($59|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $42;
  $63 = $44;
  $64 = (($62) + ($63<<3)|0);
  HEAPF64[$64>>3] = 0.0;
  $65 = $43;
  $66 = $44;
  $67 = (($65) + ($66<<3)|0);
  HEAPF64[$67>>3] = 0.0;
  $68 = $44;
  $69 = (($68) + 1)|0;
  $44 = $69;
 }
 $70 = $35;
 $71 = (_calloc($70,8)|0);
 $49 = $71;
 $72 = $35;
 $73 = (_calloc($72,8)|0);
 $50 = $73;
 $74 = (_gsl_rng_alloc(71244)|0);
 $51 = $74;
 $75 = $51;
 _gsl_rng_set($75,137);
 $76 = $51;
 $77 = (_gsl_rng_get($76)|0);
 HEAP32[$52>>2] = $77;
 $44 = 0;
 while(1) {
  $78 = $44;
  $79 = $34;
  $80 = ($78|0)<($79|0);
  if (!($80)) {
   break;
  }
  $47 = 0.0;
  $45 = 0;
  while(1) {
   $81 = $45;
   $82 = $35;
   $83 = ($81|0)<($82|0);
   if (!($83)) {
    break;
   }
   $84 = $49;
   $85 = $45;
   $86 = (($84) + ($85<<3)|0);
   HEAPF64[$86>>3] = 0.0;
   $87 = $45;
   $88 = (($87) + 1)|0;
   $45 = $88;
  }
  $45 = 0;
  while(1) {
   $89 = $45;
   $90 = $33;
   $91 = ($89|0)<($90|0);
   if (!($91)) {
    break;
   }
   HEAPF64[$48>>3] = 0.0;
   $46 = 0;
   while(1) {
    $92 = $46;
    $93 = $35;
    $94 = ($92|0)<($93|0);
    if (!($94)) {
     break;
    }
    $95 = $50;
    $96 = $46;
    $97 = (($95) + ($96<<3)|0);
    HEAPF64[$97>>3] = 0.0;
    $98 = $46;
    $99 = (($98) + 1)|0;
    $46 = $99;
   }
   $100 = $22;
   $101 = $23;
   $102 = $24;
   $103 = $25;
   $104 = $26;
   $105 = $27;
   $106 = $28;
   $107 = $29;
   $108 = $30;
   $109 = $31;
   $110 = $32;
   $111 = $35;
   $112 = $36;
   $113 = $50;
   _AT_GSM_local_dose_distrib($100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$52,$48,$113);
   $114 = +HEAPF64[$48>>3];
   $115 = $47;
   $116 = $115 + $114;
   $47 = $116;
   $46 = 0;
   while(1) {
    $117 = $46;
    $118 = $35;
    $119 = ($117|0)<($118|0);
    if (!($119)) {
     break;
    }
    $120 = $50;
    $121 = $46;
    $122 = (($120) + ($121<<3)|0);
    $123 = +HEAPF64[$122>>3];
    $124 = $49;
    $125 = $46;
    $126 = (($124) + ($125<<3)|0);
    $127 = +HEAPF64[$126>>3];
    $128 = $127 + $123;
    HEAPF64[$126>>3] = $128;
    $129 = $46;
    $130 = (($129) + 1)|0;
    $46 = $130;
   }
   $131 = $45;
   $132 = (($131) + 1)|0;
   $45 = $132;
  }
  $133 = $33;
  $134 = (+($133|0));
  $135 = $47;
  $136 = $135 / $134;
  $47 = $136;
  $45 = 0;
  while(1) {
   $137 = $45;
   $138 = $35;
   $139 = ($137|0)<($138|0);
   if (!($139)) {
    break;
   }
   $140 = $33;
   $141 = (+($140|0));
   $142 = $49;
   $143 = $45;
   $144 = (($142) + ($143<<3)|0);
   $145 = +HEAPF64[$144>>3];
   $146 = $145 / $141;
   HEAPF64[$144>>3] = $146;
   $147 = $45;
   $148 = (($147) + 1)|0;
   $45 = $148;
  }
  $53 = 0.0;
  $45 = 0;
  while(1) {
   $149 = $45;
   $150 = $35;
   $151 = ($149|0)<($150|0);
   if (!($151)) {
    break;
   }
   $152 = $36;
   $153 = $45;
   $154 = (($152) + ($153<<3)|0);
   $155 = +HEAPF64[$154>>3];
   $156 = $49;
   $157 = $45;
   $158 = (($156) + ($157<<3)|0);
   $159 = +HEAPF64[$158>>3];
   $160 = $155 * $159;
   $161 = $53;
   $162 = $161;
   $163 = $162 + $160;
   $164 = $163;
   $53 = $164;
   $165 = $45;
   $166 = (($165) + 1)|0;
   $45 = $166;
  }
  $167 = $53;
  $168 = $167;
  $169 = $38;
  $170 = +HEAPF64[$169>>3];
  $171 = $170 + $168;
  HEAPF64[$169>>3] = $171;
  $172 = $53;
  $173 = $53;
  $174 = $172 * $173;
  $175 = $174;
  $176 = $39;
  $177 = +HEAPF64[$176>>3];
  $178 = $177 + $175;
  HEAPF64[$176>>3] = $178;
  $179 = $44;
  $180 = (($179) + 1)|0;
  $44 = $180;
 }
 $181 = $34;
 $182 = (+($181|0));
 $183 = $38;
 $184 = +HEAPF64[$183>>3];
 $185 = $184 / $182;
 HEAPF64[$183>>3] = $185;
 $186 = $34;
 $187 = ($186|0)>(1);
 $188 = $39;
 if ($187) {
  $189 = +HEAPF64[$188>>3];
  $190 = $34;
  $191 = (+($190|0));
  $192 = $189 / $191;
  $193 = $38;
  $194 = +HEAPF64[$193>>3];
  $195 = $38;
  $196 = +HEAPF64[$195>>3];
  $197 = $194 * $196;
  $198 = $192 - $197;
  $199 = (+Math_sqrt((+$198)));
  $200 = $39;
  HEAPF64[$200>>3] = $199;
  $201 = $49;
  _free($201);
  $202 = $50;
  _free($202);
  STACKTOP = sp;return;
 } else {
  HEAPF64[$188>>3] = 0.0;
  $201 = $49;
  _free($201);
  $202 = $50;
  _free($202);
  STACKTOP = sp;return;
 }
}
function _AT_GSM_local_dose_distrib($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = +$10;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0;
 var $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $31 = $15;
 $33 = 0.0;
 $32 = 0;
 while(1) {
  $39 = $32;
  $40 = $16;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $33;
  $43 = $17;
  $44 = $32;
  $45 = (($43) + ($44<<3)|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $20;
  $48 = $23;
  $49 = (+_AT_max_electron_range_m($46,$47,$48));
  $50 = $42 > $49;
  if ($50) {
   $51 = $33;
   $59 = $51;
  } else {
   $52 = $17;
   $53 = $32;
   $54 = (($52) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $20;
   $57 = $23;
   $58 = (+_AT_max_electron_range_m($55,$56,$57));
   $59 = $58;
  }
  $33 = $59;
  $60 = $32;
  $61 = (($60) + 1)|0;
  $32 = $61;
 }
 $62 = $26;
 $63 = $25;
 $64 = (+($63|0));
 $65 = $62 * $64;
 $66 = $33;
 $67 = 2.0099999999999998 * $66;
 $68 = $65 + $67;
 $34 = $68;
 $69 = $16;
 $70 = (_calloc($69,8)|0);
 $35 = $70;
 $71 = $16;
 $72 = (_calloc($71,4)|0);
 $36 = $72;
 $73 = $16;
 $74 = (_calloc($73,4)|0);
 $37 = $74;
 $75 = $25;
 $76 = (_calloc($75,4)|0);
 $38 = $76;
 $77 = $25;
 $78 = $25;
 $79 = Math_imul($77, $78)|0;
 $80 = (_calloc($79,8)|0);
 $81 = $38;
 HEAP32[$81>>2] = $80;
 $32 = 1;
 while(1) {
  $82 = $32;
  $83 = $25;
  $84 = ($82|0)<($83|0);
  if (!($84)) {
   break;
  }
  $85 = $38;
  $86 = HEAP32[$85>>2]|0;
  $87 = $32;
  $88 = $25;
  $89 = Math_imul($87, $88)|0;
  $90 = (($86) + ($89<<3)|0);
  $91 = $38;
  $92 = $32;
  $93 = (($91) + ($92<<2)|0);
  HEAP32[$93>>2] = $90;
  $94 = $32;
  $95 = (($94) + 1)|0;
  $32 = $95;
 }
 $96 = $16;
 $97 = $18;
 $98 = $34;
 $99 = $29;
 $100 = $35;
 $101 = $36;
 $102 = $37;
 _AT_GSM_sample_particle_positions($96,$97,$98,$99,$100,$101,$102);
 $103 = $16;
 $104 = $17;
 $105 = $19;
 $106 = $20;
 $107 = $21;
 $108 = $22;
 $109 = $23;
 $110 = $24;
 $111 = $35;
 $112 = $36;
 $113 = $37;
 $114 = $25;
 $115 = $26;
 $116 = $38;
 _AT_GSM_dose_grid_from_particles_positions($103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116);
 $117 = $25;
 $118 = $38;
 $119 = $27;
 $120 = $28;
 $121 = $30;
 $122 = $31;
 _AT_GSM_local_dose_distrib_from_dose_grid($117,$118,$119,$120,$121,$122);
 $32 = 0;
 while(1) {
  $123 = $32;
  $124 = $16;
  $125 = ($123|0)<($124|0);
  if (!($125)) {
   break;
  }
  $126 = $36;
  $127 = $32;
  $128 = (($126) + ($127<<2)|0);
  $129 = HEAP32[$128>>2]|0;
  _free($129);
  $130 = $37;
  $131 = $32;
  $132 = (($130) + ($131<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
  $134 = $32;
  $135 = (($134) + 1)|0;
  $32 = $135;
 }
 $136 = $38;
 $137 = HEAP32[$136>>2]|0;
 _free($137);
 $138 = $38;
 _free($138);
 $139 = $35;
 _free($139);
 $140 = $36;
 _free($140);
 $141 = $37;
 _free($141);
 STACKTOP = sp;return;
}
function _AT_run_IGK_method($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = +$11;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0;
 var $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0;
 var $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0;
 var $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0;
 var $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0;
 var $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0;
 var $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0;
 var $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $vararg_buffer24 = sp + 232|0;
 $vararg_buffer22 = sp + 224|0;
 $vararg_buffer20 = sp + 216|0;
 $vararg_buffer18 = sp + 208|0;
 $vararg_buffer16 = sp + 200|0;
 $vararg_buffer14 = sp + 192|0;
 $vararg_buffer12 = sp + 184|0;
 $vararg_buffer10 = sp + 176|0;
 $vararg_buffer8 = sp + 168|0;
 $vararg_buffer6 = sp + 160|0;
 $vararg_buffer = sp + 152|0;
 $24 = sp + 352|0;
 $26 = sp + 344|0;
 $28 = sp + 336|0;
 $45 = sp + 136|0;
 $50 = sp + 112|0;
 $57 = sp + 88|0;
 $62 = sp + 240|0;
 $65 = sp + 48|0;
 $70 = sp + 16|0;
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = $3;
 HEAP32[$24>>2] = $4;
 $25 = $5;
 HEAP32[$26>>2] = $6;
 $27 = $7;
 HEAP32[$28>>2] = $8;
 $29 = $9;
 $30 = $10;
 $31 = $11;
 $73 = $12&1;
 $32 = $73;
 $33 = $13;
 $34 = $14;
 $35 = $15;
 $36 = $16;
 $37 = $17;
 $38 = $18;
 $39 = $19;
 $42 = 1;
 $74 = $33;
 HEAPF64[$74>>3] = 0.0;
 $75 = $34;
 HEAPF64[$75>>3] = 0.0;
 $76 = $35;
 HEAPF64[$76>>3] = 0.0;
 $77 = $36;
 HEAPF64[$77>>3] = 0.0;
 $78 = $37;
 HEAPF64[$78>>3] = 0.0;
 $79 = $38;
 HEAPF64[$79>>3] = 0.0;
 $80 = $39;
 HEAPF64[$80>>3] = 0.0;
 $81 = $20;
 $82 = (_calloc($81,8)|0);
 $43 = $82;
 $83 = $20;
 $84 = (_calloc($83,8)|0);
 $44 = $84;
 $85 = $23;
 $86 = +HEAPF64[$85>>3];
 $87 = $86 < 0.0;
 $40 = 0;
 if ($87) {
  while(1) {
   $88 = $40;
   $89 = $20;
   $90 = ($88|0)<($89|0);
   if (!($90)) {
    break;
   }
   $91 = $23;
   $92 = $40;
   $93 = (($91) + ($92<<3)|0);
   $94 = +HEAPF64[$93>>3];
   $95 = -1.0 * $94;
   $96 = $44;
   $97 = $40;
   $98 = (($96) + ($97<<3)|0);
   HEAPF64[$98>>3] = $95;
   $99 = $40;
   $100 = (($99) + 1)|0;
   $40 = $100;
  }
  $101 = $20;
  $102 = $21;
  $103 = $22;
  $104 = $44;
  $105 = HEAP32[$24>>2]|0;
  $106 = $25;
  $107 = $43;
  _AT_fluence_cm2_from_dose_Gy($101,$102,$103,$104,$105,$106,$107);
 } else {
  while(1) {
   $108 = $40;
   $109 = $20;
   $110 = ($108|0)<($109|0);
   if (!($110)) {
    break;
   }
   $111 = $23;
   $112 = $40;
   $113 = (($111) + ($112<<3)|0);
   $114 = +HEAPF64[$113>>3];
   $115 = $43;
   $116 = $40;
   $117 = (($115) + ($116<<3)|0);
   HEAPF64[$117>>3] = $114;
   $118 = $40;
   $119 = (($118) + 1)|0;
   $40 = $119;
  }
  $120 = $20;
  $121 = $21;
  $122 = $22;
  $123 = $43;
  $124 = HEAP32[$24>>2]|0;
  $125 = $25;
  $126 = $44;
  _AT_dose_Gy_from_fluence_cm2($120,$121,$122,$123,$124,$125,$126);
 }
 HEAPF64[$45>>3] = 0.0;
 $46 = 0.0;
 $40 = 0;
 while(1) {
  $127 = $40;
  $128 = $20;
  $129 = ($127|0)<($128|0);
  $130 = $44;
  if (!($129)) {
   break;
  }
  $131 = $40;
  $132 = (($130) + ($131<<3)|0);
  $133 = +HEAPF64[$132>>3];
  $134 = +HEAPF64[$45>>3];
  $135 = $134 + $133;
  HEAPF64[$45>>3] = $135;
  $136 = $43;
  $137 = $40;
  $138 = (($136) + ($137<<3)|0);
  $139 = +HEAPF64[$138>>3];
  $140 = $46;
  $141 = $140 + $139;
  $46 = $141;
  $142 = $40;
  $143 = (($142) + 1)|0;
  $40 = $143;
 }
 _free($130);
 $144 = $20;
 $145 = (_calloc($144,8)|0);
 $48 = $145;
 $146 = $20;
 $147 = (_calloc($146,8)|0);
 $49 = $147;
 $40 = 0;
 while(1) {
  $148 = $40;
  $149 = $20;
  $150 = ($148|0)<($149|0);
  if (!($150)) {
   break;
  }
  $151 = $25;
  $152 = $21;
  $153 = $22;
  $154 = HEAP32[$24>>2]|0;
  (_AT_Mass_Stopping_Power_with_no($151,1,$152,$153,$154,$50)|0);
  $155 = $21;
  $156 = $40;
  $157 = (($155) + ($156<<3)|0);
  $158 = +HEAPF64[$157>>3];
  $159 = HEAP32[$24>>2]|0;
  $160 = HEAP32[$28>>2]|0;
  $161 = (+_AT_single_impact_fluence_cm2_single($158,$159,$160));
  $51 = $161;
  $162 = $43;
  $163 = $40;
  $164 = (($162) + ($163<<3)|0);
  $165 = +HEAPF64[$164>>3];
  $166 = $46;
  $167 = $165 / $166;
  $168 = $48;
  $169 = $40;
  $170 = (($168) + ($169<<3)|0);
  HEAPF64[$170>>3] = $167;
  $171 = $43;
  $172 = $40;
  $173 = (($171) + ($172<<3)|0);
  $174 = +HEAPF64[$173>>3];
  $175 = $51;
  $176 = $174 / $175;
  $47 = $176;
  $177 = +HEAPF64[$50>>3];
  $178 = $51;
  $179 = (+_AT_single_impact_dose_Gy_single($177,$178));
  $52 = $179;
  $180 = $47;
  $181 = $52;
  $182 = $180 * $181;
  $183 = $49;
  $184 = $40;
  $185 = (($183) + ($184<<3)|0);
  HEAPF64[$185>>3] = $182;
  $186 = $40;
  $187 = (($186) + 1)|0;
  $40 = $187;
 }
 $188 = $43;
 _free($188);
 $189 = $20;
 $190 = (_calloc($189,8)|0);
 $53 = $190;
 $191 = $48;
 $192 = +HEAPF64[$191>>3];
 $193 = $53;
 HEAPF64[$193>>3] = $192;
 $194 = $20;
 $195 = ($194|0)>(1);
 L21: do {
  if ($195) {
   $40 = 1;
   while(1) {
    $196 = $40;
    $197 = $20;
    $198 = ($196|0)<($197|0);
    if (!($198)) {
     break L21;
    }
    $199 = $53;
    $200 = $40;
    $201 = (($200) - 1)|0;
    $202 = (($199) + ($201<<3)|0);
    $203 = +HEAPF64[$202>>3];
    $204 = $48;
    $205 = $40;
    $206 = (($204) + ($205<<3)|0);
    $207 = +HEAPF64[$206>>3];
    $208 = $203 + $207;
    $209 = $53;
    $210 = $40;
    $211 = (($209) + ($210<<3)|0);
    $212 = +HEAPF64[$211>>3];
    $213 = $212 + $208;
    HEAPF64[$211>>3] = $213;
    $214 = $40;
    $215 = (($214) + 1)|0;
    $40 = $215;
   }
  }
 } while(0);
 $216 = $53;
 _free($216);
 $54 = 0;
 $217 = $32;
 $218 = $217&1;
 do {
  if ($218) {
   $219 = (_fopen(72940,81473)|0);
   $54 = $219;
   $220 = $54;
   $221 = ($220|0)==(0|0);
   if ($221) {
    STACKTOP = sp;return;
   } else {
    $222 = $54;
    (_fprintf($222,72959,$vararg_buffer)|0);
    $223 = $54;
    (_fprintf($223,72959,$vararg_buffer6)|0);
    $224 = $54;
    (_fprintf($224,73023,$vararg_buffer8)|0);
    $225 = $54;
    (_fprintf($225,72959,$vararg_buffer10)|0);
    $226 = $54;
    (_fprintf($226,73074,$vararg_buffer12)|0);
    break;
   }
  }
 } while(0);
 $227 = $29;
 $228 = ($227|0)!=(2);
 $229 = HEAP32[$26>>2]|0;
 $230 = ($229|0)==(1);
 $or$cond = $228 | $230;
 if ($or$cond) {
  $231 = $32;
  $232 = $231&1;
  if (!($232)) {
   STACKTOP = sp;return;
  }
  $233 = $54;
  (_fprintf($233,72959,$vararg_buffer14)|0);
  $234 = $54;
  (_fprintf($234,73078,$vararg_buffer16)|0);
  $235 = $54;
  (_fprintf($235,73138,$vararg_buffer18)|0);
  $236 = $54;
  (_fprintf($236,73156,$vararg_buffer20)|0);
  $237 = $54;
  (_fprintf($237,72959,$vararg_buffer22)|0);
  STACKTOP = sp;return;
 }
 $55 = 0;
 $56 = 0;
 while(1) {
  $238 = $30;
  $239 = $56;
  $240 = (($238) + ($239<<3)|0);
  $241 = +HEAPF64[$240>>3];
  $242 = $241 != 0.0;
  if (!($242)) {
   break;
  }
  $243 = $56;
  $244 = (($243) + 4)|0;
  $56 = $244;
  $245 = $55;
  $246 = (($245) + 1)|0;
  $55 = $246;
 }
 HEAPF64[$57>>3] = 0.0;
 $58 = 0.0;
 $59 = 0.0;
 $247 = $34;
 HEAPF64[$247>>3] = 0.0;
 $248 = (_calloc(1,64)|0);
 $60 = $248;
 $249 = $21;
 $250 = $60;
 HEAP32[$250>>2] = $249;
 $251 = $22;
 $252 = $60;
 $253 = ((($252)) + 4|0);
 HEAP32[$253>>2] = $251;
 $254 = $60;
 $255 = ((($254)) + 8|0);
 HEAP32[$255>>2] = $24;
 $256 = $60;
 $257 = ((($256)) + 12|0);
 HEAP32[$257>>2] = $26;
 $258 = $27;
 $259 = $60;
 $260 = ((($259)) + 16|0);
 HEAP32[$260>>2] = $258;
 $261 = $60;
 $262 = ((($261)) + 20|0);
 HEAP32[$262>>2] = $28;
 $263 = $60;
 $264 = ((($263)) + 24|0);
 HEAPF64[$264>>3] = 1.0;
 $265 = $60;
 $266 = ((($265)) + 24|0);
 $267 = ((($266)) + 32|0);
 HEAPF64[$267>>3] = 0.0;
 $40 = 0;
 while(1) {
  $268 = $40;
  $269 = $55;
  $270 = ($268|0)<($269|0);
  if (!($270)) {
   break;
  }
  $41 = 1;
  while(1) {
   $271 = $41;
   $272 = ($271|0)<(4);
   if (!($272)) {
    break;
   }
   $273 = $30;
   $274 = $40;
   $275 = $274<<2;
   $276 = $41;
   $277 = (($275) + ($276))|0;
   $278 = (($273) + ($277<<3)|0);
   $279 = +HEAPF64[$278>>3];
   $280 = $60;
   $281 = ((($280)) + 24|0);
   $282 = $41;
   $283 = (($281) + ($282<<3)|0);
   HEAPF64[$283>>3] = $279;
   $284 = $41;
   $285 = (($284) + 1)|0;
   $41 = $285;
  }
  (_gsl_set_error_handler_off()|0);
  $286 = (_gsl_integration_workspace_alloc(10000)|0);
  $61 = $286;
  HEAP32[$62>>2] = 13;
  $287 = $60;
  $288 = ((($62)) + 4|0);
  HEAP32[$288>>2] = $287;
  $63 = 0.0;
  $289 = HEAP32[$26>>2]|0;
  $290 = ($289|0)==(2);
  if ($290) {
   $291 = $27;
   $292 = +HEAPF64[$291>>3];
   $63 = $292;
  }
  $293 = $21;
  $294 = +HEAPF64[$293>>3];
  $295 = HEAP32[$24>>2]|0;
  $296 = HEAP32[$28>>2]|0;
  $297 = (+_AT_max_electron_range_m($294,$295,$296));
  $64 = $297;
  $298 = $63;
  $299 = $64;
  $300 = $61;
  $301 = (_gsl_integration_qags($62,$298,$299,9.9999999999999995E-21,9.9999999999999995E-21,10000,$300,$57,$65)|0);
  $66 = $301;
  $302 = $66;
  $303 = ($302|0)==(18);
  $304 = $66;
  $305 = ($304|0)==(21);
  $or$cond3 = $303 | $305;
  if ($or$cond3) {
   (_printf(73206,$vararg_buffer24)|0);
  }
  $306 = +HEAPF64[$57>>3];
  $307 = $306 * 6.2831853071795862;
  HEAPF64[$57>>3] = $307;
  $308 = +HEAPF64[$57>>3];
  $309 = $308 * 1.0E+4;
  $310 = $36;
  HEAPF64[$310>>3] = $309;
  $311 = $61;
  _gsl_integration_workspace_free($311);
  $67 = 0.0;
  $68 = 0.0;
  $312 = HEAP32[$26>>2]|0;
  $313 = ($312|0)==(6);
  if ($313) {
   $314 = $27;
   $315 = ((($314)) + 8|0);
   $316 = +HEAPF64[$315>>3];
   $68 = $316;
  }
  $317 = HEAP32[$26>>2]|0;
  $318 = ($317|0)==(3);
  $319 = HEAP32[$26>>2]|0;
  $320 = ($319|0)==(4);
  $or$cond5 = $318 | $320;
  if ($or$cond5) {
   $321 = $27;
   $322 = +HEAPF64[$321>>3];
   $68 = $322;
  }
  $323 = $31;
  $324 = $323 * 3.1415926535897931;
  $325 = $68;
  $326 = (+_gsl_pow_2($325));
  $327 = $324 * $326;
  $67 = $327;
  $328 = $48;
  $329 = +HEAPF64[$328>>3];
  $330 = $46;
  $331 = $329 * $330;
  $71 = $331;
  $332 = $49;
  $333 = +HEAPF64[$332>>3];
  $72 = $333;
  $334 = +HEAPF64[$57>>3];
  $335 = $67;
  $336 = $334 / $335;
  $58 = $336;
  $337 = $58;
  $338 = $337 < 1.0;
  $339 = $338&1;
  $340 = $58;
  $341 = $340 >= 0.0;
  $342 = $341&1;
  $343 = $339 & $342;
  $344 = $60;
  $345 = ((($344)) + 24|0);
  $346 = ((($345)) + 16|0);
  $347 = +HEAPF64[$346>>3];
  $348 = $347 > 1.0;
  $349 = $348&1;
  $350 = $343 & $349;
  $351 = ($350|0)!=(0);
  $352 = $36;
  $353 = +HEAPF64[$352>>3];
  $354 = -1.0 * $353;
  $355 = $71;
  $356 = $354 * $355;
  $357 = (+Math_exp((+$356)));
  if ($351) {
   $358 = $38;
   HEAPF64[$358>>3] = $357;
   $359 = $58;
   $360 = 1.0 - $359;
   $59 = $360;
   $361 = $59;
   $362 = $72;
   $363 = $361 * $362;
   HEAPF64[$70>>3] = $363;
   $364 = $42;
   $365 = $29;
   $366 = $60;
   $367 = ((($366)) + 24|0);
   $368 = $39;
   _AT_gamma_response($364,$70,$365,$367,0,$368);
   $369 = $39;
   $370 = +HEAPF64[$369>>3];
   $371 = 1.0 - $370;
   $372 = $39;
   HEAPF64[$372>>3] = $371;
   $373 = $30;
   $374 = $40;
   $375 = $374<<2;
   $376 = (($373) + ($375<<3)|0);
   $377 = +HEAPF64[$376>>3];
   $378 = $38;
   $379 = +HEAPF64[$378>>3];
   $380 = $39;
   $381 = +HEAPF64[$380>>3];
   $382 = $379 * $381;
   $383 = 1.0 - $382;
   $384 = $377 * $383;
   $69 = $384;
  } else {
   $385 = 1.0 - $357;
   $386 = $38;
   HEAPF64[$386>>3] = $385;
   $387 = $30;
   $388 = $40;
   $389 = $388<<2;
   $390 = (($387) + ($389<<3)|0);
   $391 = +HEAPF64[$390>>3];
   $392 = $38;
   $393 = +HEAPF64[$392>>3];
   $394 = $391 * $393;
   $69 = $394;
  }
  $395 = $69;
  $396 = $34;
  $397 = +HEAPF64[$396>>3];
  $398 = $397 + $395;
  HEAPF64[$396>>3] = $398;
  $399 = $40;
  $400 = (($399) + 1)|0;
  $40 = $400;
 }
 $401 = $42;
 $402 = $29;
 $403 = $30;
 $404 = $35;
 _AT_gamma_response($401,$45,$402,$403,0,$404);
 $405 = $34;
 $406 = +HEAPF64[$405>>3];
 $407 = $35;
 $408 = +HEAPF64[$407>>3];
 $409 = $406 / $408;
 $410 = $33;
 HEAPF64[$410>>3] = $409;
 $411 = $59;
 $412 = $49;
 $413 = +HEAPF64[$412>>3];
 $414 = $411 * $413;
 $415 = $37;
 HEAPF64[$415>>3] = $414;
 $416 = $48;
 _free($416);
 $417 = $49;
 _free($417);
 $418 = $60;
 _free($418);
 $419 = $32;
 $420 = $419&1;
 if (!($420)) {
  STACKTOP = sp;return;
 }
 $421 = $54;
 (_fclose($421)|0);
 STACKTOP = sp;return;
}
function _AT_material_index_from_material_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = -1;
 $3 = 1;
 $4 = $3;
 $5 = HEAP32[11156]|0;
 _find_elements_int($1,$4,(44628),$5,$2);
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _AT_material_name_from_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_AT_material_index_from_material_number($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(-1);
 $9 = $3;
 if ($8) {
  $10 = $4;
  $11 = ((46256) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  (_strcpy($9,$12)|0);
  STACKTOP = sp;return;
 } else {
  (_strcpy($9,76465)|0);
  STACKTOP = sp;return;
 }
}
function _AT_material_number_from_name($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 $4 = 1;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((73569|0),(73591|0),71,(73622|0));
  // unreachable;
 }
 $7 = HEAP32[11156]|0;
 _find_elements_char($2,1,(46256),$7,$3);
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)!=(-1);
 if ($9) {
  $10 = HEAP32[$3>>2]|0;
  $11 = ((44628) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $1 = -1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _AT_density_g_cm3_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((44856) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_I_eV_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((45056) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_alpha_g_cm2_MeV_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((45256) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_p_MeV_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((45456) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_m_g_cm2_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((45656) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_average_A_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((45856) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_average_Z_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((46056) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_phase_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $3;
  $10 = ((46356) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_get_material_data($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0;
 var $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $17 = $8;
 $18 = (_AT_material_index_from_material_number($17)|0);
 $16 = $18;
 $19 = $16;
 $20 = ($19|0)==(-1);
 if ($20) {
  $21 = $8;
  HEAP32[$vararg_buffer>>2] = $21;
  (_printf(73651,$vararg_buffer)|0);
  $22 = $9;
  HEAPF64[$22>>3] = 0.0;
  $23 = $10;
  HEAPF64[$23>>3] = 0.0;
  $24 = $11;
  HEAPF64[$24>>3] = 0.0;
  $25 = $12;
  HEAPF64[$25>>3] = 0.0;
  $26 = $13;
  HEAPF64[$26>>3] = 0.0;
  $27 = $14;
  HEAPF64[$27>>3] = 0.0;
  $28 = $15;
  HEAPF64[$28>>3] = 0.0;
  STACKTOP = sp;return;
 }
 $29 = $9;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $16;
  $32 = ((44856) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $9;
  HEAPF64[$34>>3] = $33;
 }
 $35 = $10;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $16;
  $38 = ((45056) + ($37<<3)|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $10;
  HEAPF64[$40>>3] = $39;
 }
 $41 = $11;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $16;
  $44 = ((45256) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $11;
  HEAPF64[$46>>3] = $45;
 }
 $47 = $12;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $16;
  $50 = ((45456) + ($49<<3)|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $12;
  HEAPF64[$52>>3] = $51;
 }
 $53 = $13;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = $16;
  $56 = ((45656) + ($55<<3)|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $13;
  HEAPF64[$58>>3] = $57;
 }
 $59 = $14;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = $16;
  $62 = ((45856) + ($61<<3)|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $14;
  HEAPF64[$64>>3] = $63;
 }
 $65 = $15;
 $66 = ($65|0)!=(0|0);
 if (!($66)) {
  STACKTOP = sp;return;
 }
 $67 = $16;
 $68 = ((46056) + ($67<<3)|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $15;
 HEAPF64[$70>>3] = $69;
 STACKTOP = sp;return;
}
function _AT_get_materials_data($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $20 = $9;
 $21 = (_calloc($20,4)|0);
 $18 = $21;
 $22 = $10;
 $23 = $9;
 $24 = HEAP32[11156]|0;
 $25 = $18;
 _find_elements_int($22,$23,(44628),$24,$25);
 $26 = $11;
 $27 = ($26|0)!=(0|0);
 L1: do {
  if ($27) {
   $19 = 0;
   while(1) {
    $28 = $19;
    $29 = $9;
    $30 = ($28|0)<($29|0);
    if (!($30)) {
     break L1;
    }
    $31 = $18;
    $32 = $19;
    $33 = (($31) + ($32<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((44856) + ($34<<3)|0);
    $36 = +HEAPF64[$35>>3];
    $37 = $11;
    $38 = $19;
    $39 = (($37) + ($38<<3)|0);
    HEAPF64[$39>>3] = $36;
    $40 = $19;
    $41 = (($40) + 1)|0;
    $19 = $41;
   }
  }
 } while(0);
 $42 = $12;
 $43 = ($42|0)!=(0|0);
 L7: do {
  if ($43) {
   $19 = 0;
   while(1) {
    $44 = $19;
    $45 = $9;
    $46 = ($44|0)<($45|0);
    if (!($46)) {
     break L7;
    }
    $47 = $18;
    $48 = $19;
    $49 = (($47) + ($48<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((45056) + ($50<<3)|0);
    $52 = +HEAPF64[$51>>3];
    $53 = $12;
    $54 = $19;
    $55 = (($53) + ($54<<3)|0);
    HEAPF64[$55>>3] = $52;
    $56 = $19;
    $57 = (($56) + 1)|0;
    $19 = $57;
   }
  }
 } while(0);
 $58 = $13;
 $59 = ($58|0)!=(0|0);
 L13: do {
  if ($59) {
   $19 = 0;
   while(1) {
    $60 = $19;
    $61 = $9;
    $62 = ($60|0)<($61|0);
    if (!($62)) {
     break L13;
    }
    $63 = $18;
    $64 = $19;
    $65 = (($63) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((45256) + ($66<<3)|0);
    $68 = +HEAPF64[$67>>3];
    $69 = $13;
    $70 = $19;
    $71 = (($69) + ($70<<3)|0);
    HEAPF64[$71>>3] = $68;
    $72 = $19;
    $73 = (($72) + 1)|0;
    $19 = $73;
   }
  }
 } while(0);
 $74 = $14;
 $75 = ($74|0)!=(0|0);
 L19: do {
  if ($75) {
   $19 = 0;
   while(1) {
    $76 = $19;
    $77 = $9;
    $78 = ($76|0)<($77|0);
    if (!($78)) {
     break L19;
    }
    $79 = $18;
    $80 = $19;
    $81 = (($79) + ($80<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((45456) + ($82<<3)|0);
    $84 = +HEAPF64[$83>>3];
    $85 = $14;
    $86 = $19;
    $87 = (($85) + ($86<<3)|0);
    HEAPF64[$87>>3] = $84;
    $88 = $19;
    $89 = (($88) + 1)|0;
    $19 = $89;
   }
  }
 } while(0);
 $90 = $15;
 $91 = ($90|0)!=(0|0);
 L25: do {
  if ($91) {
   $19 = 0;
   while(1) {
    $92 = $19;
    $93 = $9;
    $94 = ($92|0)<($93|0);
    if (!($94)) {
     break L25;
    }
    $95 = $18;
    $96 = $19;
    $97 = (($95) + ($96<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((45656) + ($98<<3)|0);
    $100 = +HEAPF64[$99>>3];
    $101 = $15;
    $102 = $19;
    $103 = (($101) + ($102<<3)|0);
    HEAPF64[$103>>3] = $100;
    $104 = $19;
    $105 = (($104) + 1)|0;
    $19 = $105;
   }
  }
 } while(0);
 $106 = $16;
 $107 = ($106|0)!=(0|0);
 L31: do {
  if ($107) {
   $19 = 0;
   while(1) {
    $108 = $19;
    $109 = $9;
    $110 = ($108|0)<($109|0);
    if (!($110)) {
     break L31;
    }
    $111 = $18;
    $112 = $19;
    $113 = (($111) + ($112<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((45856) + ($114<<3)|0);
    $116 = +HEAPF64[$115>>3];
    $117 = $16;
    $118 = $19;
    $119 = (($117) + ($118<<3)|0);
    HEAPF64[$119>>3] = $116;
    $120 = $19;
    $121 = (($120) + 1)|0;
    $19 = $121;
   }
  }
 } while(0);
 $122 = $17;
 $123 = ($122|0)!=(0|0);
 if (!($123)) {
  $138 = $18;
  _free($138);
  STACKTOP = sp;return;
 }
 $19 = 0;
 while(1) {
  $124 = $19;
  $125 = $9;
  $126 = ($124|0)<($125|0);
  if (!($126)) {
   break;
  }
  $127 = $18;
  $128 = $19;
  $129 = (($127) + ($128<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ((46056) + ($130<<3)|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $17;
  $134 = $19;
  $135 = (($133) + ($134<<3)|0);
  HEAPF64[$135>>3] = $132;
  $136 = $19;
  $137 = (($136) + 1)|0;
  $19 = $137;
 }
 $138 = $18;
 _free($138);
 STACKTOP = sp;return;
}
function _AT_plasma_energy_J_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $2 = $0;
 $5 = $2;
 $6 = (_AT_material_index_from_material_number($5)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(-1);
 $9 = $2;
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 } else {
  $10 = (+_AT_electron_density_m3_from_material_no_single($9));
  $4 = $10;
  $11 = $4;
  $12 = (+_AT_plasma_energy_J_single($11));
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 }
 return +(0.0);
}
function _AT_electron_density_m3_from_material_no_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 32|0;
 $2 = $0;
 $7 = $2;
 $8 = (_AT_material_index_from_material_number($7)|0);
 $3 = $8;
 $9 = $3;
 $10 = ($9|0)==(-1);
 $11 = $2;
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $11;
  (_printf(73651,$vararg_buffer)|0);
  $1 = 0.0;
  $21 = $1;
  STACKTOP = sp;return (+$21);
 } else {
  $12 = (+_AT_density_g_cm3_from_material_no($11));
  $4 = $12;
  $13 = $2;
  $14 = (+_AT_average_Z_from_material_no($13));
  $5 = $14;
  $15 = $2;
  $16 = (+_AT_average_A_from_material_no($15));
  $6 = $16;
  $17 = $4;
  $18 = $5;
  $19 = $6;
  $20 = (+_AT_electron_density_m3_single($17,$18,$19));
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return (+$21);
 }
 return +(0.0);
}
function _AT_plasma_energy_J_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = 12.566370614359172 * $2;
 $4 = $3 * 2.8179402894E-15;
 $5 = (+Math_sqrt((+$4)));
 $6 = $5 * 1.054571628E-34;
 $7 = $6 * 299792458.0;
 STACKTOP = sp;return (+$7);
}
function _AT_electron_density_m3_single($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 $6 = $10;
 $11 = $6;
 $12 = 6.0221417899999999E+23 / $11;
 $7 = $12;
 $13 = $7;
 $14 = $4;
 $15 = $13 * $14;
 $8 = $15;
 $16 = $8;
 $17 = $3;
 $18 = $16 * $17;
 $9 = $18;
 $19 = $9;
 $20 = $19 * 100.0;
 $21 = $20 * 100.0;
 $22 = $21 * 100.0;
 STACKTOP = sp;return (+$22);
}
function _AT_electron_density_m3_from_material_no_multi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (+_AT_electron_density_m3_from_material_no_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_electron_density_m3_multi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $10;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $8;
  $23 = $10;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+_AT_electron_density_m3_single($17,$21,$25));
  $27 = $9;
  $28 = $10;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $10 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_electron_density_m3_from_composition($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $6;
 $15 = (_calloc($14,8)|0);
 $12 = $15;
 $16 = $6;
 $17 = $10;
 $18 = $12;
 _AT_normalize($16,$17,$18);
 $19 = $11;
 HEAPF64[$19>>3] = 0.0;
 $13 = 0;
 while(1) {
  $20 = $13;
  $21 = $6;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $12;
  $24 = $13;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $26 * 6.0221417899999999E+23;
  $28 = $8;
  $29 = $13;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+($31|0));
  $33 = $27 * $32;
  $34 = $9;
  $35 = $13;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (+($37|0));
  $39 = $33 / $38;
  $40 = $11;
  $41 = +HEAPF64[$40>>3];
  $42 = $41 + $39;
  HEAPF64[$40>>3] = $42;
  $43 = $13;
  $44 = (($43) + 1)|0;
  $13 = $44;
 }
 $45 = $7;
 $46 = $45 * 100.0;
 $47 = $46 * 100.0;
 $48 = $47 * 100.0;
 $49 = $11;
 $50 = +HEAPF64[$49>>3];
 $51 = $50 * $48;
 HEAPF64[$49>>3] = $51;
 $52 = $12;
 _free($52);
 STACKTOP = sp;return;
}
function _AT_average_A_from_composition($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = (_calloc($10,8)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 _AT_normalize($12,$13,$14);
 $15 = $7;
 HEAPF64[$15>>3] = 0.0;
 $9 = 0;
 while(1) {
  $16 = $9;
  $17 = $4;
  $18 = ($16|0)<($17|0);
  $19 = $8;
  if (!($18)) {
   break;
  }
  $20 = $9;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $5;
  $24 = $9;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($26|0));
  $28 = $22 * $27;
  $29 = $7;
  $30 = +HEAPF64[$29>>3];
  $31 = $30 + $28;
  HEAPF64[$29>>3] = $31;
  $32 = $9;
  $33 = (($32) + 1)|0;
  $9 = $33;
 }
 _free($19);
 STACKTOP = sp;return;
}
function _AT_average_Z_from_composition($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = (_calloc($10,8)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 _AT_normalize($12,$13,$14);
 $15 = $7;
 HEAPF64[$15>>3] = 0.0;
 $9 = 0;
 while(1) {
  $16 = $9;
  $17 = $4;
  $18 = ($16|0)<($17|0);
  $19 = $8;
  if (!($18)) {
   break;
  }
  $20 = $9;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $5;
  $24 = $9;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($26|0));
  $28 = $22 * $27;
  $29 = $7;
  $30 = +HEAPF64[$29>>3];
  $31 = $30 + $28;
  HEAPF64[$29>>3] = $31;
  $32 = $9;
  $33 = (($32) + 1)|0;
  $9 = $33;
 }
 _free($19);
 STACKTOP = sp;return;
}
function _AT_effective_Z_from_composition($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $18 = $6;
 $19 = (_calloc($18,8)|0);
 $12 = $19;
 $20 = $6;
 $21 = $8;
 $22 = $12;
 _AT_normalize($20,$21,$22);
 $23 = $6;
 $24 = (_calloc($23,8)|0);
 $13 = $24;
 $14 = 0;
 $25 = $6;
 $26 = $9;
 $27 = (+_AT_sum($25,$26));
 $28 = $27 > 0.0;
 if ($28) {
  $29 = $6;
  $30 = $9;
  $31 = $13;
  _AT_normalize($29,$30,$31);
  $14 = 1;
 }
 $15 = 0.0;
 $16 = 0;
 while(1) {
  $32 = $16;
  $33 = $6;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $12;
  $36 = $16;
  $37 = (($35) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $7;
  $40 = $16;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (+($42|0));
  $44 = $10;
  $45 = (+Math_pow((+$43),(+$44)));
  $46 = $38 * $45;
  $17 = $46;
  $47 = $14;
  $48 = $47&1;
  if ($48) {
   $49 = $13;
   $50 = $16;
   $51 = (($49) + ($50<<3)|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $17;
   $54 = $53 * $52;
   $17 = $54;
  }
  $55 = $17;
  $56 = $15;
  $57 = $56 + $55;
  $15 = $57;
  $58 = $16;
  $59 = (($58) + 1)|0;
  $16 = $59;
 }
 $60 = $15;
 $61 = $10;
 $62 = 1.0 / $61;
 $63 = (+Math_pow((+$60),(+$62)));
 $64 = $11;
 HEAPF64[$64>>3] = $63;
 $65 = $13;
 _free($65);
 $66 = $12;
 _free($66);
 STACKTOP = sp;return;
}
function _AT_I_eV_from_composition($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $5;
 $17 = (_calloc($16,8)|0);
 $10 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $10;
 _AT_normalize($18,$19,$20);
 $21 = $5;
 $22 = (_calloc($21,8)|0);
 $11 = $22;
 $23 = $5;
 $24 = (_calloc($23,4)|0);
 $12 = $24;
 $25 = $5;
 $26 = $7;
 $27 = $6;
 $28 = $12;
 (_AT_particle_no_from_Z_and_A($25,$26,$27,$28)|0);
 $29 = $5;
 $30 = $12;
 $31 = $11;
 (_AT_I_eV_from_particle_no($29,$30,$31)|0);
 $14 = 0.0;
 $15 = 0.0;
 $13 = 0;
 while(1) {
  $32 = $13;
  $33 = $5;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $10;
  $36 = $13;
  $37 = (($35) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $7;
  $40 = $13;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (+($42|0));
  $44 = $38 * $43;
  $45 = $6;
  $46 = $13;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (+($48|0));
  $50 = $44 / $49;
  $51 = $11;
  $52 = $13;
  $53 = (($51) + ($52<<3)|0);
  $54 = +HEAPF64[$53>>3];
  $55 = (+Math_log((+$54)));
  $56 = $50 * $55;
  $57 = $14;
  $58 = $57 + $56;
  $14 = $58;
  $59 = $10;
  $60 = $13;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $7;
  $64 = $13;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $6;
  $68 = $13;
  $69 = (($67) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($66|0) / ($70|0))&-1;
  $72 = (+($71|0));
  $73 = $62 * $72;
  $74 = $15;
  $75 = $74 + $73;
  $15 = $75;
  $76 = $14;
  $77 = $15;
  $78 = $76 / $77;
  $79 = (+Math_exp((+$78)));
  $80 = $9;
  HEAPF64[$80>>3] = $79;
  $81 = $13;
  $82 = (($81) + 1)|0;
  $13 = $82;
 }
 $83 = $11;
 _free($83);
 $84 = $10;
 _free($84);
 STACKTOP = sp;return;
}
function _AT_set_user_material($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $11 = $5;
 $12 = $10;
 $13 = ((44856) + ($12<<3)|0);
 HEAPF64[$13>>3] = $11;
 $14 = $6;
 $15 = $10;
 $16 = ((45056) + ($15<<3)|0);
 HEAPF64[$16>>3] = $14;
 $17 = $7;
 $18 = $10;
 $19 = ((45856) + ($18<<3)|0);
 HEAPF64[$19>>3] = $17;
 $20 = $8;
 $21 = $10;
 $22 = ((46056) + ($21<<3)|0);
 HEAPF64[$22>>3] = $20;
 $23 = $10;
 $24 = ((44728) + ($23)|0);
 HEAP8[$24>>0] = 1;
 $25 = $9;
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return;
}
function _AT_set_user_material_from_composition($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $16 = $6;
 $17 = (_calloc($16,8)|0);
 $12 = $17;
 $18 = $6;
 $19 = $10;
 $20 = $12;
 _AT_normalize($18,$19,$20);
 $13 = 0.0;
 $14 = 0.0;
 $15 = 0.0;
 $21 = $7;
 $22 = $13;
 $23 = $15;
 $24 = $14;
 $25 = $11;
 _AT_set_user_material($21,$22,$23,$24,$25);
 $26 = $12;
 _free($26);
 STACKTOP = sp;return;
}
function _AT_particle_no_from_Z_and_A_single($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (1)<=($4|0);
 $6 = $3;
 $7 = ($6|0)<=(300);
 $or$cond = $5 & $7;
 if (!($or$cond)) {
  ___assert_fail((73678|0),(73701|0),36,(73732|0));
  // unreachable;
 }
 $8 = $2;
 $9 = (1)<=($8|0);
 $10 = $2;
 $11 = ($10|0)<=(118);
 $or$cond3 = $9 & $11;
 if ($or$cond3) {
  $12 = $2;
  $13 = ($12*1000)|0;
  $14 = $3;
  $15 = (($13) + ($14))|0;
  STACKTOP = sp;return ($15|0);
 } else {
  ___assert_fail((73767|0),(73701|0),37,(73732|0));
  // unreachable;
 }
 return (0)|0;
}
function _AT_particle_no_from_Z_and_A($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $6;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_AT_particle_no_from_Z_and_A_single($15,$19)|0);
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 STACKTOP = sp;return 0;
}
function _AT_A_from_particle_no_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (($4|0) % 1000)&-1;
 $3 = $5;
 $6 = $3;
 $7 = (1)<=($6|0);
 $8 = $3;
 $9 = ($8|0)<=(300);
 $or$cond = $7 & $9;
 if ($or$cond) {
  $10 = $3;
  $1 = $10;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = $2;
  HEAP32[$vararg_buffer>>2] = $11;
  (_printf(73790,$vararg_buffer)|0);
  $1 = -1;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_A_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_AT_A_from_particle_no_single($14)|0);
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  HEAP32[$18>>2] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)<(0);
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_Z_from_particle_no_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (($4|0) / 1000)&-1;
 $3 = $5;
 $6 = $3;
 $7 = (1)<=($6|0);
 $8 = $3;
 $9 = ($8|0)<=(118);
 $or$cond = $7 & $9;
 if ($or$cond) {
  $10 = $3;
  $1 = $10;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = $2;
  HEAP32[$vararg_buffer>>2] = $11;
  (_printf(73790,$vararg_buffer)|0);
  $1 = -1;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_Z_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_AT_Z_from_particle_no_single($14)|0);
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  HEAP32[$18>>2] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)<(0);
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_atomic_weight_from_Z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (_calloc($8,4)|0);
 $7 = $9;
 $10 = $4;
 $11 = $3;
 $12 = HEAP32[11614]|0;
 $13 = $7;
 _find_elements_int($10,$11,(46460),$12,$13);
 $6 = 0;
 while(1) {
  $14 = $6;
  $15 = $3;
  $16 = ($14|0)<($15|0);
  $17 = $7;
  if (!($16)) {
   break;
  }
  $18 = $6;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((46848) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $5;
  $24 = $6;
  $25 = (($23) + ($24<<3)|0);
  HEAPF64[$25>>3] = $22;
  $26 = $6;
  $27 = (($26) + 1)|0;
  $6 = $27;
 }
 _free($17);
 STACKTOP = sp;return 0;
}
function _AT_atomic_weight_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = (_calloc($9,4)|0);
 $7 = $10;
 $11 = $3;
 $12 = (_calloc($11,4)|0);
 $8 = $12;
 $13 = $3;
 $14 = $4;
 $15 = $8;
 (_AT_Z_from_particle_no($13,$14,$15)|0);
 $16 = $8;
 $17 = $3;
 $18 = HEAP32[11614]|0;
 $19 = $7;
 _find_elements_int($16,$17,(46460),$18,$19);
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = $3;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $7;
  $24 = $6;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((46848) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $5;
  $30 = $6;
  $31 = (($29) + ($30<<3)|0);
  HEAPF64[$31>>3] = $28;
  $32 = $6;
  $33 = (($32) + 1)|0;
  $6 = $33;
 }
 $34 = $8;
 _free($34);
 $35 = $7;
 _free($35);
 STACKTOP = sp;return 0;
}
function _AT_I_eV_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = (_calloc($9,4)|0);
 $7 = $10;
 $11 = $3;
 $12 = (_calloc($11,4)|0);
 $8 = $12;
 $13 = $3;
 $14 = $4;
 $15 = $8;
 (_AT_Z_from_particle_no($13,$14,$15)|0);
 $16 = $8;
 $17 = $3;
 $18 = HEAP32[11614]|0;
 $19 = $7;
 _find_elements_int($16,$17,(46460),$18,$19);
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = $3;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $7;
  $24 = $6;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((49152) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $8;
  $30 = $6;
  $31 = (($29) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (+($32|0));
  $34 = $28 * $33;
  $35 = $5;
  $36 = $6;
  $37 = (($35) + ($36<<3)|0);
  HEAPF64[$37>>3] = $34;
  $38 = $6;
  $39 = (($38) + 1)|0;
  $6 = $39;
 }
 $40 = $8;
 _free($40);
 $41 = $7;
 _free($41);
 STACKTOP = sp;return 0;
}
function _AT_nuclear_spin_from_particle_no_multi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (+_AT_nuclear_spin_from_particle_no_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_nuclear_spin_from_particle_no_single($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_AT_Z_from_particle_no_single($2)|0);
 $4 = $1;
 $5 = (_AT_A_from_particle_no_single($4)|0);
 $6 = (+_AT_nuclear_spin_from_Z_and_A($3,$5));
 STACKTOP = sp;return (+$6);
}
function _AT_nuclear_spin_from_Z_and_A($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = (($5|0) % 2)&-1;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3;
   $9 = (($8|0) % 2)&-1;
   $10 = ($9|0)==(0);
   if ($10) {
    $2 = 0.0;
    break;
   } else {
    $2 = 1.0;
    break;
   }
  } else {
   $2 = 0.5;
  }
 } while(0);
 $11 = $2;
 STACKTOP = sp;return (+$11);
}
function _AT_particle_name_from_particle_no_single($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $6 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = (_AT_Z_from_particle_no_single($8)|0);
 HEAP32[$4>>2] = $9;
 $10 = $2;
 $11 = (_AT_A_from_particle_no_single($10)|0);
 $5 = $11;
 $12 = HEAP32[11614]|0;
 _find_elements_int($4,1,(46460),$12,$6);
 $13 = $3;
 $14 = $5;
 HEAP32[$vararg_buffer>>2] = $14;
 (_sprintf($13,75008,$vararg_buffer)|0);
 $15 = HEAP32[$6>>2]|0;
 $16 = ($15|0)>=(0);
 if ($16) {
  $17 = $3;
  $18 = HEAP32[$6>>2]|0;
  $19 = ((48000) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  (_strcat($17,$20)|0);
  STACKTOP = sp;return 0;
 } else {
  $7 = 75012;
  $21 = $3;
  $22 = $7;
  (_strcat($21,$22)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _AT_particle_no_from_particle_name_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $5 = sp + 4|0;
 $2 = $0;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((75015|0),(73701|0),243,(75037|0));
  // unreachable;
 }
 HEAP32[$3>>2] = 0;
 $9 = $2;
 $10 = (_strtol($9,$3,10)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[$3>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(0);
  if ($16) {
   $1 = -1;
   $27 = $1;
   STACKTOP = sp;return ($27|0);
  }
 }
 $17 = $4;
 $18 = ($17|0)==(0);
 if ($18) {
  $1 = -1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 _find_elements_char($3,1,(48000),96,$5);
 $19 = HEAP32[$5>>2]|0;
 $20 = ($19|0)==(-1);
 if ($20) {
  $1 = -1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 } else {
  $21 = HEAP32[$5>>2]|0;
  $22 = ((46460) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $6 = $23;
  $24 = $6;
  $25 = $4;
  $26 = (_AT_particle_no_from_Z_and_A_single($24,$25)|0);
  $1 = $26;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _AT_particle_name_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = (_calloc($11,4)|0);
 $7 = $12;
 $13 = $3;
 $14 = (_calloc($13,4)|0);
 $8 = $14;
 $15 = $3;
 $16 = (_calloc($15,4)|0);
 $9 = $16;
 $17 = $3;
 $18 = $4;
 $19 = $8;
 (_AT_Z_from_particle_no($17,$18,$19)|0);
 $20 = $3;
 $21 = $4;
 $22 = $9;
 (_AT_A_from_particle_no($20,$21,$22)|0);
 $23 = $8;
 $24 = $3;
 $25 = HEAP32[11614]|0;
 $26 = $7;
 _find_elements_int($23,$24,(46460),$25,$26);
 $6 = 0;
 while(1) {
  $27 = $6;
  $28 = $3;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $5;
  $31 = $6;
  $32 = (($30) + (($31*6)|0)|0);
  $33 = $9;
  $34 = $6;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$vararg_buffer>>2] = $36;
  (_sprintf($32,75008,$vararg_buffer)|0);
  $37 = $7;
  $38 = $6;
  $39 = (($37) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)>=(0);
  if ($41) {
   $42 = $5;
   $43 = $6;
   $44 = (($42) + (($43*6)|0)|0);
   $45 = $7;
   $46 = $6;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((48000) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   (_strcat($44,$50)|0);
  } else {
   $10 = 75012;
   $51 = $5;
   $52 = $6;
   $53 = (($51) + (($52*6)|0)|0);
   $54 = $10;
   (_strcat($53,$54)|0);
  }
  $55 = $6;
  $56 = (($55) + 1)|0;
  $6 = $56;
 }
 $57 = $9;
 _free($57);
 $58 = $8;
 _free($58);
 $59 = $7;
 _free($59);
 STACKTOP = sp;return 0;
}
function _AT_particle_no_from_particle_name($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((75015|0),(73701|0),316,(75078|0));
  // unreachable;
 }
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $5;
  $14 = $7;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_AT_particle_no_from_particle_name_single($16)|0);
  $18 = $6;
  $19 = $7;
  $20 = (($18) + ($19<<2)|0);
  HEAP32[$20>>2] = $17;
  $21 = $6;
  $22 = $7;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)<(0);
  if ($25) {
   label = 6;
   break;
  }
  $26 = $7;
  $27 = (($26) + 1)|0;
  $7 = $27;
 }
 if ((label|0) == 6) {
  $3 = 3;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 8) {
  $3 = 0;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _AT_Z_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 _find_elements_char($2,1,(48000),96,$3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (-1)==($4|0);
 if ($5) {
  $1 = -1;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((46460) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _AT_Z_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_AT_Z_from_element_acronym_single($14)|0);
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  HEAP32[$18>>2] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)<(0);
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_element_acronym_from_Z_single($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 $3 = $1;
 $5 = HEAP32[11614]|0;
 _find_elements_int($2,1,(46460),$5,$4);
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)>(-1);
 $8 = $3;
 if ($7) {
  $9 = HEAP32[$4>>2]|0;
  $10 = ((48000) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  (_strcat($8,$11)|0);
  STACKTOP = sp;return 0;
 } else {
  (_strcat($8,75112)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _AT_element_acronym_from_Z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  ;HEAP8[$7>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;HEAP8[$7+5>>0]=0|0;
  $11 = $4;
  $12 = $6;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  (_AT_element_acronym_from_Z_single($14,$7)|0);
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  (_strcat($18,$7)|0);
  $19 = $6;
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 STACKTOP = sp;return 0;
}
function _AT_atomic_weight_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 _find_elements_char($2,1,(48000),96,$3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (-1)==($4|0);
 if ($5) {
  $1 = -1.0;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((46848) + ($6<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 }
 return +(0.0);
}
function _AT_atomic_weight_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+_AT_atomic_weight_from_element_acronym_single($14));
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_density_g_cm3_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 _find_elements_char($2,1,(48000),96,$3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (-1)==($4|0);
 if ($5) {
  $1 = -1.0;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((48384) + ($6<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 }
 return +(0.0);
}
function _AT_density_g_cm3_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+_AT_density_g_cm3_from_element_acronym_single($14));
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_I_eV_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 _find_elements_char($2,1,(48000),96,$3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (-1)==($4|0);
 if ($5) {
  $1 = -1.0;
  $14 = $1;
  STACKTOP = sp;return (+$14);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((49152) + ($6<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = HEAP32[$3>>2]|0;
  $10 = ((46460) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (+($11|0));
  $13 = $8 * $12;
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return (+$14);
 }
 return +(0.0);
}
function _AT_I_eV_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+_AT_I_eV_from_element_acronym_single($14));
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_electron_density_cm3_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $6 = (_AT_Z_from_element_acronym_single($5)|0);
 $7 = (+($6|0));
 $2 = $7;
 $8 = $1;
 $9 = (+_AT_atomic_weight_from_element_acronym_single($8));
 $3 = $9;
 $10 = $1;
 $11 = (+_AT_density_g_cm3_from_element_acronym_single($10));
 $4 = $11;
 $12 = $2;
 $13 = $4;
 $14 = $12 * $13;
 $15 = $14 * 6.0221417899999999E+23;
 $16 = $3;
 $17 = $15 / $16;
 STACKTOP = sp;return (+$17);
}
function _AT_electron_density_cm3_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+_AT_electron_density_cm3_from_element_acronym_single($14));
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_Stopping_Power_Mass_MeV_cm2_g_int($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 8|0;
 $5 = sp;
 HEAPF64[$2>>3] = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  HEAPF64[$5>>3] = 1.0000000000000001E-5;
  $9 = $4;
  $10 = $4;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  (_AT_Mass_Stopping_Power_with_no(2,1,$2,$9,$12,$5)|0);
  $13 = +HEAPF64[$5>>3];
  $14 = 1.0 / $13;
  STACKTOP = sp;return (+$14);
 } else {
  ___assert_fail((77126|0),(75118|0),38,(75146|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_CSDA_range_g_cm2_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $8 = sp + 24|0;
 $9 = sp + 88|0;
 $11 = sp + 72|0;
 $14 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 HEAPF64[$8>>3] = 0.0;
 $18 = $7;
 $19 = ((($9)) + 4|0);
 HEAP32[$19>>2] = $18;
 HEAP32[$9>>2] = 1001;
 (_gsl_set_error_handler_off()|0);
 $20 = (_gsl_integration_workspace_alloc(10000)|0);
 $10 = $20;
 HEAP32[$11>>2] = 14;
 $21 = ((($11)) + 4|0);
 HEAP32[$21>>2] = $9;
 $22 = $5;
 $12 = $22;
 $23 = $4;
 $13 = $23;
 $24 = $12;
 $25 = $13;
 $26 = $10;
 $27 = (_gsl_integration_qags($11,$24,$25,9.9999999999999995E-7,0.001,10000,$26,$8,$14)|0);
 $15 = $27;
 $28 = $15;
 $29 = ($28|0)==(18);
 if ($29) {
  (_printf(75183,$vararg_buffer)|0);
 }
 $30 = $15;
 $31 = ($30|0)==(21);
 if ($31) {
  (_printf(75256,$vararg_buffer1)|0);
 }
 $32 = $10;
 _gsl_integration_workspace_free($32);
 $33 = $6;
 $34 = (_AT_Z_from_particle_no_single($33)|0);
 $16 = $34;
 $35 = $6;
 $36 = (_AT_A_from_particle_no_single($35)|0);
 $17 = $36;
 $37 = +HEAPF64[$8>>3];
 $38 = $17;
 $39 = (+($38|0));
 $40 = $37 * $39;
 $41 = $16;
 $42 = $16;
 $43 = Math_imul($41, $42)|0;
 $44 = (+($43|0));
 $45 = $40 / $44;
 STACKTOP = sp;return (+$45);
}
function _AT_CSDA_range_g_cm2_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $10;
  $29 = (+_AT_CSDA_range_g_cm2_single($19,$23,$27,$28));
  $30 = $11;
  $31 = $12;
  $32 = (($30) + ($31<<3)|0);
  HEAPF64[$32>>3] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_CSDA_range_difference_solver($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $4;
  $10 = +HEAPF64[$9>>3];
  $11 = $2;
  $12 = $4;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $4;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (+_AT_CSDA_range_g_cm2_single($10,$11,$14,$17));
  $5 = $18;
  $19 = $5;
  $20 = $4;
  $21 = ((($20)) + 16|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $19 - $22;
  STACKTOP = sp;return (+$23);
 } else {
  ___assert_fail((77126|0),(75118|0),121,(75331|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_CSDA_energy_after_slab_E_MeV_u_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $7;
 $15 = $14 * 100.0;
 $16 = $6;
 $17 = (+_AT_density_g_cm3_from_material_no($16));
 $18 = $15 * $17;
 $8 = $18;
 $19 = $4;
 HEAPF64[$9>>3] = $19;
 $20 = $5;
 $21 = ((($9)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $6;
 $23 = ((($9)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $8;
 $25 = ((($9)) + 16|0);
 HEAPF64[$25>>3] = $24;
 $10 = 9.9999999999999995E-7;
 $11 = 1.0;
 $26 = $4;
 $12 = $26;
 $27 = $12;
 $28 = (+_zriddr(15,$9,1.0,$27,9.9999999999999995E-7));
 $13 = $28;
 $29 = $13;
 STACKTOP = sp;return (+$29);
}
function _AT_CSDA_energy_after_slab_E_MeV_u_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $10;
  $26 = (+_AT_CSDA_energy_after_slab_E_MeV_u_single($19,$23,$24,$25));
  $27 = $11;
  $28 = $12;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $12;
  $31 = (($30) + 1)|0;
  $12 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_WEPL_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = (+_AT_CSDA_energy_after_slab_E_MeV_u_single($12,$13,$14,$15));
 $8 = $16;
 $17 = $8;
 $18 = $5;
 $19 = (+_AT_CSDA_range_g_cm2_single($17,0.48999999999999999,$18,1));
 $9 = $19;
 $20 = $9;
 $21 = (+_AT_density_g_cm3_from_material_no(1));
 $22 = $20 / $21;
 $23 = $22 / 100.0;
 $10 = $23;
 $24 = $4;
 $25 = $5;
 $26 = (+_AT_CSDA_range_g_cm2_single($24,0.48999999999999999,$25,1));
 $27 = $26 / 100.0;
 $11 = $27;
 $28 = $11;
 $29 = $10;
 $30 = $28 - $29;
 $31 = $7;
 $32 = $30 / $31;
 STACKTOP = sp;return (+$32);
}
function _AT_WEPL_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $10;
  $26 = (+_AT_WEPL_single($19,$23,$24,$25));
  $27 = $11;
  $28 = $12;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $12;
  $31 = (($30) + 1)|0;
  $12 = $31;
 }
 STACKTOP = sp;return;
}
function _getERName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 $4 = $1;
 $6 = HEAP32[17792]|0;
 _are_elements_int($3,1,(71172),$6,$5);
 $7 = HEAP32[$5>>2]|0;
 $8 = ($7|0)!=(-1);
 $9 = $4;
 if ($8) {
  $10 = HEAP32[$5>>2]|0;
  $11 = ((71208) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  (_strcpy($9,$12)|0);
  $2 = 0;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  (_strcpy($9,76465)|0);
  $2 = -1;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _AT_ER_ButtsKatz_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 $4 = $1;
 $5 = $4 < 1.0E+6;
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = 1.0000000000000001E-5 * $6;
  STACKTOP = sp;return (+$7);
 } else {
  ___assert_fail((75662|0),(75698|0),57,(75730|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_Waligorski_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 > 0.0;
 $5 = $1;
 $6 = $5 < 1.0E+6;
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  ___assert_fail((75662|0),(75698|0),63,(75758|0));
  // unreachable;
 }
 $2 = 1.667;
 $7 = $1;
 $8 = $7 < 1.0;
 if ($8) {
  $2 = 1.079;
 }
 $9 = $1;
 $10 = $2;
 $11 = (+Math_pow((+$9),(+$10)));
 $12 = 6.0000000000000002E-6 * $11;
 STACKTOP = sp;return (+$12);
}
function _AT_ER_Edmund_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 > 0.0;
 $5 = $1;
 $6 = $5 < 1.0E+6;
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  ___assert_fail((75662|0),(75698|0),71,(75787|0));
  // unreachable;
 }
 $2 = 1.667;
 $7 = $1;
 $8 = $7 < 1.0;
 if ($8) {
  $2 = 1.079;
 }
 $9 = $1;
 $10 = $2;
 $11 = (+Math_pow((+$9),(+$10)));
 $12 = 6.1299999999999998E-6 * $11;
 STACKTOP = sp;return (+$12);
}
function _AT_ER_Geiss_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 $4 = $1;
 $5 = $4 < 1.0E+6;
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = (+Math_pow((+$6),1.5));
  $8 = 4.0000000000000003E-5 * $7;
  STACKTOP = sp;return (+$8);
 } else {
  ___assert_fail((75812|0),(75698|0),79,(75846|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_Scholz_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 $4 = $1;
 $5 = $4 < 1.0E+6;
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = (+Math_pow((+$6),1.7));
  $8 = 5.0000000000000004E-6 * $7;
  STACKTOP = sp;return (+$8);
 } else {
  ___assert_fail((75812|0),(75698|0),85,(75870|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_Scholz_new_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 $4 = $1;
 $5 = $4 < 1.0E+6;
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = (+Math_pow((+$6),1.7));
  $8 = 6.1999999999999999E-6 * $7;
  STACKTOP = sp;return (+$8);
 } else {
  ___assert_fail((75812|0),(75698|0),90,(75895|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_Tabata_range_g_cm2($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 $14 = $13 > 0.0;
 $15 = $6;
 $16 = $15 < 1.0;
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = $6;
  $18 = (+_gsl_pow_2($17));
  $19 = 2.0 * $18;
  $20 = $6;
  $21 = (+_gsl_pow_2($20));
  $22 = 1.0 - $21;
  $23 = $19 / $22;
  $12 = $23;
  $24 = $7;
  $25 = $8;
  $26 = $12;
  $27 = $25 * $26;
  $28 = 1.0 + $27;
  $29 = (+_gsl_sf_log($28));
  $30 = $8;
  $31 = $29 / $30;
  $32 = $9;
  $33 = $12;
  $34 = $32 * $33;
  $35 = $10;
  $36 = $12;
  $37 = $11;
  $38 = (+Math_pow((+$36),(+$37)));
  $39 = $35 * $38;
  $40 = 1.0 + $39;
  $41 = $34 / $40;
  $42 = $31 - $41;
  $43 = $24 * $42;
  STACKTOP = sp;return (+$43);
 } else {
  ___assert_fail((75924|0),(75698|0),95,(75952|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_PowerLaw_alpha($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = $4 > 0.0;
 $6 = $1;
 $7 = $6 < 1.0E+6;
 $or$cond = $5 & $7;
 if (!($or$cond)) {
  ___assert_fail((75812|0),(75698|0),102,(75977|0));
  // unreachable;
 }
 $8 = $1;
 $9 = (+_AT_max_E_transfer_MeV_single($8));
 $2 = $9;
 $3 = 1.667;
 $10 = $2;
 $11 = $10 <= 0.001;
 if (!($11)) {
  $12 = $3;
  STACKTOP = sp;return (+$12);
 }
 $3 = 1.079;
 $12 = $3;
 STACKTOP = sp;return (+$12);
}
function _AT_ER_Tabata_constants($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.23350000000000001;
 $15 = 1.2090000000000001;
 $16 = 1.7799999999999999E-4;
 $17 = 0.98909999999999997;
 $18 = 3.01E-4;
 $19 = 1.468;
 $20 = 0.0118;
 $21 = 1.232;
 $22 = 0.109;
 $23 = $7;
 $24 = 0.23350000000000001 * $23;
 $25 = $8;
 $26 = (+Math_pow((+$25),1.2090000000000001));
 $27 = $24 / $26;
 $28 = $9;
 HEAPF64[$28>>3] = $27;
 $29 = $7;
 $30 = 1.7799999999999999E-4 * $29;
 $31 = $10;
 HEAPF64[$31>>3] = $30;
 $32 = $8;
 $33 = 3.01E-4 * $32;
 $34 = 0.98909999999999997 - $33;
 $35 = $11;
 HEAPF64[$35>>3] = $34;
 $36 = $8;
 $37 = 0.0118 * $36;
 $38 = 1.468 - $37;
 $39 = $12;
 HEAPF64[$39>>3] = $38;
 $40 = $8;
 $41 = (+Math_pow((+$40),0.109));
 $42 = 1.232 / $41;
 $43 = $13;
 HEAPF64[$43>>3] = $42;
 STACKTOP = sp;return;
}
function _AT_ER_AM_RadDiff_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+_AT_r_max_RadicalDiffusion_m($2));
 STACKTOP = sp;return (+$3);
}
function _AT_max_electron_ranges_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 72|0;
 $11 = sp + 64|0;
 $12 = sp + 56|0;
 $15 = sp + 48|0;
 $16 = sp + 40|0;
 $17 = sp + 32|0;
 $18 = sp + 24|0;
 $19 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $23 = $5;
 $24 = ($23|0)>(0);
 if (!($24)) {
  ___assert_fail((75998|0),(75698|0),142,(76022|0));
  // unreachable;
 }
 HEAPF64[$10>>3] = 0.0;
 HEAPF64[$11>>3] = 0.0;
 HEAPF64[$12>>3] = 0.0;
 $25 = $7;
 _AT_get_material_data($25,$10,0,0,0,0,$11,$12);
 $26 = +HEAPF64[$11>>3];
 $27 = $26 > 0.0;
 if (!($27)) {
  ___assert_fail((76047|0),(75698|0),155,(76022|0));
  // unreachable;
 }
 $28 = +HEAPF64[$12>>3];
 $29 = $28 > 0.0;
 if (!($29)) {
  ___assert_fail((76061|0),(75698|0),156,(76022|0));
  // unreachable;
 }
 $30 = $5;
 $31 = (_calloc($30,8)|0);
 $13 = $31;
 $32 = $5;
 $33 = (_calloc($32,8)|0);
 $14 = $33;
 $34 = $5;
 $35 = $6;
 $36 = $14;
 (_AT_max_E_transfer_MeV($34,$35,$36)|0);
 HEAPF64[$15>>3] = 0.0;
 HEAPF64[$16>>3] = 0.0;
 HEAPF64[$17>>3] = 0.0;
 HEAPF64[$18>>3] = 0.0;
 HEAPF64[$19>>3] = 0.0;
 $37 = $8;
 $38 = ($37|0)==(7);
 if ($38) {
  $39 = $5;
  $40 = $6;
  $41 = $13;
  (_AT_beta_from_E($39,$40,$41)|0);
  $42 = +HEAPF64[$11>>3];
  $43 = +HEAPF64[$12>>3];
  _AT_ER_Tabata_constants($42,$43,$15,$16,$17,$18,$19);
 }
 $20 = 0.0;
 $21 = 0;
 while(1) {
  $44 = $21;
  $45 = $5;
  $46 = ($44|0)<($45|0);
  if (!($46)) {
   label = 28;
   break;
  }
  $47 = $14;
  $48 = $21;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $50 * 1000.0;
  $22 = $51;
  $52 = $22;
  $53 = $52 > 0.0;
  if (!($53)) {
   label = 12;
   break;
  }
  $54 = $8;
  switch ($54|0) {
  case 2:  {
   $55 = $22;
   $56 = (+_AT_ER_ButtsKatz_range_g_cm2($55));
   $20 = $56;
   break;
  }
  case 3:  {
   $57 = $22;
   $58 = (+_AT_ER_Waligorski_range_g_cm2($57));
   $20 = $58;
   break;
  }
  case 6:  {
   $59 = $22;
   $60 = (+_AT_ER_Edmund_range_g_cm2($59));
   $20 = $60;
   break;
  }
  case 4:  {
   $61 = $6;
   $62 = $21;
   $63 = (($61) + ($62<<3)|0);
   $64 = +HEAPF64[$63>>3];
   $65 = (+_AT_ER_Geiss_range_g_cm2($64));
   $20 = $65;
   break;
  }
  case 5:  {
   $66 = $6;
   $67 = $21;
   $68 = (($66) + ($67<<3)|0);
   $69 = +HEAPF64[$68>>3];
   $70 = (+_AT_ER_Scholz_range_g_cm2($69));
   $20 = $70;
   break;
  }
  case 8:  {
   $71 = $6;
   $72 = $21;
   $73 = (($71) + ($72<<3)|0);
   $74 = +HEAPF64[$73>>3];
   $75 = (+_AT_ER_Scholz_new_range_g_cm2($74));
   $20 = $75;
   break;
  }
  case 7:  {
   $76 = $13;
   $77 = $21;
   $78 = (($76) + ($77<<3)|0);
   $79 = +HEAPF64[$78>>3];
   $80 = +HEAPF64[$15>>3];
   $81 = +HEAPF64[$16>>3];
   $82 = +HEAPF64[$17>>3];
   $83 = +HEAPF64[$18>>3];
   $84 = +HEAPF64[$19>>3];
   $85 = (+_AT_ER_Tabata_range_g_cm2($79,$80,$81,$82,$83,$84));
   $20 = $85;
   break;
  }
  case 9:  {
   $86 = $6;
   $87 = $21;
   $88 = (($86) + ($87<<3)|0);
   $89 = +HEAPF64[$88>>3];
   $90 = (+_AT_ER_AM_RadDiff_range_g_cm2($89));
   $20 = $90;
   break;
  }
  default: {
   $91 = $6;
   $92 = $21;
   $93 = (($91) + ($92<<3)|0);
   $94 = +HEAPF64[$93>>3];
   $20 = $94;
  }
  }
  $95 = +HEAPF64[$10>>3];
  $96 = $95 > 0.0;
  if (!($96)) {
   label = 24;
   break;
  }
  $97 = $20;
  $98 = $9;
  $99 = $21;
  $100 = (($98) + ($99<<3)|0);
  HEAPF64[$100>>3] = $97;
  $101 = $8;
  $102 = ($101|0)!=(1);
  $103 = $8;
  $104 = ($103|0)!=(9);
  $or$cond = $102 & $104;
  if ($or$cond) {
   $105 = +HEAPF64[$10>>3];
   $106 = 0.01 / $105;
   $107 = $9;
   $108 = $21;
   $109 = (($107) + ($108<<3)|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $110 * $106;
   HEAPF64[$109>>3] = $111;
  }
  $112 = $21;
  $113 = (($112) + 1)|0;
  $21 = $113;
 }
 if ((label|0) == 12) {
  ___assert_fail((76075|0),(75698|0),186,(76022|0));
  // unreachable;
 }
 else if ((label|0) == 24) {
  ___assert_fail((76090|0),(75698|0),218,(76022|0));
  // unreachable;
 }
 else if ((label|0) == 28) {
  $114 = $13;
  _free($114);
  $115 = $14;
  _free($115);
  STACKTOP = sp;return;
 }
}
function _AT_max_electron_range_m($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = sp + 88|0;
 $7 = sp + 80|0;
 $8 = sp + 72|0;
 $10 = sp + 56|0;
 $11 = sp + 48|0;
 $12 = sp + 40|0;
 $13 = sp + 32|0;
 $14 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF64[$6>>3] = 0.0;
 HEAPF64[$7>>3] = 0.0;
 HEAPF64[$8>>3] = 0.0;
 $18 = $4;
 _AT_get_material_data($18,$6,0,0,0,0,$7,$8);
 $19 = +HEAPF64[$7>>3];
 $20 = $19 > 0.0;
 if (!($20)) {
  ___assert_fail((76047|0),(75698|0),242,(76117|0));
  // unreachable;
 }
 $21 = +HEAPF64[$8>>3];
 $22 = $21 > 0.0;
 if (!($22)) {
  ___assert_fail((76061|0),(75698|0),243,(76117|0));
  // unreachable;
 }
 $23 = $3;
 $24 = (+_AT_max_E_transfer_MeV_single($23));
 $25 = $24 * 1000.0;
 $9 = $25;
 $26 = $9;
 $27 = $26 > 0.0;
 if (!($27)) {
  ___assert_fail((76141|0),(75698|0),248,(76117|0));
  // unreachable;
 }
 HEAPF64[$10>>3] = 0.0;
 HEAPF64[$11>>3] = 0.0;
 HEAPF64[$12>>3] = 0.0;
 HEAPF64[$13>>3] = 0.0;
 HEAPF64[$14>>3] = 0.0;
 $15 = 0.0;
 $28 = $5;
 $29 = ($28|0)==(7);
 if ($29) {
  $30 = $3;
  $31 = (+_AT_beta_from_E_single($30));
  $15 = $31;
  $32 = +HEAPF64[$7>>3];
  $33 = +HEAPF64[$8>>3];
  _AT_ER_Tabata_constants($32,$33,$10,$11,$12,$13,$14);
 }
 $16 = 0.0;
 $34 = $5;
 switch ($34|0) {
 case 2:  {
  $35 = $9;
  $36 = (+_AT_ER_ButtsKatz_range_g_cm2($35));
  $16 = $36;
  break;
 }
 case 3:  {
  $37 = $9;
  $38 = (+_AT_ER_Waligorski_range_g_cm2($37));
  $16 = $38;
  break;
 }
 case 6:  {
  $39 = $9;
  $40 = (+_AT_ER_Edmund_range_g_cm2($39));
  $16 = $40;
  break;
 }
 case 4:  {
  $41 = $3;
  $42 = (+_AT_ER_Geiss_range_g_cm2($41));
  $16 = $42;
  break;
 }
 case 5:  {
  $43 = $3;
  $44 = (+_AT_ER_Scholz_range_g_cm2($43));
  $16 = $44;
  break;
 }
 case 8:  {
  $45 = $3;
  $46 = (+_AT_ER_Scholz_new_range_g_cm2($45));
  $16 = $46;
  break;
 }
 case 7:  {
  $47 = $15;
  $48 = +HEAPF64[$10>>3];
  $49 = +HEAPF64[$11>>3];
  $50 = +HEAPF64[$12>>3];
  $51 = +HEAPF64[$13>>3];
  $52 = +HEAPF64[$14>>3];
  $53 = (+_AT_ER_Tabata_range_g_cm2($47,$48,$49,$50,$51,$52));
  $16 = $53;
  break;
 }
 case 9:  {
  $54 = $3;
  $55 = (+_AT_ER_AM_RadDiff_range_g_cm2($54));
  $16 = $55;
  break;
 }
 default: {
  $56 = $3;
  $16 = $56;
 }
 }
 $57 = +HEAPF64[$6>>3];
 $58 = $57 > 0.0;
 if (!($58)) {
  ___assert_fail((76090|0),(75698|0),297,(76117|0));
  // unreachable;
 }
 $59 = $16;
 $17 = $59;
 $60 = $5;
 $61 = ($60|0)!=(1);
 $62 = $5;
 $63 = ($62|0)!=(9);
 $or$cond = $61 & $63;
 if (!($or$cond)) {
  $68 = $17;
  STACKTOP = sp;return (+$68);
 }
 $64 = +HEAPF64[$6>>3];
 $65 = 0.01 / $64;
 $66 = $17;
 $67 = $66 * $65;
 $17 = $67;
 $68 = $17;
 STACKTOP = sp;return (+$68);
}
function _AT_xi_keV($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = (+_AT_average_Z_from_material_no($13));
 $8 = $14;
 $15 = $6;
 $16 = (+_AT_average_A_from_material_no($15));
 $9 = $16;
 $17 = $6;
 $18 = (+_AT_density_g_cm3_from_material_no($17));
 $10 = $18;
 $19 = $4;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $5;
 $22 = (_AT_Z_from_particle_no_single($21)|0);
 $23 = (+($22|0));
 $12 = $23;
 $24 = $8;
 $25 = $9;
 $26 = $24 / $25;
 $27 = 153.5 * $26;
 $28 = $12;
 $29 = $12;
 $30 = $28 * $29;
 $31 = $27 * $30;
 $32 = $11;
 $33 = $11;
 $34 = $32 * $33;
 $35 = $31 / $34;
 $36 = $10;
 $37 = $35 * $36;
 $38 = $7;
 $39 = $38 / 1.0E+4;
 $40 = $37 * $39;
 STACKTOP = sp;return (+$40);
}
function _AT_mean_energy_loss_keV($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 28|0;
 $8 = sp;
 HEAPF64[$4>>3] = $0;
 HEAP32[$5>>2] = $1;
 $6 = $2;
 $7 = $3;
 HEAPF64[$8>>3] = 0.0;
 $9 = $6;
 (_AT_Stopping_Power(80453,1,$4,$5,$9,$8)|0);
 $10 = +HEAPF64[$8>>3];
 $11 = $7;
 $12 = $10 * $11;
 STACKTOP = sp;return (+$12);
}
function _AT_kappa_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (+_AT_xi_keV($8,$9,$10,$11));
 $13 = $4;
 $14 = (+_AT_max_E_transfer_MeV_single($13));
 $15 = $14 * 1000.0;
 $16 = $12 / $15;
 STACKTOP = sp;return (+$16);
}
function _AT_kappa_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $10;
  $26 = $12;
  $27 = (($25) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = (+_AT_kappa_single($19,$23,$24,$28));
  $30 = $11;
  $31 = $12;
  $32 = (($30) + ($31<<3)|0);
  HEAPF64[$32>>3] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_Landau_PDF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_gsl_ran_landau_pdf($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_Landau_IDF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_CL_ranlan_idf($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_mean_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $10;
  $26 = $12;
  $27 = (($25) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = (+_AT_lambda_mean_single($19,$23,$24,$28));
  $30 = $11;
  $31 = $12;
  $32 = (($30) + ($31<<3)|0);
  HEAPF64[$32>>3] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_mean_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = (+_AT_kappa_single($10,$11,$12,$13));
 $8 = $14;
 $15 = $4;
 $16 = (+_AT_beta_from_E_single($15));
 $9 = $16;
 $17 = $9;
 $18 = $9;
 $19 = $17 * $18;
 $20 = -0.42278433509000002 - $19;
 $21 = $8;
 $22 = (+Math_log((+$21)));
 $23 = $20 - $22;
 STACKTOP = sp;return (+$23);
}
function _AT_lambda_max_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $14 = $12;
  $15 = $6;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $7;
  $18 = $12;
  $19 = (($17) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $8;
  $22 = $12;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $9;
  $26 = $10;
  $27 = $12;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = (+_AT_lambda_mean_single($20,$24,$25,$29));
  $13 = $30;
  $31 = $13;
  $32 = (+_AT_lambda_max_single($31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_max_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = 1.1934 * $2;
 $4 = 0.60714999999999997 + $3;
 $5 = $1;
 $6 = 0.052381999999999998 * $5;
 $7 = 0.67793999999999999 + $6;
 $8 = $1;
 $9 = 0.74441999999999997 * $8;
 $10 = 0.94752999999999998 + $9;
 $11 = (+Math_exp((+$10)));
 $12 = $7 * $11;
 $13 = $4 + $12;
 STACKTOP = sp;return (+$13);
}
function _AT_lambda_landau_from_energy_loss_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $5;
 $32 = $13;
 $33 = $31 - $32;
 $34 = $12;
 $35 = $33 / $34;
 $36 = $35 - 0.42278433509000002;
 $37 = $11;
 $38 = $11;
 $39 = $37 * $38;
 $40 = $36 - $39;
 $41 = $10;
 $42 = (+Math_log((+$41)));
 $43 = $40 - $42;
 STACKTOP = sp;return (+$43);
}
function _AT_lambda_landau_from_energy_loss_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $10;
  $24 = $11;
  $25 = $12;
  $26 = (+_AT_lambda_landau_from_energy_loss_single($21,$22,$23,$24,$25));
  $27 = $13;
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $14;
  $31 = (($30) + 1)|0;
  $14 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_energy_loss_from_lambda_landau_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $12;
 $32 = $5;
 $33 = $32 + 0.42278433509000002;
 $34 = $11;
 $35 = $11;
 $36 = $34 * $35;
 $37 = $33 + $36;
 $38 = $10;
 $39 = (+Math_log((+$38)));
 $40 = $37 + $39;
 $41 = $31 * $40;
 $42 = $13;
 $43 = $41 + $42;
 STACKTOP = sp;return (+$43);
}
function _AT_energy_loss_from_lambda_landau_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $11;
  $31 = $12;
  $32 = $14;
  $33 = (($31) + ($32<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+_AT_energy_loss_from_lambda_landau_single($21,$25,$29,$30,$34));
  $36 = $13;
  $37 = $14;
  $38 = (($36) + ($37<<3)|0);
  HEAPF64[$38>>3] = $35;
  $39 = $14;
  $40 = (($39) + 1)|0;
  $14 = $40;
 }
 STACKTOP = sp;return;
}
function _AT_energy_loss_from_lambda_vavilov_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $12;
 $32 = $5;
 $33 = $10;
 $34 = $32 / $33;
 $35 = $34 + 0.42278433509000002;
 $36 = $11;
 $37 = $11;
 $38 = $36 * $37;
 $39 = $35 + $38;
 $40 = $31 * $39;
 $41 = $13;
 $42 = $40 + $41;
 STACKTOP = sp;return (+$42);
}
function _AT_energy_loss_from_lambda_vavilov_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $11;
  $31 = $12;
  $32 = $14;
  $33 = (($31) + ($32<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+_AT_energy_loss_from_lambda_vavilov_single($21,$25,$29,$30,$34));
  $36 = $13;
  $37 = $14;
  $38 = (($36) + ($37<<3)|0);
  HEAPF64[$38>>3] = $35;
  $39 = $14;
  $40 = (($39) + 1)|0;
  $14 = $40;
 }
 STACKTOP = sp;return;
}
function _AT_Landau_energy_loss_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 STACKTOP = sp;return;
}
function _AT_Vavilov_PDF($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1840|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1840|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $7;
 $13 = $8;
 $14 = $8;
 $15 = $13 * $14;
 _ROOT_vavset($10,$12,$15);
 $11 = 0;
 while(1) {
  $16 = $11;
  $17 = $5;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = $11;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+_ROOT_vav_pdf($22,$10));
  $24 = $9;
  $25 = $11;
  $26 = (($24) + ($25<<3)|0);
  HEAPF64[$26>>3] = $23;
  $27 = $11;
  $28 = (($27) + 1)|0;
  $11 = $28;
 }
 STACKTOP = sp;return;
}
function _AT_Vavilov_IDF($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1824|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1824|0);
 $11 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $12 = $10;
  $13 = $5;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $7;
  $16 = $10;
  $17 = (($15) + ($16<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $8;
  $20 = $10;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $8;
  $24 = $10;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $22 * $26;
  _ROOT_vavset($11,$18,$27);
  $28 = $6;
  $29 = $10;
  $30 = (($28) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = (+_ROOT_val_idf($31,$11));
  $33 = $9;
  $34 = $10;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $10;
  $37 = (($36) + 1)|0;
  $10 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_vavilov_from_energy_loss_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $10;
 $32 = $5;
 $33 = $13;
 $34 = $32 - $33;
 $35 = $12;
 $36 = $34 / $35;
 $37 = $36 - 0.42278433509000002;
 $38 = $11;
 $39 = $11;
 $40 = $38 * $39;
 $41 = $37 - $40;
 $42 = $31 * $41;
 STACKTOP = sp;return (+$42);
}
function _AT_lambda_vavilov_from_energy_loss_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $10;
  $24 = $11;
  $25 = $12;
  $26 = (+_AT_lambda_vavilov_from_energy_loss_single($21,$22,$23,$24,$25));
  $27 = $13;
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $14;
  $31 = (($30) + 1)|0;
  $14 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_Vavilov_energy_loss_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 STACKTOP = sp;return;
}
function _AT_energy_loss_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $9;
 $16 = $10;
 $17 = $11;
 $18 = $12;
 $19 = (+_AT_kappa_single($15,$16,$17,$18));
 $14 = $19;
 $20 = $14;
 $21 = $20 <= 0.01;
 if ($21) {
  $22 = $7;
  $23 = $8;
  $24 = $9;
  $25 = $10;
  $26 = $11;
  $27 = $12;
  $28 = $13;
  _AT_Landau_energy_loss_distribution($22,$23,$24,$25,$26,$27,$28);
  STACKTOP = sp;return;
 }
 $29 = $14;
 $30 = $29 < 10.0;
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $7;
 $32 = $8;
 $33 = $9;
 $34 = $10;
 $35 = $11;
 $36 = $12;
 $37 = $13;
 _AT_Vavilov_energy_loss_distribution($31,$32,$33,$34,$35,$36,$37);
 STACKTOP = sp;return;
}
function _AT_lambda_Vavilov_Mode($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1888|0);
 $4 = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $3;
 $16 = $14 * $15;
 _ROOT_vavset($4,$13,$16);
 $17 = $2;
 $18 = (+Math_log((+$17)));
 $19 = -0.42278433509846713 - $18;
 $20 = $3;
 $21 = $3;
 $22 = $20 * $21;
 $23 = $19 - $22;
 $5 = $23;
 $24 = $5;
 $25 = $24 > -0.22317200000000001;
 if ($25) {
  $5 = -0.22317200000000001;
 }
 $6 = 0.01;
 while(1) {
  $26 = $5;
  $27 = $6;
  $28 = $26 - $27;
  $29 = (+_ROOT_vav_pdf($28,$4));
  $8 = $29;
  $30 = $5;
  $31 = (+_ROOT_vav_pdf($30,$4));
  $9 = $31;
  $32 = $5;
  $33 = $6;
  $34 = $32 + $33;
  $35 = (+_ROOT_vav_pdf($34,$4));
  $10 = $35;
  $36 = $10;
  $37 = $8;
  $38 = $36 - $37;
  $39 = 0.5 * $38;
  $40 = $6;
  $41 = $39 / $40;
  $11 = $41;
  $42 = $10;
  $43 = $9;
  $44 = 2.0 * $43;
  $45 = $42 - $44;
  $46 = $8;
  $47 = $45 + $46;
  $48 = $6;
  $49 = $6;
  $50 = $48 * $49;
  $51 = $47 / $50;
  $12 = $51;
  $52 = $12;
  $53 = $52 != 0.0;
  if ($53) {
   $54 = $11;
   $55 = - $54;
   $56 = $12;
   $57 = $55 / $56;
   $7 = $57;
  } else {
   $7 = 0.0;
  }
  $58 = $7;
  $59 = $5;
  $60 = $59 + $58;
  $5 = $60;
  $61 = $7;
  $62 = (+Math_abs((+$61)));
  $63 = $6;
  $64 = $62 < $63;
  if ($64) {
   $65 = $7;
   $66 = (+Math_abs((+$65)));
   $67 = 0.10000000000000001 * $66;
   $6 = $67;
  }
  $68 = $7;
  $69 = (+Math_abs((+$68)));
  $70 = $69 > 1.0000000000000001E-5;
  if (!($70)) {
   break;
  }
 }
 $71 = $5;
 STACKTOP = sp;return (+$71);
}
function _AT_lambda_Vavilov_FWHM_left($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1888|0);
 $5 = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $14 = $2;
 $15 = $3;
 $16 = (+_AT_lambda_Vavilov_Mode($14,$15));
 $4 = $16;
 $17 = $2;
 $18 = $3;
 $19 = $3;
 $20 = $18 * $19;
 _ROOT_vavset($5,$17,$20);
 $21 = $4;
 $22 = (+_ROOT_vav_pdf($21,$5));
 $23 = $22 * 0.5;
 $6 = $23;
 $24 = $4;
 $25 = $24 - 1.3636999999999999;
 $4 = $25;
 $7 = 0.01;
 while(1) {
  $26 = $4;
  $27 = (+_ROOT_vav_pdf($26,$5));
  $9 = $27;
  $28 = $4;
  $29 = $7;
  $30 = $28 - $29;
  $31 = (+_ROOT_vav_pdf($30,$5));
  $10 = $31;
  $32 = $4;
  $33 = $7;
  $34 = $32 + $33;
  $35 = (+_ROOT_vav_pdf($34,$5));
  $11 = $35;
  $36 = $9;
  $37 = $6;
  $38 = $36 - $37;
  $12 = $38;
  $39 = $11;
  $40 = $10;
  $41 = $39 - $40;
  $42 = 0.5 * $41;
  $43 = $7;
  $44 = $42 / $43;
  $13 = $44;
  $45 = $13;
  $46 = $45 != 0.0;
  if ($46) {
   $47 = $12;
   $48 = - $47;
   $49 = $13;
   $50 = $48 / $49;
   $8 = $50;
  } else {
   $8 = 0.0;
  }
  $51 = $8;
  $52 = $4;
  $53 = $52 + $51;
  $4 = $53;
  $54 = $8;
  $55 = (+Math_abs((+$54)));
  $56 = $7;
  $57 = $55 < $56;
  if ($57) {
   $58 = $8;
   $59 = (+Math_abs((+$58)));
   $60 = 0.10000000000000001 * $59;
   $7 = $60;
  }
  $61 = $8;
  $62 = (+Math_abs((+$61)));
  $63 = $62 > 1.0000000000000001E-5;
  if (!($63)) {
   break;
  }
 }
 $64 = $4;
 STACKTOP = sp;return (+$64);
}
function _AT_lambda_Vavilov_FWHM_right($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1888|0);
 $5 = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $14 = $2;
 $15 = $3;
 $16 = (+_AT_lambda_Vavilov_Mode($14,$15));
 $4 = $16;
 $17 = $2;
 $18 = $3;
 $19 = $3;
 $20 = $18 * $19;
 _ROOT_vavset($5,$17,$20);
 $21 = $4;
 $22 = (+_ROOT_vav_pdf($21,$5));
 $23 = $22 * 0.5;
 $6 = $23;
 $24 = $4;
 $25 = $24 + 2.6549999999999998;
 $4 = $25;
 $7 = 0.01;
 while(1) {
  $26 = $4;
  $27 = (+_ROOT_vav_pdf($26,$5));
  $9 = $27;
  $28 = $4;
  $29 = $7;
  $30 = $28 - $29;
  $31 = (+_ROOT_vav_pdf($30,$5));
  $10 = $31;
  $32 = $4;
  $33 = $7;
  $34 = $32 + $33;
  $35 = (+_ROOT_vav_pdf($34,$5));
  $11 = $35;
  $36 = $9;
  $37 = $6;
  $38 = $36 - $37;
  $12 = $38;
  $39 = $11;
  $40 = $10;
  $41 = $39 - $40;
  $42 = 0.5 * $41;
  $43 = $7;
  $44 = $42 / $43;
  $13 = $44;
  $45 = $13;
  $46 = $45 != 0.0;
  if ($46) {
   $47 = $12;
   $48 = - $47;
   $49 = $13;
   $50 = $48 / $49;
   $8 = $50;
  } else {
   $8 = 0.0;
  }
  $51 = $8;
  $52 = $4;
  $53 = $52 + $51;
  $4 = $53;
  $54 = $8;
  $55 = (+Math_abs((+$54)));
  $56 = $7;
  $57 = $55 < $56;
  if ($57) {
   $58 = $8;
   $59 = (+Math_abs((+$58)));
   $60 = 0.10000000000000001 * $59;
   $7 = $60;
  }
  $61 = $8;
  $62 = (+Math_abs((+$61)));
  $63 = $62 > 1.0000000000000001E-5;
  if (!($63)) {
   break;
  }
 }
 $64 = $4;
 STACKTOP = sp;return (+$64);
}
function _AT_lambda_Vavilov_FWHM($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (+_AT_lambda_Vavilov_FWHM_right($4,$5));
 $7 = (+_AT_lambda_Landau_FWHM_left());
 $8 = $6 - $7;
 STACKTOP = sp;return (+$8);
}
function _AT_lambda_Landau_FWHM_left() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +-1.5894999999999999;
}
function _AT_energy_loss_keV_Vavilov_FWHM($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +0;
}
function _AT_energy_loss_keV_Vavilov_Mode($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +0;
}
function _AT_lambda_Vavilov_Mean($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (+Math_log((+$4)));
 $6 = -1.42278433509 - $5;
 $7 = $3;
 $8 = $3;
 $9 = $7 * $8;
 $10 = $6 - $9;
 STACKTOP = sp;return (+$10);
}
function _AT_lambda_Vavilov_Variance($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = 0.5 * $4;
 $6 = $3;
 $7 = $5 * $6;
 $8 = 1.0 - $7;
 $9 = $2;
 $10 = $8 / $9;
 STACKTOP = sp;return (+$10);
}
function _AT_lambda_Vavilov_Skewness($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $3;
 $6 = $4 * $5;
 $7 = $6 / 3.0;
 $8 = 0.5 - $7;
 $9 = $2;
 $10 = $2;
 $11 = $9 * $10;
 $12 = $8 / $11;
 $13 = $3;
 $14 = 0.5 * $13;
 $15 = $3;
 $16 = $14 * $15;
 $17 = 1.0 - $16;
 $18 = $2;
 $19 = $17 / $18;
 $20 = (+Math_pow((+$19),-1.5));
 $21 = $12 * $20;
 STACKTOP = sp;return (+$21);
}
function _AT_lambda_Landau_Mode() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +-0.2258;
}
function _AT_energy_loss_keV_Landau_Mode($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +0;
}
function _AT_lambda_Landau_FWHM_right() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +2.4291999999999998;
}
function _AT_lambda_Landau_FWHM() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_AT_lambda_Landau_FWHM_right());
 $1 = (+_AT_lambda_Landau_FWHM_left());
 $2 = $0 - $1;
 return (+$2);
}
function _AT_energy_loss_keV_Landau_FWHM($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +0;
}
function _AT_lambda_Landau_Mean($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (+Math_log((+$4)));
 $6 = -0.42278433509000002 - $5;
 $7 = $3;
 $8 = $3;
 $9 = $7 * $8;
 $10 = $6 - $9;
 STACKTOP = sp;return (+$10);
}
function _AT_Gauss_PDF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_gsl_ran_ugaussian_pdf($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_Gauss_IDF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_gsl_cdf_ugaussian_Pinv($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_energy_loss_from_lambda_gauss_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $5;
 $32 = $12;
 $33 = $12;
 $34 = $32 * $33;
 $35 = $10;
 $36 = $34 / $35;
 $37 = $11;
 $38 = $11;
 $39 = $37 * $38;
 $40 = $39 / 2.0;
 $41 = 1.0 - $40;
 $42 = $36 * $41;
 $43 = (+Math_sqrt((+$42)));
 $44 = $31 * $43;
 $45 = $13;
 $46 = $44 + $45;
 STACKTOP = sp;return (+$46);
}
function _AT_energy_loss_from_lambda_gauss_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $11;
  $31 = $12;
  $32 = $14;
  $33 = (($31) + ($32<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+_AT_energy_loss_from_lambda_gauss_single($21,$25,$29,$30,$34));
  $36 = $13;
  $37 = $14;
  $38 = (($36) + ($37<<3)|0);
  HEAPF64[$38>>3] = $35;
  $39 = $14;
  $40 = (($39) + 1)|0;
  $14 = $40;
 }
 STACKTOP = sp;return;
}
function _AT_Gauss_Mode() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +0;
}
function _AT_Gauss_Mean() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +0;
}
function _AT_Gauss_FWHM() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +0;
}
function _AT_energy_loss_mode($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = (+_AT_kappa_single($10,$11,$12,$13));
 $9 = $14;
 $15 = $9;
 $16 = $15 <= 0.01;
 if ($16) {
  $17 = $5;
  $18 = $6;
  $19 = $7;
  $20 = $8;
  $21 = (+_AT_energy_loss_keV_Landau_Mode($17,$18,$19,$20));
  $4 = $21;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 }
 $22 = $9;
 $23 = $22 < 10.0;
 $24 = $5;
 $25 = $6;
 $26 = $7;
 $27 = $8;
 if ($23) {
  $28 = (+_AT_energy_loss_keV_Vavilov_Mode($24,$25,$26,$27));
  $4 = $28;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 } else {
  $29 = (+_AT_mean_energy_loss_keV($24,$25,$26,$27));
  $4 = $29;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 }
 return +(0.0);
}
function _AT_energy_loss_FWHM($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = (+_AT_kappa_single($10,$11,$12,$13));
 $9 = $14;
 $15 = $9;
 $16 = $15 <= 0.01;
 if ($16) {
  $17 = $5;
  $18 = $6;
  $19 = $7;
  $20 = $8;
  $21 = (+_AT_energy_loss_keV_Landau_FWHM($17,$18,$19,$20));
  $4 = $21;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 }
 $22 = $9;
 $23 = $22 < 10.0;
 if ($23) {
  $24 = $5;
  $25 = $6;
  $26 = $7;
  $27 = $8;
  $28 = (+_AT_energy_loss_keV_Vavilov_FWHM($24,$25,$26,$27));
  $4 = $28;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 } else {
  $4 = 0.0;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 }
 return +(0.0);
}
function _AT_get_error_msg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 0;
}
function _AT_check_energy_range_single_particle($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 switch ($7|0) {
 case 0:  {
  $6 = 0.001;
  $5 = 1.0E+4;
  break;
 }
 case 1:  {
  $6 = 1.0;
  $5 = 250.0;
  break;
 }
 case 2:  {
  $6 = 0.10000000000000001;
  $5 = 1000.0;
  break;
 }
 case 3:  {
  $6 = 3.0;
  $5 = 300.0;
  break;
 }
 default: {
  $6 = 1.0;
  $5 = 250.0;
 }
 }
 $8 = $3;
 $9 = $6;
 $10 = $8 < $9;
 if (!($10)) {
  $11 = $3;
  $12 = $5;
  $13 = $11 > $12;
  if (!($13)) {
   $2 = 0;
   $14 = $2;
   STACKTOP = sp;return ($14|0);
  }
 }
 $2 = 2;
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function _AT_check_energy_range_single_field($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = (_AT_check_energy_range_single_particle($15,$16)|0);
  $7 = $17;
  $18 = $7;
  $19 = ($18|0)!=(0);
  if ($19) {
   label = 4;
   break;
  }
  $21 = $8;
  $22 = (($21) + 1)|0;
  $8 = $22;
 }
 if ((label|0) == 4) {
  $20 = $7;
  $3 = $20;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _AT_check_particle_no_single_particle($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_AT_Z_from_particle_no_single($3)|0);
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = $2;
  $7 = (_AT_A_from_particle_no_single($6)|0);
  $8 = ($7|0)<(0);
  if (!($8)) {
   $1 = 0;
   $9 = $1;
   STACKTOP = sp;return ($9|0);
  }
 }
 $1 = 3;
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _AT_check_particle_no_single_field($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   label = 6;
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_AT_check_particle_no_single_particle($13)|0);
  $5 = $14;
  $15 = $5;
  $16 = ($15|0)!=(0);
  if ($16) {
   label = 4;
   break;
  }
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 if ((label|0) == 4) {
  $17 = $5;
  $2 = $17;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _AT_Gamma_index_from_material_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = -1;
 $3 = 1;
 $4 = $3;
 $5 = HEAP32[12480]|0;
 _find_elements_int($1,$4,(49924),$5,$2);
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _AT_Gamma_name_from_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_AT_Gamma_index_from_material_number($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(-1);
 $9 = $3;
 if ($8) {
  $10 = $4;
  $11 = ((50736) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  (_strcpy($9,$12)|0);
  STACKTOP = sp;return;
 } else {
  (_strcpy($9,76465)|0);
  STACKTOP = sp;return;
 }
}
function _AT_Gamma_number_of_parameters($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_Gamma_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(76488,$vararg_buffer)|0);
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $3;
  $10 = ((49952) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_gamma_response($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0;
 var $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0;
 var $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0;
 var $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0;
 var $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0;
 var $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0.0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(864|0);
 $37 = sp + 320|0;
 $38 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $39 = $4&1;
 $10 = $39;
 $11 = $5;
 $40 = $6;
 $41 = ($40|0)>(0);
 if (!($41)) {
  ___assert_fail((76518|0),(76538|0),79,(76570|0));
  // unreachable;
 }
 $42 = $7;
 $43 = ($42|0)!=(0|0);
 if (!($43)) {
  ___assert_fail((76588|0),(76538|0),80,(76570|0));
  // unreachable;
 }
 $44 = $9;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  ___assert_fail((76601|0),(76538|0),81,(76570|0));
  // unreachable;
 }
 $46 = $8;
 $47 = ($46|0)==(1);
 L10: do {
  if ($47) {
   $48 = $9;
   $49 = +HEAPF64[$48>>3];
   $14 = $49;
   $50 = $9;
   $51 = ((($50)) + 8|0);
   $52 = +HEAPF64[$51>>3];
   $15 = $52;
   $12 = 0;
   while(1) {
    $53 = $12;
    $54 = $6;
    $55 = ($53|0)<($54|0);
    if (!($55)) {
     break L10;
    }
    $56 = $10;
    $57 = $56&1;
    if ($57) {
     $58 = $11;
     $59 = $12;
     $60 = (($58) + ($59<<3)|0);
     HEAPF64[$60>>3] = 0.0;
    } else {
     $61 = $14;
     $62 = $7;
     $63 = $12;
     $64 = (($62) + ($63<<3)|0);
     $65 = +HEAPF64[$64>>3];
     $66 = $61 * $65;
     $67 = $15;
     $68 = $66 + $67;
     $69 = $11;
     $70 = $12;
     $71 = (($69) + ($70<<3)|0);
     HEAPF64[$71>>3] = $68;
    }
    $72 = $12;
    $73 = (($72) + 1)|0;
    $12 = $73;
   }
  }
 } while(0);
 $74 = $8;
 $75 = ($74|0)==(2);
 L20: do {
  if ($75) {
   $16 = 0;
   while(1) {
    $76 = $9;
    $77 = $16;
    $78 = (($76) + ($77<<3)|0);
    $79 = +HEAPF64[$78>>3];
    $80 = $79 != 0.0;
    if (!($80)) {
     break;
    }
    $81 = $16;
    $82 = (($81) + 4)|0;
    $16 = $82;
   }
   $12 = 0;
   while(1) {
    $83 = $12;
    $84 = $6;
    $85 = ($83|0)<($84|0);
    if (!($85)) {
     break;
    }
    $86 = $11;
    $87 = $12;
    $88 = (($86) + ($87<<3)|0);
    HEAPF64[$88>>3] = 0.0;
    $89 = $12;
    $90 = (($89) + 1)|0;
    $12 = $90;
   }
   $13 = 0;
   L30: while(1) {
    $91 = $13;
    $92 = $16;
    $93 = (($92|0) / 4)&-1;
    $94 = ($91|0)<($93|0);
    if (!($94)) {
     label = 39;
     break;
    }
    $95 = $9;
    $96 = $13;
    $97 = $96<<2;
    $98 = (($95) + ($97<<3)|0);
    $99 = +HEAPF64[$98>>3];
    $17 = $99;
    $100 = $9;
    $101 = $13;
    $102 = $101<<2;
    $103 = (($102) + 1)|0;
    $104 = (($100) + ($103<<3)|0);
    $105 = +HEAPF64[$104>>3];
    $18 = $105;
    $106 = $9;
    $107 = $13;
    $108 = $107<<2;
    $109 = (($108) + 2)|0;
    $110 = (($106) + ($109<<3)|0);
    $111 = +HEAPF64[$110>>3];
    $19 = $111;
    $112 = $9;
    $113 = $13;
    $114 = $113<<2;
    $115 = (($114) + 3)|0;
    $116 = (($112) + ($115<<3)|0);
    $117 = +HEAPF64[$116>>3];
    $20 = $117;
    $118 = $18;
    $119 = $118 > 0.0;
    if (!($119)) {
     label = 24;
     break;
    }
    $21 = 0.0;
    $12 = 0;
    while(1) {
     $120 = $12;
     $121 = $6;
     $122 = ($120|0)<($121|0);
     if (!($122)) {
      break;
     }
     $123 = $19;
     $124 = $123 == 1.0;
     if ($124) {
      $125 = $7;
      $126 = $12;
      $127 = (($125) + ($126<<3)|0);
      $128 = +HEAPF64[$127>>3];
      $129 = -1.0 * $128;
      $130 = $18;
      $131 = $129 / $130;
      $132 = (+Math_exp((+$131)));
      $133 = 1.0 - $132;
      $21 = $133;
     } else {
      $134 = $19;
      $135 = $134 > 0.0;
      if (!($135)) {
       label = 30;
       break L30;
      }
      $136 = $7;
      $137 = $12;
      $138 = (($136) + ($137<<3)|0);
      $139 = +HEAPF64[$138>>3];
      $140 = $139 >= 0.0;
      if (!($140)) {
       label = 32;
       break L30;
      }
      $141 = $19;
      $142 = $7;
      $143 = $12;
      $144 = (($142) + ($143<<3)|0);
      $145 = +HEAPF64[$144>>3];
      $146 = $18;
      $147 = $145 / $146;
      $148 = (+_gsl_sf_gamma_inc_P($141,$147));
      $21 = $148;
     }
     $149 = $20;
     $150 = $149 == 1.0;
     $151 = $17;
     $152 = $21;
     if ($150) {
      $153 = $152 * $151;
      $21 = $153;
     } else {
      $154 = $20;
      $155 = (+Math_pow((+$152),(+$154)));
      $156 = $151 * $155;
      $21 = $156;
     }
     $157 = $21;
     $158 = $11;
     $159 = $12;
     $160 = (($158) + ($159<<3)|0);
     $161 = +HEAPF64[$160>>3];
     $162 = $161 + $157;
     HEAPF64[$160>>3] = $162;
     $163 = $12;
     $164 = (($163) + 1)|0;
     $12 = $164;
    }
    $165 = $13;
    $166 = (($165) + 1)|0;
    $13 = $166;
   }
   if ((label|0) == 24) {
    ___assert_fail((76625|0),(76538|0),127,(76570|0));
    // unreachable;
   }
   else if ((label|0) == 30) {
    ___assert_fail((76632|0),(76538|0),135,(76570|0));
    // unreachable;
   }
   else if ((label|0) == 32) {
    ___assert_fail((76638|0),(76538|0),136,(76570|0));
    // unreachable;
   }
   else if ((label|0) == 39) {
    $167 = $10;
    $168 = $167&1;
    if (!($168)) {
     break;
    }
    $12 = 0;
    while(1) {
     $169 = $12;
     $170 = $6;
     $171 = ($169|0)<($170|0);
     if (!($171)) {
      break L20;
     }
     $172 = $11;
     $173 = $12;
     $174 = (($172) + ($173<<3)|0);
     $175 = +HEAPF64[$174>>3];
     $176 = $175 < 1.0;
     if (!($176)) {
      break;
     }
     $177 = $11;
     $178 = $12;
     $179 = (($177) + ($178<<3)|0);
     $180 = +HEAPF64[$179>>3];
     $181 = 1.0 - $180;
     $182 = (+Math_log((+$181)));
     $183 = -1.0 * $182;
     $184 = $11;
     $185 = $12;
     $186 = (($184) + ($185<<3)|0);
     HEAPF64[$186>>3] = $183;
     $187 = $12;
     $188 = (($187) + 1)|0;
     $12 = $188;
    }
    ___assert_fail((76651|0),(76538|0),151,(76570|0));
    // unreachable;
   }
  }
 } while(0);
 $189 = $8;
 $190 = ($189|0)==(3);
 L60: do {
  if ($190) {
   $191 = $9;
   $192 = +HEAPF64[$191>>3];
   $22 = $192;
   $193 = $9;
   $194 = ((($193)) + 8|0);
   $195 = +HEAPF64[$194>>3];
   $23 = $195;
   $196 = $9;
   $197 = ((($196)) + 16|0);
   $198 = +HEAPF64[$197>>3];
   $24 = $198;
   $199 = $24;
   $200 = $199 > 0.0;
   if (!($200)) {
    ___assert_fail((76662|0),(76538|0),175,(76570|0));
    // unreachable;
   }
   $201 = $23;
   $202 = $201 > 0.0;
   if (!($202)) {
    ___assert_fail((76625|0),(76538|0),176,(76570|0));
    // unreachable;
   }
   $203 = $22;
   $204 = $24;
   $205 = $203 / $204;
   $25 = $205;
   $206 = $22;
   $207 = $25;
   $208 = $206 - $207;
   $209 = $23;
   $210 = $208 / $209;
   $26 = $210;
   $12 = 0;
   while(1) {
    $211 = $12;
    $212 = $6;
    $213 = ($211|0)<($212|0);
    if (!($213)) {
     break;
    }
    $214 = $7;
    $215 = $12;
    $216 = (($214) + ($215<<3)|0);
    $217 = +HEAPF64[$216>>3];
    $218 = $23;
    $219 = $217 <= $218;
    $220 = $25;
    if ($219) {
     $221 = $7;
     $222 = $12;
     $223 = (($221) + ($222<<3)|0);
     $224 = +HEAPF64[$223>>3];
     $225 = $220 * $224;
     $226 = $26;
     $227 = 0.5 * $226;
     $228 = $7;
     $229 = $12;
     $230 = (($228) + ($229<<3)|0);
     $231 = +HEAPF64[$230>>3];
     $232 = (+_gsl_pow_2($231));
     $233 = $227 * $232;
     $234 = $225 + $233;
     $235 = $11;
     $236 = $12;
     $237 = (($235) + ($236<<3)|0);
     HEAPF64[$237>>3] = $234;
    } else {
     $238 = $23;
     $239 = $220 * $238;
     $240 = $26;
     $241 = 0.5 * $240;
     $242 = $23;
     $243 = (+_gsl_pow_2($242));
     $244 = $241 * $243;
     $245 = $239 + $244;
     $246 = $22;
     $247 = $7;
     $248 = $12;
     $249 = (($247) + ($248<<3)|0);
     $250 = +HEAPF64[$249>>3];
     $251 = $23;
     $252 = $250 - $251;
     $253 = $246 * $252;
     $254 = $245 + $253;
     $255 = $11;
     $256 = $12;
     $257 = (($255) + ($256<<3)|0);
     HEAPF64[$257>>3] = $254;
    }
    $258 = $12;
    $259 = (($258) + 1)|0;
    $12 = $259;
   }
   $260 = $10;
   $261 = $260&1;
   if ($261) {
    $12 = 0;
    while(1) {
     $262 = $12;
     $263 = $6;
     $264 = ($262|0)<($263|0);
     if (!($264)) {
      break L60;
     }
     $265 = $11;
     $266 = $12;
     $267 = (($265) + ($266<<3)|0);
     $268 = +HEAPF64[$267>>3];
     $269 = $268 < 1.0;
     if (!($269)) {
      break;
     }
     $270 = $11;
     $271 = $12;
     $272 = (($270) + ($271<<3)|0);
     $273 = +HEAPF64[$272>>3];
     $274 = 1.0 - $273;
     $275 = (+Math_log((+$274)));
     $276 = -1.0 * $275;
     $277 = $11;
     $278 = $12;
     $279 = (($277) + ($278<<3)|0);
     HEAPF64[$279>>3] = $276;
     $280 = $12;
     $281 = (($280) + 1)|0;
     $12 = $281;
    }
    ___assert_fail((76651|0),(76538|0),191,(76570|0));
    // unreachable;
   }
  }
 } while(0);
 $282 = $8;
 $283 = ($282|0)==(4);
 L83: do {
  if ($283) {
   $284 = $9;
   $285 = +HEAPF64[$284>>3];
   $27 = $285;
   $286 = $9;
   $287 = ((($286)) + 8|0);
   $288 = +HEAPF64[$287>>3];
   $28 = $288;
   $289 = $28;
   $290 = $289 > 0.0;
   if (!($290)) {
    ___assert_fail((76670|0),(76538|0),207,(76570|0));
    // unreachable;
   }
   $12 = 0;
   while(1) {
    $291 = $12;
    $292 = $6;
    $293 = ($291|0)<($292|0);
    if (!($293)) {
     break L83;
    }
    $294 = $10;
    $295 = $294&1;
    if ($295) {
     $296 = $7;
     $297 = $12;
     $298 = (($296) + ($297<<3)|0);
     $299 = +HEAPF64[$298>>3];
     $300 = $28;
     $301 = $299 / $300;
     $302 = $11;
     $303 = $12;
     $304 = (($302) + ($303<<3)|0);
     HEAPF64[$304>>3] = $301;
    } else {
     $305 = $27;
     $306 = $7;
     $307 = $12;
     $308 = (($306) + ($307<<3)|0);
     $309 = +HEAPF64[$308>>3];
     $310 = -1.0 * $309;
     $311 = $28;
     $312 = $310 / $311;
     $313 = (+Math_exp((+$312)));
     $314 = 1.0 - $313;
     $315 = $305 * $314;
     $316 = $11;
     $317 = $12;
     $318 = (($316) + ($317<<3)|0);
     HEAPF64[$318>>3] = $315;
    }
    $319 = $12;
    $320 = (($319) + 1)|0;
    $12 = $320;
   }
  }
 } while(0);
 $321 = $8;
 $322 = ($321|0)==(5);
 L96: do {
  if ($322) {
   $323 = $9;
   $324 = +HEAPF64[$323>>3];
   $29 = $324;
   $325 = $9;
   $326 = ((($325)) + 8|0);
   $327 = +HEAPF64[$326>>3];
   $30 = $327;
   $328 = $9;
   $329 = ((($328)) + 16|0);
   $330 = +HEAPF64[$329>>3];
   $31 = $330;
   $331 = $29;
   $332 = $331 > 0.0;
   if (!($332)) {
    ___assert_fail((76677|0),(76538|0),231,(76570|0));
    // unreachable;
   }
   $333 = $30;
   $334 = $333 >= 0.0;
   if (!($334)) {
    ___assert_fail((76688|0),(76538|0),232,(76570|0));
    // unreachable;
   }
   $335 = $31;
   $336 = $335 > 0.0;
   if (!($336)) {
    ___assert_fail((76699|0),(76538|0),233,(76570|0));
    // unreachable;
   }
   $12 = 0;
   while(1) {
    $337 = $12;
    $338 = $6;
    $339 = ($337|0)<($338|0);
    if (!($339)) {
     break L96;
    }
    $340 = $7;
    $341 = $12;
    $342 = (($340) + ($341<<3)|0);
    $343 = +HEAPF64[$342>>3];
    $344 = $31;
    $345 = $343 < $344;
    $346 = $29;
    if ($345) {
     $347 = $7;
     $348 = $12;
     $349 = (($347) + ($348<<3)|0);
     $350 = +HEAPF64[$349>>3];
     $351 = $346 * $350;
     $352 = $30;
     $353 = $7;
     $354 = $12;
     $355 = (($353) + ($354<<3)|0);
     $356 = +HEAPF64[$355>>3];
     $357 = (+_gsl_pow_2($356));
     $358 = $352 * $357;
     $359 = $351 + $358;
     $360 = $11;
     $361 = $12;
     $362 = (($360) + ($361<<3)|0);
     HEAPF64[$362>>3] = $359;
    } else {
     $363 = $31;
     $364 = $346 * $363;
     $365 = $30;
     $366 = $31;
     $367 = (+_gsl_pow_2($366));
     $368 = $365 * $367;
     $369 = $364 + $368;
     $370 = $29;
     $371 = $30;
     $372 = 2.0 * $371;
     $373 = $31;
     $374 = $372 * $373;
     $375 = $370 + $374;
     $376 = $7;
     $377 = $12;
     $378 = (($376) + ($377<<3)|0);
     $379 = +HEAPF64[$378>>3];
     $380 = $31;
     $381 = $379 - $380;
     $382 = $375 * $381;
     $383 = $369 + $382;
     $384 = $11;
     $385 = $12;
     $386 = (($384) + ($385<<3)|0);
     HEAPF64[$386>>3] = $383;
    }
    $387 = $10;
    $388 = $387&1;
    if (!($388)) {
     $389 = $11;
     $390 = $12;
     $391 = (($389) + ($390<<3)|0);
     $392 = +HEAPF64[$391>>3];
     $393 = - $392;
     $394 = (+Math_exp((+$393)));
     $395 = $11;
     $396 = $12;
     $397 = (($395) + ($396<<3)|0);
     HEAPF64[$397>>3] = $394;
    }
    $398 = $12;
    $399 = (($398) + 1)|0;
    $12 = $399;
   }
  }
 } while(0);
 $400 = $8;
 $401 = ($400|0)==(6);
 L118: do {
  if ($401) {
   $402 = $9;
   $403 = +HEAPF64[$402>>3];
   $32 = $403;
   $404 = $9;
   $405 = ((($404)) + 8|0);
   $406 = +HEAPF64[$405>>3];
   $33 = $406;
   $407 = $9;
   $408 = ((($407)) + 16|0);
   $409 = +HEAPF64[$408>>3];
   $34 = $409;
   $410 = $9;
   $411 = ((($410)) + 24|0);
   $412 = +HEAPF64[$411>>3];
   $35 = $412;
   $413 = $9;
   $414 = ((($413)) + 32|0);
   $415 = +HEAPF64[$414>>3];
   $36 = $415;
   $12 = 0;
   while(1) {
    $416 = $12;
    $417 = $6;
    $418 = ($416|0)<($417|0);
    if (!($418)) {
     break L118;
    }
    $419 = $10;
    $420 = $419&1;
    if ($420) {
     $421 = $33;
     $422 = $34;
     $423 = - $422;
     $424 = $7;
     $425 = $12;
     $426 = (($424) + ($425<<3)|0);
     $427 = +HEAPF64[$426>>3];
     $428 = $423 * $427;
     $429 = (+Math_exp((+$428)));
     $430 = 1.0 - $429;
     $431 = $421 * $430;
     $432 = 1.0 - $431;
     $433 = $35;
     $434 = $36;
     $435 = - $434;
     $436 = $7;
     $437 = $12;
     $438 = (($436) + ($437<<3)|0);
     $439 = +HEAPF64[$438>>3];
     $440 = $435 * $439;
     $441 = $7;
     $442 = $12;
     $443 = (($441) + ($442<<3)|0);
     $444 = +HEAPF64[$443>>3];
     $445 = $440 * $444;
     $446 = (+Math_exp((+$445)));
     $447 = 1.0 - $446;
     $448 = $433 * $447;
     $449 = $432 - $448;
     $450 = $449 > 0.0;
     if (!($450)) {
      break;
     }
     $451 = $33;
     $452 = $34;
     $453 = - $452;
     $454 = $7;
     $455 = $12;
     $456 = (($454) + ($455<<3)|0);
     $457 = +HEAPF64[$456>>3];
     $458 = $453 * $457;
     $459 = (+Math_exp((+$458)));
     $460 = 1.0 - $459;
     $461 = $451 * $460;
     $462 = 1.0 - $461;
     $463 = $35;
     $464 = $36;
     $465 = - $464;
     $466 = $7;
     $467 = $12;
     $468 = (($466) + ($467<<3)|0);
     $469 = +HEAPF64[$468>>3];
     $470 = (+_gsl_pow_2($469));
     $471 = $465 * $470;
     $472 = (+Math_exp((+$471)));
     $473 = 1.0 - $472;
     $474 = $463 * $473;
     $475 = $462 - $474;
     $476 = (+Math_log((+$475)));
     $477 = - $476;
     $478 = $11;
     $479 = $12;
     $480 = (($478) + ($479<<3)|0);
     HEAPF64[$480>>3] = $477;
    } else {
     $481 = $32;
     $482 = $33;
     $483 = $34;
     $484 = - $483;
     $485 = $7;
     $486 = $12;
     $487 = (($485) + ($486<<3)|0);
     $488 = +HEAPF64[$487>>3];
     $489 = $484 * $488;
     $490 = (+Math_exp((+$489)));
     $491 = 1.0 - $490;
     $492 = $482 * $491;
     $493 = $35;
     $494 = $36;
     $495 = - $494;
     $496 = $7;
     $497 = $12;
     $498 = (($496) + ($497<<3)|0);
     $499 = +HEAPF64[$498>>3];
     $500 = (+_gsl_pow_2($499));
     $501 = $495 * $500;
     $502 = (+Math_exp((+$501)));
     $503 = 1.0 - $502;
     $504 = $493 * $503;
     $505 = $492 + $504;
     $506 = $481 * $505;
     $507 = $11;
     $508 = $12;
     $509 = (($507) + ($508<<3)|0);
     HEAPF64[$509>>3] = $506;
    }
    $510 = $12;
    $511 = (($510) + 1)|0;
    $12 = $511;
   }
   ___assert_fail((76707|0),(76538|0),269,(76570|0));
   // unreachable;
  }
 } while(0);
 $512 = $8;
 $513 = ($512|0)==(7);
 if (!($513)) {
  STACKTOP = sp;return;
 }
 _memcpy(($37|0),(16|0),320)|0;
 _memcpy(($38|0),(336|0),320)|0;
 $12 = 0;
 while(1) {
  $514 = $12;
  $515 = $6;
  $516 = ($514|0)<($515|0);
  if (!($516)) {
   break;
  }
  $517 = $7;
  $518 = $12;
  $519 = (($517) + ($518<<3)|0);
  $520 = +HEAPF64[$519>>3];
  $521 = $520 < 100.0;
  do {
   if ($521) {
    $522 = $11;
    $523 = $12;
    $524 = (($522) + ($523<<3)|0);
    HEAPF64[$524>>3] = 1.0;
   } else {
    $525 = $7;
    $526 = $12;
    $527 = (($525) + ($526<<3)|0);
    $528 = +HEAPF64[$527>>3];
    $529 = $528 > 2.0E+6;
    if ($529) {
     $530 = $11;
     $531 = $12;
     $532 = (($530) + ($531<<3)|0);
     HEAPF64[$532>>3] = -9.9999999999999997E+98;
     break;
    } else {
     $533 = $7;
     $534 = $12;
     $535 = (($533) + ($534<<3)|0);
     $536 = +HEAPF64[$535>>3];
     $537 = (+_AT_get_interpolated_y_from_input_table($37,$38,40,$536));
     $538 = $11;
     $539 = $12;
     $540 = (($538) + ($539<<3)|0);
     HEAPF64[$540>>3] = $537;
     break;
    }
   }
  } while(0);
  $541 = $12;
  $542 = (($541) + 1)|0;
  $12 = $542;
 }
 STACKTOP = sp;return;
}
function _AT_get_gamma_response_for_average_dose($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $15 = sp + 8|0;
 $16 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $17 = $6&1;
 $13 = $17;
 HEAPF64[$15>>3] = 0.0;
 $14 = 0;
 while(1) {
  $18 = $14;
  $19 = $7;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $8;
  $22 = $14;
  $23 = (($21) + ($22<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $9;
  $26 = $14;
  $27 = (($25) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $24 * $28;
  $30 = $10;
  $31 = $14;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $29 * $33;
  $35 = +HEAPF64[$15>>3];
  $36 = $35 + $34;
  HEAPF64[$15>>3] = $36;
  $37 = $14;
  $38 = (($37) + 1)|0;
  $14 = $38;
 }
 HEAPF64[$16>>3] = 0.0;
 $14 = 1;
 $39 = $14;
 $40 = $11;
 $41 = $12;
 $42 = $13;
 $43 = $42&1;
 _AT_gamma_response($39,$15,$40,$41,$43,$16);
 $44 = +HEAPF64[$16>>3];
 STACKTOP = sp;return (+$44);
}
function _AT_get_response_distribution_from_dose_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $14 = $5&1;
 $12 = $14;
 $13 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $10;
 $18 = $11;
 $19 = $12;
 $20 = $19&1;
 $21 = $13;
 _AT_gamma_response($15,$16,$17,$18,$20,$21);
 STACKTOP = sp;return;
}
function _AT_get_ion_response_from_response_distribution($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0.0;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $7;
  $14 = $8;
  $15 = (($13) + ($14<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $5;
  $18 = $8;
  $19 = (($17) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $16 * $20;
  $22 = $6;
  $23 = $8;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $21 * $25;
  $27 = $9;
  $28 = $27 + $26;
  $9 = $28;
  $29 = $8;
  $30 = (($29) + 1)|0;
  $8 = $30;
 }
 $31 = $9;
 STACKTOP = sp;return (+$31);
}
function _AT_get_ion_response_from_dose_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $6&1;
 $13 = $16;
 $17 = $7;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = $7;
  $20 = (_calloc(8,$19)|0);
  $14 = $20;
  $21 = $7;
  $22 = $8;
  $23 = $10;
  $24 = $11;
  $25 = $12;
  $26 = $13;
  $27 = $26&1;
  $28 = $14;
  _AT_get_response_distribution_from_dose_distribution($21,$22,$23,$24,$25,$27,$28);
  $29 = $7;
  $30 = $9;
  $31 = $10;
  $32 = $14;
  $33 = (+_AT_get_ion_response_from_response_distribution($29,$30,$31,$32));
  $15 = $33;
  $34 = $14;
  _free($34);
  $35 = $15;
  STACKTOP = sp;return (+$35);
 } else {
  ___assert_fail((76794|0),(76538|0),384,(76813|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_ion_efficiency_from_dose_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $6&1;
 $13 = $16;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = $13;
 $24 = $23&1;
 $25 = (+_AT_get_ion_response_from_dose_distribution($17,$18,$19,$20,$21,$22,$24));
 $14 = $25;
 $26 = $7;
 $27 = $8;
 $28 = $9;
 $29 = $10;
 $30 = $11;
 $31 = $12;
 $32 = $13;
 $33 = $32&1;
 $34 = (+_AT_get_gamma_response_for_average_dose($26,$27,$28,$29,$30,$31,$33));
 $15 = $34;
 $35 = $14;
 $36 = $35 >= 0.0;
 if (!($36)) {
  ___assert_fail((76856|0),(76538|0),430,(76874|0));
  // unreachable;
 }
 $37 = $15;
 $38 = $37 > 0.0;
 if ($38) {
  $39 = $14;
  $40 = $15;
  $41 = $39 / $40;
  STACKTOP = sp;return (+$41);
 } else {
  ___assert_fail((76919|0),(76538|0),431,(76874|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_ion_efficiency_from_response_distribution($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $18 = $7&1;
 $15 = $18;
 $19 = $8;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = (+_AT_get_ion_response_from_response_distribution($19,$20,$21,$22));
 $16 = $23;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 $28 = $13;
 $29 = $14;
 $30 = $15;
 $31 = $30&1;
 $32 = (+_AT_get_gamma_response_for_average_dose($24,$25,$26,$27,$28,$29,$31));
 $17 = $32;
 $33 = $16;
 $34 = $33 >= 0.0;
 if (!($34)) {
  ___assert_fail((76856|0),(76538|0),459,(76938|0));
  // unreachable;
 }
 $35 = $17;
 $36 = $35 > 0.0;
 if ($36) {
  $37 = $16;
  $38 = $17;
  $39 = $37 / $38;
  STACKTOP = sp;return (+$39);
 } else {
  ___assert_fail((76919|0),(76538|0),460,(76938|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_gamma_response($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $90 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $25 = sp;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $26 = $7&1;
 $19 = $26;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $27 = $12;
 $28 = $13;
 $29 = $17;
 $30 = $18;
 $31 = $19;
 $32 = $31&1;
 $33 = $20;
 _AT_gamma_response($27,$28,$29,$30,$32,$33);
 $34 = $21;
 HEAPF64[$34>>3] = 0.0;
 HEAPF64[$25>>3] = 0.0;
 $24 = 0;
 while(1) {
  $35 = $24;
  $36 = $12;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $13;
  $39 = $24;
  $40 = (($38) + ($39<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $14;
  $43 = $24;
  $44 = (($42) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $41 * $45;
  $47 = $15;
  $48 = $24;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $46 * $50;
  $52 = +HEAPF64[$25>>3];
  $53 = $52 + $51;
  HEAPF64[$25>>3] = $53;
  $54 = $20;
  $55 = $24;
  $56 = (($54) + ($55<<3)|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $14;
  $59 = $24;
  $60 = (($58) + ($59<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $57 * $61;
  $63 = $15;
  $64 = $24;
  $65 = (($63) + ($64<<3)|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $62 * $66;
  $68 = $21;
  $69 = +HEAPF64[$68>>3];
  $70 = $69 + $67;
  HEAPF64[$68>>3] = $70;
  $71 = $24;
  $72 = (($71) + 1)|0;
  $24 = $72;
 }
 $24 = 1;
 $73 = $24;
 $74 = $17;
 $75 = $18;
 $76 = $19;
 $77 = $76&1;
 $78 = $22;
 _AT_gamma_response($73,$25,$74,$75,$77,$78);
 $79 = $21;
 $80 = +HEAPF64[$79>>3];
 $81 = $80 >= 0.0;
 if (!($81)) {
  ___assert_fail((76987|0),(76538|0),504,(76999|0));
  // unreachable;
 }
 $82 = $22;
 $83 = +HEAPF64[$82>>3];
 $84 = $83 > 0.0;
 if ($84) {
  $85 = $21;
  $86 = +HEAPF64[$85>>3];
  $87 = $22;
  $88 = +HEAPF64[$87>>3];
  $89 = $86 / $88;
  $90 = $23;
  HEAPF64[$90>>3] = $89;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((77021|0),(76538|0),505,(76999|0));
  // unreachable;
 }
}
function _AT_histo_linear_left_limit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $9;
 $12 = ($11|0)>=(0);
 if ($12) {
  $13 = $9;
  $14 = $6;
  $15 = ($13|0)<=($14|0);
  if ($15) {
   $16 = $7;
   $17 = $9;
   $18 = (+($17|0));
   $19 = $8;
   $20 = $18 * $19;
   $21 = $16 + $20;
   $22 = $10;
   HEAPF64[$22>>3] = $21;
   $5 = 0;
   $23 = $5;
   STACKTOP = sp;return ($23|0);
  }
 }
 $5 = 1;
 $23 = $5;
 STACKTOP = sp;return ($23|0);
}
function _AT_histo_logarithmic_left_limit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $9;
 $12 = ($11|0)>=(0);
 if ($12) {
  $13 = $9;
  $14 = $6;
  $15 = ($13|0)<=($14|0);
  if ($15) {
   $16 = $7;
   $17 = $8;
   $18 = $9;
   $19 = (+($18|0));
   $20 = (+Math_pow((+$17),(+$19)));
   $21 = $16 * $20;
   $22 = $10;
   HEAPF64[$22>>3] = $21;
   $5 = 0;
   $23 = $5;
   STACKTOP = sp;return ($23|0);
  }
 }
 $5 = 1;
 $23 = $5;
 STACKTOP = sp;return ($23|0);
}
function _AT_histo_left_limit($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 1;
 $13 = $9;
 $14 = ($13|0)==(0);
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $10;
 $19 = $11;
 if ($14) {
  $20 = (_AT_histo_linear_left_limit($15,$16,$17,$18,$19)|0);
  $12 = $20;
  $22 = $12;
  STACKTOP = sp;return ($22|0);
 } else {
  $21 = (_AT_histo_logarithmic_left_limit($15,$16,$17,$18,$19)|0);
  $12 = $21;
  $22 = $12;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _AT_histo_left_limits($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $10 = 0;
 while(1) {
  $13 = $10;
  $14 = $5;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = $6;
  $18 = $7;
  $19 = $8;
  $20 = $10;
  $21 = $9;
  $22 = $10;
  $23 = (($21) + ($22<<3)|0);
  $24 = (_AT_histo_left_limit($16,$17,$18,$19,$20,$23)|0);
  $12 = $24;
  $25 = $12;
  $26 = ($25|0)==(1);
  if ($26) {
   $11 = 1;
  }
  $27 = $10;
  $28 = (($27) + 1)|0;
  $10 = $28;
 }
 $29 = $11;
 STACKTOP = sp;return ($29|0);
}
function _AT_histo_linear_bin_width($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 STACKTOP = sp;return (+$8);
}
function _AT_histo_logarithmic_bin_width($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 8|0;
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (_AT_histo_logarithmic_left_limit($14,$15,$16,$17,$11)|0);
 $13 = $18;
 $19 = $13;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = $13;
  $5 = $21;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = (($25) + 1)|0;
 $27 = (_AT_histo_logarithmic_left_limit($22,$23,$24,$26,$12)|0);
 $13 = $27;
 $28 = $13;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = $13;
  $5 = $30;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 } else {
  $31 = +HEAPF64[$12>>3];
  $32 = +HEAPF64[$11>>3];
  $33 = $31 - $32;
  $34 = $10;
  HEAPF64[$34>>3] = $33;
  $5 = 0;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _AT_histo_bin_width($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 1;
 $13 = $9;
 $14 = ($13|0)==(0);
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $10;
 if ($14) {
  (+_AT_histo_linear_bin_width($15,$16,$17,$18));
  $12 = 0;
  $21 = $12;
  STACKTOP = sp;return ($21|0);
 } else {
  $19 = $11;
  $20 = (_AT_histo_logarithmic_bin_width($15,$16,$17,$18,$19)|0);
  $12 = $20;
  $21 = $12;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _AT_histo_bin_widths($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $10 = 0;
 while(1) {
  $13 = $10;
  $14 = $5;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = $6;
  $18 = $7;
  $19 = $8;
  $20 = $10;
  $21 = $9;
  $22 = $10;
  $23 = (($21) + ($22<<3)|0);
  $24 = (_AT_histo_bin_width($16,$17,$18,$19,$20,$23)|0);
  $12 = $24;
  $25 = $12;
  $26 = ($25|0)==(1);
  if ($26) {
   $11 = 1;
  }
  $27 = $10;
  $28 = (($27) + 1)|0;
  $10 = $28;
 }
 $29 = $11;
 STACKTOP = sp;return ($29|0);
}
function _AT_histo_linear_midpoint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = (_AT_histo_linear_left_limit($13,$14,$15,$16,$11)|0);
 $12 = $17;
 $18 = $12;
 $19 = ($18|0)==(1);
 if ($19) {
  $20 = $12;
  $5 = $20;
  $26 = $5;
  STACKTOP = sp;return ($26|0);
 } else {
  $21 = +HEAPF64[$11>>3];
  $22 = $8;
  $23 = 0.5 * $22;
  $24 = $21 + $23;
  $25 = $10;
  HEAPF64[$25>>3] = $24;
  $5 = 0;
  $26 = $5;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_histo_logarithmic_midpoint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 8|0;
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (($17) + 1)|0;
 $19 = (_AT_histo_logarithmic_left_limit($14,$15,$16,$18,$12)|0);
 $13 = $19;
 $20 = $13;
 $21 = ($20|0)==(1);
 if ($21) {
  $22 = $13;
  $5 = $22;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = (_AT_histo_logarithmic_left_limit($23,$24,$25,$26,$11)|0);
 $13 = $27;
 $28 = $13;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = $13;
  $5 = $30;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 } else {
  $31 = +HEAPF64[$11>>3];
  $32 = +HEAPF64[$12>>3];
  $33 = $31 * $32;
  $34 = (+Math_sqrt((+$33)));
  $35 = $10;
  HEAPF64[$35>>3] = $34;
  $5 = 0;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _AT_histo_midpoint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 1;
 $13 = $9;
 $14 = ($13|0)==(0);
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $10;
 $19 = $11;
 if ($14) {
  $20 = (_AT_histo_linear_midpoint($15,$16,$17,$18,$19)|0);
  $12 = $20;
  $22 = $12;
  STACKTOP = sp;return ($22|0);
 } else {
  $21 = (_AT_histo_logarithmic_midpoint($15,$16,$17,$18,$19)|0);
  $12 = $21;
  $22 = $12;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _AT_histo_midpoints($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $10 = 0;
 while(1) {
  $13 = $10;
  $14 = $5;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = $6;
  $18 = $7;
  $19 = $8;
  $20 = $10;
  $21 = $9;
  $22 = $10;
  $23 = (($21) + ($22<<3)|0);
  $24 = (_AT_histo_midpoint($16,$17,$18,$19,$20,$23)|0);
  $12 = $24;
  $25 = $12;
  $26 = ($25|0)==(1);
  if ($26) {
   $11 = 1;
  }
  $27 = $10;
  $28 = (($27) + 1)|0;
  $10 = $28;
 }
 $29 = $11;
 STACKTOP = sp;return ($29|0);
}
function _AT_histo_linear_step($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = ($9|0)<=(0);
 if (!($10)) {
  $11 = $7;
  $12 = $6;
  $13 = $11 <= $12;
  if (!($13)) {
   $14 = $7;
   $15 = $6;
   $16 = $14 - $15;
   $17 = $5;
   $18 = (+($17|0));
   $19 = $16 / $18;
   $20 = $8;
   HEAPF64[$20>>3] = $19;
   $4 = 0;
   $21 = $4;
   STACKTOP = sp;return ($21|0);
  }
 }
 $4 = 1;
 $21 = $4;
 STACKTOP = sp;return ($21|0);
}
function _AT_histo_logarithmic_step($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = ($9|0)<=(0);
 if (!($10)) {
  $11 = $7;
  $12 = $6;
  $13 = $11 <= $12;
  $14 = $6;
  $15 = $14 <= 0.0;
  $or$cond = $13 | $15;
  $16 = $7;
  $17 = $16 <= 0.0;
  $or$cond3 = $or$cond | $17;
  if (!($or$cond3)) {
   $18 = $7;
   $19 = $6;
   $20 = $18 / $19;
   $21 = $5;
   $22 = (+($21|0));
   $23 = 1.0 / $22;
   $24 = (+Math_pow((+$20),(+$23)));
   $25 = $8;
   HEAPF64[$25>>3] = $24;
   $4 = 0;
   $26 = $4;
   STACKTOP = sp;return ($26|0);
  }
 }
 $4 = 1;
 $26 = $4;
 STACKTOP = sp;return ($26|0);
}
function _AT_histo_step($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 1;
 $11 = $8;
 $12 = ($11|0)==(0);
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $9;
 if ($12) {
  $17 = (_AT_histo_linear_step($13,$14,$15,$16)|0);
  $10 = $17;
  $19 = $10;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = (_AT_histo_logarithmic_step($13,$14,$15,$16)|0);
  $10 = $18;
  $19 = $10;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _AT_histo_linear_n_bins($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 $10 = $9 <= 0.0;
 if (!($10)) {
  $11 = $6;
  $12 = $5;
  $13 = $11 <= $12;
  if (!($13)) {
   $14 = $6;
   $15 = $5;
   $16 = $14 - $15;
   $17 = $7;
   $18 = $16 / $17;
   $19 = (~~(($18)));
   $20 = $8;
   HEAP32[$20>>2] = $19;
   $4 = 0;
   $21 = $4;
   STACKTOP = sp;return ($21|0);
  }
 }
 $4 = 1;
 $21 = $4;
 STACKTOP = sp;return ($21|0);
}
function _AT_histo_logarithmic_n_bins($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 $10 = $9 <= 1.0;
 if (!($10)) {
  $11 = $6;
  $12 = $5;
  $13 = $11 <= $12;
  $14 = $5;
  $15 = $14 <= 0.0;
  $or$cond = $13 | $15;
  $16 = $6;
  $17 = $16 <= 0.0;
  $or$cond3 = $or$cond | $17;
  if (!($or$cond3)) {
   $18 = $6;
   $19 = $5;
   $20 = $18 / $19;
   $21 = (+Math_log((+$20)));
   $22 = $7;
   $23 = (+Math_log((+$22)));
   $24 = $21 / $23;
   $25 = (+Math_floor((+$24)));
   $26 = $25 + 1.0;
   $27 = (~~(($26)));
   $28 = $8;
   HEAP32[$28>>2] = $27;
   $4 = 0;
   $29 = $4;
   STACKTOP = sp;return ($29|0);
  }
 }
 $4 = 1;
 $29 = $4;
 STACKTOP = sp;return ($29|0);
}
function _AT_histo_n_bins($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 1;
 $11 = $8;
 $12 = ($11|0)==(0);
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $9;
 if ($12) {
  $17 = (_AT_histo_linear_n_bins($13,$14,$15,$16)|0);
  $10 = $17;
  $19 = $10;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = (_AT_histo_logarithmic_n_bins($13,$14,$15,$16)|0);
  $10 = $18;
  $19 = $10;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _AT_histo_linear_bin_no($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $8;
 $12 = $6;
 $13 = $11 - $12;
 $9 = $13;
 $14 = $9;
 $15 = $14 < 0.0;
 if ($15) {
  $4 = -1;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $16 = $7;
 $17 = $16 > 0.0;
 if (!($17)) {
  ___assert_fail((77034|0),(77045|0),400,(77074|0));
  // unreachable;
 }
 $18 = $9;
 $19 = $7;
 $20 = $18 / $19;
 $21 = (+Math_floor((+$20)));
 $22 = (~~(($21)));
 $10 = $22;
 $23 = $10;
 $24 = $5;
 $25 = (($24) - 1)|0;
 $26 = ($23|0)>($25|0);
 if ($26) {
  $4 = -2;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 } else {
  $27 = $10;
  $4 = $27;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _AT_histo_logarithmic_bin_no($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $8;
 $12 = $6;
 $13 = $11 / $12;
 $9 = $13;
 $14 = $9;
 $15 = $14 < 1.0;
 if ($15) {
  $4 = -1;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $16 = $9;
 $17 = (+_llvm_log10_f64((+$16)));
 $18 = $7;
 $19 = (+_llvm_log10_f64((+$18)));
 $20 = $17 / $19;
 $21 = (+Math_floor((+$20)));
 $22 = (~~(($21)));
 $10 = $22;
 $23 = $10;
 $24 = $5;
 $25 = (($24) - 1)|0;
 $26 = ($23|0)>($25|0);
 if ($26) {
  $4 = -2;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 } else {
  $27 = $10;
  $4 = $27;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _AT_histo_bin_no($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $9;
 $12 = ($11|0)==(0);
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $10;
 if ($12) {
  $17 = (_AT_histo_linear_bin_no($13,$14,$15,$16)|0);
  $5 = $17;
  $19 = $5;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = (_AT_histo_logarithmic_bin_no($13,$14,$15,$16)|0);
  $5 = $18;
  $19 = $5;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _AT_histo_add_single($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $10;
 $16 = ($15|0)==(0);
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $11;
 if ($16) {
  $21 = (_AT_histo_linear_bin_no($17,$18,$19,$20)|0);
  $14 = $21;
 } else {
  $22 = (_AT_histo_logarithmic_bin_no($17,$18,$19,$20)|0);
  $14 = $22;
 }
 $23 = $14;
 $24 = ($23|0)>=(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $12;
 $26 = $13;
 $27 = $14;
 $28 = (($26) + ($27<<3)|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 + $25;
 HEAPF64[$28>>3] = $30;
 STACKTOP = sp;return;
}
function _AT_histo_add_multi($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0;
 while(1) {
  $17 = $16;
  $18 = $12;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $8;
  $21 = $9;
  $22 = $10;
  $23 = $11;
  $24 = $13;
  $25 = $16;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $14;
  $29 = $16;
  $30 = (($28) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $15;
  _AT_histo_add_single($20,$21,$22,$23,$27,$31,$32);
  $33 = $16;
  $34 = (($33) + 1)|0;
  $16 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_histo_sum($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp + 8|0;
 $14 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 HEAPF64[$13>>3] = 0.0;
 HEAPF64[$14>>3] = 0.0;
 $15 = $11;
 HEAPF64[$15>>3] = 0.0;
 $12 = 0;
 while(1) {
  $16 = $12;
  $17 = $6;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = $7;
  $21 = $8;
  $22 = $9;
  $23 = $12;
  (_AT_histo_midpoint($19,$20,$21,$22,$23,$13)|0);
  $24 = $6;
  $25 = $7;
  $26 = $8;
  $27 = $9;
  $28 = $12;
  (_AT_histo_bin_width($24,$25,$26,$27,$28,$14)|0);
  $29 = $10;
  $30 = $12;
  $31 = (($29) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = +HEAPF64[$13>>3];
  $34 = $32 * $33;
  $35 = +HEAPF64[$14>>3];
  $36 = $34 * $35;
  $37 = $11;
  $38 = +HEAPF64[$37>>3];
  $39 = $38 + $36;
  HEAPF64[$37>>3] = $39;
  $40 = $12;
  $41 = (($40) + 1)|0;
  $12 = $41;
 }
 STACKTOP = sp;return;
}
function _AT_histo_normalize($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 _AT_histo_sum($12,$13,$14,$15,$16,$10);
 $17 = +HEAPF64[$10>>3];
 $18 = $17 > 0.0;
 if (!($18)) {
  ___assert_fail((77097|0),(77045|0),541,(77107|0));
  // unreachable;
 }
 $11 = 0;
 while(1) {
  $19 = $11;
  $20 = $5;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = +HEAPF64[$10>>3];
  $23 = $9;
  $24 = $11;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $26 / $22;
  HEAPF64[$25>>3] = $27;
  $28 = $11;
  $29 = (($28) + 1)|0;
  $11 = $29;
 }
 STACKTOP = sp;return;
}
function _AT_N2_to_step($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = 1.0 / $2;
 $4 = (+Math_pow(2.0,(+$3)));
 STACKTOP = sp;return (+$4);
}
function _AT_step_to_N2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (+Math_log(2.0));
 $3 = $1;
 $4 = (+Math_log((+$3)));
 $5 = $2 / $4;
 STACKTOP = sp;return (+$5);
}
function _AT_histoOld_log_bin_width($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = (($5) - 1)|0;
 $7 = (($4) + ($6<<3)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_log((+$8)));
 $10 = $3;
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_log((+$11)));
 $13 = $9 - $12;
 $14 = $2;
 $15 = (+($14|0));
 $16 = $15 - 1.0;
 $17 = $13 / $16;
 STACKTOP = sp;return (+$17);
}
function _AT_histoOld_lower_bin_limit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = (($6) + ($7<<3)|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_log((+$9)));
 $11 = $3;
 $12 = $4;
 $13 = (+_AT_histoOld_log_bin_width($11,$12));
 $14 = 0.5 * $13;
 $15 = $10 - $14;
 $16 = (+Math_exp((+$15)));
 STACKTOP = sp;return (+$16);
}
function _AT_histoOld_upper_bin_limit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = (($6) + ($7<<3)|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_log((+$9)));
 $11 = $3;
 $12 = $4;
 $13 = (+_AT_histoOld_log_bin_width($11,$12));
 $14 = 0.5 * $13;
 $15 = $10 + $14;
 $16 = (+Math_exp((+$15)));
 STACKTOP = sp;return (+$16);
}
function _AT_histoOld_get_bin_width($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = (+_AT_histoOld_lower_bin_limit($8,$9,$10));
 $6 = $11;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = (+_AT_histoOld_upper_bin_limit($12,$13,$14));
 $7 = $15;
 $16 = $7;
 $17 = $6;
 $18 = $16 - $17;
 STACKTOP = sp;return (+$18);
}
function _AT_histoOld_get_bin_widths($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $4;
  $12 = $6;
  $13 = (+_AT_histoOld_get_bin_width($10,$11,$12));
  $14 = $5;
  $15 = $6;
  $16 = (($14) + ($15<<3)|0);
  HEAPF64[$16>>3] = $13;
  $17 = $6;
  $18 = (($17) + 1)|0;
  $6 = $18;
 }
 STACKTOP = sp;return;
}
function _AT_histoOld_bin_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (+_AT_histoOld_lower_bin_limit($8,$9,0));
 $6 = $10;
 $11 = $3;
 $12 = $4;
 $13 = (+_AT_histoOld_log_bin_width($11,$12));
 $7 = $13;
 $14 = $5;
 $15 = (+Math_log((+$14)));
 $16 = $6;
 $17 = (+Math_log((+$16)));
 $18 = $15 - $17;
 $19 = $7;
 $20 = $18 / $19;
 $21 = (+Math_floor((+$20)));
 $22 = (~~(($21)));
 STACKTOP = sp;return ($22|0);
}
function _AT_KatzModel_KatzExtTarget_inactivation_probability($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 var $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $23 = sp + 48|0;
 $25 = sp;
 $26 = sp + 40|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $28 = $12;
 $29 = $28 >= 0.0;
 if ($29) {
  $30 = $12;
  $31 = $13;
  $32 = $15;
  $33 = $31 + $32;
  $34 = $30 <= $33;
  if ($34) {
   $35 = $12;
   $36 = $13;
   $37 = $16;
   $38 = $14;
   $39 = $15;
   $40 = $17;
   $41 = $18;
   $42 = $19;
   $43 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy($35,$36,$37,$38,$39,$40,$41,$42));
   HEAPF64[$23>>3] = $43;
   $24 = 2;
   HEAPF64[$25>>3] = 1.0;
   $44 = ((($25)) + 8|0);
   $45 = $20;
   HEAPF64[$44>>3] = $45;
   $46 = ((($44)) + 8|0);
   $47 = $21;
   HEAPF64[$46>>3] = $47;
   $48 = ((($46)) + 8|0);
   $49 = $22;
   HEAPF64[$48>>3] = $49;
   $50 = ((($48)) + 8|0);
   HEAPF64[$50>>3] = 0.0;
   $27 = 1;
   _AT_gamma_response(1,$23,2,$25,0,$26);
   $51 = +HEAPF64[$26>>3];
   $11 = $51;
   $52 = $11;
   STACKTOP = sp;return (+$52);
  }
 }
 $11 = 0.0;
 $52 = $11;
 STACKTOP = sp;return (+$52);
}
function _AT_KatzModel_CucinottaExtTarget_inactivation_probability($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 var $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $23 = sp + 48|0;
 $25 = sp;
 $26 = sp + 40|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $28 = $12;
 $29 = $28 >= 0.0;
 if ($29) {
  $30 = $12;
  $31 = $13;
  $32 = $15;
  $33 = $31 + $32;
  $34 = $30 <= $33;
  if ($34) {
   $35 = $12;
   $36 = $13;
   $37 = $14;
   $38 = $15;
   $39 = $16;
   $40 = $19;
   $41 = $17;
   $42 = $18;
   $43 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy($35,$36,$37,$38,$39,$40,$41,$42));
   HEAPF64[$23>>3] = $43;
   $24 = 2;
   HEAPF64[$25>>3] = 1.0;
   $44 = ((($25)) + 8|0);
   $45 = $20;
   HEAPF64[$44>>3] = $45;
   $46 = ((($44)) + 8|0);
   $47 = $21;
   HEAPF64[$46>>3] = $47;
   $48 = ((($46)) + 8|0);
   $49 = $22;
   HEAPF64[$48>>3] = $49;
   $50 = ((($48)) + 8|0);
   HEAPF64[$50>>3] = 0.0;
   $27 = 1;
   _AT_gamma_response(1,$23,2,$25,0,$26);
   $51 = +HEAPF64[$26>>3];
   $11 = $51;
   $52 = $11;
   STACKTOP = sp;return (+$52);
  }
 }
 $11 = 0.0;
 $52 = $11;
 STACKTOP = sp;return (+$52);
}
function _AT_KatzModel_inactivation_probability($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0;
 var $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0;
 var $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0.0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $13 = sp + 136|0;
 $14 = sp + 180|0;
 $33 = sp + 48|0;
 $11 = $0;
 $12 = $1;
 HEAPF64[$13>>3] = $2;
 HEAP32[$14>>2] = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $41 = +HEAPF64[$13>>3];
 $42 = $15;
 $43 = $18;
 $44 = (+_AT_max_electron_range_m($41,$42,$43));
 $22 = $44;
 $45 = $22;
 $46 = $16;
 $47 = $17;
 $48 = (+_AT_RDD_a0_m($45,$46,$47));
 $23 = $48;
 $49 = $22;
 $50 = $16;
 $51 = $17;
 $52 = (+_AT_RDD_r_min_m($49,$50,$51));
 $24 = $52;
 $53 = +HEAPF64[$13>>3];
 $54 = HEAP32[$14>>2]|0;
 $55 = $15;
 $56 = $18;
 $57 = (+_AT_RDD_Katz_coeff_Gy_general($53,$54,$55,$56));
 $25 = $57;
 $58 = $23;
 $59 = $22;
 $60 = $58 < $59;
 $61 = $23;
 $62 = $22;
 $63 = $60 ? $61 : $62;
 $26 = $63;
 $64 = $19;
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF64[$65>>3];
 $27 = $66;
 $67 = $19;
 $68 = ((($67)) + 16|0);
 $69 = +HEAPF64[$68>>3];
 $28 = $69;
 $70 = $19;
 $71 = ((($70)) + 24|0);
 $72 = +HEAPF64[$71>>3];
 $29 = $72;
 $73 = $16;
 $74 = ($73|0)==(6);
 L1: do {
  if ($74) {
   $30 = 0.0;
   $31 = 0.0;
   $75 = $18;
   $76 = ($75|0)==(3);
   $77 = $18;
   $78 = ($77|0)==(6);
   $or$cond = $76 | $78;
   if ($or$cond) {
    $79 = +HEAPF64[$13>>3];
    $80 = (+_AT_ER_PowerLaw_alpha($79));
    $31 = $80;
    $81 = $24;
    $82 = $26;
    $83 = $22;
    $84 = $31;
    $85 = $25;
    $86 = (+_AT_RDD_Katz_PowerLawER_Daverage_Gy($81,$82,$83,$84,$85));
    $30 = $86;
   } else {
    $87 = $18;
    $88 = ($87|0)==(2);
    if ($88) {
     $89 = $24;
     $90 = $26;
     $91 = $22;
     $92 = $25;
     $93 = (+_AT_RDD_Katz_LinearER_Daverage_Gy($89,$90,$91,$92));
     $30 = $93;
    }
   }
   $32 = 0;
   while(1) {
    $94 = $32;
    $95 = $11;
    $96 = ($94|0)<($95|0);
    if (!($96)) {
     break L1;
    }
    $97 = $12;
    $98 = $32;
    $99 = (($97) + ($98<<3)|0);
    $100 = +HEAPF64[$99>>3];
    $101 = $23;
    $102 = $24;
    $103 = $22;
    $104 = $18;
    $105 = $31;
    $106 = $30;
    $107 = $25;
    $108 = $27;
    $109 = $28;
    $110 = $29;
    $111 = (+_AT_KatzModel_KatzExtTarget_inactivation_probability($100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110));
    $112 = $21;
    $113 = $32;
    $114 = (($112) + ($113<<3)|0);
    HEAPF64[$114>>3] = $111;
    $115 = $32;
    $116 = (($115) + 1)|0;
    $32 = $116;
   }
  }
 } while(0);
 $117 = $16;
 $118 = ($117|0)==(7);
 if (!($118)) {
  STACKTOP = sp;return 0;
 }
 $119 = $20;
 $120 = $15;
 (_AT_Mass_Stopping_Power_with_no($119,1,$13,$14,$120,$33)|0);
 $121 = $15;
 $122 = (+_AT_density_g_cm3_from_material_no($121));
 $34 = $122;
 $123 = $34;
 $124 = $123 * 1000.0;
 $35 = $124;
 $125 = +HEAPF64[$33>>3];
 $126 = $34;
 $127 = $125 * $126;
 $128 = $127 * 100.0;
 $129 = $128 * 1.6021764600000001E-13;
 $36 = $129;
 $130 = +HEAPF64[$13>>3];
 $131 = (+_AT_beta_from_E_single($130));
 $37 = $131;
 $132 = $24;
 $133 = $22;
 $134 = $37;
 $135 = $35;
 $136 = $36;
 $137 = $25;
 $138 = (+_AT_RDD_Cucinotta_Cnorm($132,$133,$134,$135,$136,$137));
 $38 = $138;
 $139 = $24;
 $140 = $26;
 $141 = $22;
 $142 = $37;
 $143 = $25;
 $144 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($139,$140,$141,$142,$143));
 $39 = $144;
 $145 = $38;
 $146 = $24;
 $147 = $26;
 $148 = $22;
 $149 = $37;
 $150 = $25;
 $151 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($146,$147,$148,$149,$150));
 $152 = $145 * $151;
 $153 = $39;
 $154 = $153 + $152;
 $39 = $154;
 $40 = 0;
 while(1) {
  $155 = $40;
  $156 = $11;
  $157 = ($155|0)<($156|0);
  if (!($157)) {
   break;
  }
  $158 = $12;
  $159 = $40;
  $160 = (($158) + ($159<<3)|0);
  $161 = +HEAPF64[$160>>3];
  $162 = $23;
  $163 = $24;
  $164 = $22;
  $165 = $37;
  $166 = $38;
  $167 = $39;
  $168 = $25;
  $169 = $27;
  $170 = $28;
  $171 = $29;
  $172 = (+_AT_KatzModel_CucinottaExtTarget_inactivation_probability($161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171));
  $173 = $21;
  $174 = $40;
  $175 = (($173) + ($174<<3)|0);
  HEAPF64[$175>>3] = $172;
  $176 = $40;
  $177 = (($176) + 1)|0;
  $40 = $177;
 }
 STACKTOP = sp;return 0;
}
function _AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $2;
  $10 = $4;
  $11 = +HEAPF64[$10>>3];
  $12 = $4;
  $13 = ((($12)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $4;
  $16 = ((($15)) + 16|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $4;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $4;
  $22 = ((($21)) + 32|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $4;
  $25 = ((($24)) + 40|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $4;
  $28 = ((($27)) + 48|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $4;
  $31 = ((($30)) + 56|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $4;
  $34 = ((($33)) + 64|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $4;
  $37 = ((($36)) + 72|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (+_AT_KatzModel_KatzExtTarget_inactivation_probability($9,$11,$14,$17,$20,$23,$26,$29,$32,$35,$38));
  $5 = $39;
  $40 = $5;
  $41 = $2;
  $42 = $40 * $41;
  STACKTOP = sp;return (+$42);
 } else {
  ___assert_fail((77126|0),(77141|0),198,(77169|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0;
 var $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer = sp + 224|0;
 $15 = sp + 184|0;
 $21 = sp + 136|0;
 $22 = sp + 128|0;
 $24 = sp + 272|0;
 $25 = sp + 48|0;
 $28 = sp;
 $29 = sp + 40|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 HEAPF64[$15>>3] = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $31 = $10;
 $32 = 0.01 * $31;
 $20 = $32;
 (_gsl_set_error_handler_off()|0);
 $33 = (_gsl_integration_workspace_alloc(1000)|0);
 $23 = $33;
 HEAP32[$24>>2] = 16;
 $34 = $10;
 HEAPF64[$25>>3] = $34;
 $35 = $11;
 $36 = ((($25)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = $12;
 $38 = ((($25)) + 16|0);
 HEAPF64[$38>>3] = $37;
 $39 = $13;
 $40 = ((($25)) + 24|0);
 HEAP32[$40>>2] = $39;
 $41 = $14;
 $42 = ((($25)) + 32|0);
 HEAPF64[$42>>3] = $41;
 $43 = +HEAPF64[$15>>3];
 $44 = ((($25)) + 40|0);
 HEAPF64[$44>>3] = $43;
 $45 = $16;
 $46 = ((($25)) + 48|0);
 HEAPF64[$46>>3] = $45;
 $47 = $17;
 $48 = ((($25)) + 56|0);
 HEAPF64[$48>>3] = $47;
 $49 = $18;
 $50 = ((($25)) + 64|0);
 HEAPF64[$50>>3] = $49;
 $51 = $19;
 $52 = ((($25)) + 72|0);
 HEAPF64[$52>>3] = $51;
 $53 = ((($24)) + 4|0);
 HEAP32[$53>>2] = $25;
 $54 = $20;
 $55 = $12;
 $56 = $10;
 $57 = $55 + $56;
 $58 = $23;
 $59 = (_gsl_integration_qag($24,$54,$57,0.0,1.0E-4,1000,2,$58,$21,$22)|0);
 $26 = $59;
 $60 = $26;
 $61 = ($60|0)==(18);
 $62 = $26;
 $63 = ($62|0)==(21);
 $or$cond = $61 | $63;
 if ($or$cond) {
  $64 = HEAP32[17818]|0;
  $65 = $13;
  $66 = $20;
  $67 = $12;
  $68 = $10;
  HEAP32[$vararg_buffer>>2] = $65;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $66;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr3>>3] = $67;
  $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
  HEAPF64[$vararg_ptr4>>3] = $68;
  (_fprintf($64,77235,$vararg_buffer)|0);
  HEAPF64[$21>>3] = 0.0;
 }
 $69 = $23;
 _gsl_integration_workspace_free($69);
 $27 = 2;
 HEAPF64[$28>>3] = 1.0;
 $70 = ((($28)) + 8|0);
 $71 = $17;
 HEAPF64[$70>>3] = $71;
 $72 = ((($70)) + 8|0);
 $73 = $18;
 HEAPF64[$72>>3] = $73;
 $74 = ((($72)) + 8|0);
 $75 = $19;
 HEAPF64[$74>>3] = $75;
 $76 = ((($74)) + 8|0);
 HEAPF64[$76>>3] = 0.0;
 $30 = 1;
 _AT_gamma_response(1,$15,2,$28,0,$29);
 $77 = +HEAPF64[$21>>3];
 $78 = 6.2831853071795862 * $77;
 $79 = $10;
 $80 = 0.01 * $79;
 $81 = (+_gsl_pow_2($80));
 $82 = 3.1415926535897931 * $81;
 $83 = +HEAPF64[$29>>3];
 $84 = $82 * $83;
 $85 = $78 + $84;
 STACKTOP = sp;return (+$85);
}
function _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $2;
  $10 = $4;
  $11 = +HEAPF64[$10>>3];
  $12 = $4;
  $13 = ((($12)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $4;
  $16 = ((($15)) + 16|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $4;
  $19 = ((($18)) + 24|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $4;
  $22 = ((($21)) + 32|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $4;
  $25 = ((($24)) + 40|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $4;
  $28 = ((($27)) + 48|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $4;
  $31 = ((($30)) + 56|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $4;
  $34 = ((($33)) + 64|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $4;
  $37 = ((($36)) + 72|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (+_AT_KatzModel_CucinottaExtTarget_inactivation_probability($9,$11,$14,$17,$20,$23,$26,$29,$32,$35,$38));
  $5 = $39;
  $40 = $5;
  $41 = $2;
  $42 = $40 * $41;
  STACKTOP = sp;return (+$42);
 } else {
  ___assert_fail((77126|0),(77141|0),280,(77358|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0;
 var $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer = sp + 232|0;
 $15 = sp + 184|0;
 $21 = sp + 136|0;
 $22 = sp + 128|0;
 $24 = sp + 272|0;
 $25 = sp + 48|0;
 $28 = sp;
 $29 = sp + 40|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 HEAPF64[$15>>3] = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $31 = $10;
 $32 = 0.01 * $31;
 $20 = $32;
 (_gsl_set_error_handler_off()|0);
 $33 = (_gsl_integration_workspace_alloc(1000)|0);
 $23 = $33;
 HEAP32[$24>>2] = 17;
 $34 = $10;
 HEAPF64[$25>>3] = $34;
 $35 = $11;
 $36 = ((($25)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = $12;
 $38 = ((($25)) + 16|0);
 HEAPF64[$38>>3] = $37;
 $39 = $13;
 $40 = ((($25)) + 24|0);
 HEAPF64[$40>>3] = $39;
 $41 = $14;
 $42 = ((($25)) + 32|0);
 HEAPF64[$42>>3] = $41;
 $43 = +HEAPF64[$15>>3];
 $44 = ((($25)) + 40|0);
 HEAPF64[$44>>3] = $43;
 $45 = $16;
 $46 = ((($25)) + 48|0);
 HEAPF64[$46>>3] = $45;
 $47 = $17;
 $48 = ((($25)) + 56|0);
 HEAPF64[$48>>3] = $47;
 $49 = $18;
 $50 = ((($25)) + 64|0);
 HEAPF64[$50>>3] = $49;
 $51 = $19;
 $52 = ((($25)) + 72|0);
 HEAPF64[$52>>3] = $51;
 $53 = ((($24)) + 4|0);
 HEAP32[$53>>2] = $25;
 $54 = $20;
 $55 = $12;
 $56 = $10;
 $57 = $55 + $56;
 $58 = $23;
 $59 = (_gsl_integration_qag($24,$54,$57,0.0,1.0E-4,1000,2,$58,$21,$22)|0);
 $26 = $59;
 $60 = $26;
 $61 = ($60|0)==(18);
 $62 = $26;
 $63 = ($62|0)==(21);
 $or$cond = $61 | $63;
 if ($or$cond) {
  $64 = HEAP32[17818]|0;
  $65 = $20;
  $66 = $12;
  $67 = $10;
  HEAPF64[$vararg_buffer>>3] = $65;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $66;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr3>>3] = $67;
  (_fprintf($64,77429,$vararg_buffer)|0);
  HEAPF64[$21>>3] = 0.0;
 }
 $68 = $23;
 _gsl_integration_workspace_free($68);
 $27 = 2;
 HEAPF64[$28>>3] = 1.0;
 $69 = ((($28)) + 8|0);
 $70 = $17;
 HEAPF64[$69>>3] = $70;
 $71 = ((($69)) + 8|0);
 $72 = $18;
 HEAPF64[$71>>3] = $72;
 $73 = ((($71)) + 8|0);
 $74 = $19;
 HEAPF64[$73>>3] = $74;
 $75 = ((($73)) + 8|0);
 HEAPF64[$75>>3] = 0.0;
 $30 = 1;
 _AT_gamma_response(1,$15,2,$28,0,$29);
 $76 = +HEAPF64[$21>>3];
 $77 = 6.2831853071795862 * $76;
 $78 = $10;
 $79 = 0.01 * $78;
 $80 = (+_gsl_pow_2($79));
 $81 = 3.1415926535897931 * $80;
 $82 = +HEAPF64[$29>>3];
 $83 = $81 * $82;
 $84 = $77 + $83;
 STACKTOP = sp;return (+$84);
}
function _AT_KatzModel_inactivation_cross_section_m2($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0;
 var $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $vararg_buffer = sp + 376|0;
 $13 = sp + 420|0;
 $40 = sp + 232|0;
 $45 = sp;
 $11 = $0;
 $12 = $1;
 HEAP32[$13>>2] = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $46 = $18;
 $47 = ((($46)) + 8|0);
 $48 = +HEAPF64[$47>>3];
 $21 = $48;
 $49 = $18;
 $50 = ((($49)) + 16|0);
 $51 = +HEAPF64[$50>>3];
 $22 = $51;
 $52 = $18;
 $53 = ((($52)) + 24|0);
 $54 = +HEAPF64[$53>>3];
 $23 = $54;
 $55 = $15;
 $56 = ($55|0)==(6);
 if (!($56)) {
  $126 = $15;
  $127 = ($126|0)==(7);
  if (!($127)) {
   $218 = $15;
   (_AT_RDD_name_from_number($218,$45)|0);
   $219 = HEAP32[17818]|0;
   $220 = $15;
   HEAP32[$vararg_buffer>>2] = $220;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = $45;
   (_fprintf($219,77541,$vararg_buffer)|0);
   $10 = 1;
   $221 = $10;
   STACKTOP = sp;return ($221|0);
  }
  $128 = $14;
  $129 = (+_AT_density_g_cm3_from_material_no($128));
  $33 = $129;
  $130 = $33;
  $131 = $130 * 1000.0;
  $34 = $131;
  $32 = 0;
  while(1) {
   $132 = $32;
   $133 = $11;
   $134 = ($132|0)<($133|0);
   if (!($134)) {
    break;
   }
   $135 = $12;
   $136 = $32;
   $137 = (($135) + ($136<<3)|0);
   $138 = +HEAPF64[$137>>3];
   $139 = $14;
   $140 = $17;
   $141 = (+_AT_max_electron_range_m($138,$139,$140));
   $35 = $141;
   $142 = $16;
   $143 = ((($142)) + 8|0);
   $144 = +HEAPF64[$143>>3];
   $36 = $144;
   $145 = $35;
   $146 = $15;
   $147 = $16;
   $148 = (+_AT_RDD_r_min_m($145,$146,$147));
   $37 = $148;
   $149 = $12;
   $150 = $32;
   $151 = (($149) + ($150<<3)|0);
   $152 = +HEAPF64[$151>>3];
   $153 = HEAP32[$13>>2]|0;
   $154 = $14;
   $155 = $17;
   $156 = (+_AT_RDD_Katz_coeff_Gy_general($152,$153,$154,$155));
   $38 = $156;
   $157 = $36;
   $158 = $35;
   $159 = $157 < $158;
   $160 = $36;
   $161 = $35;
   $162 = $159 ? $160 : $161;
   $39 = $162;
   $163 = $19;
   $164 = $11;
   $165 = $12;
   $166 = $32;
   $167 = (($165) + ($166<<3)|0);
   $168 = $14;
   (_AT_Mass_Stopping_Power_with_no($163,$164,$167,$13,$168,$40)|0);
   $169 = +HEAPF64[$40>>3];
   $170 = $33;
   $171 = $169 * $170;
   $172 = $171 * 100.0;
   $173 = $172 * 1.6021764600000001E-13;
   $41 = $173;
   $174 = $12;
   $175 = $32;
   $176 = (($174) + ($175<<3)|0);
   $177 = +HEAPF64[$176>>3];
   $178 = (+_AT_beta_from_E_single($177));
   $42 = $178;
   $179 = $37;
   $180 = $35;
   $181 = $42;
   $182 = $34;
   $183 = $41;
   $184 = $38;
   $185 = (+_AT_RDD_Cucinotta_Cnorm($179,$180,$181,$182,$183,$184));
   $43 = $185;
   $186 = $37;
   $187 = $39;
   $188 = $35;
   $189 = $42;
   $190 = $38;
   $191 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($186,$187,$188,$189,$190));
   $44 = $191;
   $192 = $43;
   $193 = $37;
   $194 = $39;
   $195 = $35;
   $196 = $42;
   $197 = $38;
   $198 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($193,$194,$195,$196,$197));
   $199 = $192 * $198;
   $200 = $44;
   $201 = $200 + $199;
   $44 = $201;
   $202 = $36;
   $203 = $37;
   $204 = $35;
   $205 = $42;
   $206 = $43;
   $207 = $44;
   $208 = $38;
   $209 = $21;
   $210 = $22;
   $211 = $23;
   $212 = (+_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2($202,$203,$204,$205,$206,$207,$208,$209,$210,$211));
   $213 = $20;
   $214 = $32;
   $215 = (($213) + ($214<<3)|0);
   HEAPF64[$215>>3] = $212;
   $216 = $32;
   $217 = (($216) + 1)|0;
   $32 = $217;
  }
  $10 = 0;
  $221 = $10;
  STACKTOP = sp;return ($221|0);
 }
 $24 = 0;
 while(1) {
  $57 = $24;
  $58 = $11;
  $59 = ($57|0)<($58|0);
  if (!($59)) {
   break;
  }
  $60 = $12;
  $61 = $24;
  $62 = (($60) + ($61<<3)|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $14;
  $65 = $17;
  $66 = (+_AT_max_electron_range_m($63,$64,$65));
  $25 = $66;
  $67 = $16;
  $68 = ((($67)) + 8|0);
  $69 = +HEAPF64[$68>>3];
  $26 = $69;
  $70 = $25;
  $71 = $15;
  $72 = $16;
  $73 = (+_AT_RDD_r_min_m($70,$71,$72));
  $27 = $73;
  $74 = $12;
  $75 = $24;
  $76 = (($74) + ($75<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = HEAP32[$13>>2]|0;
  $79 = $14;
  $80 = $17;
  $81 = (+_AT_RDD_Katz_coeff_Gy_general($77,$78,$79,$80));
  $28 = $81;
  $82 = $26;
  $83 = $25;
  $84 = $82 < $83;
  $85 = $26;
  $86 = $25;
  $87 = $84 ? $85 : $86;
  $29 = $87;
  $30 = 0.0;
  $31 = 0.0;
  $88 = $17;
  $89 = ($88|0)==(3);
  $90 = $17;
  $91 = ($90|0)==(6);
  $or$cond = $89 | $91;
  if ($or$cond) {
   $92 = $12;
   $93 = $24;
   $94 = (($92) + ($93<<3)|0);
   $95 = +HEAPF64[$94>>3];
   $96 = (+_AT_ER_PowerLaw_alpha($95));
   $31 = $96;
   $97 = $27;
   $98 = $29;
   $99 = $25;
   $100 = $31;
   $101 = $28;
   $102 = (+_AT_RDD_Katz_PowerLawER_Daverage_Gy($97,$98,$99,$100,$101));
   $30 = $102;
  } else {
   $103 = $17;
   $104 = ($103|0)==(2);
   if ($104) {
    $105 = $27;
    $106 = $29;
    $107 = $25;
    $108 = $28;
    $109 = (+_AT_RDD_Katz_LinearER_Daverage_Gy($105,$106,$107,$108));
    $30 = $109;
   }
  }
  $110 = $26;
  $111 = $27;
  $112 = $25;
  $113 = $17;
  $114 = $31;
  $115 = $30;
  $116 = $28;
  $117 = $21;
  $118 = $22;
  $119 = $23;
  $120 = (+_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2($110,$111,$112,$113,$114,$115,$116,$117,$118,$119));
  $121 = $20;
  $122 = $24;
  $123 = (($121) + ($122<<3)|0);
  HEAPF64[$123>>3] = $120;
  $124 = $24;
  $125 = (($124) + 1)|0;
  $24 = $125;
 }
 $10 = 0;
 $221 = $10;
 STACKTOP = sp;return ($221|0);
}
function _AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0;
 var $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $12 = $4;
 $13 = $12 < 1.5;
 $14 = $4;
 $15 = $14 > 5.0;
 $or$cond = $13 | $15;
 if ($or$cond) {
  $2 = -1.0;
  $217 = $2;
  STACKTOP = sp;return (+$217);
 }
 $5 = 1;
 while(1) {
  $16 = $4;
  $17 = $5;
  $18 = (656 + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $16 >= $19;
  $21 = $5;
  if (!($20)) {
   break;
  }
  $22 = (($21) + 1)|0;
  $5 = $22;
 }
 $23 = (($21) + -1)|0;
 $5 = $23;
 $24 = $4;
 $25 = $5;
 $26 = (656 + ($25<<3)|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $24 - $27;
 $29 = $5;
 $30 = (($29) + 1)|0;
 $31 = (656 + ($30<<3)|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $5;
 $34 = (656 + ($33<<3)|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $32 - $35;
 $37 = $28 / $36;
 $6 = $37;
 $38 = $3;
 $39 = $5;
 $40 = (($39) + 1)|0;
 $41 = (704 + ($40<<3)|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $38 < $42;
 if ($43) {
  $2 = 1.0;
  $217 = $2;
  STACKTOP = sp;return (+$217);
 }
 $44 = $3;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (752 + ($46<<3)|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $44 >= $48;
 do {
  if ($49) {
   $50 = $5;
   $51 = (800 + ($50<<3)|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $52 * 0.77686999999999995;
   $54 = $5;
   $55 = (752 + ($54<<3)|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $56 * 1.5;
   $58 = - $57;
   $59 = $3;
   $60 = $58 / $59;
   $61 = (+Math_exp((+$60)));
   $62 = 1.0 - $61;
   $63 = $53 / $62;
   $7 = $63;
   $64 = $5;
   $65 = (($64) + 1)|0;
   $66 = (800 + ($65<<3)|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $67 * 0.77686999999999995;
   $69 = $5;
   $70 = (($69) + 1)|0;
   $71 = (752 + ($70<<3)|0);
   $72 = +HEAPF64[$71>>3];
   $73 = $72 * 1.5;
   $74 = - $73;
   $75 = $3;
   $76 = $74 / $75;
   $77 = (+Math_exp((+$76)));
   $78 = 1.0 - $77;
   $79 = $68 / $78;
   $8 = $79;
  } else {
   $80 = $3;
   $81 = $5;
   $82 = (752 + ($81<<3)|0);
   $83 = +HEAPF64[$82>>3];
   $84 = $80 > $83;
   $85 = $5;
   $86 = (800 + ($85<<3)|0);
   $87 = +HEAPF64[$86>>3];
   if ($84) {
    $88 = $87 * 0.77686999999999995;
    $89 = $5;
    $90 = (752 + ($89<<3)|0);
    $91 = +HEAPF64[$90>>3];
    $92 = $91 * 1.5;
    $93 = - $92;
    $94 = $3;
    $95 = $93 / $94;
    $96 = (+Math_exp((+$95)));
    $97 = 1.0 - $96;
    $98 = $88 / $97;
    $7 = $98;
    $99 = $5;
    $100 = (($99) + 1)|0;
    $101 = (800 + ($100<<3)|0);
    $102 = +HEAPF64[$101>>3];
    $103 = $5;
    $104 = (($103) + 1)|0;
    $105 = (848 + ($104<<3)|0);
    $106 = +HEAPF64[$105>>3];
    $107 = $102 - $106;
    $108 = $5;
    $109 = (($108) + 1)|0;
    $110 = (752 + ($109<<3)|0);
    $111 = +HEAPF64[$110>>3];
    $112 = $5;
    $113 = (($112) + 1)|0;
    $114 = (704 + ($113<<3)|0);
    $115 = +HEAPF64[$114>>3];
    $116 = $111 - $115;
    $117 = $107 / $116;
    $118 = $3;
    $119 = $5;
    $120 = (($119) + 1)|0;
    $121 = (704 + ($120<<3)|0);
    $122 = +HEAPF64[$121>>3];
    $123 = $118 - $122;
    $124 = $117 * $123;
    $125 = $5;
    $126 = (($125) + 1)|0;
    $127 = (848 + ($126<<3)|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $124 + $128;
    $8 = $129;
    break;
   } else {
    $130 = $5;
    $131 = (848 + ($130<<3)|0);
    $132 = +HEAPF64[$131>>3];
    $133 = $87 - $132;
    $134 = $5;
    $135 = (752 + ($134<<3)|0);
    $136 = +HEAPF64[$135>>3];
    $137 = $5;
    $138 = (704 + ($137<<3)|0);
    $139 = +HEAPF64[$138>>3];
    $140 = $136 - $139;
    $141 = $133 / $140;
    $142 = $3;
    $143 = $5;
    $144 = (704 + ($143<<3)|0);
    $145 = +HEAPF64[$144>>3];
    $146 = $142 - $145;
    $147 = $141 * $146;
    $148 = $5;
    $149 = (848 + ($148<<3)|0);
    $150 = +HEAPF64[$149>>3];
    $151 = $147 + $150;
    $7 = $151;
    $152 = $5;
    $153 = (($152) + 1)|0;
    $154 = (800 + ($153<<3)|0);
    $155 = +HEAPF64[$154>>3];
    $156 = $5;
    $157 = (($156) + 1)|0;
    $158 = (848 + ($157<<3)|0);
    $159 = +HEAPF64[$158>>3];
    $160 = $155 - $159;
    $161 = $5;
    $162 = (($161) + 1)|0;
    $163 = (752 + ($162<<3)|0);
    $164 = +HEAPF64[$163>>3];
    $165 = $5;
    $166 = (($165) + 1)|0;
    $167 = (704 + ($166<<3)|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $164 - $168;
    $170 = $160 / $169;
    $171 = $3;
    $172 = $5;
    $173 = (($172) + 1)|0;
    $174 = (704 + ($173<<3)|0);
    $175 = +HEAPF64[$174>>3];
    $176 = $171 - $175;
    $177 = $170 * $176;
    $178 = $5;
    $179 = $5;
    $180 = (($178) + ($179))|0;
    $181 = (848 + ($180<<3)|0);
    $182 = +HEAPF64[$181>>3];
    $183 = $177 + $182;
    $8 = $183;
    break;
   }
  }
 } while(0);
 $184 = $7;
 $185 = (+Math_log((+$184)));
 $186 = $6;
 $187 = $8;
 $188 = (+Math_log((+$187)));
 $189 = $7;
 $190 = (+Math_log((+$189)));
 $191 = $188 - $190;
 $192 = $186 * $191;
 $193 = $185 + $192;
 $194 = (+Math_exp((+$193)));
 $9 = $194;
 $195 = $5;
 $196 = (848 + ($195<<3)|0);
 $197 = +HEAPF64[$196>>3];
 $198 = (+Math_log((+$197)));
 $199 = $6;
 $200 = $5;
 $201 = (($200) + 1)|0;
 $202 = (848 + ($201<<3)|0);
 $203 = +HEAPF64[$202>>3];
 $204 = (+Math_log((+$203)));
 $205 = $5;
 $206 = (848 + ($205<<3)|0);
 $207 = +HEAPF64[$206>>3];
 $208 = (+Math_log((+$207)));
 $209 = $204 - $208;
 $210 = $199 * $209;
 $211 = $198 + $210;
 $212 = (+Math_exp((+$211)));
 $10 = $212;
 $213 = $9;
 $214 = $10;
 $215 = $213 / $214;
 $11 = $215;
 $216 = $11;
 $2 = $216;
 $217 = $2;
 STACKTOP = sp;return (+$217);
}
function _AT_KatzModel_KatzExtTarget_Zhang_TrackWidth($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $11 = $4;
 $12 = 1.0 / $11;
 $13 = (+Math_pow(0.97999999999999998,(+$12)));
 $14 = 1.0 - $13;
 $15 = (+Math_log((+$14)));
 $16 = - $15;
 $5 = $16;
 $6 = 0.97999999999999998;
 $17 = $4;
 $18 = (+Math_log((+$17)));
 $7 = $18;
 $19 = +HEAPF64[112];
 $20 = +HEAPF64[(904)>>3];
 $21 = $7;
 $22 = $20 * $21;
 $23 = $19 + $22;
 $24 = +HEAPF64[(912)>>3];
 $25 = $7;
 $26 = $24 * $25;
 $27 = $7;
 $28 = $26 * $27;
 $29 = $23 + $28;
 $30 = +HEAPF64[(920)>>3];
 $31 = $7;
 $32 = (+Math_pow((+$31),3.0));
 $33 = $30 * $32;
 $34 = $29 + $33;
 $35 = +HEAPF64[(928)>>3];
 $36 = $7;
 $37 = (+Math_pow((+$36),4.0));
 $38 = $35 * $37;
 $39 = $34 + $38;
 $40 = +HEAPF64[(936)>>3];
 $41 = $7;
 $42 = (+Math_pow((+$41),5.0));
 $43 = $40 * $42;
 $44 = $39 + $43;
 $45 = (+Math_exp((+$44)));
 $8 = $45;
 $46 = +HEAPF64[118];
 $47 = +HEAPF64[(952)>>3];
 $48 = $7;
 $49 = $47 * $48;
 $50 = $46 + $49;
 $51 = +HEAPF64[(960)>>3];
 $52 = $7;
 $53 = $51 * $52;
 $54 = $7;
 $55 = $53 * $54;
 $56 = $50 + $55;
 $57 = +HEAPF64[(968)>>3];
 $58 = $7;
 $59 = (+Math_pow((+$58),3.0));
 $60 = $57 * $59;
 $61 = $56 + $60;
 $62 = +HEAPF64[(976)>>3];
 $63 = $7;
 $64 = (+Math_pow((+$63),4.0));
 $65 = $62 * $64;
 $66 = $61 + $65;
 $67 = +HEAPF64[(984)>>3];
 $68 = $7;
 $69 = (+Math_pow((+$68),5.0));
 $70 = $67 * $69;
 $71 = $66 + $70;
 $72 = (+Math_exp((+$71)));
 $9 = $72;
 $10 = -1.0;
 $73 = $4;
 $74 = $73 < 1.5;
 $75 = $4;
 $76 = $75 > 3.5;
 $or$cond = $74 | $76;
 if ($or$cond) {
  $2 = -1.0;
  $101 = $2;
  STACKTOP = sp;return (+$101);
 }
 $77 = $3;
 $78 = $8;
 $79 = $77 >= $78;
 $80 = $9;
 if ($79) {
  $81 = $80 * 0.82089999999999996;
  $82 = $8;
  $83 = - $82;
  $84 = $83 * 1.72;
  $85 = $3;
  $86 = $84 / $85;
  $87 = (+Math_exp((+$86)));
  $88 = 1.0 - $87;
  $89 = $81 / $88;
  $10 = $89;
 } else {
  $90 = 0.97999999999999998 - $80;
  $91 = $5;
  $92 = $8;
  $93 = $91 - $92;
  $94 = $90 / $93;
  $95 = $3;
  $96 = $5;
  $97 = $95 - $96;
  $98 = $94 * $97;
  $99 = $98 + 0.97999999999999998;
  $10 = $99;
 }
 $100 = $10;
 $2 = $100;
 $101 = $2;
 STACKTOP = sp;return (+$101);
}
function _AT_KatzModel_inactivation_cross_section_approximation_m2($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $8 = 0.0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = -1.0;
 $23 = $8;
 $24 = (+_AT_beta_from_E_single($23));
 $17 = $24;
 $25 = $17;
 $26 = $9;
 $27 = (_AT_Z_from_particle_no_single($26)|0);
 $28 = (+_AT_effective_charge_from_beta_single($25,$27));
 $18 = $28;
 $29 = $18;
 $30 = $17;
 $31 = $29 / $30;
 $32 = (+_gsl_pow_2($31));
 $33 = $15;
 $34 = $32 / $33;
 $19 = $34;
 $35 = $19;
 $36 = - $35;
 $37 = (+Math_exp((+$36)));
 $38 = 1.0 - $37;
 $39 = $13;
 $40 = (+Math_pow((+$38),(+$39)));
 $20 = $40;
 $41 = $11;
 $42 = ($41|0)==(6);
 $43 = $12;
 $44 = ($43|0)==(2);
 $or$cond = $42 & $44;
 if ($or$cond) {
  $21 = 1.0;
  $45 = $20;
  $46 = $45 > 0.97999999999999998;
  if ($46) {
   $47 = $19;
   $48 = $13;
   $49 = (+_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth($47,$48));
   $21 = $49;
  } else {
   $50 = $20;
   $21 = $50;
  }
  $51 = $21;
  $52 = $14;
  $53 = $51 * $52;
  $16 = $53;
 }
 $54 = $11;
 $55 = ($54|0)==(6);
 if (!($55)) {
  $69 = $16;
  STACKTOP = sp;return (+$69);
 }
 $56 = $12;
 $57 = ($56|0)==(3);
 $58 = $12;
 $59 = ($58|0)==(6);
 $or$cond3 = $57 | $59;
 if (!($or$cond3)) {
  $69 = $16;
  STACKTOP = sp;return (+$69);
 }
 $22 = 1.0;
 $60 = $20;
 $61 = $60 > 0.97999999999999998;
 if ($61) {
  $62 = $19;
  $63 = $13;
  $64 = (+_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth($62,$63));
  $22 = $64;
 } else {
  $65 = $20;
  $22 = $65;
 }
 $66 = $22;
 $67 = $14;
 $68 = $66 * $67;
 $16 = $68;
 $69 = $16;
 STACKTOP = sp;return (+$69);
}
function _AT_KatzModel_single_field_survival_from_inactivation_cross_section($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $23 = $10;
 $24 = $11;
 $25 = $9;
 $26 = $12;
 $27 = $17;
 $28 = (+_AT_dose_Gy_from_fluence_cm2_single($23,$24,$25,$26,$27));
 $18 = $28;
 $29 = $16;
 $30 = $29 > 0.0;
 if (!($30)) {
  ___assert_fail((77575|0),(77141|0),607,(77589|0));
  // unreachable;
 }
 $31 = $13;
 $32 = $31 > 0.0;
 if (!($32)) {
  ___assert_fail((77656|0),(77141|0),609,(77589|0));
  // unreachable;
 }
 $33 = $13;
 $34 = $16;
 $35 = $33 / $34;
 $19 = $35;
 $36 = $19;
 $37 = $36 > 1.0;
 if ($37) {
  $19 = 1.0;
 }
 $38 = $19;
 $39 = 1.0 - $38;
 $40 = $18;
 $41 = $39 * $40;
 $20 = $41;
 $42 = $13;
 $43 = - $42;
 $44 = $43 * 1.0E+4;
 $45 = $9;
 $46 = $44 * $45;
 $47 = (+Math_exp((+$46)));
 $22 = $47;
 $48 = $14;
 $49 = $48 > 0.0;
 if (!($49)) {
  ___assert_fail((77690|0),(77141|0),624,(77589|0));
  // unreachable;
 }
 $50 = $19;
 $51 = $50 > 0.97999999999999998;
 if ($51) {
  $21 = 1.0;
  $61 = $22;
  $62 = $21;
  $63 = $61 * $62;
  STACKTOP = sp;return (+$63);
 } else {
  $52 = $20;
  $53 = - $52;
  $54 = $14;
  $55 = $53 / $54;
  $56 = (+Math_exp((+$55)));
  $57 = 1.0 - $56;
  $58 = $15;
  $59 = (+Math_pow((+$57),(+$58)));
  $60 = 1.0 - $59;
  $21 = $60;
  $61 = $22;
  $62 = $21;
  $63 = $61 * $62;
  STACKTOP = sp;return (+$63);
 }
 return +(0.0);
}
function _AT_KatzModel_single_field_survival($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = $10|0;
 $11 = +$11;
 $12 = $12|0;
 $13 = $13|0;
 var $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0;
 var $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $75 = 0, $76 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer = sp + 96|0;
 $16 = sp + 80|0;
 $29 = sp + 40|0;
 $30 = sp;
 $15 = $0;
 HEAPF64[$16>>3] = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $32 = $10&1;
 $25 = $32;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $33 = $24;
 $34 = $33 > 0.0;
 if (!($34)) {
  ___assert_fail((77575|0),(77141|0),659,(77720|0));
  // unreachable;
 }
 HEAPF64[$29>>3] = 0.0;
 HEAPF64[$30>>3] = 1.0;
 $35 = ((($30)) + 8|0);
 $36 = $22;
 HEAPF64[$35>>3] = $36;
 $37 = ((($35)) + 8|0);
 HEAPF64[$37>>3] = 1.0;
 $38 = ((($37)) + 8|0);
 $39 = $23;
 HEAPF64[$38>>3] = $39;
 $40 = ((($38)) + 8|0);
 HEAPF64[$40>>3] = 0.0;
 $41 = $25;
 $42 = $41&1;
 $43 = $42&1;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = $17;
  $46 = $18;
  $47 = $19;
  $48 = $20;
  $49 = $21;
  $50 = $27;
  $51 = (_AT_KatzModel_inactivation_cross_section_m2(1,$16,$45,$46,$47,$48,$49,$30,$50,$29)|0);
  $31 = $51;
  $52 = $31;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = HEAP32[17818]|0;
   (_fprintf($54,77755,$vararg_buffer)|0);
   $55 = $31;
   $14 = $55;
   $76 = $14;
   STACKTOP = sp;return ($76|0);
  }
 } else {
  $56 = +HEAPF64[$16>>3];
  $57 = $17;
  $58 = $18;
  $59 = $19;
  $60 = $21;
  $61 = $23;
  $62 = $24;
  $63 = $26;
  $64 = (+_AT_KatzModel_inactivation_cross_section_approximation_m2($56,$57,$58,$59,$60,$61,$62,$63));
  HEAPF64[$29>>3] = $64;
 }
 $65 = $15;
 $66 = +HEAPF64[$16>>3];
 $67 = $17;
 $68 = $18;
 $69 = +HEAPF64[$29>>3];
 $70 = $22;
 $71 = $23;
 $72 = $24;
 $73 = $27;
 $74 = (+_AT_KatzModel_single_field_survival_from_inactivation_cross_section($65,$66,$67,$68,$69,$70,$71,$72,$73));
 $75 = $28;
 HEAPF64[$75>>3] = $74;
 $14 = 0;
 $76 = $14;
 STACKTOP = sp;return ($76|0);
}
function _AT_KatzModel_mixed_field_survival($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = $11|0;
 $12 = +$12;
 $13 = $13|0;
 $14 = $14|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0;
 var $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer = sp + 128|0;
 $31 = sp + 88|0;
 $32 = sp;
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $41 = $11&1;
 $27 = $41;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $42 = $26;
 $43 = $42 > 0.0;
 if (!($43)) {
  ___assert_fail((77575|0),(77141|0),729,(77807|0));
  // unreachable;
 }
 HEAPF64[$31>>3] = 0.0;
 HEAPF64[$32>>3] = 1.0;
 $44 = ((($32)) + 8|0);
 $45 = $24;
 HEAPF64[$44>>3] = $45;
 $46 = ((($44)) + 8|0);
 HEAPF64[$46>>3] = 1.0;
 $47 = ((($46)) + 8|0);
 $48 = $25;
 HEAPF64[$47>>3] = $48;
 $49 = ((($47)) + 8|0);
 HEAPF64[$49>>3] = 0.0;
 $33 = 0;
 $34 = 0.0;
 $35 = 0.0;
 $33 = 0;
 while(1) {
  $50 = $33;
  $51 = $16;
  $52 = ($50|0)<($51|0);
  if (!($52)) {
   label = 15;
   break;
  }
  $53 = $27;
  $54 = $53&1;
  $55 = $18;
  $56 = $33;
  $57 = (($55) + ($56<<3)|0);
  if ($54) {
   $58 = +HEAPF64[$57>>3];
   $59 = $19;
   $60 = $33;
   $61 = (($59) + ($60<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $20;
   $64 = $21;
   $65 = $23;
   $66 = $25;
   $67 = $26;
   $68 = $28;
   $69 = (+_AT_KatzModel_inactivation_cross_section_approximation_m2($58,$62,$63,$64,$65,$66,$67,$68));
   HEAPF64[$31>>3] = $69;
  } else {
   $70 = $19;
   $71 = $33;
   $72 = (($70) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $20;
   $75 = $21;
   $76 = $22;
   $77 = $23;
   $78 = $29;
   $79 = (_AT_KatzModel_inactivation_cross_section_m2(1,$57,$73,$74,$75,$76,$77,$32,$78,$31)|0);
   $36 = $79;
   $80 = $36;
   $81 = ($80|0)!=(0);
   if ($81) {
    label = 8;
    break;
   }
  }
  $37 = 1.0;
  $84 = +HEAPF64[$31>>3];
  $85 = $26;
  $86 = $84 < $85;
  if ($86) {
   $87 = +HEAPF64[$31>>3];
   $88 = $26;
   $89 = $87 / $88;
   $37 = $89;
  }
  $38 = 0.0;
  $90 = $17;
  $91 = $33;
  $92 = (($90) + ($91<<3)|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $93 > 0.0;
  if ($94) {
   $95 = $18;
   $96 = $33;
   $97 = (($95) + ($96<<3)|0);
   $98 = +HEAPF64[$97>>3];
   $99 = $98 > 0.0;
   if ($99) {
    $100 = $18;
    $101 = $33;
    $102 = (($100) + ($101<<3)|0);
    $103 = +HEAPF64[$102>>3];
    $104 = $19;
    $105 = $33;
    $106 = (($104) + ($105<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $17;
    $109 = $33;
    $110 = (($108) + ($109<<3)|0);
    $111 = +HEAPF64[$110>>3];
    $112 = $20;
    $113 = $29;
    $114 = (+_AT_dose_Gy_from_fluence_cm2_single($103,$107,$111,$112,$113));
    $38 = $114;
   }
  }
  $115 = +HEAPF64[$31>>3];
  $116 = $17;
  $117 = $33;
  $118 = (($116) + ($117<<3)|0);
  $119 = +HEAPF64[$118>>3];
  $120 = $115 * $119;
  $121 = $120 * 1.0E+4;
  $122 = $34;
  $123 = $122 + $121;
  $34 = $123;
  $124 = $37;
  $125 = 1.0 - $124;
  $126 = $38;
  $127 = $125 * $126;
  $128 = $35;
  $129 = $128 + $127;
  $35 = $129;
  $130 = $33;
  $131 = (($130) + 1)|0;
  $33 = $131;
 }
 if ((label|0) == 8) {
  $82 = HEAP32[17818]|0;
  (_fprintf($82,77755,$vararg_buffer)|0);
  $83 = $36;
  $15 = $83;
  $148 = $15;
  STACKTOP = sp;return ($148|0);
 }
 else if ((label|0) == 15) {
  $132 = $34;
  $133 = - $132;
  $134 = (+Math_exp((+$133)));
  $39 = $134;
  $135 = $35;
  $136 = - $135;
  $137 = $24;
  $138 = $136 / $137;
  $139 = (+Math_exp((+$138)));
  $140 = 1.0 - $139;
  $141 = $25;
  $142 = (+Math_pow((+$140),(+$141)));
  $143 = 1.0 - $142;
  $40 = $143;
  $144 = $39;
  $145 = $40;
  $146 = $144 * $145;
  $147 = $30;
  HEAPF64[$147>>3] = $146;
  $15 = 0;
  $148 = $15;
  STACKTOP = sp;return ($148|0);
 }
 return (0)|0;
}
function _AT_KatzModel_single_field_survival_optimized_for_fluence_vector($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = $11|0;
 $12 = +$12;
 $13 = $13|0;
 $14 = $14|0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer1 = sp + 96|0;
 $vararg_buffer = sp + 88|0;
 $18 = sp + 80|0;
 $31 = sp + 40|0;
 $32 = sp;
 $16 = $0;
 $17 = $1;
 HEAPF64[$18>>3] = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $35 = $11&1;
 $27 = $35;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $36 = $26;
 $37 = $36 > 0.0;
 if (!($37)) {
  ___assert_fail((77575|0),(77141|0),820,(77841|0));
  // unreachable;
 }
 HEAPF64[$31>>3] = 0.0;
 HEAPF64[$32>>3] = 1.0;
 $38 = ((($32)) + 8|0);
 $39 = $24;
 HEAPF64[$38>>3] = $39;
 $40 = ((($38)) + 8|0);
 HEAPF64[$40>>3] = 1.0;
 $41 = ((($40)) + 8|0);
 $42 = $25;
 HEAPF64[$41>>3] = $42;
 $43 = ((($41)) + 8|0);
 HEAPF64[$43>>3] = 0.0;
 $44 = $27;
 $45 = $44&1;
 $46 = $45&1;
 $47 = ($46|0)==(0);
 if ($47) {
  $48 = $19;
  $49 = $20;
  $50 = $21;
  $51 = $22;
  $52 = $23;
  $53 = $29;
  $54 = (_AT_KatzModel_inactivation_cross_section_m2(1,$18,$48,$49,$50,$51,$52,$32,$53,$31)|0);
  $33 = $54;
  $55 = +HEAPF64[$31>>3];
  HEAPF64[$vararg_buffer>>3] = $55;
  (_printf(77905,$vararg_buffer)|0);
  $56 = $33;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = HEAP32[17818]|0;
   (_fprintf($58,77755,$vararg_buffer1)|0);
   $59 = $33;
   $15 = $59;
   $90 = $15;
   STACKTOP = sp;return ($90|0);
  }
 } else {
  $60 = +HEAPF64[$18>>3];
  $61 = $19;
  $62 = $20;
  $63 = $21;
  $64 = $23;
  $65 = $25;
  $66 = $26;
  $67 = $28;
  $68 = (+_AT_KatzModel_inactivation_cross_section_approximation_m2($60,$61,$62,$63,$64,$65,$66,$67));
  HEAPF64[$31>>3] = $68;
 }
 $34 = 0;
 while(1) {
  $69 = $34;
  $70 = $16;
  $71 = ($69|0)<($70|0);
  if (!($71)) {
   break;
  }
  $72 = $17;
  $73 = $34;
  $74 = (($72) + ($73<<3)|0);
  $75 = +HEAPF64[$74>>3];
  $76 = +HEAPF64[$18>>3];
  $77 = $19;
  $78 = $20;
  $79 = +HEAPF64[$31>>3];
  $80 = $24;
  $81 = $25;
  $82 = $26;
  $83 = $29;
  $84 = (+_AT_KatzModel_single_field_survival_from_inactivation_cross_section($75,$76,$77,$78,$79,$80,$81,$82,$83));
  $85 = $30;
  $86 = $34;
  $87 = (($85) + ($86<<3)|0);
  HEAPF64[$87>>3] = $84;
  $88 = $34;
  $89 = (($88) + 1)|0;
  $34 = $89;
 }
 $15 = 0;
 $90 = $15;
 STACKTOP = sp;return ($90|0);
}
function _AT_D_RDD_Gy_int($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $5 = 1;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $3;
  $6 = $10;
  $11 = $2;
  HEAPF64[$7>>3] = $11;
  $12 = $5;
  $13 = $6;
  $14 = HEAP32[$13>>2]|0;
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $6;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = $6;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  (_AT_D_RDD_Gy($12,$7,$15,$19,$23,$27,$30,$34,2,$4)|0);
  $35 = $2;
  $36 = 6.2831853071795862 * $35;
  $37 = +HEAPF64[$4>>3];
  $38 = $36 * $37;
  STACKTOP = sp;return (+$38);
 } else {
  ___assert_fail((77126|0),(77141|0),883,(77938|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_sI_int($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = $3;
  $9 = (+_AT_P_RDD($7,$8));
  $4 = $9;
  $10 = $2;
  $11 = $4;
  $12 = $10 * $11;
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((77126|0),(77141|0),906,(77954|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_P_RDD($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $5 = 1;
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $3;
  $6 = $12;
  $13 = $2;
  HEAPF64[$7>>3] = $13;
  $14 = $5;
  $15 = $6;
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF64[$16>>3];
  $18 = $6;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = $6;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $6;
  $34 = ((($33)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  (_AT_D_RDD_Gy($14,$7,$17,$21,$25,$29,$32,$36,2,$4)|0);
  $8 = 2;
  $37 = $5;
  $38 = $8;
  $39 = $6;
  $40 = ((($39)) + 24|0);
  _AT_gamma_response($37,$4,$38,$40,0,$9);
  $41 = +HEAPF64[$9>>3];
  STACKTOP = sp;return (+$41);
 } else {
  ___assert_fail((77126|0),(77141|0),917,(77964|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_characteristic_single_scattering_angle_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $4;
 $15 = (+_AT_beta_from_E_single($14));
 $8 = $15;
 $16 = $4;
 $17 = (+_AT_gamma_from_E_single($16));
 $9 = $17;
 $18 = $8;
 $19 = $9;
 $20 = $18 * $19;
 $21 = $20 * 931.49402799999996;
 $22 = $21 * 1.6021764600000001E-13;
 $23 = $22 / 299792458.0;
 $10 = $23;
 $24 = $7;
 $25 = (_AT_Z_from_element_acronym_single($24)|0);
 $11 = $25;
 $26 = $7;
 $27 = (+_AT_electron_density_cm3_from_element_acronym_single($26));
 $12 = $27;
 $28 = $5;
 $29 = (+($28|0));
 $30 = (+_gsl_pow_2($29));
 $31 = 12.566370614359172 * $30;
 $32 = $11;
 $33 = (($32) + 1)|0;
 $34 = (+($33|0));
 $35 = $31 * $34;
 $36 = $12;
 $37 = $35 * $36;
 $38 = $6;
 $39 = $37 * $38;
 $40 = $8;
 $41 = 6.2831853071795862 * $40;
 $42 = $10;
 $43 = $41 * $42;
 $44 = 4.8352764203462883E-34 / $43;
 $45 = (+_gsl_pow_2($44));
 $46 = $39 * $45;
 $13 = $46;
 $47 = $13;
 $48 = (+Math_sqrt((+$47)));
 STACKTOP = sp;return (+$48);
}
function _AT_characteristic_single_scattering_angle($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_AT_characteristic_single_scattering_angle_single($19,$23,$27,$31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return 0;
}
function _AT_screening_angle_single($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = (+_AT_beta_from_E_single($11));
 $6 = $12;
 $13 = $3;
 $14 = (+_AT_gamma_from_E_single($13));
 $7 = $14;
 $15 = $6;
 $16 = $7;
 $17 = $15 * $16;
 $18 = $17 * 931.49402799999996;
 $8 = $18;
 $19 = $5;
 $20 = (_AT_Z_from_element_acronym_single($19)|0);
 $9 = $20;
 $21 = $9;
 $22 = (+($21|0));
 $23 = (+Math_pow((+$22),0.66666666666666663));
 $24 = 0.0037289394872640539 * $23;
 $25 = $8;
 $26 = 0.88900000000000001 * $25;
 $27 = $24 / $26;
 $10 = $27;
 $28 = $10;
 $29 = $4;
 $30 = (+($29|0));
 $31 = 0.0072973530000000003 * $30;
 $32 = $9;
 $33 = (+($32|0));
 $34 = $31 * $33;
 $35 = $6;
 $36 = $34 / $35;
 $37 = (+_gsl_pow_2($36));
 $38 = 3.7599999999999998 * $37;
 $39 = 1.1299999999999999 + $38;
 $40 = (+Math_sqrt((+$39)));
 $41 = $28 * $40;
 STACKTOP = sp;return (+$41);
}
function _AT_screening_angle($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $10;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $8;
  $23 = $10;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (+_AT_screening_angle_single($17,$21,$25));
  $27 = $9;
  $28 = $10;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $10 = $31;
 }
 STACKTOP = sp;return 0;
}
function _AT_effective_collision_number_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 48|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = (+_AT_characteristic_single_scattering_angle_single($12,$13,$14,$15));
 $9 = $16;
 $17 = $5;
 $18 = $6;
 $19 = $8;
 $20 = (+_AT_screening_angle_single($17,$18,$19));
 $10 = $20;
 $21 = $9;
 $22 = (+_gsl_pow_2($21));
 $23 = $10;
 $24 = (+_gsl_pow_2($23));
 $25 = 1.167 * $24;
 $26 = $22 / $25;
 $11 = $26;
 $27 = $11;
 $28 = $27 < 1.1399999999999999;
 if ($28) {
  (_printf(77973,$vararg_buffer)|0);
  $4 = 0.0;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 } else {
  $29 = $11;
  $4 = $29;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 }
 return +(0.0);
}
function _AT_effective_collision_number($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_AT_effective_collision_number_single($19,$23,$27,$31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return 0;
}
function _AT_reduced_target_thickness_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = (+_AT_effective_collision_number_single($9,$10,$11,$12));
 $8 = $13;
 $14 = $8;
 $15 = 1.167 * $14;
 $16 = (+_llvm_log10_f64((+$15)));
 $17 = 2.3862999999999999 * $16;
 $18 = 2.6000000000000001 + $17;
 $19 = $8;
 $20 = 1.167 * $19;
 $21 = (+_llvm_log10_f64((+$20)));
 $22 = $21 + 0.99399999999999999;
 $23 = 3.234 / $22;
 $24 = $18 - $23;
 STACKTOP = sp;return (+$24);
}
function _AT_reduced_target_thickness($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_AT_reduced_target_thickness_single($19,$23,$27,$31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return 0;
}
function _AT_characteristic_multiple_scattering_angle_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = (+_AT_reduced_target_thickness_single($10,$11,$12,$13));
 $8 = $14;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = (+_AT_characteristic_single_scattering_angle_single($15,$16,$17,$18));
 $9 = $19;
 $20 = $9;
 $21 = $8;
 $22 = $21 / 2.0;
 $23 = (+Math_sqrt((+$22)));
 $24 = $20 * $23;
 STACKTOP = sp;return (+$24);
}
function _AT_characteristic_multiple_scattering_angle($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_AT_characteristic_multiple_scattering_angle_single($19,$23,$27,$31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return 0;
}
function _AT_Moliere_function_f0($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $2 = 0.0;
 $3 = 0.0;
 $4 = 1.41334;
 $5 = 3.5460500000000001;
 $7 = (+Math_sqrt(1.5707963267948966));
 $8 = 1.41334 * $7;
 $9 = 3.5460500000000001 / $8;
 $10 = $1;
 $11 = $10 - 0.0;
 $12 = $11 / 1.41334;
 $13 = (+_gsl_pow_2($12));
 $14 = -2.0 * $13;
 $15 = (+Math_exp((+$14)));
 $16 = $9 * $15;
 $17 = 0.0 + $16;
 $6 = $17;
 $18 = $6;
 STACKTOP = sp;return (+$18);
}
function _AT_Moliere_function_f1($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $1 = $0;
 $2 = 0.00363;
 $3 = 0.059130000000000002;
 $4 = 0.79315000000000002;
 $5 = 0.79610999999999998;
 $17 = (+Math_sqrt(1.5707963267948966));
 $18 = 0.79315000000000002 * $17;
 $19 = 0.79610999999999998 / $18;
 $20 = $1;
 $21 = $20 - 0.059130000000000002;
 $22 = $21 / 0.79315000000000002;
 $23 = (+_gsl_pow_2($22));
 $24 = -2.0 * $23;
 $25 = (+Math_exp((+$24)));
 $26 = $19 * $25;
 $27 = 0.00363 + $26;
 $6 = $27;
 $7 = 0.00363;
 $8 = 0.96016999999999997;
 $9 = 0.98617999999999994;
 $10 = -1.04677;
 $28 = (+Math_sqrt(1.5707963267948966));
 $29 = 0.98617999999999994 * $28;
 $30 = -1.04677 / $29;
 $31 = $1;
 $32 = $31 - 0.96016999999999997;
 $33 = $32 / 0.98617999999999994;
 $34 = (+_gsl_pow_2($33));
 $35 = -2.0 * $34;
 $36 = (+Math_exp((+$35)));
 $37 = $30 * $36;
 $38 = 0.00363 + $37;
 $11 = $38;
 $12 = 0.00363;
 $13 = 0.96016999999999997;
 $14 = 2.1501199999999998;
 $15 = 0.71399000000000001;
 $39 = (+Math_sqrt(1.5707963267948966));
 $40 = 2.1501199999999998 * $39;
 $41 = 0.71399000000000001 / $40;
 $42 = $1;
 $43 = $42 - 0.96016999999999997;
 $44 = $43 / 2.1501199999999998;
 $45 = (+_gsl_pow_2($44));
 $46 = -2.0 * $45;
 $47 = (+Math_exp((+$46)));
 $48 = $41 * $47;
 $49 = 0.00363 + $48;
 $16 = $49;
 $50 = $6;
 $51 = $11;
 $52 = $50 + $51;
 $53 = $16;
 $54 = $52 + $53;
 STACKTOP = sp;return (+$54);
}
function _AT_Moliere_function_f2($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $1 = $0;
 $2 = 6.4000000000000005E-4;
 $3 = 0.084839999999999998;
 $4 = 0.85501000000000005;
 $5 = 4.2210200000000002;
 $22 = (+Math_sqrt(1.5707963267948966));
 $23 = 0.85501000000000005 * $22;
 $24 = 4.2210200000000002 / $23;
 $25 = $1;
 $26 = $25 - 0.084839999999999998;
 $27 = $26 / 0.85501000000000005;
 $28 = (+_gsl_pow_2($27));
 $29 = -2.0 * $28;
 $30 = (+Math_exp((+$29)));
 $31 = $24 * $30;
 $32 = 6.4000000000000005E-4 + $31;
 $6 = $32;
 $7 = 6.4000000000000005E-4;
 $8 = 0.92230000000000001;
 $9 = 0.011379999999999999;
 $10 = -0.0028600000000000001;
 $33 = (+Math_sqrt(1.5707963267948966));
 $34 = 0.011379999999999999 * $33;
 $35 = -0.0028600000000000001 / $34;
 $36 = $1;
 $37 = $36 - 0.92230000000000001;
 $38 = $37 / 0.011379999999999999;
 $39 = (+_gsl_pow_2($38));
 $40 = -2.0 * $39;
 $41 = (+Math_exp((+$40)));
 $42 = $35 * $41;
 $43 = 6.4000000000000005E-4 + $42;
 $11 = $43;
 $12 = 6.4000000000000005E-4;
 $13 = 0.92230000000000001;
 $14 = 1.45644;
 $15 = -6.11463;
 $44 = (+Math_sqrt(1.5707963267948966));
 $45 = 1.45644 * $44;
 $46 = -6.11463 / $45;
 $47 = $1;
 $48 = $47 - 0.92230000000000001;
 $49 = $48 / 1.45644;
 $50 = (+_gsl_pow_2($49));
 $51 = -2.0 * $50;
 $52 = (+Math_exp((+$51)));
 $53 = $46 * $52;
 $54 = 6.4000000000000005E-4 + $53;
 $16 = $54;
 $17 = 6.3999999999999997E-5;
 $18 = 1.32168;
 $19 = 1.08239;
 $20 = 3.7194099999999999;
 $55 = (+Math_sqrt(1.5707963267948966));
 $56 = 1.08239 * $55;
 $57 = 3.7194099999999999 / $56;
 $58 = $1;
 $59 = $58 - 1.32168;
 $60 = $59 / 1.08239;
 $61 = (+_gsl_pow_2($60));
 $62 = -2.0 * $61;
 $63 = (+Math_exp((+$62)));
 $64 = $57 * $63;
 $65 = 6.3999999999999997E-5 + $64;
 $21 = $65;
 $66 = $6;
 $67 = $11;
 $68 = $66 + $67;
 $69 = $16;
 $70 = $68 + $69;
 $71 = $21;
 $72 = $70 + $71;
 STACKTOP = sp;return (+$72);
}
function _AT_scattering_angle_distribution_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = (+_AT_characteristic_multiple_scattering_angle_single($22,$23,$24,$25));
 $11 = $26;
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = (+_AT_characteristic_single_scattering_angle_single($27,$28,$29,$30));
 $12 = $31;
 $32 = $6;
 $33 = $7;
 $34 = $8;
 $35 = $9;
 $36 = (+_AT_reduced_target_thickness_single($32,$33,$34,$35));
 $13 = $36;
 $37 = $10;
 $38 = $12;
 $39 = $13;
 $40 = (+Math_sqrt((+$39)));
 $41 = $38 * $40;
 $42 = $37 / $41;
 $14 = $42;
 $43 = $14;
 $44 = (+_AT_Moliere_function_f0($43));
 $15 = $44;
 $45 = $14;
 $46 = (+_AT_Moliere_function_f1($45));
 $16 = $46;
 $47 = $14;
 $48 = (+_AT_Moliere_function_f2($47));
 $17 = $48;
 $49 = $14;
 $50 = - $49;
 $18 = $50;
 $51 = $18;
 $52 = (+_AT_Moliere_function_f0($51));
 $19 = $52;
 $53 = $18;
 $54 = (+_AT_Moliere_function_f1($53));
 $20 = $54;
 $55 = $18;
 $56 = (+_AT_Moliere_function_f2($55));
 $21 = $56;
 $57 = $10;
 $58 = $57 > 0.0;
 $59 = $11;
 $60 = (+_gsl_pow_2($59));
 $61 = 12.566370614359172 * $60;
 $62 = 1.0 / $61;
 if ($58) {
  $63 = $15;
  $64 = $16;
  $65 = $13;
  $66 = $64 / $65;
  $67 = $63 + $66;
  $68 = $17;
  $69 = $13;
  $70 = $13;
  $71 = $69 * $70;
  $72 = $68 / $71;
  $73 = $67 + $72;
  $74 = $62 * $73;
  $5 = $74;
  $87 = $5;
  STACKTOP = sp;return (+$87);
 } else {
  $75 = $19;
  $76 = $20;
  $77 = $13;
  $78 = $76 / $77;
  $79 = $75 + $78;
  $80 = $21;
  $81 = $13;
  $82 = $13;
  $83 = $81 * $82;
  $84 = $80 / $83;
  $85 = $79 + $84;
  $86 = $62 * $85;
  $5 = $86;
  $87 = $5;
  STACKTOP = sp;return (+$87);
 }
 return +(0.0);
}
function _AT_scattering_angle_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $9;
  $20 = $10;
  $21 = $11;
  $22 = $12;
  $23 = $14;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+_AT_scattering_angle_distribution_single($18,$19,$20,$21,$25));
  $27 = $13;
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $14;
  $31 = (($30) + 1)|0;
  $14 = $31;
 }
 STACKTOP = sp;return 0;
}
function _AT_Highland_angle_single($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = (+_AT_beta_from_E_single($9));
 $6 = $10;
 $11 = $3;
 $12 = (+_AT_gamma_from_E_single($11));
 $7 = $12;
 $13 = $6;
 $14 = $7;
 $15 = $13 * $14;
 $16 = $15 * 931.49402799999996;
 $8 = $16;
 $17 = $6;
 $18 = $8;
 $19 = $17 * $18;
 $20 = 14.1 / $19;
 $21 = $4;
 $22 = (+($21|0));
 $23 = $20 * $22;
 $24 = $5;
 $25 = (+Math_sqrt((+$24)));
 $26 = $23 * $25;
 $27 = $5;
 $28 = (+_llvm_log10_f64((+$27)));
 $29 = $28 / 9.0;
 $30 = 1.0 + $29;
 $31 = $26 * $30;
 STACKTOP = sp;return (+$31);
}
function _AT_Highland_angle($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $10;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $8;
  $23 = $10;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+_AT_Highland_angle_single($17,$21,$25));
  $27 = $9;
  $28 = $10;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $10 = $31;
 }
 STACKTOP = sp;return 0;
}
function _AT_range_straggling_convolution($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 32|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAPF64[$7>>3] = $3;
 $8 = 0.0;
 $12 = $5;
 $13 = $4;
 $14 = $12 - $13;
 $9 = $14;
 $15 = $6;
 $16 = $15 != 0.0;
 if (!($16)) {
  ___assert_fail((78076|0),(78089|0),40,(78125|0));
  // unreachable;
 }
 $17 = $9;
 $18 = $6;
 $19 = $17 / $18;
 $10 = $19;
 $20 = $10;
 $21 = $20 > -5.0;
 $22 = $10;
 $23 = $22 < 10.0;
 $or$cond = $21 & $23;
 if ($or$cond) {
  $24 = (+Math_sqrt(6.2831853071795862));
  $25 = $6;
  $26 = $24 * $25;
  $27 = 1.0 / $26;
  $8 = $27;
  $28 = $9;
  $29 = -1.0 * $28;
  $30 = $9;
  $31 = $29 * $30;
  $32 = $6;
  $33 = 4.0 * $32;
  $34 = $6;
  $35 = $33 * $34;
  $36 = $31 / $35;
  $37 = (+Math_exp((+$36)));
  $38 = $6;
  $39 = +HEAPF64[$7>>3];
  $40 = (+Math_pow((+$38),(+$39)));
  $41 = $37 * $40;
  $42 = $8;
  $43 = $42 * $41;
  $8 = $43;
  (_AT_gamma_($7,$11)|0);
  $44 = +HEAPF64[$11>>3];
  $45 = $8;
  $46 = $45 * $44;
  $8 = $46;
  $47 = +HEAPF64[$7>>3];
  $48 = -1.0 * $47;
  $49 = $10;
  $50 = -1.0 * $49;
  $51 = (+_AT_Dyx($48,$50));
  HEAPF64[$11>>3] = $51;
  $52 = +HEAPF64[$11>>3];
  $53 = $8;
  $54 = $53 * $52;
  $8 = $54;
 }
 $55 = $10;
 $56 = $55 >= 10.0;
 if (!($56)) {
  $61 = $8;
  STACKTOP = sp;return (+$61);
 }
 $57 = $9;
 $58 = +HEAPF64[$7>>3];
 $59 = $58 - 1.0;
 $60 = (+Math_pow((+$57),(+$59)));
 $8 = $60;
 $61 = $8;
 STACKTOP = sp;return (+$61);
}
function _AT_gamma_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0;
 var $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 HEAPF64[10662] = 3.1415926535897931;
 $5 = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = $2;
 $8 = +HEAPF64[$7>>3];
 $9 = (~~(($8)));
 $10 = (+($9|0));
 $11 = $6 == $10;
 $12 = $2;
 $13 = +HEAPF64[$12>>3];
 if ($11) {
  $14 = $13 > 0.0;
  $15 = $3;
  if (!($14)) {
   HEAPF64[$15>>3] = 1.0000000000000001E+300;
   STACKTOP = sp;return 0;
  }
  HEAPF64[$15>>3] = 1.0;
  $16 = $2;
  $17 = +HEAPF64[$16>>3];
  $18 = $17 - 1.0;
  $19 = (~~(($18)));
  HEAP32[323062] = $19;
  $20 = HEAP32[323062]|0;
  $4 = $20;
  HEAP32[323063] = 2;
  while(1) {
   $21 = HEAP32[323063]|0;
   $22 = $4;
   $23 = ($21|0)<=($22|0);
   if (!($23)) {
    break;
   }
   $24 = HEAP32[323063]|0;
   $25 = (+($24|0));
   $26 = $3;
   $27 = +HEAPF64[$26>>3];
   $28 = $27 * $25;
   HEAPF64[$26>>3] = $28;
   $29 = HEAP32[323063]|0;
   $30 = (($29) + 1)|0;
   HEAP32[323063] = $30;
  }
  STACKTOP = sp;return 0;
 }
 $31 = (+Math_abs((+$13)));
 $32 = $31 > 1.0;
 $33 = $2;
 $34 = +HEAPF64[$33>>3];
 if ($32) {
  $35 = (+Math_abs((+$34)));
  HEAPF64[10663] = $35;
  $36 = +HEAPF64[10663];
  $37 = (~~(($36)));
  HEAP32[323064] = $37;
  HEAPF64[10664] = 1.0;
  $38 = HEAP32[323064]|0;
  $4 = $38;
  HEAP32[323063] = 1;
  while(1) {
   $39 = HEAP32[323063]|0;
   $40 = $4;
   $41 = ($39|0)<=($40|0);
   if (!($41)) {
    break;
   }
   $42 = +HEAPF64[10663];
   $43 = HEAP32[323063]|0;
   $44 = (+($43|0));
   $45 = $42 - $44;
   $46 = +HEAPF64[10664];
   $47 = $46 * $45;
   HEAPF64[10664] = $47;
   $48 = HEAP32[323063]|0;
   $49 = (($48) + 1)|0;
   HEAP32[323063] = $49;
  }
  $50 = HEAP32[323064]|0;
  $51 = (+($50|0));
  $52 = +HEAPF64[10663];
  $53 = $52 - $51;
  HEAPF64[10663] = $53;
 } else {
  HEAPF64[10663] = $34;
 }
 HEAPF64[10665] = 9.9999999999999997E-17;
 HEAP32[323063] = 25;
 while(1) {
  $54 = HEAP32[323063]|0;
  $55 = ($54|0)>=(1);
  $56 = +HEAPF64[10665];
  $57 = +HEAPF64[10663];
  $58 = $56 * $57;
  if (!($55)) {
   break;
  }
  $59 = HEAP32[323063]|0;
  $60 = (($59) - 1)|0;
  $61 = (992 + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $58 + $62;
  HEAPF64[10665] = $63;
  $64 = HEAP32[323063]|0;
  $65 = (($64) + -1)|0;
  HEAP32[323063] = $65;
 }
 $66 = 1.0 / $58;
 $67 = $3;
 HEAPF64[$67>>3] = $66;
 $68 = $2;
 $69 = +HEAPF64[$68>>3];
 $70 = (+Math_abs((+$69)));
 $71 = $70 > 1.0;
 if (!($71)) {
  STACKTOP = sp;return 0;
 }
 $72 = +HEAPF64[10664];
 $73 = $3;
 $74 = +HEAPF64[$73>>3];
 $75 = $74 * $72;
 HEAPF64[$73>>3] = $75;
 $76 = $2;
 $77 = +HEAPF64[$76>>3];
 $78 = $77 < 0.0;
 if (!($78)) {
  STACKTOP = sp;return 0;
 }
 $79 = +HEAPF64[10662];
 $80 = - $79;
 $81 = $2;
 $82 = +HEAPF64[$81>>3];
 $83 = $3;
 $84 = +HEAPF64[$83>>3];
 $85 = $82 * $84;
 $86 = +HEAPF64[10662];
 $87 = $2;
 $88 = +HEAPF64[$87>>3];
 $89 = $86 * $88;
 $90 = (+Math_sin((+$89)));
 $91 = $85 * $90;
 $92 = $80 / $91;
 $93 = $3;
 HEAPF64[$93>>3] = $92;
 STACKTOP = sp;return 0;
}
function _AT_Dyx($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1664|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1664|0);
 $2 = sp + 1648|0;
 $3 = sp + 1640|0;
 $4 = sp + 1632|0;
 $5 = sp + 816|0;
 $6 = sp;
 $7 = sp + 1624|0;
 HEAPF64[$2>>3] = $0;
 HEAPF64[$3>>3] = $1;
 (_pbdv_($2,$3,$6,$5,$4,$7)|0);
 $8 = +HEAPF64[$4>>3];
 STACKTOP = sp;return (+$8);
}
function _pbdv_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $7;
 $14 = +HEAPF64[$13>>3];
 $15 = (+Math_abs((+$14)));
 HEAPF64[10618] = $15;
 $16 = $6;
 $17 = +HEAPF64[$16>>3];
 HEAPF64[10619] = $17;
 $18 = $6;
 $19 = +HEAPF64[$18>>3];
 $20 = (+_d_sign(1.0,$19));
 $21 = $6;
 $22 = +HEAPF64[$21>>3];
 $23 = $22 + $20;
 HEAPF64[$21>>3] = $23;
 $24 = $6;
 $25 = +HEAPF64[$24>>3];
 $26 = (~~(($25)));
 HEAP32[323052] = $26;
 $27 = $6;
 $28 = +HEAPF64[$27>>3];
 $29 = HEAP32[323052]|0;
 $30 = (+($29|0));
 $31 = $28 - $30;
 HEAPF64[10620] = $31;
 $32 = HEAP32[323052]|0;
 $33 = (Math_abs(($32|0))|0);
 HEAP32[323053] = $33;
 $34 = $7;
 $35 = +HEAPF64[$34>>3];
 $36 = $35 * -0.25;
 $37 = $7;
 $38 = +HEAPF64[$37>>3];
 $39 = $36 * $38;
 $40 = (+Math_exp((+$39)));
 HEAPF64[10621] = $40;
 $41 = HEAP32[323053]|0;
 $42 = ($41|0)>=(1);
 if ($42) {
  HEAP32[323054] = 1;
 }
 $43 = $6;
 $44 = +HEAPF64[$43>>3];
 $45 = $44 >= 0.0;
 L4: do {
  if ($45) {
   $46 = +HEAPF64[10620];
   $47 = $46 == 0.0;
   L6: do {
    if ($47) {
     $48 = +HEAPF64[10621];
     HEAPF64[10622] = $48;
     $49 = $7;
     $50 = +HEAPF64[$49>>3];
     $51 = +HEAPF64[10621];
     $52 = $50 * $51;
     HEAPF64[10623] = $52;
    } else {
     $53 = HEAP32[323054]|0;
     $12 = $53;
     HEAP32[323055] = 0;
     while(1) {
      $54 = HEAP32[323055]|0;
      $55 = $12;
      $56 = ($54|0)<=($55|0);
      if (!($56)) {
       break L6;
      }
      $57 = +HEAPF64[10620];
      $58 = HEAP32[323055]|0;
      $59 = (+($58|0));
      $60 = $57 + $59;
      HEAPF64[10624] = $60;
      $61 = +HEAPF64[10618];
      $62 = $61 <= 5.8000001907348633;
      if ($62) {
       $63 = $7;
       (_dvsa_(84992,$63,84984)|0);
      }
      $64 = +HEAPF64[10618];
      $65 = $64 > 5.8000001907348633;
      if ($65) {
       $66 = $7;
       (_dvla_(84992,$66,84984)|0);
      }
      $67 = HEAP32[323055]|0;
      $68 = ($67|0)==(0);
      if ($68) {
       $69 = +HEAPF64[10623];
       HEAPF64[10622] = $69;
      }
      $70 = HEAP32[323055]|0;
      $71 = (($70) + 1)|0;
      HEAP32[323055] = $71;
     }
    }
   } while(0);
   $72 = +HEAPF64[10622];
   $73 = $8;
   HEAPF64[$73>>3] = $72;
   $74 = +HEAPF64[10623];
   $75 = $8;
   $76 = ((($75)) + 8|0);
   HEAPF64[$76>>3] = $74;
   $77 = HEAP32[323053]|0;
   $12 = $77;
   HEAP32[323056] = 2;
   while(1) {
    $78 = HEAP32[323056]|0;
    $79 = $12;
    $80 = ($78|0)<=($79|0);
    if (!($80)) {
     break L4;
    }
    $81 = $7;
    $82 = +HEAPF64[$81>>3];
    $83 = +HEAPF64[10623];
    $84 = $82 * $83;
    $85 = HEAP32[323056]|0;
    $86 = (+($85|0));
    $87 = +HEAPF64[10620];
    $88 = $86 + $87;
    $89 = $88 - 1.0;
    $90 = +HEAPF64[10622];
    $91 = $89 * $90;
    $92 = $84 - $91;
    $93 = $10;
    HEAPF64[$93>>3] = $92;
    $94 = $10;
    $95 = +HEAPF64[$94>>3];
    $96 = $8;
    $97 = HEAP32[323056]|0;
    $98 = (($96) + ($97<<3)|0);
    HEAPF64[$98>>3] = $95;
    $99 = +HEAPF64[10623];
    HEAPF64[10622] = $99;
    $100 = $10;
    $101 = +HEAPF64[$100>>3];
    HEAPF64[10623] = $101;
    $102 = HEAP32[323056]|0;
    $103 = (($102) + 1)|0;
    HEAP32[323056] = $103;
   }
  } else {
   $104 = $7;
   $105 = +HEAPF64[$104>>3];
   $106 = $105 <= 0.0;
   if ($106) {
    $107 = +HEAPF64[10618];
    $108 = $107 <= 5.7999999999999998;
    $109 = $7;
    if ($108) {
     (_dvsa_(84960,$109,84976)|0);
     $110 = +HEAPF64[10620];
     $111 = $110 - 1.0;
     HEAPF64[10624] = $111;
     $112 = $7;
     (_dvsa_(84992,$112,84984)|0);
    } else {
     (_dvla_(84960,$109,84976)|0);
     $113 = +HEAPF64[10620];
     $114 = $113 - 1.0;
     HEAPF64[10624] = $114;
     $115 = $7;
     (_dvla_(84992,$115,84984)|0);
    }
    $116 = +HEAPF64[10622];
    $117 = $8;
    HEAPF64[$117>>3] = $116;
    $118 = +HEAPF64[10623];
    $119 = $8;
    $120 = ((($119)) + 8|0);
    HEAPF64[$120>>3] = $118;
    $121 = HEAP32[323053]|0;
    $12 = $121;
    HEAP32[323056] = 2;
    while(1) {
     $122 = HEAP32[323056]|0;
     $123 = $12;
     $124 = ($122|0)<=($123|0);
     if (!($124)) {
      break L4;
     }
     $125 = $7;
     $126 = +HEAPF64[$125>>3];
     $127 = - $126;
     $128 = +HEAPF64[10623];
     $129 = $127 * $128;
     $130 = +HEAPF64[10622];
     $131 = $129 + $130;
     $132 = HEAP32[323056]|0;
     $133 = (+($132|0));
     $134 = $133 - 1.0;
     $135 = +HEAPF64[10620];
     $136 = $134 - $135;
     $137 = $131 / $136;
     HEAPF64[10625] = $137;
     $138 = +HEAPF64[10625];
     $139 = $8;
     $140 = HEAP32[323056]|0;
     $141 = (($139) + ($140<<3)|0);
     HEAPF64[$141>>3] = $138;
     $142 = +HEAPF64[10623];
     HEAPF64[10622] = $142;
     $143 = +HEAPF64[10625];
     HEAPF64[10623] = $143;
     $144 = HEAP32[323056]|0;
     $145 = (($144) + 1)|0;
     HEAP32[323056] = $145;
    }
   }
   $146 = $7;
   $147 = +HEAPF64[$146>>3];
   $148 = $147 <= 2.0;
   if ($148) {
    $149 = HEAP32[323052]|0;
    $150 = (+($149|0));
    $151 = +HEAPF64[10620];
    $152 = $150 + $151;
    HEAPF64[10626] = $152;
    $153 = HEAP32[323052]|0;
    $154 = ($153|0)==(0);
    if ($154) {
     $155 = +HEAPF64[10626];
     $156 = $155 + -1.0;
     HEAPF64[10626] = $156;
    }
    $157 = +HEAPF64[10626];
    $158 = - $157;
    $159 = (~~(($158)));
    HEAP32[323057] = $159;
    $160 = $7;
    (_dvsa_(85008,$160,85016)|0);
    $161 = +HEAPF64[10626];
    $162 = $161 + 1.0;
    HEAPF64[10624] = $162;
    $163 = $7;
    (_dvsa_(84992,$163,85024)|0);
    $164 = +HEAPF64[10627];
    $165 = $8;
    $166 = HEAP32[323057]|0;
    $167 = (($165) + ($166<<3)|0);
    HEAPF64[$167>>3] = $164;
    $168 = +HEAPF64[10628];
    $169 = $8;
    $170 = HEAP32[323057]|0;
    $171 = (($170) - 1)|0;
    $172 = (($169) + ($171<<3)|0);
    HEAPF64[$172>>3] = $168;
    $173 = HEAP32[323057]|0;
    $174 = (($173) - 2)|0;
    HEAP32[323056] = $174;
    while(1) {
     $175 = HEAP32[323056]|0;
     $176 = ($175|0)>=(0);
     if (!($176)) {
      break L4;
     }
     $177 = $7;
     $178 = +HEAPF64[$177>>3];
     $179 = +HEAPF64[10628];
     $180 = $178 * $179;
     $181 = HEAP32[323056]|0;
     $182 = (+($181|0));
     $183 = +HEAPF64[10620];
     $184 = $182 - $183;
     $185 = $184 + 1.0;
     $186 = +HEAPF64[10627];
     $187 = $185 * $186;
     $188 = $180 + $187;
     HEAPF64[10629] = $188;
     $189 = +HEAPF64[10629];
     $190 = $8;
     $191 = HEAP32[323056]|0;
     $192 = (($190) + ($191<<3)|0);
     HEAPF64[$192>>3] = $189;
     $193 = +HEAPF64[10628];
     HEAPF64[10627] = $193;
     $194 = +HEAPF64[10629];
     HEAPF64[10628] = $194;
     $195 = HEAP32[323056]|0;
     $196 = (($195) + -1)|0;
     HEAP32[323056] = $196;
    }
   }
   $197 = +HEAPF64[10618];
   $198 = $197 <= 5.8000001907348633;
   if ($198) {
    $199 = $7;
    (_dvsa_(84960,$199,84976)|0);
   }
   $200 = +HEAPF64[10618];
   $201 = $200 > 5.8000001907348633;
   if ($201) {
    $202 = $7;
    (_dvla_(84960,$202,84976)|0);
   }
   $203 = +HEAPF64[10622];
   $204 = $8;
   HEAPF64[$204>>3] = $203;
   $205 = HEAP32[323053]|0;
   $206 = (($205) + 100)|0;
   HEAP32[323058] = $206;
   HEAPF64[10627] = 0.0;
   HEAPF64[10628] = 1.0000000000000001E-30;
   $207 = HEAP32[323058]|0;
   HEAP32[323056] = $207;
   while(1) {
    $208 = HEAP32[323056]|0;
    $209 = ($208|0)>=(0);
    if (!($209)) {
     break;
    }
    $210 = $7;
    $211 = +HEAPF64[$210>>3];
    $212 = +HEAPF64[10628];
    $213 = $211 * $212;
    $214 = HEAP32[323056]|0;
    $215 = (+($214|0));
    $216 = +HEAPF64[10620];
    $217 = $215 - $216;
    $218 = $217 + 1.0;
    $219 = +HEAPF64[10627];
    $220 = $218 * $219;
    $221 = $213 + $220;
    HEAPF64[10629] = $221;
    $222 = HEAP32[323056]|0;
    $223 = HEAP32[323053]|0;
    $224 = ($222|0)<=($223|0);
    if ($224) {
     $225 = +HEAPF64[10629];
     $226 = $8;
     $227 = HEAP32[323056]|0;
     $228 = (($226) + ($227<<3)|0);
     HEAPF64[$228>>3] = $225;
    }
    $229 = +HEAPF64[10628];
    HEAPF64[10627] = $229;
    $230 = +HEAPF64[10629];
    HEAPF64[10628] = $230;
    $231 = HEAP32[323056]|0;
    $232 = (($231) + -1)|0;
    HEAP32[323056] = $232;
   }
   $233 = +HEAPF64[10622];
   $234 = +HEAPF64[10629];
   $235 = $233 / $234;
   HEAPF64[10630] = $235;
   $236 = HEAP32[323053]|0;
   $12 = $236;
   HEAP32[323056] = 0;
   while(1) {
    $237 = HEAP32[323056]|0;
    $238 = $12;
    $239 = ($237|0)<=($238|0);
    if (!($239)) {
     break L4;
    }
    $240 = +HEAPF64[10630];
    $241 = $8;
    $242 = HEAP32[323056]|0;
    $243 = (($241) + ($242<<3)|0);
    $244 = +HEAPF64[$243>>3];
    $245 = $240 * $244;
    $246 = $8;
    $247 = HEAP32[323056]|0;
    $248 = (($246) + ($247<<3)|0);
    HEAPF64[$248>>3] = $245;
    $249 = HEAP32[323056]|0;
    $250 = (($249) + 1)|0;
    HEAP32[323056] = $250;
   }
  }
 } while(0);
 $251 = HEAP32[323053]|0;
 $252 = (($251) - 1)|0;
 $12 = $252;
 HEAP32[323056] = 0;
 while(1) {
  $253 = HEAP32[323056]|0;
  $254 = $12;
  $255 = ($253|0)<=($254|0);
  if (!($255)) {
   break;
  }
  $256 = +HEAPF64[10620];
  $257 = (+Math_abs((+$256)));
  $258 = HEAP32[323056]|0;
  $259 = (+($258|0));
  $260 = $257 + $259;
  HEAPF64[10624] = $260;
  $261 = $6;
  $262 = +HEAPF64[$261>>3];
  $263 = $262 >= 0.0;
  $264 = $7;
  $265 = +HEAPF64[$264>>3];
  if ($263) {
   $266 = $265 * 0.5;
   $267 = $8;
   $268 = HEAP32[323056]|0;
   $269 = (($267) + ($268<<3)|0);
   $270 = +HEAPF64[$269>>3];
   $271 = $266 * $270;
   $272 = $8;
   $273 = HEAP32[323056]|0;
   $274 = (($273) + 1)|0;
   $275 = (($272) + ($274<<3)|0);
   $276 = +HEAPF64[$275>>3];
   $277 = $271 - $276;
   $278 = $9;
   $279 = HEAP32[323056]|0;
   $280 = (($278) + ($279<<3)|0);
   HEAPF64[$280>>3] = $277;
  } else {
   $281 = $265 * -0.5;
   $282 = $8;
   $283 = HEAP32[323056]|0;
   $284 = (($282) + ($283<<3)|0);
   $285 = +HEAPF64[$284>>3];
   $286 = $281 * $285;
   $287 = +HEAPF64[10624];
   $288 = $8;
   $289 = HEAP32[323056]|0;
   $290 = (($289) + 1)|0;
   $291 = (($288) + ($290<<3)|0);
   $292 = +HEAPF64[$291>>3];
   $293 = $287 * $292;
   $294 = $286 - $293;
   $295 = $9;
   $296 = HEAP32[323056]|0;
   $297 = (($295) + ($296<<3)|0);
   HEAPF64[$297>>3] = $294;
  }
  $298 = HEAP32[323056]|0;
  $299 = (($298) + 1)|0;
  HEAP32[323056] = $299;
 }
 $300 = $8;
 $301 = HEAP32[323053]|0;
 $302 = (($301) - 1)|0;
 $303 = (($300) + ($302<<3)|0);
 $304 = +HEAPF64[$303>>3];
 $305 = $10;
 HEAPF64[$305>>3] = $304;
 $306 = $9;
 $307 = HEAP32[323053]|0;
 $308 = (($307) - 1)|0;
 $309 = (($306) + ($308<<3)|0);
 $310 = +HEAPF64[$309>>3];
 $311 = $11;
 HEAPF64[$311>>3] = $310;
 $312 = +HEAPF64[10619];
 $313 = $6;
 HEAPF64[$313>>3] = $312;
 STACKTOP = sp;return 0;
}
function _d_sign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 >= 0.0;
 $7 = $2;
 $8 = - $7;
 $9 = $6 ? $7 : $8;
 $4 = $9;
 $10 = $3;
 $11 = $10 >= 0.0;
 $12 = $4;
 $13 = - $12;
 $14 = $11 ? $12 : $13;
 STACKTOP = sp;return (+$14);
}
function _dvsa_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF64[10648] = 1.0000000000000001E-15;
 HEAPF64[10649] = 3.1415926535897931;
 $7 = (+Math_sqrt(2.0));
 HEAPF64[10650] = $7;
 $8 = $4;
 $9 = +HEAPF64[$8>>3];
 $10 = $9 * -0.25;
 $11 = $4;
 $12 = +HEAPF64[$11>>3];
 $13 = $10 * $12;
 $14 = (+Math_exp((+$13)));
 HEAPF64[10651] = $14;
 $15 = $3;
 $16 = +HEAPF64[$15>>3];
 $17 = 1.0 - $16;
 $18 = $17 * 0.5;
 HEAPF64[10652] = $18;
 $19 = $3;
 $20 = +HEAPF64[$19>>3];
 $21 = $20 == 0.0;
 if ($21) {
  $22 = +HEAPF64[10651];
  $23 = $5;
  HEAPF64[$23>>3] = $22;
  STACKTOP = sp;return 0;
 }
 $24 = $4;
 $25 = +HEAPF64[$24>>3];
 $26 = $25 == 0.0;
 if ($26) {
  $27 = +HEAPF64[10652];
  $28 = $27 <= 0.0;
  if ($28) {
   $29 = +HEAPF64[10652];
   $30 = +HEAPF64[10652];
   $31 = (~~(($30)));
   $32 = (+($31|0));
   $33 = $29 == $32;
   if ($33) {
    $34 = $5;
    HEAPF64[$34>>3] = 0.0;
    STACKTOP = sp;return 0;
   }
  }
  (_AT_gamma_(85216,85224)|0);
  $35 = $3;
  $36 = +HEAPF64[$35>>3];
  $37 = $36 * -0.5;
  HEAPF64[$6>>3] = $37;
  $38 = +HEAPF64[10649];
  $39 = (+Math_sqrt((+$38)));
  $40 = +HEAPF64[$6>>3];
  $41 = (+Math_pow(2.0,(+$40)));
  $42 = +HEAPF64[10653];
  $43 = $41 * $42;
  $44 = $39 / $43;
  $45 = $5;
  HEAPF64[$45>>3] = $44;
  STACKTOP = sp;return 0;
 } else {
  $46 = $3;
  $47 = +HEAPF64[$46>>3];
  $48 = - $47;
  HEAPF64[$6>>3] = $48;
  (_AT_gamma_($6,85232)|0);
  $49 = $3;
  $50 = +HEAPF64[$49>>3];
  $51 = $50 * -0.5;
  $52 = $51 - 1.0;
  HEAPF64[$6>>3] = $52;
  $53 = +HEAPF64[$6>>3];
  $54 = (+Math_pow(2.0,(+$53)));
  $55 = +HEAPF64[10651];
  $56 = $54 * $55;
  $57 = +HEAPF64[10654];
  $58 = $56 / $57;
  HEAPF64[10655] = $58;
  $59 = $3;
  $60 = +HEAPF64[$59>>3];
  $61 = $60 * -0.5;
  HEAPF64[10656] = $61;
  (_AT_gamma_(85248,85256)|0);
  $62 = +HEAPF64[10657];
  $63 = $5;
  HEAPF64[$63>>3] = $62;
  HEAPF64[10658] = 1.0;
  HEAP32[323061] = 1;
  while(1) {
   $64 = HEAP32[323061]|0;
   $65 = ($64|0)<=(250);
   if (!($65)) {
    break;
   }
   $66 = HEAP32[323061]|0;
   $67 = (+($66|0));
   $68 = $3;
   $69 = +HEAPF64[$68>>3];
   $70 = $67 - $69;
   $71 = $70 * 0.5;
   HEAPF64[10659] = $71;
   (_AT_gamma_(85272,85280)|0);
   $72 = +HEAPF64[10658];
   $73 = - $72;
   $74 = +HEAPF64[10650];
   $75 = $73 * $74;
   $76 = $4;
   $77 = +HEAPF64[$76>>3];
   $78 = $75 * $77;
   $79 = HEAP32[323061]|0;
   $80 = (+($79|0));
   $81 = $78 / $80;
   HEAPF64[10658] = $81;
   $82 = +HEAPF64[10660];
   $83 = +HEAPF64[10658];
   $84 = $82 * $83;
   HEAPF64[10661] = $84;
   $85 = +HEAPF64[10661];
   $86 = $5;
   $87 = +HEAPF64[$86>>3];
   $88 = $87 + $85;
   HEAPF64[$86>>3] = $88;
   $89 = +HEAPF64[10661];
   $90 = (+Math_abs((+$89)));
   $91 = $5;
   $92 = +HEAPF64[$91>>3];
   $93 = (+Math_abs((+$92)));
   $94 = +HEAPF64[10648];
   $95 = $93 * $94;
   $96 = $90 < $95;
   if ($96) {
    break;
   }
   $97 = HEAP32[323061]|0;
   $98 = (($97) + 1)|0;
   HEAP32[323061] = $98;
  }
  $99 = +HEAPF64[10655];
  $100 = $5;
  $101 = +HEAPF64[$100>>3];
  $102 = $99 * $101;
  $103 = $5;
  HEAPF64[$103>>3] = $102;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _dvla_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF64[10631] = 3.1415926535897931;
 HEAPF64[10632] = 9.9999999999999998E-13;
 $7 = $4;
 $8 = +HEAPF64[$7>>3];
 $9 = $8 * -0.25;
 $10 = $4;
 $11 = +HEAPF64[$10>>3];
 $12 = $9 * $11;
 $13 = (+Math_exp((+$12)));
 HEAPF64[10633] = $13;
 $14 = $4;
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_abs((+$15)));
 HEAPF64[$6>>3] = $16;
 $17 = +HEAPF64[$6>>3];
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = (+Math_pow((+$17),(+$19)));
 $21 = +HEAPF64[10633];
 $22 = $20 * $21;
 HEAPF64[10634] = $22;
 HEAPF64[10635] = 1.0;
 $23 = $5;
 HEAPF64[$23>>3] = 1.0;
 HEAP32[323059] = 1;
 while(1) {
  $24 = HEAP32[323059]|0;
  $25 = ($24|0)<=(16);
  if (!($25)) {
   break;
  }
  $26 = +HEAPF64[10635];
  $27 = $26 * -0.5;
  $28 = HEAP32[323059]|0;
  $29 = (+($28|0));
  $30 = $29 * 2.0;
  $31 = $30;
  $32 = $3;
  $33 = +HEAPF64[$32>>3];
  $34 = $31 - $33;
  $35 = $34 - 1.0;
  $36 = $27 * $35;
  $37 = HEAP32[323059]|0;
  $38 = (+($37|0));
  $39 = $38 * 2.0;
  $40 = $39;
  $41 = $3;
  $42 = +HEAPF64[$41>>3];
  $43 = $40 - $42;
  $44 = $43 - 2.0;
  $45 = $36 * $44;
  $46 = HEAP32[323059]|0;
  $47 = (+($46|0));
  $48 = $4;
  $49 = +HEAPF64[$48>>3];
  $50 = $47 * $49;
  $51 = $4;
  $52 = +HEAPF64[$51>>3];
  $53 = $50 * $52;
  $54 = $45 / $53;
  HEAPF64[10635] = $54;
  $55 = +HEAPF64[10635];
  $56 = $5;
  $57 = +HEAPF64[$56>>3];
  $58 = $57 + $55;
  HEAPF64[$56>>3] = $58;
  $59 = +HEAPF64[10635];
  $60 = $5;
  $61 = +HEAPF64[$60>>3];
  $62 = $59 / $61;
  HEAPF64[$6>>3] = $62;
  $63 = +HEAPF64[$6>>3];
  $64 = (+Math_abs((+$63)));
  $65 = +HEAPF64[10632];
  $66 = $64 < $65;
  if ($66) {
   break;
  }
  $67 = HEAP32[323059]|0;
  $68 = (($67) + 1)|0;
  HEAP32[323059] = $68;
 }
 $69 = +HEAPF64[10634];
 $70 = $5;
 $71 = +HEAPF64[$70>>3];
 $72 = $69 * $71;
 $73 = $5;
 HEAPF64[$73>>3] = $72;
 $74 = $4;
 $75 = +HEAPF64[$74>>3];
 $76 = $75 < 0.0;
 if (!($76)) {
  STACKTOP = sp;return 0;
 }
 $77 = $4;
 $78 = +HEAPF64[$77>>3];
 $79 = - $78;
 HEAPF64[10636] = $79;
 $80 = $3;
 (_vvla_($80,85088,85096)|0);
 $81 = $3;
 $82 = +HEAPF64[$81>>3];
 $83 = - $82;
 HEAPF64[$6>>3] = $83;
 (_AT_gamma_($6,85104)|0);
 $84 = +HEAPF64[10631];
 $85 = +HEAPF64[10637];
 $86 = $84 * $85;
 $87 = +HEAPF64[10638];
 $88 = $86 / $87;
 $89 = +HEAPF64[10631];
 $90 = $3;
 $91 = +HEAPF64[$90>>3];
 $92 = $89 * $91;
 $93 = (+Math_cos((+$92)));
 $94 = $5;
 $95 = +HEAPF64[$94>>3];
 $96 = $93 * $95;
 $97 = $88 + $96;
 $98 = $5;
 HEAPF64[$98>>3] = $97;
 STACKTOP = sp;return 0;
}
function _vvla_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF64[10639] = 3.1415926535897931;
 HEAPF64[10640] = 9.9999999999999998E-13;
 $8 = $4;
 $9 = +HEAPF64[$8>>3];
 $10 = $9 * 0.25;
 $11 = $4;
 $12 = +HEAPF64[$11>>3];
 $13 = $10 * $12;
 $14 = (+Math_exp((+$13)));
 HEAPF64[10641] = $14;
 $15 = $4;
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_abs((+$16)));
 HEAPF64[$6>>3] = $17;
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = - $19;
 $21 = $20 - 1.0;
 $7 = $21;
 $22 = +HEAPF64[$6>>3];
 $23 = $7;
 $24 = (+Math_pow((+$22),(+$23)));
 $25 = +HEAPF64[10639];
 $26 = 2.0 / $25;
 $27 = (+Math_sqrt((+$26)));
 $28 = $24 * $27;
 $29 = +HEAPF64[10641];
 $30 = $28 * $29;
 HEAPF64[10642] = $30;
 HEAPF64[10643] = 1.0;
 $31 = $5;
 HEAPF64[$31>>3] = 1.0;
 HEAP32[323060] = 1;
 while(1) {
  $32 = HEAP32[323060]|0;
  $33 = ($32|0)<=(18);
  if (!($33)) {
   break;
  }
  $34 = +HEAPF64[10643];
  $35 = $34 * 0.5;
  $36 = HEAP32[323060]|0;
  $37 = (+($36|0));
  $38 = $37 * 2.0;
  $39 = $38;
  $40 = $3;
  $41 = +HEAPF64[$40>>3];
  $42 = $39 + $41;
  $43 = $42 - 1.0;
  $44 = $35 * $43;
  $45 = HEAP32[323060]|0;
  $46 = (+($45|0));
  $47 = $46 * 2.0;
  $48 = $47;
  $49 = $3;
  $50 = +HEAPF64[$49>>3];
  $51 = $48 + $50;
  $52 = $44 * $51;
  $53 = HEAP32[323060]|0;
  $54 = (+($53|0));
  $55 = $4;
  $56 = +HEAPF64[$55>>3];
  $57 = $54 * $56;
  $58 = $4;
  $59 = +HEAPF64[$58>>3];
  $60 = $57 * $59;
  $61 = $52 / $60;
  HEAPF64[10643] = $61;
  $62 = +HEAPF64[10643];
  $63 = $5;
  $64 = +HEAPF64[$63>>3];
  $65 = $64 + $62;
  HEAPF64[$63>>3] = $65;
  $66 = +HEAPF64[10643];
  $67 = $5;
  $68 = +HEAPF64[$67>>3];
  $69 = $66 / $68;
  HEAPF64[$6>>3] = $69;
  $70 = +HEAPF64[$6>>3];
  $71 = (+Math_abs((+$70)));
  $72 = +HEAPF64[10640];
  $73 = $71 < $72;
  if ($73) {
   break;
  }
  $74 = HEAP32[323060]|0;
  $75 = (($74) + 1)|0;
  HEAP32[323060] = $75;
 }
 $76 = +HEAPF64[10642];
 $77 = $5;
 $78 = +HEAPF64[$77>>3];
 $79 = $76 * $78;
 $80 = $5;
 HEAPF64[$80>>3] = $79;
 $81 = $4;
 $82 = +HEAPF64[$81>>3];
 $83 = $82 < 0.0;
 if (!($83)) {
  STACKTOP = sp;return 0;
 }
 $84 = $4;
 $85 = +HEAPF64[$84>>3];
 $86 = - $85;
 HEAPF64[10644] = $86;
 $87 = $3;
 (_dvla_($87,85152,85160)|0);
 $88 = $3;
 $89 = +HEAPF64[$88>>3];
 $90 = - $89;
 HEAPF64[$6>>3] = $90;
 (_AT_gamma_($6,85168)|0);
 $91 = +HEAPF64[10639];
 $92 = $3;
 $93 = +HEAPF64[$92>>3];
 $94 = $91 * $93;
 $95 = (+Math_sin((+$94)));
 $96 = +HEAPF64[10639];
 $97 = $3;
 $98 = +HEAPF64[$97>>3];
 $99 = $96 * $98;
 $100 = (+Math_sin((+$99)));
 $101 = $95 * $100;
 HEAPF64[10647] = $101;
 $102 = +HEAPF64[10647];
 $103 = +HEAPF64[10646];
 $104 = $102 * $103;
 $105 = +HEAPF64[10639];
 $106 = $104 / $105;
 $107 = +HEAPF64[10645];
 $108 = $106 * $107;
 $109 = +HEAPF64[10639];
 $110 = $3;
 $111 = +HEAPF64[$110>>3];
 $112 = $109 * $111;
 $113 = (+Math_cos((+$112)));
 $114 = $5;
 $115 = +HEAPF64[$114>>3];
 $116 = $113 * $115;
 $117 = $108 - $116;
 $118 = $5;
 HEAPF64[$118>>3] = $117;
 STACKTOP = sp;return 0;
}
function _nrerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[17818]|0;
 (_fprintf($2,78157,$vararg_buffer)|0);
 $3 = HEAP32[17818]|0;
 $4 = $1;
 HEAP32[$vararg_buffer1>>2] = $4;
 (_fprintf($3,78194,$vararg_buffer1)|0);
 $5 = HEAP32[17818]|0;
 (_fprintf($5,78198,$vararg_buffer3)|0);
 _exit(1);
 // unreachable;
}
function _zriddr($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0;
 var $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0;
 var $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $6;
 $23 = $8;
 $24 = $7;
 $25 = (+FUNCTION_TABLE_ddi[$22 & 31]($23,$24));
 $14 = $25;
 $26 = $6;
 $27 = $9;
 $28 = $7;
 $29 = (+FUNCTION_TABLE_ddi[$26 & 31]($27,$28));
 $13 = $29;
 $30 = $14;
 $31 = $30 > 0.0;
 $32 = $13;
 $33 = $32 < 0.0;
 $or$cond = $31 & $33;
 do {
  if ($or$cond) {
   label = 3;
  } else {
   $34 = $14;
   $35 = $34 < 0.0;
   $36 = $13;
   $37 = $36 > 0.0;
   $or$cond3 = $35 & $37;
   if ($or$cond3) {
    label = 3;
   } else {
    $131 = $14;
    $132 = $131 == 0.0;
    if ($132) {
     $133 = $8;
     $5 = $133;
     $137 = $5;
     STACKTOP = sp;return (+$137);
    }
    $134 = $13;
    $135 = $134 == 0.0;
    if (!($135)) {
     _nrerror(78276);
     break;
    }
    $136 = $9;
    $5 = $136;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
  }
 } while(0);
 do {
  if ((label|0) == 3) {
   $38 = $8;
   $19 = $38;
   $39 = $9;
   $18 = $39;
   $12 = -1.11E+30;
   $11 = 1;
   while(1) {
    $40 = $11;
    $41 = ($40|0)<=(60);
    if (!($41)) {
     label = 21;
     break;
    }
    $42 = $19;
    $43 = $18;
    $44 = $42 + $43;
    $45 = 0.5 * $44;
    $20 = $45;
    $46 = $6;
    $47 = $20;
    $48 = $7;
    $49 = (+FUNCTION_TABLE_ddi[$46 & 31]($47,$48));
    $15 = $49;
    $50 = $15;
    $51 = $15;
    $52 = $50 * $51;
    $53 = $14;
    $54 = $13;
    $55 = $53 * $54;
    $56 = $52 - $55;
    $57 = (+Math_sqrt((+$56)));
    $17 = $57;
    $58 = $17;
    $59 = $58 == 0.0;
    if ($59) {
     label = 6;
     break;
    }
    $61 = $20;
    $62 = $20;
    $63 = $19;
    $64 = $62 - $63;
    $65 = $14;
    $66 = $13;
    $67 = $65 >= $66;
    $68 = $67 ? 1.0 : -1.0;
    $69 = $15;
    $70 = $68 * $69;
    $71 = $17;
    $72 = $70 / $71;
    $73 = $64 * $72;
    $74 = $61 + $73;
    $21 = $74;
    $75 = $21;
    $76 = $12;
    $77 = $75 - $76;
    $78 = (+Math_abs((+$77)));
    $79 = $10;
    $80 = $78 <= $79;
    if ($80) {
     label = 8;
     break;
    }
    $82 = $21;
    $12 = $82;
    $83 = $6;
    $84 = $12;
    $85 = $7;
    $86 = (+FUNCTION_TABLE_ddi[$83 & 31]($84,$85));
    $16 = $86;
    $87 = $16;
    $88 = $87 == 0.0;
    if ($88) {
     label = 10;
     break;
    }
    $90 = $16;
    $91 = $90 >= 0.0;
    $92 = $15;
    $93 = (+Math_abs((+$92)));
    $94 = - $93;
    $95 = $91 ? $93 : $94;
    $96 = $15;
    $97 = $95 != $96;
    do {
     if ($97) {
      $98 = $20;
      $19 = $98;
      $99 = $15;
      $14 = $99;
      $100 = $12;
      $18 = $100;
      $101 = $16;
      $13 = $101;
     } else {
      $102 = $16;
      $103 = $102 >= 0.0;
      $104 = $14;
      $105 = (+Math_abs((+$104)));
      $106 = - $105;
      $107 = $103 ? $105 : $106;
      $108 = $14;
      $109 = $107 != $108;
      if ($109) {
       $110 = $12;
       $18 = $110;
       $111 = $16;
       $13 = $111;
       break;
      }
      $112 = $16;
      $113 = $112 >= 0.0;
      $114 = $13;
      $115 = (+Math_abs((+$114)));
      $116 = - $115;
      $117 = $113 ? $115 : $116;
      $118 = $13;
      $119 = $117 != $118;
      if ($119) {
       $120 = $12;
       $19 = $120;
       $121 = $16;
       $14 = $121;
       break;
      } else {
       _nrerror(78227);
       break;
      }
     }
    } while(0);
    $122 = $18;
    $123 = $19;
    $124 = $122 - $123;
    $125 = (+Math_abs((+$124)));
    $126 = $10;
    $127 = $125 <= $126;
    if ($127) {
     label = 19;
     break;
    }
    $129 = $11;
    $130 = (($129) + 1)|0;
    $11 = $130;
   }
   if ((label|0) == 6) {
    $60 = $12;
    $5 = $60;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
   else if ((label|0) == 8) {
    $81 = $12;
    $5 = $81;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
   else if ((label|0) == 10) {
    $89 = $12;
    $5 = $89;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
   else if ((label|0) == 19) {
    $128 = $12;
    $5 = $128;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
   else if ((label|0) == 21) {
    _nrerror(78243);
    break;
   }
  }
 } while(0);
 $5 = 0.0;
 $137 = $5;
 STACKTOP = sp;return (+$137);
}
function _are_elements_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $6;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $9;
  $15 = $10;
  $16 = (($14) + ($15<<2)|0);
  HEAP32[$16>>2] = 0;
  while(1) {
   $17 = $7;
   $18 = $9;
   $19 = $10;
   $20 = (($18) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($17) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $5;
   $25 = $10;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($23|0)!=($27|0);
   if ($28) {
    $29 = $9;
    $30 = $10;
    $31 = (($29) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $8;
    $34 = ($32|0)<($33|0);
    $47 = $34;
   } else {
    $47 = 0;
   }
   $35 = $9;
   $36 = $10;
   $37 = (($35) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   if (!($47)) {
    break;
   }
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
  }
  $40 = $8;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = $9;
   $43 = $10;
   $44 = (($42) + ($43<<2)|0);
   HEAP32[$44>>2] = -1;
  }
  $45 = $10;
  $46 = (($45) + 1)|0;
  $10 = $46;
 }
 STACKTOP = sp;return;
}
function _find_elements_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $6;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $9;
  $15 = $10;
  $16 = (($14) + ($15<<2)|0);
  HEAP32[$16>>2] = 0;
  while(1) {
   $17 = $7;
   $18 = $9;
   $19 = $10;
   $20 = (($18) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($17) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $5;
   $25 = $10;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($23|0)!=($27|0);
   if ($28) {
    $29 = $9;
    $30 = $10;
    $31 = (($29) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $8;
    $34 = ($32|0)<($33|0);
    $47 = $34;
   } else {
    $47 = 0;
   }
   $35 = $9;
   $36 = $10;
   $37 = (($35) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   if (!($47)) {
    break;
   }
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
  }
  $40 = $8;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = $9;
   $43 = $10;
   $44 = (($42) + ($43<<2)|0);
   HEAP32[$44>>2] = -1;
  }
  $45 = $10;
  $46 = (($45) + 1)|0;
  $10 = $46;
 }
 STACKTOP = sp;return;
}
function _find_elements_char($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $6;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $9;
  $15 = $10;
  $16 = (($14) + ($15<<2)|0);
  HEAP32[$16>>2] = 0;
  while(1) {
   $17 = $7;
   $18 = $9;
   $19 = $10;
   $20 = (($18) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($17) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $5;
   $25 = $10;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_strcmp($23,$27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $9;
   $31 = $10;
   $32 = (($30) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[$32>>2] = $34;
   $35 = $9;
   $36 = $10;
   $37 = (($35) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $8;
   $40 = ($38|0)==($39|0);
   if ($40) {
    label = 6;
    break;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $41 = $9;
   $42 = $10;
   $43 = (($41) + ($42<<2)|0);
   HEAP32[$43>>2] = -1;
  }
  $44 = $10;
  $45 = (($44) + 1)|0;
  $10 = $45;
 }
 STACKTOP = sp;return;
}
function _is_element_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $5;
  $15 = $8;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($13|0)==($17|0);
  $19 = $7;
  $20 = $8;
  $21 = (($19) + ($20)|0);
  if ($18) {
   HEAP8[$21>>0] = 1;
   $22 = $9;
   $23 = (($22) + 1)|0;
   $9 = $23;
  } else {
   HEAP8[$21>>0] = 0;
  }
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 $26 = $9;
 STACKTOP = sp;return ($26|0);
}
function _AT_sum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = 0.0;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = $4;
  $11 = (($9) + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $5;
  $14 = $13 + $12;
  $5 = $14;
  $15 = $4;
  $16 = (($15) + 1)|0;
  $4 = $16;
 }
 $17 = $5;
 STACKTOP = sp;return (+$17);
}
function _AT_normalize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (+_AT_sum($8,$9));
 $7 = $10;
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = $3;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = $6;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $17 / $18;
  $20 = $5;
  $21 = $6;
  $22 = (($20) + ($21<<3)|0);
  HEAPF64[$22>>3] = $19;
  $23 = $6;
  $24 = (($23) + 1)|0;
  $6 = $24;
 }
 STACKTOP = sp;return;
}
function _locate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $11 = $4;
 $12 = (($11) + 1)|0;
 $6 = $12;
 $13 = $3;
 $14 = $4;
 $15 = (($14) - 1)|0;
 $16 = (($13) + ($15<<3)|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = $17 >= $19;
 $21 = $20&1;
 $10 = $21;
 while(1) {
  $22 = $6;
  $23 = $8;
  $24 = (($22) - ($23))|0;
  $25 = ($24|0)>(1);
  if (!($25)) {
   break;
  }
  $26 = $6;
  $27 = $8;
  $28 = (($26) + ($27))|0;
  $29 = $28 >> 1;
  $7 = $29;
  $30 = $5;
  $31 = $3;
  $32 = $7;
  $33 = (($32) - 1)|0;
  $34 = (($31) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $30 >= $35;
  $37 = $36&1;
  $38 = $10;
  $39 = ($37|0)==($38|0);
  $40 = $7;
  if ($39) {
   $8 = $40;
  } else {
   $6 = $40;
  }
 }
 $41 = $5;
 $42 = $3;
 $43 = +HEAPF64[$42>>3];
 $44 = $41 == $43;
 if ($44) {
  $9 = 1;
  $55 = $9;
  STACKTOP = sp;return ($55|0);
 }
 $45 = $5;
 $46 = $3;
 $47 = $4;
 $48 = (($47) - 1)|0;
 $49 = (($46) + ($48<<3)|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $45 == $50;
 if ($51) {
  $52 = $4;
  $53 = (($52) - 1)|0;
  $9 = $53;
  $55 = $9;
  STACKTOP = sp;return ($55|0);
 } else {
  $54 = $8;
  $9 = $54;
  $55 = $9;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _locate_index_in_2d_table($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $9;
 $16 = ($15|0)>=(0);
 if (!($16)) {
  ___assert_fail((78309|0),(78089|0),643,(78327|0));
  // unreachable;
 }
 $17 = $9;
 $18 = ($17|0)<=(2);
 if (!($18)) {
  ___assert_fail((78352|0),(78089|0),644,(78327|0));
  // unreachable;
 }
 $19 = $6;
 $20 = ($19|0)>=(0);
 if (!($20)) {
  ___assert_fail((78370|0),(78089|0),645,(78327|0));
  // unreachable;
 }
 $21 = $7;
 $22 = $6;
 $23 = ($21|0)>=($22|0);
 if (!($23)) {
  ___assert_fail((78388|0),(78089|0),646,(78327|0));
  // unreachable;
 }
 $24 = $6;
 $12 = $24;
 $25 = $7;
 $10 = $25;
 $26 = $5;
 $27 = $7;
 $28 = (($26) + ($27<<4)|0);
 $29 = $9;
 $30 = (($28) + ($29<<3)|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $5;
 $33 = $6;
 $34 = (($32) + ($33<<4)|0);
 $35 = $9;
 $36 = (($34) + ($35<<3)|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $31 >= $37;
 $39 = $38&1;
 $14 = $39;
 while(1) {
  $40 = $10;
  $41 = $12;
  $42 = (($40) - ($41))|0;
  $43 = ($42|0)>(1);
  if (!($43)) {
   break;
  }
  $44 = $10;
  $45 = $12;
  $46 = (($44) + ($45))|0;
  $47 = $46 >> 1;
  $11 = $47;
  $48 = $8;
  $49 = $5;
  $50 = $11;
  $51 = (($50) - 1)|0;
  $52 = (($49) + ($51<<4)|0);
  $53 = $9;
  $54 = (($52) + ($53<<3)|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $48 >= $55;
  $57 = $56&1;
  $58 = $14;
  $59 = ($57|0)==($58|0);
  $60 = $11;
  if ($59) {
   $12 = $60;
  } else {
   $10 = $60;
  }
 }
 $61 = $8;
 $62 = $5;
 $63 = $6;
 $64 = (($62) + ($63<<4)|0);
 $65 = $9;
 $66 = (($64) + ($65<<3)|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $61 == $67;
 if ($68) {
  $69 = $6;
  $70 = (($69) + 1)|0;
  $13 = $70;
  $81 = $13;
  STACKTOP = sp;return ($81|0);
 }
 $71 = $8;
 $72 = $5;
 $73 = $7;
 $74 = (($72) + ($73<<4)|0);
 $75 = $9;
 $76 = (($74) + ($75<<3)|0);
 $77 = +HEAPF64[$76>>3];
 $78 = $71 == $77;
 if ($78) {
  $79 = $7;
  $13 = $79;
  $81 = $13;
  STACKTOP = sp;return ($81|0);
 } else {
  $80 = $12;
  $13 = $80;
  $81 = $13;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _AT_get_interpolated_y_from_input_table($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $6;
 $11 = $7;
 $12 = (_locate($9,$10,$11)|0);
 $8 = $12;
 $13 = $8;
 $14 = ($13|0)>=(0);
 if (!($14)) {
  ___assert_fail((78418|0),(78089|0),672,(78425|0));
  // unreachable;
 }
 $15 = $8;
 $16 = $6;
 $17 = ($15|0)<($16|0);
 if ($17) {
  $18 = $4;
  $19 = $8;
  $20 = (($19) - 1)|0;
  $21 = (($18) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $5;
  $24 = $8;
  $25 = (($24) - 1)|0;
  $26 = (($23) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $4;
  $29 = $8;
  $30 = (($28) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $5;
  $33 = $8;
  $34 = (($32) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $7;
  $37 = (+_AT_get_interpolated_y_from_interval($22,$27,$31,$35,$36));
  STACKTOP = sp;return (+$37);
 } else {
  ___assert_fail((78464|0),(78089|0),673,(78425|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_interpolated_y_from_interval($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $8;
 $12 = $6;
 $13 = $11 > $12;
 $14 = $10;
 $15 = $6;
 do {
  if ($13) {
   $16 = $14 >= $15;
   if (!($16)) {
    ___assert_fail((78489|0),(78089|0),709,(78514|0));
    // unreachable;
   }
   $17 = $10;
   $18 = $8;
   $19 = $17 <= $18;
   if ($19) {
    break;
   } else {
    ___assert_fail((78550|0),(78089|0),710,(78514|0));
    // unreachable;
   }
  } else {
   $20 = $14 <= $15;
   if (!($20)) {
    ___assert_fail((78576|0),(78089|0),712,(78514|0));
    // unreachable;
   }
   $21 = $10;
   $22 = $8;
   $23 = $21 >= $22;
   if ($23) {
    break;
   } else {
    ___assert_fail((78601|0),(78089|0),713,(78514|0));
    // unreachable;
   }
  }
 } while(0);
 $24 = $8;
 $25 = $6;
 $26 = $24 == $25;
 $27 = $7;
 if ($26) {
  $5 = $27;
  $40 = $5;
  STACKTOP = sp;return (+$40);
 } else {
  $28 = $9;
  $29 = $7;
  $30 = $28 - $29;
  $31 = $10;
  $32 = $6;
  $33 = $31 - $32;
  $34 = $8;
  $35 = $6;
  $36 = $34 - $35;
  $37 = $33 / $36;
  $38 = $30 * $37;
  $39 = $27 + $38;
  $5 = $39;
  $40 = $5;
  STACKTOP = sp;return (+$40);
 }
 return +(0.0);
}
function _AT_get_interpolated_y_from_input_2d_table($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = $5;
 $11 = (_locate_index_in_2d_table($7,0,$9,$10,0)|0);
 $6 = $11;
 $12 = $6;
 $13 = ($12|0)>=(0);
 if (!($13)) {
  ___assert_fail((78418|0),(78089|0),682,(78627|0));
  // unreachable;
 }
 $14 = $6;
 $15 = $4;
 $16 = ($14|0)<($15|0);
 if ($16) {
  $17 = $3;
  $18 = $6;
  $19 = (($18) - 1)|0;
  $20 = (($17) + ($19<<4)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $3;
  $23 = $6;
  $24 = (($23) - 1)|0;
  $25 = (($22) + ($24<<4)|0);
  $26 = ((($25)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $3;
  $29 = $6;
  $30 = (($28) + ($29<<4)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $3;
  $33 = $6;
  $34 = (($32) + ($33<<4)|0);
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $5;
  $38 = (+_AT_get_interpolated_y_from_interval($21,$27,$31,$36,$37));
  STACKTOP = sp;return (+$38);
 } else {
  ___assert_fail((78464|0),(78089|0),683,(78627|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_interpolated_x_from_input_2d_table($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = (_locate_index_in_2d_table($10,$11,$12,$13,1)|0);
 $9 = $14;
 $15 = $9;
 $16 = $6;
 $17 = ($15|0)>=($16|0);
 if (!($17)) {
  ___assert_fail((78669|0),(78089|0),692,(78687|0));
  // unreachable;
 }
 $18 = $9;
 $19 = $7;
 $20 = ($18|0)<=($19|0);
 if (!($20)) {
  ___assert_fail((78729|0),(78089|0),693,(78687|0));
  // unreachable;
 }
 $21 = $5;
 $22 = $9;
 $23 = (($21) + ($22<<4)|0);
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $5;
 $27 = $9;
 $28 = (($27) - 1)|0;
 $29 = (($26) + ($28<<4)|0);
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $25 > $31;
 $33 = $5;
 $34 = $9;
 if ($32) {
  $35 = (($34) - 1)|0;
  $36 = (($33) + ($35<<4)|0);
  $37 = ((($36)) + 8|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $5;
  $40 = $9;
  $41 = (($40) - 1)|0;
  $42 = (($39) + ($41<<4)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $5;
  $45 = $9;
  $46 = (($44) + ($45<<4)|0);
  $47 = ((($46)) + 8|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $5;
  $50 = $9;
  $51 = (($49) + ($50<<4)|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $8;
  $54 = (+_AT_get_interpolated_y_from_interval($38,$43,$48,$52,$53));
  $4 = $54;
  $75 = $4;
  STACKTOP = sp;return (+$75);
 } else {
  $55 = (($33) + ($34<<4)|0);
  $56 = ((($55)) + 8|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $5;
  $59 = $9;
  $60 = (($58) + ($59<<4)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $5;
  $63 = $9;
  $64 = (($63) - 1)|0;
  $65 = (($62) + ($64<<4)|0);
  $66 = ((($65)) + 8|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $5;
  $69 = $9;
  $70 = (($69) - 1)|0;
  $71 = (($68) + ($70<<4)|0);
  $72 = +HEAPF64[$71>>3];
  $73 = $8;
  $74 = (+_AT_get_interpolated_y_from_interval($57,$61,$67,$72,$73));
  $4 = $74;
  $75 = $4;
  STACKTOP = sp;return (+$75);
 }
 return +(0.0);
}
function _AT_beta_from_E_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 >= 0.0;
 if ($3) {
  $4 = $1;
  $5 = $4 / 931.49402799999996;
  $6 = 1.0 + $5;
  $7 = (+_gsl_pow_2($6));
  $8 = 1.0 / $7;
  $9 = 1.0 - $8;
  $10 = (+Math_sqrt((+$9)));
  STACKTOP = sp;return (+$10);
 } else {
  ___assert_fail((78748|0),(78762|0),35,(78796|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_beta_from_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_beta_from_E_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_gamma_from_E_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_AT_beta_from_E_single($3));
 $2 = $4;
 $5 = $2;
 $6 = $5 < 1.0;
 if ($6) {
  $7 = $2;
  $8 = $2;
  $9 = $7 * $8;
  $10 = 1.0 - $9;
  $11 = (+Math_sqrt((+$10)));
  $12 = 1.0 / $11;
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((78818|0),(78762|0),54,(78829|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_gamma_from_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_gamma_from_E_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_E_from_beta_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 < 1.0;
 if ($3) {
  $4 = $1;
  $5 = (+_gsl_pow_2($4));
  $6 = 1.0 - $5;
  $7 = 1.0 / $6;
  $8 = (+Math_sqrt((+$7)));
  $9 = $8 - 1.0;
  $10 = 931.49402799999996 * $9;
  STACKTOP = sp;return (+$10);
 } else {
  ___assert_fail((78818|0),(78762|0),72,(78852|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_E_from_beta($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_E_from_beta_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_E_from_gamma_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_gsl_pow_2($3));
 $5 = 1.0 / $4;
 $6 = 1.0 - $5;
 $7 = (+Math_sqrt((+$6)));
 $2 = $7;
 $8 = $2;
 $9 = (+_AT_E_from_beta_single($8));
 STACKTOP = sp;return (+$9);
}
function _AT_E_from_gamma($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_E_from_gamma_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_E_MeV_u_from_momentum_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $1;
 $5 = $3 * $4;
 $6 = $5 + 894318.91234731697;
 $7 = (+Math_sqrt((+$6)));
 $2 = $7;
 $8 = $2;
 $9 = $8 - 945.68436190270006;
 STACKTOP = sp;return (+$9);
}
function _AT_E_MeV_u_from_momentum_MeV_c_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_E_MeV_u_from_momentum_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_effective_charge_from_beta_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)!=(1);
 if ($6) {
  $7 = $4;
  $8 = (+($7|0));
  $9 = $3;
  $10 = -125.0 * $9;
  $11 = $4;
  $12 = (+($11|0));
  $13 = (+Math_pow((+$12),0.66666666666666663));
  $14 = $10 / $13;
  $15 = (+Math_exp((+$14)));
  $16 = 1.0 - $15;
  $17 = $8 * $16;
  $2 = $17;
  $22 = $2;
  STACKTOP = sp;return (+$22);
 } else {
  $18 = $3;
  $19 = -125.0 * $18;
  $20 = (+Math_exp((+$19)));
  $21 = 1.0 - $20;
  $2 = $21;
  $22 = $2;
  STACKTOP = sp;return (+$22);
 }
 return +(0.0);
}
function _AT_effective_charge_from_beta($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (+_AT_effective_charge_from_beta_single($15,$19));
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22<<3)|0);
  HEAPF64[$23>>3] = $20;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 STACKTOP = sp;return 0;
}
function _AT_effective_charge_from_E_MeV_u_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (+_AT_beta_from_E_single($6));
 $4 = $7;
 $8 = $3;
 $9 = (_AT_Z_from_particle_no_single($8)|0);
 $5 = $9;
 $10 = $4;
 $11 = $5;
 $12 = (+_AT_effective_charge_from_beta_single($10,$11));
 STACKTOP = sp;return (+$12);
}
function _AT_effective_charge_from_E_MeV_u($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (+_AT_effective_charge_from_E_MeV_u_single($15,$19));
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22<<3)|0);
  HEAPF64[$23>>3] = $20;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 STACKTOP = sp;return 0;
}
function _AT_mean_excitation_energy_eV_from_Z_single($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+($2|0));
 $4 = 9.7599999999999997 * $3;
 $5 = $1;
 $6 = (+($5|0));
 $7 = (+Math_pow((+$6),0.19));
 $8 = 58.799999999999997 / $7;
 $9 = $4 + $8;
 STACKTOP = sp;return (+$9);
}
function _AT_mean_excitation_energy_eV_from_Z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (~~(($13)));
  $15 = (+_AT_mean_excitation_energy_eV_from_Z_single($14));
  $16 = $5;
  $17 = $6;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 STACKTOP = sp;return 0;
}
function _AT_mass_correction_terms_new($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (+_AT_gamma_from_E_single($6));
 $4 = $7;
 $8 = $3;
 $9 = (+($8|0));
 $10 = $9 * 931.49402799999996;
 $5 = $10;
 $11 = $5;
 $12 = 0.51099891799999997 / $11;
 $13 = 2.0 * $12;
 $14 = $4;
 $15 = $13 * $14;
 $16 = 1.0 + $15;
 $17 = $5;
 $18 = 0.51099891799999997 / $17;
 $19 = (+_gsl_pow_2($18));
 $20 = $16 + $19;
 STACKTOP = sp;return (+$20);
}
function _AT_max_relativistic_E_transfer_MeV_new_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (+_AT_beta_from_E_single($6));
 $4 = $7;
 $8 = $2;
 $9 = $3;
 $10 = (+_AT_mass_correction_terms_new($8,$9));
 $5 = $10;
 $11 = $4;
 $12 = (+_gsl_pow_2($11));
 $13 = 1.0219978359999999 * $12;
 $14 = $4;
 $15 = (+_gsl_pow_2($14));
 $16 = 1.0 - $15;
 $17 = $13 / $16;
 $18 = $5;
 $19 = $17 / $18;
 STACKTOP = sp;return (+$19);
}
function _AT_max_classic_E_transfer_MeV_new_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 > 0.0;
 if ($5) {
  $6 = $2;
  $7 = 0.0021943196741568373 * $6;
  STACKTOP = sp;return (+$7);
 } else {
  ___assert_fail((78874|0),(78762|0),204,(78886|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_max_E_transfer_MeV_new_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 >= 0.0;
 $7 = $3;
 if ($6) {
  $8 = $4;
  $9 = (+_AT_max_relativistic_E_transfer_MeV_new_single($7,$8));
  $2 = $9;
  $13 = $2;
  STACKTOP = sp;return (+$13);
 } else {
  $10 = -1.0 * $7;
  $11 = $4;
  $12 = (+_AT_max_classic_E_transfer_MeV_new_single($10,$11));
  $2 = $12;
  $13 = $2;
  STACKTOP = sp;return (+$13);
 }
 return +(0.0);
}
function _AT_max_E_transfer_MeV_new($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (+_AT_max_E_transfer_MeV_new_single($15,$19));
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22<<3)|0);
  HEAPF64[$23>>3] = $20;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 STACKTOP = sp;return 0;
}
function _AT_mass_correction_terms($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_AT_gamma_from_E_single($4));
 $2 = $5;
 $3 = 945.68436190270006;
 $6 = $3;
 $7 = 0.51099891799999997 / $6;
 $8 = 2.0 * $7;
 $9 = $2;
 $10 = $8 / $9;
 $11 = 1.0 + $10;
 $12 = $3;
 $13 = 0.51099891799999997 / $12;
 $14 = (+_gsl_pow_2($13));
 $15 = $11 + $14;
 STACKTOP = sp;return (+$15);
}
function _AT_max_relativistic_E_transfer_MeV_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_AT_beta_from_E_single($4));
 $2 = $5;
 $6 = $1;
 $7 = (+_AT_mass_correction_terms($6));
 $3 = $7;
 $8 = $2;
 $9 = (+_gsl_pow_2($8));
 $10 = 1.0219978359999999 * $9;
 $11 = $2;
 $12 = (+_gsl_pow_2($11));
 $13 = 1.0 - $12;
 $14 = $10 / $13;
 $15 = $3;
 $16 = $14 / $15;
 STACKTOP = sp;return (+$16);
}
function _AT_max_classic_E_transfer_MeV_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 if ($3) {
  $4 = $1;
  $5 = 0.0021784681240406985 * $4;
  STACKTOP = sp;return (+$5);
 } else {
  ___assert_fail((78874|0),(78762|0),251,(78927|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_max_E_transfer_MeV_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 >= 0.0;
 $5 = $2;
 if ($4) {
  $6 = (+_AT_max_relativistic_E_transfer_MeV_single($5));
  $1 = $6;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 } else {
  $7 = -1.0 * $5;
  $8 = (+_AT_max_classic_E_transfer_MeV_single($7));
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 }
 return +(0.0);
}
function _AT_max_E_transfer_MeV($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_max_E_transfer_MeV_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_momentum_from_E_MeV_c_u_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $6 = (+_AT_beta_from_E_single($5));
 $2 = $6;
 $7 = $1;
 $8 = (+_AT_gamma_from_E_single($7));
 $3 = $8;
 $4 = 945.68436190270006;
 $9 = $3;
 $10 = $4;
 $11 = $9 * $10;
 $12 = $2;
 $13 = $11 * $12;
 $14 = $13 * 1.0;
 STACKTOP = sp;return (+$14);
}
function _AT_momentum_MeV_c_u_from_E_MeV_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_momentum_from_E_MeV_c_u_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_energy_straggling_MeV2_cm2_g($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $5;
 $14 = ($13|0)>(0);
 if (!($14)) {
  ___assert_fail((78964|0),(78762|0),307,(78970|0));
  // unreachable;
 }
 $15 = $8;
 $16 = (+_AT_electron_density_m3_from_material_no_single($15));
 $11 = $16;
 $17 = (+_gsl_pow_4(1.60217653E-19));
 $18 = $11;
 $19 = $17 * $18;
 $12 = $19;
 $20 = (+_gsl_pow_2(8.8541878176000004E-12));
 $21 = 12.566370614359172 * $20;
 $22 = $12;
 $23 = $22 / $21;
 $12 = $23;
 $24 = (+_gsl_pow_2(1.6021764600000001E-13));
 $25 = $24 * 100.0;
 $26 = $12;
 $27 = $26 / $25;
 $12 = $27;
 $10 = 0;
 while(1) {
  $28 = $10;
  $29 = $5;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $12;
  $32 = $6;
  $33 = $10;
  $34 = (($32) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $7;
  $37 = $10;
  $38 = (($36) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (+_AT_effective_charge_from_E_MeV_u_single($35,$39));
  $41 = $31 * $40;
  $42 = $9;
  $43 = $10;
  $44 = (($42) + ($43<<3)|0);
  HEAPF64[$44>>3] = $41;
  $45 = $10;
  $46 = (($45) + 1)|0;
  $10 = $46;
 }
 STACKTOP = sp;return;
}
function _AT_energy_straggling_after_slab_E_MeV_u($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $17 = $7;
 $18 = ($17|0)>(0);
 if (!($18)) {
  ___assert_fail((78964|0),(78762|0),326,(79002|0));
  // unreachable;
 }
 $19 = $7;
 $20 = (_calloc($19,8)|0);
 $14 = $20;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $14;
 _AT_energy_straggling_MeV2_cm2_g($21,$22,$23,$24,$25);
 $26 = $11;
 $27 = $26 * 100.0;
 $28 = $10;
 $29 = (+_AT_density_g_cm3_from_material_no($28));
 $30 = $27 * $29;
 $16 = $30;
 $15 = 0;
 while(1) {
  $31 = $15;
  $32 = $7;
  $33 = ($31|0)<($32|0);
  $34 = $14;
  if (!($33)) {
   break;
  }
  $35 = $15;
  $36 = (($34) + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $16;
  $39 = $37 * $38;
  $40 = $12;
  $41 = $15;
  $42 = (($40) + ($41<<3)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $12;
  $45 = $15;
  $46 = (($44) + ($45<<3)|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $43 * $47;
  $49 = $39 + $48;
  $50 = (+Math_sqrt((+$49)));
  $51 = $13;
  $52 = $15;
  $53 = (($51) + ($52<<3)|0);
  HEAPF64[$53>>3] = $50;
  $54 = $15;
  $55 = (($54) + 1)|0;
  $15 = $55;
 }
 _free($34);
 STACKTOP = sp;return;
}
function _AT_dose_Gy_from_fluence_cm2_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $6 = sp + 32|0;
 $10 = sp;
 HEAPF64[$5>>3] = $0;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $9;
 $12 = $8;
 (_AT_Mass_Stopping_Power_with_no($11,1,$5,$6,$12,$10)|0);
 $13 = +HEAPF64[$10>>3];
 $14 = $7;
 $15 = $13 * $14;
 $16 = $15 * 1.6021764599999999E-10;
 STACKTOP = sp;return (+$16);
}
function _AT_dose_Gy_from_fluence_cm2($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $11;
  $31 = $12;
  $32 = (+_AT_dose_Gy_from_fluence_cm2_single($21,$25,$29,$30,$31));
  $33 = $13;
  $34 = $14;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $14;
  $37 = (($36) + 1)|0;
  $14 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_fluence_cm2_from_dose_Gy_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $6 = sp + 32|0;
 $10 = sp;
 HEAPF64[$5>>3] = $0;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $9;
 $12 = $8;
 (_AT_Mass_Stopping_Power_with_no($11,1,$5,$6,$12,$10)|0);
 $13 = $7;
 $14 = $13 / 1.6021764599999999E-10;
 $15 = +HEAPF64[$10>>3];
 $16 = $14 / $15;
 STACKTOP = sp;return (+$16);
}
function _AT_fluence_cm2_from_dose_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $11;
  $31 = $12;
  $32 = (+_AT_fluence_cm2_from_dose_Gy_single($21,$25,$29,$30,$31));
  $33 = $13;
  $34 = $14;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $14;
  $37 = (($36) + 1)|0;
  $14 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_interparticleDistance_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $6;
  $14 = $8;
  $15 = (($13) + ($14<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $16 > 0.0;
  $18 = $6;
  $19 = $8;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  if ($17) {
   $22 = 31415.926535897932 * $21;
   $23 = (+Math_sqrt((+$22)));
   $24 = 2.0 / $23;
   $25 = $7;
   $26 = $8;
   $27 = (($25) + ($26<<3)|0);
   HEAPF64[$27>>3] = $24;
  } else {
   $28 = - $21;
   $29 = $5;
   $30 = $8;
   $31 = (($29) + ($30<<3)|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $32 * 1.6021764599999999E-10;
   $34 = $28 / $33;
   $9 = $34;
   $35 = $9;
   $36 = 31415.926535897932 * $35;
   $37 = (+Math_sqrt((+$36)));
   $38 = 2.0 / $37;
   $39 = $7;
   $40 = $8;
   $41 = (($39) + ($40<<3)|0);
   HEAPF64[$41>>3] = $38;
  }
  $42 = $8;
  $43 = (($42) + 1)|0;
  $8 = $43;
 }
 STACKTOP = sp;return;
}
function _AT_beam_par_physical_to_technical($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $10;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (+_gsl_pow_2($21));
  $23 = $17 * $22;
  $24 = $23 * 2.0;
  $25 = $24 * 3.1415926535897931;
  $26 = $8;
  $27 = $10;
  $28 = (($26) + ($27<<3)|0);
  HEAPF64[$28>>3] = $25;
  $29 = $7;
  $30 = $10;
  $31 = (($29) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 * 23.54820046;
  $34 = $9;
  $35 = $10;
  $36 = (($34) + ($35<<3)|0);
  HEAPF64[$36>>3] = $33;
  $37 = $10;
  $38 = (($37) + 1)|0;
  $10 = $38;
 }
 STACKTOP = sp;return;
}
function _AT_beam_par_technical_to_physical($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 / 23.54820046;
  $19 = $9;
  $20 = $10;
  $21 = (($19) + ($20<<3)|0);
  HEAPF64[$21>>3] = $18;
  $22 = $6;
  $23 = $10;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $9;
  $27 = $10;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = (+_gsl_pow_2($29));
  $31 = $30 * 2.0;
  $32 = $31 * 3.1415926535897931;
  $33 = $25 / $32;
  $34 = $8;
  $35 = $10;
  $36 = (($34) + ($35<<3)|0);
  HEAPF64[$36>>3] = $33;
  $37 = $10;
  $38 = (($37) + 1)|0;
  $10 = $38;
 }
 STACKTOP = sp;return;
}
function _AT_inv_interparticleDistance_Gy($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $6;
  $14 = $8;
  $15 = (($13) + ($14<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = 2.0 / $16;
  $18 = (+_gsl_pow_2($17));
  $19 = $18 * 0.31830988618379069;
  $20 = $19 * 1.0E-4;
  $9 = $20;
  $21 = $9;
  $22 = $5;
  $23 = $8;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $25 * 1.6021764599999999E-10;
  $27 = $21 * $26;
  $28 = $7;
  $29 = $8;
  $30 = (($28) + ($29<<3)|0);
  HEAPF64[$30>>3] = $27;
  $31 = $8;
  $32 = (($31) + 1)|0;
  $8 = $32;
 }
 STACKTOP = sp;return;
}
function _AT_single_impact_fluence_cm2_single($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = (+_AT_max_electron_range_m($7,$8,$9));
 $6 = $10;
 $11 = $6;
 $12 = $11 * 100.0;
 $13 = (+_gsl_pow_2($12));
 $14 = 0.31830988618379069 / $13;
 STACKTOP = sp;return (+$14);
}
function _AT_single_impact_fluence_cm2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $8;
  $20 = (+_AT_single_impact_fluence_cm2_single($17,$18,$19));
  $21 = $9;
  $22 = $10;
  $23 = (($21) + ($22<<3)|0);
  HEAPF64[$23>>3] = $20;
  $24 = $10;
  $25 = (($24) + 1)|0;
  $10 = $25;
 }
 STACKTOP = sp;return;
}
function _AT_single_impact_dose_Gy_single($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 * 1.6021764599999999E-10;
 $6 = $3;
 $7 = $5 * $6;
 STACKTOP = sp;return (+$7);
}
function _AT_single_impact_dose_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = (_llvm_stacksave()|0);
 $15 = $17;
 $$alloca_mul = $16<<3;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $19 = $12;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 (_AT_Mass_Stopping_Power_with_no($19,$20,$21,$22,$23,$18)|0);
 $14 = 0;
 while(1) {
  $24 = $14;
  $25 = $7;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $14;
  $28 = (($18) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $8;
  $31 = $14;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $10;
  $35 = $11;
  $36 = (+_AT_single_impact_fluence_cm2_single($33,$34,$35));
  $37 = (+_AT_single_impact_dose_Gy_single($29,$36));
  $38 = $13;
  $39 = $14;
  $40 = (($38) + ($39<<3)|0);
  HEAPF64[$40>>3] = $37;
  $41 = $14;
  $42 = (($41) + 1)|0;
  $14 = $42;
 }
 $43 = $15;
 _llvm_stackrestore(($43|0));
 STACKTOP = sp;return;
}
function _AT_total_D_Gy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0.0;
 $15 = $6;
 $16 = (_calloc($15,8)|0);
 $13 = $16;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $13;
 _AT_dose_Gy_from_fluence_cm2($17,$18,$19,$20,$21,$22,$23);
 $14 = 0;
 while(1) {
  $24 = $14;
  $25 = $6;
  $26 = ($24|0)<($25|0);
  $27 = $13;
  if (!($26)) {
   break;
  }
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $12;
  $32 = $31 + $30;
  $12 = $32;
  $33 = $14;
  $34 = (($33) + 1)|0;
  $14 = $34;
 }
 _free($27);
 $35 = $12;
 STACKTOP = sp;return (+$35);
}
function _AT_total_fluence_cm2($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $6;
 $16 = (_calloc($15,8)|0);
 $12 = $16;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $12;
 _AT_fluence_cm2_from_dose_Gy($17,$18,$19,$20,$21,$22,$23);
 $13 = 0.0;
 $14 = 0;
 while(1) {
  $24 = $14;
  $25 = $6;
  $26 = ($24|0)<($25|0);
  $27 = $12;
  if (!($26)) {
   break;
  }
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $13;
  $32 = $31 + $30;
  $13 = $32;
  $33 = $14;
  $34 = (($33) + 1)|0;
  $14 = $34;
 }
 _free($27);
 $35 = $13;
 STACKTOP = sp;return (+$35);
}
function _AT_fluence_weighted_E_MeV_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $3;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $6;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $7;
  $17 = $16 + $15;
  $7 = $17;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 $8 = 0.0;
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = $3;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $5;
  $24 = $6;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $4;
  $28 = $6;
  $29 = (($27) + ($28<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $26 * $30;
  $32 = $8;
  $33 = $32 + $31;
  $8 = $33;
  $34 = $6;
  $35 = (($34) + 1)|0;
  $6 = $35;
 }
 $36 = $7;
 $37 = $8;
 $38 = $37 / $36;
 $8 = $38;
 $39 = $8;
 STACKTOP = sp;return (+$39);
}
function _AT_dose_weighted_E_MeV_u($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $16 = $6;
 $17 = (_calloc($16,8)|0);
 $13 = $17;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $24 = $13;
 _AT_dose_Gy_from_fluence_cm2($18,$19,$20,$21,$22,$23,$24);
 $14 = 0.0;
 $12 = 0;
 while(1) {
  $25 = $12;
  $26 = $6;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $13;
  $29 = $12;
  $30 = (($28) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $14;
  $33 = $32 + $31;
  $14 = $33;
  $34 = $12;
  $35 = (($34) + 1)|0;
  $12 = $35;
 }
 $15 = 0.0;
 $12 = 0;
 while(1) {
  $36 = $12;
  $37 = $6;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $13;
  $40 = $12;
  $41 = (($39) + ($40<<3)|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $7;
  $44 = $12;
  $45 = (($43) + ($44<<3)|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $42 * $46;
  $48 = $15;
  $49 = $48 + $47;
  $15 = $49;
  $50 = $12;
  $51 = (($50) + 1)|0;
  $12 = $51;
 }
 $52 = $14;
 $53 = $15;
 $54 = $53 / $52;
 $15 = $54;
 $55 = $13;
 _free($55);
 $56 = $15;
 STACKTOP = sp;return (+$56);
}
function _AT_fluence_weighted_LET_MeV_cm2_g($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $16 = $6;
 $17 = (_calloc($16,8)|0);
 $13 = $17;
 $14 = 0.0;
 $12 = 0;
 while(1) {
  $18 = $12;
  $19 = $6;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $9;
  $22 = $12;
  $23 = (($21) + ($22<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $14;
  $26 = $25 + $24;
  $14 = $26;
  $27 = $12;
  $28 = (($27) + 1)|0;
  $12 = $28;
 }
 $29 = $11;
 $30 = $6;
 $31 = $7;
 $32 = $8;
 $33 = $10;
 $34 = $13;
 (_AT_Mass_Stopping_Power_with_no($29,$30,$31,$32,$33,$34)|0);
 $15 = 0.0;
 $12 = 0;
 while(1) {
  $35 = $12;
  $36 = $6;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $9;
  $39 = $12;
  $40 = (($38) + ($39<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $13;
  $43 = $12;
  $44 = (($42) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $41 * $45;
  $47 = $15;
  $48 = $47 + $46;
  $15 = $48;
  $49 = $12;
  $50 = (($49) + 1)|0;
  $12 = $50;
 }
 $51 = $14;
 $52 = $15;
 $53 = $52 / $51;
 $15 = $53;
 $54 = $13;
 _free($54);
 $55 = $15;
 STACKTOP = sp;return (+$55);
}
function _AT_dose_weighted_LET_MeV_cm2_g($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $6;
 $18 = (_calloc($17,8)|0);
 $13 = $18;
 $19 = $6;
 $20 = (_calloc($19,8)|0);
 $14 = $20;
 $21 = $11;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $10;
 $26 = $13;
 (_AT_Mass_Stopping_Power_with_no($21,$22,$23,$24,$25,$26)|0);
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = $10;
 $32 = $11;
 $33 = $14;
 _AT_dose_Gy_from_fluence_cm2($27,$28,$29,$30,$31,$32,$33);
 $15 = 0.0;
 $12 = 0;
 while(1) {
  $34 = $12;
  $35 = $6;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $14;
  $38 = $12;
  $39 = (($37) + ($38<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $15;
  $42 = $41 + $40;
  $15 = $42;
  $43 = $12;
  $44 = (($43) + 1)|0;
  $12 = $44;
 }
 $16 = 0.0;
 $12 = 0;
 while(1) {
  $45 = $12;
  $46 = $6;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   break;
  }
  $48 = $14;
  $49 = $12;
  $50 = (($48) + ($49<<3)|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $13;
  $53 = $12;
  $54 = (($52) + ($53<<3)|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $51 * $55;
  $57 = $16;
  $58 = $57 + $56;
  $16 = $58;
  $59 = $12;
  $60 = (($59) + 1)|0;
  $12 = $60;
 }
 $61 = $15;
 $62 = $16;
 $63 = $62 / $61;
 $16 = $63;
 $64 = $13;
 _free($64);
 $65 = $14;
 _free($65);
 $66 = $16;
 STACKTOP = sp;return (+$66);
}
function _AT_stopping_power_ratio($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $7;
 $20 = (_calloc($19,8)|0);
 $14 = $20;
 $21 = $7;
 $22 = (_calloc($21,8)|0);
 $15 = $22;
 $23 = $13;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $11;
 $28 = $14;
 (_AT_Mass_Stopping_Power_with_no($23,$24,$25,$26,$27,$28)|0);
 $29 = $13;
 $30 = $7;
 $31 = $8;
 $32 = $9;
 $33 = $12;
 $34 = $15;
 (_AT_Mass_Stopping_Power_with_no($29,$30,$31,$32,$33,$34)|0);
 $17 = 0.0;
 $18 = 0.0;
 $16 = 0;
 while(1) {
  $35 = $16;
  $36 = $7;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $15;
  $39 = $16;
  $40 = (($38) + ($39<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $41 != 0.0;
  if ($42) {
   $43 = $10;
   $44 = $16;
   $45 = (($43) + ($44<<3)|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $14;
   $48 = $16;
   $49 = (($47) + ($48<<3)|0);
   $50 = +HEAPF64[$49>>3];
   $51 = $46 * $50;
   $52 = $15;
   $53 = $16;
   $54 = (($52) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $51 / $55;
   $57 = $17;
   $58 = $57 + $56;
   $17 = $58;
  }
  $59 = $10;
  $60 = $16;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $18;
  $64 = $63 + $62;
  $18 = $64;
  $65 = $16;
  $66 = (($65) + 1)|0;
  $16 = $66;
 }
 $67 = $14;
 _free($67);
 $68 = $15;
 _free($68);
 $69 = $17;
 $70 = $18;
 $71 = $69 / $70;
 STACKTOP = sp;return (+$71);
}
function _AT_mean_number_of_tracks_contrib($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $19 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $20 = $7;
 $21 = (_calloc($20,8)|0);
 $14 = $21;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $13;
 $28 = (+_AT_total_D_Gy($22,$23,$24,$25,$26,$27));
 $15 = $28;
 $29 = $7;
 $30 = $10;
 $31 = $14;
 _AT_normalize($29,$30,$31);
 $16 = 0.0;
 $17 = 0;
 while(1) {
  $32 = $17;
  $33 = $7;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $8;
  $36 = $17;
  $37 = (($35) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $11;
  $40 = $12;
  $41 = (+_AT_single_impact_fluence_cm2_single($38,$39,$40));
  $18 = $41;
  $42 = $13;
  $43 = $8;
  $44 = $17;
  $45 = (($43) + ($44<<3)|0);
  $46 = $9;
  $47 = $17;
  $48 = (($46) + ($47<<2)|0);
  $49 = $11;
  (_AT_Mass_Stopping_Power_with_no($42,1,$45,$48,$49,$19)|0);
  $50 = $14;
  $51 = $17;
  $52 = (($50) + ($51<<3)|0);
  $53 = +HEAPF64[$52>>3];
  $54 = +HEAPF64[$19>>3];
  $55 = $18;
  $56 = (+_AT_single_impact_dose_Gy_single($54,$55));
  $57 = $53 * $56;
  $58 = $16;
  $59 = $58 + $57;
  $16 = $59;
  $60 = $17;
  $61 = (($60) + 1)|0;
  $17 = $61;
 }
 $62 = $14;
 _free($62);
 $63 = $15;
 $64 = $16;
 $65 = $63 / $64;
 STACKTOP = sp;return (+$65);
}
function _AT_kinetic_variable_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_AT_beta_from_E_single($4));
 $2 = $5;
 $6 = $1;
 $7 = (+_AT_gamma_from_E_single($6));
 $3 = $7;
 $8 = $2;
 $9 = $3;
 $10 = $8 * $9;
 $11 = $10 > 0.0;
 if ($11) {
  $12 = $2;
  $13 = $3;
  $14 = $12 * $13;
  $15 = (+_llvm_log10_f64((+$14)));
  STACKTOP = sp;return (+$15);
 } else {
  ___assert_fail((79042|0),(78762|0),799,(79059|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_Rutherford_SDCS($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0;
 var $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $28 = $7;
 $29 = (+_AT_nuclear_spin_from_particle_no_single($28));
 $30 = (~~(($29)));
 $12 = $30;
 $31 = $6;
 $32 = $7;
 $33 = (+_AT_effective_charge_from_E_MeV_u_single($31,$32));
 $13 = $33;
 $34 = $7;
 $35 = (_AT_Z_from_particle_no_single($34)|0);
 $14 = $35;
 $36 = $7;
 $37 = (_AT_A_from_particle_no_single($36)|0);
 $15 = $37;
 $38 = $8;
 $39 = (+_AT_average_Z_from_material_no($38));
 $16 = $39;
 $40 = $14;
 $41 = (+($40|0));
 $42 = $41 * 938.27201300000002;
 $43 = $15;
 $44 = $14;
 $45 = (($43) - ($44))|0;
 $46 = (+($45|0));
 $47 = $46 * 939.56534599999998;
 $48 = $42 + $47;
 $17 = $48;
 $49 = $17;
 $50 = $15;
 $51 = (+($50|0));
 $52 = $49 / $51;
 $53 = $6;
 $54 = $52 + $53;
 $18 = $54;
 $55 = $17;
 $56 = $17;
 $57 = $55 * $56;
 $58 = $57 / 0.51099891799999997;
 $19 = $58;
 $59 = (+Math_pow(2.8179402894E-15,2.0));
 $60 = 6.2831853071795862 * $59;
 $61 = $60 * 0.51099891799999997;
 $20 = $61;
 $62 = $6;
 $63 = (+_AT_beta_from_E_single($62));
 $21 = $63;
 $64 = $21;
 $65 = $21;
 $66 = $64 * $65;
 $22 = $66;
 $67 = $6;
 $68 = (+_AT_max_E_transfer_MeV_single($67));
 $23 = $68;
 $27 = 0;
 while(1) {
  $69 = $27;
  $70 = $9;
  $71 = ($69|0)<($70|0);
  if (!($71)) {
   break;
  }
  $72 = $10;
  $73 = $27;
  $74 = (($72) + ($73<<3)|0);
  $75 = +HEAPF64[$74>>3];
  $76 = $23;
  $77 = $75 > $76;
  if ($77) {
   $78 = $11;
   $79 = $27;
   $80 = (($78) + ($79<<3)|0);
   HEAPF64[$80>>3] = 0.0;
  } else {
   $81 = $20;
   $82 = $16;
   $83 = $81 * $82;
   $84 = $13;
   $85 = $83 * $84;
   $86 = $13;
   $87 = $85 * $86;
   $88 = $22;
   $89 = $10;
   $90 = $27;
   $91 = (($89) + ($90<<3)|0);
   $92 = +HEAPF64[$91>>3];
   $93 = $88 * $92;
   $94 = $10;
   $95 = $27;
   $96 = (($94) + ($95<<3)|0);
   $97 = +HEAPF64[$96>>3];
   $98 = $93 * $97;
   $99 = $87 / $98;
   $24 = $99;
   $100 = $22;
   $101 = $10;
   $102 = $27;
   $103 = (($101) + ($102<<3)|0);
   $104 = +HEAPF64[$103>>3];
   $105 = $100 * $104;
   $106 = $23;
   $107 = $105 / $106;
   $108 = 1.0 - $107;
   $25 = $108;
   $109 = $12;
   $110 = (+($109|0));
   $111 = $110 == 0.0;
   if ($111) {
    $112 = $24;
    $113 = $25;
    $114 = $112 * $113;
    $115 = $11;
    $116 = $27;
    $117 = (($115) + ($116<<3)|0);
    HEAPF64[$117>>3] = $114;
   }
   $118 = $12;
   $119 = (+($118|0));
   $120 = $119 == 0.5;
   if ($120) {
    $121 = $10;
    $122 = $27;
    $123 = (($121) + ($122<<3)|0);
    $124 = +HEAPF64[$123>>3];
    $125 = $10;
    $126 = $27;
    $127 = (($125) + ($126<<3)|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $124 * $128;
    $130 = $18;
    $131 = 2.0 * $130;
    $132 = $18;
    $133 = $131 * $132;
    $134 = $129 / $133;
    $26 = $134;
    $135 = $24;
    $136 = $25;
    $137 = $26;
    $138 = $136 + $137;
    $139 = $135 * $138;
    $140 = $11;
    $141 = $27;
    $142 = (($140) + ($141<<3)|0);
    HEAPF64[$142>>3] = $139;
   }
   $143 = $12;
   $144 = (+($143|0));
   $145 = $144 == 1.0;
   if ($145) {
    $146 = $10;
    $147 = $27;
    $148 = (($146) + ($147<<3)|0);
    $149 = +HEAPF64[$148>>3];
    $150 = $19;
    $151 = 2.0 * $150;
    $152 = $149 / $151;
    $153 = 1.0 + $152;
    $26 = $153;
    $154 = $10;
    $155 = $27;
    $156 = (($154) + ($155<<3)|0);
    $157 = +HEAPF64[$156>>3];
    $158 = $10;
    $159 = $27;
    $160 = (($158) + ($159<<3)|0);
    $161 = +HEAPF64[$160>>3];
    $162 = $157 * $161;
    $163 = $18;
    $164 = 3.0 * $163;
    $165 = $18;
    $166 = $164 * $165;
    $167 = $162 / $166;
    $168 = $26;
    $169 = $168 * $167;
    $26 = $169;
    $170 = $25;
    $171 = $10;
    $172 = $27;
    $173 = (($171) + ($172<<3)|0);
    $174 = +HEAPF64[$173>>3];
    $175 = $19;
    $176 = 3.0 * $175;
    $177 = $174 / $176;
    $178 = 1.0 + $177;
    $179 = $170 * $178;
    $180 = $26;
    $181 = $180 + $179;
    $26 = $181;
    $182 = $24;
    $183 = $26;
    $184 = $182 * $183;
    $185 = $11;
    $186 = $27;
    $187 = (($185) + ($186<<3)|0);
    HEAPF64[$187>>3] = $184;
   }
  }
  $188 = $27;
  $189 = (($188) + 1)|0;
  $27 = $189;
 }
 STACKTOP = sp;return 0;
}
function _AT_Rutherford_scatter_cross_section($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $8;
 $18 = (+_AT_average_Z_from_material_no($17));
 $12 = $18;
 $19 = $6;
 $20 = $7;
 $21 = (+_AT_effective_charge_from_E_MeV_u_single($19,$20));
 $13 = $21;
 $22 = $7;
 $23 = (_AT_A_from_particle_no_single($22)|0);
 $14 = $23;
 $15 = 1.4399645302667695E-15;
 $24 = $13;
 $25 = $13;
 $26 = $24 * $25;
 $27 = $12;
 $28 = $26 * $27;
 $29 = $12;
 $30 = $28 * $29;
 $31 = $15;
 $32 = $31 * $30;
 $15 = $32;
 $33 = $6;
 $34 = 4.0 * $33;
 $35 = $14;
 $36 = (+($35|0));
 $37 = $34 * $36;
 $38 = $15;
 $39 = $38 / $37;
 $15 = $39;
 $40 = $15;
 $41 = $15;
 $42 = $41 * $40;
 $15 = $42;
 $16 = 0;
 while(1) {
  $43 = $16;
  $44 = $9;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $15;
  $47 = $10;
  $48 = $16;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $50 / 2.0;
  $52 = (+Math_sin((+$51)));
  $53 = (+Math_pow((+$52),4.0));
  $54 = $46 / $53;
  $55 = $11;
  $56 = $16;
  $57 = (($55) + ($56<<3)|0);
  HEAPF64[$57>>3] = $54;
  $58 = $16;
  $59 = (($58) + 1)|0;
  $16 = $59;
 }
 STACKTOP = sp;return 0;
}
function _AT_gyroradius_m($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (+_AT_momentum_from_E_MeV_c_u_single($8));
 $10 = $9 / 1000.0;
 $11 = $4;
 $12 = (_AT_A_from_particle_no_single($11)|0);
 $13 = (+($12|0));
 $14 = $10 * $13;
 $6 = $14;
 $15 = $3;
 $16 = $4;
 $17 = (+_AT_effective_charge_from_E_MeV_u_single($15,$16));
 $7 = $17;
 $18 = $6;
 $19 = $7;
 $20 = $5;
 $21 = $19 * $20;
 $22 = $18 / $21;
 STACKTOP = sp;return (+$22);
}
function _CL_ranlan_idf($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $6 = $1;
 $7 = 1000.0 * $6;
 $2 = $7;
 $8 = $2;
 $9 = (~~(($8)));
 $5 = $9;
 $10 = $2;
 $11 = $5;
 $12 = (+($11|0));
 $13 = $10 - $12;
 $2 = $13;
 $14 = $5;
 $15 = ($14|0)>=(70);
 $16 = $5;
 $17 = ($16|0)<=(800);
 $or$cond = $15 & $17;
 $18 = $5;
 if ($or$cond) {
  $19 = (1200 + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $2;
  $22 = $5;
  $23 = (($22) + 1)|0;
  $24 = (1200 + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $5;
  $27 = (1200 + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $25 - $28;
  $30 = $21 * $29;
  $31 = $20 + $30;
  $4 = $31;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 }
 $32 = ($18|0)>=(7);
 $33 = $5;
 $34 = ($33|0)<=(980);
 $or$cond3 = $32 & $34;
 $35 = $5;
 if ($or$cond3) {
  $36 = (1200 + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $2;
  $39 = $5;
  $40 = (($39) + 1)|0;
  $41 = (1200 + ($40<<3)|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $5;
  $44 = (1200 + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $42 - $45;
  $47 = $2;
  $48 = 1.0 - $47;
  $49 = 0.25 * $48;
  $50 = $5;
  $51 = (($50) + 2)|0;
  $52 = (1200 + ($51<<3)|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $5;
  $55 = (($54) + 1)|0;
  $56 = (1200 + ($55<<3)|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $53 - $57;
  $59 = $5;
  $60 = (1200 + ($59<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $58 - $61;
  $63 = $5;
  $64 = (($63) - 1)|0;
  $65 = (1200 + ($64<<3)|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $62 + $66;
  $68 = $49 * $67;
  $69 = $46 - $68;
  $70 = $38 * $69;
  $71 = $37 + $70;
  $4 = $71;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 }
 $72 = ($35|0)<(7);
 $73 = $1;
 if ($72) {
  $74 = (+Math_log((+$73)));
  $3 = $74;
  $75 = $3;
  $76 = 1.0 / $75;
  $2 = $76;
  $77 = $2;
  $78 = 17.085452799999999 * $77;
  $79 = 34.5213058 + $78;
  $80 = $2;
  $81 = $79 * $80;
  $82 = 0.99858950000000001 + $81;
  $83 = $2;
  $84 = 4.0124458199999999 * $83;
  $85 = 34.176020200000004 + $84;
  $86 = $2;
  $87 = $85 * $86;
  $88 = 1.0 + $87;
  $89 = $82 / $88;
  $90 = $3;
  $91 = -0.91893853000000003 - $90;
  $92 = (+Math_log((+$91)));
  $93 = - $92;
  $94 = $93 - 1.0;
  $95 = $89 * $94;
  $4 = $95;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 }
 $96 = 1.0 - $73;
 $2 = $96;
 $97 = $2;
 $98 = $2;
 $99 = $97 * $98;
 $3 = $99;
 $100 = $1;
 $101 = $100 <= 0.99899999999999999;
 $102 = $2;
 if ($101) {
  $103 = 263.99115599999999 * $102;
  $104 = 1.00060006 + $103;
  $105 = $3;
  $106 = 4373.2006799999999 * $105;
  $107 = $104 + $106;
  $108 = $2;
  $109 = 257.36807499999998 * $108;
  $110 = 1.0 + $109;
  $111 = $3;
  $112 = 3414.48018 * $111;
  $113 = $110 + $112;
  $114 = $2;
  $115 = $113 * $114;
  $116 = $107 / $115;
  $4 = $116;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 } else {
  $117 = 6075.1411900000003 * $102;
  $118 = 1.00001538 + $117;
  $119 = $3;
  $120 = 734266.40899999999 * $119;
  $121 = $118 + $120;
  $122 = $2;
  $123 = 6065.1191900000003 * $122;
  $124 = 1.0 + $123;
  $125 = $3;
  $126 = 694021.04399999999 * $125;
  $127 = $124 + $126;
  $128 = $2;
  $129 = $127 * $128;
  $130 = $121 / $129;
  $4 = $130;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 }
 return +(0.0);
}
function _CL_ranlan_cdf($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $3 = $5;
 $6 = $3;
 $7 = $6 < -5.5;
 $8 = $3;
 if ($7) {
  $9 = $8 + 1.0;
  $10 = (+Math_exp((+$9)));
  $2 = $10;
  $11 = $2;
  $12 = -1.0 / $11;
  $13 = (+Math_exp((+$12)));
  $14 = 0.39894228030000001 * $13;
  $15 = $2;
  $16 = (+Math_sqrt((+$15)));
  $17 = $14 * $16;
  $18 = $2;
  $19 = -1.6417414159999999 * $18;
  $20 = 0.66753472219999999 + $19;
  $21 = $2;
  $22 = $20 * $21;
  $23 = -0.45833333329999998 + $22;
  $24 = $2;
  $25 = $23 * $24;
  $26 = 1.0 + $25;
  $27 = $17 * $26;
  $4 = $27;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $28 = $8 < -1.0;
 $29 = $3;
 if ($28) {
  $30 = - $29;
  $31 = $30 - 1.0;
  $32 = (+Math_exp((+$31)));
  $2 = $32;
  $33 = $2;
  $34 = - $33;
  $35 = (+Math_exp((+$34)));
  $36 = $2;
  $37 = (+Math_sqrt((+$36)));
  $38 = $35 / $37;
  $39 = $3;
  $40 = 7.4112472900000003E-4 * $39;
  $41 = -0.0021088177369999999 + $40;
  $42 = $3;
  $43 = $41 * $42;
  $44 = 0.0145838123 + $43;
  $45 = $3;
  $46 = $44 * $45;
  $47 = -0.062505804440000007 + $46;
  $48 = $3;
  $49 = $47 * $48;
  $50 = 0.25140914910000001 + $49;
  $51 = $38 * $50;
  $52 = $3;
  $53 = 0.001931496439 * $52;
  $54 = -0.0031373784270000002 + $53;
  $55 = $3;
  $56 = $54 * $55;
  $57 = 0.06225310236 + $56;
  $58 = $3;
  $59 = $57 * $58;
  $60 = -0.0055711756249999999 + $59;
  $61 = $3;
  $62 = $60 * $61;
  $63 = 1.0 + $62;
  $64 = $51 / $63;
  $4 = $64;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $65 = $29 < 1.0;
 $66 = $3;
 if ($65) {
  $67 = 0.02251304883 * $66;
  $68 = 0.15235186949999999 + $67;
  $69 = $3;
  $70 = $68 * $69;
  $71 = 0.35643632310000001 + $70;
  $72 = $3;
  $73 = $71 * $72;
  $74 = 0.2868328584 + $73;
  $75 = $3;
  $76 = 0.022785947710000001 * $75;
  $77 = 0.17207214479999999 + $76;
  $78 = $3;
  $79 = $77 * $78;
  $80 = 0.61911361369999995 + $79;
  $81 = $3;
  $82 = $80 * $81;
  $83 = 1.0 + $82;
  $84 = $74 / $83;
  $4 = $84;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $85 = $66 < 4.0;
 $86 = $3;
 if ($85) {
  $87 = 0.0087338271849999992 * $86;
  $88 = 0.099509519409999996 + $87;
  $89 = $3;
  $90 = $88 * $89;
  $91 = 0.3003828436 + $90;
  $92 = $3;
  $93 = $91 * $92;
  $94 = 0.28683290659999999 + $93;
  $95 = $3;
  $96 = 0.0086938515669999997 * $95;
  $97 = 0.1095631512 + $96;
  $98 = $3;
  $99 = $97 * $98;
  $100 = 0.4237190502 + $99;
  $101 = $3;
  $102 = $100 * $101;
  $103 = 1.0 + $102;
  $104 = $94 / $103;
  $4 = $104;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $105 = $86 < 12.0;
 $106 = $3;
 if ($105) {
  $107 = 1.0 / $106;
  $2 = $107;
  $108 = $2;
  $109 = 7.5360522689999998 * $108;
  $110 = 10.858838799999999 + $109;
  $111 = $2;
  $112 = $110 * $111;
  $113 = 4.5035924979999997 + $112;
  $114 = $2;
  $115 = $113 * $114;
  $116 = 1.0003516299999999 + $115;
  $117 = $2;
  $118 = 27.213215080000001 * $117;
  $119 = 19.335811110000002 + $118;
  $120 = $2;
  $121 = $119 * $120;
  $122 = 5.5399696780000003 + $121;
  $123 = $2;
  $124 = $122 * $123;
  $125 = 1.0 + $124;
  $126 = $116 / $125;
  $4 = $126;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $127 = $106 < 50.0;
 $128 = $3;
 if ($127) {
  $129 = 1.0 / $128;
  $2 = $129;
  $130 = $2;
  $131 = 153.21534550000001 * $130;
  $132 = 85.055447529999995 + $131;
  $133 = $2;
  $134 = $132 * $133;
  $135 = 49.094141110000002 + $134;
  $136 = $2;
  $137 = $135 * $136;
  $138 = 1.0000065170000001 + $137;
  $139 = $2;
  $140 = 420.00029089999998 * $139;
  $141 = 139.9819104 + $140;
  $142 = $2;
  $143 = $141 * $142;
  $144 = 50.099288809999997 + $143;
  $145 = $2;
  $146 = $144 * $145;
  $147 = 1.0 + $146;
  $148 = $138 / $147;
  $4 = $148;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $149 = $128 < 300.0;
 $150 = $3;
 if ($149) {
  $151 = 1.0 / $150;
  $2 = $151;
  $152 = $2;
  $153 = -960.50542740000003 * $152;
  $154 = 916.21492439999997 + $153;
  $155 = $2;
  $156 = $154 * $155;
  $157 = 132.98684560000001 + $156;
  $158 = $2;
  $159 = $157 * $158;
  $160 = 1.0000009830000001 + $159;
  $161 = $2;
  $162 = 553.22246189999998 * $161;
  $163 = 1055.990413 + $162;
  $164 = $2;
  $165 = $163 * $164;
  $166 = 133.98878429999999 + $165;
  $167 = $2;
  $168 = $166 * $167;
  $169 = 1.0 + $168;
  $170 = $160 / $169;
  $4 = $170;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 } else {
  $171 = $3;
  $172 = $3;
  $173 = (+Math_log((+$172)));
  $174 = $171 * $173;
  $175 = $3;
  $176 = $175 + 1.0;
  $177 = $174 / $176;
  $178 = $150 - $177;
  $179 = 1.0 / $178;
  $2 = $179;
  $180 = $2;
  $181 = -2.043403138 * $180;
  $182 = -0.42278433510000002 + $181;
  $183 = $2;
  $184 = $182 * $183;
  $185 = 1.0 + $184;
  $186 = $2;
  $187 = $185 * $186;
  $188 = 1.0 - $187;
  $4 = $188;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 return +(0.0);
}
function _ROOT_vavset($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $100 = 0, $1000 = 0.0, $1001 = 0, $1002 = 0.0, $1003 = 0.0, $1004 = 0.0, $1005 = 0.0, $1006 = 0, $1007 = 0.0, $1008 = 0.0, $1009 = 0.0, $101 = 0, $1010 = 0.0, $1011 = 0, $1012 = 0.0, $1013 = 0.0, $1014 = 0.0, $1015 = 0.0, $1016 = 0;
 var $1017 = 0, $1018 = 0.0, $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0.0, $1023 = 0.0, $1024 = 0, $1025 = 0.0, $1026 = 0.0, $1027 = 0.0, $1028 = 0.0, $1029 = 0, $103 = 0, $1030 = 0.0, $1031 = 0.0, $1032 = 0.0, $1033 = 0.0, $1034 = 0;
 var $1035 = 0.0, $1036 = 0.0, $1037 = 0.0, $1038 = 0.0, $1039 = 0, $104 = 0, $1040 = 0.0, $1041 = 0.0, $1042 = 0.0, $1043 = 0.0, $1044 = 0, $1045 = 0.0, $1046 = 0.0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0, $1050 = 0.0, $1051 = 0.0, $1052 = 0.0;
 var $1053 = 0.0, $1054 = 0, $1055 = 0.0, $1056 = 0.0, $1057 = 0.0, $1058 = 0.0, $1059 = 0, $106 = 0, $1060 = 0.0, $1061 = 0.0, $1062 = 0.0, $1063 = 0.0, $1064 = 0, $1065 = 0.0, $1066 = 0.0, $1067 = 0.0, $1068 = 0.0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0.0, $1072 = 0, $1073 = 0.0, $1074 = 0.0, $1075 = 0.0, $1076 = 0.0, $1077 = 0, $1078 = 0.0, $1079 = 0.0, $108 = 0, $1080 = 0.0, $1081 = 0.0, $1082 = 0, $1083 = 0.0, $1084 = 0.0, $1085 = 0.0, $1086 = 0.0, $1087 = 0, $1088 = 0.0, $1089 = 0.0;
 var $109 = 0, $1090 = 0.0, $1091 = 0.0, $1092 = 0, $1093 = 0.0, $1094 = 0.0, $1095 = 0.0, $1096 = 0.0, $1097 = 0, $1098 = 0.0, $1099 = 0.0, $11 = 0.0, $110 = 0, $1100 = 0.0, $1101 = 0.0, $1102 = 0, $1103 = 0.0, $1104 = 0.0, $1105 = 0.0, $1106 = 0.0;
 var $1107 = 0, $1108 = 0.0, $1109 = 0.0, $111 = 0.0, $1110 = 0.0, $1111 = 0.0, $1112 = 0, $1113 = 0.0, $1114 = 0.0, $1115 = 0.0, $1116 = 0.0, $1117 = 0, $1118 = 0.0, $1119 = 0.0, $112 = 0, $1120 = 0.0, $1121 = 0.0, $1122 = 0, $1123 = 0.0, $1124 = 0.0;
 var $1125 = 0.0, $1126 = 0.0, $1127 = 0, $1128 = 0.0, $1129 = 0.0, $113 = 0.0, $1130 = 0.0, $1131 = 0.0, $1132 = 0, $1133 = 0, $1134 = 0.0, $1135 = 0, $1136 = 0.0, $1137 = 0.0, $1138 = 0.0, $1139 = 0.0, $114 = 0, $1140 = 0, $1141 = 0.0, $1142 = 0.0;
 var $1143 = 0.0, $1144 = 0.0, $1145 = 0, $1146 = 0.0, $1147 = 0.0, $1148 = 0.0, $1149 = 0.0, $115 = 0, $1150 = 0, $1151 = 0.0, $1152 = 0.0, $1153 = 0.0, $1154 = 0.0, $1155 = 0, $1156 = 0.0, $1157 = 0.0, $1158 = 0.0, $1159 = 0.0, $116 = 0.0, $1160 = 0;
 var $1161 = 0.0, $1162 = 0.0, $1163 = 0.0, $1164 = 0.0, $1165 = 0, $1166 = 0.0, $1167 = 0.0, $1168 = 0.0, $1169 = 0.0, $117 = 0.0, $1170 = 0, $1171 = 0, $1172 = 0.0, $1173 = 0, $1174 = 0.0, $1175 = 0.0, $1176 = 0.0, $1177 = 0.0, $1178 = 0, $1179 = 0.0;
 var $118 = 0, $1180 = 0.0, $1181 = 0.0, $1182 = 0.0, $1183 = 0, $1184 = 0.0, $1185 = 0.0, $1186 = 0.0, $1187 = 0.0, $1188 = 0, $1189 = 0.0, $119 = 0.0, $1190 = 0.0, $1191 = 0.0, $1192 = 0.0, $1193 = 0, $1194 = 0.0, $1195 = 0.0, $1196 = 0.0, $1197 = 0.0;
 var $1198 = 0, $1199 = 0.0, $12 = 0.0, $120 = 0, $1200 = 0.0, $1201 = 0.0, $1202 = 0.0, $1203 = 0, $1204 = 0.0, $1205 = 0.0, $1206 = 0.0, $1207 = 0.0, $1208 = 0, $1209 = 0.0, $121 = 0.0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0.0, $1214 = 0.0;
 var $1215 = 0.0, $1216 = 0.0, $1217 = 0.0, $1218 = 0.0, $1219 = 0.0, $122 = 0, $1220 = 0.0, $1221 = 0.0, $1222 = 0.0, $1223 = 0.0, $1224 = 0.0, $1225 = 0.0, $1226 = 0.0, $1227 = 0.0, $1228 = 0.0, $1229 = 0.0, $123 = 0, $1230 = 0.0, $1231 = 0.0, $1232 = 0.0;
 var $1233 = 0.0, $1234 = 0.0, $1235 = 0.0, $1236 = 0.0, $1237 = 0.0, $1238 = 0.0, $1239 = 0.0, $124 = 0, $1240 = 0.0, $1241 = 0.0, $1242 = 0.0, $1243 = 0.0, $1244 = 0.0, $1245 = 0.0, $1246 = 0.0, $1247 = 0.0, $1248 = 0.0, $1249 = 0.0, $125 = 0.0, $1250 = 0.0;
 var $1251 = 0.0, $1252 = 0.0, $1253 = 0.0, $1254 = 0.0, $1255 = 0.0, $1256 = 0.0, $1257 = 0.0, $1258 = 0.0, $1259 = 0.0, $126 = 0.0, $1260 = 0.0, $1261 = 0.0, $1262 = 0.0, $1263 = 0.0, $1264 = 0.0, $1265 = 0.0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0.0, $1270 = 0.0, $1271 = 0, $1272 = 0.0, $1273 = 0.0, $1274 = 0.0, $1275 = 0.0, $1276 = 0, $1277 = 0.0, $1278 = 0.0, $1279 = 0.0, $128 = 0.0, $1280 = 0.0, $1281 = 0, $1282 = 0.0, $1283 = 0.0, $1284 = 0.0, $1285 = 0.0, $1286 = 0, $1287 = 0.0;
 var $1288 = 0.0, $1289 = 0.0, $129 = 0.0, $1290 = 0.0, $1291 = 0, $1292 = 0.0, $1293 = 0.0, $1294 = 0.0, $1295 = 0.0, $1296 = 0, $1297 = 0.0, $1298 = 0.0, $1299 = 0.0, $13 = 0.0, $130 = 0.0, $1300 = 0.0, $1301 = 0, $1302 = 0.0, $1303 = 0.0, $1304 = 0.0;
 var $1305 = 0.0, $1306 = 0, $1307 = 0.0, $1308 = 0.0, $1309 = 0.0, $131 = 0.0, $1310 = 0.0, $1311 = 0, $1312 = 0.0, $1313 = 0.0, $1314 = 0.0, $1315 = 0.0, $1316 = 0, $1317 = 0, $1318 = 0.0, $1319 = 0, $132 = 0.0, $1320 = 0.0, $1321 = 0.0, $1322 = 0.0;
 var $1323 = 0.0, $1324 = 0, $1325 = 0.0, $1326 = 0.0, $1327 = 0.0, $1328 = 0.0, $1329 = 0, $133 = 0.0, $1330 = 0.0, $1331 = 0.0, $1332 = 0.0, $1333 = 0.0, $1334 = 0, $1335 = 0.0, $1336 = 0.0, $1337 = 0.0, $1338 = 0.0, $1339 = 0, $134 = 0.0, $1340 = 0.0;
 var $1341 = 0.0, $1342 = 0.0, $1343 = 0.0, $1344 = 0, $1345 = 0.0, $1346 = 0.0, $1347 = 0.0, $1348 = 0.0, $1349 = 0, $135 = 0.0, $1350 = 0.0, $1351 = 0.0, $1352 = 0.0, $1353 = 0.0, $1354 = 0, $1355 = 0.0, $1356 = 0.0, $1357 = 0.0, $1358 = 0.0, $1359 = 0;
 var $136 = 0.0, $1360 = 0.0, $1361 = 0.0, $1362 = 0.0, $1363 = 0.0, $1364 = 0, $1365 = 0.0, $1366 = 0.0, $1367 = 0.0, $1368 = 0.0, $1369 = 0, $137 = 0.0, $1370 = 0, $1371 = 0.0, $1372 = 0, $1373 = 0.0, $1374 = 0.0, $1375 = 0.0, $1376 = 0.0, $1377 = 0;
 var $1378 = 0.0, $1379 = 0.0, $138 = 0.0, $1380 = 0.0, $1381 = 0.0, $1382 = 0, $1383 = 0.0, $1384 = 0.0, $1385 = 0.0, $1386 = 0.0, $1387 = 0, $1388 = 0.0, $1389 = 0.0, $139 = 0.0, $1390 = 0.0, $1391 = 0.0, $1392 = 0, $1393 = 0.0, $1394 = 0.0, $1395 = 0.0;
 var $1396 = 0.0, $1397 = 0, $1398 = 0.0, $1399 = 0.0, $14 = 0.0, $140 = 0.0, $1400 = 0.0, $1401 = 0.0, $1402 = 0, $1403 = 0.0, $1404 = 0.0, $1405 = 0.0, $1406 = 0.0, $1407 = 0, $1408 = 0.0, $1409 = 0.0, $141 = 0.0, $1410 = 0.0, $1411 = 0.0, $1412 = 0;
 var $1413 = 0.0, $1414 = 0.0, $1415 = 0.0, $1416 = 0.0, $1417 = 0, $1418 = 0.0, $1419 = 0.0, $142 = 0.0, $1420 = 0.0, $1421 = 0.0, $1422 = 0, $1423 = 0.0, $1424 = 0.0, $1425 = 0.0, $1426 = 0.0, $1427 = 0, $1428 = 0, $1429 = 0.0, $143 = 0.0, $1430 = 0;
 var $1431 = 0.0, $1432 = 0.0, $1433 = 0.0, $1434 = 0.0, $1435 = 0, $1436 = 0.0, $1437 = 0.0, $1438 = 0.0, $1439 = 0.0, $144 = 0.0, $1440 = 0, $1441 = 0.0, $1442 = 0.0, $1443 = 0.0, $1444 = 0.0, $1445 = 0, $1446 = 0.0, $1447 = 0.0, $1448 = 0.0, $1449 = 0.0;
 var $145 = 0.0, $1450 = 0, $1451 = 0.0, $1452 = 0.0, $1453 = 0.0, $1454 = 0.0, $1455 = 0, $1456 = 0.0, $1457 = 0.0, $1458 = 0.0, $1459 = 0.0, $146 = 0.0, $1460 = 0, $1461 = 0.0, $1462 = 0.0, $1463 = 0.0, $1464 = 0.0, $1465 = 0, $1466 = 0.0, $1467 = 0.0;
 var $1468 = 0.0, $1469 = 0.0, $147 = 0.0, $1470 = 0, $1471 = 0.0, $1472 = 0.0, $1473 = 0.0, $1474 = 0.0, $1475 = 0, $1476 = 0.0, $1477 = 0.0, $1478 = 0.0, $1479 = 0.0, $148 = 0.0, $1480 = 0, $1481 = 0.0, $1482 = 0.0, $1483 = 0.0, $1484 = 0.0, $1485 = 0;
 var $1486 = 0, $1487 = 0.0, $1488 = 0, $1489 = 0.0, $149 = 0.0, $1490 = 0.0, $1491 = 0.0, $1492 = 0.0, $1493 = 0, $1494 = 0.0, $1495 = 0.0, $1496 = 0.0, $1497 = 0.0, $1498 = 0, $1499 = 0.0, $15 = 0.0, $150 = 0.0, $1500 = 0.0, $1501 = 0.0, $1502 = 0.0;
 var $1503 = 0, $1504 = 0.0, $1505 = 0.0, $1506 = 0.0, $1507 = 0.0, $1508 = 0, $1509 = 0.0, $151 = 0.0, $1510 = 0.0, $1511 = 0.0, $1512 = 0.0, $1513 = 0, $1514 = 0.0, $1515 = 0.0, $1516 = 0.0, $1517 = 0.0, $1518 = 0, $1519 = 0.0, $152 = 0.0, $1520 = 0.0;
 var $1521 = 0.0, $1522 = 0.0, $1523 = 0, $1524 = 0.0, $1525 = 0.0, $1526 = 0.0, $1527 = 0.0, $1528 = 0, $1529 = 0.0, $153 = 0.0, $1530 = 0.0, $1531 = 0.0, $1532 = 0.0, $1533 = 0, $1534 = 0.0, $1535 = 0.0, $1536 = 0.0, $1537 = 0.0, $1538 = 0, $1539 = 0.0;
 var $154 = 0.0, $1540 = 0.0, $1541 = 0.0, $1542 = 0.0, $1543 = 0, $1544 = 0, $1545 = 0.0, $1546 = 0, $1547 = 0.0, $1548 = 0.0, $1549 = 0.0, $155 = 0.0, $1550 = 0.0, $1551 = 0, $1552 = 0.0, $1553 = 0.0, $1554 = 0.0, $1555 = 0.0, $1556 = 0, $1557 = 0.0;
 var $1558 = 0.0, $1559 = 0.0, $156 = 0.0, $1560 = 0.0, $1561 = 0, $1562 = 0.0, $1563 = 0.0, $1564 = 0.0, $1565 = 0.0, $1566 = 0, $1567 = 0.0, $1568 = 0.0, $1569 = 0.0, $157 = 0.0, $1570 = 0.0, $1571 = 0, $1572 = 0.0, $1573 = 0.0, $1574 = 0.0, $1575 = 0.0;
 var $1576 = 0, $1577 = 0.0, $1578 = 0.0, $1579 = 0.0, $158 = 0, $1580 = 0.0, $1581 = 0, $1582 = 0.0, $1583 = 0.0, $1584 = 0.0, $1585 = 0.0, $1586 = 0, $1587 = 0.0, $1588 = 0.0, $1589 = 0.0, $159 = 0.0, $1590 = 0.0, $1591 = 0, $1592 = 0.0, $1593 = 0.0;
 var $1594 = 0.0, $1595 = 0.0, $1596 = 0, $1597 = 0, $1598 = 0.0, $1599 = 0, $16 = 0.0, $160 = 0.0, $1600 = 0.0, $1601 = 0.0, $1602 = 0.0, $1603 = 0.0, $1604 = 0, $1605 = 0.0, $1606 = 0.0, $1607 = 0.0, $1608 = 0.0, $1609 = 0, $161 = 0.0, $1610 = 0.0;
 var $1611 = 0.0, $1612 = 0.0, $1613 = 0.0, $1614 = 0, $1615 = 0.0, $1616 = 0.0, $1617 = 0.0, $1618 = 0.0, $1619 = 0, $162 = 0, $1620 = 0.0, $1621 = 0.0, $1622 = 0.0, $1623 = 0.0, $1624 = 0, $1625 = 0.0, $1626 = 0.0, $1627 = 0.0, $1628 = 0.0, $1629 = 0;
 var $163 = 0.0, $1630 = 0, $1631 = 0.0, $1632 = 0, $1633 = 0.0, $1634 = 0.0, $1635 = 0.0, $1636 = 0.0, $1637 = 0, $1638 = 0.0, $1639 = 0.0, $164 = 0.0, $1640 = 0.0, $1641 = 0.0, $1642 = 0, $1643 = 0.0, $1644 = 0.0, $1645 = 0.0, $1646 = 0.0, $1647 = 0;
 var $1648 = 0.0, $1649 = 0.0, $165 = 0.0, $1650 = 0.0, $1651 = 0.0, $1652 = 0, $1653 = 0.0, $1654 = 0.0, $1655 = 0.0, $1656 = 0.0, $1657 = 0, $1658 = 0.0, $1659 = 0.0, $166 = 0.0, $1660 = 0.0, $1661 = 0.0, $1662 = 0, $1663 = 0.0, $1664 = 0.0, $1665 = 0.0;
 var $1666 = 0.0, $1667 = 0, $1668 = 0.0, $1669 = 0.0, $167 = 0.0, $1670 = 0.0, $1671 = 0.0, $1672 = 0, $1673 = 0.0, $1674 = 0.0, $1675 = 0.0, $1676 = 0.0, $1677 = 0, $1678 = 0.0, $1679 = 0.0, $168 = 0.0, $1680 = 0.0, $1681 = 0.0, $1682 = 0, $1683 = 0.0;
 var $1684 = 0.0, $1685 = 0.0, $1686 = 0.0, $1687 = 0, $1688 = 0, $1689 = 0.0, $169 = 0, $1690 = 0.0, $1691 = 0.0, $1692 = 0, $1693 = 0, $1694 = 0.0, $1695 = 0.0, $1696 = 0, $1697 = 0, $1698 = 0.0, $1699 = 0.0, $17 = 0.0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0.0, $1706 = 0, $1707 = 0.0, $1708 = 0.0, $1709 = 0, $171 = 0, $1710 = 0.0, $1711 = 0, $1712 = 0.0, $1713 = 0.0, $1714 = 0.0, $1715 = 0, $1716 = 0.0, $1717 = 0, $1718 = 0.0, $1719 = 0.0;
 var $172 = 0, $1720 = 0.0, $1721 = 0.0, $1722 = 0, $1723 = 0.0, $1724 = 0, $1725 = 0.0, $1726 = 0.0, $1727 = 0.0, $1728 = 0, $1729 = 0.0, $173 = 0.0, $1730 = 0, $1731 = 0.0, $1732 = 0.0, $1733 = 0, $1734 = 0.0, $1735 = 0, $1736 = 0.0, $1737 = 0.0;
 var $1738 = 0.0, $1739 = 0.0, $174 = 0, $1740 = 0.0, $1741 = 0, $1742 = 0.0, $1743 = 0, $1744 = 0.0, $1745 = 0.0, $1746 = 0, $1747 = 0.0, $1748 = 0, $1749 = 0.0, $175 = 0, $1750 = 0.0, $1751 = 0.0, $1752 = 0.0, $1753 = 0.0, $1754 = 0.0, $1755 = 0.0;
 var $1756 = 0.0, $1757 = 0.0, $1758 = 0.0, $1759 = 0.0, $176 = 0.0, $1760 = 0.0, $1761 = 0, $1762 = 0.0, $1763 = 0.0, $1764 = 0.0, $1765 = 0.0, $1766 = 0.0, $1767 = 0.0, $1768 = 0.0, $1769 = 0, $177 = 0.0, $1770 = 0.0, $1771 = 0.0, $1772 = 0.0, $1773 = 0.0;
 var $1774 = 0, $1775 = 0.0, $1776 = 0, $1777 = 0.0, $1778 = 0.0, $1779 = 0.0, $178 = 0, $1780 = 0.0, $1781 = 0.0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0.0, $1788 = 0.0, $1789 = 0.0, $179 = 0, $1790 = 0, $1791 = 0.0;
 var $1792 = 0, $1793 = 0.0, $1794 = 0.0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0.0, $180 = 0, $1800 = 0.0, $1801 = 0.0, $1802 = 0.0, $1803 = 0.0, $1804 = 0.0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0.0;
 var $181 = 0, $1810 = 0.0, $1811 = 0.0, $1812 = 0.0, $1813 = 0.0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0.0, $1818 = 0, $1819 = 0, $182 = 0.0, $1820 = 0.0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0.0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0.0, $183 = 0, $1830 = 0.0, $1831 = 0, $1832 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0;
 var $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0;
 var $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0;
 var $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0, $3 = 0.0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0;
 var $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0;
 var $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0;
 var $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0;
 var $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0;
 var $378 = 0.0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0;
 var $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0, $4 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0;
 var $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0;
 var $431 = 0.0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0.0, $449 = 0.0;
 var $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0;
 var $468 = 0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0;
 var $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0;
 var $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0;
 var $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0.0;
 var $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0;
 var $558 = 0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0, $574 = 0.0, $575 = 0.0;
 var $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0.0, $591 = 0, $592 = 0.0, $593 = 0.0;
 var $594 = 0.0, $595 = 0.0, $596 = 0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0.0, $60 = 0.0, $600 = 0.0, $601 = 0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0.0, $610 = 0.0;
 var $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0.0, $621 = 0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0;
 var $63 = 0.0, $630 = 0.0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0.0, $640 = 0.0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0, $65 = 0.0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0.0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0, $665 = 0.0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0.0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0;
 var $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0, $7 = 0.0, $70 = 0.0, $700 = 0.0;
 var $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0, $71 = 0.0, $710 = 0, $711 = 0.0, $712 = 0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0, $718 = 0.0, $719 = 0.0;
 var $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0.0, $732 = 0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0;
 var $738 = 0.0, $739 = 0.0, $74 = 0.0, $740 = 0.0, $741 = 0.0, $742 = 0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0, $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0.0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0.0;
 var $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0.0, $76 = 0.0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0.0, $77 = 0.0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0;
 var $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0.0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0.0, $790 = 0.0, $791 = 0.0;
 var $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0.0, $80 = 0.0, $800 = 0, $801 = 0.0, $802 = 0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0, $808 = 0.0, $809 = 0.0;
 var $81 = 0.0, $810 = 0.0, $811 = 0.0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0, $818 = 0.0, $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0.0, $822 = 0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0;
 var $828 = 0.0, $829 = 0.0, $83 = 0.0, $830 = 0.0, $831 = 0.0, $832 = 0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0.0, $839 = 0.0, $84 = 0.0, $840 = 0.0, $841 = 0.0, $842 = 0, $843 = 0.0, $844 = 0.0, $845 = 0.0;
 var $846 = 0.0, $847 = 0, $848 = 0, $849 = 0.0, $85 = 0.0, $850 = 0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0.0, $855 = 0, $856 = 0.0, $857 = 0.0, $858 = 0.0, $859 = 0.0, $86 = 0.0, $860 = 0, $861 = 0.0, $862 = 0.0, $863 = 0.0;
 var $864 = 0.0, $865 = 0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0.0, $87 = 0.0, $870 = 0, $871 = 0.0, $872 = 0.0, $873 = 0.0, $874 = 0.0, $875 = 0, $876 = 0.0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0.0, $880 = 0, $881 = 0.0;
 var $882 = 0.0, $883 = 0.0, $884 = 0.0, $885 = 0, $886 = 0.0, $887 = 0.0, $888 = 0.0, $889 = 0.0, $89 = 0.0, $890 = 0, $891 = 0.0, $892 = 0.0, $893 = 0.0, $894 = 0.0, $895 = 0, $896 = 0, $897 = 0.0, $898 = 0, $899 = 0.0, $9 = 0.0;
 var $90 = 0.0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0, $904 = 0.0, $905 = 0.0, $906 = 0.0, $907 = 0.0, $908 = 0, $909 = 0.0, $91 = 0.0, $910 = 0.0, $911 = 0.0, $912 = 0.0, $913 = 0, $914 = 0.0, $915 = 0.0, $916 = 0.0, $917 = 0.0;
 var $918 = 0, $919 = 0.0, $92 = 0.0, $920 = 0.0, $921 = 0.0, $922 = 0.0, $923 = 0, $924 = 0.0, $925 = 0.0, $926 = 0.0, $927 = 0.0, $928 = 0, $929 = 0.0, $93 = 0.0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0, $934 = 0.0, $935 = 0.0;
 var $936 = 0.0, $937 = 0.0, $938 = 0, $939 = 0.0, $94 = 0.0, $940 = 0.0, $941 = 0.0, $942 = 0.0, $943 = 0, $944 = 0.0, $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0, $949 = 0.0, $95 = 0.0, $950 = 0.0, $951 = 0.0, $952 = 0.0, $953 = 0;
 var $954 = 0.0, $955 = 0.0, $956 = 0.0, $957 = 0.0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0.0, $961 = 0, $962 = 0.0, $963 = 0.0, $964 = 0.0, $965 = 0.0, $966 = 0, $967 = 0.0, $968 = 0.0, $969 = 0.0, $97 = 0.0, $970 = 0.0, $971 = 0;
 var $972 = 0.0, $973 = 0.0, $974 = 0.0, $975 = 0.0, $976 = 0, $977 = 0.0, $978 = 0.0, $979 = 0.0, $98 = 0.0, $980 = 0.0, $981 = 0, $982 = 0.0, $983 = 0.0, $984 = 0.0, $985 = 0.0, $986 = 0, $987 = 0.0, $988 = 0.0, $989 = 0.0, $99 = 0;
 var $990 = 0.0, $991 = 0, $992 = 0.0, $993 = 0.0, $994 = 0.0, $995 = 0.0, $996 = 0, $997 = 0.0, $998 = 0.0, $999 = 0.0, $or$cond = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4864|0);
 $vararg_buffer = sp + 4848|0;
 $5 = sp + 3032|0;
 $26 = sp + 2688|0;
 $27 = sp + 2624|0;
 $28 = sp + 2512|0;
 $29 = sp + 2400|0;
 $30 = sp + 2288|0;
 $31 = sp + 2176|0;
 $32 = sp + 2064|0;
 $33 = sp + 1952|0;
 $34 = sp + 1872|0;
 $35 = sp + 1760|0;
 $36 = sp + 1648|0;
 $37 = sp + 1536|0;
 $38 = sp + 1424|0;
 $39 = sp + 1312|0;
 $40 = sp + 1200|0;
 $41 = sp + 1088|0;
 $42 = sp + 992|0;
 $43 = sp + 896|0;
 $44 = sp + 784|0;
 $45 = sp + 688|0;
 $46 = sp + 576|0;
 $47 = sp + 464|0;
 $48 = sp + 352|0;
 $49 = sp + 240|0;
 $50 = sp + 160|0;
 $51 = sp + 112|0;
 $52 = sp + 64|0;
 $53 = sp;
 $3 = $1;
 $4 = $2;
 $73 = $3;
 $6 = $73;
 $74 = $4;
 $7 = $74;
 $8 = 0.02;
 $9 = 0.050000000000000003;
 $10 = 0.12;
 $11 = 0.050000000000000003;
 $12 = 0.22;
 $13 = 0.050000000000000003;
 $14 = 0.10000000000000001;
 $15 = 1.0;
 $16 = 0.20000000000000001;
 $17 = 1.0;
 $18 = 0.29999999999999999;
 $19 = 1.0;
 $75 = $14;
 $76 = $8;
 $77 = $75 - $76;
 $78 = 2.0 / $77;
 $20 = $78;
 $79 = $16;
 $80 = $10;
 $81 = $79 - $80;
 $82 = 2.0 / $81;
 $21 = $82;
 $83 = $18;
 $84 = $12;
 $85 = $83 - $84;
 $86 = 2.0 / $85;
 $22 = $86;
 $87 = $15;
 $88 = $9;
 $89 = $87 - $88;
 $90 = 2.0 / $89;
 $23 = $90;
 $91 = $17;
 $92 = $11;
 $93 = $91 - $92;
 $94 = 2.0 / $93;
 $24 = $94;
 $95 = $19;
 $96 = $13;
 $97 = $95 - $96;
 $98 = 2.0 / $97;
 $25 = $98;
 dest=$26; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $99 = ((($26)) + 8|0);
 HEAPF64[$99>>3] = 1.0;
 $100 = ((($26)) + 16|0);
 HEAPF64[$100>>3] = 0.5;
 $101 = ((($26)) + 24|0);
 HEAPF64[$101>>3] = 0.33333332999999998;
 $102 = ((($26)) + 32|0);
 HEAPF64[$102>>3] = 0.25;
 $103 = ((($26)) + 40|0);
 HEAPF64[$103>>3] = 0.20000000000000001;
 dest=$27; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $104 = ((($27)) + 16|0);
 HEAPF64[$104>>3] = 0.16666666999999999;
 $105 = ((($27)) + 24|0);
 HEAPF64[$105>>3] = 0.041666666999999998;
 $106 = ((($27)) + 32|0);
 HEAPF64[$106>>3] = 0.0083333333000000005;
 $107 = ((($27)) + 40|0);
 HEAPF64[$107>>3] = 0.013888889;
 $108 = ((($27)) + 48|0);
 HEAPF64[$108>>3] = 0.0069444444000000003;
 $109 = ((($27)) + 56|0);
 HEAPF64[$109>>3] = 7.7160493000000003E-4;
 dest=$28; src=9072; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$29; src=9184; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$30; src=9296; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$31; src=9408; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$32; src=9520; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$33; src=9632; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$34; src=9744; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$35; src=9824; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$36; src=9936; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$37; src=10048; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$38; src=10160; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$39; src=10272; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$40; src=10384; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$41; src=10496; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$42; src=10608; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$43; src=10704; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$44; src=10800; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$45; src=10912; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$46; src=11008; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$47; src=11120; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$48; src=11232; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$49; src=11344; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$50; src=11456; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $110 = ((($5)) + 1792|0);
 HEAP32[$110>>2] = 0;
 $111 = $6;
 $112 = $111 < 0.0099999997764825821;
 $113 = $6;
 $114 = $113 > 12.0;
 $or$cond = $112 | $114;
 do {
  if ($or$cond) {
   $115 = HEAP32[17818]|0;
   $116 = $6;
   HEAPF64[$vararg_buffer>>3] = $116;
   (_fprintf($115,79086,$vararg_buffer)|0);
   $117 = $6;
   $118 = $117 < 0.01;
   if ($118) {
    $6 = 0.01;
    break;
   }
   $119 = $6;
   $120 = $119 > 12.0;
   if ($120) {
    $6 = 12.0;
   }
  }
 } while(0);
 $121 = $6;
 $122 = $121 >= 0.28999999165534973;
 do {
  if ($122) {
   $123 = ((($5)) + 1792|0);
   HEAP32[$123>>2] = 1;
   $124 = ((($5)) + 1796|0);
   HEAP32[$124>>2] = 100;
   $125 = $6;
   $126 = (+Math_sqrt((+$125)));
   $127 = 1.0 / $126;
   $69 = $127;
   $128 = $7;
   $129 = -0.032226999999999999 * $128;
   $130 = $129 - 0.074274999999999994;
   $131 = $6;
   $132 = $130 * $131;
   $133 = $7;
   $134 = 0.24532999999999999 * $133;
   $135 = $134 + 0.070152000000000006;
   $136 = $69;
   $137 = $135 * $136;
   $138 = $132 + $137;
   $139 = $7;
   $140 = -0.55610000000000004 * $139;
   $141 = $140 - 3.1579000000000002;
   $142 = $138 + $141;
   HEAPF64[$5>>3] = $142;
   $143 = $7;
   $144 = -0.013483 * $143;
   $145 = $144 - 0.048800999999999997;
   $146 = $6;
   $147 = $145 * $146;
   $148 = $7;
   $149 = -1.6920999999999999 * $148;
   $150 = $149 + 8.3656000000000006;
   $151 = $69;
   $152 = $150 * $151;
   $153 = $147 + $152;
   $154 = $7;
   $155 = -0.73275000000000001 * $154;
   $156 = $155 - 3.5226000000000002;
   $157 = $153 + $156;
   $158 = ((($5)) + 64|0);
   HEAPF64[$158>>3] = $157;
   $159 = $69;
   $160 = $69;
   $161 = $159 * $160;
   $162 = ((($51)) + 8|0);
   HEAPF64[$162>>3] = $161;
   $163 = $6;
   $164 = $7;
   $165 = 0.5 * $164;
   $166 = 1.0 - $165;
   $167 = $163 / $166;
   $168 = (+Math_sqrt((+$167)));
   $169 = ((($52)) + 8|0);
   HEAPF64[$169>>3] = $168;
   $54 = 1;
   while(1) {
    $170 = $54;
    $171 = ($170|0)<=(4);
    if (!($171)) {
     break;
    }
    $172 = ((($51)) + 8|0);
    $173 = +HEAPF64[$172>>3];
    $174 = $54;
    $175 = (($51) + ($174<<3)|0);
    $176 = +HEAPF64[$175>>3];
    $177 = $173 * $176;
    $178 = $54;
    $179 = (($178) + 1)|0;
    $180 = (($51) + ($179<<3)|0);
    HEAPF64[$180>>3] = $177;
    $181 = ((($52)) + 8|0);
    $182 = +HEAPF64[$181>>3];
    $183 = $54;
    $184 = (($52) + ($183<<3)|0);
    $185 = +HEAPF64[$184>>3];
    $186 = $182 * $185;
    $187 = $54;
    $188 = (($187) + 1)|0;
    $189 = (($52) + ($188<<3)|0);
    HEAPF64[$189>>3] = $186;
    $190 = $54;
    $191 = (($26) + ($190<<3)|0);
    $192 = +HEAPF64[$191>>3];
    $193 = $7;
    $194 = $54;
    $195 = (($194) + 1)|0;
    $196 = (($26) + ($195<<3)|0);
    $197 = +HEAPF64[$196>>3];
    $198 = $193 * $197;
    $199 = $192 - $198;
    $200 = $54;
    $201 = (($51) + ($200<<3)|0);
    $202 = +HEAPF64[$201>>3];
    $203 = $199 * $202;
    $204 = $54;
    $205 = (($204) + 1)|0;
    $206 = (($53) + ($205<<3)|0);
    HEAPF64[$206>>3] = $203;
    $207 = $54;
    $208 = (($207) + 1)|0;
    $54 = $208;
   }
   $209 = $6;
   $210 = (+Math_log((+$209)));
   $211 = $7;
   $212 = $210 + $211;
   $213 = $212 + 0.42278433999999998;
   $214 = ((($5)) + 112|0);
   HEAPF64[$214>>3] = $213;
   $215 = ((($52)) + 8|0);
   $216 = +HEAPF64[$215>>3];
   $217 = ((($5)) + 112|0);
   $218 = ((($217)) + 8|0);
   HEAPF64[$218>>3] = $216;
   $219 = ((($53)) + 24|0);
   $220 = +HEAPF64[$219>>3];
   $221 = ((($52)) + 24|0);
   $222 = +HEAPF64[$221>>3];
   $223 = $220 * $222;
   $224 = ((($5)) + 112|0);
   $225 = ((($224)) + 16|0);
   HEAPF64[$225>>3] = $223;
   $226 = ((($53)) + 16|0);
   $227 = +HEAPF64[$226>>3];
   $228 = 3.0 * $227;
   $229 = ((($53)) + 16|0);
   $230 = +HEAPF64[$229>>3];
   $231 = $228 * $230;
   $232 = ((($53)) + 32|0);
   $233 = +HEAPF64[$232>>3];
   $234 = $231 + $233;
   $235 = ((($52)) + 32|0);
   $236 = +HEAPF64[$235>>3];
   $237 = $234 * $236;
   $238 = $237 - 3.0;
   $239 = ((($5)) + 112|0);
   $240 = ((($239)) + 24|0);
   HEAPF64[$240>>3] = $238;
   $241 = ((($53)) + 16|0);
   $242 = +HEAPF64[$241>>3];
   $243 = 10.0 * $242;
   $244 = ((($53)) + 24|0);
   $245 = +HEAPF64[$244>>3];
   $246 = $243 * $245;
   $247 = ((($53)) + 40|0);
   $248 = +HEAPF64[$247>>3];
   $249 = $246 + $248;
   $250 = ((($52)) + 40|0);
   $251 = +HEAPF64[$250>>3];
   $252 = $249 * $251;
   $253 = ((($5)) + 112|0);
   $254 = ((($253)) + 16|0);
   $255 = +HEAPF64[$254>>3];
   $256 = 10.0 * $255;
   $257 = $252 - $256;
   $258 = ((($5)) + 112|0);
   $259 = ((($258)) + 32|0);
   HEAPF64[$259>>3] = $257;
   $260 = ((($5)) + 112|0);
   $261 = ((($260)) + 16|0);
   $262 = +HEAPF64[$261>>3];
   $263 = ((($5)) + 112|0);
   $264 = ((($263)) + 16|0);
   $265 = +HEAPF64[$264>>3];
   $266 = $262 * $265;
   $267 = ((($5)) + 112|0);
   $268 = ((($267)) + 40|0);
   HEAPF64[$268>>3] = $266;
   $269 = ((($5)) + 112|0);
   $270 = ((($269)) + 16|0);
   $271 = +HEAPF64[$270>>3];
   $272 = ((($5)) + 112|0);
   $273 = ((($272)) + 24|0);
   $274 = +HEAPF64[$273>>3];
   $275 = $271 * $274;
   $276 = ((($5)) + 112|0);
   $277 = ((($276)) + 48|0);
   HEAPF64[$277>>3] = $275;
   $278 = ((($5)) + 112|0);
   $279 = ((($278)) + 16|0);
   $280 = +HEAPF64[$279>>3];
   $281 = ((($5)) + 112|0);
   $282 = ((($281)) + 40|0);
   $283 = +HEAPF64[$282>>3];
   $284 = $280 * $283;
   $285 = ((($5)) + 112|0);
   $286 = ((($285)) + 56|0);
   HEAPF64[$286>>3] = $284;
   $54 = 2;
   while(1) {
    $287 = $54;
    $288 = ($287|0)<=(7);
    if (!($288)) {
     break;
    }
    $289 = $54;
    $290 = (($27) + ($289<<3)|0);
    $291 = +HEAPF64[$290>>3];
    $292 = ((($5)) + 112|0);
    $293 = $54;
    $294 = (($292) + ($293<<3)|0);
    $295 = +HEAPF64[$294>>3];
    $296 = $295 * $291;
    HEAPF64[$294>>3] = $296;
    $297 = $54;
    $298 = (($297) + 1)|0;
    $54 = $298;
   }
   $299 = ((($5)) + 112|0);
   $300 = ((($299)) + 8|0);
   $301 = +HEAPF64[$300>>3];
   $302 = 0.39894227999999998 * $301;
   $303 = ((($5)) + 112|0);
   $304 = ((($303)) + 64|0);
   HEAPF64[$304>>3] = $302;
  } else {
   $305 = $6;
   $306 = $305 >= 0.2199999988079071;
   if ($306) {
    $307 = ((($5)) + 1792|0);
    HEAP32[$307>>2] = 2;
    $308 = ((($5)) + 1796|0);
    HEAP32[$308>>2] = 150;
    $309 = $6;
    $310 = $18;
    $311 = $309 - $310;
    $312 = $22;
    $313 = $311 * $312;
    $314 = 1.0 + $313;
    $55 = $314;
    $315 = $7;
    $316 = (+Math_sqrt((+$315)));
    $317 = $19;
    $318 = $316 - $317;
    $319 = $25;
    $320 = $318 * $319;
    $321 = 1.0 + $320;
    $56 = $321;
    $322 = $55;
    $323 = 2.0 * $322;
    $57 = $323;
    $324 = $56;
    $325 = 2.0 * $324;
    $58 = $325;
    $326 = $57;
    $327 = $55;
    $328 = $326 * $327;
    $329 = $328 - 1.0;
    $59 = $329;
    $330 = $57;
    $331 = $59;
    $332 = $330 * $331;
    $333 = $55;
    $334 = $332 - $333;
    $60 = $334;
    $335 = $58;
    $336 = $56;
    $337 = $335 * $336;
    $338 = $337 - 1.0;
    $61 = $338;
    $339 = $58;
    $340 = $61;
    $341 = $339 * $340;
    $342 = $56;
    $343 = $341 - $342;
    $62 = $343;
    $344 = $55;
    $345 = $56;
    $346 = $344 * $345;
    $63 = $346;
    $347 = $59;
    $348 = $56;
    $349 = $347 * $348;
    $64 = $349;
    $350 = $60;
    $351 = $56;
    $352 = $350 * $351;
    $65 = $352;
    $353 = $61;
    $354 = $55;
    $355 = $353 * $354;
    $66 = $355;
    $356 = $62;
    $357 = $55;
    $358 = $356 * $357;
    $67 = $358;
    $359 = $59;
    $360 = $61;
    $361 = $359 * $360;
    $68 = $361;
    $362 = ((($44)) + 8|0);
    $363 = +HEAPF64[$362>>3];
    $364 = ((($44)) + 16|0);
    $365 = +HEAPF64[$364>>3];
    $366 = $55;
    $367 = $365 * $366;
    $368 = $363 + $367;
    $369 = ((($44)) + 32|0);
    $370 = +HEAPF64[$369>>3];
    $371 = $60;
    $372 = $370 * $371;
    $373 = $368 + $372;
    $374 = ((($44)) + 40|0);
    $375 = +HEAPF64[$374>>3];
    $376 = $56;
    $377 = $375 * $376;
    $378 = $373 + $377;
    $379 = ((($44)) + 48|0);
    $380 = +HEAPF64[$379>>3];
    $381 = $61;
    $382 = $380 * $381;
    $383 = $378 + $382;
    $384 = ((($44)) + 56|0);
    $385 = +HEAPF64[$384>>3];
    $386 = $62;
    $387 = $385 * $386;
    $388 = $383 + $387;
    $389 = ((($44)) + 64|0);
    $390 = +HEAPF64[$389>>3];
    $391 = $63;
    $392 = $390 * $391;
    $393 = $388 + $392;
    $394 = ((($44)) + 72|0);
    $395 = +HEAPF64[$394>>3];
    $396 = $64;
    $397 = $395 * $396;
    $398 = $393 + $397;
    $399 = ((($44)) + 80|0);
    $400 = +HEAPF64[$399>>3];
    $401 = $65;
    $402 = $400 * $401;
    $403 = $398 + $402;
    $404 = ((($44)) + 88|0);
    $405 = +HEAPF64[$404>>3];
    $406 = $66;
    $407 = $405 * $406;
    $408 = $403 + $407;
    $409 = ((($44)) + 96|0);
    $410 = +HEAPF64[$409>>3];
    $411 = $67;
    $412 = $410 * $411;
    $413 = $408 + $412;
    $414 = ((($44)) + 104|0);
    $415 = +HEAPF64[$414>>3];
    $416 = $68;
    $417 = $415 * $416;
    $418 = $413 + $417;
    $419 = ((($5)) + 8|0);
    HEAPF64[$419>>3] = $418;
    $420 = ((($45)) + 8|0);
    $421 = +HEAPF64[$420>>3];
    $422 = ((($45)) + 16|0);
    $423 = +HEAPF64[$422>>3];
    $424 = $55;
    $425 = $423 * $424;
    $426 = $421 + $425;
    $427 = ((($45)) + 24|0);
    $428 = +HEAPF64[$427>>3];
    $429 = $59;
    $430 = $428 * $429;
    $431 = $426 + $430;
    $432 = ((($45)) + 32|0);
    $433 = +HEAPF64[$432>>3];
    $434 = $60;
    $435 = $433 * $434;
    $436 = $431 + $435;
    $437 = ((($45)) + 40|0);
    $438 = +HEAPF64[$437>>3];
    $439 = $56;
    $440 = $438 * $439;
    $441 = $436 + $440;
    $442 = ((($45)) + 48|0);
    $443 = +HEAPF64[$442>>3];
    $444 = $61;
    $445 = $443 * $444;
    $446 = $441 + $445;
    $447 = ((($45)) + 64|0);
    $448 = +HEAPF64[$447>>3];
    $449 = $63;
    $450 = $448 * $449;
    $451 = $446 + $450;
    $452 = ((($45)) + 72|0);
    $453 = +HEAPF64[$452>>3];
    $454 = $64;
    $455 = $453 * $454;
    $456 = $451 + $455;
    $457 = ((($45)) + 80|0);
    $458 = +HEAPF64[$457>>3];
    $459 = $65;
    $460 = $458 * $459;
    $461 = $456 + $460;
    $462 = ((($45)) + 88|0);
    $463 = +HEAPF64[$462>>3];
    $464 = $66;
    $465 = $463 * $464;
    $466 = $461 + $465;
    $467 = ((($5)) + 16|0);
    HEAPF64[$467>>3] = $466;
    $468 = ((($46)) + 8|0);
    $469 = +HEAPF64[$468>>3];
    $470 = ((($46)) + 24|0);
    $471 = +HEAPF64[$470>>3];
    $472 = $59;
    $473 = $471 * $472;
    $474 = $469 + $473;
    $475 = ((($46)) + 32|0);
    $476 = +HEAPF64[$475>>3];
    $477 = $60;
    $478 = $476 * $477;
    $479 = $474 + $478;
    $480 = ((($46)) + 40|0);
    $481 = +HEAPF64[$480>>3];
    $482 = $56;
    $483 = $481 * $482;
    $484 = $479 + $483;
    $485 = ((($46)) + 48|0);
    $486 = +HEAPF64[$485>>3];
    $487 = $61;
    $488 = $486 * $487;
    $489 = $484 + $488;
    $490 = ((($46)) + 56|0);
    $491 = +HEAPF64[$490>>3];
    $492 = $62;
    $493 = $491 * $492;
    $494 = $489 + $493;
    $495 = ((($46)) + 64|0);
    $496 = +HEAPF64[$495>>3];
    $497 = $63;
    $498 = $496 * $497;
    $499 = $494 + $498;
    $500 = ((($46)) + 72|0);
    $501 = +HEAPF64[$500>>3];
    $502 = $64;
    $503 = $501 * $502;
    $504 = $499 + $503;
    $505 = ((($46)) + 80|0);
    $506 = +HEAPF64[$505>>3];
    $507 = $65;
    $508 = $506 * $507;
    $509 = $504 + $508;
    $510 = ((($46)) + 88|0);
    $511 = +HEAPF64[$510>>3];
    $512 = $66;
    $513 = $511 * $512;
    $514 = $509 + $513;
    $515 = ((($46)) + 96|0);
    $516 = +HEAPF64[$515>>3];
    $517 = $67;
    $518 = $516 * $517;
    $519 = $514 + $518;
    $520 = ((($46)) + 104|0);
    $521 = +HEAPF64[$520>>3];
    $522 = $68;
    $523 = $521 * $522;
    $524 = $519 + $523;
    $525 = ((($5)) + 24|0);
    HEAPF64[$525>>3] = $524;
    $526 = ((($47)) + 8|0);
    $527 = +HEAPF64[$526>>3];
    $528 = ((($47)) + 16|0);
    $529 = +HEAPF64[$528>>3];
    $530 = $55;
    $531 = $529 * $530;
    $532 = $527 + $531;
    $533 = ((($47)) + 24|0);
    $534 = +HEAPF64[$533>>3];
    $535 = $59;
    $536 = $534 * $535;
    $537 = $532 + $536;
    $538 = ((($47)) + 32|0);
    $539 = +HEAPF64[$538>>3];
    $540 = $60;
    $541 = $539 * $540;
    $542 = $537 + $541;
    $543 = ((($47)) + 40|0);
    $544 = +HEAPF64[$543>>3];
    $545 = $56;
    $546 = $544 * $545;
    $547 = $542 + $546;
    $548 = ((($47)) + 48|0);
    $549 = +HEAPF64[$548>>3];
    $550 = $61;
    $551 = $549 * $550;
    $552 = $547 + $551;
    $553 = ((($47)) + 56|0);
    $554 = +HEAPF64[$553>>3];
    $555 = $62;
    $556 = $554 * $555;
    $557 = $552 + $556;
    $558 = ((($47)) + 64|0);
    $559 = +HEAPF64[$558>>3];
    $560 = $63;
    $561 = $559 * $560;
    $562 = $557 + $561;
    $563 = ((($47)) + 72|0);
    $564 = +HEAPF64[$563>>3];
    $565 = $64;
    $566 = $564 * $565;
    $567 = $562 + $566;
    $568 = ((($47)) + 80|0);
    $569 = +HEAPF64[$568>>3];
    $570 = $65;
    $571 = $569 * $570;
    $572 = $567 + $571;
    $573 = ((($47)) + 88|0);
    $574 = +HEAPF64[$573>>3];
    $575 = $66;
    $576 = $574 * $575;
    $577 = $572 + $576;
    $578 = ((($47)) + 96|0);
    $579 = +HEAPF64[$578>>3];
    $580 = $67;
    $581 = $579 * $580;
    $582 = $577 + $581;
    $583 = ((($47)) + 104|0);
    $584 = +HEAPF64[$583>>3];
    $585 = $68;
    $586 = $584 * $585;
    $587 = $582 + $586;
    $588 = ((($5)) + 32|0);
    HEAPF64[$588>>3] = $587;
    $589 = ((($48)) + 8|0);
    $590 = +HEAPF64[$589>>3];
    $591 = ((($48)) + 16|0);
    $592 = +HEAPF64[$591>>3];
    $593 = $55;
    $594 = $592 * $593;
    $595 = $590 + $594;
    $596 = ((($48)) + 32|0);
    $597 = +HEAPF64[$596>>3];
    $598 = $60;
    $599 = $597 * $598;
    $600 = $595 + $599;
    $601 = ((($48)) + 40|0);
    $602 = +HEAPF64[$601>>3];
    $603 = $56;
    $604 = $602 * $603;
    $605 = $600 + $604;
    $606 = ((($48)) + 48|0);
    $607 = +HEAPF64[$606>>3];
    $608 = $61;
    $609 = $607 * $608;
    $610 = $605 + $609;
    $611 = ((($48)) + 56|0);
    $612 = +HEAPF64[$611>>3];
    $613 = $62;
    $614 = $612 * $613;
    $615 = $610 + $614;
    $616 = ((($48)) + 64|0);
    $617 = +HEAPF64[$616>>3];
    $618 = $63;
    $619 = $617 * $618;
    $620 = $615 + $619;
    $621 = ((($48)) + 72|0);
    $622 = +HEAPF64[$621>>3];
    $623 = $64;
    $624 = $622 * $623;
    $625 = $620 + $624;
    $626 = ((($48)) + 80|0);
    $627 = +HEAPF64[$626>>3];
    $628 = $65;
    $629 = $627 * $628;
    $630 = $625 + $629;
    $631 = ((($48)) + 88|0);
    $632 = +HEAPF64[$631>>3];
    $633 = $66;
    $634 = $632 * $633;
    $635 = $630 + $634;
    $636 = ((($48)) + 96|0);
    $637 = +HEAPF64[$636>>3];
    $638 = $67;
    $639 = $637 * $638;
    $640 = $635 + $639;
    $641 = ((($48)) + 104|0);
    $642 = +HEAPF64[$641>>3];
    $643 = $68;
    $644 = $642 * $643;
    $645 = $640 + $644;
    $646 = ((($5)) + 40|0);
    HEAPF64[$646>>3] = $645;
    $647 = ((($49)) + 8|0);
    $648 = +HEAPF64[$647>>3];
    $649 = ((($49)) + 16|0);
    $650 = +HEAPF64[$649>>3];
    $651 = $55;
    $652 = $650 * $651;
    $653 = $648 + $652;
    $654 = ((($49)) + 24|0);
    $655 = +HEAPF64[$654>>3];
    $656 = $59;
    $657 = $655 * $656;
    $658 = $653 + $657;
    $659 = ((($49)) + 32|0);
    $660 = +HEAPF64[$659>>3];
    $661 = $60;
    $662 = $660 * $661;
    $663 = $658 + $662;
    $664 = ((($49)) + 40|0);
    $665 = +HEAPF64[$664>>3];
    $666 = $56;
    $667 = $665 * $666;
    $668 = $663 + $667;
    $669 = ((($49)) + 48|0);
    $670 = +HEAPF64[$669>>3];
    $671 = $61;
    $672 = $670 * $671;
    $673 = $668 + $672;
    $674 = ((($49)) + 56|0);
    $675 = +HEAPF64[$674>>3];
    $676 = $62;
    $677 = $675 * $676;
    $678 = $673 + $677;
    $679 = ((($49)) + 64|0);
    $680 = +HEAPF64[$679>>3];
    $681 = $63;
    $682 = $680 * $681;
    $683 = $678 + $682;
    $684 = ((($49)) + 72|0);
    $685 = +HEAPF64[$684>>3];
    $686 = $64;
    $687 = $685 * $686;
    $688 = $683 + $687;
    $689 = ((($49)) + 80|0);
    $690 = +HEAPF64[$689>>3];
    $691 = $65;
    $692 = $690 * $691;
    $693 = $688 + $692;
    $694 = ((($49)) + 88|0);
    $695 = +HEAPF64[$694>>3];
    $696 = $66;
    $697 = $695 * $696;
    $698 = $693 + $697;
    $699 = ((($49)) + 96|0);
    $700 = +HEAPF64[$699>>3];
    $701 = $67;
    $702 = $700 * $701;
    $703 = $698 + $702;
    $704 = ((($49)) + 104|0);
    $705 = +HEAPF64[$704>>3];
    $706 = $68;
    $707 = $705 * $706;
    $708 = $703 + $707;
    $709 = ((($5)) + 48|0);
    HEAPF64[$709>>3] = $708;
    $710 = ((($50)) + 8|0);
    $711 = +HEAPF64[$710>>3];
    $712 = ((($50)) + 16|0);
    $713 = +HEAPF64[$712>>3];
    $714 = $55;
    $715 = $713 * $714;
    $716 = $711 + $715;
    $717 = ((($50)) + 24|0);
    $718 = +HEAPF64[$717>>3];
    $719 = $59;
    $720 = $718 * $719;
    $721 = $716 + $720;
    $722 = ((($50)) + 40|0);
    $723 = +HEAPF64[$722>>3];
    $724 = $56;
    $725 = $723 * $724;
    $726 = $721 + $725;
    $727 = ((($50)) + 48|0);
    $728 = +HEAPF64[$727>>3];
    $729 = $61;
    $730 = $728 * $729;
    $731 = $726 + $730;
    $732 = ((($50)) + 56|0);
    $733 = +HEAPF64[$732>>3];
    $734 = $62;
    $735 = $733 * $734;
    $736 = $731 + $735;
    $737 = ((($50)) + 64|0);
    $738 = +HEAPF64[$737>>3];
    $739 = $63;
    $740 = $738 * $739;
    $741 = $736 + $740;
    $742 = ((($5)) + 64|0);
    HEAPF64[$742>>3] = $741;
    HEAPF64[$5>>3] = -3.0499999999999998;
    break;
   }
   $743 = $6;
   $744 = $743 >= 0.11999999731779099;
   $745 = ((($5)) + 1792|0);
   if ($744) {
    HEAP32[$745>>2] = 3;
    $746 = ((($5)) + 1796|0);
    HEAP32[$746>>2] = 200;
    $747 = $6;
    $748 = $16;
    $749 = $747 - $748;
    $750 = $21;
    $751 = $749 * $750;
    $752 = 1.0 + $751;
    $55 = $752;
    $753 = $7;
    $754 = (+Math_sqrt((+$753)));
    $755 = $17;
    $756 = $754 - $755;
    $757 = $24;
    $758 = $756 * $757;
    $759 = 1.0 + $758;
    $56 = $759;
    $760 = $55;
    $761 = 2.0 * $760;
    $57 = $761;
    $762 = $56;
    $763 = 2.0 * $762;
    $58 = $763;
    $764 = $57;
    $765 = $55;
    $766 = $764 * $765;
    $767 = $766 - 1.0;
    $59 = $767;
    $768 = $57;
    $769 = $59;
    $770 = $768 * $769;
    $771 = $55;
    $772 = $770 - $771;
    $60 = $772;
    $773 = $58;
    $774 = $56;
    $775 = $773 * $774;
    $776 = $775 - 1.0;
    $61 = $776;
    $777 = $58;
    $778 = $61;
    $779 = $777 * $778;
    $780 = $56;
    $781 = $779 - $780;
    $62 = $781;
    $782 = $55;
    $783 = $56;
    $784 = $782 * $783;
    $63 = $784;
    $785 = $59;
    $786 = $56;
    $787 = $785 * $786;
    $64 = $787;
    $788 = $60;
    $789 = $56;
    $790 = $788 * $789;
    $65 = $790;
    $791 = $61;
    $792 = $55;
    $793 = $791 * $792;
    $66 = $793;
    $794 = $62;
    $795 = $55;
    $796 = $794 * $795;
    $67 = $796;
    $797 = $59;
    $798 = $61;
    $799 = $797 * $798;
    $68 = $799;
    $800 = ((($36)) + 8|0);
    $801 = +HEAPF64[$800>>3];
    $802 = ((($36)) + 16|0);
    $803 = +HEAPF64[$802>>3];
    $804 = $55;
    $805 = $803 * $804;
    $806 = $801 + $805;
    $807 = ((($36)) + 24|0);
    $808 = +HEAPF64[$807>>3];
    $809 = $59;
    $810 = $808 * $809;
    $811 = $806 + $810;
    $812 = ((($36)) + 40|0);
    $813 = +HEAPF64[$812>>3];
    $814 = $56;
    $815 = $813 * $814;
    $816 = $811 + $815;
    $817 = ((($36)) + 48|0);
    $818 = +HEAPF64[$817>>3];
    $819 = $61;
    $820 = $818 * $819;
    $821 = $816 + $820;
    $822 = ((($36)) + 56|0);
    $823 = +HEAPF64[$822>>3];
    $824 = $62;
    $825 = $823 * $824;
    $826 = $821 + $825;
    $827 = ((($36)) + 72|0);
    $828 = +HEAPF64[$827>>3];
    $829 = $64;
    $830 = $828 * $829;
    $831 = $826 + $830;
    $832 = ((($36)) + 80|0);
    $833 = +HEAPF64[$832>>3];
    $834 = $65;
    $835 = $833 * $834;
    $836 = $831 + $835;
    $837 = ((($36)) + 88|0);
    $838 = +HEAPF64[$837>>3];
    $839 = $66;
    $840 = $838 * $839;
    $841 = $836 + $840;
    $842 = ((($36)) + 96|0);
    $843 = +HEAPF64[$842>>3];
    $844 = $67;
    $845 = $843 * $844;
    $846 = $841 + $845;
    $847 = ((($5)) + 8|0);
    HEAPF64[$847>>3] = $846;
    $848 = ((($37)) + 8|0);
    $849 = +HEAPF64[$848>>3];
    $850 = ((($37)) + 16|0);
    $851 = +HEAPF64[$850>>3];
    $852 = $55;
    $853 = $851 * $852;
    $854 = $849 + $853;
    $855 = ((($37)) + 24|0);
    $856 = +HEAPF64[$855>>3];
    $857 = $59;
    $858 = $856 * $857;
    $859 = $854 + $858;
    $860 = ((($37)) + 40|0);
    $861 = +HEAPF64[$860>>3];
    $862 = $56;
    $863 = $861 * $862;
    $864 = $859 + $863;
    $865 = ((($37)) + 48|0);
    $866 = +HEAPF64[$865>>3];
    $867 = $61;
    $868 = $866 * $867;
    $869 = $864 + $868;
    $870 = ((($37)) + 56|0);
    $871 = +HEAPF64[$870>>3];
    $872 = $62;
    $873 = $871 * $872;
    $874 = $869 + $873;
    $875 = ((($37)) + 64|0);
    $876 = +HEAPF64[$875>>3];
    $877 = $63;
    $878 = $876 * $877;
    $879 = $874 + $878;
    $880 = ((($37)) + 72|0);
    $881 = +HEAPF64[$880>>3];
    $882 = $64;
    $883 = $881 * $882;
    $884 = $879 + $883;
    $885 = ((($37)) + 88|0);
    $886 = +HEAPF64[$885>>3];
    $887 = $66;
    $888 = $886 * $887;
    $889 = $884 + $888;
    $890 = ((($37)) + 96|0);
    $891 = +HEAPF64[$890>>3];
    $892 = $67;
    $893 = $891 * $892;
    $894 = $889 + $893;
    $895 = ((($5)) + 16|0);
    HEAPF64[$895>>3] = $894;
    $896 = ((($38)) + 8|0);
    $897 = +HEAPF64[$896>>3];
    $898 = ((($38)) + 16|0);
    $899 = +HEAPF64[$898>>3];
    $900 = $55;
    $901 = $899 * $900;
    $902 = $897 + $901;
    $903 = ((($38)) + 24|0);
    $904 = +HEAPF64[$903>>3];
    $905 = $59;
    $906 = $904 * $905;
    $907 = $902 + $906;
    $908 = ((($38)) + 32|0);
    $909 = +HEAPF64[$908>>3];
    $910 = $60;
    $911 = $909 * $910;
    $912 = $907 + $911;
    $913 = ((($38)) + 40|0);
    $914 = +HEAPF64[$913>>3];
    $915 = $56;
    $916 = $914 * $915;
    $917 = $912 + $916;
    $918 = ((($38)) + 48|0);
    $919 = +HEAPF64[$918>>3];
    $920 = $61;
    $921 = $919 * $920;
    $922 = $917 + $921;
    $923 = ((($38)) + 56|0);
    $924 = +HEAPF64[$923>>3];
    $925 = $62;
    $926 = $924 * $925;
    $927 = $922 + $926;
    $928 = ((($38)) + 64|0);
    $929 = +HEAPF64[$928>>3];
    $930 = $63;
    $931 = $929 * $930;
    $932 = $927 + $931;
    $933 = ((($38)) + 72|0);
    $934 = +HEAPF64[$933>>3];
    $935 = $64;
    $936 = $934 * $935;
    $937 = $932 + $936;
    $938 = ((($38)) + 80|0);
    $939 = +HEAPF64[$938>>3];
    $940 = $65;
    $941 = $939 * $940;
    $942 = $937 + $941;
    $943 = ((($38)) + 88|0);
    $944 = +HEAPF64[$943>>3];
    $945 = $66;
    $946 = $944 * $945;
    $947 = $942 + $946;
    $948 = ((($38)) + 96|0);
    $949 = +HEAPF64[$948>>3];
    $950 = $67;
    $951 = $949 * $950;
    $952 = $947 + $951;
    $953 = ((($38)) + 104|0);
    $954 = +HEAPF64[$953>>3];
    $955 = $68;
    $956 = $954 * $955;
    $957 = $952 + $956;
    $958 = ((($5)) + 24|0);
    HEAPF64[$958>>3] = $957;
    $959 = ((($39)) + 8|0);
    $960 = +HEAPF64[$959>>3];
    $961 = ((($39)) + 16|0);
    $962 = +HEAPF64[$961>>3];
    $963 = $55;
    $964 = $962 * $963;
    $965 = $960 + $964;
    $966 = ((($39)) + 24|0);
    $967 = +HEAPF64[$966>>3];
    $968 = $59;
    $969 = $967 * $968;
    $970 = $965 + $969;
    $971 = ((($39)) + 32|0);
    $972 = +HEAPF64[$971>>3];
    $973 = $60;
    $974 = $972 * $973;
    $975 = $970 + $974;
    $976 = ((($39)) + 40|0);
    $977 = +HEAPF64[$976>>3];
    $978 = $56;
    $979 = $977 * $978;
    $980 = $975 + $979;
    $981 = ((($39)) + 48|0);
    $982 = +HEAPF64[$981>>3];
    $983 = $61;
    $984 = $982 * $983;
    $985 = $980 + $984;
    $986 = ((($39)) + 56|0);
    $987 = +HEAPF64[$986>>3];
    $988 = $62;
    $989 = $987 * $988;
    $990 = $985 + $989;
    $991 = ((($39)) + 64|0);
    $992 = +HEAPF64[$991>>3];
    $993 = $63;
    $994 = $992 * $993;
    $995 = $990 + $994;
    $996 = ((($39)) + 72|0);
    $997 = +HEAPF64[$996>>3];
    $998 = $64;
    $999 = $997 * $998;
    $1000 = $995 + $999;
    $1001 = ((($39)) + 80|0);
    $1002 = +HEAPF64[$1001>>3];
    $1003 = $65;
    $1004 = $1002 * $1003;
    $1005 = $1000 + $1004;
    $1006 = ((($39)) + 88|0);
    $1007 = +HEAPF64[$1006>>3];
    $1008 = $66;
    $1009 = $1007 * $1008;
    $1010 = $1005 + $1009;
    $1011 = ((($39)) + 96|0);
    $1012 = +HEAPF64[$1011>>3];
    $1013 = $67;
    $1014 = $1012 * $1013;
    $1015 = $1010 + $1014;
    $1016 = ((($5)) + 32|0);
    HEAPF64[$1016>>3] = $1015;
    $1017 = ((($40)) + 8|0);
    $1018 = +HEAPF64[$1017>>3];
    $1019 = ((($40)) + 16|0);
    $1020 = +HEAPF64[$1019>>3];
    $1021 = $55;
    $1022 = $1020 * $1021;
    $1023 = $1018 + $1022;
    $1024 = ((($40)) + 24|0);
    $1025 = +HEAPF64[$1024>>3];
    $1026 = $59;
    $1027 = $1025 * $1026;
    $1028 = $1023 + $1027;
    $1029 = ((($40)) + 32|0);
    $1030 = +HEAPF64[$1029>>3];
    $1031 = $60;
    $1032 = $1030 * $1031;
    $1033 = $1028 + $1032;
    $1034 = ((($40)) + 40|0);
    $1035 = +HEAPF64[$1034>>3];
    $1036 = $56;
    $1037 = $1035 * $1036;
    $1038 = $1033 + $1037;
    $1039 = ((($40)) + 48|0);
    $1040 = +HEAPF64[$1039>>3];
    $1041 = $61;
    $1042 = $1040 * $1041;
    $1043 = $1038 + $1042;
    $1044 = ((($40)) + 56|0);
    $1045 = +HEAPF64[$1044>>3];
    $1046 = $62;
    $1047 = $1045 * $1046;
    $1048 = $1043 + $1047;
    $1049 = ((($40)) + 64|0);
    $1050 = +HEAPF64[$1049>>3];
    $1051 = $63;
    $1052 = $1050 * $1051;
    $1053 = $1048 + $1052;
    $1054 = ((($40)) + 88|0);
    $1055 = +HEAPF64[$1054>>3];
    $1056 = $66;
    $1057 = $1055 * $1056;
    $1058 = $1053 + $1057;
    $1059 = ((($40)) + 96|0);
    $1060 = +HEAPF64[$1059>>3];
    $1061 = $67;
    $1062 = $1060 * $1061;
    $1063 = $1058 + $1062;
    $1064 = ((($40)) + 104|0);
    $1065 = +HEAPF64[$1064>>3];
    $1066 = $68;
    $1067 = $1065 * $1066;
    $1068 = $1063 + $1067;
    $1069 = ((($5)) + 40|0);
    HEAPF64[$1069>>3] = $1068;
    $1070 = ((($41)) + 8|0);
    $1071 = +HEAPF64[$1070>>3];
    $1072 = ((($41)) + 16|0);
    $1073 = +HEAPF64[$1072>>3];
    $1074 = $55;
    $1075 = $1073 * $1074;
    $1076 = $1071 + $1075;
    $1077 = ((($41)) + 24|0);
    $1078 = +HEAPF64[$1077>>3];
    $1079 = $59;
    $1080 = $1078 * $1079;
    $1081 = $1076 + $1080;
    $1082 = ((($41)) + 32|0);
    $1083 = +HEAPF64[$1082>>3];
    $1084 = $60;
    $1085 = $1083 * $1084;
    $1086 = $1081 + $1085;
    $1087 = ((($41)) + 40|0);
    $1088 = +HEAPF64[$1087>>3];
    $1089 = $56;
    $1090 = $1088 * $1089;
    $1091 = $1086 + $1090;
    $1092 = ((($41)) + 48|0);
    $1093 = +HEAPF64[$1092>>3];
    $1094 = $61;
    $1095 = $1093 * $1094;
    $1096 = $1091 + $1095;
    $1097 = ((($41)) + 56|0);
    $1098 = +HEAPF64[$1097>>3];
    $1099 = $62;
    $1100 = $1098 * $1099;
    $1101 = $1096 + $1100;
    $1102 = ((($41)) + 64|0);
    $1103 = +HEAPF64[$1102>>3];
    $1104 = $63;
    $1105 = $1103 * $1104;
    $1106 = $1101 + $1105;
    $1107 = ((($41)) + 72|0);
    $1108 = +HEAPF64[$1107>>3];
    $1109 = $64;
    $1110 = $1108 * $1109;
    $1111 = $1106 + $1110;
    $1112 = ((($41)) + 80|0);
    $1113 = +HEAPF64[$1112>>3];
    $1114 = $65;
    $1115 = $1113 * $1114;
    $1116 = $1111 + $1115;
    $1117 = ((($41)) + 88|0);
    $1118 = +HEAPF64[$1117>>3];
    $1119 = $66;
    $1120 = $1118 * $1119;
    $1121 = $1116 + $1120;
    $1122 = ((($41)) + 96|0);
    $1123 = +HEAPF64[$1122>>3];
    $1124 = $67;
    $1125 = $1123 * $1124;
    $1126 = $1121 + $1125;
    $1127 = ((($41)) + 104|0);
    $1128 = +HEAPF64[$1127>>3];
    $1129 = $68;
    $1130 = $1128 * $1129;
    $1131 = $1126 + $1130;
    $1132 = ((($5)) + 48|0);
    HEAPF64[$1132>>3] = $1131;
    $1133 = ((($42)) + 8|0);
    $1134 = +HEAPF64[$1133>>3];
    $1135 = ((($42)) + 16|0);
    $1136 = +HEAPF64[$1135>>3];
    $1137 = $55;
    $1138 = $1136 * $1137;
    $1139 = $1134 + $1138;
    $1140 = ((($42)) + 24|0);
    $1141 = +HEAPF64[$1140>>3];
    $1142 = $59;
    $1143 = $1141 * $1142;
    $1144 = $1139 + $1143;
    $1145 = ((($42)) + 40|0);
    $1146 = +HEAPF64[$1145>>3];
    $1147 = $56;
    $1148 = $1146 * $1147;
    $1149 = $1144 + $1148;
    $1150 = ((($42)) + 48|0);
    $1151 = +HEAPF64[$1150>>3];
    $1152 = $61;
    $1153 = $1151 * $1152;
    $1154 = $1149 + $1153;
    $1155 = ((($42)) + 56|0);
    $1156 = +HEAPF64[$1155>>3];
    $1157 = $62;
    $1158 = $1156 * $1157;
    $1159 = $1154 + $1158;
    $1160 = ((($42)) + 64|0);
    $1161 = +HEAPF64[$1160>>3];
    $1162 = $63;
    $1163 = $1161 * $1162;
    $1164 = $1159 + $1163;
    $1165 = ((($42)) + 88|0);
    $1166 = +HEAPF64[$1165>>3];
    $1167 = $66;
    $1168 = $1166 * $1167;
    $1169 = $1164 + $1168;
    $1170 = ((($5)) + 56|0);
    HEAPF64[$1170>>3] = $1169;
    $1171 = ((($43)) + 8|0);
    $1172 = +HEAPF64[$1171>>3];
    $1173 = ((($43)) + 16|0);
    $1174 = +HEAPF64[$1173>>3];
    $1175 = $55;
    $1176 = $1174 * $1175;
    $1177 = $1172 + $1176;
    $1178 = ((($43)) + 24|0);
    $1179 = +HEAPF64[$1178>>3];
    $1180 = $59;
    $1181 = $1179 * $1180;
    $1182 = $1177 + $1181;
    $1183 = ((($43)) + 40|0);
    $1184 = +HEAPF64[$1183>>3];
    $1185 = $56;
    $1186 = $1184 * $1185;
    $1187 = $1182 + $1186;
    $1188 = ((($43)) + 48|0);
    $1189 = +HEAPF64[$1188>>3];
    $1190 = $61;
    $1191 = $1189 * $1190;
    $1192 = $1187 + $1191;
    $1193 = ((($43)) + 56|0);
    $1194 = +HEAPF64[$1193>>3];
    $1195 = $62;
    $1196 = $1194 * $1195;
    $1197 = $1192 + $1196;
    $1198 = ((($43)) + 64|0);
    $1199 = +HEAPF64[$1198>>3];
    $1200 = $63;
    $1201 = $1199 * $1200;
    $1202 = $1197 + $1201;
    $1203 = ((($43)) + 88|0);
    $1204 = +HEAPF64[$1203>>3];
    $1205 = $66;
    $1206 = $1204 * $1205;
    $1207 = $1202 + $1206;
    $1208 = ((($5)) + 64|0);
    HEAPF64[$1208>>3] = $1207;
    HEAPF64[$5>>3] = -3.04;
    break;
   }
   HEAP32[$745>>2] = 4;
   $1209 = $6;
   $1210 = $1209 >= 0.019999999552965164;
   if ($1210) {
    $1211 = ((($5)) + 1792|0);
    HEAP32[$1211>>2] = 3;
   }
   $1212 = ((($5)) + 1796|0);
   HEAP32[$1212>>2] = 200;
   $1213 = $6;
   $1214 = $14;
   $1215 = $1213 - $1214;
   $1216 = $20;
   $1217 = $1215 * $1216;
   $1218 = 1.0 + $1217;
   $55 = $1218;
   $1219 = $7;
   $1220 = (+Math_sqrt((+$1219)));
   $1221 = $15;
   $1222 = $1220 - $1221;
   $1223 = $23;
   $1224 = $1222 * $1223;
   $1225 = 1.0 + $1224;
   $56 = $1225;
   $1226 = $55;
   $1227 = 2.0 * $1226;
   $57 = $1227;
   $1228 = $56;
   $1229 = 2.0 * $1228;
   $58 = $1229;
   $1230 = $57;
   $1231 = $55;
   $1232 = $1230 * $1231;
   $1233 = $1232 - 1.0;
   $59 = $1233;
   $1234 = $57;
   $1235 = $59;
   $1236 = $1234 * $1235;
   $1237 = $55;
   $1238 = $1236 - $1237;
   $60 = $1238;
   $1239 = $58;
   $1240 = $56;
   $1241 = $1239 * $1240;
   $1242 = $1241 - 1.0;
   $61 = $1242;
   $1243 = $58;
   $1244 = $61;
   $1245 = $1243 * $1244;
   $1246 = $56;
   $1247 = $1245 - $1246;
   $62 = $1247;
   $1248 = $55;
   $1249 = $56;
   $1250 = $1248 * $1249;
   $63 = $1250;
   $1251 = $59;
   $1252 = $56;
   $1253 = $1251 * $1252;
   $64 = $1253;
   $1254 = $60;
   $1255 = $56;
   $1256 = $1254 * $1255;
   $65 = $1256;
   $1257 = $61;
   $1258 = $55;
   $1259 = $1257 * $1258;
   $66 = $1259;
   $1260 = $62;
   $1261 = $55;
   $1262 = $1260 * $1261;
   $67 = $1262;
   $1263 = $59;
   $1264 = $61;
   $1265 = $1263 * $1264;
   $68 = $1265;
   $1266 = ((($5)) + 1792|0);
   $1267 = HEAP32[$1266>>2]|0;
   $1268 = ($1267|0)==(3);
   if ($1268) {
    $1269 = ((($28)) + 8|0);
    $1270 = +HEAPF64[$1269>>3];
    $1271 = ((($28)) + 16|0);
    $1272 = +HEAPF64[$1271>>3];
    $1273 = $55;
    $1274 = $1272 * $1273;
    $1275 = $1270 + $1274;
    $1276 = ((($28)) + 24|0);
    $1277 = +HEAPF64[$1276>>3];
    $1278 = $59;
    $1279 = $1277 * $1278;
    $1280 = $1275 + $1279;
    $1281 = ((($28)) + 40|0);
    $1282 = +HEAPF64[$1281>>3];
    $1283 = $56;
    $1284 = $1282 * $1283;
    $1285 = $1280 + $1284;
    $1286 = ((($28)) + 48|0);
    $1287 = +HEAPF64[$1286>>3];
    $1288 = $61;
    $1289 = $1287 * $1288;
    $1290 = $1285 + $1289;
    $1291 = ((($28)) + 56|0);
    $1292 = +HEAPF64[$1291>>3];
    $1293 = $62;
    $1294 = $1292 * $1293;
    $1295 = $1290 + $1294;
    $1296 = ((($28)) + 64|0);
    $1297 = +HEAPF64[$1296>>3];
    $1298 = $63;
    $1299 = $1297 * $1298;
    $1300 = $1295 + $1299;
    $1301 = ((($28)) + 80|0);
    $1302 = +HEAPF64[$1301>>3];
    $1303 = $65;
    $1304 = $1302 * $1303;
    $1305 = $1300 + $1304;
    $1306 = ((($28)) + 96|0);
    $1307 = +HEAPF64[$1306>>3];
    $1308 = $67;
    $1309 = $1307 * $1308;
    $1310 = $1305 + $1309;
    $1311 = ((($28)) + 104|0);
    $1312 = +HEAPF64[$1311>>3];
    $1313 = $68;
    $1314 = $1312 * $1313;
    $1315 = $1310 + $1314;
    $1316 = ((($5)) + 8|0);
    HEAPF64[$1316>>3] = $1315;
    $1317 = ((($29)) + 8|0);
    $1318 = +HEAPF64[$1317>>3];
    $1319 = ((($29)) + 16|0);
    $1320 = +HEAPF64[$1319>>3];
    $1321 = $55;
    $1322 = $1320 * $1321;
    $1323 = $1318 + $1322;
    $1324 = ((($29)) + 24|0);
    $1325 = +HEAPF64[$1324>>3];
    $1326 = $59;
    $1327 = $1325 * $1326;
    $1328 = $1323 + $1327;
    $1329 = ((($29)) + 40|0);
    $1330 = +HEAPF64[$1329>>3];
    $1331 = $56;
    $1332 = $1330 * $1331;
    $1333 = $1328 + $1332;
    $1334 = ((($29)) + 48|0);
    $1335 = +HEAPF64[$1334>>3];
    $1336 = $61;
    $1337 = $1335 * $1336;
    $1338 = $1333 + $1337;
    $1339 = ((($29)) + 56|0);
    $1340 = +HEAPF64[$1339>>3];
    $1341 = $62;
    $1342 = $1340 * $1341;
    $1343 = $1338 + $1342;
    $1344 = ((($29)) + 64|0);
    $1345 = +HEAPF64[$1344>>3];
    $1346 = $63;
    $1347 = $1345 * $1346;
    $1348 = $1343 + $1347;
    $1349 = ((($29)) + 72|0);
    $1350 = +HEAPF64[$1349>>3];
    $1351 = $64;
    $1352 = $1350 * $1351;
    $1353 = $1348 + $1352;
    $1354 = ((($29)) + 80|0);
    $1355 = +HEAPF64[$1354>>3];
    $1356 = $65;
    $1357 = $1355 * $1356;
    $1358 = $1353 + $1357;
    $1359 = ((($29)) + 96|0);
    $1360 = +HEAPF64[$1359>>3];
    $1361 = $67;
    $1362 = $1360 * $1361;
    $1363 = $1358 + $1362;
    $1364 = ((($29)) + 104|0);
    $1365 = +HEAPF64[$1364>>3];
    $1366 = $68;
    $1367 = $1365 * $1366;
    $1368 = $1363 + $1367;
    $1369 = ((($5)) + 16|0);
    HEAPF64[$1369>>3] = $1368;
    $1370 = ((($30)) + 8|0);
    $1371 = +HEAPF64[$1370>>3];
    $1372 = ((($30)) + 16|0);
    $1373 = +HEAPF64[$1372>>3];
    $1374 = $55;
    $1375 = $1373 * $1374;
    $1376 = $1371 + $1375;
    $1377 = ((($30)) + 24|0);
    $1378 = +HEAPF64[$1377>>3];
    $1379 = $59;
    $1380 = $1378 * $1379;
    $1381 = $1376 + $1380;
    $1382 = ((($30)) + 40|0);
    $1383 = +HEAPF64[$1382>>3];
    $1384 = $56;
    $1385 = $1383 * $1384;
    $1386 = $1381 + $1385;
    $1387 = ((($30)) + 48|0);
    $1388 = +HEAPF64[$1387>>3];
    $1389 = $61;
    $1390 = $1388 * $1389;
    $1391 = $1386 + $1390;
    $1392 = ((($30)) + 56|0);
    $1393 = +HEAPF64[$1392>>3];
    $1394 = $62;
    $1395 = $1393 * $1394;
    $1396 = $1391 + $1395;
    $1397 = ((($30)) + 64|0);
    $1398 = +HEAPF64[$1397>>3];
    $1399 = $63;
    $1400 = $1398 * $1399;
    $1401 = $1396 + $1400;
    $1402 = ((($30)) + 72|0);
    $1403 = +HEAPF64[$1402>>3];
    $1404 = $64;
    $1405 = $1403 * $1404;
    $1406 = $1401 + $1405;
    $1407 = ((($30)) + 80|0);
    $1408 = +HEAPF64[$1407>>3];
    $1409 = $65;
    $1410 = $1408 * $1409;
    $1411 = $1406 + $1410;
    $1412 = ((($30)) + 88|0);
    $1413 = +HEAPF64[$1412>>3];
    $1414 = $66;
    $1415 = $1413 * $1414;
    $1416 = $1411 + $1415;
    $1417 = ((($30)) + 96|0);
    $1418 = +HEAPF64[$1417>>3];
    $1419 = $67;
    $1420 = $1418 * $1419;
    $1421 = $1416 + $1420;
    $1422 = ((($30)) + 104|0);
    $1423 = +HEAPF64[$1422>>3];
    $1424 = $68;
    $1425 = $1423 * $1424;
    $1426 = $1421 + $1425;
    $1427 = ((($5)) + 24|0);
    HEAPF64[$1427>>3] = $1426;
    $1428 = ((($31)) + 8|0);
    $1429 = +HEAPF64[$1428>>3];
    $1430 = ((($31)) + 16|0);
    $1431 = +HEAPF64[$1430>>3];
    $1432 = $55;
    $1433 = $1431 * $1432;
    $1434 = $1429 + $1433;
    $1435 = ((($31)) + 24|0);
    $1436 = +HEAPF64[$1435>>3];
    $1437 = $59;
    $1438 = $1436 * $1437;
    $1439 = $1434 + $1438;
    $1440 = ((($31)) + 32|0);
    $1441 = +HEAPF64[$1440>>3];
    $1442 = $60;
    $1443 = $1441 * $1442;
    $1444 = $1439 + $1443;
    $1445 = ((($31)) + 40|0);
    $1446 = +HEAPF64[$1445>>3];
    $1447 = $56;
    $1448 = $1446 * $1447;
    $1449 = $1444 + $1448;
    $1450 = ((($31)) + 48|0);
    $1451 = +HEAPF64[$1450>>3];
    $1452 = $61;
    $1453 = $1451 * $1452;
    $1454 = $1449 + $1453;
    $1455 = ((($31)) + 56|0);
    $1456 = +HEAPF64[$1455>>3];
    $1457 = $62;
    $1458 = $1456 * $1457;
    $1459 = $1454 + $1458;
    $1460 = ((($31)) + 64|0);
    $1461 = +HEAPF64[$1460>>3];
    $1462 = $63;
    $1463 = $1461 * $1462;
    $1464 = $1459 + $1463;
    $1465 = ((($31)) + 72|0);
    $1466 = +HEAPF64[$1465>>3];
    $1467 = $64;
    $1468 = $1466 * $1467;
    $1469 = $1464 + $1468;
    $1470 = ((($31)) + 80|0);
    $1471 = +HEAPF64[$1470>>3];
    $1472 = $65;
    $1473 = $1471 * $1472;
    $1474 = $1469 + $1473;
    $1475 = ((($31)) + 88|0);
    $1476 = +HEAPF64[$1475>>3];
    $1477 = $66;
    $1478 = $1476 * $1477;
    $1479 = $1474 + $1478;
    $1480 = ((($31)) + 96|0);
    $1481 = +HEAPF64[$1480>>3];
    $1482 = $67;
    $1483 = $1481 * $1482;
    $1484 = $1479 + $1483;
    $1485 = ((($5)) + 32|0);
    HEAPF64[$1485>>3] = $1484;
    $1486 = ((($32)) + 8|0);
    $1487 = +HEAPF64[$1486>>3];
    $1488 = ((($32)) + 16|0);
    $1489 = +HEAPF64[$1488>>3];
    $1490 = $55;
    $1491 = $1489 * $1490;
    $1492 = $1487 + $1491;
    $1493 = ((($32)) + 24|0);
    $1494 = +HEAPF64[$1493>>3];
    $1495 = $59;
    $1496 = $1494 * $1495;
    $1497 = $1492 + $1496;
    $1498 = ((($32)) + 32|0);
    $1499 = +HEAPF64[$1498>>3];
    $1500 = $60;
    $1501 = $1499 * $1500;
    $1502 = $1497 + $1501;
    $1503 = ((($32)) + 40|0);
    $1504 = +HEAPF64[$1503>>3];
    $1505 = $56;
    $1506 = $1504 * $1505;
    $1507 = $1502 + $1506;
    $1508 = ((($32)) + 48|0);
    $1509 = +HEAPF64[$1508>>3];
    $1510 = $61;
    $1511 = $1509 * $1510;
    $1512 = $1507 + $1511;
    $1513 = ((($32)) + 56|0);
    $1514 = +HEAPF64[$1513>>3];
    $1515 = $62;
    $1516 = $1514 * $1515;
    $1517 = $1512 + $1516;
    $1518 = ((($32)) + 64|0);
    $1519 = +HEAPF64[$1518>>3];
    $1520 = $63;
    $1521 = $1519 * $1520;
    $1522 = $1517 + $1521;
    $1523 = ((($32)) + 80|0);
    $1524 = +HEAPF64[$1523>>3];
    $1525 = $65;
    $1526 = $1524 * $1525;
    $1527 = $1522 + $1526;
    $1528 = ((($32)) + 88|0);
    $1529 = +HEAPF64[$1528>>3];
    $1530 = $66;
    $1531 = $1529 * $1530;
    $1532 = $1527 + $1531;
    $1533 = ((($32)) + 96|0);
    $1534 = +HEAPF64[$1533>>3];
    $1535 = $67;
    $1536 = $1534 * $1535;
    $1537 = $1532 + $1536;
    $1538 = ((($32)) + 104|0);
    $1539 = +HEAPF64[$1538>>3];
    $1540 = $68;
    $1541 = $1539 * $1540;
    $1542 = $1537 + $1541;
    $1543 = ((($5)) + 40|0);
    HEAPF64[$1543>>3] = $1542;
    $1544 = ((($33)) + 8|0);
    $1545 = +HEAPF64[$1544>>3];
    $1546 = ((($33)) + 16|0);
    $1547 = +HEAPF64[$1546>>3];
    $1548 = $55;
    $1549 = $1547 * $1548;
    $1550 = $1545 + $1549;
    $1551 = ((($33)) + 24|0);
    $1552 = +HEAPF64[$1551>>3];
    $1553 = $59;
    $1554 = $1552 * $1553;
    $1555 = $1550 + $1554;
    $1556 = ((($33)) + 32|0);
    $1557 = +HEAPF64[$1556>>3];
    $1558 = $60;
    $1559 = $1557 * $1558;
    $1560 = $1555 + $1559;
    $1561 = ((($33)) + 40|0);
    $1562 = +HEAPF64[$1561>>3];
    $1563 = $56;
    $1564 = $1562 * $1563;
    $1565 = $1560 + $1564;
    $1566 = ((($33)) + 56|0);
    $1567 = +HEAPF64[$1566>>3];
    $1568 = $62;
    $1569 = $1567 * $1568;
    $1570 = $1565 + $1569;
    $1571 = ((($33)) + 64|0);
    $1572 = +HEAPF64[$1571>>3];
    $1573 = $63;
    $1574 = $1572 * $1573;
    $1575 = $1570 + $1574;
    $1576 = ((($33)) + 72|0);
    $1577 = +HEAPF64[$1576>>3];
    $1578 = $64;
    $1579 = $1577 * $1578;
    $1580 = $1575 + $1579;
    $1581 = ((($33)) + 80|0);
    $1582 = +HEAPF64[$1581>>3];
    $1583 = $65;
    $1584 = $1582 * $1583;
    $1585 = $1580 + $1584;
    $1586 = ((($33)) + 96|0);
    $1587 = +HEAPF64[$1586>>3];
    $1588 = $67;
    $1589 = $1587 * $1588;
    $1590 = $1585 + $1589;
    $1591 = ((($33)) + 104|0);
    $1592 = +HEAPF64[$1591>>3];
    $1593 = $68;
    $1594 = $1592 * $1593;
    $1595 = $1590 + $1594;
    $1596 = ((($5)) + 48|0);
    HEAPF64[$1596>>3] = $1595;
    $1597 = ((($34)) + 8|0);
    $1598 = +HEAPF64[$1597>>3];
    $1599 = ((($34)) + 16|0);
    $1600 = +HEAPF64[$1599>>3];
    $1601 = $55;
    $1602 = $1600 * $1601;
    $1603 = $1598 + $1602;
    $1604 = ((($34)) + 24|0);
    $1605 = +HEAPF64[$1604>>3];
    $1606 = $59;
    $1607 = $1605 * $1606;
    $1608 = $1603 + $1607;
    $1609 = ((($34)) + 32|0);
    $1610 = +HEAPF64[$1609>>3];
    $1611 = $60;
    $1612 = $1610 * $1611;
    $1613 = $1608 + $1612;
    $1614 = ((($34)) + 40|0);
    $1615 = +HEAPF64[$1614>>3];
    $1616 = $56;
    $1617 = $1615 * $1616;
    $1618 = $1613 + $1617;
    $1619 = ((($34)) + 48|0);
    $1620 = +HEAPF64[$1619>>3];
    $1621 = $61;
    $1622 = $1620 * $1621;
    $1623 = $1618 + $1622;
    $1624 = ((($34)) + 64|0);
    $1625 = +HEAPF64[$1624>>3];
    $1626 = $63;
    $1627 = $1625 * $1626;
    $1628 = $1623 + $1627;
    $1629 = ((($5)) + 56|0);
    HEAPF64[$1629>>3] = $1628;
   }
   $1630 = ((($35)) + 8|0);
   $1631 = +HEAPF64[$1630>>3];
   $1632 = ((($35)) + 16|0);
   $1633 = +HEAPF64[$1632>>3];
   $1634 = $55;
   $1635 = $1633 * $1634;
   $1636 = $1631 + $1635;
   $1637 = ((($35)) + 24|0);
   $1638 = +HEAPF64[$1637>>3];
   $1639 = $59;
   $1640 = $1638 * $1639;
   $1641 = $1636 + $1640;
   $1642 = ((($35)) + 32|0);
   $1643 = +HEAPF64[$1642>>3];
   $1644 = $60;
   $1645 = $1643 * $1644;
   $1646 = $1641 + $1645;
   $1647 = ((($35)) + 40|0);
   $1648 = +HEAPF64[$1647>>3];
   $1649 = $56;
   $1650 = $1648 * $1649;
   $1651 = $1646 + $1650;
   $1652 = ((($35)) + 48|0);
   $1653 = +HEAPF64[$1652>>3];
   $1654 = $61;
   $1655 = $1653 * $1654;
   $1656 = $1651 + $1655;
   $1657 = ((($35)) + 56|0);
   $1658 = +HEAPF64[$1657>>3];
   $1659 = $62;
   $1660 = $1658 * $1659;
   $1661 = $1656 + $1660;
   $1662 = ((($35)) + 64|0);
   $1663 = +HEAPF64[$1662>>3];
   $1664 = $63;
   $1665 = $1663 * $1664;
   $1666 = $1661 + $1665;
   $1667 = ((($35)) + 72|0);
   $1668 = +HEAPF64[$1667>>3];
   $1669 = $64;
   $1670 = $1668 * $1669;
   $1671 = $1666 + $1670;
   $1672 = ((($35)) + 80|0);
   $1673 = +HEAPF64[$1672>>3];
   $1674 = $65;
   $1675 = $1673 * $1674;
   $1676 = $1671 + $1675;
   $1677 = ((($35)) + 88|0);
   $1678 = +HEAPF64[$1677>>3];
   $1679 = $66;
   $1680 = $1678 * $1679;
   $1681 = $1676 + $1680;
   $1682 = ((($35)) + 104|0);
   $1683 = +HEAPF64[$1682>>3];
   $1684 = $68;
   $1685 = $1683 * $1684;
   $1686 = $1681 + $1685;
   $1687 = ((($5)) + 64|0);
   HEAPF64[$1687>>3] = $1686;
   HEAPF64[$5>>3] = -3.0299999999999998;
  }
 } while(0);
 $1688 = ((($5)) + 64|0);
 $1689 = +HEAPF64[$1688>>3];
 $1690 = +HEAPF64[$5>>3];
 $1691 = $1689 - $1690;
 $1692 = ((($5)) + 1796|0);
 $1693 = HEAP32[$1692>>2]|0;
 $1694 = (+($1693|0));
 $1695 = $1691 / $1694;
 $1696 = ((($5)) + 72|0);
 HEAPF64[$1696>>3] = $1695;
 $1697 = ((($5)) + 72|0);
 $1698 = +HEAPF64[$1697>>3];
 $1699 = 1.0 / $1698;
 $1700 = ((($5)) + 80|0);
 HEAPF64[$1700>>3] = $1699;
 $1701 = ((($5)) + 1792|0);
 $1702 = HEAP32[$1701>>2]|0;
 $1703 = ($1702|0)==(3);
 if ($1703) {
  $1704 = ((($5)) + 56|0);
  $1705 = +HEAPF64[$1704>>3];
  $1706 = ((($5)) + 64|0);
  $1707 = +HEAPF64[$1706>>3];
  $1708 = $1705 - $1707;
  $1709 = ((($5)) + 56|0);
  $1710 = +HEAPF64[$1709>>3];
  $1711 = ((($5)) + 64|0);
  $1712 = +HEAPF64[$1711>>3];
  $1713 = $1710 * $1712;
  $1714 = $1708 / $1713;
  $55 = $1714;
  $1715 = ((($5)) + 64|0);
  $1716 = +HEAPF64[$1715>>3];
  $1717 = ((($5)) + 56|0);
  $1718 = +HEAPF64[$1717>>3];
  $1719 = $1716 / $1718;
  $1720 = (+Math_log((+$1719)));
  $1721 = 1.0 / $1720;
  $56 = $1721;
  $1722 = ((($5)) + 56|0);
  $1723 = +HEAPF64[$1722>>3];
  $1724 = ((($5)) + 56|0);
  $1725 = +HEAPF64[$1724>>3];
  $1726 = $1723 * $1725;
  $64 = $1726;
  $1727 = $64;
  $1728 = ((($5)) + 8|0);
  $1729 = +HEAPF64[$1728>>3];
  $1730 = ((($5)) + 16|0);
  $1731 = +HEAPF64[$1730>>3];
  $1732 = - $1731;
  $1733 = ((($5)) + 56|0);
  $1734 = +HEAPF64[$1733>>3];
  $1735 = ((($5)) + 40|0);
  $1736 = +HEAPF64[$1735>>3];
  $1737 = $64;
  $1738 = $1736 * $1737;
  $1739 = $1734 + $1738;
  $1740 = $1732 * $1739;
  $1741 = ((($5)) + 24|0);
  $1742 = +HEAPF64[$1741>>3];
  $1743 = ((($5)) + 32|0);
  $1744 = +HEAPF64[$1743>>3];
  $1745 = - $1744;
  $1746 = ((($5)) + 56|0);
  $1747 = +HEAPF64[$1746>>3];
  $1748 = ((($5)) + 48|0);
  $1749 = +HEAPF64[$1748>>3];
  $1750 = $64;
  $1751 = $1749 * $1750;
  $1752 = $1747 + $1751;
  $1753 = $1745 * $1752;
  $1754 = (+Math_exp((+$1753)));
  $1755 = $1742 * $1754;
  $1756 = $1740 - $1755;
  $1757 = (+Math_exp((+$1756)));
  $1758 = $1729 * $1757;
  $1759 = $56;
  $1760 = 0.044999999999999998 * $1759;
  $1761 = ((($5)) + 56|0);
  $1762 = +HEAPF64[$1761>>3];
  $1763 = $1760 / $1762;
  $1764 = $1758 - $1763;
  $1765 = $1727 * $1764;
  $1766 = $55;
  $1767 = $56;
  $1768 = $1766 * $1767;
  $1769 = ((($5)) + 56|0);
  $1770 = +HEAPF64[$1769>>3];
  $1771 = $1768 * $1770;
  $1772 = 1.0 + $1771;
  $1773 = $1765 / $1772;
  $1774 = ((($5)) + 88|0);
  HEAPF64[$1774>>3] = $1773;
  $1775 = $55;
  $1776 = ((($5)) + 88|0);
  $1777 = +HEAPF64[$1776>>3];
  $1778 = $1775 * $1777;
  $1779 = 0.044999999999999998 + $1778;
  $1780 = $56;
  $1781 = $1779 * $1780;
  $1782 = ((($5)) + 96|0);
  HEAPF64[$1782>>3] = $1781;
 }
 $1783 = ((($5)) + 1792|0);
 $1784 = HEAP32[$1783>>2]|0;
 $1785 = ($1784|0)==(4);
 if ($1785) {
  $1786 = ((($5)) + 64|0);
  $1787 = +HEAPF64[$1786>>3];
  $1788 = (+_CL_ranlan_cdf($1787));
  $1789 = 0.99499999999999999 / $1788;
  $1790 = ((($5)) + 104|0);
  HEAPF64[$1790>>3] = $1789;
 }
 $1791 = +HEAPF64[$5>>3];
 $55 = $1791;
 $1792 = ((($5)) + 184|0);
 HEAPF64[$1792>>3] = 0.0;
 $1793 = $55;
 $1794 = (+_ROOT_vav_pdf($1793,$5));
 $70 = $1794;
 $72 = 1;
 while(1) {
  $1795 = $72;
  $1796 = ((($5)) + 1796|0);
  $1797 = HEAP32[$1796>>2]|0;
  $1798 = ($1795|0)<=($1797|0);
  $1799 = ((($5)) + 72|0);
  $1800 = +HEAPF64[$1799>>3];
  if (!($1798)) {
   break;
  }
  $1801 = $55;
  $1802 = $1801 + $1800;
  $55 = $1802;
  $1803 = $55;
  $1804 = (+_ROOT_vav_pdf($1803,$5));
  $71 = $1804;
  $1805 = ((($5)) + 184|0);
  $1806 = $72;
  $1807 = (($1806) - 1)|0;
  $1808 = (($1805) + ($1807<<3)|0);
  $1809 = +HEAPF64[$1808>>3];
  $1810 = $70;
  $1811 = $1809 + $1810;
  $1812 = $71;
  $1813 = $1811 + $1812;
  $1814 = ((($5)) + 184|0);
  $1815 = $72;
  $1816 = (($1814) + ($1815<<3)|0);
  HEAPF64[$1816>>3] = $1813;
  $1817 = $71;
  $70 = $1817;
  $1818 = $72;
  $1819 = (($1818) + 1)|0;
  $72 = $1819;
 }
 $1820 = 0.5 * $1800;
 $55 = $1820;
 $72 = 1;
 while(1) {
  $1821 = $72;
  $1822 = ((($5)) + 1796|0);
  $1823 = HEAP32[$1822>>2]|0;
  $1824 = ($1821|0)<=($1823|0);
  if (!($1824)) {
   break;
  }
  $1825 = $55;
  $1826 = ((($5)) + 184|0);
  $1827 = $72;
  $1828 = (($1826) + ($1827<<3)|0);
  $1829 = +HEAPF64[$1828>>3];
  $1830 = $1829 * $1825;
  HEAPF64[$1828>>3] = $1830;
  $1831 = $72;
  $1832 = (($1831) + 1)|0;
  $72 = $1832;
 }
 _memcpy(($0|0),($5|0),1800)|0;
 STACKTOP = sp;return;
}
function _ROOT_vav_pdf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0.0;
 $14 = $3;
 $15 = $4;
 $16 = +HEAPF64[$15>>3];
 $17 = $14 < $16;
 if (!($17)) {
  $18 = $3;
  $19 = $4;
  $20 = ((($19)) + 64|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $18 > $21;
  if (!($22)) {
   $23 = $4;
   $24 = ((($23)) + 1792|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   do {
    if ($26) {
     $8 = 1.0;
     $27 = $3;
     $28 = $4;
     $29 = ((($28)) + 112|0);
     $30 = +HEAPF64[$29>>3];
     $31 = $27 + $30;
     $32 = $4;
     $33 = ((($32)) + 112|0);
     $34 = ((($33)) + 8|0);
     $35 = +HEAPF64[$34>>3];
     $36 = $31 * $35;
     $9 = $36;
     $37 = $9;
     $38 = ((($7)) + 8|0);
     HEAPF64[$38>>3] = $37;
     $39 = $9;
     $40 = $9;
     $41 = $39 * $40;
     $42 = $41 - 1.0;
     $43 = ((($7)) + 16|0);
     HEAPF64[$43>>3] = $42;
     $6 = 2;
     while(1) {
      $44 = $6;
      $45 = ($44|0)<=(8);
      if (!($45)) {
       break;
      }
      $46 = $8;
      $47 = $46 + 1.0;
      $8 = $47;
      $48 = $9;
      $49 = $6;
      $50 = (($7) + ($49<<3)|0);
      $51 = +HEAPF64[$50>>3];
      $52 = $48 * $51;
      $53 = $8;
      $54 = $6;
      $55 = (($54) - 1)|0;
      $56 = (($7) + ($55<<3)|0);
      $57 = +HEAPF64[$56>>3];
      $58 = $53 * $57;
      $59 = $52 - $58;
      $60 = $6;
      $61 = (($60) + 1)|0;
      $62 = (($7) + ($61<<3)|0);
      HEAPF64[$62>>3] = $59;
      $63 = $6;
      $64 = (($63) + 1)|0;
      $6 = $64;
     }
     $65 = $4;
     $66 = ((($65)) + 112|0);
     $67 = ((($66)) + 56|0);
     $68 = +HEAPF64[$67>>3];
     $69 = ((($7)) + 72|0);
     $70 = +HEAPF64[$69>>3];
     $71 = $68 * $70;
     $72 = 1.0 + $71;
     $10 = $72;
     $6 = 2;
     while(1) {
      $73 = $6;
      $74 = ($73|0)<=(6);
      if (!($74)) {
       break;
      }
      $75 = $4;
      $76 = ((($75)) + 112|0);
      $77 = $6;
      $78 = (($76) + ($77<<3)|0);
      $79 = +HEAPF64[$78>>3];
      $80 = $6;
      $81 = (($80) + 1)|0;
      $82 = (($7) + ($81<<3)|0);
      $83 = +HEAPF64[$82>>3];
      $84 = $79 * $83;
      $85 = $10;
      $86 = $85 + $84;
      $10 = $86;
      $87 = $6;
      $88 = (($87) + 1)|0;
      $6 = $88;
     }
     $89 = $10;
     $90 = $89 > 0.0;
     if ($90) {
      $91 = $4;
      $92 = ((($91)) + 112|0);
      $93 = ((($92)) + 64|0);
      $94 = +HEAPF64[$93>>3];
      $95 = $9;
      $96 = -0.5 * $95;
      $97 = $9;
      $98 = $96 * $97;
      $99 = (+Math_exp((+$98)));
      $100 = $94 * $99;
      $101 = $10;
      $102 = $100 * $101;
      $5 = $102;
     }
    } else {
     $103 = $4;
     $104 = ((($103)) + 1792|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)==(2);
     if ($106) {
      $107 = $3;
      $108 = $3;
      $109 = $107 * $108;
      $11 = $109;
      $110 = $4;
      $111 = ((($110)) + 8|0);
      $112 = +HEAPF64[$111>>3];
      $113 = $4;
      $114 = ((($113)) + 16|0);
      $115 = +HEAPF64[$114>>3];
      $116 = - $115;
      $117 = $3;
      $118 = $4;
      $119 = ((($118)) + 40|0);
      $120 = +HEAPF64[$119>>3];
      $121 = $11;
      $122 = $120 * $121;
      $123 = $117 + $122;
      $124 = $116 * $123;
      $125 = $4;
      $126 = ((($125)) + 24|0);
      $127 = +HEAPF64[$126>>3];
      $128 = $4;
      $129 = ((($128)) + 32|0);
      $130 = +HEAPF64[$129>>3];
      $131 = - $130;
      $132 = $3;
      $133 = $4;
      $134 = ((($133)) + 48|0);
      $135 = +HEAPF64[$134>>3];
      $136 = $11;
      $137 = $135 * $136;
      $138 = $132 + $137;
      $139 = $131 * $138;
      $140 = (+Math_exp((+$139)));
      $141 = $127 * $140;
      $142 = $124 - $141;
      $143 = (+Math_exp((+$142)));
      $144 = $112 * $143;
      $5 = $144;
      break;
     }
     $145 = $4;
     $146 = ((($145)) + 1792|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($147|0)==(3);
     if (!($148)) {
      $204 = $4;
      $205 = ((($204)) + 1792|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = ($206|0)==(4);
      if (!($207)) {
       break;
      }
      $208 = $4;
      $209 = ((($208)) + 104|0);
      $210 = +HEAPF64[$209>>3];
      $211 = $3;
      $212 = (+_gsl_ran_landau_pdf($211));
      $213 = $210 * $212;
      $5 = $213;
      break;
     }
     $149 = $3;
     $150 = $4;
     $151 = ((($150)) + 56|0);
     $152 = +HEAPF64[$151>>3];
     $153 = $149 < $152;
     $154 = $3;
     if ($153) {
      $155 = $3;
      $156 = $154 * $155;
      $12 = $156;
      $157 = $4;
      $158 = ((($157)) + 8|0);
      $159 = +HEAPF64[$158>>3];
      $160 = $4;
      $161 = ((($160)) + 16|0);
      $162 = +HEAPF64[$161>>3];
      $163 = - $162;
      $164 = $3;
      $165 = $4;
      $166 = ((($165)) + 40|0);
      $167 = +HEAPF64[$166>>3];
      $168 = $12;
      $169 = $167 * $168;
      $170 = $164 + $169;
      $171 = $163 * $170;
      $172 = $4;
      $173 = ((($172)) + 24|0);
      $174 = +HEAPF64[$173>>3];
      $175 = $4;
      $176 = ((($175)) + 32|0);
      $177 = +HEAPF64[$176>>3];
      $178 = - $177;
      $179 = $3;
      $180 = $4;
      $181 = ((($180)) + 48|0);
      $182 = +HEAPF64[$181>>3];
      $183 = $12;
      $184 = $182 * $183;
      $185 = $179 + $184;
      $186 = $178 * $185;
      $187 = (+Math_exp((+$186)));
      $188 = $174 * $187;
      $189 = $171 - $188;
      $190 = (+Math_exp((+$189)));
      $191 = $159 * $190;
      $5 = $191;
      break;
     } else {
      $192 = 1.0 / $154;
      $13 = $192;
      $193 = $4;
      $194 = ((($193)) + 88|0);
      $195 = +HEAPF64[$194>>3];
      $196 = $13;
      $197 = $195 * $196;
      $198 = $4;
      $199 = ((($198)) + 96|0);
      $200 = +HEAPF64[$199>>3];
      $201 = $197 + $200;
      $202 = $13;
      $203 = $201 * $202;
      $5 = $203;
      break;
     }
    }
   } while(0);
   $214 = $5;
   $2 = $214;
   $215 = $2;
   STACKTOP = sp;return (+$215);
  }
 }
 $2 = 0.0;
 $215 = $2;
 STACKTOP = sp;return (+$215);
}
function _ROOT_val_idf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0;
 var $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0;
 var $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0;
 var $262 = 0.0, $263 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $21 = $2;
 $22 = 2.0 * $21;
 $23 = $3;
 $24 = ((($23)) + 72|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $22 / $25;
 $4 = $26;
 $27 = $3;
 $28 = +HEAPF64[$27>>3];
 $5 = $28;
 $6 = 0.0;
 $7 = 0.0;
 $8 = 0.0;
 $10 = 1;
 while(1) {
  $29 = $10;
  $30 = $3;
  $31 = ((($30)) + 1796|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<=($32|0);
  if (!($33)) {
   break;
  }
  $34 = $3;
  $35 = ((($34)) + 72|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $5;
  $38 = $37 + $36;
  $5 = $38;
  $39 = $3;
  $40 = ((($39)) + 1792|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(1);
  do {
   if ($42) {
    $11 = 1.0;
    $43 = $5;
    $44 = $3;
    $45 = ((($44)) + 112|0);
    $46 = +HEAPF64[$45>>3];
    $47 = $43 + $46;
    $48 = $3;
    $49 = ((($48)) + 112|0);
    $50 = ((($49)) + 8|0);
    $51 = +HEAPF64[$50>>3];
    $52 = $47 * $51;
    $12 = $52;
    $53 = $12;
    $54 = ((($9)) + 8|0);
    HEAPF64[$54>>3] = $53;
    $55 = $12;
    $56 = $12;
    $57 = $55 * $56;
    $58 = $57 - 1.0;
    $59 = ((($9)) + 16|0);
    HEAPF64[$59>>3] = $58;
    $13 = 2;
    while(1) {
     $60 = $13;
     $61 = ($60|0)<=(8);
     if (!($61)) {
      break;
     }
     $62 = $11;
     $63 = $62 + 1.0;
     $11 = $63;
     $64 = $12;
     $65 = $13;
     $66 = (($9) + ($65<<3)|0);
     $67 = +HEAPF64[$66>>3];
     $68 = $64 * $67;
     $69 = $11;
     $70 = $13;
     $71 = (($70) - 1)|0;
     $72 = (($9) + ($71<<3)|0);
     $73 = +HEAPF64[$72>>3];
     $74 = $69 * $73;
     $75 = $68 - $74;
     $76 = $13;
     $77 = (($76) + 1)|0;
     $78 = (($9) + ($77<<3)|0);
     HEAPF64[$78>>3] = $75;
     $79 = $13;
     $80 = (($79) + 1)|0;
     $13 = $80;
    }
    $81 = $3;
    $82 = ((($81)) + 112|0);
    $83 = ((($82)) + 56|0);
    $84 = +HEAPF64[$83>>3];
    $85 = ((($9)) + 72|0);
    $86 = +HEAPF64[$85>>3];
    $87 = $84 * $86;
    $88 = 1.0 + $87;
    $14 = $88;
    $15 = 2;
    while(1) {
     $89 = $15;
     $90 = ($89|0)<=(6);
     if (!($90)) {
      break;
     }
     $91 = $3;
     $92 = ((($91)) + 112|0);
     $93 = $15;
     $94 = (($92) + ($93<<3)|0);
     $95 = +HEAPF64[$94>>3];
     $96 = $15;
     $97 = (($96) + 1)|0;
     $98 = (($9) + ($97<<3)|0);
     $99 = +HEAPF64[$98>>3];
     $100 = $95 * $99;
     $101 = $14;
     $102 = $101 + $100;
     $14 = $102;
     $103 = $15;
     $104 = (($103) + 1)|0;
     $15 = $104;
    }
    $105 = $14;
    $106 = $105 > 0.0;
    if ($106) {
     $107 = $3;
     $108 = ((($107)) + 112|0);
     $109 = ((($108)) + 64|0);
     $110 = +HEAPF64[$109>>3];
     $111 = $12;
     $112 = -0.5 * $111;
     $113 = $12;
     $114 = $112 * $113;
     $115 = (+Math_exp((+$114)));
     $116 = $110 * $115;
     $117 = $14;
     $118 = $116 * $117;
     $7 = $118;
    }
   } else {
    $119 = $3;
    $120 = ((($119)) + 1792|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(2);
    if ($122) {
     $123 = $5;
     $124 = $5;
     $125 = $123 * $124;
     $16 = $125;
     $126 = $3;
     $127 = ((($126)) + 8|0);
     $128 = +HEAPF64[$127>>3];
     $129 = $3;
     $130 = ((($129)) + 16|0);
     $131 = +HEAPF64[$130>>3];
     $132 = - $131;
     $133 = $5;
     $134 = $3;
     $135 = ((($134)) + 40|0);
     $136 = +HEAPF64[$135>>3];
     $137 = $16;
     $138 = $136 * $137;
     $139 = $133 + $138;
     $140 = $132 * $139;
     $141 = $3;
     $142 = ((($141)) + 24|0);
     $143 = +HEAPF64[$142>>3];
     $144 = $3;
     $145 = ((($144)) + 32|0);
     $146 = +HEAPF64[$145>>3];
     $147 = - $146;
     $148 = $5;
     $149 = $3;
     $150 = ((($149)) + 48|0);
     $151 = +HEAPF64[$150>>3];
     $152 = $16;
     $153 = $151 * $152;
     $154 = $148 + $153;
     $155 = $147 * $154;
     $156 = (+Math_exp((+$155)));
     $157 = $143 * $156;
     $158 = $140 - $157;
     $159 = (+Math_exp((+$158)));
     $160 = $128 * $159;
     $7 = $160;
     break;
    }
    $161 = $3;
    $162 = ((($161)) + 1792|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==(3);
    if (!($164)) {
     $220 = $3;
     $221 = ((($220)) + 104|0);
     $222 = +HEAPF64[$221>>3];
     $223 = $5;
     $224 = (+_gsl_ran_landau_pdf($223));
     $225 = $222 * $224;
     $7 = $225;
     break;
    }
    $165 = $5;
    $166 = $3;
    $167 = ((($166)) + 56|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $165 < $168;
    $170 = $5;
    if ($169) {
     $171 = $5;
     $172 = $170 * $171;
     $17 = $172;
     $173 = $3;
     $174 = ((($173)) + 8|0);
     $175 = +HEAPF64[$174>>3];
     $176 = $3;
     $177 = ((($176)) + 16|0);
     $178 = +HEAPF64[$177>>3];
     $179 = - $178;
     $180 = $5;
     $181 = $3;
     $182 = ((($181)) + 40|0);
     $183 = +HEAPF64[$182>>3];
     $184 = $17;
     $185 = $183 * $184;
     $186 = $180 + $185;
     $187 = $179 * $186;
     $188 = $3;
     $189 = ((($188)) + 24|0);
     $190 = +HEAPF64[$189>>3];
     $191 = $3;
     $192 = ((($191)) + 32|0);
     $193 = +HEAPF64[$192>>3];
     $194 = - $193;
     $195 = $5;
     $196 = $3;
     $197 = ((($196)) + 48|0);
     $198 = +HEAPF64[$197>>3];
     $199 = $17;
     $200 = $198 * $199;
     $201 = $195 + $200;
     $202 = $194 * $201;
     $203 = (+Math_exp((+$202)));
     $204 = $190 * $203;
     $205 = $187 - $204;
     $206 = (+Math_exp((+$205)));
     $207 = $175 * $206;
     $7 = $207;
     break;
    } else {
     $208 = 1.0 / $170;
     $18 = $208;
     $209 = $3;
     $210 = ((($209)) + 88|0);
     $211 = +HEAPF64[$210>>3];
     $212 = $18;
     $213 = $211 * $212;
     $214 = $3;
     $215 = ((($214)) + 96|0);
     $216 = +HEAPF64[$215>>3];
     $217 = $213 + $216;
     $218 = $18;
     $219 = $217 * $218;
     $7 = $219;
     break;
    }
   }
  } while(0);
  $226 = $6;
  $227 = $7;
  $228 = $226 + $227;
  $229 = $8;
  $230 = $229 + $228;
  $8 = $230;
  $231 = $8;
  $232 = $4;
  $233 = $231 > $232;
  if ($233) {
   break;
  }
  $234 = $7;
  $6 = $234;
  $235 = $10;
  $236 = (($235) + 1)|0;
  $10 = $236;
 }
 $237 = $8;
 $238 = $6;
 $239 = $237 - $238;
 $240 = $7;
 $241 = $239 - $240;
 $19 = $241;
 $242 = $5;
 $243 = $3;
 $244 = ((($243)) + 72|0);
 $245 = +HEAPF64[$244>>3];
 $246 = $242 - $245;
 $20 = $246;
 $247 = $8;
 $248 = $19;
 $249 = $247 > $248;
 if (!($249)) {
  $263 = $20;
  STACKTOP = sp;return (+$263);
 }
 $250 = $3;
 $251 = ((($250)) + 72|0);
 $252 = +HEAPF64[$251>>3];
 $253 = $4;
 $254 = $19;
 $255 = $253 - $254;
 $256 = $252 * $255;
 $257 = $8;
 $258 = $19;
 $259 = $257 - $258;
 $260 = $256 / $259;
 $261 = $20;
 $262 = $261 + $260;
 $20 = $262;
 $263 = $20;
 STACKTOP = sp;return (+$263);
}
function _AT_RDD_index_from_RDD_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = -1;
 $3 = 1;
 $4 = $3;
 $5 = HEAP32[12692]|0;
 _find_elements_int($1,$4,(50772),$5,$2);
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _AT_RDD_name_from_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_AT_RDD_index_from_RDD_number($6)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)!=(-1);
 $10 = $4;
 if ($9) {
  $11 = $5;
  $12 = ((51128) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  (_strcpy($10,$13)|0);
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  (_strcpy($10,79459)|0);
  $2 = -1;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _AT_RDD_number_from_name($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 $4 = 1;
 $5 = HEAP32[12692]|0;
 _find_elements_char($2,1,(51128),$5,$3);
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)!=(-1);
 if ($7) {
  $8 = HEAP32[$3>>2]|0;
  $9 = ((50772) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = -1;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _AT_RDD_number_of_parameters($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_RDD_index_from_RDD_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(79489,$vararg_buffer)|0);
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $3;
  $10 = ((50804) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_RDD_r_min_m($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0.0;
 $7 = $4;
 $8 = ($7|0)==(2);
 $9 = $4;
 $10 = ($9|0)==(5);
 $or$cond = $8 | $10;
 $11 = $4;
 $12 = ($11|0)==(6);
 $or$cond3 = $or$cond | $12;
 $13 = $4;
 $14 = ($13|0)==(7);
 $or$cond5 = $or$cond3 | $14;
 if ($or$cond5) {
  $15 = $5;
  $16 = +HEAPF64[$15>>3];
  $6 = $16;
  $17 = $3;
  $18 = $6;
  $19 = $17 <= $18;
  if ($19) {
   $20 = $3;
   $6 = $20;
  }
 }
 $21 = $6;
 STACKTOP = sp;return (+$21);
}
function _AT_RDD_a0_m($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0.0;
 $7 = $4;
 $8 = ($7|0)==(3);
 $9 = $4;
 $10 = ($9|0)==(4);
 $or$cond = $8 | $10;
 do {
  if ($or$cond) {
   $11 = $5;
   $12 = +HEAPF64[$11>>3];
   $6 = $12;
  } else {
   $13 = $4;
   $14 = ($13|0)==(6);
   $15 = $4;
   $16 = ($15|0)==(7);
   $or$cond3 = $14 | $16;
   if ($or$cond3) {
    $17 = $5;
    $18 = ((($17)) + 8|0);
    $19 = +HEAPF64[$18>>3];
    $6 = $19;
    break;
   } else {
    $6 = 0.0;
    break;
   }
  }
 } while(0);
 $20 = $3;
 $21 = $6;
 $22 = $20 <= $21;
 if (!($22)) {
  $24 = $6;
  STACKTOP = sp;return (+$24);
 }
 $23 = $3;
 $6 = $23;
 $24 = $6;
 STACKTOP = sp;return (+$24);
}
function _AT_RDD_precalculated_constant_Gy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0, $71 = 0;
 var $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer = sp + 192|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0.0;
 $37 = $12;
 $38 = (+_AT_density_g_cm3_from_material_no($37));
 $17 = $38;
 $39 = $17;
 $40 = $39 * 1000.0;
 $18 = $40;
 $19 = 0.0;
 $41 = $13;
 $42 = ($41|0)==(2);
 $43 = $13;
 $44 = ($43|0)==(4);
 $or$cond = $42 | $44;
 $45 = $13;
 $46 = ($45|0)==(5);
 $or$cond3 = $or$cond | $46;
 $47 = $13;
 $48 = ($47|0)==(6);
 $or$cond5 = $or$cond3 | $48;
 $49 = $13;
 $50 = ($49|0)==(7);
 $or$cond7 = $or$cond5 | $50;
 if ($or$cond7) {
  $51 = $10;
  $52 = $11;
  $53 = $12;
  $54 = $15;
  $55 = (+_AT_RDD_Katz_coeff_Gy_general($51,$52,$53,$54));
  $19 = $55;
 }
 $56 = $13;
 $57 = ($56|0)==(1);
 if ($57) {
  $58 = $10;
  $59 = $12;
  $60 = $15;
  $61 = (+_AT_single_impact_fluence_cm2_single($58,$59,$60));
  $20 = $61;
  $62 = $9;
  $63 = $20;
  $64 = $62 * $63;
  $65 = $64 * 1.6021764600000001E-13;
  $66 = $65 * 1000.0;
  $16 = $66;
 }
 $67 = $13;
 $68 = ($67|0)==(2);
 if ($68) {
  $69 = $19;
  $16 = $69;
 }
 $70 = $13;
 $71 = ($70|0)==(4);
 if ($71) {
  $21 = 0.0;
  $72 = $8;
  $73 = $13;
  $74 = $14;
  $75 = (+_AT_RDD_a0_m($72,$73,$74));
  $22 = $75;
  $76 = $15;
  $77 = ($76|0)==(3);
  $78 = $15;
  $79 = ($78|0)==(6);
  $or$cond9 = $77 | $79;
  do {
   if ($or$cond9) {
    $80 = $10;
    $81 = (+_AT_ER_PowerLaw_alpha($80));
    $23 = $81;
    $82 = $22;
    $83 = $8;
    $84 = $18;
    $85 = $23;
    $86 = $19;
    $87 = (+_AT_RDD_Katz_PowerLawER_dEdx_J_m($82,$83,$84,$85,$86));
    $21 = $87;
   } else {
    $88 = $15;
    $89 = ($88|0)==(2);
    if ($89) {
     $90 = $22;
     $91 = $8;
     $92 = $18;
     $93 = $19;
     $94 = (+_AT_RDD_Katz_LinearER_dEdx_J_m($90,$91,$92,$93));
     $21 = $94;
     break;
    } else {
     $21 = 0.0;
     break;
    }
   }
  } while(0);
  $95 = $21;
  $16 = $95;
 }
 $96 = $13;
 $97 = ($96|0)==(3);
 if ($97) {
  $98 = $8;
  $99 = $13;
  $100 = $14;
  $101 = (+_AT_RDD_a0_m($98,$99,$100));
  $24 = $101;
  $102 = $8;
  $103 = $24;
  $104 = $102 / $103;
  $105 = (+Math_log((+$104)));
  $106 = 0.5 + $105;
  $25 = $106;
  $107 = $24;
  $108 = $107 * 100.0;
  $109 = (+_gsl_pow_2($108));
  $110 = 6.2831853071795862 * $109;
  $111 = $25;
  $112 = $111 * $110;
  $25 = $112;
  $113 = $9;
  $114 = $113 * 1.6021764599999999E-10;
  $115 = $25;
  $116 = $114 / $115;
  $16 = $116;
 }
 $117 = $13;
 $118 = ($117|0)==(5);
 if ($118) {
  $119 = $8;
  $120 = $13;
  $121 = $14;
  $122 = (+_AT_RDD_r_min_m($119,$120,$121));
  $26 = $122;
  $123 = $10;
  $124 = (+_AT_beta_from_E_single($123));
  $27 = $124;
  $125 = $9;
  $126 = $17;
  $127 = $125 * $126;
  $128 = $127 * 100.0;
  $129 = $128 * 1.6021764600000001E-13;
  $28 = $129;
  $130 = $26;
  $131 = $8;
  $132 = $27;
  $133 = $18;
  $134 = $28;
  $135 = $19;
  $136 = (+_AT_RDD_Cucinotta_Cnorm($130,$131,$132,$133,$134,$135));
  $16 = $136;
  $137 = $16;
  $138 = $137 == 0.0;
  if ($138) {
   (_printf(79511,$vararg_buffer)|0);
  }
 }
 $139 = $13;
 $140 = ($139|0)==(6);
 if ($140) {
  $29 = 0.0;
  $141 = $8;
  $142 = $13;
  $143 = $14;
  $144 = (+_AT_RDD_r_min_m($141,$142,$143));
  $30 = $144;
  $145 = $8;
  $146 = $13;
  $147 = $14;
  $148 = (+_AT_RDD_a0_m($145,$146,$147));
  $31 = $148;
  $149 = $31;
  $150 = $8;
  $151 = $149 < $150;
  $152 = $31;
  $153 = $8;
  $154 = $151 ? $152 : $153;
  $32 = $154;
  $155 = $15;
  $156 = ($155|0)==(3);
  $157 = $15;
  $158 = ($157|0)==(6);
  $or$cond11 = $156 | $158;
  if ($or$cond11) {
   $159 = $10;
   $160 = (+_AT_ER_PowerLaw_alpha($159));
   $33 = $160;
   $161 = $30;
   $162 = $32;
   $163 = $8;
   $164 = $33;
   $165 = $19;
   $166 = (+_AT_RDD_Katz_PowerLawER_Daverage_Gy($161,$162,$163,$164,$165));
   $29 = $166;
  } else {
   $167 = $15;
   $168 = ($167|0)==(2);
   if ($168) {
    $169 = $30;
    $170 = $32;
    $171 = $8;
    $172 = $19;
    $173 = (+_AT_RDD_Katz_LinearER_Daverage_Gy($169,$170,$171,$172));
    $29 = $173;
   }
  }
  $174 = $29;
  $16 = $174;
 }
 $175 = $13;
 $176 = ($175|0)==(7);
 if ($176) {
  $177 = $8;
  $178 = $13;
  $179 = $14;
  $180 = (+_AT_RDD_r_min_m($177,$178,$179));
  $34 = $180;
  $181 = $10;
  $182 = (+_AT_beta_from_E_single($181));
  $35 = $182;
  $183 = $9;
  $184 = $17;
  $185 = $183 * $184;
  $186 = $185 * 100.0;
  $187 = $186 * 1.6021764600000001E-13;
  $36 = $187;
  $188 = $34;
  $189 = $8;
  $190 = $35;
  $191 = $18;
  $192 = $36;
  $193 = $19;
  $194 = (+_AT_RDD_Cucinotta_Cnorm($188,$189,$190,$191,$192,$193));
  $16 = $194;
 }
 $195 = $13;
 $196 = ($195|0)==(8);
 if (!($196)) {
  $197 = $16;
  STACKTOP = sp;return (+$197);
 }
 $16 = 0.0;
 $197 = $16;
 STACKTOP = sp;return (+$197);
}
function _AT_RDD_d_min_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $17 = $10;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = $13;
  $14 = $19;
 }
 $20 = $10;
 $21 = ($20|0)==(2);
 if ($21) {
  $22 = $11;
  $23 = ((($22)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $14 = $24;
 }
 $25 = $10;
 $26 = ($25|0)==(4);
 $27 = $10;
 $28 = ($27|0)==(5);
 $or$cond = $26 | $28;
 if ($or$cond) {
  $29 = $11;
  $30 = ((($29)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $14 = $31;
 }
 $32 = $10;
 $33 = ($32|0)==(3);
 if ($33) {
  $34 = $7;
  $35 = $9;
  $36 = $12;
  $37 = (+_AT_max_electron_range_m($34,$35,$36));
  $15 = $37;
  $38 = $15;
  $39 = $10;
  $40 = $11;
  $41 = (+_AT_RDD_a0_m($38,$39,$40));
  $16 = $41;
  $42 = $15;
  $43 = $15;
  $44 = $16;
  $45 = $13;
  $46 = (+_AT_RDD_Geiss_Gy($42,0.0,$43,$44,$45));
  $14 = $46;
 }
 $47 = $10;
 $48 = ($47|0)==(6);
 $49 = $10;
 $50 = ($49|0)==(7);
 $or$cond3 = $48 | $50;
 if ($or$cond3) {
  $51 = $11;
  $52 = ((($51)) + 16|0);
  $53 = +HEAPF64[$52>>3];
  $14 = $53;
 }
 $54 = $10;
 $55 = ($54|0)==(8);
 if (!($55)) {
  $60 = $14;
  STACKTOP = sp;return (+$60);
 }
 $56 = $7;
 $57 = $8;
 $58 = $9;
 $59 = (+_AT_d_min_RadicalDiffusion_Gy($56,$57,$58));
 $14 = $59;
 $60 = $14;
 STACKTOP = sp;return (+$60);
}
function _AT_RDD_d_max_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 208|0;
 $8 = sp + 236|0;
 $15 = sp + 192|0;
 HEAPF64[$7>>3] = $0;
 HEAP32[$8>>2] = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $40 = $13;
 $41 = $9;
 (_AT_Mass_Stopping_Power_with_no($40,1,$7,$8,$41,$15)|0);
 $42 = +HEAPF64[$7>>3];
 $43 = $9;
 $44 = $12;
 $45 = (+_AT_max_electron_range_m($42,$43,$44));
 $16 = $45;
 $46 = $16;
 $47 = +HEAPF64[$15>>3];
 $48 = +HEAPF64[$7>>3];
 $49 = HEAP32[$8>>2]|0;
 $50 = $9;
 $51 = $10;
 $52 = $11;
 $53 = $12;
 $54 = (+_AT_RDD_precalculated_constant_Gy($46,$47,$48,$49,$50,$51,$52,$53));
 $17 = $54;
 $55 = $9;
 $56 = (+_AT_density_g_cm3_from_material_no($55));
 $18 = $56;
 $57 = $18;
 $58 = $57 * 1000.0;
 $19 = $58;
 $20 = 0.0;
 $59 = $10;
 $60 = ($59|0)==(4);
 $61 = $10;
 $62 = ($61|0)==(5);
 $or$cond = $60 | $62;
 $63 = $10;
 $64 = ($63|0)==(6);
 $or$cond3 = $or$cond | $64;
 $65 = $10;
 $66 = ($65|0)==(7);
 $or$cond5 = $or$cond3 | $66;
 if ($or$cond5) {
  $67 = +HEAPF64[$7>>3];
  $68 = HEAP32[$8>>2]|0;
  $69 = $9;
  $70 = $12;
  $71 = (+_AT_RDD_Katz_coeff_Gy_general($67,$68,$69,$70));
  $20 = $71;
 }
 $72 = $10;
 $73 = ($72|0)==(1);
 if ($73) {
  $74 = $17;
  $14 = $74;
 }
 $75 = $10;
 $76 = ($75|0)==(2);
 if ($76) {
  $77 = $17;
  $21 = $77;
  $78 = +HEAPF64[$7>>3];
  $79 = (+_AT_ER_PowerLaw_alpha($78));
  $22 = $79;
  $80 = $16;
  $81 = $10;
  $82 = $11;
  $83 = (+_AT_RDD_r_min_m($80,$81,$82));
  $23 = $83;
  $84 = $23;
  $85 = $23;
  $86 = $16;
  $87 = $12;
  $88 = $22;
  $89 = $21;
  $90 = (+_AT_RDD_KatzPoint_Gy($84,$85,$86,$87,$88,$89));
  $14 = $90;
 }
 $91 = $10;
 $92 = ($91|0)==(4);
 if ($92) {
  $93 = $16;
  $94 = $10;
  $95 = $11;
  $96 = (+_AT_RDD_a0_m($93,$94,$95));
  $24 = $96;
  $97 = +HEAPF64[$15>>3];
  $98 = $18;
  $99 = $97 * $98;
  $100 = $99 * 100.0;
  $101 = $100 * 1.6021764600000001E-13;
  $25 = $101;
  $102 = $17;
  $26 = $102;
  $103 = +HEAPF64[$7>>3];
  $104 = (+_AT_ER_PowerLaw_alpha($103));
  $27 = $104;
  $105 = $16;
  $106 = $24;
  $107 = $12;
  $108 = $27;
  $109 = $19;
  $110 = $25;
  $111 = $26;
  $112 = $20;
  $113 = (+_AT_RDD_KatzSite_Gy(0.0,0.0,$105,$106,$107,$108,$109,$110,$111,$112));
  $14 = $113;
 }
 $114 = $10;
 $115 = ($114|0)==(3);
 if ($115) {
  $116 = $17;
  $14 = $116;
 }
 $117 = $10;
 $118 = ($117|0)==(5);
 if ($118) {
  $119 = +HEAPF64[$7>>3];
  $120 = (+_AT_beta_from_E_single($119));
  $28 = $120;
  $121 = $16;
  $122 = $10;
  $123 = $11;
  $124 = (+_AT_RDD_r_min_m($121,$122,$123));
  $29 = $124;
  $125 = $29;
  $126 = $29;
  $127 = $16;
  $128 = $28;
  $129 = $17;
  $130 = $20;
  $131 = (+_AT_RDD_CucinottaPoint_Gy($125,$126,$127,$128,$129,$130));
  $14 = $131;
 }
 $132 = $10;
 $133 = ($132|0)==(6);
 if ($133) {
  $134 = $16;
  $135 = $10;
  $136 = $11;
  $137 = (+_AT_RDD_a0_m($134,$135,$136));
  $30 = $137;
  $138 = $17;
  $31 = $138;
  $139 = $16;
  $140 = $10;
  $141 = $11;
  $142 = (+_AT_RDD_r_min_m($139,$140,$141));
  $32 = $142;
  $143 = +HEAPF64[$7>>3];
  $144 = (+_AT_ER_PowerLaw_alpha($143));
  $33 = $144;
  $145 = $30;
  $146 = $12;
  $147 = $32;
  $148 = $16;
  $149 = $33;
  $150 = $31;
  $151 = $20;
  $152 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy(0.0,$145,$146,$147,$148,$149,$150,$151));
  $14 = $152;
 }
 $153 = $10;
 $154 = ($153|0)==(7);
 if ($154) {
  $155 = +HEAPF64[$7>>3];
  $156 = (+_AT_beta_from_E_single($155));
  $34 = $156;
  $157 = $16;
  $158 = $10;
  $159 = $11;
  $160 = (+_AT_RDD_a0_m($157,$158,$159));
  $35 = $160;
  $161 = $17;
  $36 = $161;
  $162 = $16;
  $163 = $10;
  $164 = $11;
  $165 = (+_AT_RDD_r_min_m($162,$163,$164));
  $37 = $165;
  $166 = $35;
  $167 = $16;
  $168 = $166 < $167;
  $169 = $35;
  $170 = $16;
  $171 = $168 ? $169 : $170;
  $38 = $171;
  $172 = $37;
  $173 = $38;
  $174 = $16;
  $175 = $34;
  $176 = $20;
  $177 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($172,$173,$174,$175,$176));
  $39 = $177;
  $178 = $36;
  $179 = $37;
  $180 = $38;
  $181 = $16;
  $182 = $34;
  $183 = $20;
  $184 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($179,$180,$181,$182,$183));
  $185 = $178 * $184;
  $186 = $39;
  $187 = $186 + $185;
  $39 = $187;
  $188 = $35;
  $189 = $37;
  $190 = $16;
  $191 = $34;
  $192 = $20;
  $193 = $36;
  $194 = $39;
  $195 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy(0.0,$188,$189,$190,$191,$192,$193,$194));
  $14 = $195;
 }
 $196 = $10;
 $197 = ($196|0)==(8);
 if (!($197)) {
  $202 = $14;
  STACKTOP = sp;return (+$202);
 }
 $198 = +HEAPF64[$7>>3];
 $199 = HEAP32[$8>>2]|0;
 $200 = $9;
 $201 = (+_AT_d_max_RadicalDiffusion_Gy($198,$199,$200));
 $14 = $201;
 $202 = $14;
 STACKTOP = sp;return (+$202);
}
function _AT_RDD_f1_parameters_single_field($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = sp + 64|0;
 $9 = sp + 96|0;
 $16 = sp + 56|0;
 HEAPF64[$8>>3] = $0;
 HEAP32[$9>>2] = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 HEAPF64[$16>>3] = 0.0;
 $17 = 0.0;
 $18 = 0.0;
 $19 = 0.0;
 $20 = 0.0;
 $21 = 0.0;
 $22 = 0.0;
 $23 = 0.0;
 $24 = $14;
 $25 = $10;
 (_AT_Mass_Stopping_Power_with_no($24,1,$8,$9,$25,$16)|0);
 $26 = +HEAPF64[$8>>3];
 $27 = $10;
 $28 = $13;
 $29 = (+_AT_max_electron_range_m($26,$27,$28));
 $17 = $29;
 $30 = +HEAPF64[$8>>3];
 $31 = (+_AT_r_min_RadicalDiffusion_m($30));
 $18 = $31;
 $32 = +HEAPF64[$8>>3];
 $33 = $10;
 $34 = $13;
 $35 = (+_AT_single_impact_fluence_cm2_single($32,$33,$34));
 $19 = $35;
 $36 = +HEAPF64[$16>>3];
 $37 = $19;
 $38 = (+_AT_single_impact_dose_Gy_single($36,$37));
 $20 = $38;
 $39 = $17;
 $40 = +HEAPF64[$16>>3];
 $41 = +HEAPF64[$8>>3];
 $42 = HEAP32[$9>>2]|0;
 $43 = $10;
 $44 = $11;
 $45 = $12;
 $46 = $13;
 $47 = (+_AT_RDD_precalculated_constant_Gy($39,$40,$41,$42,$43,$44,$45,$46));
 $21 = $47;
 $48 = +HEAPF64[$8>>3];
 $49 = HEAP32[$9>>2]|0;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $53 = $13;
 $54 = $21;
 $55 = (+_AT_RDD_d_min_Gy($48,$49,$50,$51,$52,$53,$54));
 $22 = $55;
 $56 = +HEAPF64[$8>>3];
 $57 = HEAP32[$9>>2]|0;
 $58 = $10;
 $59 = $11;
 $60 = $12;
 $61 = $13;
 $62 = $14;
 $63 = (+_AT_RDD_d_max_Gy($56,$57,$58,$59,$60,$61,$62));
 $23 = $63;
 $64 = +HEAPF64[$16>>3];
 $65 = $15;
 HEAPF64[$65>>3] = $64;
 $66 = $18;
 $67 = $15;
 $68 = ((($67)) + 8|0);
 HEAPF64[$68>>3] = $66;
 $69 = $17;
 $70 = $15;
 $71 = ((($70)) + 16|0);
 HEAPF64[$71>>3] = $69;
 $72 = $22;
 $73 = $15;
 $74 = ((($73)) + 24|0);
 HEAPF64[$74>>3] = $72;
 $75 = $23;
 $76 = $15;
 $77 = ((($76)) + 32|0);
 HEAPF64[$77>>3] = $75;
 $78 = $21;
 $79 = $15;
 $80 = ((($79)) + 40|0);
 HEAPF64[$80>>3] = $78;
 $81 = $19;
 $82 = $15;
 $83 = ((($82)) + 48|0);
 HEAPF64[$83>>3] = $81;
 $84 = $20;
 $85 = $15;
 $86 = ((($85)) + 56|0);
 HEAPF64[$86>>3] = $84;
 STACKTOP = sp;return;
}
function _AT_RDD_f1_parameters_mixed_field($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = 0;
 while(1) {
  $19 = $18;
  $20 = $9;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $10;
  $23 = $18;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $11;
  $27 = $18;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $12;
  $31 = $13;
  $32 = $14;
  $33 = $15;
  $34 = $16;
  $35 = $17;
  $36 = $18;
  $37 = $36<<3;
  $38 = (($35) + ($37<<3)|0);
  _AT_RDD_f1_parameters_single_field($25,$29,$30,$31,$32,$33,$34,$38);
  $39 = $18;
  $40 = (($39) + 1)|0;
  $18 = $40;
 }
 STACKTOP = sp;return;
}
function _AT_D_RDD_Gy($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0.0;
 var $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0.0;
 var $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0.0;
 var $463 = 0, $464 = 0, $465 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $13 = sp + 216|0;
 $14 = sp + 256|0;
 $23 = sp + 208|0;
 $11 = $0;
 $12 = $1;
 HEAPF64[$13>>3] = $2;
 HEAP32[$14>>2] = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $50 = $16;
 $51 = ($50|0)==(8);
 if ($51) {
  $22 = 0;
  while(1) {
   $52 = $22;
   $53 = $11;
   $54 = ($52|0)<($53|0);
   if (!($54)) {
    break;
   }
   $55 = $12;
   $56 = $22;
   $57 = (($55) + ($56<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = +HEAPF64[$13>>3];
   $60 = HEAP32[$14>>2]|0;
   $61 = $15;
   $62 = (+_AT_RDD_RadicalDiffusion_Gy($58,$59,$60,$61));
   $63 = $20;
   $64 = $22;
   $65 = (($63) + ($64<<3)|0);
   HEAPF64[$65>>3] = $62;
   $66 = $22;
   $67 = (($66) + 1)|0;
   $22 = $67;
  }
  $10 = 1;
  $465 = $10;
  STACKTOP = sp;return ($465|0);
 }
 $68 = $19;
 $69 = $15;
 (_AT_Mass_Stopping_Power_with_no($68,1,$13,$14,$69,$23)|0);
 $70 = +HEAPF64[$13>>3];
 $71 = $15;
 $72 = $18;
 $73 = (+_AT_max_electron_range_m($70,$71,$72));
 $24 = $73;
 $74 = $24;
 $75 = +HEAPF64[$23>>3];
 $76 = +HEAPF64[$13>>3];
 $77 = HEAP32[$14>>2]|0;
 $78 = $15;
 $79 = $16;
 $80 = $17;
 $81 = $18;
 $82 = (+_AT_RDD_precalculated_constant_Gy($74,$75,$76,$77,$78,$79,$80,$81));
 $25 = $82;
 $83 = +HEAPF64[$13>>3];
 $84 = HEAP32[$14>>2]|0;
 $85 = $15;
 $86 = $16;
 $87 = $17;
 $88 = $18;
 $89 = $25;
 $90 = (+_AT_RDD_d_min_Gy($83,$84,$85,$86,$87,$88,$89));
 $26 = $90;
 $91 = $15;
 $92 = (+_AT_density_g_cm3_from_material_no($91));
 $27 = $92;
 $93 = $27;
 $94 = $93 * 1000.0;
 $28 = $94;
 $29 = 0.0;
 $95 = $16;
 $96 = ($95|0)==(4);
 $97 = $16;
 $98 = ($97|0)==(5);
 $or$cond = $96 | $98;
 $99 = $16;
 $100 = ($99|0)==(6);
 $or$cond3 = $or$cond | $100;
 $101 = $16;
 $102 = ($101|0)==(7);
 $or$cond5 = $or$cond3 | $102;
 if ($or$cond5) {
  $103 = +HEAPF64[$13>>3];
  $104 = HEAP32[$14>>2]|0;
  $105 = $15;
  $106 = $18;
  $107 = (+_AT_RDD_Katz_coeff_Gy_general($103,$104,$105,$106));
  $29 = $107;
 }
 $108 = $16;
 $109 = ($108|0)==(1);
 L12: do {
  if ($109) {
   $21 = 0;
   while(1) {
    $110 = $21;
    $111 = $11;
    $112 = ($110|0)<($111|0);
    if (!($112)) {
     break L12;
    }
    $113 = $12;
    $114 = $21;
    $115 = (($113) + ($114<<3)|0);
    $116 = +HEAPF64[$115>>3];
    $117 = $24;
    $118 = $25;
    $119 = (+_AT_RDD_Test_Gy($116,0.0,$117,$118));
    $120 = $20;
    $121 = $21;
    $122 = (($120) + ($121<<3)|0);
    HEAPF64[$122>>3] = $119;
    $123 = $21;
    $124 = (($123) + 1)|0;
    $21 = $124;
   }
  }
 } while(0);
 $125 = $16;
 $126 = ($125|0)==(2);
 L18: do {
  if ($126) {
   $127 = $25;
   $30 = $127;
   $128 = $18;
   $129 = ($128|0)==(3);
   $130 = $18;
   $131 = ($130|0)==(6);
   $or$cond7 = $129 | $131;
   $132 = $18;
   $133 = ($132|0)==(2);
   $or$cond9 = $or$cond7 | $133;
   if (!($or$cond9)) {
    $21 = 0;
    while(1) {
     $178 = $21;
     $179 = $11;
     $180 = ($178|0)<($179|0);
     if (!($180)) {
      break;
     }
     $181 = $20;
     $182 = $21;
     $183 = (($181) + ($182<<3)|0);
     HEAPF64[$183>>3] = 0.0;
     $184 = $21;
     $185 = (($184) + 1)|0;
     $21 = $185;
    }
    $10 = 1;
    $465 = $10;
    STACKTOP = sp;return ($465|0);
   }
   $134 = +HEAPF64[$13>>3];
   $135 = (+_AT_ER_PowerLaw_alpha($134));
   $31 = $135;
   $136 = $24;
   $137 = $16;
   $138 = $17;
   $139 = (+_AT_RDD_r_min_m($136,$137,$138));
   $32 = $139;
   $21 = 0;
   while(1) {
    $140 = $21;
    $141 = $11;
    $142 = ($140|0)<($141|0);
    if (!($142)) {
     break L18;
    }
    $143 = $12;
    $144 = $21;
    $145 = (($143) + ($144<<3)|0);
    $146 = +HEAPF64[$145>>3];
    $147 = $32;
    $148 = $24;
    $149 = $18;
    $150 = $31;
    $151 = $30;
    $152 = (+_AT_RDD_KatzPoint_Gy($146,$147,$148,$149,$150,$151));
    $153 = $20;
    $154 = $21;
    $155 = (($153) + ($154<<3)|0);
    HEAPF64[$155>>3] = $152;
    $156 = $20;
    $157 = $21;
    $158 = (($156) + ($157<<3)|0);
    $159 = +HEAPF64[$158>>3];
    $160 = $159 > 0.0;
    if ($160) {
     $161 = $20;
     $162 = $21;
     $163 = (($161) + ($162<<3)|0);
     $164 = +HEAPF64[$163>>3];
     $165 = $26;
     $166 = $164 > $165;
     if ($166) {
      $167 = $20;
      $168 = $21;
      $169 = (($167) + ($168<<3)|0);
      $170 = +HEAPF64[$169>>3];
      $175 = $170;
     } else {
      $171 = $26;
      $175 = $171;
     }
     $172 = $20;
     $173 = $21;
     $174 = (($172) + ($173<<3)|0);
     HEAPF64[$174>>3] = $175;
    }
    $176 = $21;
    $177 = (($176) + 1)|0;
    $21 = $177;
   }
  }
 } while(0);
 $186 = $16;
 $187 = ($186|0)==(4);
 L39: do {
  if ($187) {
   $188 = $18;
   $189 = ($188|0)==(3);
   $190 = $18;
   $191 = ($190|0)==(6);
   $or$cond11 = $189 | $191;
   $192 = $18;
   $193 = ($192|0)==(2);
   $or$cond13 = $or$cond11 | $193;
   if (!($or$cond13)) {
    $21 = 0;
    while(1) {
     $247 = $21;
     $248 = $11;
     $249 = ($247|0)<($248|0);
     if (!($249)) {
      break;
     }
     $250 = $20;
     $251 = $21;
     $252 = (($250) + ($251<<3)|0);
     HEAPF64[$252>>3] = 0.0;
     $253 = $21;
     $254 = (($253) + 1)|0;
     $21 = $254;
    }
    $10 = 1;
    $465 = $10;
    STACKTOP = sp;return ($465|0);
   }
   $194 = +HEAPF64[$23>>3];
   $195 = $27;
   $196 = $194 * $195;
   $197 = $196 * 100.0;
   $198 = $197 * 1.6021764600000001E-13;
   $33 = $198;
   $199 = $25;
   $34 = $199;
   $200 = +HEAPF64[$13>>3];
   $201 = (+_AT_ER_PowerLaw_alpha($200));
   $35 = $201;
   $202 = $24;
   $203 = $16;
   $204 = $17;
   $205 = (+_AT_RDD_a0_m($202,$203,$204));
   $36 = $205;
   $21 = 0;
   while(1) {
    $206 = $21;
    $207 = $11;
    $208 = ($206|0)<($207|0);
    if (!($208)) {
     break L39;
    }
    $209 = $12;
    $210 = $21;
    $211 = (($209) + ($210<<3)|0);
    $212 = +HEAPF64[$211>>3];
    $213 = $24;
    $214 = $36;
    $215 = $18;
    $216 = $35;
    $217 = $28;
    $218 = $33;
    $219 = $34;
    $220 = $29;
    $221 = (+_AT_RDD_KatzSite_Gy($212,0.0,$213,$214,$215,$216,$217,$218,$219,$220));
    $222 = $20;
    $223 = $21;
    $224 = (($222) + ($223<<3)|0);
    HEAPF64[$224>>3] = $221;
    $225 = $20;
    $226 = $21;
    $227 = (($225) + ($226<<3)|0);
    $228 = +HEAPF64[$227>>3];
    $229 = $228 > 0.0;
    if ($229) {
     $230 = $20;
     $231 = $21;
     $232 = (($230) + ($231<<3)|0);
     $233 = +HEAPF64[$232>>3];
     $234 = $26;
     $235 = $233 > $234;
     if ($235) {
      $236 = $20;
      $237 = $21;
      $238 = (($236) + ($237<<3)|0);
      $239 = +HEAPF64[$238>>3];
      $244 = $239;
     } else {
      $240 = $26;
      $244 = $240;
     }
     $241 = $20;
     $242 = $21;
     $243 = (($241) + ($242<<3)|0);
     HEAPF64[$243>>3] = $244;
    }
    $245 = $21;
    $246 = (($245) + 1)|0;
    $21 = $246;
   }
  }
 } while(0);
 $255 = $16;
 $256 = ($255|0)==(3);
 L60: do {
  if ($256) {
   $257 = $24;
   $258 = $16;
   $259 = $17;
   $260 = (+_AT_RDD_a0_m($257,$258,$259));
   $37 = $260;
   $21 = 0;
   while(1) {
    $261 = $21;
    $262 = $11;
    $263 = ($261|0)<($262|0);
    if (!($263)) {
     break L60;
    }
    $264 = $12;
    $265 = $21;
    $266 = (($264) + ($265<<3)|0);
    $267 = +HEAPF64[$266>>3];
    $268 = $24;
    $269 = $37;
    $270 = $25;
    $271 = (+_AT_RDD_Geiss_Gy($267,0.0,$268,$269,$270));
    $272 = $20;
    $273 = $21;
    $274 = (($272) + ($273<<3)|0);
    HEAPF64[$274>>3] = $271;
    $275 = $21;
    $276 = (($275) + 1)|0;
    $21 = $276;
   }
  }
 } while(0);
 $277 = $16;
 $278 = ($277|0)==(5);
 L66: do {
  if ($278) {
   $279 = +HEAPF64[$13>>3];
   $280 = (+_AT_beta_from_E_single($279));
   $38 = $280;
   $281 = $24;
   $282 = $16;
   $283 = $17;
   $284 = (+_AT_RDD_r_min_m($281,$282,$283));
   $39 = $284;
   $21 = 0;
   while(1) {
    $285 = $21;
    $286 = $11;
    $287 = ($285|0)<($286|0);
    if (!($287)) {
     break L66;
    }
    $288 = $12;
    $289 = $21;
    $290 = (($288) + ($289<<3)|0);
    $291 = +HEAPF64[$290>>3];
    $292 = $39;
    $293 = $24;
    $294 = $38;
    $295 = $25;
    $296 = $29;
    $297 = (+_AT_RDD_CucinottaPoint_Gy($291,$292,$293,$294,$295,$296));
    $298 = $20;
    $299 = $21;
    $300 = (($298) + ($299<<3)|0);
    HEAPF64[$300>>3] = $297;
    $301 = $20;
    $302 = $21;
    $303 = (($301) + ($302<<3)|0);
    $304 = +HEAPF64[$303>>3];
    $305 = $304 > 0.0;
    if ($305) {
     $306 = $20;
     $307 = $21;
     $308 = (($306) + ($307<<3)|0);
     $309 = +HEAPF64[$308>>3];
     $310 = $26;
     $311 = $309 > $310;
     if ($311) {
      $312 = $20;
      $313 = $21;
      $314 = (($312) + ($313<<3)|0);
      $315 = +HEAPF64[$314>>3];
      $320 = $315;
     } else {
      $316 = $26;
      $320 = $316;
     }
     $317 = $20;
     $318 = $21;
     $319 = (($317) + ($318<<3)|0);
     HEAPF64[$319>>3] = $320;
    }
    $321 = $21;
    $322 = (($321) + 1)|0;
    $21 = $322;
   }
  }
 } while(0);
 $323 = $16;
 $324 = ($323|0)==(6);
 L79: do {
  if ($324) {
   $325 = $18;
   $326 = ($325|0)==(3);
   $327 = $18;
   $328 = ($327|0)==(6);
   $or$cond15 = $326 | $328;
   $329 = $18;
   $330 = ($329|0)==(2);
   $or$cond17 = $or$cond15 | $330;
   if (!($or$cond17)) {
    $21 = 0;
    while(1) {
     $382 = $21;
     $383 = $11;
     $384 = ($382|0)<($383|0);
     if (!($384)) {
      break;
     }
     $385 = $20;
     $386 = $21;
     $387 = (($385) + ($386<<3)|0);
     HEAPF64[$387>>3] = 0.0;
     $388 = $21;
     $389 = (($388) + 1)|0;
     $21 = $389;
    }
    $10 = 1;
    $465 = $10;
    STACKTOP = sp;return ($465|0);
   }
   $331 = $25;
   $40 = $331;
   $332 = $24;
   $333 = $16;
   $334 = $17;
   $335 = (+_AT_RDD_r_min_m($332,$333,$334));
   $41 = $335;
   $336 = +HEAPF64[$13>>3];
   $337 = (+_AT_ER_PowerLaw_alpha($336));
   $42 = $337;
   $338 = $24;
   $339 = $16;
   $340 = $17;
   $341 = (+_AT_RDD_a0_m($338,$339,$340));
   $43 = $341;
   $21 = 0;
   while(1) {
    $342 = $21;
    $343 = $11;
    $344 = ($342|0)<($343|0);
    if (!($344)) {
     break L79;
    }
    $345 = $12;
    $346 = $21;
    $347 = (($345) + ($346<<3)|0);
    $348 = +HEAPF64[$347>>3];
    $349 = $43;
    $350 = $18;
    $351 = $41;
    $352 = $24;
    $353 = $42;
    $354 = $40;
    $355 = $29;
    $356 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy($348,$349,$350,$351,$352,$353,$354,$355));
    $357 = $20;
    $358 = $21;
    $359 = (($357) + ($358<<3)|0);
    HEAPF64[$359>>3] = $356;
    $360 = $20;
    $361 = $21;
    $362 = (($360) + ($361<<3)|0);
    $363 = +HEAPF64[$362>>3];
    $364 = $363 > 0.0;
    if ($364) {
     $365 = $20;
     $366 = $21;
     $367 = (($365) + ($366<<3)|0);
     $368 = +HEAPF64[$367>>3];
     $369 = $26;
     $370 = $368 > $369;
     if ($370) {
      $371 = $20;
      $372 = $21;
      $373 = (($371) + ($372<<3)|0);
      $374 = +HEAPF64[$373>>3];
      $379 = $374;
     } else {
      $375 = $26;
      $379 = $375;
     }
     $376 = $20;
     $377 = $21;
     $378 = (($376) + ($377<<3)|0);
     HEAPF64[$378>>3] = $379;
    }
    $380 = $21;
    $381 = (($380) + 1)|0;
    $21 = $381;
   }
  }
 } while(0);
 $390 = $16;
 $391 = ($390|0)==(7);
 L100: do {
  if ($391) {
   $392 = $24;
   $393 = $16;
   $394 = $17;
   $395 = (+_AT_RDD_a0_m($392,$393,$394));
   $44 = $395;
   $396 = +HEAPF64[$13>>3];
   $397 = (+_AT_beta_from_E_single($396));
   $45 = $397;
   $398 = $25;
   $46 = $398;
   $399 = $24;
   $400 = $16;
   $401 = $17;
   $402 = (+_AT_RDD_r_min_m($399,$400,$401));
   $47 = $402;
   $403 = $44;
   $404 = $24;
   $405 = $403 < $404;
   $406 = $44;
   $407 = $24;
   $408 = $405 ? $406 : $407;
   $48 = $408;
   $409 = $47;
   $410 = $48;
   $411 = $24;
   $412 = $45;
   $413 = $29;
   $414 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($409,$410,$411,$412,$413));
   $49 = $414;
   $415 = $46;
   $416 = $47;
   $417 = $48;
   $418 = $24;
   $419 = $45;
   $420 = $29;
   $421 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($416,$417,$418,$419,$420));
   $422 = $415 * $421;
   $423 = $49;
   $424 = $423 + $422;
   $49 = $424;
   $21 = 0;
   while(1) {
    $425 = $21;
    $426 = $11;
    $427 = ($425|0)<($426|0);
    if (!($427)) {
     break L100;
    }
    $428 = $12;
    $429 = $21;
    $430 = (($428) + ($429<<3)|0);
    $431 = +HEAPF64[$430>>3];
    $432 = $44;
    $433 = $47;
    $434 = $24;
    $435 = $45;
    $436 = $29;
    $437 = $46;
    $438 = $49;
    $439 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy($431,$432,$433,$434,$435,$436,$437,$438));
    $440 = $20;
    $441 = $21;
    $442 = (($440) + ($441<<3)|0);
    HEAPF64[$442>>3] = $439;
    $443 = $20;
    $444 = $21;
    $445 = (($443) + ($444<<3)|0);
    $446 = +HEAPF64[$445>>3];
    $447 = $446 > 0.0;
    if ($447) {
     $448 = $20;
     $449 = $21;
     $450 = (($448) + ($449<<3)|0);
     $451 = +HEAPF64[$450>>3];
     $452 = $26;
     $453 = $451 > $452;
     if ($453) {
      $454 = $20;
      $455 = $21;
      $456 = (($454) + ($455<<3)|0);
      $457 = +HEAPF64[$456>>3];
      $462 = $457;
     } else {
      $458 = $26;
      $462 = $458;
     }
     $459 = $20;
     $460 = $21;
     $461 = (($459) + ($460<<3)|0);
     HEAPF64[$461>>3] = $462;
    }
    $463 = $21;
    $464 = (($463) + 1)|0;
    $21 = $464;
   }
  }
 } while(0);
 $10 = 0;
 $465 = $10;
 STACKTOP = sp;return ($465|0);
}
function _AT_r_RDD_m($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0;
 var $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0;
 var $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0;
 var $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $13 = sp + 200|0;
 $14 = sp + 236|0;
 $22 = sp + 192|0;
 $11 = $0;
 $12 = $1;
 HEAPF64[$13>>3] = $2;
 HEAP32[$14>>2] = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $47 = $16;
 $48 = ($47|0)==(8);
 if ($48) {
  $21 = 0;
  while(1) {
   $49 = $21;
   $50 = $11;
   $51 = ($49|0)<($50|0);
   if (!($51)) {
    break;
   }
   $52 = $12;
   $53 = $21;
   $54 = (($52) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = +HEAPF64[$13>>3];
   $57 = HEAP32[$14>>2]|0;
   $58 = $15;
   $59 = (+_AT_inverse_RadicalDiffusion_m($55,$56,$57,$58));
   $60 = $20;
   $61 = $21;
   $62 = (($60) + ($61<<3)|0);
   HEAPF64[$62>>3] = $59;
   $63 = $21;
   $64 = (($63) + 1)|0;
   $21 = $64;
  }
  $10 = 0;
  $432 = $10;
  STACKTOP = sp;return ($432|0);
 }
 $65 = $19;
 $66 = $15;
 (_AT_Mass_Stopping_Power_with_no($65,1,$13,$14,$66,$22)|0);
 $67 = +HEAPF64[$13>>3];
 $68 = $15;
 $69 = $18;
 $70 = (+_AT_max_electron_range_m($67,$68,$69));
 $23 = $70;
 $71 = $23;
 $72 = $16;
 $73 = $17;
 $74 = (+_AT_RDD_r_min_m($71,$72,$73));
 $24 = $74;
 $75 = $23;
 $76 = +HEAPF64[$22>>3];
 $77 = +HEAPF64[$13>>3];
 $78 = HEAP32[$14>>2]|0;
 $79 = $15;
 $80 = $16;
 $81 = $17;
 $82 = $18;
 $83 = (+_AT_RDD_precalculated_constant_Gy($75,$76,$77,$78,$79,$80,$81,$82));
 $25 = $83;
 $84 = +HEAPF64[$13>>3];
 $85 = HEAP32[$14>>2]|0;
 $86 = $15;
 $87 = $16;
 $88 = $17;
 $89 = $18;
 $90 = $25;
 $91 = (+_AT_RDD_d_min_Gy($84,$85,$86,$87,$88,$89,$90));
 $26 = $91;
 $92 = +HEAPF64[$13>>3];
 $93 = HEAP32[$14>>2]|0;
 $94 = $15;
 $95 = $16;
 $96 = $17;
 $97 = $18;
 $98 = $19;
 $99 = (+_AT_RDD_d_max_Gy($92,$93,$94,$95,$96,$97,$98));
 $27 = $99;
 $100 = $16;
 $101 = ($100|0)==(1);
 L9: do {
  if ($101) {
   $21 = 0;
   while(1) {
    $102 = $21;
    $103 = $11;
    $104 = ($102|0)<($103|0);
    if (!($104)) {
     break L9;
    }
    $105 = $12;
    $106 = $21;
    $107 = (($105) + ($106<<3)|0);
    $108 = +HEAPF64[$107>>3];
    $109 = $23;
    $110 = (+_AT_inverse_RDD_Test_m($108,$109));
    $111 = $20;
    $112 = $21;
    $113 = (($111) + ($112<<3)|0);
    HEAPF64[$113>>3] = $110;
    $114 = $21;
    $115 = (($114) + 1)|0;
    $21 = $115;
   }
  }
 } while(0);
 $116 = $16;
 $117 = ($116|0)==(2);
 L15: do {
  if ($117) {
   $118 = $18;
   $119 = ($118|0)==(3);
   $120 = $18;
   $121 = ($120|0)==(6);
   $or$cond = $119 | $121;
   $122 = $18;
   $123 = ($122|0)==(2);
   $or$cond3 = $or$cond | $123;
   if (!($or$cond3)) {
    $21 = 0;
    while(1) {
     $160 = $21;
     $161 = $11;
     $162 = ($160|0)<($161|0);
     if (!($162)) {
      break;
     }
     $163 = $20;
     $164 = $21;
     $165 = (($163) + ($164<<3)|0);
     HEAPF64[$165>>3] = 0.0;
     $166 = $21;
     $167 = (($166) + 1)|0;
     $21 = $167;
    }
    $10 = 1;
    $432 = $10;
    STACKTOP = sp;return ($432|0);
   }
   $124 = $25;
   $28 = $124;
   $125 = +HEAPF64[$13>>3];
   $126 = (+_AT_ER_PowerLaw_alpha($125));
   $29 = $126;
   $21 = 0;
   while(1) {
    $127 = $21;
    $128 = $11;
    $129 = ($127|0)<($128|0);
    if (!($129)) {
     break L15;
    }
    $130 = $12;
    $131 = $21;
    $132 = (($130) + ($131<<3)|0);
    $133 = +HEAPF64[$132>>3];
    $134 = $26;
    $135 = $133 >= $134;
    if ($135) {
     $136 = $12;
     $137 = $21;
     $138 = (($136) + ($137<<3)|0);
     $139 = +HEAPF64[$138>>3];
     $140 = $27;
     $141 = $139 <= $140;
     if ($141) {
      $142 = $12;
      $143 = $21;
      $144 = (($142) + ($143<<3)|0);
      $145 = +HEAPF64[$144>>3];
      $146 = $24;
      $147 = $23;
      $148 = $18;
      $149 = $29;
      $150 = $28;
      $151 = (+_AT_inverse_RDD_KatzPoint_m($145,$146,$147,$148,$149,$150));
      $152 = $20;
      $153 = $21;
      $154 = (($152) + ($153<<3)|0);
      HEAPF64[$154>>3] = $151;
     } else {
      label = 17;
     }
    } else {
     label = 17;
    }
    if ((label|0) == 17) {
     label = 0;
     $155 = $20;
     $156 = $21;
     $157 = (($155) + ($156<<3)|0);
     HEAPF64[$157>>3] = 0.0;
    }
    $158 = $21;
    $159 = (($158) + 1)|0;
    $21 = $159;
   }
  }
 } while(0);
 $168 = $16;
 $169 = ($168|0)==(3);
 L35: do {
  if ($169) {
   $170 = $23;
   $171 = $16;
   $172 = $17;
   $173 = (+_AT_RDD_a0_m($170,$171,$172));
   $30 = $173;
   $21 = 0;
   while(1) {
    $174 = $21;
    $175 = $11;
    $176 = ($174|0)<($175|0);
    if (!($176)) {
     break L35;
    }
    $177 = $12;
    $178 = $21;
    $179 = (($177) + ($178<<3)|0);
    $180 = +HEAPF64[$179>>3];
    $181 = $26;
    $182 = $27;
    $183 = $30;
    $184 = $25;
    $185 = (+_AT_inverse_RDD_Geiss_m($180,$181,$182,$183,$184));
    $186 = $20;
    $187 = $21;
    $188 = (($186) + ($187<<3)|0);
    HEAPF64[$188>>3] = $185;
    $189 = $21;
    $190 = (($189) + 1)|0;
    $21 = $190;
   }
  }
 } while(0);
 $191 = $16;
 $192 = ($191|0)==(4);
 L41: do {
  if ($192) {
   $193 = $18;
   $194 = ($193|0)==(3);
   $195 = $18;
   $196 = ($195|0)==(6);
   $or$cond5 = $194 | $196;
   $197 = $18;
   $198 = ($197|0)==(2);
   $or$cond7 = $or$cond5 | $198;
   if (!($or$cond7)) {
    $21 = 0;
    while(1) {
     $245 = $21;
     $246 = $11;
     $247 = ($245|0)<($246|0);
     if (!($247)) {
      break;
     }
     $248 = $20;
     $249 = $21;
     $250 = (($248) + ($249<<3)|0);
     HEAPF64[$250>>3] = 0.0;
     $251 = $21;
     $252 = (($251) + 1)|0;
     $21 = $252;
    }
    $10 = 1;
    $432 = $10;
    STACKTOP = sp;return ($432|0);
   }
   $199 = +HEAPF64[$13>>3];
   $200 = HEAP32[$14>>2]|0;
   $201 = $15;
   $202 = $18;
   $203 = (+_AT_RDD_Katz_coeff_Gy_general($199,$200,$201,$202));
   $31 = $203;
   $204 = +HEAPF64[$13>>3];
   $205 = (+_AT_ER_PowerLaw_alpha($204));
   $32 = $205;
   $206 = $23;
   $207 = $16;
   $208 = $17;
   $209 = (+_AT_RDD_a0_m($206,$207,$208));
   $33 = $209;
   $21 = 0;
   while(1) {
    $210 = $21;
    $211 = $11;
    $212 = ($210|0)<($211|0);
    if (!($212)) {
     break L41;
    }
    $213 = $12;
    $214 = $21;
    $215 = (($213) + ($214<<3)|0);
    $216 = +HEAPF64[$215>>3];
    $217 = $26;
    $218 = $216 >= $217;
    if ($218) {
     $219 = $12;
     $220 = $21;
     $221 = (($219) + ($220<<3)|0);
     $222 = +HEAPF64[$221>>3];
     $223 = $27;
     $224 = $222 <= $223;
     if ($224) {
      $225 = $12;
      $226 = $21;
      $227 = (($225) + ($226<<3)|0);
      $228 = +HEAPF64[$227>>3];
      $229 = $24;
      $230 = $23;
      $231 = $33;
      $232 = $18;
      $233 = $32;
      $234 = $27;
      $235 = $31;
      $236 = (+_AT_inverse_RDD_KatzSite_m($228,$229,$230,$231,$232,$233,$234,$235));
      $237 = $20;
      $238 = $21;
      $239 = (($237) + ($238<<3)|0);
      HEAPF64[$239>>3] = $236;
     } else {
      label = 34;
     }
    } else {
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $240 = $20;
     $241 = $21;
     $242 = (($240) + ($241<<3)|0);
     HEAPF64[$242>>3] = 0.0;
    }
    $243 = $21;
    $244 = (($243) + 1)|0;
    $21 = $244;
   }
  }
 } while(0);
 $253 = $16;
 $254 = ($253|0)==(5);
 L61: do {
  if ($254) {
   $255 = +HEAPF64[$13>>3];
   $256 = HEAP32[$14>>2]|0;
   $257 = $15;
   $258 = $18;
   $259 = (+_AT_RDD_Katz_coeff_Gy_general($255,$256,$257,$258));
   $34 = $259;
   $260 = $25;
   $35 = $260;
   $261 = +HEAPF64[$13>>3];
   $262 = (+_AT_beta_from_E_single($261));
   $36 = $262;
   $21 = 0;
   while(1) {
    $263 = $21;
    $264 = $11;
    $265 = ($263|0)<($264|0);
    if (!($265)) {
     break L61;
    }
    $266 = $12;
    $267 = $21;
    $268 = (($266) + ($267<<3)|0);
    $269 = +HEAPF64[$268>>3];
    $270 = $26;
    $271 = $269 >= $270;
    if ($271) {
     $272 = $12;
     $273 = $21;
     $274 = (($272) + ($273<<3)|0);
     $275 = +HEAPF64[$274>>3];
     $276 = $27;
     $277 = $275 <= $276;
     if ($277) {
      $278 = $12;
      $279 = $21;
      $280 = (($278) + ($279<<3)|0);
      $281 = +HEAPF64[$280>>3];
      $282 = $24;
      $283 = $23;
      $284 = $18;
      $285 = $36;
      $286 = $35;
      $287 = $34;
      $288 = (+_AT_inverse_RDD_Cucinotta_m($281,$282,$283,$284,$285,$286,$287));
      $289 = $20;
      $290 = $21;
      $291 = (($289) + ($290<<3)|0);
      HEAPF64[$291>>3] = $288;
     } else {
      label = 46;
     }
    } else {
     label = 46;
    }
    if ((label|0) == 46) {
     label = 0;
     $292 = $20;
     $293 = $21;
     $294 = (($292) + ($293<<3)|0);
     HEAPF64[$294>>3] = 0.0;
    }
    $295 = $21;
    $296 = (($295) + 1)|0;
    $21 = $296;
   }
  }
 } while(0);
 $297 = $16;
 $298 = ($297|0)==(6);
 L73: do {
  if ($298) {
   $299 = $18;
   $300 = ($299|0)==(3);
   $301 = $18;
   $302 = ($301|0)==(6);
   $or$cond9 = $300 | $302;
   $303 = $18;
   $304 = ($303|0)==(2);
   $or$cond11 = $or$cond9 | $304;
   if (!($or$cond11)) {
    $21 = 0;
    while(1) {
     $352 = $21;
     $353 = $11;
     $354 = ($352|0)<($353|0);
     if (!($354)) {
      break;
     }
     $355 = $20;
     $356 = $21;
     $357 = (($355) + ($356<<3)|0);
     HEAPF64[$357>>3] = 0.0;
     $358 = $21;
     $359 = (($358) + 1)|0;
     $21 = $359;
    }
    $10 = 1;
    $432 = $10;
    STACKTOP = sp;return ($432|0);
   }
   $305 = +HEAPF64[$13>>3];
   $306 = HEAP32[$14>>2]|0;
   $307 = $15;
   $308 = $18;
   $309 = (+_AT_RDD_Katz_coeff_Gy_general($305,$306,$307,$308));
   $37 = $309;
   $310 = $25;
   $38 = $310;
   $311 = +HEAPF64[$13>>3];
   $312 = (+_AT_ER_PowerLaw_alpha($311));
   $39 = $312;
   $313 = $23;
   $314 = $16;
   $315 = $17;
   $316 = (+_AT_RDD_a0_m($313,$314,$315));
   $40 = $316;
   $21 = 0;
   while(1) {
    $317 = $21;
    $318 = $11;
    $319 = ($317|0)<($318|0);
    if (!($319)) {
     break L73;
    }
    $320 = $12;
    $321 = $21;
    $322 = (($320) + ($321<<3)|0);
    $323 = +HEAPF64[$322>>3];
    $324 = $26;
    $325 = $323 >= $324;
    if ($325) {
     $326 = $12;
     $327 = $21;
     $328 = (($326) + ($327<<3)|0);
     $329 = +HEAPF64[$328>>3];
     $330 = $27;
     $331 = $329 <= $330;
     if ($331) {
      $332 = $12;
      $333 = $21;
      $334 = (($332) + ($333<<3)|0);
      $335 = +HEAPF64[$334>>3];
      $336 = $24;
      $337 = $23;
      $338 = $40;
      $339 = $18;
      $340 = $39;
      $341 = $38;
      $342 = $37;
      $343 = (+_AT_inverse_RDD_ExtendedTarget_KatzPoint_m($335,$336,$337,$338,$339,$340,$341,$342));
      $344 = $20;
      $345 = $21;
      $346 = (($344) + ($345<<3)|0);
      HEAPF64[$346>>3] = $343;
     } else {
      label = 55;
     }
    } else {
     label = 55;
    }
    if ((label|0) == 55) {
     label = 0;
     $347 = $20;
     $348 = $21;
     $349 = (($347) + ($348<<3)|0);
     HEAPF64[$349>>3] = 0.0;
    }
    $350 = $21;
    $351 = (($350) + 1)|0;
    $21 = $351;
   }
  }
 } while(0);
 $360 = $16;
 $361 = ($360|0)==(7);
 L93: do {
  if ($361) {
   $362 = +HEAPF64[$13>>3];
   $363 = HEAP32[$14>>2]|0;
   $364 = $15;
   $365 = $18;
   $366 = (+_AT_RDD_Katz_coeff_Gy_general($362,$363,$364,$365));
   $41 = $366;
   $367 = +HEAPF64[$13>>3];
   $368 = (+_AT_beta_from_E_single($367));
   $42 = $368;
   $369 = $25;
   $43 = $369;
   $370 = $23;
   $371 = $16;
   $372 = $17;
   $373 = (+_AT_RDD_a0_m($370,$371,$372));
   $44 = $373;
   $374 = $44;
   $375 = $23;
   $376 = $374 < $375;
   $377 = $44;
   $378 = $23;
   $379 = $376 ? $377 : $378;
   $45 = $379;
   $380 = $24;
   $381 = $45;
   $382 = $23;
   $383 = $42;
   $384 = $41;
   $385 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($380,$381,$382,$383,$384));
   $46 = $385;
   $386 = $43;
   $387 = $24;
   $388 = $45;
   $389 = $23;
   $390 = $42;
   $391 = $41;
   $392 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($387,$388,$389,$390,$391));
   $393 = $386 * $392;
   $394 = $46;
   $395 = $394 + $393;
   $46 = $395;
   $21 = 0;
   while(1) {
    $396 = $21;
    $397 = $11;
    $398 = ($396|0)<($397|0);
    if (!($398)) {
     break L93;
    }
    $399 = $12;
    $400 = $21;
    $401 = (($399) + ($400<<3)|0);
    $402 = +HEAPF64[$401>>3];
    $403 = $26;
    $404 = $402 >= $403;
    if ($404) {
     $405 = $12;
     $406 = $21;
     $407 = (($405) + ($406<<3)|0);
     $408 = +HEAPF64[$407>>3];
     $409 = $27;
     $410 = 0.99999000000000004 * $409;
     $411 = $408 < $410;
     if ($411) {
      $412 = $12;
      $413 = $21;
      $414 = (($412) + ($413<<3)|0);
      $415 = +HEAPF64[$414>>3];
      $416 = $44;
      $417 = $24;
      $418 = $23;
      $419 = $42;
      $420 = $41;
      $421 = $43;
      $422 = $46;
      $423 = (+_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m($415,$416,$417,$418,$419,$420,$421,$422));
      $424 = $20;
      $425 = $21;
      $426 = (($424) + ($425<<3)|0);
      HEAPF64[$426>>3] = $423;
     } else {
      label = 67;
     }
    } else {
     label = 67;
    }
    if ((label|0) == 67) {
     label = 0;
     $427 = $20;
     $428 = $21;
     $429 = (($427) + ($428<<3)|0);
     HEAPF64[$429>>3] = 0.0;
    }
    $430 = $21;
    $431 = (($430) + 1)|0;
    $21 = $431;
   }
  }
 } while(0);
 $10 = 0;
 $432 = $10;
 STACKTOP = sp;return ($432|0);
}
function _geometryFunctionPhi($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 88|0;
 $8 = sp + 32|0;
 $9 = sp + 16|0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0.0;
 $7 = 0.0;
 $11 = $5;
 $12 = $3;
 $13 = $4;
 $14 = $12 - $13;
 $15 = (+Math_abs((+$14)));
 $16 = $11 <= $15;
 if (!($16)) {
  $20 = $4;
  $21 = (+_gsl_pow_2($20));
  $22 = $3;
  $23 = $5;
  $24 = $22 - $23;
  $25 = (+_gsl_pow_2($24));
  $26 = $21 - $25;
  $7 = $26;
  $27 = $5;
  $28 = $3;
  $29 = $27 + $28;
  $30 = (+_gsl_pow_2($29));
  $31 = $4;
  $32 = (+_gsl_pow_2($31));
  $33 = $30 - $32;
  $34 = $7;
  $35 = $34 / $33;
  $7 = $35;
  $36 = $7;
  $37 = (+Math_sqrt((+$36)));
  HEAPF64[$8>>3] = $37;
  $38 = ((($8)) + 8|0);
  HEAPF64[$38>>3] = 0.0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$8+12>>2]|0;
  _gsl_complex_arctan($10,$$byval_copy);
  ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$10+12>>2]|0;
  $39 = +HEAPF64[$9>>3];
  $40 = 2.0 * $39;
  $6 = $40;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 }
 $17 = $3;
 $18 = $4;
 $19 = $17 >= $18;
 if ($19) {
  $6 = 0.0;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 } else {
  $6 = 3.1415926535897931;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 }
 return +(0.0);
}
function _AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $4 = $8;
 $9 = $4;
 $10 = +HEAPF64[$9>>3];
 $5 = $10;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $6 = $13;
 $14 = $2;
 $15 = $4;
 $16 = ((($15)) + 40|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $4;
 $19 = ((($18)) + 16|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $4;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = ((($24)) + 32|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $4;
 $28 = ((($27)) + 48|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+_AT_RDD_KatzPoint_Gy($14,$17,$20,$23,$26,$29));
 $7 = $30;
 $31 = $2;
 $32 = 2.0 * $31;
 $33 = $7;
 $34 = $32 * $33;
 $35 = $5;
 $36 = $6;
 $37 = $2;
 $38 = (+_geometryFunctionPhi($35,$36,$37));
 $39 = $34 * $38;
 STACKTOP = sp;return (+$39);
}
function _AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp + 128|0;
 $15 = sp + 64|0;
 $16 = sp + 56|0;
 $18 = sp + 136|0;
 $19 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $21 = $7;
 $22 = $8;
 $23 = $21 > $22;
 if ($23) {
  $24 = $7;
  $25 = $8;
  $26 = $24 - $25;
  $27 = $26 > 0.0;
  if ($27) {
   $28 = $7;
   $29 = $8;
   $30 = $28 - $29;
   $31 = $30;
  } else {
   $31 = 0.0;
  }
  $14 = $31;
 }
 (_gsl_set_error_handler_off()|0);
 $32 = (_gsl_integration_workspace_alloc(1000)|0);
 $17 = $32;
 HEAP32[$18>>2] = 18;
 $33 = $7;
 HEAPF64[$19>>3] = $33;
 $34 = $8;
 $35 = ((($19)) + 8|0);
 HEAPF64[$35>>3] = $34;
 $36 = $9;
 $37 = ((($19)) + 24|0);
 HEAP32[$37>>2] = $36;
 $38 = $11;
 $39 = ((($19)) + 16|0);
 HEAPF64[$39>>3] = $38;
 $40 = $12;
 $41 = ((($19)) + 32|0);
 HEAPF64[$41>>3] = $40;
 $42 = $10;
 $43 = ((($19)) + 40|0);
 HEAPF64[$43>>3] = $42;
 $44 = $13;
 $45 = ((($19)) + 48|0);
 HEAPF64[$45>>3] = $44;
 $46 = ((($18)) + 4|0);
 HEAP32[$46>>2] = $19;
 $47 = $14;
 $48 = $7;
 $49 = $8;
 $50 = $48 + $49;
 $51 = $17;
 $52 = (_gsl_integration_qags($18,$47,$50,0.0,1.0000000000000001E-5,1000,$51,$15,$16)|0);
 $20 = $52;
 $53 = $20;
 $54 = ($53|0)==(18);
 $55 = $20;
 $56 = ($55|0)==(21);
 $or$cond = $54 | $56;
 if (!($or$cond)) {
  $57 = $17;
  _gsl_integration_workspace_free($57);
  $58 = $8;
  $59 = (+_gsl_pow_2($58));
  $60 = 0.31830988618379069 / $59;
  $61 = +HEAPF64[$15>>3];
  $62 = $61 * $60;
  HEAPF64[$15>>3] = $62;
  $63 = +HEAPF64[$15>>3];
  STACKTOP = sp;return (+$63);
 }
 (_printf(79556,$vararg_buffer)|0);
 HEAPF64[$15>>3] = -1.0;
 $57 = $17;
 _gsl_integration_workspace_free($57);
 $58 = $8;
 $59 = (+_gsl_pow_2($58));
 $60 = 0.31830988618379069 / $59;
 $61 = +HEAPF64[$15>>3];
 $62 = $61 * $60;
 HEAPF64[$15>>3] = $62;
 $63 = +HEAPF64[$15>>3];
 STACKTOP = sp;return (+$63);
}
function _AT_RDD_ExtendedTarget_KatzPoint_Gy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0.0;
 $18 = $9;
 $19 = $12;
 $20 = $18 < $19;
 $21 = $9;
 $22 = $12;
 $23 = $20 ? $21 : $22;
 $17 = $23;
 $24 = $8;
 $25 = $9;
 $26 = 0.01 * $25;
 $27 = $24 <= $26;
 $28 = $8;
 $29 = $28 >= 0.0;
 $or$cond = $27 & $29;
 if ($or$cond) {
  $30 = $14;
  $16 = $30;
  $31 = $12;
  $32 = $9;
  $33 = $31 < $32;
  if ($33) {
   $34 = $17;
   $35 = $9;
   $36 = $34 / $35;
   $37 = (+_gsl_pow_2($36));
   $38 = $16;
   $39 = $38 * $37;
   $16 = $39;
  }
 }
 $40 = $8;
 $41 = $9;
 $42 = 100.0 * $41;
 $43 = $40 < $42;
 if ($43) {
  $44 = $8;
  $45 = $9;
  $46 = 0.01 * $45;
  $47 = $44 > $46;
  if ($47) {
   $48 = $8;
   $49 = $9;
   $50 = $10;
   $51 = $11;
   $52 = $12;
   $53 = $13;
   $54 = $15;
   $55 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration($48,$49,$50,$51,$52,$53,$54));
   $16 = $55;
  }
 }
 $56 = $8;
 $57 = $9;
 $58 = 100.0 * $57;
 $59 = $56 >= $58;
 if (!($59)) {
  $78 = $16;
  STACKTOP = sp;return (+$78);
 }
 $60 = $8;
 $61 = $12;
 $62 = $60 <= $61;
 if (!($62)) {
  $78 = $16;
  STACKTOP = sp;return (+$78);
 }
 $63 = $10;
 $64 = ($63|0)==(3);
 $65 = $10;
 $66 = ($65|0)==(6);
 $or$cond3 = $64 | $66;
 if ($or$cond3) {
  $67 = $8;
  $68 = $13;
  $69 = $12;
  $70 = $15;
  $71 = (+_AT_RDD_Katz_PowerLawER_Dpoint_Gy($67,$68,$69,$70));
  $16 = $71;
  $78 = $16;
  STACKTOP = sp;return (+$78);
 }
 $72 = $10;
 $73 = ($72|0)==(2);
 if (!($73)) {
  $78 = $16;
  STACKTOP = sp;return (+$78);
 }
 $74 = $8;
 $75 = $12;
 $76 = $15;
 $77 = (+_AT_RDD_Katz_LinearER_Dpoint_Gy($74,$75,$76));
 $16 = $77;
 $78 = $16;
 STACKTOP = sp;return (+$78);
}
function _AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $4;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = ((($13)) + 48|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $4;
 $17 = ((($16)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $4;
 $20 = ((($19)) + 32|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $4;
 $23 = ((($22)) + 40|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $4;
 $26 = ((($25)) + 56|0);
 $27 = +HEAPF64[$26>>3];
 $28 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy($6,$9,$12,$15,$18,$21,$24,$27));
 $29 = $4;
 $30 = +HEAPF64[$29>>3];
 $31 = $28 - $30;
 STACKTOP = sp;return (+$31);
}
function _AT_inverse_RDD_ExtendedTarget_KatzPoint_m($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $17 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 1.0E-13;
 $19 = $8;
 HEAPF64[$17>>3] = $19;
 $20 = $11;
 $21 = ((($17)) + 8|0);
 HEAPF64[$21>>3] = $20;
 $22 = $12;
 $23 = ((($17)) + 24|0);
 HEAP32[$23>>2] = $22;
 $24 = $10;
 $25 = ((($17)) + 16|0);
 HEAPF64[$25>>3] = $24;
 $26 = $13;
 $27 = ((($17)) + 32|0);
 HEAPF64[$27>>3] = $26;
 $28 = $14;
 $29 = ((($17)) + 40|0);
 HEAPF64[$29>>3] = $28;
 $30 = $9;
 $31 = ((($17)) + 48|0);
 HEAPF64[$31>>3] = $30;
 $32 = $15;
 $33 = ((($17)) + 56|0);
 HEAPF64[$33>>3] = $32;
 $34 = $10;
 $35 = $11;
 $36 = $34 + $35;
 $37 = (+_zriddr(19,$17,0.0,$36,1.0E-13));
 $18 = $37;
 $38 = $18;
 STACKTOP = sp;return (+$38);
}
function _AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $4 = $8;
 $9 = $4;
 $10 = +HEAPF64[$9>>3];
 $5 = $10;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $6 = $13;
 $14 = $2;
 $15 = $4;
 $16 = ((($15)) + 16|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $4;
 $19 = ((($18)) + 24|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $4;
 $22 = ((($21)) + 32|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $4;
 $25 = ((($24)) + 48|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $4;
 $28 = ((($27)) + 40|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+_AT_RDD_CucinottaPoint_Gy($14,$17,$20,$23,$26,$29));
 $7 = $30;
 $31 = $2;
 $32 = 2.0 * $31;
 $33 = $7;
 $34 = $32 * $33;
 $35 = $5;
 $36 = $6;
 $37 = $2;
 $38 = (+_geometryFunctionPhi($35,$36,$37));
 $39 = $34 * $38;
 STACKTOP = sp;return (+$39);
}
function _AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp + 136|0;
 $15 = sp + 64|0;
 $16 = sp + 56|0;
 $18 = sp + 144|0;
 $19 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $21 = $7;
 $22 = $8;
 $23 = $21 > $22;
 if ($23) {
  $24 = $7;
  $25 = $8;
  $26 = $24 - $25;
  $27 = $26 > 0.0;
  if ($27) {
   $28 = $7;
   $29 = $8;
   $30 = $28 - $29;
   $31 = $30;
  } else {
   $31 = 0.0;
  }
  $14 = $31;
 }
 (_gsl_set_error_handler_off()|0);
 $32 = (_gsl_integration_workspace_alloc(1000)|0);
 $17 = $32;
 HEAP32[$18>>2] = 20;
 $33 = $7;
 HEAPF64[$19>>3] = $33;
 $34 = $8;
 $35 = ((($19)) + 8|0);
 HEAPF64[$35>>3] = $34;
 $36 = $9;
 $37 = ((($19)) + 16|0);
 HEAPF64[$37>>3] = $36;
 $38 = $10;
 $39 = ((($19)) + 24|0);
 HEAPF64[$39>>3] = $38;
 $40 = $11;
 $41 = ((($19)) + 32|0);
 HEAPF64[$41>>3] = $40;
 $42 = $12;
 $43 = ((($19)) + 40|0);
 HEAPF64[$43>>3] = $42;
 $44 = $13;
 $45 = ((($19)) + 48|0);
 HEAPF64[$45>>3] = $44;
 $46 = ((($18)) + 4|0);
 HEAP32[$46>>2] = $19;
 $47 = $14;
 $48 = $7;
 $49 = $8;
 $50 = $48 + $49;
 $51 = $17;
 $52 = (_gsl_integration_qags($18,$47,$50,0.0,1.0000000000000001E-5,1000,$51,$15,$16)|0);
 $20 = $52;
 $53 = $20;
 $54 = ($53|0)==(18);
 $55 = $20;
 $56 = ($55|0)==(21);
 $or$cond = $54 | $56;
 if (!($or$cond)) {
  $57 = $17;
  _gsl_integration_workspace_free($57);
  $58 = $8;
  $59 = (+_gsl_pow_2($58));
  $60 = 0.31830988618379069 / $59;
  $61 = +HEAPF64[$15>>3];
  $62 = $61 * $60;
  HEAPF64[$15>>3] = $62;
  $63 = +HEAPF64[$15>>3];
  STACKTOP = sp;return (+$63);
 }
 (_printf(79616,$vararg_buffer)|0);
 HEAPF64[$15>>3] = -1.0;
 $57 = $17;
 _gsl_integration_workspace_free($57);
 $58 = $8;
 $59 = (+_gsl_pow_2($58));
 $60 = 0.31830988618379069 / $59;
 $61 = +HEAPF64[$15>>3];
 $62 = $61 * $60;
 HEAPF64[$15>>3] = $62;
 $63 = +HEAPF64[$15>>3];
 STACKTOP = sp;return (+$63);
}
function _AT_RDD_ExtendedTarget_CucinottaPoint_Gy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $70 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0.0;
 $18 = $9;
 $19 = $11;
 $20 = $18 < $19;
 $21 = $9;
 $22 = $11;
 $23 = $20 ? $21 : $22;
 $17 = $23;
 $24 = $8;
 $25 = $9;
 $26 = 0.01 * $25;
 $27 = $24 <= $26;
 $28 = $8;
 $29 = $28 >= 0.0;
 $or$cond = $27 & $29;
 if ($or$cond) {
  $30 = $15;
  $16 = $30;
  $31 = $11;
  $32 = $9;
  $33 = $31 < $32;
  if ($33) {
   $34 = $17;
   $35 = $9;
   $36 = $34 / $35;
   $37 = (+_gsl_pow_2($36));
   $38 = $16;
   $39 = $38 * $37;
   $16 = $39;
  }
 }
 $40 = $8;
 $41 = $9;
 $42 = 100.0 * $41;
 $43 = $40 < $42;
 if ($43) {
  $44 = $8;
  $45 = $9;
  $46 = 0.01 * $45;
  $47 = $44 > $46;
  if ($47) {
   $48 = $8;
   $49 = $9;
   $50 = $10;
   $51 = $11;
   $52 = $12;
   $53 = $13;
   $54 = $14;
   $55 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration($48,$49,$50,$51,$52,$53,$54));
   $16 = $55;
  }
 }
 $56 = $8;
 $57 = $9;
 $58 = 100.0 * $57;
 $59 = $56 >= $58;
 if (!($59)) {
  $70 = $16;
  STACKTOP = sp;return (+$70);
 }
 $60 = $8;
 $61 = $11;
 $62 = $60 <= $61;
 if (!($62)) {
  $70 = $16;
  STACKTOP = sp;return (+$70);
 }
 $63 = $8;
 $64 = $10;
 $65 = $11;
 $66 = $12;
 $67 = $14;
 $68 = $13;
 $69 = (+_AT_RDD_CucinottaPoint_Gy($63,$64,$65,$66,$67,$68));
 $16 = $69;
 $70 = $16;
 STACKTOP = sp;return (+$70);
}
function _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $4;
 $11 = ((($10)) + 16|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $4;
 $14 = ((($13)) + 24|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $4;
 $17 = ((($16)) + 32|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $4;
 $20 = ((($19)) + 40|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $4;
 $23 = ((($22)) + 48|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $4;
 $26 = ((($25)) + 56|0);
 $27 = +HEAPF64[$26>>3];
 $28 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy($6,$9,$12,$15,$18,$21,$24,$27));
 $29 = $4;
 $30 = +HEAPF64[$29>>3];
 $31 = $28 - $30;
 STACKTOP = sp;return (+$31);
}
function _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $17 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 1.0E-13;
 $19 = $8;
 HEAPF64[$17>>3] = $19;
 $20 = $9;
 $21 = ((($17)) + 8|0);
 HEAPF64[$21>>3] = $20;
 $22 = $10;
 $23 = ((($17)) + 16|0);
 HEAPF64[$23>>3] = $22;
 $24 = $11;
 $25 = ((($17)) + 24|0);
 HEAPF64[$25>>3] = $24;
 $26 = $12;
 $27 = ((($17)) + 32|0);
 HEAPF64[$27>>3] = $26;
 $28 = $13;
 $29 = ((($17)) + 40|0);
 HEAPF64[$29>>3] = $28;
 $30 = $14;
 $31 = ((($17)) + 48|0);
 HEAPF64[$31>>3] = $30;
 $32 = $15;
 $33 = ((($17)) + 56|0);
 HEAPF64[$33>>3] = $32;
 $34 = $11;
 $35 = $9;
 $36 = $34 + $35;
 $37 = (+_zriddr(21,$17,0.0,$36,1.0E-13));
 $18 = $37;
 $38 = $18;
 STACKTOP = sp;return (+$38);
}
function _AT_RDD_Katz_LinearER_Daverage_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = 2.0 * $8;
 $10 = $5;
 $11 = $4;
 $12 = $10 / $11;
 $13 = (+Math_log((+$12)));
 $14 = $5;
 $15 = $4;
 $16 = $14 - $15;
 $17 = $6;
 $18 = $16 / $17;
 $19 = $13 - $18;
 $20 = $9 * $19;
 $21 = $5;
 $22 = $6;
 $23 = $21 / $22;
 $24 = (+_gsl_pow_2($23));
 $25 = $4;
 $26 = $6;
 $27 = $25 / $26;
 $28 = (+_gsl_pow_2($27));
 $29 = $24 - $28;
 $30 = $20 / $29;
 STACKTOP = sp;return (+$30);
}
function _AT_RDD_Katz_PowerLawER_DaverageKernel($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $5;
 $12 = 1.0 / $11;
 $6 = $12;
 $13 = $3;
 $14 = 1.0 - $13;
 $15 = $6;
 $16 = (+Math_pow((+$14),(+$15)));
 $17 = $3;
 $18 = $17 - 1.0;
 $19 = $3;
 $20 = $18 / $19;
 $21 = $6;
 $22 = - $21;
 $23 = (+Math_pow((+$20),(+$22)));
 $24 = $16 * $23;
 $7 = $24;
 $25 = $6;
 $26 = - $25;
 $27 = $6;
 $28 = - $27;
 $29 = $6;
 $30 = 1.0 - $29;
 $31 = $3;
 $32 = 1.0 / $31;
 $33 = (+_gsl_sf_hyperg_2F1($26,$28,$30,$32));
 $8 = $33;
 $34 = $4;
 $35 = 1.0 - $34;
 $36 = $6;
 $37 = (+Math_pow((+$35),(+$36)));
 $38 = $4;
 $39 = $38 - 1.0;
 $40 = $4;
 $41 = $39 / $40;
 $42 = $6;
 $43 = - $42;
 $44 = (+Math_pow((+$41),(+$43)));
 $45 = $37 * $44;
 $9 = $45;
 $46 = $6;
 $47 = - $46;
 $48 = $6;
 $49 = - $48;
 $50 = $6;
 $51 = 1.0 - $50;
 $52 = $4;
 $53 = 1.0 / $52;
 $54 = (+_gsl_sf_hyperg_2F1($47,$49,$51,$53));
 $10 = $54;
 $55 = $9;
 $56 = $10;
 $57 = $55 * $56;
 $58 = $7;
 $59 = $8;
 $60 = $58 * $59;
 $61 = $57 - $60;
 $62 = 2.0 * $61;
 $63 = $4;
 $64 = (+_gsl_pow_2($63));
 $65 = $3;
 $66 = (+_gsl_pow_2($65));
 $67 = $64 - $66;
 $68 = $62 / $67;
 STACKTOP = sp;return (+$68);
}
function _AT_RDD_Katz_PowerLawER_DaverageKernel_approx($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $5;
 $10 = (+_gsl_pow_2($9));
 $11 = $8 / $10;
 $12 = $3;
 $13 = $5;
 $14 = 4.0 * $13;
 $15 = $12 / $14;
 $16 = $5;
 $17 = 1.0 / $16;
 $18 = $17 - 1.0;
 $19 = $15 * $18;
 $20 = $19 - 1.0;
 $21 = $11 * $20;
 $22 = $3;
 $23 = (+Math_log((+$22)));
 $24 = $21 + $23;
 $6 = $24;
 $25 = $4;
 $26 = $5;
 $27 = (+_gsl_pow_2($26));
 $28 = $25 / $27;
 $29 = $4;
 $30 = $5;
 $31 = 4.0 * $30;
 $32 = $29 / $31;
 $33 = $5;
 $34 = 1.0 / $33;
 $35 = $34 - 1.0;
 $36 = $32 * $35;
 $37 = $36 - 1.0;
 $38 = $28 * $37;
 $39 = $4;
 $40 = (+Math_log((+$39)));
 $41 = $38 + $40;
 $7 = $41;
 $42 = $7;
 $43 = $6;
 $44 = $42 - $43;
 $45 = 2.0 * $44;
 $46 = $4;
 $47 = (+_gsl_pow_2($46));
 $48 = $3;
 $49 = (+_gsl_pow_2($48));
 $50 = $47 - $49;
 $51 = $45 / $50;
 STACKTOP = sp;return (+$51);
}
function _AT_RDD_Katz_PowerLawER_Daverage_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 $13 = $7;
 $14 = $12 / $13;
 $10 = $14;
 $15 = $6;
 $16 = $7;
 $17 = $15 / $16;
 $11 = $17;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $8;
 $22 = (+_AT_RDD_Katz_PowerLawER_DaverageKernel_approx($19,$20,$21));
 $23 = $18 * $22;
 STACKTOP = sp;return (+$23);
}
function _AT_RDD_Cucinotta_Ddelta_average_integrand_m($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $4 = $8;
 $9 = $4;
 $10 = +HEAPF64[$9>>3];
 $5 = $10;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $6 = $13;
 $14 = $2;
 $15 = 1.0 / $14;
 $7 = $15;
 $16 = $2;
 $17 = $6;
 $18 = (+_AT_RDD_Cucinotta_f_shortRange($16,$17));
 $19 = $7;
 $20 = $19 * $18;
 $7 = $20;
 $21 = $2;
 $22 = $5;
 $23 = (+_AT_RDD_Cucinotta_f_longRange($21,$22));
 $24 = $7;
 $25 = $24 * $23;
 $7 = $25;
 $26 = $7;
 STACKTOP = sp;return (+$26);
}
function _AT_RDD_Cucinotta_Ddelta_average_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 88|0;
 $vararg_buffer = sp + 80|0;
 $11 = sp + 24|0;
 $12 = sp + 16|0;
 $14 = sp + 96|0;
 $15 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $7;
 $18 = $8;
 $19 = $17 > $18;
 if (!($19)) {
  $20 = $6;
  $21 = $8;
  $22 = $20 > $21;
  if (!($22)) {
   $23 = $6;
   $24 = $7;
   $25 = $23 > $24;
   if (!($25)) {
    (_gsl_set_error_handler_off()|0);
    $26 = (_gsl_integration_workspace_alloc(10000)|0);
    $13 = $26;
    HEAP32[$14>>2] = 22;
    $27 = $8;
    HEAPF64[$15>>3] = $27;
    $28 = $9;
    $29 = ((($15)) + 8|0);
    HEAPF64[$29>>3] = $28;
    $30 = ((($14)) + 4|0);
    HEAP32[$30>>2] = $15;
    $31 = $6;
    $32 = $7;
    $33 = $13;
    $34 = (_gsl_integration_qags($14,$31,$32,9.9999999999999993E-12,9.9999999999999995E-8,10000,$33,$11,$12)|0);
    $16 = $34;
    $35 = $16;
    $36 = ($35|0)>(0);
    if ($36) {
     $37 = $16;
     HEAP32[$vararg_buffer1>>2] = $37;
     (_printf(79743,$vararg_buffer1)|0);
     HEAPF64[$11>>3] = -1.0;
    }
    $38 = $13;
    _gsl_integration_workspace_free($38);
    $39 = $10;
    $40 = 2.0 * $39;
    $41 = $7;
    $42 = $8;
    $43 = $41 / $42;
    $44 = (+_gsl_pow_2($43));
    $45 = $6;
    $46 = $8;
    $47 = $45 / $46;
    $48 = (+_gsl_pow_2($47));
    $49 = $44 - $48;
    $50 = $40 / $49;
    $51 = +HEAPF64[$11>>3];
    $52 = $50 * $51;
    $5 = $52;
    $53 = $5;
    STACKTOP = sp;return (+$53);
   }
  }
 }
 (_printf(79681,$vararg_buffer)|0);
 $5 = 0.0;
 $53 = $5;
 STACKTOP = sp;return (+$53);
}
function _AT_RDD_Cucinotta_Dexc_average_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp + 72|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $7;
 $15 = $8;
 $16 = $14 > $15;
 if (!($16)) {
  $17 = $6;
  $18 = $8;
  $19 = $17 > $18;
  if (!($19)) {
   $20 = $6;
   $21 = $7;
   $22 = $20 > $21;
   $23 = $6;
   $24 = $23 < 0.0;
   $or$cond = $22 | $24;
   if (!($or$cond)) {
    $25 = $9;
    $26 = $25 * 7.5894985817340996E-9;
    $11 = $26;
    $27 = $6;
    $28 = -0.5 * $27;
    $29 = $11;
    $30 = $28 / $29;
    $31 = (+_gsl_sf_expint_Ei($30));
    $12 = $31;
    $13 = 0.0;
    $32 = $7;
    $33 = $11;
    $34 = $32 / $33;
    $35 = $34 < 100.0;
    if ($35) {
     $36 = $7;
     $37 = -0.5 * $36;
     $38 = $11;
     $39 = $37 / $38;
     $40 = (+_gsl_sf_expint_Ei($39));
     $13 = $40;
    }
    $41 = $10;
    $42 = 2.0 * $41;
    $43 = $7;
    $44 = $8;
    $45 = $43 / $44;
    $46 = (+_gsl_pow_2($45));
    $47 = $6;
    $48 = $8;
    $49 = $47 / $48;
    $50 = (+_gsl_pow_2($49));
    $51 = $46 - $50;
    $52 = $42 / $51;
    $53 = $13;
    $54 = $12;
    $55 = $53 - $54;
    $56 = $52 * $55;
    $5 = $56;
    $57 = $5;
    STACKTOP = sp;return (+$57);
   }
  }
 }
 (_printf(79803,$vararg_buffer)|0);
 $5 = 0.0;
 $57 = $5;
 STACKTOP = sp;return (+$57);
}
function _AT_RDD_Cucinotta_Cnorm($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 80|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $11;
 $17 = $16 * 0.31830988618379069;
 $18 = $10;
 $19 = $8;
 $20 = (+_gsl_pow_2($19));
 $21 = $7;
 $22 = (+_gsl_pow_2($21));
 $23 = $20 - $22;
 $24 = $18 * $23;
 $25 = $17 / $24;
 $13 = $25;
 $26 = $7;
 $27 = $8;
 $28 = $8;
 $29 = $9;
 $30 = $12;
 $31 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($26,$27,$28,$29,$30));
 $14 = $31;
 $32 = $7;
 $33 = $8;
 $34 = $8;
 $35 = $9;
 $36 = $12;
 $37 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($32,$33,$34,$35,$36));
 $15 = $37;
 $38 = $13;
 $39 = $38 > 0.0;
 $40 = $14;
 $41 = $40 > 0.0;
 $or$cond = $39 & $41;
 $42 = $15;
 $43 = $42 > 0.0;
 $or$cond3 = $or$cond & $43;
 if ($or$cond3) {
  $44 = $13;
  $45 = $14;
  $46 = $44 - $45;
  $47 = $15;
  $48 = $46 / $47;
  $6 = $48;
  $49 = $6;
  STACKTOP = sp;return (+$49);
 } else {
  (_printf(79863,$vararg_buffer)|0);
  $6 = 0.0;
  $49 = $6;
  STACKTOP = sp;return (+$49);
 }
 return +(0.0);
}
function _AT_RDD_Geiss_average_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 48|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = $9;
 $13 = $11 > $12;
 if (!($13)) {
  $14 = $6;
  $15 = $9;
  $16 = $14 > $15;
  if (!($16)) {
   $17 = $6;
   $18 = $7;
   $19 = $17 > $18;
   $20 = $6;
   $21 = $20 < 0.0;
   $or$cond = $19 | $21;
   if (!($or$cond)) {
    $22 = $7;
    $23 = $8;
    $24 = $22 <= $23;
    if ($24) {
     $25 = $10;
     $5 = $25;
     $73 = $5;
     STACKTOP = sp;return (+$73);
    }
    $26 = $6;
    $27 = $8;
    $28 = $26 < $27;
    if ($28) {
     $29 = $7;
     $30 = $8;
     $31 = $29 > $30;
     if ($31) {
      $32 = $10;
      $33 = $7;
      $34 = (+_gsl_pow_2($33));
      $35 = $6;
      $36 = (+_gsl_pow_2($35));
      $37 = $34 - $36;
      $38 = $32 / $37;
      $39 = $8;
      $40 = (+_gsl_pow_2($39));
      $41 = $6;
      $42 = (+_gsl_pow_2($41));
      $43 = $40 - $42;
      $44 = $8;
      $45 = (+_gsl_pow_2($44));
      $46 = 2.0 * $45;
      $47 = $7;
      $48 = $8;
      $49 = $47 / $48;
      $50 = (+Math_log((+$49)));
      $51 = $46 * $50;
      $52 = $43 + $51;
      $53 = $38 * $52;
      $5 = $53;
      $73 = $5;
      STACKTOP = sp;return (+$73);
     }
    }
    $54 = $6;
    $55 = $8;
    $56 = $54 >= $55;
    if ($56) {
     $57 = $10;
     $58 = $7;
     $59 = (+_gsl_pow_2($58));
     $60 = $6;
     $61 = (+_gsl_pow_2($60));
     $62 = $59 - $61;
     $63 = $57 / $62;
     $64 = $63 * 2.0;
     $65 = $8;
     $66 = (+_gsl_pow_2($65));
     $67 = $64 * $66;
     $68 = $7;
     $69 = $6;
     $70 = $68 / $69;
     $71 = (+Math_log((+$70)));
     $72 = $67 * $71;
     $5 = $72;
     $73 = $5;
     STACKTOP = sp;return (+$73);
    } else {
     $5 = 0.0;
     $73 = $5;
     STACKTOP = sp;return (+$73);
    }
   }
  }
 }
 (_printf(79898,$vararg_buffer)|0);
 $5 = 0.0;
 $73 = $5;
 STACKTOP = sp;return (+$73);
}
function _AT_RDD_Katz_LinearER_dEdx_J_m($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = $8 * 3.1415926535897931;
 $10 = $5;
 $11 = (+_gsl_pow_2($10));
 $12 = $4;
 $13 = (+_gsl_pow_2($12));
 $14 = $11 - $13;
 $15 = $9 * $14;
 $16 = $4;
 $17 = $5;
 $18 = $5;
 $19 = $7;
 $20 = (+_AT_RDD_Katz_LinearER_Daverage_Gy($16,$17,$18,$19));
 $21 = $15 * $20;
 STACKTOP = sp;return (+$21);
}
function _AT_RDD_Katz_PowerLawER_dEdx_J_m($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $7;
 $11 = $10 * 3.1415926535897931;
 $12 = $6;
 $13 = (+_gsl_pow_2($12));
 $14 = $5;
 $15 = (+_gsl_pow_2($14));
 $16 = $13 - $15;
 $17 = $11 * $16;
 $18 = $5;
 $19 = $6;
 $20 = $6;
 $21 = $8;
 $22 = $9;
 $23 = (+_AT_RDD_Katz_PowerLawER_Daverage_Gy($18,$19,$20,$21,$22));
 $24 = $17 * $23;
 STACKTOP = sp;return (+$24);
}
function _AT_RDD_Katz_LinearER_DSite_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $8;
 $16 = $9;
 $17 = $15 < $16;
 if ($17) {
  $18 = $12;
  $19 = $13;
  $20 = $18 - $19;
  $21 = 0.31830988618379069 * $20;
  $22 = $11;
  $23 = $9;
  $24 = (+_gsl_pow_2($23));
  $25 = $22 * $24;
  $26 = $21 / $25;
  $7 = $26;
  $31 = $7;
  STACKTOP = sp;return (+$31);
 } else {
  $27 = $8;
  $28 = $10;
  $29 = $14;
  $30 = (+_AT_RDD_Katz_LinearER_Dpoint_Gy($27,$28,$29));
  $7 = $30;
  $31 = $7;
  STACKTOP = sp;return (+$31);
 }
 return +(0.0);
}
function _AT_RDD_Katz_PowerLawER_DSite_Gy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $9;
 $18 = $10;
 $19 = $17 <= $18;
 if ($19) {
  $20 = $14;
  $21 = $15;
  $22 = $20 - $21;
  $23 = 0.31830988618379069 * $22;
  $24 = $12;
  $25 = $10;
  $26 = (+_gsl_pow_2($25));
  $27 = $24 * $26;
  $28 = $23 / $27;
  $8 = $28;
  $34 = $8;
  STACKTOP = sp;return (+$34);
 } else {
  $29 = $9;
  $30 = $13;
  $31 = $11;
  $32 = $16;
  $33 = (+_AT_RDD_Katz_PowerLawER_Dpoint_Gy($29,$30,$31,$32));
  $8 = $33;
  $34 = $8;
  STACKTOP = sp;return (+$34);
 }
 return +(0.0);
}
function _AT_RDD_KatzSite_Gy($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $11;
 $22 = $12;
 $23 = $21 >= $22;
 if ($23) {
  $24 = $11;
  $25 = $13;
  $26 = $24 <= $25;
  if ($26) {
   $27 = $15;
   $28 = ($27|0)==(3);
   $29 = $15;
   $30 = ($29|0)==(6);
   $or$cond = $28 | $30;
   if ($or$cond) {
    $31 = $11;
    $32 = $14;
    $33 = $13;
    $34 = $17;
    $35 = $16;
    $36 = $18;
    $37 = $19;
    $38 = $20;
    $39 = (+_AT_RDD_Katz_PowerLawER_DSite_Gy($31,$32,$33,$34,$35,$36,$37,$38));
    $10 = $39;
    $50 = $10;
    STACKTOP = sp;return (+$50);
   }
   $40 = $15;
   $41 = ($40|0)==(2);
   if ($41) {
    $42 = $11;
    $43 = $14;
    $44 = $13;
    $45 = $17;
    $46 = $18;
    $47 = $19;
    $48 = $20;
    $49 = (+_AT_RDD_Katz_LinearER_DSite_Gy($42,$43,$44,$45,$46,$47,$48));
    $10 = $49;
    $50 = $10;
    STACKTOP = sp;return (+$50);
   }
  }
 }
 $10 = 0.0;
 $50 = $10;
 STACKTOP = sp;return (+$50);
}
function _AT_inverse_RDD_KatzSite_m($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $18 = $12;
 $19 = $10;
 $20 = $11;
 $21 = $13;
 $22 = $14;
 $23 = $16;
 $24 = (+_AT_RDD_KatzPoint_Gy($18,$19,$20,$21,$22,$23));
 $17 = $24;
 $25 = $9;
 $26 = $15;
 $27 = $25 > $26;
 if ($27) {
  $8 = 0.0;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 }
 $28 = $9;
 $29 = $17;
 $30 = $28 <= $29;
 if ($30) {
  $31 = $9;
  $32 = $10;
  $33 = $11;
  $34 = $13;
  $35 = $14;
  $36 = $16;
  $37 = (+_AT_inverse_RDD_KatzPoint_m($31,$32,$33,$34,$35,$36));
  $8 = $37;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 } else {
  $38 = $12;
  $8 = $38;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 }
 return +(0.0);
}
function _AT_RDD_Test_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = $6;
 $11 = $9 >= $10;
 if ($11) {
  $12 = $5;
  $13 = $7;
  $14 = $12 <= $13;
  if ($14) {
   $15 = $8;
   $4 = $15;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = 0.0;
 }
 $16 = $4;
 STACKTOP = sp;return (+$16);
}
function _AT_inverse_RDD_Test_m($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 > 0.0;
 if ($6) {
  $7 = $4;
  $2 = $7;
 } else {
  $2 = 0.0;
 }
 $8 = $2;
 STACKTOP = sp;return (+$8);
}
function _AT_RDD_Geiss_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = $6;
 $13 = $11 <= $12;
 if ($13) {
  $14 = $6;
  $15 = $9;
  $16 = $14 <= $15;
  if ($16) {
   $17 = $10;
   $5 = $17;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $18 = $9;
   $19 = $6;
   $20 = $18 < $19;
   if ($20) {
    $21 = $6;
    $22 = $8;
    $23 = $21 <= $22;
    if ($23) {
     $24 = $10;
     $25 = $9;
     $26 = $6;
     $27 = $25 / $26;
     $28 = (+_gsl_pow_2($27));
     $29 = $24 * $28;
     $5 = $29;
     break;
    }
   }
   $5 = 0.0;
  }
 } while(0);
 $30 = $5;
 STACKTOP = sp;return (+$30);
}
function _AT_inverse_RDD_Geiss_m($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = $6;
 $13 = $11 <= $12;
 if ($13) {
  $14 = $6;
  $15 = $8;
  $16 = $14 <= $15;
  if ($16) {
   $17 = $9;
   $18 = $10;
   $19 = $6;
   $20 = $18 / $19;
   $21 = (+Math_sqrt((+$20)));
   $22 = $17 * $21;
   $5 = $22;
   $32 = $5;
   STACKTOP = sp;return (+$32);
  }
 }
 $23 = $6;
 $24 = $7;
 $25 = $23 < $24;
 if ($25) {
  $26 = $9;
  $27 = $10;
  $28 = $7;
  $29 = $27 / $28;
  $30 = (+Math_sqrt((+$29)));
  $31 = $26 * $30;
  $5 = $31;
  $32 = $5;
  STACKTOP = sp;return (+$32);
 } else {
  $5 = 0.0;
  $32 = $5;
  STACKTOP = sp;return (+$32);
 }
 return +(0.0);
}
function _AT_RDD_Katz_coeff_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $8;
 $12 = $11 * 4.0848280625059705E-42;
 $10 = $12;
 $13 = $10;
 $14 = $13 * 0.5;
 $15 = $14 * 0.31830988618379069;
 $16 = $5;
 $17 = $6;
 $18 = $16 / $17;
 $19 = (+_gsl_pow_2($18));
 $20 = $15 * $19;
 $21 = $7;
 $22 = $9;
 $23 = (+_gsl_pow_2($22));
 $24 = $21 * $23;
 $25 = $20 / $24;
 STACKTOP = sp;return (+$25);
}
function _AT_RDD_Katz_coeff_Gy_general($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $4;
 $17 = (+_AT_beta_from_E_single($16));
 $8 = $17;
 $18 = $6;
 _AT_get_material_data($18,$9,0,0,0,0,0,0);
 $19 = +HEAPF64[$9>>3];
 $20 = $19 * 1000.0;
 $11 = $20;
 $21 = $6;
 $22 = (+_AT_electron_density_m3_from_material_no_single($21));
 $10 = $22;
 $23 = $4;
 $24 = $6;
 $25 = $7;
 $26 = (+_AT_max_electron_range_m($23,$24,$25));
 $12 = $26;
 $27 = $5;
 $28 = (_AT_Z_from_particle_no_single($27)|0);
 $13 = $28;
 $29 = $8;
 $30 = $13;
 $31 = (+_AT_effective_charge_from_beta_single($29,$30));
 $14 = $31;
 $32 = $14;
 $33 = $8;
 $34 = $11;
 $35 = $10;
 $36 = $12;
 $37 = (+_AT_RDD_Katz_coeff_Gy($32,$33,$34,$35,$36));
 $15 = $37;
 $38 = $15;
 STACKTOP = sp;return (+$38);
}
function _AT_RDD_Katz_LinearER_Dpoint_Gy($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = $4;
 $8 = $6 * $7;
 $9 = $3;
 $10 = $8 / $9;
 $11 = $4;
 $12 = $3;
 $13 = $11 / $12;
 $14 = $13 - 1.0;
 $15 = $10 * $14;
 STACKTOP = sp;return (+$15);
}
function _AT_RDD_Katz_PowerLawER_Dpoint_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = $7;
 $11 = $9 > $10;
 if ($11) {
  $4 = 0.0;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 } else {
  $12 = $8;
  $13 = $6;
  $14 = 1.0 / $13;
  $15 = $12 * $14;
  $16 = $7;
  $17 = $5;
  $18 = $16 / $17;
  $19 = (+_gsl_pow_2($18));
  $20 = $15 * $19;
  $21 = $5;
  $22 = $7;
  $23 = $21 / $22;
  $24 = 1.0 - $23;
  $25 = $6;
  $26 = 1.0 / $25;
  $27 = (+Math_pow((+$24),(+$26)));
  $28 = $20 * $27;
  $4 = $28;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 }
 return +(0.0);
}
function _AT_RDD_KatzPoint_Gy($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $7;
 $14 = $8;
 $15 = $13 >= $14;
 if ($15) {
  $16 = $7;
  $17 = $9;
  $18 = $16 <= $17;
  if ($18) {
   $19 = $10;
   $20 = ($19|0)==(3);
   $21 = $10;
   $22 = ($21|0)==(6);
   $or$cond = $20 | $22;
   if ($or$cond) {
    $23 = $7;
    $24 = $11;
    $25 = $9;
    $26 = $12;
    $27 = (+_AT_RDD_Katz_PowerLawER_Dpoint_Gy($23,$24,$25,$26));
    $6 = $27;
    $34 = $6;
    STACKTOP = sp;return (+$34);
   }
   $28 = $10;
   $29 = ($28|0)==(2);
   if ($29) {
    $30 = $7;
    $31 = $9;
    $32 = $12;
    $33 = (+_AT_RDD_Katz_LinearER_Dpoint_Gy($30,$31,$32));
    $6 = $33;
    $34 = $6;
    STACKTOP = sp;return (+$34);
   }
  }
 }
 $6 = 0.0;
 $34 = $6;
 STACKTOP = sp;return (+$34);
}
function _AT_inverse_RDD_KatzPoint_LinearER_m($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = 4.0 * $9;
 $11 = $7;
 $12 = $10 / $11;
 $13 = 1.0 + $12;
 $14 = (+Math_sqrt((+$13)));
 $15 = 1.0 + $14;
 $16 = 0.5 * $15;
 $8 = $16;
 $17 = $6;
 $18 = $8;
 $19 = $17 / $18;
 STACKTOP = sp;return (+$19);
}
function _AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 16|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 < $10;
 if ($11) {
  $12 = $5;
  $13 = +HEAPF64[$12>>3];
  $14 = - $13;
  $2 = $14;
  $29 = $2;
  STACKTOP = sp;return (+$29);
 } else {
  $15 = $3;
  $16 = $5;
  $17 = ((($16)) + 32|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $5;
  $20 = ((($19)) + 24|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $5;
  $23 = ((($22)) + 40|0);
  $24 = +HEAPF64[$23>>3];
  $25 = (+_AT_RDD_Katz_PowerLawER_Dpoint_Gy($15,$18,$21,$24));
  $26 = $5;
  $27 = +HEAPF64[$26>>3];
  $28 = $25 - $27;
  $2 = $28;
  $29 = $2;
  STACKTOP = sp;return (+$29);
 }
 return +(0.0);
}
function _AT_inverse_RDD_KatzPoint_m($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $14 = sp + 8|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $10;
 $17 = ($16|0)==(3);
 $18 = $10;
 $19 = ($18|0)==(6);
 $or$cond = $17 | $19;
 if ($or$cond) {
  $13 = 1.0E-13;
  $20 = $7;
  HEAPF64[$14>>3] = $20;
  $21 = $8;
  $22 = ((($14)) + 16|0);
  HEAPF64[$22>>3] = $21;
  $23 = $9;
  $24 = ((($14)) + 24|0);
  HEAPF64[$24>>3] = $23;
  $25 = $11;
  $26 = ((($14)) + 32|0);
  HEAPF64[$26>>3] = $25;
  $27 = $12;
  $28 = ((($14)) + 40|0);
  HEAPF64[$28>>3] = $27;
  $29 = $8;
  $30 = $9;
  $31 = $13;
  $32 = (+_zriddr(23,$14,$29,$30,$31));
  $15 = $32;
  $33 = $15;
  $6 = $33;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 }
 $34 = $10;
 $35 = ($34|0)==(2);
 if ($35) {
  $36 = $7;
  $37 = $8;
  $38 = $9;
  $39 = $12;
  $40 = (+_AT_inverse_RDD_KatzPoint_LinearER_m($36,$37,$38,$39));
  $6 = $40;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 } else {
  $6 = 0.0;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 }
 return +(0.0);
}
function _AT_RDD_Cucinotta_f_shortRange($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = 1.0000000000000001E-9 / $4;
 $6 = $5 + 0.59999999999999998;
 $7 = $3;
 $8 = 1.7 * $7;
 $9 = $6 + $8;
 $10 = $3;
 $11 = (+_gsl_pow_2($10));
 $12 = 1.1000000000000001 * $11;
 $13 = $9 + $12;
 $14 = 1.0 / $13;
 STACKTOP = sp;return (+$14);
}
function _AT_RDD_Cucinotta_f_longRange($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = 0.37 * $5;
 $7 = $4 / $6;
 $8 = (+_gsl_pow_2($7));
 $9 = - $8;
 $10 = (+Math_exp((+$9)));
 STACKTOP = sp;return (+$10);
}
function _AT_RDD_Cucinotta_Ddelta_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $4;
 $10 = $5;
 $11 = (+_AT_RDD_Cucinotta_f_longRange($9,$10));
 $12 = $8 * $11;
 $13 = $4;
 $14 = $6;
 $15 = (+_AT_RDD_Cucinotta_f_shortRange($13,$14));
 $16 = $12 * $15;
 $17 = $5;
 $18 = $4;
 $19 = $17 / $18;
 $20 = (+_gsl_pow_2($19));
 $21 = $16 * $20;
 STACKTOP = sp;return (+$21);
}
function _AT_RDD_Cucinotta_Dexc_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = $11 * 7.5894985817340996E-9;
 $10 = $12;
 $13 = $8;
 $14 = $9;
 $15 = $13 * $14;
 $16 = $5;
 $17 = -0.5 * $16;
 $18 = $10;
 $19 = $17 / $18;
 $20 = (+Math_exp((+$19)));
 $21 = $15 * $20;
 $22 = $6;
 $23 = $5;
 $24 = $22 / $23;
 $25 = (+_gsl_pow_2($24));
 $26 = $21 * $25;
 STACKTOP = sp;return (+$26);
}
function _AT_RDD_CucinottaPoint_Gy($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $7;
 $14 = $8;
 $15 = $13 >= $14;
 if ($15) {
  $16 = $7;
  $17 = $9;
  $18 = $16 <= $17;
  if ($18) {
   $19 = $7;
   $20 = $9;
   $21 = $10;
   $22 = $11;
   $23 = $12;
   $24 = (+_AT_RDD_Cucinotta_Dexc_Gy($19,$20,$21,$22,$23));
   $25 = $7;
   $26 = $9;
   $27 = $10;
   $28 = $12;
   $29 = (+_AT_RDD_Cucinotta_Ddelta_Gy($25,$26,$27,$28));
   $30 = $24 + $29;
   $6 = $30;
   $31 = $6;
   STACKTOP = sp;return (+$31);
  }
 }
 $6 = 0.0;
 $31 = $6;
 STACKTOP = sp;return (+$31);
}
function _AT_inverse_RDD_Cucinotta_solver_function_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 16|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 < $10;
 if ($11) {
  $12 = $5;
  $13 = +HEAPF64[$12>>3];
  $14 = - $13;
  $2 = $14;
  $35 = $2;
  STACKTOP = sp;return (+$35);
 } else {
  $15 = $3;
  $16 = $5;
  $17 = ((($16)) + 16|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $5;
  $20 = ((($19)) + 24|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $5;
  $23 = ((($22)) + 32|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $5;
  $26 = ((($25)) + 40|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $5;
  $29 = ((($28)) + 48|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (+_AT_RDD_CucinottaPoint_Gy($15,$18,$21,$24,$27,$30));
  $32 = $5;
  $33 = +HEAPF64[$32>>3];
  $34 = $31 - $33;
  $2 = $34;
  $35 = $2;
  STACKTOP = sp;return (+$35);
 }
 return +(0.0);
}
function _AT_inverse_RDD_Cucinotta_m($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $16 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $18 = $11;
 $19 = ($18|0)==(7);
 if ($19) {
  $15 = 1.0E-13;
  $20 = $8;
  HEAPF64[$16>>3] = $20;
  $21 = $9;
  $22 = ((($16)) + 16|0);
  HEAPF64[$22>>3] = $21;
  $23 = $10;
  $24 = ((($16)) + 24|0);
  HEAPF64[$24>>3] = $23;
  $25 = $12;
  $26 = ((($16)) + 32|0);
  HEAPF64[$26>>3] = $25;
  $27 = $13;
  $28 = ((($16)) + 40|0);
  HEAPF64[$28>>3] = $27;
  $29 = $14;
  $30 = ((($16)) + 48|0);
  HEAPF64[$30>>3] = $29;
  $31 = $9;
  $32 = $10;
  $33 = $15;
  $34 = (+_zriddr(24,$16,$31,$32,$33));
  $17 = $34;
  $35 = $17;
  $7 = $35;
  $36 = $7;
  STACKTOP = sp;return (+$36);
 } else {
  $7 = 0.0;
  $36 = $7;
  STACKTOP = sp;return (+$36);
 }
 return +(0.0);
}
function _AT_RDD_RadicalDiffusion_get_energy_idx($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_locate(85328,40,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _AT_RDD_RadicalDiffusion_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $7 = sp + 40|0;
 $10 = sp;
 $5 = $0;
 HEAPF64[$6>>3] = $1;
 HEAP32[$7>>2] = $2;
 $8 = $3;
 $11 = +HEAPF64[$6>>3];
 $12 = (_AT_RDD_RadicalDiffusion_get_energy_idx($11)|0);
 $9 = $12;
 $13 = $9;
 $14 = ($13|0)>=(1);
 if (!($14)) {
  ___assert_fail((79949|0),(79960|0),48,(79992|0));
  // unreachable;
 }
 $15 = $9;
 $16 = ($15|0)<=(40);
 if (!($16)) {
  ___assert_fail((80019|0),(79960|0),49,(79992|0));
  // unreachable;
 }
 $17 = $5;
 $18 = $17 >= 0.0;
 if (!($18)) {
  ___assert_fail((80037|0),(79960|0),50,(79992|0));
  // unreachable;
 }
 $19 = $5;
 $20 = $9;
 $21 = (+($20|0));
 $22 = (+_AT_r_min_RadicalDiffusion_m($21));
 $23 = $19 <= $22;
 if ($23) {
  $24 = +HEAPF64[$6>>3];
  $25 = HEAP32[$7>>2]|0;
  $26 = $8;
  $27 = (+_AT_d_max_RadicalDiffusion_Gy($24,$25,$26));
  $4 = $27;
  $46 = $4;
  STACKTOP = sp;return (+$46);
 }
 $28 = $5;
 $29 = +HEAPF64[$6>>3];
 $30 = (+_AT_r_max_RadicalDiffusion_m($29));
 $31 = $28 > $30;
 if ($31) {
  $4 = 0.0;
  $46 = $4;
  STACKTOP = sp;return (+$46);
 } else {
  $32 = $8;
  (_AT_Stopping_Power_with_no(2,1,$6,$7,$32,$10)|0);
  $33 = +HEAPF64[$10>>3];
  $34 = 0.160219 * $33;
  $35 = $9;
  $36 = (($35) - 1)|0;
  $37 = ((87088) + (($36*15064)|0)|0);
  $38 = $9;
  $39 = (($38) - 1)|0;
  $40 = ((689648) + (($39*15064)|0)|0);
  $41 = +HEAPF64[$6>>3];
  $42 = (_AT_n_bins_RadicalDiffusion($41)|0);
  $43 = $5;
  $44 = (+_AT_get_interpolated_y_from_input_table($37,$40,$42,$43));
  $45 = $34 * $44;
  $4 = $45;
  $46 = $4;
  STACKTOP = sp;return (+$46);
 }
 return +(0.0);
}
function _AT_r_min_RadicalDiffusion_m($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_AT_RDD_RadicalDiffusion_get_energy_idx($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)>=(1);
 if (!($6)) {
  ___assert_fail((79949|0),(79960|0),128,(80144|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)<=(40);
 if ($8) {
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = ((85648) + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((80075|0),(79960|0),129,(80144|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_d_max_RadicalDiffusion_Gy($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp + 24|0;
 $7 = sp;
 HEAPF64[$3>>3] = $0;
 HEAP32[$4>>2] = $1;
 $5 = $2;
 $8 = +HEAPF64[$3>>3];
 $9 = (_AT_RDD_RadicalDiffusion_get_energy_idx($8)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)>=(1);
 if (!($11)) {
  ___assert_fail((79949|0),(79960|0),167,(80115|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)<=(40);
 if ($13) {
  $14 = $5;
  (_AT_Stopping_Power_with_no(2,1,$3,$4,$14,$7)|0);
  $15 = +HEAPF64[$7>>3];
  $16 = 0.160219 * $15;
  $17 = $6;
  $18 = (($17) - 1)|0;
  $19 = ((86608) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $16 * $20;
  STACKTOP = sp;return (+$21);
 } else {
  ___assert_fail((80075|0),(79960|0),168,(80115|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_r_max_RadicalDiffusion_m($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_AT_RDD_RadicalDiffusion_get_energy_idx($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)>=(1);
 if (!($6)) {
  ___assert_fail((79949|0),(79960|0),137,(80087|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)<=(40);
 if ($8) {
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = ((85968) + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((80075|0),(79960|0),138,(80087|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_n_bins_RadicalDiffusion($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_AT_RDD_RadicalDiffusion_get_energy_idx($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)>=(1);
 if (!($6)) {
  ___assert_fail((79949|0),(79960|0),184,(80048|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)<=(40);
 if ($8) {
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = ((86928) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  STACKTOP = sp;return ($12|0);
 } else {
  ___assert_fail((80075|0),(79960|0),185,(80048|0));
  // unreachable;
 }
 return (0)|0;
}
function _AT_inverse_RadicalDiffusion_m($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $5 = 0.0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $7 = sp + 40|0;
 $10 = sp;
 $5 = $0;
 HEAPF64[$6>>3] = $1;
 HEAP32[$7>>2] = $2;
 $8 = $3;
 $11 = +HEAPF64[$6>>3];
 $12 = (_AT_RDD_RadicalDiffusion_get_energy_idx($11)|0);
 $9 = $12;
 $13 = $9;
 $14 = ($13|0)>=(1);
 if (!($14)) {
  ___assert_fail((79949|0),(79960|0),87,(80172|0));
  // unreachable;
 }
 $15 = $9;
 $16 = ($15|0)<=(40);
 if (!($16)) {
  ___assert_fail((80075|0),(79960|0),88,(80172|0));
  // unreachable;
 }
 $17 = $5;
 $18 = $17 >= 0.0;
 if (!($18)) {
  ___assert_fail((80202|0),(79960|0),89,(80172|0));
  // unreachable;
 }
 $19 = $5;
 $20 = +HEAPF64[$6>>3];
 $21 = HEAP32[$7>>2]|0;
 $22 = $8;
 $23 = (+_AT_d_min_RadicalDiffusion_Gy($20,$21,$22));
 $24 = $19 < $23;
 if (!($24)) {
  $25 = $5;
  $26 = +HEAPF64[$6>>3];
  $27 = HEAP32[$7>>2]|0;
  $28 = $8;
  $29 = (+_AT_d_max_RadicalDiffusion_Gy($26,$27,$28));
  $30 = $25 > $29;
  if (!($30)) {
   $31 = $8;
   (_AT_Stopping_Power_with_no(2,1,$6,$7,$31,$10)|0);
   $32 = +HEAPF64[$10>>3];
   $33 = $32 == 0.0;
   if ($33) {
    $4 = 0.0;
    $47 = $4;
    STACKTOP = sp;return (+$47);
   } else {
    $34 = $9;
    $35 = (($34) - 1)|0;
    $36 = ((689648) + (($35*15064)|0)|0);
    $37 = $9;
    $38 = (($37) - 1)|0;
    $39 = ((87088) + (($38*15064)|0)|0);
    $40 = +HEAPF64[$6>>3];
    $41 = (_AT_n_bins_RadicalDiffusion($40)|0);
    $42 = $5;
    $43 = +HEAPF64[$10>>3];
    $44 = 0.160219 * $43;
    $45 = $42 / $44;
    $46 = (+_AT_get_interpolated_y_from_input_table($36,$39,$41,$45));
    $4 = $46;
    $47 = $4;
    STACKTOP = sp;return (+$47);
   }
  }
 }
 $4 = 0.0;
 $47 = $4;
 STACKTOP = sp;return (+$47);
}
function _AT_d_min_RadicalDiffusion_Gy($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp + 24|0;
 $7 = sp;
 HEAPF64[$3>>3] = $0;
 HEAP32[$4>>2] = $1;
 $5 = $2;
 $8 = +HEAPF64[$3>>3];
 $9 = (_AT_RDD_RadicalDiffusion_get_energy_idx($8)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)>=(1);
 if (!($11)) {
  ___assert_fail((79949|0),(79960|0),148,(80214|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)<=(40);
 if ($13) {
  $14 = $5;
  (_AT_Stopping_Power_with_no(2,1,$3,$4,$14,$7)|0);
  $15 = +HEAPF64[$7>>3];
  $16 = 0.160219 * $15;
  $17 = $6;
  $18 = (($17) - 1)|0;
  $19 = ((86288) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $16 * $20;
  STACKTOP = sp;return (+$21);
 } else {
  ___assert_fail((80075|0),(79960|0),149,(80214|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_E_RadicalDiffusion_MeV_u($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_AT_RDD_RadicalDiffusion_get_energy_idx($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)>=(1);
 if (!($6)) {
  ___assert_fail((79949|0),(79960|0),119,(80243|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)<=(40);
 if ($8) {
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = (85328 + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((80075|0),(79960|0),120,(80243|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_SPC_get_number_of_bytes_in_file($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $4 = sp + 8|0;
 $2 = $0;
 $6 = $2;
 $7 = (_open($6,0,$vararg_buffer)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)==(-1);
 do {
  if ($9) {
   $1 = -1;
  } else {
   $10 = $3;
   $11 = (_fstat($10,$4)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $13 = $3;
    (_close($13)|0);
    $1 = -2;
    break;
   } else {
    $14 = ((($4)) + 36|0);
    $15 = HEAP32[$14>>2]|0;
    $5 = $15;
    $16 = $3;
    (_close($16)|0);
    $17 = $5;
    $1 = $17;
    break;
   }
  }
 } while(0);
 $18 = $1;
 STACKTOP = sp;return ($18|0);
}
function _AT_SPC_fast_read_buffer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 60|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = (_open($13,0,$vararg_buffer)|0);
 $7 = $14;
 $15 = $7;
 $16 = ($15|0)==(-1);
 if ($16) {
  (_printf(80271,$vararg_buffer1)|0);
  $3 = 1;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 $17 = $7;
 $18 = (_fstat($17,$8)|0);
 $19 = ($18|0)==(-1);
 if ($19) {
  (_printf(80276,$vararg_buffer3)|0);
  $20 = $7;
  (_close($20)|0);
  $3 = 1;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 $21 = ((($8)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $9 = $22;
 $23 = $9;
 $24 = $5;
 $25 = $24<<2;
 $26 = ($23|0)!=($25|0);
 if ($26) {
  (_printf(80282,$vararg_buffer5)|0);
  $27 = $7;
  (_close($27)|0);
  $3 = 1;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 $28 = $7;
 (_close($28)|0);
 $10 = 80919;
 $29 = $4;
 $30 = $10;
 $31 = (_fopen($29,$30)|0);
 $11 = $31;
 $32 = $6;
 $33 = $5;
 $34 = $11;
 $35 = (_fread($32,4,$33,$34)|0);
 $12 = $35;
 $36 = $12;
 $37 = $5;
 $38 = ($36|0)!=($37|0);
 if ($38) {
  $39 = $4;
  $40 = $12;
  $41 = $5;
  HEAP32[$vararg_buffer7>>2] = $39;
  $vararg_ptr9 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $40;
  $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $41;
  (_printf(80306,$vararg_buffer7)|0);
 }
 $42 = $11;
 (_fclose($42)|0);
 $3 = 0;
 $43 = $3;
 STACKTOP = sp;return ($43|0);
}
function _decomposeStructIntoString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 HEAP32[$9>>2] = $8;
 $10 = $5;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_calloc(1,$11)|0);
 $4 = $12;
 $13 = $4;
 $14 = $3;
 $15 = ((($14)) + 8|0);
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 _memcpy(($13|0),($15|0),($17|0))|0;
 STACKTOP = sp;return;
}
function _decomposeStructIntoDouble($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 HEAP32[$9>>2] = $8;
 $10 = $4;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 _memcpy(($10|0),($12|0),($14|0))|0;
 STACKTOP = sp;return;
}
function _decomposeStructIntoInteger($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 HEAP32[$9>>2] = $8;
 $10 = $4;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 _memcpy(($10|0),($12|0),($14|0))|0;
 STACKTOP = sp;return;
}
function _skipStruct($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = (($7>>>0) / 4)&-1;
 $9 = (($8) + 2)|0;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 HEAP32[$10>>2] = $12;
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _decomposeTag($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _decomposeLength($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _AT_SPC_decompose_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 44|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 HEAP32[$5>>2] = 0;
 $12 = $3;
 HEAP32[$6>>2] = $12;
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 $13 = $7;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$6>>2]|0;
 _decomposeStructIntoInteger($17,$7,$5);
 (_skipStruct($6)|0);
 $18 = $8;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = $8;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 while(1) {
  $26 = $8;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $7;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($31>>>0)<($37>>>0);
  $39 = ($28>>>0)<($34>>>0);
  $40 = ($31|0)==($37|0);
  $41 = $40 & $39;
  $42 = $38 | $41;
  if (!($42)) {
   break;
  }
  (_skipStruct($6)|0);
  (_skipStruct($6)|0);
  $43 = HEAP32[$6>>2]|0;
  _decomposeStructIntoInteger($43,$9,$5);
  (_skipStruct($6)|0);
  $44 = $10;
  $45 = $44;
  HEAP32[$45>>2] = 0;
  $46 = (($44) + 4)|0;
  $47 = $46;
  HEAP32[$47>>2] = 0;
  $48 = $10;
  $49 = $48;
  HEAP32[$49>>2] = 0;
  $50 = (($48) + 4)|0;
  $51 = $50;
  HEAP32[$51>>2] = 0;
  while(1) {
   $52 = $10;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = $9;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = ($57>>>0)<($63>>>0);
   $65 = ($54>>>0)<($60>>>0);
   $66 = ($57|0)==($63|0);
   $67 = $66 & $65;
   $68 = $64 | $67;
   if (!($68)) {
    break;
   }
   (_skipStruct($6)|0);
   (_skipStruct($6)|0);
   (_skipStruct($6)|0);
   $69 = HEAP32[$6>>2]|0;
   _decomposeStructIntoInteger($69,$11,$5);
   (_skipStruct($6)|0);
   $70 = $11;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = $4;
   $77 = ($76|0)<(0);
   $78 = $77 << 31 >> 31;
   $79 = (_i64Add(($76|0),($78|0),($72|0),($75|0))|0);
   $80 = (getTempRet0() | 0);
   $4 = $79;
   (_skipStruct($6)|0);
   (_skipStruct($6)|0);
   (_skipStruct($6)|0);
   $81 = $10;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = (_i64Add(($83|0),($86|0),1,0)|0);
   $88 = (getTempRet0() | 0);
   $89 = $10;
   $90 = $89;
   HEAP32[$90>>2] = $87;
   $91 = (($89) + 4)|0;
   $92 = $91;
   HEAP32[$92>>2] = $88;
  }
  $93 = $8;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = (_i64Add(($95|0),($98|0),1,0)|0);
  $100 = (getTempRet0() | 0);
  $101 = $8;
  $102 = $101;
  HEAP32[$102>>2] = $99;
  $103 = (($101) + 4)|0;
  $104 = $103;
  HEAP32[$104>>2] = $100;
 }
 $105 = $4;
 STACKTOP = sp;return ($105|0);
}
function _AT_SPC_decompose_header($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $16 = sp + 20|0;
 $17 = sp + 16|0;
 $20 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 HEAP32[$16>>2] = 0;
 $21 = $9;
 HEAP32[$17>>2] = $21;
 (_skipStruct($17)|0);
 (_skipStruct($17)|0);
 (_skipStruct($17)|0);
 $18 = 0;
 $22 = HEAP32[$17>>2]|0;
 $23 = $18;
 _decomposeStructIntoString($22,$23,$16);
 (_skipStruct($17)|0);
 $24 = $13;
 HEAP32[$24>>2] = 1;
 $19 = 0;
 $25 = HEAP32[$17>>2]|0;
 $26 = $19;
 _decomposeStructIntoString($25,$26,$16);
 (_skipStruct($17)|0);
 $27 = $12;
 HEAP32[$27>>2] = 6012;
 $28 = HEAP32[$17>>2]|0;
 $29 = $10;
 _decomposeStructIntoDouble($28,$29,$16);
 (_skipStruct($17)|0);
 $30 = HEAP32[$17>>2]|0;
 $31 = $11;
 _decomposeStructIntoDouble($30,$31,$16);
 (_skipStruct($17)|0);
 $32 = HEAP32[$17>>2]|0;
 $33 = $14;
 _decomposeStructIntoDouble($32,$33,$16);
 (_skipStruct($17)|0);
 $34 = $20;
 $35 = $34;
 HEAP32[$35>>2] = 0;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$17>>2]|0;
 _decomposeStructIntoInteger($38,$20,$16);
 (_skipStruct($17)|0);
 $39 = $20;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $15;
 HEAP32[$45>>2] = $41;
 STACKTOP = sp;return 0;
}
function _AT_SPC_decompose_data($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer = sp + 120|0;
 $17 = sp + 180|0;
 $18 = sp + 176|0;
 $24 = sp + 112|0;
 $25 = sp + 104|0;
 $26 = sp + 96|0;
 $27 = sp + 88|0;
 $28 = sp + 80|0;
 $29 = sp + 72|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $35 = sp;
 $37 = sp + 40|0;
 $38 = sp + 32|0;
 $39 = sp + 24|0;
 $42 = sp + 16|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0;
 HEAP32[$17>>2] = 0;
 $43 = $9;
 HEAP32[$18>>2] = $43;
 $19 = 0;
 $44 = HEAP32[$18>>2]|0;
 $45 = $19;
 _decomposeStructIntoString($44,$45,$17);
 $46 = $19;
 _free($46);
 (_skipStruct($18)|0);
 $20 = 0;
 $47 = HEAP32[$18>>2]|0;
 $48 = $20;
 _decomposeStructIntoString($47,$48,$17);
 $49 = $20;
 _free($49);
 (_skipStruct($18)|0);
 $21 = 0;
 $50 = HEAP32[$18>>2]|0;
 $51 = $21;
 _decomposeStructIntoString($50,$51,$17);
 $52 = $21;
 _free($52);
 (_skipStruct($18)|0);
 $22 = 0;
 $53 = HEAP32[$18>>2]|0;
 $54 = $22;
 _decomposeStructIntoString($53,$54,$17);
 $55 = $22;
 _free($55);
 (_skipStruct($18)|0);
 $23 = 0;
 $56 = HEAP32[$18>>2]|0;
 $57 = $23;
 _decomposeStructIntoString($56,$57,$17);
 $58 = $23;
 _free($58);
 (_skipStruct($18)|0);
 HEAPF64[$24>>3] = 0.0;
 $59 = HEAP32[$18>>2]|0;
 _decomposeStructIntoDouble($59,$24,$17);
 (_skipStruct($18)|0);
 HEAPF64[$25>>3] = 0.0;
 $60 = HEAP32[$18>>2]|0;
 _decomposeStructIntoDouble($60,$25,$17);
 (_skipStruct($18)|0);
 HEAPF64[$26>>3] = 0.0;
 $61 = HEAP32[$18>>2]|0;
 _decomposeStructIntoDouble($61,$26,$17);
 (_skipStruct($18)|0);
 $62 = $27;
 $63 = $62;
 HEAP32[$63>>2] = 0;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = 0;
 $66 = HEAP32[$18>>2]|0;
 _decomposeStructIntoInteger($66,$27,$17);
 (_skipStruct($18)|0);
 $67 = $28;
 $68 = $67;
 HEAP32[$68>>2] = 0;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = 0;
 $71 = $28;
 $72 = $71;
 HEAP32[$72>>2] = 0;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = 0;
 while(1) {
  $75 = $28;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = $27;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($81) + 4)|0;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = ($80>>>0)<($86>>>0);
  $88 = ($77>>>0)<($83>>>0);
  $89 = ($80|0)==($86|0);
  $90 = $89 & $88;
  $91 = $87 | $90;
  if (!($91)) {
   break;
  }
  HEAPF64[$29>>3] = 0.0;
  $92 = HEAP32[$18>>2]|0;
  _decomposeStructIntoDouble($92,$29,$17);
  (_skipStruct($18)|0);
  HEAPF64[$30>>3] = 0.0;
  $93 = HEAP32[$18>>2]|0;
  _decomposeStructIntoDouble($93,$30,$17);
  (_skipStruct($18)|0);
  $94 = $31;
  $95 = $94;
  HEAP32[$95>>2] = 0;
  $96 = (($94) + 4)|0;
  $97 = $96;
  HEAP32[$97>>2] = 0;
  $98 = HEAP32[$18>>2]|0;
  _decomposeStructIntoInteger($98,$31,$17);
  (_skipStruct($18)|0);
  $99 = $32;
  $100 = $99;
  HEAP32[$100>>2] = 0;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = 0;
  $103 = $31;
  $104 = $103;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($103) + 4)|0;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (_calloc(4,$105)|0);
  $33 = $109;
  $110 = $31;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = (_calloc(4,$112)|0);
  $34 = $116;
  $117 = $32;
  $118 = $117;
  HEAP32[$118>>2] = 0;
  $119 = (($117) + 4)|0;
  $120 = $119;
  HEAP32[$120>>2] = 0;
  while(1) {
   $121 = $32;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 4)|0;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = $31;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (($127) + 4)|0;
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = ($126>>>0)<($132>>>0);
   $134 = ($123>>>0)<($129>>>0);
   $135 = ($126|0)==($132|0);
   $136 = $135 & $134;
   $137 = $133 | $136;
   if (!($137)) {
    break;
   }
   $138 = $12;
   $139 = HEAP32[$138>>2]|0;
   $140 = $16;
   $141 = (($139) + ($140<<3)|0);
   $142 = $33;
   $143 = $32;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = (($143) + 4)|0;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   $149 = (($142) + ($145<<2)|0);
   HEAP32[$149>>2] = $141;
   $150 = $13;
   $151 = HEAP32[$150>>2]|0;
   $152 = $16;
   $153 = (($151) + ($152<<3)|0);
   $154 = $34;
   $155 = $32;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (($155) + 4)|0;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (($154) + ($157<<2)|0);
   HEAP32[$161>>2] = $153;
   $162 = HEAP32[$18>>2]|0;
   _decomposeStructIntoDouble($162,$35,$17);
   (_skipStruct($18)|0);
   $163 = +HEAPF64[$35>>3];
   $164 = (~~(($163)));
   $165 = ((($35)) + 8|0);
   $166 = +HEAPF64[$165>>3];
   $167 = (~~(($166)));
   $168 = (_AT_particle_no_from_Z_and_A_single($164,$167)|0);
   $36 = $168;
   HEAPF64[$37>>3] = 0.0;
   $169 = HEAP32[$18>>2]|0;
   _decomposeStructIntoDouble($169,$37,$17);
   (_skipStruct($18)|0);
   $170 = $38;
   $171 = $170;
   HEAP32[$171>>2] = 0;
   $172 = (($170) + 4)|0;
   $173 = $172;
   HEAP32[$173>>2] = 0;
   $174 = HEAP32[$18>>2]|0;
   _decomposeStructIntoInteger($174,$38,$17);
   (_skipStruct($18)|0);
   $175 = $39;
   $176 = $175;
   HEAP32[$176>>2] = 0;
   $177 = (($175) + 4)|0;
   $178 = $177;
   HEAP32[$178>>2] = 0;
   $179 = HEAP32[$18>>2]|0;
   _decomposeStructIntoInteger($179,$39,$17);
   (_skipStruct($18)|0);
   $40 = 0;
   $180 = $16;
   $40 = $180;
   while(1) {
    $181 = $40;
    $182 = ($181|0)<(0);
    $183 = $182 << 31 >> 31;
    $184 = $16;
    $185 = ($184|0)<(0);
    $186 = $185 << 31 >> 31;
    $187 = $39;
    $188 = $187;
    $189 = HEAP32[$188>>2]|0;
    $190 = (($187) + 4)|0;
    $191 = $190;
    $192 = HEAP32[$191>>2]|0;
    $193 = (_i64Add(($184|0),($186|0),($189|0),($192|0))|0);
    $194 = (getTempRet0() | 0);
    $195 = ($183>>>0)<($194>>>0);
    $196 = ($181>>>0)<($193>>>0);
    $197 = ($183|0)==($194|0);
    $198 = $197 & $196;
    $199 = $195 | $198;
    if (!($199)) {
     break;
    }
    $200 = $28;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $203 = (($200) + 4)|0;
    $204 = $203;
    $205 = HEAP32[$204>>2]|0;
    $206 = $10;
    $207 = HEAP32[$206>>2]|0;
    $208 = $40;
    $209 = (($207) + ($208<<2)|0);
    HEAP32[$209>>2] = $202;
    $210 = +HEAPF64[$29>>3];
    $211 = $11;
    $212 = HEAP32[$211>>2]|0;
    $213 = $40;
    $214 = (($212) + ($213<<3)|0);
    HEAPF64[$214>>3] = $210;
    $215 = $36;
    $216 = $14;
    $217 = HEAP32[$216>>2]|0;
    $218 = $40;
    $219 = (($217) + ($218<<2)|0);
    HEAP32[$219>>2] = $215;
    $220 = $40;
    $221 = (($220) + 1)|0;
    $40 = $221;
   }
   $222 = HEAP32[$18>>2]|0;
   $223 = (_decomposeTag($222)|0);
   $224 = ($223|0)==(17);
   do {
    if ($224) {
     $225 = HEAP32[$18>>2]|0;
     $226 = (_decomposeLength($225)|0);
     HEAP32[$17>>2] = $226;
     $227 = HEAP32[$17>>2]|0;
     $228 = ($227|0)<(0);
     $229 = $228 << 31 >> 31;
     $230 = $39;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = (_i64Add(($232|0),($235|0),1,0)|0);
     $237 = (getTempRet0() | 0);
     $238 = (___muldi3(($236|0),($237|0),8,0)|0);
     $239 = (getTempRet0() | 0);
     $240 = ($227|0)!=($238|0);
     $241 = ($229|0)!=($239|0);
     $242 = $240 | $241;
     $243 = $39;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = (($243) + 4)|0;
     $247 = $246;
     $248 = HEAP32[$247>>2]|0;
     if ($242) {
      $249 = HEAP32[$17>>2]|0;
      $250 = $vararg_buffer;
      $251 = $250;
      HEAP32[$251>>2] = $245;
      $252 = (($250) + 4)|0;
      $253 = $252;
      HEAP32[$253>>2] = $248;
      $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr1>>2] = $249;
      (_printf(80379,$vararg_buffer)|0);
      break;
     }
     $254 = (_i64Add(($245|0),($248|0),1,0)|0);
     $255 = (getTempRet0() | 0);
     $256 = (_calloc(8,$254)|0);
     $41 = $256;
     $257 = HEAP32[$18>>2]|0;
     $258 = $41;
     _decomposeStructIntoDouble($257,$258,$17);
     $259 = $16;
     $40 = $259;
     while(1) {
      $260 = $40;
      $261 = ($260|0)<(0);
      $262 = $261 << 31 >> 31;
      $263 = $16;
      $264 = ($263|0)<(0);
      $265 = $264 << 31 >> 31;
      $266 = $39;
      $267 = $266;
      $268 = HEAP32[$267>>2]|0;
      $269 = (($266) + 4)|0;
      $270 = $269;
      $271 = HEAP32[$270>>2]|0;
      $272 = (_i64Add(($263|0),($265|0),($268|0),($271|0))|0);
      $273 = (getTempRet0() | 0);
      $274 = ($262>>>0)<($273>>>0);
      $275 = ($260>>>0)<($272>>>0);
      $276 = ($262|0)==($273|0);
      $277 = $276 & $275;
      $278 = $274 | $277;
      $279 = $41;
      if (!($278)) {
       break;
      }
      $280 = $40;
      $281 = (($280) + 1)|0;
      $282 = $16;
      $283 = (($281) - ($282))|0;
      $284 = (($279) + ($283<<3)|0);
      $285 = +HEAPF64[$284>>3];
      $286 = $41;
      $287 = $40;
      $288 = $16;
      $289 = (($287) - ($288))|0;
      $290 = (($286) + ($289<<3)|0);
      $291 = +HEAPF64[$290>>3];
      $292 = $285 + $291;
      $293 = 0.5 * $292;
      $294 = $12;
      $295 = HEAP32[$294>>2]|0;
      $296 = $40;
      $297 = (($295) + ($296<<3)|0);
      HEAPF64[$297>>3] = $293;
      $298 = $41;
      $299 = $40;
      $300 = (($299) + 1)|0;
      $301 = $16;
      $302 = (($300) - ($301))|0;
      $303 = (($298) + ($302<<3)|0);
      $304 = +HEAPF64[$303>>3];
      $305 = $41;
      $306 = $40;
      $307 = $16;
      $308 = (($306) - ($307))|0;
      $309 = (($305) + ($308<<3)|0);
      $310 = +HEAPF64[$309>>3];
      $311 = $304 - $310;
      $312 = $13;
      $313 = HEAP32[$312>>2]|0;
      $314 = $40;
      $315 = (($313) + ($314<<3)|0);
      HEAPF64[$315>>3] = $311;
      $316 = $40;
      $317 = (($316) + 1)|0;
      $40 = $317;
     }
     _free($279);
    }
   } while(0);
   $318 = HEAP32[$18>>2]|0;
   $319 = (_decomposeTag($318)|0);
   $320 = ($319|0)==(18);
   if ($320) {
    $321 = HEAP32[$18>>2]|0;
    _decomposeStructIntoInteger($321,$42,$17);
    $322 = $12;
    $323 = HEAP32[$322>>2]|0;
    $324 = $16;
    $325 = (($323) + ($324<<3)|0);
    $326 = $33;
    $327 = $42;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    $333 = (($326) + ($329<<2)|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = $39;
    $336 = $335;
    $337 = HEAP32[$336>>2]|0;
    $338 = (($335) + 4)|0;
    $339 = $338;
    $340 = HEAP32[$339>>2]|0;
    $341 = (___muldi3(($337|0),($340|0),8,0)|0);
    $342 = (getTempRet0() | 0);
    _memcpy(($325|0),($334|0),($341|0))|0;
    $343 = $13;
    $344 = HEAP32[$343>>2]|0;
    $345 = $16;
    $346 = (($344) + ($345<<3)|0);
    $347 = $34;
    $348 = $42;
    $349 = $348;
    $350 = HEAP32[$349>>2]|0;
    $351 = (($348) + 4)|0;
    $352 = $351;
    $353 = HEAP32[$352>>2]|0;
    $354 = (($347) + ($350<<2)|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = $39;
    $357 = $356;
    $358 = HEAP32[$357>>2]|0;
    $359 = (($356) + 4)|0;
    $360 = $359;
    $361 = HEAP32[$360>>2]|0;
    $362 = (___muldi3(($358|0),($361|0),8,0)|0);
    $363 = (getTempRet0() | 0);
    _memcpy(($346|0),($355|0),($362|0))|0;
   }
   (_skipStruct($18)|0);
   $364 = HEAP32[$18>>2]|0;
   $365 = $15;
   $366 = HEAP32[$365>>2]|0;
   $367 = $16;
   $368 = (($366) + ($367<<3)|0);
   _decomposeStructIntoDouble($364,$368,$17);
   (_skipStruct($18)|0);
   (_skipStruct($18)|0);
   $369 = $39;
   $370 = $369;
   $371 = HEAP32[$370>>2]|0;
   $372 = (($369) + 4)|0;
   $373 = $372;
   $374 = HEAP32[$373>>2]|0;
   $375 = $16;
   $376 = ($375|0)<(0);
   $377 = $376 << 31 >> 31;
   $378 = (_i64Add(($375|0),($377|0),($371|0),($374|0))|0);
   $379 = (getTempRet0() | 0);
   $16 = $378;
   $380 = $32;
   $381 = $380;
   $382 = HEAP32[$381>>2]|0;
   $383 = (($380) + 4)|0;
   $384 = $383;
   $385 = HEAP32[$384>>2]|0;
   $386 = (_i64Add(($382|0),($385|0),1,0)|0);
   $387 = (getTempRet0() | 0);
   $388 = $32;
   $389 = $388;
   HEAP32[$389>>2] = $386;
   $390 = (($388) + 4)|0;
   $391 = $390;
   HEAP32[$391>>2] = $387;
  }
  $392 = $33;
  _free($392);
  $393 = $34;
  _free($393);
  $394 = $28;
  $395 = $394;
  $396 = HEAP32[$395>>2]|0;
  $397 = (($394) + 4)|0;
  $398 = $397;
  $399 = HEAP32[$398>>2]|0;
  $400 = (_i64Add(($396|0),($399|0),1,0)|0);
  $401 = (getTempRet0() | 0);
  $402 = $28;
  $403 = $402;
  HEAP32[$403>>2] = $400;
  $404 = (($402) + 4)|0;
  $405 = $404;
  HEAP32[$405>>2] = $401;
 }
 STACKTOP = sp;return 0;
}
function _AT_SPC_get_number_of_bins_from_filename_fast($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $8 = $2;
 $9 = (_AT_SPC_get_number_of_bytes_in_file($8)|0);
 $3 = $9;
 $10 = $3;
 $11 = ($10|0)<=(0);
 $12 = $3;
 if ($11) {
  $13 = (($12) - 1)|0;
  $1 = $13;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 }
 $14 = (($12>>>0) / 4)&-1;
 $4 = $14;
 $15 = $4;
 $16 = (_calloc(4,$15)|0);
 $5 = $16;
 $17 = $2;
 $18 = $4;
 $19 = $5;
 $20 = (_AT_SPC_fast_read_buffer($17,$18,$19)|0);
 $6 = $20;
 $21 = $6;
 $22 = ($21|0)==(1);
 if ($22) {
  $7 = -1;
 } else {
  $23 = $4;
  $24 = $5;
  $25 = (_AT_SPC_decompose_size($23,$24)|0);
  $7 = $25;
 }
 $26 = $5;
 _free($26);
 $27 = $7;
 $1 = $27;
 $28 = $1;
 STACKTOP = sp;return ($28|0);
}
function _AT_SPC_read_header_from_filename_fast($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $20 = $8;
 $21 = (_AT_SPC_get_number_of_bytes_in_file($20)|0);
 $15 = $21;
 $22 = $15;
 $23 = ($22|0)<=(0);
 $24 = $15;
 if ($23) {
  $25 = (($24) - 1)|0;
  $7 = $25;
  $46 = $7;
  STACKTOP = sp;return ($46|0);
 }
 $26 = (($24>>>0) / 4)&-1;
 $16 = $26;
 $27 = $16;
 $28 = (_calloc(4,$27)|0);
 $17 = $28;
 $29 = $8;
 $30 = $16;
 $31 = $17;
 $32 = (_AT_SPC_fast_read_buffer($29,$30,$31)|0);
 $18 = $32;
 $33 = $18;
 $34 = ($33|0)==(1);
 if ($34) {
  $19 = -1;
 } else {
  $35 = $16;
  $36 = $17;
  $37 = $9;
  $38 = $10;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $42 = $14;
  $43 = (_AT_SPC_decompose_header($35,$36,$37,$38,$39,$40,$41,$42)|0);
  $19 = $43;
 }
 $44 = $17;
 _free($44);
 $45 = $19;
 $7 = $45;
 $46 = $7;
 STACKTOP = sp;return ($46|0);
}
function _AT_SPC_read_data_from_filename_fast($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 40|0;
 $12 = sp + 36|0;
 $13 = sp + 32|0;
 $14 = sp + 28|0;
 $15 = sp + 24|0;
 $16 = sp + 20|0;
 $9 = $0;
 $10 = $1;
 HEAP32[$11>>2] = $2;
 HEAP32[$12>>2] = $3;
 HEAP32[$13>>2] = $4;
 HEAP32[$14>>2] = $5;
 HEAP32[$15>>2] = $6;
 HEAP32[$16>>2] = $7;
 $22 = $9;
 $23 = (_AT_SPC_get_number_of_bytes_in_file($22)|0);
 $17 = $23;
 $24 = $17;
 $25 = ($24|0)<=(0);
 $26 = $17;
 if ($25) {
  $27 = (($26) - 1)|0;
  $8 = $27;
  $42 = $8;
  STACKTOP = sp;return ($42|0);
 }
 $28 = (($26>>>0) / 4)&-1;
 $18 = $28;
 $29 = $18;
 $30 = (_calloc(4,$29)|0);
 $19 = $30;
 $31 = $9;
 $32 = $18;
 $33 = $19;
 $34 = (_AT_SPC_fast_read_buffer($31,$32,$33)|0);
 $20 = $34;
 $35 = $20;
 $36 = ($35|0)==(1);
 if ($36) {
  $21 = -1;
 } else {
  $37 = $18;
  $38 = $19;
  $39 = (_AT_SPC_decompose_data($37,$38,$11,$12,$13,$14,$15,$16)|0);
  $21 = $39;
 }
 $40 = $19;
 _free($40);
 $41 = $21;
 $8 = $41;
 $42 = $8;
 STACKTOP = sp;return ($42|0);
}
function _AT_SPC_read_from_filename_fast($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $28 = $14;
 $29 = $16;
 $30 = $17;
 $31 = $18;
 $32 = $19;
 $33 = $20;
 $34 = $21;
 (_AT_SPC_read_header_from_filename_fast($28,$29,$30,$31,$32,$33,$34)|0);
 $35 = $14;
 $36 = $15;
 $37 = $22;
 $38 = $23;
 $39 = $24;
 $40 = $25;
 $41 = $26;
 $42 = $27;
 $43 = (_AT_SPC_read_data_from_filename_fast($35,$36,$37,$38,$39,$40,$41,$42)|0);
 STACKTOP = sp;return ($43|0);
}
function _compare_SPC_Pairs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $4 = $6;
 $7 = $3;
 $5 = $7;
 $8 = $4;
 $9 = +HEAPF64[$8>>3];
 $10 = $5;
 $11 = +HEAPF64[$10>>3];
 $12 = $9 > $11;
 $13 = $12&1;
 $14 = $4;
 $15 = +HEAPF64[$14>>3];
 $16 = $5;
 $17 = +HEAPF64[$16>>3];
 $18 = $15 < $17;
 $19 = $18&1;
 $20 = (($13) - ($19))|0;
 STACKTOP = sp;return ($20|0);
}
function _AT_SPC_number_of_bins_at_range($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4192|0);
 $10 = sp;
 $11 = sp + 4120|0;
 $12 = sp + 4112|0;
 $13 = sp + 4156|0;
 $14 = sp + 4152|0;
 $15 = sp + 4104|0;
 $16 = sp + 4148|0;
 $18 = sp + 2048|0;
 $3 = $0;
 $4 = $1;
 $21 = (_calloc(1000,2056)|0);
 $7 = $21;
 $8 = 0;
 $22 = $3;
 $23 = (_opendir($22)|0);
 $5 = $23;
 $24 = $5;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  _perror(80422);
  $2 = -1;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 while(1) {
  $26 = $5;
  $27 = (_readdir($26)|0);
  $6 = $27;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $6;
  $30 = ((($29)) + 11|0);
  $31 = (_strcmp($30,83870)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   continue;
  }
  $33 = $6;
  $34 = ((($33)) + 11|0);
  $35 = (_strcmp($34,80412)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   continue;
  }
  $37 = $6;
  $38 = ((($37)) + 11|0);
  $39 = (_strlen($38)|0);
  $40 = ($39>>>0)>(4);
  if ($40) {
   $41 = $6;
   $42 = ((($41)) + 11|0);
   $43 = $6;
   $44 = ((($43)) + 11|0);
   $45 = (_strlen($44)|0);
   $46 = (($42) + ($45)|0);
   $47 = ((($46)) + -4|0);
   $9 = $47;
   $48 = $9;
   $49 = (_strcmp($48,80415)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = $3;
    (_strcpy($10,$51)|0);
    (_strcat($10,80420)|0);
    $52 = $6;
    $53 = ((($52)) + 11|0);
    (_strcat($10,$53)|0);
    $54 = (_AT_SPC_read_header_from_filename_fast($10,$11,$12,$13,$14,$15,$16)|0);
    $17 = $54;
    $55 = $17;
    $56 = ($55|0)==(0);
    if ($56) {
     $57 = ((($18)) + 8|0);
     (_strcpy($57,$10)|0);
     $58 = +HEAPF64[$12>>3];
     HEAPF64[$18>>3] = $58;
     $59 = $7;
     $60 = $8;
     $61 = (($59) + (($60*2056)|0)|0);
     _memcpy(($61|0),($18|0),2056)|0;
     $62 = $8;
     $63 = (($62) + 1)|0;
     $8 = $63;
    }
   }
  }
 }
 $64 = $5;
 (_closedir($64)|0);
 $19 = -1;
 $65 = $7;
 $66 = $8;
 _qsort($65,$66,2056,25);
 $20 = 0;
 while(1) {
  $67 = $20;
  $68 = $8;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $4;
  $71 = $7;
  $72 = $20;
  $73 = (($71) + (($72*2056)|0)|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $70 <= $74;
  if ($75) {
   label = 17;
   break;
  }
  $81 = $20;
  $82 = (($81) + 1)|0;
  $20 = $82;
 }
 if ((label|0) == 17) {
  $76 = $7;
  $77 = $20;
  $78 = (($76) + (($77*2056)|0)|0);
  $79 = ((($78)) + 8|0);
  $80 = (_AT_SPC_get_number_of_bins_from_filename_fast($79)|0);
  $19 = $80;
 }
 $83 = $19;
 $2 = $83;
 $84 = $2;
 STACKTOP = sp;return ($84|0);
}
function _AT_SPC_spectrum_at_range($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8368|0);
 $24 = sp + 4096|0;
 $25 = sp + 8224|0;
 $26 = sp + 8216|0;
 $27 = sp + 8308|0;
 $28 = sp + 8304|0;
 $29 = sp + 8208|0;
 $30 = sp + 8300|0;
 $32 = sp + 6152|0;
 $34 = sp + 2048|0;
 $35 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $50 = (_calloc(1000,2056)|0);
 $21 = $50;
 $22 = 0;
 $51 = $10;
 $52 = (_opendir($51)|0);
 $19 = $52;
 $53 = $19;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  _perror(80422);
  $9 = -1;
  $264 = $9;
  STACKTOP = sp;return ($264|0);
 }
 while(1) {
  $55 = $19;
  $56 = (_readdir($55)|0);
  $20 = $56;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   break;
  }
  $58 = $20;
  $59 = ((($58)) + 11|0);
  $60 = (_strcmp($59,83870)|0);
  $61 = ($60|0)==(0);
  if ($61) {
   continue;
  }
  $62 = $20;
  $63 = ((($62)) + 11|0);
  $64 = (_strcmp($63,80412)|0);
  $65 = ($64|0)==(0);
  if ($65) {
   continue;
  }
  $66 = $20;
  $67 = ((($66)) + 11|0);
  $68 = (_strlen($67)|0);
  $69 = ($68>>>0)>(4);
  if ($69) {
   $70 = $20;
   $71 = ((($70)) + 11|0);
   $72 = $20;
   $73 = ((($72)) + 11|0);
   $74 = (_strlen($73)|0);
   $75 = (($71) + ($74)|0);
   $76 = ((($75)) + -4|0);
   $23 = $76;
   $77 = $23;
   $78 = (_strcmp($77,80415)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $80 = $10;
    (_strcpy($24,$80)|0);
    (_strcat($24,80420)|0);
    $81 = $20;
    $82 = ((($81)) + 11|0);
    (_strcat($24,$82)|0);
    $83 = (_AT_SPC_read_header_from_filename_fast($24,$25,$26,$27,$28,$29,$30)|0);
    $31 = $83;
    $84 = $31;
    $85 = ($84|0)==(0);
    if ($85) {
     $86 = ((($32)) + 8|0);
     (_strcpy($86,$24)|0);
     $87 = +HEAPF64[$26>>3];
     HEAPF64[$32>>3] = $87;
     $88 = $21;
     $89 = $22;
     $90 = (($88) + (($89*2056)|0)|0);
     _memcpy(($90|0),($32|0),2056)|0;
     $91 = $22;
     $92 = (($91) + 1)|0;
     $22 = $92;
    }
   }
  }
 }
 $93 = $19;
 (_closedir($93)|0);
 $94 = $21;
 $95 = $22;
 _qsort($94,$95,2056,25);
 $33 = 0.0;
 $36 = 0;
 while(1) {
  $96 = $36;
  $97 = $22;
  $98 = ($96|0)<($97|0);
  if (!($98)) {
   break;
  }
  $99 = $11;
  $100 = $21;
  $101 = $36;
  $102 = (($100) + (($101*2056)|0)|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $99 <= $103;
  if ($104) {
   label = 17;
   break;
  }
  $132 = $36;
  $133 = (($132) + 1)|0;
  $36 = $133;
 }
 if ((label|0) == 17) {
  $105 = $11;
  $106 = $21;
  $107 = $36;
  $108 = (($107) - 1)|0;
  $109 = (($106) + (($108*2056)|0)|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $105 - $110;
  $112 = $21;
  $113 = $36;
  $114 = (($112) + (($113*2056)|0)|0);
  $115 = +HEAPF64[$114>>3];
  $116 = $21;
  $117 = $36;
  $118 = (($117) - 1)|0;
  $119 = (($116) + (($118*2056)|0)|0);
  $120 = +HEAPF64[$119>>3];
  $121 = $115 - $120;
  $122 = $111 / $121;
  $33 = $122;
  $123 = $21;
  $124 = $36;
  $125 = (($124) - 1)|0;
  $126 = (($123) + (($125*2056)|0)|0);
  $127 = ((($126)) + 8|0);
  (_strcpy($34,$127)|0);
  $128 = $21;
  $129 = $36;
  $130 = (($128) + (($129*2056)|0)|0);
  $131 = ((($130)) + 8|0);
  (_strcpy($35,$131)|0);
 }
 $134 = $12;
 $135 = (_calloc($134,4)|0);
 $37 = $135;
 $136 = $12;
 $137 = (_calloc($136,8)|0);
 $38 = $137;
 $138 = $12;
 $139 = (_calloc($138,8)|0);
 $39 = $139;
 $140 = $12;
 $141 = (_calloc($140,8)|0);
 $40 = $141;
 $142 = $12;
 $143 = (_calloc($142,4)|0);
 $41 = $143;
 $144 = $12;
 $145 = (_calloc($144,8)|0);
 $42 = $145;
 $146 = $12;
 $147 = $37;
 $148 = $38;
 $149 = $39;
 $150 = $40;
 $151 = $41;
 $152 = $42;
 $153 = (_AT_SPC_read_data_from_filename_fast($34,$146,$147,$148,$149,$150,$151,$152)|0);
 $43 = $153;
 $154 = $43;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $37;
  _free($156);
  $157 = $38;
  _free($157);
  $158 = $39;
  _free($158);
  $159 = $40;
  _free($159);
  $160 = $41;
  _free($160);
  $161 = $42;
  _free($161);
  $9 = 1;
  $264 = $9;
  STACKTOP = sp;return ($264|0);
 }
 $162 = $12;
 $163 = (_calloc($162,4)|0);
 $44 = $163;
 $164 = $12;
 $165 = (_calloc($164,8)|0);
 $45 = $165;
 $166 = $12;
 $167 = (_calloc($166,8)|0);
 $46 = $167;
 $168 = $12;
 $169 = (_calloc($168,8)|0);
 $47 = $169;
 $170 = $12;
 $171 = (_calloc($170,4)|0);
 $48 = $171;
 $172 = $12;
 $173 = (_calloc($172,8)|0);
 $49 = $173;
 $174 = $12;
 $175 = $44;
 $176 = $45;
 $177 = $46;
 $178 = $47;
 $179 = $48;
 $180 = $49;
 $181 = (_AT_SPC_read_data_from_filename_fast($35,$174,$175,$176,$177,$178,$179,$180)|0);
 $43 = $181;
 $182 = $43;
 $183 = ($182|0)!=(0);
 if ($183) {
  $184 = $37;
  _free($184);
  $185 = $38;
  _free($185);
  $186 = $39;
  _free($186);
  $187 = $40;
  _free($187);
  $188 = $41;
  _free($188);
  $189 = $42;
  _free($189);
  $190 = $44;
  _free($190);
  $191 = $45;
  _free($191);
  $192 = $46;
  _free($192);
  $193 = $47;
  _free($193);
  $194 = $48;
  _free($194);
  $195 = $49;
  _free($195);
  $9 = 1;
  $264 = $9;
  STACKTOP = sp;return ($264|0);
 }
 $36 = 0;
 while(1) {
  $196 = $36;
  $197 = $12;
  $198 = ($196|0)<($197|0);
  $199 = $37;
  if (!($198)) {
   break;
  }
  $200 = $36;
  $201 = (($199) + ($200<<2)|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $13;
  $204 = $36;
  $205 = (($203) + ($204<<2)|0);
  HEAP32[$205>>2] = $202;
  $206 = $38;
  $207 = $36;
  $208 = (($206) + ($207<<3)|0);
  $209 = +HEAPF64[$208>>3];
  $210 = $14;
  $211 = $36;
  $212 = (($210) + ($211<<3)|0);
  HEAPF64[$212>>3] = $209;
  $213 = $39;
  $214 = $36;
  $215 = (($213) + ($214<<3)|0);
  $216 = +HEAPF64[$215>>3];
  $217 = $15;
  $218 = $36;
  $219 = (($217) + ($218<<3)|0);
  HEAPF64[$219>>3] = $216;
  $220 = $40;
  $221 = $36;
  $222 = (($220) + ($221<<3)|0);
  $223 = +HEAPF64[$222>>3];
  $224 = $16;
  $225 = $36;
  $226 = (($224) + ($225<<3)|0);
  HEAPF64[$226>>3] = $223;
  $227 = $41;
  $228 = $36;
  $229 = (($227) + ($228<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $17;
  $232 = $36;
  $233 = (($231) + ($232<<2)|0);
  HEAP32[$233>>2] = $230;
  $234 = $33;
  $235 = 1.0 - $234;
  $236 = $42;
  $237 = $36;
  $238 = (($236) + ($237<<3)|0);
  $239 = +HEAPF64[$238>>3];
  $240 = $235 * $239;
  $241 = $33;
  $242 = $49;
  $243 = $36;
  $244 = (($242) + ($243<<3)|0);
  $245 = +HEAPF64[$244>>3];
  $246 = $241 * $245;
  $247 = $240 + $246;
  $248 = $18;
  $249 = $36;
  $250 = (($248) + ($249<<3)|0);
  HEAPF64[$250>>3] = $247;
  $251 = $36;
  $252 = (($251) + 1)|0;
  $36 = $252;
 }
 _free($199);
 $253 = $38;
 _free($253);
 $254 = $39;
 _free($254);
 $255 = $40;
 _free($255);
 $256 = $41;
 _free($256);
 $257 = $42;
 _free($257);
 $258 = $44;
 _free($258);
 $259 = $45;
 _free($259);
 $260 = $46;
 _free($260);
 $261 = $47;
 _free($261);
 $262 = $48;
 _free($262);
 $263 = $49;
 _free($263);
 $9 = 0;
 $264 = $9;
 STACKTOP = sp;return ($264|0);
}
function _AT_Mass_Stopping_Power($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $7;
 $15 = (_strcmp($14,80447)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $8;
  $18 = $9;
  $19 = $10;
  $20 = $11;
  $21 = $12;
  (_AT_Mass_Stopping_Power_with_no(1,$17,$18,$19,$20,$21)|0);
  $6 = 0;
  $42 = $6;
  STACKTOP = sp;return ($42|0);
 }
 $22 = $7;
 $23 = (_strcmp($22,80453)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = $8;
  $26 = $9;
  $27 = $10;
  $28 = $11;
  $29 = $12;
  (_AT_Mass_Stopping_Power_with_no(2,$25,$26,$27,$28,$29)|0);
  $6 = 0;
  $42 = $6;
  STACKTOP = sp;return ($42|0);
 }
 $30 = $7;
 $31 = (_strcmp($30,80459)|0);
 $32 = ($31|0)==(0);
 $33 = $8;
 $34 = $9;
 $35 = $10;
 $36 = $11;
 if ($32) {
  $37 = $12;
  (_AT_Mass_Stopping_Power_with_no(3,$33,$34,$35,$36,$37)|0);
  $6 = 0;
  $42 = $6;
  STACKTOP = sp;return ($42|0);
 } else {
  $38 = $7;
  $39 = $12;
  $40 = (_AT_FromFile_wrapper($33,$34,$35,$36,$38,$39)|0);
  $13 = $40;
  $41 = $13;
  $6 = $41;
  $42 = $6;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _AT_Mass_Stopping_Power_with_no($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 $14 = ($13|0)<(4);
 if (!($14)) {
  ___assert_fail((80464|0),(80515|0),115,(80547|0));
  // unreachable;
 }
 $15 = $6;
 $16 = ($15|0)>=(0);
 if ($16) {
  $17 = $6;
  $18 = (71908 + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $7;
  $21 = $8;
  $22 = $9;
  $23 = $10;
  $24 = $11;
  $25 = (FUNCTION_TABLE_iiiiiii[$19 & 15]($20,$21,$22,$23,0,$24)|0);
  $12 = $25;
  $26 = $12;
  STACKTOP = sp;return ($26|0);
 } else {
  ___assert_fail((80578|0),(80515|0),116,(80547|0));
  // unreachable;
 }
 return (0)|0;
}
function _AT_Stopping_Power($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = (_AT_Mass_Stopping_Power($15,$16,$17,$18,$19,$20)|0);
 $12 = $21;
 $22 = $10;
 $23 = (+_AT_density_g_cm3_from_material_no($22));
 $14 = $23;
 $13 = 0;
 while(1) {
  $24 = $13;
  $25 = $7;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $14;
  $28 = $27 / 10.0;
  $29 = $11;
  $30 = $13;
  $31 = (($29) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 * $28;
  HEAPF64[$31>>3] = $33;
  $34 = $13;
  $35 = (($34) + 1)|0;
  $13 = $35;
 }
 $36 = $12;
 STACKTOP = sp;return ($36|0);
}
function _AT_Stopping_Power_with_no($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = (_AT_Mass_Stopping_Power_with_no($15,$16,$17,$18,$19,$20)|0);
 $12 = $21;
 $22 = $10;
 $23 = (+_AT_density_g_cm3_from_material_no($22));
 $14 = $23;
 $13 = 0;
 while(1) {
  $24 = $13;
  $25 = $7;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $14;
  $28 = $27 / 10.0;
  $29 = $11;
  $30 = $13;
  $31 = (($29) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 * $28;
  HEAPF64[$31>>3] = $33;
  $34 = $13;
  $35 = (($34) + 1)|0;
  $13 = $35;
 }
 $36 = $12;
 STACKTOP = sp;return ($36|0);
}
function _AT_Energy_MeV_u_from_Stopping_Power_single($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +-1;
}
function _AT_stopping_power_source_model_name_from_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 0;
}
function _AT_stopping_power_source_model_number_from_name($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0;
}
function _AT_Bethe_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 $15 = $9;
 $16 = $11;
 _AT_Bethe_energy_loss_MeV_cm2_g($12,$13,$14,$15,-1.0,1,$16);
 STACKTOP = sp;return 0;
}
function _AT_Bethe_energy_loss_MeV_cm2_g($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $15 = $5&1;
 $12 = $15;
 $13 = $6;
 $14 = 0;
 while(1) {
  $16 = $14;
  $17 = $7;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $8;
  $20 = $14;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $9;
  $24 = $14;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $10;
  $28 = $11;
  $29 = $12;
  $30 = $29&1;
  $31 = (+_AT_Bethe_energy_loss_MeV_cm2_g_single($22,$26,$27,$28,$30));
  $32 = $13;
  $33 = $14;
  $34 = (($32) + ($33<<3)|0);
  HEAPF64[$34>>3] = $31;
  $35 = $14;
  $36 = (($35) + 1)|0;
  $14 = $36;
 }
 STACKTOP = sp;return;
}
function _AT_Bethe_energy_loss_MeV_cm2_g_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $4&1;
 $9 = $11;
 $10 = 0.0;
 $12 = $5;
 $13 = $12 >= 0.48999999999999999;
 if (!($13)) {
  $26 = $10;
  STACKTOP = sp;return (+$26);
 }
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $9;
 $18 = $17&1;
 $19 = (+_AT_el_energy_loss_leading_term_MeV_cm2_g($14,$15,$16,$18));
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = (+_AT_Bethe_Stopping_Number($20,$21,$22,$23));
 $25 = $19 * $24;
 $10 = $25;
 $26 = $10;
 STACKTOP = sp;return (+$26);
}
function _AT_el_energy_loss_leading_term_MeV_cm2_g($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $3&1;
 $7 = $12;
 $13 = $6;
 $14 = (+_AT_average_Z_from_material_no($13));
 $8 = $14;
 $15 = $6;
 $16 = (+_AT_average_A_from_material_no($15));
 $9 = $16;
 $17 = $9;
 $18 = $17 > 0.0;
 if (!($18)) {
  ___assert_fail((80705|0),(80619|0),56,(80711|0));
  // unreachable;
 }
 $19 = $4;
 $20 = (+_AT_beta_from_E_single($19));
 $21 = (+_gsl_pow_2($20));
 $10 = $21;
 $22 = $10;
 $23 = $22 > 0.0;
 if (!($23)) {
  ___assert_fail((80752|0),(80619|0),59,(80711|0));
  // unreachable;
 }
 $24 = $7;
 $25 = $24&1;
 if ($25) {
  $26 = $4;
  $27 = $5;
  $28 = (+_AT_effective_charge_from_E_MeV_u_single($26,$27));
  $11 = $28;
 } else {
  $29 = $5;
  $30 = (_AT_Z_from_particle_no_single($29)|0);
  $31 = (+($30|0));
  $11 = $31;
 }
 $32 = $8;
 $33 = $9;
 $34 = $32 / $33;
 $35 = 0.30707499999999999 * $34;
 $36 = $11;
 $37 = $11;
 $38 = $36 * $37;
 $39 = $35 * $38;
 $40 = $10;
 $41 = $39 / $40;
 STACKTOP = sp;return (+$41);
}
function _AT_Bethe_Stopping_Number($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $28 = $4;
 $29 = (+_AT_beta_from_E_single($28));
 $30 = (+_gsl_pow_2($29));
 $8 = $30;
 $31 = $6;
 $32 = (+_AT_I_eV_from_material_no($31));
 $9 = $32;
 $33 = $9;
 $34 = $33 * 9.9999999999999995E-7;
 $10 = $34;
 $35 = $4;
 $36 = (+_AT_max_relativistic_E_transfer_MeV_single($35));
 $11 = $36;
 $12 = 0;
 $37 = $7;
 $38 = $37 > 0.0;
 if ($38) {
  $39 = $7;
  $40 = $39 / 1000.0;
  $41 = $11;
  $42 = $40 < $41;
  if ($42) {
   $12 = 1;
  }
 }
 $43 = $8;
 $44 = 1.0219978359999999 * $43;
 $45 = $8;
 $46 = 1.0 - $45;
 $47 = $44 / $46;
 $13 = $47;
 $48 = $10;
 $49 = $48 > 0.0;
 if (!($49)) {
  ___assert_fail((80608|0),(80619|0),90,(80660|0));
  // unreachable;
 }
 $50 = $10;
 $51 = $13;
 $52 = $51 / $50;
 $13 = $52;
 $53 = $12;
 $54 = $53&1;
 if ($54) {
  $55 = $7;
  $56 = $55 * 0.001;
  $11 = $56;
 }
 $57 = $11;
 $58 = $10;
 $59 = $57 / $58;
 $14 = $59;
 $60 = $8;
 $15 = $60;
 $61 = $12;
 $62 = $61&1;
 if ($62) {
  $63 = $15;
  $64 = $63 / 2.0;
  $15 = $64;
  $65 = $8;
  $66 = 1.0 - $65;
  $67 = $11;
  $68 = $66 * $67;
  $69 = $68 / 2.0439956719999999;
  $70 = $15;
  $71 = $70 + $69;
  $15 = $71;
 }
 $16 = 0.0;
 $72 = $6;
 $73 = (_AT_phase_from_material_no($72)|0);
 $17 = $73;
 $17 = 1;
 $74 = $4;
 $75 = (+_AT_kinetic_variable_single($74));
 $18 = $75;
 $76 = $6;
 $77 = (+_AT_plasma_energy_J_from_material_no($76));
 $19 = $77;
 $78 = $10;
 $79 = $78 * 1.6021764600000001E-13;
 $20 = $79;
 $80 = $20;
 $81 = $19;
 $82 = $80 / $81;
 $83 = (+Math_log((+$82)));
 $84 = 2.0 * $83;
 $85 = 1.0 + $84;
 $21 = $85;
 $22 = 0.0;
 $23 = 0.0;
 $86 = $17;
 $87 = ($86|0)==(1);
 do {
  if ($87) {
   $88 = $9;
   $89 = $88 < 100.0;
   if ($89) {
    $23 = 2.0;
    $90 = $21;
    $91 = $90 <= 3.681;
    if ($91) {
     $22 = 0.20000000000000001;
     break;
    } else {
     $92 = $21;
     $93 = 0.32600000000000001 * $92;
     $94 = $93 - 1.0;
     $22 = $94;
     break;
    }
   } else {
    $23 = 3.0;
    $95 = $21;
    $96 = $95 <= 5.2149999999999999;
    if ($96) {
     $22 = 0.20000000000000001;
     break;
    } else {
     $97 = $21;
     $98 = 0.32600000000000001 * $97;
     $99 = $98 - 1.5;
     $22 = $99;
     break;
    }
   }
  } else {
   $100 = $21;
   $101 = 0.32600000000000001 * $100;
   $102 = $101 - 2.5;
   $22 = $102;
   $23 = 5.0;
   $103 = $21;
   $104 = $103 < 10.0;
   if ($104) {
    $22 = 1.6000000000000001;
    $23 = 4.0;
   }
   $105 = $21;
   $106 = $105 >= 10.0;
   $107 = $21;
   $108 = $107 < 10.5;
   $or$cond = $106 & $108;
   if ($or$cond) {
    $22 = 1.7;
    $23 = 4.0;
   }
   $109 = $21;
   $110 = $109 >= 10.5;
   $111 = $21;
   $112 = $111 < 11.0;
   $or$cond3 = $110 & $112;
   if ($or$cond3) {
    $22 = 1.8;
    $23 = 4.0;
   }
   $113 = $21;
   $114 = $113 >= 11.0;
   $115 = $21;
   $116 = $115 < 11.5;
   $or$cond5 = $114 & $116;
   if ($or$cond5) {
    $22 = 1.8999999999999999;
    $23 = 4.0;
   }
   $117 = $21;
   $118 = $117 >= 11.5;
   $119 = $21;
   $120 = $119 < 12.25;
   $or$cond7 = $118 & $120;
   if ($or$cond7) {
    $22 = 2.0;
    $23 = 4.0;
   }
   $121 = $21;
   $122 = $121 >= 12.25;
   $123 = $21;
   $124 = $123 < 13.804;
   $or$cond9 = $122 & $124;
   if ($or$cond9) {
    $22 = 2.0;
    $23 = 5.0;
   }
  }
 } while(0);
 $125 = $21;
 $126 = $125 / 4.6059999999999999;
 $24 = $126;
 $25 = 3.0;
 $127 = $24;
 $128 = $22;
 $129 = $127 - $128;
 $130 = 4.6059999999999999 * $129;
 $131 = $23;
 $132 = $22;
 $133 = $131 - $132;
 $134 = $25;
 $135 = (+Math_pow((+$133),(+$134)));
 $136 = $130 / $135;
 $26 = $136;
 $137 = $18;
 $138 = $22;
 $139 = $137 >= $138;
 if ($139) {
  $140 = $18;
  $141 = $23;
  $142 = $140 <= $141;
  if ($142) {
   $143 = $18;
   $144 = 4.6059999999999999 * $143;
   $145 = $21;
   $146 = $144 - $145;
   $147 = $26;
   $148 = $23;
   $149 = $18;
   $150 = $148 - $149;
   $151 = $25;
   $152 = (+Math_pow((+$150),(+$151)));
   $153 = $147 * $152;
   $154 = $146 + $153;
   $16 = $154;
  }
 }
 $155 = $18;
 $156 = $23;
 $157 = $155 > $156;
 if ($157) {
  $158 = $18;
  $159 = 4.6059999999999999 * $158;
  $160 = $21;
  $161 = $159 - $160;
  $16 = $161;
 }
 $162 = $16;
 $27 = $162;
 $163 = $13;
 $164 = $163 > 0.0;
 if (!($164)) {
  ___assert_fail((80685|0),(80619|0),179,(80660|0));
  // unreachable;
 }
 $165 = $14;
 $166 = $165 > 0.0;
 if ($166) {
  $167 = $13;
  $168 = $14;
  $169 = $167 * $168;
  $170 = (+Math_log((+$169)));
  $171 = 0.5 * $170;
  $172 = $15;
  $173 = $171 - $172;
  $174 = $27;
  $175 = $173 - $174;
  STACKTOP = sp;return (+$175);
 } else {
  ___assert_fail((80695|0),(80619|0),180,(80660|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_FromFile_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(672|0);
 $vararg_buffer10 = sp + 568|0;
 $vararg_buffer5 = sp + 552|0;
 $vararg_buffer3 = sp + 544|0;
 $vararg_buffer1 = sp + 536|0;
 $vararg_buffer = sp + 528|0;
 $14 = sp + 256|0;
 $15 = sp;
 $17 = sp + 620|0;
 $18 = sp + 520|0;
 $19 = sp + 512|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $32 = $11;
 $33 = (0|0)==($32|0);
 if ($33) {
  $34 = (_getenv((80762|0))|0);
  $11 = $34;
 }
 $35 = $11;
 $36 = (0|0)==($35|0);
 if ($36) {
  (_printf(80787,$vararg_buffer)|0);
  $6 = 1;
  $150 = $6;
  STACKTOP = sp;return ($150|0);
 }
 $37 = $11;
 $38 = (_fopen($37,80919)|0);
 $13 = $38;
 $39 = $13;
 $40 = (0|0)==($39|0);
 if ($40) {
  (_printf(80921,$vararg_buffer1)|0);
  $6 = 1;
  $150 = $6;
  STACKTOP = sp;return ($150|0);
 }
 $16 = 0;
 $41 = (_calloc(10000,4)|0);
 $20 = $41;
 $42 = (_calloc(10000,8)|0);
 $21 = $42;
 $43 = (_calloc(10000,8)|0);
 $22 = $43;
 while(1) {
  $44 = $13;
  $45 = (_fgets($14,255,$44)|0);
  $46 = ($45|0)!=(0|0);
  if (!($46)) {
   break;
  }
  $47 = HEAP8[$14>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)==(-1);
  if ($49) {
   break;
  }
  $50 = HEAP8[$14>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = (_isdigit($51)|0);
  $53 = ($52|0)!=(0);
  if (!($53)) {
   continue;
  }
  HEAP32[$vararg_buffer3>>2] = $15;
  (_sscanf($14,80965,$vararg_buffer3)|0);
  HEAP32[$vararg_buffer5>>2] = $17;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $18;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $19;
  $54 = (_sscanf($14,80968,$vararg_buffer5)|0);
  $55 = ($54|0)!=(3);
  if ($55) {
   $56 = (_strlen($15)|0);
   $57 = ($56|0)!=(0);
   if ($57) {
    $58 = (_strlen($15)|0);
    $59 = ($58|0)!=(1);
    if ($59) {
     label = 15;
     break;
    }
   }
  }
  $60 = HEAP32[$17>>2]|0;
  $61 = $20;
  $62 = $16;
  $63 = (($61) + ($62<<2)|0);
  HEAP32[$63>>2] = $60;
  $64 = +HEAPF64[$18>>3];
  $65 = $21;
  $66 = $16;
  $67 = (($65) + ($66<<3)|0);
  HEAPF64[$67>>3] = $64;
  $68 = +HEAPF64[$19>>3];
  $69 = $22;
  $70 = $16;
  $71 = (($70) + 1)|0;
  $16 = $71;
  $72 = (($69) + ($70<<3)|0);
  HEAPF64[$72>>3] = $68;
 }
 if ((label|0) == 15) {
  (_printf(80980,$vararg_buffer10)|0);
  $6 = 1;
  $150 = $6;
  STACKTOP = sp;return ($150|0);
 }
 $73 = $16;
 $74 = (($73) + -1)|0;
 $16 = $74;
 $75 = $13;
 (_fclose($75)|0);
 $13 = 0;
 $26 = 0;
 $27 = 0;
 $28 = -1;
 $76 = (_calloc(1,8)|0);
 $29 = $76;
 $77 = (_calloc(1,8)|0);
 $30 = $77;
 $78 = $16;
 $79 = (_llvm_stacksave()|0);
 $31 = $79;
 $$alloca_mul = $78;
 $80 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $23 = 0;
 while(1) {
  $81 = $23;
  $82 = $7;
  $83 = ($81|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $28;
  $85 = ($84|0)==(-1);
  if ($85) {
   label = 21;
  } else {
   $86 = $28;
   $87 = $27;
   $88 = ($86|0)==($87|0);
   if ($88) {
    label = 21;
   }
  }
  L32: do {
   if ((label|0) == 21) {
    label = 0;
    $89 = $9;
    $90 = $23;
    $91 = (($89) + ($90<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (_AT_Z_from_particle_no_single($92)|0);
    $27 = $93;
    $94 = $27;
    $28 = $94;
    $95 = $27;
    $96 = $20;
    $97 = $16;
    $98 = (_is_element_int($95,$96,$97,$80)|0);
    $26 = $98;
    $99 = $29;
    _free($99);
    $100 = $30;
    _free($100);
    $101 = $26;
    $102 = (_calloc($101,8)|0);
    $29 = $102;
    $103 = $26;
    $104 = (_calloc($103,8)|0);
    $30 = $104;
    $25 = 0;
    $24 = 0;
    while(1) {
     $105 = $24;
     $106 = $16;
     $107 = ($105|0)<($106|0);
     if (!($107)) {
      break L32;
     }
     $108 = $24;
     $109 = (($80) + ($108)|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&1;
     $112 = $111&1;
     $113 = ($112|0)==(1);
     if ($113) {
      $114 = $21;
      $115 = $24;
      $116 = (($114) + ($115<<3)|0);
      $117 = +HEAPF64[$116>>3];
      $118 = $29;
      $119 = $25;
      $120 = (($118) + ($119<<3)|0);
      HEAPF64[$120>>3] = $117;
      $121 = $22;
      $122 = $24;
      $123 = (($121) + ($122<<3)|0);
      $124 = +HEAPF64[$123>>3];
      $125 = $30;
      $126 = $25;
      $127 = (($126) + 1)|0;
      $25 = $127;
      $128 = (($125) + ($126<<3)|0);
      HEAPF64[$128>>3] = $124;
     }
     $129 = $24;
     $130 = (($129) + 1)|0;
     $24 = $130;
    }
   }
  } while(0);
  $131 = $29;
  $132 = $30;
  $133 = $26;
  $134 = $8;
  $135 = $23;
  $136 = (($134) + ($135<<3)|0);
  $137 = +HEAPF64[$136>>3];
  $138 = (+_AT_get_interpolated_y_from_input_table($131,$132,$133,$137));
  $139 = $12;
  $140 = $23;
  $141 = (($139) + ($140<<3)|0);
  HEAPF64[$141>>3] = $138;
  $142 = $23;
  $143 = (($142) + 1)|0;
  $23 = $143;
 }
 $144 = $29;
 _free($144);
 $145 = $30;
 _free($145);
 $146 = $20;
 _free($146);
 $147 = $21;
 _free($147);
 $148 = $22;
 _free($148);
 $6 = 0;
 $149 = $31;
 _llvm_stackrestore(($149|0));
 $150 = $6;
 STACKTOP = sp;return ($150|0);
}
function _AT_ICRU_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $15 = $10;
 $16 = ($15|0)!=(1);
 $17 = $10;
 $18 = ($17|0)!=(2);
 $or$cond = $16 & $18;
 if ($or$cond) {
  $13 = 0;
  while(1) {
   $19 = $13;
   $20 = $7;
   $21 = ($19|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $12;
   $23 = $13;
   $24 = (($22) + ($23<<3)|0);
   HEAPF64[$24>>3] = -1.0;
   $25 = $13;
   $26 = (($25) + 1)|0;
   $13 = $26;
  }
  $6 = 5;
  $102 = $6;
  STACKTOP = sp;return ($102|0);
 }
 $27 = $7;
 $28 = (_llvm_stacksave()|0);
 $14 = $28;
 $$alloca_mul = $27<<2;
 $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $30 = $7;
 $31 = $9;
 (_AT_Z_from_particle_no($30,$31,$29)|0);
 $13 = 0;
 while(1) {
  $32 = $13;
  $33 = $7;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $13;
  $36 = (($29) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)>(18);
  do {
   if ($38) {
    $39 = $12;
    $40 = $13;
    $41 = (($39) + ($40<<3)|0);
    HEAPF64[$41>>3] = -1.0;
   } else {
    $42 = $8;
    $43 = $13;
    $44 = (($42) + ($43<<3)|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $45 < 0.025000000000000001;
    if (!($46)) {
     $47 = $8;
     $48 = $13;
     $49 = (($47) + ($48<<3)|0);
     $50 = +HEAPF64[$49>>3];
     $51 = $50 > 1000.0;
     if (!($51)) {
      $55 = $13;
      $56 = (($29) + ($55<<2)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(2);
      if ($58) {
       $59 = $8;
       $60 = $13;
       $61 = (($59) + ($60<<3)|0);
       $62 = +HEAPF64[$61>>3];
       $63 = $62 > 250.0;
       if ($63) {
        $64 = $12;
        $65 = $13;
        $66 = (($64) + ($65<<3)|0);
        HEAPF64[$66>>3] = -1.0;
        break;
       }
      }
      $67 = $10;
      $68 = (($67) - 1)|0;
      $69 = (11536 + (($68*8064)|0)|0);
      $70 = ((($69)) + 8|0);
      $71 = $10;
      $72 = (($71) - 1)|0;
      $73 = (11536 + (($72*8064)|0)|0);
      $74 = ((($73)) + 8|0);
      $75 = $13;
      $76 = (($29) + ($75<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($74) + (($77*424)|0)|0);
      $79 = $10;
      $80 = (($79) - 1)|0;
      $81 = (11536 + (($80*8064)|0)|0);
      $82 = ((($81)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $8;
      $85 = $13;
      $86 = (($84) + ($85<<3)|0);
      $87 = +HEAPF64[$86>>3];
      $88 = (+_AT_get_interpolated_y_from_input_table($70,$78,$83,$87));
      $89 = $12;
      $90 = $13;
      $91 = (($89) + ($90<<3)|0);
      HEAPF64[$91>>3] = $88;
      $92 = $10;
      $93 = ($92|0)==(1);
      if (!($93)) {
       break;
      }
      $94 = $12;
      $95 = $13;
      $96 = (($94) + ($95<<3)|0);
      $97 = +HEAPF64[$96>>3];
      $98 = $97 * 1000.0;
      HEAPF64[$96>>3] = $98;
      break;
     }
    }
    $52 = $12;
    $53 = $13;
    $54 = (($52) + ($53<<3)|0);
    HEAPF64[$54>>3] = -1.0;
   }
  } while(0);
  $99 = $13;
  $100 = (($99) + 1)|0;
  $13 = $100;
 }
 $6 = 0;
 $101 = $14;
 _llvm_stackrestore(($101|0));
 $102 = $6;
 STACKTOP = sp;return ($102|0);
}
function _AT_PSTAR_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp + 272|0;
 $14 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $19 = $10;
 $20 = (71924 + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $13 = $21;
 $22 = $13;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = $10;
  _AT_material_name_from_number($24,$14);
  HEAP32[$vararg_buffer>>2] = $14;
  (_printf(81035,$vararg_buffer)|0);
  $6 = 4;
  $70 = $6;
  STACKTOP = sp;return ($70|0);
 }
 $25 = $13;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((81082|0),(81116|0),1304,(81157|0));
  // unreachable;
 }
 $15 = 132;
 $16 = 0;
 while(1) {
  $27 = $16;
  $28 = $7;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $13;
  $31 = ((($30)) + 8|0);
  $32 = $8;
  $33 = $16;
  $34 = (($32) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = (+_AT_get_interpolated_y_from_input_2d_table($31,132,$35));
  $37 = $12;
  $38 = $16;
  $39 = (($37) + ($38<<3)|0);
  HEAPF64[$39>>3] = $36;
  $40 = $9;
  $41 = $16;
  $42 = (($40) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(1001);
  if ($44) {
   $45 = $8;
   $46 = $16;
   $47 = (($45) + ($46<<3)|0);
   $48 = +HEAPF64[$47>>3];
   $49 = $9;
   $50 = $16;
   $51 = (($49) + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (+_AT_effective_charge_from_E_MeV_u_single($48,$52));
   $17 = $53;
   $54 = $8;
   $55 = $16;
   $56 = (($54) + ($55<<3)|0);
   $57 = +HEAPF64[$56>>3];
   $58 = (+_AT_effective_charge_from_E_MeV_u_single($57,1001));
   $18 = $58;
   $59 = $17;
   $60 = $18;
   $61 = $59 / $60;
   $62 = (+_gsl_pow_2($61));
   $63 = $12;
   $64 = $16;
   $65 = (($63) + ($64<<3)|0);
   $66 = +HEAPF64[$65>>3];
   $67 = $66 * $62;
   HEAPF64[$65>>3] = $67;
  }
  $68 = $16;
  $69 = (($68) + 1)|0;
  $16 = $69;
 }
 $6 = 0;
 $70 = $6;
 STACKTOP = sp;return ($70|0);
}
function _AT_n_bins_for_single_impact_local_dose_distrib($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer = sp + 56|0;
 $22 = sp + 24|0;
 $26 = sp + 72|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = 0.0;
 $19 = 0.0;
 $20 = 0;
 while(1) {
  $27 = $20;
  $28 = $9;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $10;
  $31 = $20;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $12;
  $35 = $15;
  $36 = (+_AT_max_electron_range_m($33,$34,$35));
  $21 = $36;
  $37 = $17;
  $38 = $10;
  $39 = $20;
  $40 = (($38) + ($39<<3)|0);
  $41 = $11;
  $42 = $20;
  $43 = (($41) + ($42<<2)|0);
  $44 = $12;
  (_AT_Mass_Stopping_Power_with_no($37,1,$40,$43,$44,$22)|0);
  $45 = $21;
  $46 = +HEAPF64[$22>>3];
  $47 = $10;
  $48 = $20;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $11;
  $52 = $20;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $12;
  $56 = $13;
  $57 = $14;
  $58 = $15;
  $59 = (+_AT_RDD_precalculated_constant_Gy($45,$46,$50,$54,$55,$56,$57,$58));
  $23 = $59;
  $60 = $10;
  $61 = $20;
  $62 = (($60) + ($61<<3)|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $11;
  $65 = $20;
  $66 = (($64) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $12;
  $69 = $13;
  $70 = $14;
  $71 = $15;
  $72 = $23;
  $73 = (+_AT_RDD_d_min_Gy($63,$67,$68,$69,$70,$71,$72));
  $24 = $73;
  $74 = $10;
  $75 = $20;
  $76 = (($74) + ($75<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $11;
  $79 = $20;
  $80 = (($78) + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $12;
  $83 = $13;
  $84 = $14;
  $85 = $15;
  $86 = $17;
  $87 = (+_AT_RDD_d_max_Gy($77,$81,$82,$83,$84,$85,$86));
  $25 = $87;
  $88 = $20;
  $89 = ($88|0)==(0);
  if ($89) {
   $90 = $24;
   $19 = $90;
   $91 = $25;
   $18 = $91;
  } else {
   $92 = $19;
   $93 = $24;
   $94 = $92 < $93;
   $95 = $19;
   $96 = $24;
   $97 = $94 ? $95 : $96;
   $19 = $97;
   $98 = $18;
   $99 = $25;
   $100 = $98 > $99;
   $101 = $18;
   $102 = $25;
   $103 = $100 ? $101 : $102;
   $18 = $103;
  }
  $104 = $20;
  $105 = (($104) + 1)|0;
  $20 = $105;
 }
 HEAP32[$26>>2] = 0;
 $106 = $19;
 $107 = $106 > 0.0;
 $108 = $18;
 $109 = $108 > 0.0;
 $or$cond = $107 & $109;
 $110 = $19;
 $111 = $18;
 if ($or$cond) {
  $112 = $16;
  $113 = (+($112|0));
  $114 = (+_AT_N2_to_step($113));
  (_AT_histo_n_bins($110,$111,$114,1,$26)|0);
  $115 = HEAP32[$26>>2]|0;
  $116 = (($115) + 1)|0;
  STACKTOP = sp;return ($116|0);
 } else {
  HEAPF64[$vararg_buffer>>3] = $110;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $111;
  (_printf(81174,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 return (0)|0;
}
function _AT_single_impact_local_dose_distrib($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0;
 var $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0;
 var $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer16 = sp + 368|0;
 $vararg_buffer14 = sp + 360|0;
 $vararg_buffer8 = sp + 328|0;
 $vararg_buffer6 = sp + 320|0;
 $vararg_buffer1 = sp + 304|0;
 $vararg_buffer = sp + 296|0;
 $49 = sp + 240|0;
 $51 = sp + 112|0;
 $52 = sp;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $29 = $14;
 $59 = $15;
 $60 = (_calloc($59,8)|0);
 $32 = $60;
 $61 = $18;
 $62 = +HEAPF64[$61>>3];
 $63 = $62 < 0.0;
 L1: do {
  if ($63) {
   $64 = $15;
   $65 = (_calloc($64,8)|0);
   $33 = $65;
   $30 = 0;
   while(1) {
    $66 = $30;
    $67 = $15;
    $68 = ($66|0)<($67|0);
    if (!($68)) {
     break;
    }
    $69 = $18;
    $70 = $30;
    $71 = (($69) + ($70<<3)|0);
    $72 = +HEAPF64[$71>>3];
    $73 = -1.0 * $72;
    $74 = $33;
    $75 = $30;
    $76 = (($74) + ($75<<3)|0);
    HEAPF64[$76>>3] = $73;
    $77 = $30;
    $78 = (($77) + 1)|0;
    $30 = $78;
   }
   $79 = $15;
   $80 = $16;
   $81 = $17;
   $82 = $33;
   $83 = $19;
   $84 = $26;
   $85 = $32;
   _AT_fluence_cm2_from_dose_Gy($79,$80,$81,$82,$83,$84,$85);
   $86 = $33;
   _free($86);
  } else {
   $30 = 0;
   while(1) {
    $87 = $30;
    $88 = $15;
    $89 = ($87|0)<($88|0);
    if (!($89)) {
     break L1;
    }
    $90 = $18;
    $91 = $30;
    $92 = (($90) + ($91<<3)|0);
    $93 = +HEAPF64[$92>>3];
    $94 = $32;
    $95 = $30;
    $96 = (($94) + ($95<<3)|0);
    HEAPF64[$96>>3] = $93;
    $97 = $30;
    $98 = (($97) + 1)|0;
    $30 = $98;
   }
  }
 } while(0);
 $99 = $15;
 $100 = (_calloc($99,8)|0);
 $34 = $100;
 $101 = $15;
 $102 = $32;
 $103 = $34;
 _AT_normalize($101,$102,$103);
 $104 = $32;
 _free($104);
 $105 = $24;
 $106 = ($105|0)>(0);
 L12: do {
  if ($106) {
   $107 = $23;
   $108 = (+($107|0));
   $109 = (+_AT_N2_to_step($108));
   $35 = $109;
   $36 = 1;
   $110 = $25;
   $111 = ((($110)) + 24|0);
   $112 = +HEAPF64[$111>>3];
   $37 = $112;
   $113 = $25;
   $114 = ((($113)) + 32|0);
   $115 = +HEAPF64[$114>>3];
   $38 = $115;
   $30 = 1;
   while(1) {
    $116 = $30;
    $117 = $15;
    $118 = ($116|0)<($117|0);
    if (!($118)) {
     break;
    }
    $119 = $25;
    $120 = $30;
    $121 = $120<<3;
    $122 = (($121) + 3)|0;
    $123 = (($119) + ($122<<3)|0);
    $124 = +HEAPF64[$123>>3];
    $125 = $37;
    $126 = $124 < $125;
    if ($126) {
     $127 = $25;
     $128 = $30;
     $129 = $128<<3;
     $130 = (($129) + 3)|0;
     $131 = (($127) + ($130<<3)|0);
     $132 = +HEAPF64[$131>>3];
     $134 = $132;
    } else {
     $133 = $37;
     $134 = $133;
    }
    $37 = $134;
    $135 = $25;
    $136 = $30;
    $137 = $136<<3;
    $138 = (($137) + 4)|0;
    $139 = (($135) + ($138<<3)|0);
    $140 = +HEAPF64[$139>>3];
    $141 = $38;
    $142 = $140 > $141;
    if ($142) {
     $143 = $25;
     $144 = $30;
     $145 = $144<<3;
     $146 = (($145) + 4)|0;
     $147 = (($143) + ($146<<3)|0);
     $148 = +HEAPF64[$147>>3];
     $150 = $148;
    } else {
     $149 = $38;
     $150 = $149;
    }
    $38 = $150;
    $151 = $30;
    $152 = (($151) + 1)|0;
    $30 = $152;
   }
   $153 = $37;
   $39 = $153;
   $154 = $24;
   $155 = $39;
   $156 = $35;
   $157 = $27;
   (_AT_histo_midpoints($154,$155,$156,1,$157)|0);
   $158 = $24;
   $159 = $39;
   $160 = $35;
   $161 = $28;
   (_AT_histo_bin_widths($158,$159,$160,1,$161)|0);
   $30 = 0;
   while(1) {
    $162 = $30;
    $163 = $24;
    $164 = ($162|0)<($163|0);
    if (!($164)) {
     break;
    }
    $165 = $29;
    $166 = $30;
    $167 = (($165) + ($166<<3)|0);
    HEAPF64[$167>>3] = 0.0;
    $168 = $30;
    $169 = (($168) + 1)|0;
    $30 = $169;
   }
   $40 = 1;
   $30 = 0;
   while(1) {
    $170 = $30;
    $171 = $15;
    $172 = ($170|0)<($171|0);
    if (!($172)) {
     break;
    }
    $173 = $25;
    $174 = $30;
    $175 = $174<<3;
    $176 = (($175) + 3)|0;
    $177 = (($173) + ($176<<3)|0);
    $178 = +HEAPF64[$177>>3];
    $41 = $178;
    $179 = $25;
    $180 = $30;
    $181 = $180<<3;
    $182 = (($181) + 4)|0;
    $183 = (($179) + ($182<<3)|0);
    $184 = +HEAPF64[$183>>3];
    $42 = $184;
    $185 = $24;
    $186 = $39;
    $187 = $35;
    $188 = $41;
    $189 = (_AT_histo_bin_no($185,$186,$187,1,$188)|0);
    $43 = $189;
    $190 = $24;
    $191 = $39;
    $192 = $35;
    $193 = $42;
    $194 = (_AT_histo_bin_no($190,$191,$192,1,$193)|0);
    $44 = $194;
    $195 = $44;
    $196 = $43;
    $197 = (($195) - ($196))|0;
    $198 = (($197) + 1)|0;
    $45 = $198;
    $199 = $45;
    $200 = ($199|0)>(1);
    if ($200) {
     $201 = $45;
     $202 = (($201) + 1)|0;
     $203 = (_calloc($202,8)|0);
     $46 = $203;
     $204 = $45;
     $205 = (($204) + 1)|0;
     $206 = (_calloc($205,8)|0);
     $47 = $206;
     $207 = $45;
     $208 = (($207) + 1)|0;
     $209 = (_calloc($208,8)|0);
     $48 = $209;
     HEAPF64[$49>>3] = 0.0;
     $210 = $24;
     $211 = $39;
     $212 = $35;
     $213 = $43;
     (_AT_histo_left_limit($210,$211,$212,1,$213,$49)|0);
     $214 = $45;
     $215 = (($214) + 1)|0;
     $216 = +HEAPF64[$49>>3];
     $217 = $35;
     $218 = $46;
     (_AT_histo_left_limits($215,$216,$217,1,$218)|0);
     $219 = $45;
     $220 = (($219) - 1)|0;
     $221 = $46;
     $222 = ((($221)) + 8|0);
     $223 = $16;
     $224 = $30;
     $225 = (($223) + ($224<<3)|0);
     $226 = +HEAPF64[$225>>3];
     $227 = $17;
     $228 = $30;
     $229 = (($227) + ($228<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $19;
     $232 = $20;
     $233 = $21;
     $234 = $22;
     $235 = $26;
     $236 = $47;
     $237 = ((($236)) + 8|0);
     $238 = (_AT_r_RDD_m($220,$222,$226,$230,$231,$232,$233,$234,$235,$237)|0);
     $50 = $238;
     $239 = $50;
     $240 = ($239|0)!=(0);
     if ($240) {
      label = 26;
      break;
     }
     $245 = $25;
     $246 = $30;
     $247 = $246<<3;
     $248 = (($247) + 2)|0;
     $249 = (($245) + ($248<<3)|0);
     $250 = +HEAPF64[$249>>3];
     $53 = $250;
     $31 = 1;
     while(1) {
      $251 = $31;
      $252 = $45;
      $253 = ($251|0)<($252|0);
      if (!($253)) {
       break;
      }
      $254 = $47;
      $255 = $31;
      $256 = (($254) + ($255<<3)|0);
      $257 = +HEAPF64[$256>>3];
      $258 = $53;
      $259 = $257 / $258;
      $260 = (+_gsl_pow_2($259));
      $261 = $48;
      $262 = $31;
      $263 = (($261) + ($262<<3)|0);
      HEAPF64[$263>>3] = $260;
      $264 = $31;
      $265 = (($264) + 1)|0;
      $31 = $265;
     }
     $266 = $48;
     HEAPF64[$266>>3] = 1.0;
     $267 = $48;
     $268 = $45;
     $269 = (($267) + ($268<<3)|0);
     HEAPF64[$269>>3] = 0.0;
     $270 = (_fopen(81459,81473)|0);
     $54 = $270;
     $271 = $54;
     (_fprintf($271,81475,$vararg_buffer6)|0);
     $31 = 0;
     while(1) {
      $272 = $31;
      $273 = $45;
      $274 = (($273) + 1)|0;
      $275 = ($272|0)<($274|0);
      $276 = $54;
      if (!($275)) {
       break;
      }
      $277 = $31;
      $278 = $47;
      $279 = $31;
      $280 = (($278) + ($279<<3)|0);
      $281 = +HEAPF64[$280>>3];
      $282 = $46;
      $283 = $31;
      $284 = (($282) + ($283<<3)|0);
      $285 = +HEAPF64[$284>>3];
      $286 = $48;
      $287 = $31;
      $288 = (($286) + ($287<<3)|0);
      $289 = +HEAPF64[$288>>3];
      HEAP32[$vararg_buffer8>>2] = $277;
      $vararg_ptr11 = ((($vararg_buffer8)) + 8|0);
      HEAPF64[$vararg_ptr11>>3] = $281;
      $vararg_ptr12 = ((($vararg_buffer8)) + 16|0);
      HEAPF64[$vararg_ptr12>>3] = $285;
      $vararg_ptr13 = ((($vararg_buffer8)) + 24|0);
      HEAPF64[$vararg_ptr13>>3] = $289;
      (_fprintf($276,81495,$vararg_buffer8)|0);
      $290 = $31;
      $291 = (($290) + 1)|0;
      $31 = $291;
     }
     (_fclose($276)|0);
     $31 = 0;
     while(1) {
      $292 = $31;
      $293 = $45;
      $294 = ($292|0)<($293|0);
      if (!($294)) {
       break;
      }
      $295 = $48;
      $296 = $31;
      $297 = (($295) + ($296<<3)|0);
      $298 = +HEAPF64[$297>>3];
      $299 = $48;
      $300 = $31;
      $301 = (($300) + 1)|0;
      $302 = (($299) + ($301<<3)|0);
      $303 = +HEAPF64[$302>>3];
      $304 = $298 - $303;
      $305 = $46;
      $306 = $31;
      $307 = (($306) + 1)|0;
      $308 = (($305) + ($307<<3)|0);
      $309 = +HEAPF64[$308>>3];
      $310 = $46;
      $311 = $31;
      $312 = (($310) + ($311<<3)|0);
      $313 = +HEAPF64[$312>>3];
      $314 = $309 - $313;
      $315 = $304 / $314;
      $55 = $315;
      $316 = $34;
      $317 = $30;
      $318 = (($316) + ($317<<3)|0);
      $319 = +HEAPF64[$318>>3];
      $320 = $55;
      $321 = $319 * $320;
      $322 = $29;
      $323 = $43;
      $324 = $31;
      $325 = (($323) + ($324))|0;
      $326 = (($322) + ($325<<3)|0);
      $327 = +HEAPF64[$326>>3];
      $328 = $327 + $321;
      HEAPF64[$326>>3] = $328;
      $329 = $31;
      $330 = (($329) + 1)|0;
      $31 = $330;
     }
     $331 = $46;
     _free($331);
     $332 = $47;
     _free($332);
     $333 = $48;
     _free($333);
    } else {
     $334 = $34;
     $335 = $30;
     $336 = (($334) + ($335<<3)|0);
     $337 = +HEAPF64[$336>>3];
     $338 = $337 * 1.0;
     $339 = $28;
     $340 = $43;
     $341 = (($339) + ($340<<3)|0);
     $342 = +HEAPF64[$341>>3];
     $343 = $338 / $342;
     $344 = $29;
     $345 = $43;
     $346 = (($344) + ($345<<3)|0);
     $347 = +HEAPF64[$346>>3];
     $348 = $347 + $343;
     HEAPF64[$346>>3] = $348;
    }
    $349 = $40;
    $350 = $44;
    $351 = ($349|0)>($350|0);
    $352 = $40;
    $353 = $44;
    $354 = $351 ? $352 : $353;
    $40 = $354;
    $355 = $30;
    $356 = (($355) + 1)|0;
    $30 = $356;
   }
   if ((label|0) == 26) {
    (_printf(81320,$vararg_buffer)|0);
    $241 = $20;
    (_AT_RDD_name_from_number($241,$51)|0);
    $242 = $22;
    (_getERName($242,$52)|0);
    $243 = $20;
    $244 = $22;
    HEAP32[$vararg_buffer1>>2] = $243;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $51;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = $244;
    $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
    HEAP32[$vararg_ptr5>>2] = $52;
    (_printf(81418,$vararg_buffer1)|0);
    _exit(1);
    // unreachable;
   }
   $56 = 0.0;
   $30 = 0;
   while(1) {
    $357 = $30;
    $358 = $24;
    $359 = ($357|0)<($358|0);
    if (!($359)) {
     break;
    }
    $360 = $29;
    $361 = $30;
    $362 = (($360) + ($361<<3)|0);
    $363 = +HEAPF64[$362>>3];
    $364 = $28;
    $365 = $30;
    $366 = (($364) + ($365<<3)|0);
    $367 = +HEAPF64[$366>>3];
    $368 = $363 * $367;
    $369 = $56;
    $370 = $369 + $368;
    $56 = $370;
    $371 = $30;
    $372 = (($371) + 1)|0;
    $30 = $372;
   }
   $30 = 0;
   while(1) {
    $373 = $30;
    $374 = $24;
    $375 = ($373|0)<($374|0);
    if (!($375)) {
     break L12;
    }
    $376 = $56;
    $377 = $29;
    $378 = $30;
    $379 = (($377) + ($378<<3)|0);
    $380 = +HEAPF64[$379>>3];
    $381 = $380 / $376;
    HEAPF64[$379>>3] = $381;
    $382 = $30;
    $383 = (($382) + 1)|0;
    $30 = $383;
   }
  }
 } while(0);
 $384 = (_fopen(81518,81473)|0);
 $57 = $384;
 $385 = $57;
 (_fprintf($385,81532,$vararg_buffer14)|0);
 $58 = 0;
 while(1) {
  $386 = $58;
  $387 = $24;
  $388 = ($386|0)<($387|0);
  $389 = $57;
  if (!($388)) {
   break;
  }
  $390 = $58;
  $391 = $27;
  $392 = $58;
  $393 = (($391) + ($392<<3)|0);
  $394 = +HEAPF64[$393>>3];
  $395 = $28;
  $396 = $58;
  $397 = (($395) + ($396<<3)|0);
  $398 = +HEAPF64[$397>>3];
  $399 = $29;
  $400 = $58;
  $401 = (($399) + ($400<<3)|0);
  $402 = +HEAPF64[$401>>3];
  HEAP32[$vararg_buffer16>>2] = $390;
  $vararg_ptr19 = ((($vararg_buffer16)) + 8|0);
  HEAPF64[$vararg_ptr19>>3] = $394;
  $vararg_ptr20 = ((($vararg_buffer16)) + 16|0);
  HEAPF64[$vararg_ptr20>>3] = $398;
  $vararg_ptr21 = ((($vararg_buffer16)) + 24|0);
  HEAPF64[$vararg_ptr21>>3] = $402;
  (_fprintf($389,81554,$vararg_buffer16)|0);
  $403 = $58;
  $404 = (($403) + 1)|0;
  $58 = $404;
 }
 (_fclose($389)|0);
 $405 = $34;
 _free($405);
 STACKTOP = sp;return;
}
function _AT_n_bins_for_low_fluence_local_dose_distribution($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = 0.0;
 $21 = 0;
 while(1) {
  $23 = $21;
  $24 = $13;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $14;
  $27 = $21;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $15;
  $31 = $21;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $29 * $33;
  $35 = $16;
  $36 = $21;
  $37 = (($35) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $34 * $38;
  $40 = $20;
  $41 = $40 + $39;
  $20 = $41;
  $42 = $21;
  $43 = (($42) + 1)|0;
  $21 = $43;
 }
 $44 = $10;
 $45 = $11;
 $46 = $44 * $45;
 $47 = $20;
 $48 = $46 * $47;
 $22 = $48;
 $49 = $19;
 HEAP32[$49>>2] = 0;
 $50 = $22;
 $51 = $20;
 $52 = $50 / $51;
 $53 = $18;
 HEAPF64[$53>>3] = $52;
 while(1) {
  $54 = $18;
  $55 = +HEAPF64[$54>>3];
  $56 = $55 > 0.002;
  if (!($56)) {
   break;
  }
  $57 = $18;
  $58 = +HEAPF64[$57>>3];
  $59 = 0.5 * $58;
  $60 = $18;
  HEAPF64[$60>>3] = $59;
  $61 = $19;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$61>>2] = $63;
 }
 $64 = $19;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + 1)|0;
 $67 = $12;
 $68 = Math_imul($66, $67)|0;
 $69 = $17;
 HEAP32[$69>>2] = $68;
 $70 = $13;
 $71 = $17;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($70))|0;
 HEAP32[$71>>2] = $73;
 STACKTOP = sp;return;
}
function _AT_low_fluence_local_dose_distribution($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $22 = $14;
 $23 = (_calloc($22,8)|0);
 $18 = $23;
 $24 = $14;
 $25 = (_calloc($24,8)|0);
 $19 = $25;
 $26 = (+Math_log(2.0));
 $27 = $10;
 $28 = (+($27|0));
 $29 = $26 / $28;
 $20 = $29;
 $21 = 0;
 while(1) {
  $30 = $21;
  $31 = $14;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $11;
  $34 = +HEAPF64[$33>>3];
  $35 = $21;
  $36 = (+($35|0));
  $37 = $36 - 0.5;
  $38 = $20;
  $39 = $37 * $38;
  $40 = (+Math_exp((+$39)));
  $41 = $34 * $40;
  $42 = $18;
  $43 = $21;
  $44 = (($42) + ($43<<3)|0);
  HEAPF64[$44>>3] = $41;
  $45 = $11;
  $46 = +HEAPF64[$45>>3];
  $47 = $21;
  $48 = (+($47|0));
  $49 = $48 + 0.5;
  $50 = $20;
  $51 = $49 * $50;
  $52 = (+Math_exp((+$51)));
  $53 = $46 * $52;
  $54 = $19;
  $55 = $21;
  $56 = (($54) + ($55<<3)|0);
  HEAPF64[$56>>3] = $53;
  $57 = $21;
  $58 = $9;
  $59 = ($57|0)<($58|0);
  if ($59) {
   $60 = $11;
   $61 = $21;
   $62 = (($60) + ($61<<3)|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $15;
   $65 = $21;
   $66 = (($64) + ($65<<3)|0);
   HEAPF64[$66>>3] = $63;
   $67 = $12;
   $68 = $21;
   $69 = (($67) + ($68<<3)|0);
   $70 = +HEAPF64[$69>>3];
   $71 = $16;
   $72 = $21;
   $73 = (($71) + ($72<<3)|0);
   HEAPF64[$73>>3] = $70;
   $74 = $13;
   $75 = $21;
   $76 = (($74) + ($75<<3)|0);
   $77 = +HEAPF64[$76>>3];
   $78 = $17;
   $79 = $21;
   $80 = (($78) + ($79<<3)|0);
   HEAPF64[$80>>3] = $77;
  } else {
   $81 = $18;
   $82 = $21;
   $83 = (($81) + ($82<<3)|0);
   $84 = +HEAPF64[$83>>3];
   $85 = $19;
   $86 = $21;
   $87 = (($85) + ($86<<3)|0);
   $88 = +HEAPF64[$87>>3];
   $89 = $84 * $88;
   $90 = (+Math_sqrt((+$89)));
   $91 = $15;
   $92 = $21;
   $93 = (($91) + ($92<<3)|0);
   HEAPF64[$93>>3] = $90;
   $94 = $19;
   $95 = $21;
   $96 = (($94) + ($95<<3)|0);
   $97 = +HEAPF64[$96>>3];
   $98 = $18;
   $99 = $21;
   $100 = (($98) + ($99<<3)|0);
   $101 = +HEAPF64[$100>>3];
   $102 = $97 - $101;
   $103 = $16;
   $104 = $21;
   $105 = (($103) + ($104<<3)|0);
   HEAPF64[$105>>3] = $102;
   $106 = $17;
   $107 = $21;
   $108 = (($106) + ($107<<3)|0);
   HEAPF64[$108>>3] = 0.0;
  }
  $109 = $21;
  $110 = (($109) + 1)|0;
  $21 = $110;
 }
 $111 = $18;
 _free($111);
 $112 = $19;
 _free($112);
 STACKTOP = sp;return;
}
function _AT_Kellerer_normalize($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $12;
 $20 = $7;
 $21 = (($19) - ($20))|0;
 $16 = $21;
 $22 = $11;
 $17 = $22;
 $14 = 0;
 while(1) {
  $23 = $14;
  $24 = $10;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $14;
  $27 = $16;
  $28 = (($26) + ($27))|0;
  $15 = $28;
  $29 = $17;
  $30 = $13;
  $31 = $14;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $9;
  $35 = $15;
  $36 = (($34) + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $33 * $37;
  $39 = $29 + $38;
  $17 = $39;
  $40 = $14;
  $41 = (($40) + 1)|0;
  $14 = $41;
 }
 $42 = $11;
 $43 = 1.0 - $42;
 $44 = $17;
 $45 = $11;
 $46 = $44 - $45;
 $47 = $43 / $46;
 $18 = $47;
 $14 = 0;
 while(1) {
  $48 = $14;
  $49 = $10;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $18;
  $52 = $13;
  $53 = $14;
  $54 = (($52) + ($53<<3)|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $55 * $51;
  HEAPF64[$54>>3] = $56;
  $57 = $14;
  $58 = (($57) + 1)|0;
  $14 = $58;
 }
 STACKTOP = sp;return;
}
function _AT_Kellerer_interpolation($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $9;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $9;
 $19 = +HEAPF64[$18>>3];
 $20 = $17 - $19;
 $21 = $10;
 HEAPF64[$21>>3] = $20;
 $22 = $11;
 HEAPF64[$22>>3] = 0.0;
 $23 = $7;
 $24 = $8;
 $25 = ($23|0)<($24|0);
 if (!($25)) {
  ___assert_fail((81576|0),(81593|0),456,(81634|0));
  // unreachable;
 }
 $26 = $9;
 $27 = $7;
 $28 = (($26) + ($27<<3)|0);
 HEAPF64[$28>>3] = 0.0;
 $29 = $6;
 $30 = $8;
 $31 = ($29|0)<($30|0);
 if (!($31)) {
  ___assert_fail((81660|0),(81593|0),460,(81634|0));
  // unreachable;
 }
 $12 = 1;
 while(1) {
  $32 = $12;
  $33 = $6;
  $34 = ($32|0)<=($33|0);
  if (!($34)) {
   break;
  }
  $35 = $7;
  $36 = $12;
  $37 = (($35) + ($36))|0;
  $13 = $37;
  $38 = $10;
  $39 = $13;
  $40 = (($39) - 1)|0;
  $41 = (($38) + ($40<<3)|0);
  HEAPF64[$41>>3] = 0.0;
  $42 = $11;
  $43 = $13;
  $44 = (($43) - 1)|0;
  $45 = (($42) + ($44<<3)|0);
  HEAPF64[$45>>3] = 0.0;
  $46 = $12;
  $47 = (($46) + 1)|0;
  $12 = $47;
 }
 $14 = 2;
 while(1) {
  $48 = $14;
  $49 = $7;
  $50 = ($48|0)<=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $9;
  $52 = $14;
  $53 = (($51) + ($52<<3)|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $9;
  $56 = $14;
  $57 = (($56) - 1)|0;
  $58 = (($57) - 1)|0;
  $59 = (($55) + ($58<<3)|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $54 - $60;
  $62 = 0.5 * $61;
  $63 = $10;
  $64 = $14;
  $65 = (($64) - 1)|0;
  $66 = (($63) + ($65<<3)|0);
  HEAPF64[$66>>3] = $62;
  $67 = $10;
  $68 = $14;
  $69 = (($68) - 1)|0;
  $70 = (($67) + ($69<<3)|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $9;
  $73 = $14;
  $74 = (($73) - 1)|0;
  $75 = (($74) - 1)|0;
  $76 = (($72) + ($75<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $71 + $77;
  $79 = $9;
  $80 = $14;
  $81 = (($80) - 1)|0;
  $82 = (($79) + ($81<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $78 - $83;
  $85 = $11;
  $86 = $14;
  $87 = (($86) - 1)|0;
  $88 = (($85) + ($87<<3)|0);
  HEAPF64[$88>>3] = $84;
  $89 = $14;
  $90 = (($89) + 1)|0;
  $14 = $90;
 }
 STACKTOP = sp;return;
}
function _AT_Kellerer_reset($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $36 = 0, $37 = 0, $38 = 0.0;
 var $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $40 = (+Math_log(2.0));
 $41 = $10;
 $42 = HEAP32[$41>>2]|0;
 $43 = (+($42|0));
 $44 = $40 / $43;
 $20 = $44;
 $45 = $10;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<=(256);
 if (!($47)) {
  $294 = $14;
  $295 = HEAP32[$294>>2]|0;
  $296 = $13;
  HEAP32[$296>>2] = $295;
  $37 = 1;
  while(1) {
   $297 = $37;
   $298 = $11;
   $299 = ($297|0)<=($298|0);
   if (!($299)) {
    break;
   }
   $300 = $37;
   $301 = $13;
   $302 = HEAP32[$301>>2]|0;
   $303 = (($300) + ($302))|0;
   $304 = (+($303|0));
   $38 = $304;
   $305 = $38;
   $306 = $20;
   $307 = $305 * $306;
   $308 = (+Math_exp((+$307)));
   $309 = $15;
   $310 = $308 * $309;
   $311 = $16;
   $312 = $37;
   $313 = (($312) - 1)|0;
   $314 = (($311) + ($313<<3)|0);
   HEAPF64[$314>>3] = $310;
   $315 = $11;
   $316 = (_calloc($315,8)|0);
   $39 = $316;
   $317 = $37;
   $318 = $13;
   $319 = HEAP32[$318>>2]|0;
   $320 = (($317) + ($319))|0;
   $321 = (($320) + 1)|0;
   $322 = (+($321|0));
   $38 = $322;
   $323 = $38;
   $324 = $20;
   $325 = $323 * $324;
   $326 = (+Math_exp((+$325)));
   $327 = $15;
   $328 = $326 * $327;
   $329 = $39;
   $330 = $37;
   $331 = (($330) - 1)|0;
   $332 = (($329) + ($331<<3)|0);
   HEAPF64[$332>>3] = $328;
   $333 = $39;
   $334 = $37;
   $335 = (($334) - 1)|0;
   $336 = (($333) + ($335<<3)|0);
   $337 = +HEAPF64[$336>>3];
   $338 = $16;
   $339 = $37;
   $340 = (($339) - 1)|0;
   $341 = (($338) + ($340<<3)|0);
   $342 = +HEAPF64[$341>>3];
   $343 = $337 - $342;
   $344 = $17;
   $345 = $37;
   $346 = (($345) - 1)|0;
   $347 = (($344) + ($346<<3)|0);
   HEAPF64[$347>>3] = $343;
   $348 = $39;
   _free($348);
   $349 = $37;
   $350 = (($349) + 1)|0;
   $37 = $350;
  }
  STACKTOP = sp;return;
 }
 $48 = $12;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)<=(64);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = (+Math_log(2.0));
 $21 = $51;
 $52 = $10;
 $53 = HEAP32[$52>>2]|0;
 $54 = (+($53|0));
 $22 = $54;
 $55 = $22;
 $56 = (+Math_log((+$55)));
 $57 = $21;
 $58 = $56 / $57;
 $59 = $58 - 0.98999999999999999;
 $60 = (~~(($59)));
 $61 = (+($60|0));
 $62 = $21;
 $63 = $61 * $62;
 $64 = (+Math_exp((+$63)));
 $65 = 0.10000000000000001 + $64;
 $66 = (~~(($65)));
 $67 = $10;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + ($66))|0;
 HEAP32[$67>>2] = $69;
 $70 = $22;
 $71 = $10;
 $72 = HEAP32[$71>>2]|0;
 $73 = (+($72|0));
 $74 = $70 / $73;
 $22 = $74;
 $75 = $21;
 $76 = $10;
 $77 = HEAP32[$76>>2]|0;
 $78 = (+($77|0));
 $79 = $75 / $78;
 $20 = $79;
 $80 = $11;
 $81 = (_calloc($80,8)|0);
 $23 = $81;
 $82 = $11;
 $83 = (_calloc($82,8)|0);
 $24 = $83;
 $84 = $10;
 $85 = HEAP32[$84>>2]|0;
 $86 = $12;
 $87 = HEAP32[$86>>2]|0;
 $88 = $11;
 $89 = $18;
 $90 = $23;
 $91 = $24;
 _AT_Kellerer_interpolation($85,$87,$88,$89,$90,$91);
 $92 = $18;
 $93 = $12;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + ($94<<3)|0);
 HEAPF64[$95>>3] = 0.0;
 $96 = $14;
 $97 = HEAP32[$96>>2]|0;
 $25 = $97;
 $98 = $14;
 $99 = HEAP32[$98>>2]|0;
 $100 = (+($99|0));
 $101 = $22;
 $102 = $100 / $101;
 $103 = (~~(($102)));
 $104 = (($103) + 1)|0;
 $105 = $14;
 HEAP32[$105>>2] = $104;
 $106 = $12;
 $107 = HEAP32[$106>>2]|0;
 $108 = (+($107|0));
 $109 = $22;
 $110 = $108 / $109;
 $111 = (~~(($110)));
 $112 = (($111) - 1)|0;
 $113 = $12;
 HEAP32[$113>>2] = $112;
 $26 = 1;
 while(1) {
  $114 = $26;
  $115 = $12;
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)<=($116|0);
  if (!($117)) {
   break;
  }
  $118 = $12;
  $119 = HEAP32[$118>>2]|0;
  $120 = $26;
  $121 = (($119) - ($120))|0;
  $122 = (($121) + 1)|0;
  $27 = $122;
  $123 = $27;
  $124 = $14;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + ($125))|0;
  $127 = (+($126|0));
  $128 = $22;
  $129 = $127 * $128;
  $130 = $25;
  $131 = (+($130|0));
  $132 = $129 - $131;
  $28 = $132;
  $133 = $28;
  $134 = $133 + 0.5;
  $135 = (~~(($134)));
  $29 = $135;
  $136 = $28;
  $137 = $29;
  $138 = (+($137|0));
  $139 = $136 - $138;
  $30 = $139;
  $140 = $18;
  $141 = $29;
  $142 = (($141) - 1)|0;
  $143 = (($140) + ($142<<3)|0);
  $144 = +HEAPF64[$143>>3];
  $145 = $18;
  $146 = $27;
  $147 = (($146) - 1)|0;
  $148 = (($145) + ($147<<3)|0);
  HEAPF64[$148>>3] = $144;
  $149 = $30;
  $150 = $149 < 0.0;
  $151 = $29;
  $152 = ($151|0)>=(2);
  $or$cond = $150 & $152;
  if ($or$cond) {
   $153 = $18;
   $154 = $29;
   $155 = (($154) - 1)|0;
   $156 = (($155) - 1)|0;
   $157 = (($153) + ($156<<3)|0);
   $158 = +HEAPF64[$157>>3];
   $159 = $30;
   $160 = -1.0 * $159;
   $161 = (+Math_pow((+$158),(+$160)));
   $162 = $18;
   $163 = $29;
   $164 = (($163) - 1)|0;
   $165 = (($162) + ($164<<3)|0);
   $166 = +HEAPF64[$165>>3];
   $167 = $30;
   $168 = 1.0 + $167;
   $169 = (+Math_pow((+$166),(+$168)));
   $170 = $161 * $169;
   $171 = $18;
   $172 = $27;
   $173 = (($172) - 1)|0;
   $174 = (($171) + ($173<<3)|0);
   HEAPF64[$174>>3] = $170;
  }
  $175 = $30;
  $176 = $175 > 0.0;
  if ($176) {
   $177 = $29;
   $178 = $12;
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) - 1)|0;
   $181 = ($177|0)<=($180|0);
   if ($181) {
    $182 = $18;
    $183 = $29;
    $184 = (($183) - 1)|0;
    $185 = (($182) + ($184<<3)|0);
    $186 = +HEAPF64[$185>>3];
    $187 = $30;
    $188 = 1.0 - $187;
    $189 = (+Math_pow((+$186),(+$188)));
    $190 = $18;
    $191 = $29;
    $192 = (($190) + ($191<<3)|0);
    $193 = +HEAPF64[$192>>3];
    $194 = $30;
    $195 = (+Math_pow((+$193),(+$194)));
    $196 = $189 * $195;
    $197 = $18;
    $198 = $27;
    $199 = (($198) - 1)|0;
    $200 = (($197) + ($199<<3)|0);
    HEAPF64[$200>>3] = $196;
   }
  }
  $201 = $26;
  $202 = (($201) + 1)|0;
  $26 = $202;
 }
 $203 = $10;
 $204 = HEAP32[$203>>2]|0;
 $31 = $204;
 while(1) {
  $205 = $31;
  $206 = $11;
  $207 = ($205|0)<=($206|0);
  if (!($207)) {
   break;
  }
  $208 = $31;
  $209 = $10;
  $210 = HEAP32[$209>>2]|0;
  $211 = (($208) - ($210))|0;
  $212 = (+($211|0));
  $213 = $20;
  $214 = $212 * $213;
  $32 = $214;
  $215 = $32;
  $216 = - $215;
  $217 = (+Math_exp((+$216)));
  $218 = 0.5 * $217;
  $219 = 1.0 - $218;
  $220 = (+Math_log((+$219)));
  $221 = -1.0 * $220;
  $222 = $20;
  $223 = $221 / $222;
  $33 = $223;
  $224 = $33;
  $225 = $10;
  $226 = HEAP32[$225>>2]|0;
  $227 = (+($226|0));
  $228 = $224 - $227;
  $229 = $19;
  $230 = $31;
  $231 = (($230) - 1)|0;
  $232 = (($229) + ($231<<3)|0);
  HEAPF64[$232>>3] = $228;
  $233 = $31;
  $234 = (($233) + 1)|0;
  $31 = $234;
 }
 $235 = $14;
 $236 = HEAP32[$235>>2]|0;
 $237 = $13;
 HEAP32[$237>>2] = $236;
 $34 = 1;
 while(1) {
  $238 = $34;
  $239 = $11;
  $240 = ($238|0)<=($239|0);
  if (!($240)) {
   break;
  }
  $241 = $34;
  $242 = $13;
  $243 = HEAP32[$242>>2]|0;
  $244 = (($241) + ($243))|0;
  $245 = (+($244|0));
  $35 = $245;
  $246 = $35;
  $247 = $20;
  $248 = $246 * $247;
  $249 = (+Math_exp((+$248)));
  $250 = $15;
  $251 = $249 * $250;
  $252 = $16;
  $253 = $34;
  $254 = (($253) - 1)|0;
  $255 = (($252) + ($254<<3)|0);
  HEAPF64[$255>>3] = $251;
  $256 = $11;
  $257 = (_calloc($256,8)|0);
  $36 = $257;
  $258 = $34;
  $259 = $13;
  $260 = HEAP32[$259>>2]|0;
  $261 = (($258) + ($260))|0;
  $262 = (($261) + 1)|0;
  $263 = (+($262|0));
  $35 = $263;
  $264 = $35;
  $265 = $20;
  $266 = $264 * $265;
  $267 = (+Math_exp((+$266)));
  $268 = $15;
  $269 = $267 * $268;
  $270 = $36;
  $271 = $34;
  $272 = (($271) - 1)|0;
  $273 = (($270) + ($272<<3)|0);
  HEAPF64[$273>>3] = $269;
  $274 = $36;
  $275 = $34;
  $276 = (($275) - 1)|0;
  $277 = (($274) + ($276<<3)|0);
  $278 = +HEAPF64[$277>>3];
  $279 = $16;
  $280 = $34;
  $281 = (($280) - 1)|0;
  $282 = (($279) + ($281<<3)|0);
  $283 = +HEAPF64[$282>>3];
  $284 = $278 - $283;
  $285 = $17;
  $286 = $34;
  $287 = (($286) - 1)|0;
  $288 = (($285) + ($287<<3)|0);
  HEAPF64[$288>>3] = $284;
  $289 = $36;
  _free($289);
  $290 = $34;
  $291 = (($290) + 1)|0;
  $34 = $291;
 }
 $292 = $23;
 _free($292);
 $293 = $24;
 _free($293);
 STACKTOP = sp;return;
}
function _AT_Kellerer_zero($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = 0.0;
 $28 = $17;
 $29 = HEAP32[$28>>2]|0;
 $30 = $12;
 $31 = (($29) - ($30))|0;
 $21 = $31;
 $22 = 1;
 while(1) {
  $32 = $22;
  $33 = $18;
  $34 = HEAP32[$33>>2]|0;
  $35 = ($32|0)<=($34|0);
  if (!($35)) {
   break;
  }
  $36 = $22;
  $37 = $21;
  $38 = (($36) + ($37))|0;
  $23 = $38;
  $39 = $19;
  $40 = $22;
  $41 = (($40) - 1)|0;
  $42 = (($39) + ($41<<3)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $16;
  $45 = $23;
  $46 = (($45) - 1)|0;
  $47 = (($44) + ($46<<3)|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $43 * $48;
  $50 = $20;
  $51 = $50 + $49;
  $20 = $51;
  $52 = $22;
  $53 = (($52) + 1)|0;
  $22 = $53;
 }
 $54 = $14;
 $55 = 1.0 - $54;
 $56 = $14;
 $57 = 1.0 - $56;
 $58 = $55 * $57;
 $59 = $20;
 $60 = $58 / $59;
 $24 = $60;
 $61 = $24;
 $62 = 2.0 / $61;
 $20 = $62;
 $22 = 1;
 while(1) {
  $63 = $22;
  $64 = $18;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($63|0)<=($65|0);
  if (!($66)) {
   break;
  }
  $67 = $19;
  $68 = $22;
  $69 = (($68) - 1)|0;
  $70 = (($67) + ($69<<3)|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $24;
  $73 = $71 * $72;
  $74 = $19;
  $75 = $22;
  $76 = (($75) - 1)|0;
  $77 = (($74) + ($76<<3)|0);
  HEAPF64[$77>>3] = $73;
  $78 = $22;
  $79 = (($78) + 1)|0;
  $22 = $79;
 }
 $80 = $17;
 $81 = HEAP32[$80>>2]|0;
 $82 = $10;
 $83 = (($81) - ($82))|0;
 $21 = $83;
 $84 = $10;
 $85 = $17;
 HEAP32[$85>>2] = $84;
 $86 = $21;
 $87 = $18;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + ($86))|0;
 HEAP32[$87>>2] = $89;
 $25 = 1;
 while(1) {
  $90 = $25;
  $91 = $18;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)<=($92|0);
  if (!($93)) {
   break;
  }
  $94 = $18;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + 1)|0;
  $97 = $25;
  $98 = (($96) - ($97))|0;
  $26 = $98;
  $99 = $26;
  $100 = $21;
  $101 = (($99) + ($100))|0;
  $27 = $101;
  $102 = $19;
  $103 = $26;
  $104 = (($103) - 1)|0;
  $105 = (($102) + ($104<<3)|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $19;
  $108 = $27;
  $109 = (($108) - 1)|0;
  $110 = (($107) + ($109<<3)|0);
  HEAPF64[$110>>3] = $106;
  $111 = $25;
  $112 = (($111) + 1)|0;
  $25 = $112;
 }
 $22 = 1;
 while(1) {
  $113 = $22;
  $114 = $21;
  $115 = ($113|0)<=($114|0);
  if (!($115)) {
   break;
  }
  $116 = $19;
  $117 = $22;
  $118 = (($117) - 1)|0;
  $119 = (($116) + ($118<<3)|0);
  HEAPF64[$119>>3] = 0.0;
  $120 = $22;
  $121 = (($120) + 1)|0;
  $22 = $121;
 }
 $122 = $14;
 $123 = $122 * 2.0;
 $24 = $123;
 $22 = 1;
 while(1) {
  $124 = $22;
  $125 = $13;
  $126 = ($124|0)<=($125|0);
  if (!($126)) {
   break;
  }
  $127 = $19;
  $128 = $22;
  $129 = (($128) - 1)|0;
  $130 = (($127) + ($129<<3)|0);
  $131 = +HEAPF64[$130>>3];
  $132 = $15;
  $133 = $22;
  $134 = (($133) - 1)|0;
  $135 = (($132) + ($134<<3)|0);
  $136 = +HEAPF64[$135>>3];
  $137 = $24;
  $138 = $136 * $137;
  $139 = $131 + $138;
  $140 = $19;
  $141 = $22;
  $142 = (($141) - 1)|0;
  $143 = (($140) + ($142<<3)|0);
  HEAPF64[$143>>3] = $139;
  $144 = $22;
  $145 = (($144) + 1)|0;
  $22 = $145;
 }
 STACKTOP = sp;return;
}
function _AT_Kellerer_shrink($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $23 = $9;
 $14 = $23;
 $15 = 0.0;
 $24 = $11;
 $25 = HEAP32[$24>>2]|0;
 $26 = $8;
 $27 = (($25) - ($26))|0;
 $16 = $27;
 $17 = 1;
 while(1) {
  $28 = $17;
  $29 = $12;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)<=($30|0);
  if (!($31)) {
   break;
  }
  $32 = $17;
  $33 = $16;
  $34 = (($32) + ($33))|0;
  $18 = $34;
  $35 = $15;
  $36 = $13;
  $37 = $17;
  $38 = (($37) - 1)|0;
  $39 = (($36) + ($38<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $10;
  $42 = $18;
  $43 = (($42) - 1)|0;
  $44 = (($41) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $40 * $45;
  $47 = $35 + $46;
  $15 = $47;
  $48 = $15;
  $49 = $14;
  $50 = 1000.0 * $49;
  $51 = $48 > $50;
  if ($51) {
   label = 4;
   break;
  }
  $58 = $17;
  $59 = (($58) + 1)|0;
  $17 = $59;
 }
 if ((label|0) == 4) {
  $52 = $11;
  $53 = HEAP32[$52>>2]|0;
  $54 = $17;
  $55 = (($53) + ($54))|0;
  $56 = (($55) - 1)|0;
  $57 = $11;
  HEAP32[$57>>2] = $56;
 }
 $60 = $17;
 $61 = (($60) - 1)|0;
 $19 = $61;
 $15 = 0.0;
 $20 = 1;
 while(1) {
  $62 = $20;
  $63 = $12;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($62|0)<=($64|0);
  if (!($65)) {
   break;
  }
  $66 = $12;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 1)|0;
  $69 = $20;
  $70 = (($68) - ($69))|0;
  $17 = $70;
  $71 = $17;
  $72 = $16;
  $73 = (($71) + ($72))|0;
  $21 = $73;
  $74 = $15;
  $75 = $13;
  $76 = $17;
  $77 = (($76) - 1)|0;
  $78 = (($75) + ($77<<3)|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $10;
  $81 = $21;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<3)|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $79 * $84;
  $86 = $74 + $85;
  $15 = $86;
  $87 = $15;
  $88 = $14;
  $89 = $87 > $88;
  if ($89) {
   break;
  }
  $90 = $20;
  $91 = (($90) + 1)|0;
  $20 = $91;
 }
 $92 = $17;
 $93 = $19;
 $94 = (($92) - ($93))|0;
 $95 = $12;
 HEAP32[$95>>2] = $94;
 $17 = 1;
 while(1) {
  $96 = $17;
  $97 = $12;
  $98 = HEAP32[$97>>2]|0;
  $99 = ($96|0)<=($98|0);
  if (!($99)) {
   break;
  }
  $100 = $17;
  $101 = $19;
  $102 = (($100) + ($101))|0;
  $20 = $102;
  $103 = $13;
  $104 = $20;
  $105 = (($104) - 1)|0;
  $106 = (($103) + ($105<<3)|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $13;
  $109 = $17;
  $110 = (($109) - 1)|0;
  $111 = (($108) + ($110<<3)|0);
  HEAPF64[$111>>3] = $107;
  $112 = $17;
  $113 = (($112) + 1)|0;
  $17 = $113;
 }
 $114 = $12;
 $115 = HEAP32[$114>>2]|0;
 $116 = (($115) + 1)|0;
 $20 = $116;
 $117 = $12;
 $118 = HEAP32[$117>>2]|0;
 $119 = $19;
 $120 = (($118) + ($119))|0;
 $22 = $120;
 $121 = $20;
 $17 = $121;
 while(1) {
  $122 = $17;
  $123 = $22;
  $124 = ($122|0)<=($123|0);
  if (!($124)) {
   break;
  }
  $125 = $13;
  $126 = $17;
  $127 = (($126) - 1)|0;
  $128 = (($125) + ($127<<3)|0);
  HEAPF64[$128>>3] = 0.0;
  $129 = $17;
  $130 = (($129) + 1)|0;
  $17 = $130;
 }
 STACKTOP = sp;return;
}
function _AT_Kellerer_folding($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0;
 var $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $18 = 0, $19 = 0, $20 = 0.0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $38 = $19;
 $39 = $14;
 $40 = (($38) + ($39))|0;
 $41 = $23;
 HEAP32[$41>>2] = $40;
 $42 = $18;
 $43 = $22;
 HEAP32[$43>>2] = $42;
 $44 = $18;
 $26 = $44;
 while(1) {
  $45 = $26;
  $46 = $18;
  $47 = $14;
  $48 = (($46) + ($47))|0;
  $49 = ($45|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $21;
  $51 = $26;
  $52 = (($50) + ($51<<3)|0);
  HEAPF64[$52>>3] = 0.0;
  $53 = $26;
  $54 = (($53) + 1)|0;
  $26 = $54;
 }
 $55 = $13;
 $56 = (_calloc($55,8)|0);
 $31 = $56;
 $57 = $13;
 $58 = (_calloc($57,8)|0);
 $32 = $58;
 $59 = $14;
 $60 = $18;
 $61 = $13;
 $62 = $21;
 $63 = $31;
 $64 = $32;
 _AT_Kellerer_interpolation($59,$60,$61,$62,$63,$64);
 $65 = $19;
 $66 = $16;
 $67 = (($65) - ($66))|0;
 $33 = $67;
 $68 = $13;
 $69 = (_calloc($68,8)|0);
 $34 = $69;
 $26 = 0;
 while(1) {
  $70 = $26;
  $71 = $22;
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = $26;
  $75 = $33;
  $76 = (($74) + ($75))|0;
  $27 = $76;
  $77 = $21;
  $78 = $26;
  $79 = (($77) + ($78<<3)|0);
  $80 = +HEAPF64[$79>>3];
  $81 = $17;
  $82 = $27;
  $83 = (($81) + ($82<<3)|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $80 * $84;
  $86 = $34;
  $87 = $26;
  $88 = (($86) + ($87<<3)|0);
  HEAPF64[$88>>3] = $85;
  $89 = $26;
  $90 = (($89) + 1)|0;
  $26 = $90;
 }
 $26 = 0;
 while(1) {
  $91 = $26;
  $92 = $22;
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)<($93|0);
  if (!($94)) {
   break;
  }
  $36 = 0.0;
  $95 = $26;
  $96 = $14;
  $97 = (($95) + ($96))|0;
  $37 = $97;
  $27 = 0;
  while(1) {
   $98 = $27;
   $99 = $26;
   $100 = ($98|0)<=($99|0);
   if (!($100)) {
    break;
   }
   $101 = $26;
   $102 = (+($101|0));
   $103 = $15;
   $104 = $37;
   $105 = $27;
   $106 = (($104) - ($105))|0;
   $107 = (($106) - 1)|0;
   $108 = (($103) + ($107<<3)|0);
   $109 = +HEAPF64[$108>>3];
   $110 = $102 - $109;
   $29 = $110;
   $111 = $29;
   $112 = $111 + 0.5;
   $113 = (~~(($112)));
   $28 = $113;
   $114 = $29;
   $115 = $28;
   $116 = (+($115|0));
   $117 = $114 - $116;
   $30 = $117;
   $118 = $21;
   $119 = $28;
   $120 = (($118) + ($119<<3)|0);
   $121 = +HEAPF64[$120>>3];
   $122 = $30;
   $123 = $31;
   $124 = $28;
   $125 = (($123) + ($124<<3)|0);
   $126 = +HEAPF64[$125>>3];
   $127 = $30;
   $128 = $32;
   $129 = $28;
   $130 = (($128) + ($129<<3)|0);
   $131 = +HEAPF64[$130>>3];
   $132 = $127 * $131;
   $133 = $126 + $132;
   $134 = $122 * $133;
   $135 = $121 + $134;
   $35 = $135;
   $136 = $35;
   $137 = $136 < 0.0;
   if ($137) {
    $35 = 0.0;
   }
   $138 = $34;
   $139 = $27;
   $140 = (($138) + ($139<<3)|0);
   $141 = +HEAPF64[$140>>3];
   $142 = $35;
   $143 = $141 * $142;
   $144 = $36;
   $145 = $144 + $143;
   $36 = $145;
   $146 = $27;
   $147 = (($146) + 1)|0;
   $27 = $147;
  }
  $148 = $36;
  $149 = $34;
  $150 = $26;
  $151 = (($149) + ($150<<3)|0);
  $152 = +HEAPF64[$151>>3];
  $153 = $21;
  $154 = $26;
  $155 = (($153) + ($154<<3)|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $152 * $156;
  $158 = $157 * 0.5;
  $159 = $148 - $158;
  $160 = $25;
  $161 = $26;
  $162 = (($160) + ($161<<3)|0);
  HEAPF64[$162>>3] = $159;
  $163 = $26;
  $164 = (($163) + 1)|0;
  $26 = $164;
 }
 $165 = $34;
 _free($165);
 $166 = $31;
 _free($166);
 $167 = $32;
 _free($167);
 $168 = $20;
 $169 = $20;
 $170 = $168 * $169;
 $171 = $24;
 HEAPF64[$171>>3] = $170;
 STACKTOP = sp;return;
}
function _AT_SuccessiveConvolutions($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = +$13;
 $14 = $14|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0;
 var $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0;
 var $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0;
 var $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0;
 var $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer18 = sp + 160|0;
 $vararg_buffer12 = sp + 128|0;
 $vararg_buffer6 = sp + 96|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 56|0;
 $35 = sp + 244|0;
 $36 = sp + 240|0;
 $38 = sp + 24|0;
 $39 = sp + 232|0;
 $48 = sp + 208|0;
 $49 = sp + 204|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $53 = $11&1;
 $26 = $53;
 $54 = $12&1;
 $27 = $54;
 $28 = $13;
 $55 = $14&1;
 $29 = $55;
 $32 = 0;
 $56 = $26;
 $57 = $56&1;
 do {
  if ($57) {
   $58 = (_fopen(81676,81473)|0);
   $32 = $58;
   $59 = $32;
   $60 = ($59|0)==(0|0);
   if ($60) {
    STACKTOP = sp;return;
   } else {
    $61 = $32;
    (_fprintf($61,81695,$vararg_buffer)|0);
    break;
   }
  }
 } while(0);
 $33 = 0;
 $62 = $15;
 $34 = $62;
 while(1) {
  $63 = $34;
  $64 = $63 > 0.002;
  if (!($64)) {
   break;
  }
  $65 = $34;
  $66 = $65 / 2.0;
  $34 = $66;
  $67 = $33;
  $68 = (($67) + 1)|0;
  $33 = $68;
 }
 HEAP32[$35>>2] = 0;
 $69 = $18;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$36>>2] = $70;
 $71 = $16;
 $72 = (_calloc($71,8)|0);
 $37 = $72;
 HEAPF64[$38>>3] = 0.0;
 $73 = $37;
 $74 = $21;
 $75 = HEAP32[$36>>2]|0;
 $76 = $75<<3;
 _memcpy(($73|0),($74|0),($76|0))|0;
 HEAP32[$39>>2] = 0;
 $77 = $16;
 $40 = $77;
 $78 = $19;
 $79 = +HEAPF64[$78>>3];
 $80 = (+Math_log(2.0));
 $81 = -1.0 * $80;
 $82 = $17;
 $83 = HEAP32[$82>>2]|0;
 $84 = (+($83|0));
 $85 = $81 / $84;
 $86 = (+Math_exp((+$85)));
 $87 = $79 * $86;
 $41 = $87;
 $88 = $16;
 $89 = (_calloc($88,8)|0);
 $42 = $89;
 $90 = $16;
 $91 = (_calloc($90,8)|0);
 $43 = $91;
 $92 = $42;
 $93 = $19;
 $94 = $40;
 $95 = $94<<3;
 _memcpy(($92|0),($93|0),($95|0))|0;
 $96 = $43;
 $97 = $20;
 $98 = $40;
 $99 = $98<<3;
 _memcpy(($96|0),($97|0),($99|0))|0;
 $100 = HEAP32[$39>>2]|0;
 $101 = $42;
 $102 = $43;
 $103 = HEAP32[$36>>2]|0;
 $104 = +HEAPF64[$38>>3];
 $105 = HEAP32[$35>>2]|0;
 $106 = $37;
 _AT_Kellerer_normalize($100,$101,$102,$103,$104,$105,$106);
 $107 = $27;
 $108 = $107&1;
 if ($108) {
  $109 = $16;
  $110 = HEAP32[$39>>2]|0;
  $111 = $28;
  $112 = $43;
  $113 = $37;
  _AT_Kellerer_shrink($109,$110,$111,$112,$35,$36,$113);
 }
 $114 = $34;
 $115 = 1.0 - $114;
 HEAPF64[$38>>3] = $115;
 $30 = 0;
 while(1) {
  $116 = $30;
  $117 = HEAP32[$36>>2]|0;
  $118 = ($116|0)<($117|0);
  if (!($118)) {
   break;
  }
  $119 = $34;
  $120 = $37;
  $121 = $30;
  $122 = (($120) + ($121<<3)|0);
  $123 = +HEAPF64[$122>>3];
  $124 = $123 * $119;
  HEAPF64[$122>>3] = $124;
  $125 = $30;
  $126 = (($125) + 1)|0;
  $30 = $126;
 }
 $127 = $16;
 $128 = (_calloc($127,8)|0);
 $44 = $128;
 $129 = $17;
 $130 = HEAP32[$129>>2]|0;
 $30 = $130;
 while(1) {
  $131 = $30;
  $132 = $16;
  $133 = ($131|0)<=($132|0);
  if (!($133)) {
   break;
  }
  $134 = $30;
  $135 = $17;
  $136 = HEAP32[$135>>2]|0;
  $137 = (($134) - ($136))|0;
  $138 = (+($137|0));
  $139 = (+Math_log(2.0));
  $140 = $138 * $139;
  $141 = $17;
  $142 = HEAP32[$141>>2]|0;
  $143 = (+($142|0));
  $144 = $140 / $143;
  $45 = $144;
  $145 = $45;
  $146 = - $145;
  $147 = (+Math_exp((+$146)));
  $148 = 0.5 * $147;
  $149 = 1.0 - $148;
  $150 = (+Math_log((+$149)));
  $151 = -1.0 * $150;
  $152 = (+Math_log(2.0));
  $153 = $17;
  $154 = HEAP32[$153>>2]|0;
  $155 = (+($154|0));
  $156 = $152 / $155;
  $157 = $151 / $156;
  $45 = $157;
  $158 = $45;
  $159 = $17;
  $160 = HEAP32[$159>>2]|0;
  $161 = (+($160|0));
  $162 = $158 - $161;
  $163 = $44;
  $164 = $30;
  $165 = (($164) - 1)|0;
  $166 = (($163) + ($165<<3)|0);
  HEAPF64[$166>>3] = $162;
  $167 = $30;
  $168 = (($167) + 1)|0;
  $30 = $168;
 }
 $169 = $26;
 $170 = $169&1;
 L22: do {
  if ($170) {
   $171 = $32;
   $172 = +HEAPF64[$38>>3];
   HEAP32[$vararg_buffer1>>2] = 0;
   $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
   HEAPF64[$vararg_ptr3>>3] = 0.0;
   $vararg_ptr4 = ((($vararg_buffer1)) + 16|0);
   HEAPF64[$vararg_ptr4>>3] = 0.0;
   $vararg_ptr5 = ((($vararg_buffer1)) + 24|0);
   HEAPF64[$vararg_ptr5>>3] = $172;
   (_fprintf($171,81726,$vararg_buffer1)|0);
   $31 = 0;
   while(1) {
    $173 = $31;
    $174 = HEAP32[$36>>2]|0;
    $175 = ($173|0)<($174|0);
    if (!($175)) {
     break L22;
    }
    $176 = $32;
    $177 = $42;
    $178 = $31;
    $179 = (($177) + ($178<<3)|0);
    $180 = +HEAPF64[$179>>3];
    $181 = $43;
    $182 = $31;
    $183 = (($181) + ($182<<3)|0);
    $184 = +HEAPF64[$183>>3];
    $185 = $37;
    $186 = $31;
    $187 = (($185) + ($186<<3)|0);
    $188 = +HEAPF64[$187>>3];
    HEAP32[$vararg_buffer6>>2] = 0;
    $vararg_ptr9 = ((($vararg_buffer6)) + 8|0);
    HEAPF64[$vararg_ptr9>>3] = $180;
    $vararg_ptr10 = ((($vararg_buffer6)) + 16|0);
    HEAPF64[$vararg_ptr10>>3] = $184;
    $vararg_ptr11 = ((($vararg_buffer6)) + 24|0);
    HEAPF64[$vararg_ptr11>>3] = $188;
    (_fprintf($176,81726,$vararg_buffer6)|0);
    $189 = $31;
    $190 = (($189) + 1)|0;
    $31 = $190;
   }
  }
 } while(0);
 $191 = $16;
 $192 = (_calloc($191,8)|0);
 $46 = $192;
 $47 = 0.0;
 HEAP32[$48>>2] = 0;
 HEAP32[$49>>2] = 0;
 $30 = 0;
 while(1) {
  $193 = $30;
  $194 = $33;
  $195 = ($193|0)<($194|0);
  if (!($195)) {
   break;
  }
  $196 = $34;
  $197 = $196 * 2.0;
  $34 = $197;
  $198 = +HEAPF64[$38>>3];
  $47 = $198;
  $199 = HEAP32[$36>>2]|0;
  HEAP32[$49>>2] = $199;
  $200 = HEAP32[$35>>2]|0;
  HEAP32[$48>>2] = $200;
  $201 = $46;
  $202 = $37;
  $203 = HEAP32[$36>>2]|0;
  $204 = $203<<3;
  _memcpy(($201|0),($202|0),($204|0))|0;
  $205 = $34;
  $206 = $205 >= 10.0;
  if ($206) {
   $207 = $29;
   $208 = $207&1;
   $209 = $208&1;
   $210 = ($209|0)==(1);
   if ($210) {
    $211 = $17;
    $212 = $16;
    $213 = $41;
    $214 = $42;
    $215 = $43;
    $216 = $46;
    $217 = $44;
    _AT_Kellerer_reset($211,$212,$49,$39,$48,$213,$214,$215,$216,$217);
   }
  }
  $218 = $16;
  $219 = $17;
  $220 = HEAP32[$219>>2]|0;
  $221 = $44;
  $222 = HEAP32[$39>>2]|0;
  $223 = $43;
  $224 = HEAP32[$49>>2]|0;
  $225 = HEAP32[$48>>2]|0;
  $226 = $47;
  $227 = $46;
  $228 = $37;
  _AT_Kellerer_folding($218,$220,$221,$222,$223,$224,$225,$226,$227,$36,$35,$38,$228);
  $229 = $47;
  $230 = $229 >= 1.0E-10;
  if ($230) {
   $231 = HEAP32[$48>>2]|0;
   $232 = $16;
   $233 = HEAP32[$39>>2]|0;
   $234 = HEAP32[$49>>2]|0;
   $235 = $47;
   $236 = $46;
   $237 = $43;
   $238 = $37;
   _AT_Kellerer_zero($231,$232,$233,$234,$235,$236,$237,$35,$36,$238);
  }
  $239 = $27;
  $240 = $239&1;
  if ($240) {
   $241 = $16;
   $242 = HEAP32[$39>>2]|0;
   $243 = $28;
   $244 = $43;
   $245 = $37;
   _AT_Kellerer_shrink($241,$242,$243,$244,$35,$36,$245);
  }
  $246 = HEAP32[$39>>2]|0;
  $247 = $42;
  $248 = $43;
  $249 = HEAP32[$36>>2]|0;
  $250 = +HEAPF64[$38>>3];
  $251 = HEAP32[$35>>2]|0;
  $252 = $37;
  _AT_Kellerer_normalize($246,$247,$248,$249,$250,$251,$252);
  $253 = $26;
  $254 = $253&1;
  L41: do {
   if ($254) {
    $255 = $32;
    $256 = $30;
    $257 = (($256) + 1)|0;
    $258 = +HEAPF64[$38>>3];
    HEAP32[$vararg_buffer12>>2] = $257;
    $vararg_ptr15 = ((($vararg_buffer12)) + 8|0);
    HEAPF64[$vararg_ptr15>>3] = 0.0;
    $vararg_ptr16 = ((($vararg_buffer12)) + 16|0);
    HEAPF64[$vararg_ptr16>>3] = 1.0;
    $vararg_ptr17 = ((($vararg_buffer12)) + 24|0);
    HEAPF64[$vararg_ptr17>>3] = $258;
    (_fprintf($255,81742,$vararg_buffer12)|0);
    $31 = 0;
    while(1) {
     $259 = $31;
     $260 = HEAP32[$36>>2]|0;
     $261 = ($259|0)<($260|0);
     if (!($261)) {
      break L41;
     }
     $262 = HEAP32[$35>>2]|0;
     $263 = HEAP32[$39>>2]|0;
     $264 = (($262) - ($263))|0;
     $50 = $264;
     $265 = $32;
     $266 = $30;
     $267 = (($266) + 1)|0;
     $268 = $42;
     $269 = $31;
     $270 = $50;
     $271 = (($269) + ($270))|0;
     $272 = (($268) + ($271<<3)|0);
     $273 = +HEAPF64[$272>>3];
     $274 = $43;
     $275 = $31;
     $276 = $50;
     $277 = (($275) + ($276))|0;
     $278 = (($274) + ($277<<3)|0);
     $279 = +HEAPF64[$278>>3];
     $280 = $37;
     $281 = $31;
     $282 = (($280) + ($281<<3)|0);
     $283 = +HEAPF64[$282>>3];
     HEAP32[$vararg_buffer18>>2] = $267;
     $vararg_ptr21 = ((($vararg_buffer18)) + 8|0);
     HEAPF64[$vararg_ptr21>>3] = $273;
     $vararg_ptr22 = ((($vararg_buffer18)) + 16|0);
     HEAPF64[$vararg_ptr22>>3] = $279;
     $vararg_ptr23 = ((($vararg_buffer18)) + 24|0);
     HEAPF64[$vararg_ptr23>>3] = $283;
     (_fprintf($265,81742,$vararg_buffer18)|0);
     $284 = $31;
     $285 = (($284) + 1)|0;
     $31 = $285;
    }
   }
  } while(0);
  $286 = $30;
  $287 = (($286) + 1)|0;
  $30 = $287;
 }
 $288 = $25;
 HEAPF64[$288>>3] = 0.0;
 $30 = 0;
 while(1) {
  $289 = $30;
  $290 = $16;
  $291 = ($289|0)<($290|0);
  if (!($291)) {
   break;
  }
  $292 = $19;
  $293 = $30;
  $294 = (($292) + ($293<<3)|0);
  HEAPF64[$294>>3] = 0.0;
  $295 = $20;
  $296 = $30;
  $297 = (($295) + ($296<<3)|0);
  HEAPF64[$297>>3] = 0.0;
  $298 = $21;
  $299 = $30;
  $300 = (($298) + ($299<<3)|0);
  HEAPF64[$300>>3] = 0.0;
  $301 = $23;
  $302 = $30;
  $303 = (($301) + ($302<<3)|0);
  HEAPF64[$303>>3] = 0.0;
  $304 = $24;
  $305 = $30;
  $306 = (($304) + ($305<<3)|0);
  HEAPF64[$306>>3] = 0.0;
  $307 = $30;
  $308 = (($307) + 1)|0;
  $30 = $308;
 }
 $309 = HEAP32[$35>>2]|0;
 $310 = HEAP32[$39>>2]|0;
 $311 = (($309) - ($310))|0;
 $51 = $311;
 $30 = 0;
 while(1) {
  $312 = $30;
  $313 = HEAP32[$36>>2]|0;
  $314 = ($312|0)<($313|0);
  if (!($314)) {
   break;
  }
  $315 = $30;
  $316 = $51;
  $317 = (($315) + ($316))|0;
  $52 = $317;
  $318 = $42;
  $319 = $52;
  $320 = (($318) + ($319<<3)|0);
  $321 = +HEAPF64[$320>>3];
  $322 = $19;
  $323 = $30;
  $324 = (($322) + ($323<<3)|0);
  HEAPF64[$324>>3] = $321;
  $325 = $43;
  $326 = $52;
  $327 = (($325) + ($326<<3)|0);
  $328 = +HEAPF64[$327>>3];
  $329 = $20;
  $330 = $30;
  $331 = (($329) + ($330<<3)|0);
  HEAPF64[$331>>3] = $328;
  $332 = $37;
  $333 = $30;
  $334 = (($332) + ($333<<3)|0);
  $335 = +HEAPF64[$334>>3];
  $336 = $21;
  $337 = $30;
  $338 = (($336) + ($337<<3)|0);
  HEAPF64[$338>>3] = $335;
  $339 = $21;
  $340 = $30;
  $341 = (($339) + ($340<<3)|0);
  $342 = +HEAPF64[$341>>3];
  $343 = $20;
  $344 = $30;
  $345 = (($343) + ($344<<3)|0);
  $346 = +HEAPF64[$345>>3];
  $347 = $342 * $346;
  $348 = $23;
  $349 = $30;
  $350 = (($348) + ($349<<3)|0);
  HEAPF64[$350>>3] = $347;
  $351 = $23;
  $352 = $30;
  $353 = (($351) + ($352<<3)|0);
  $354 = +HEAPF64[$353>>3];
  $355 = $19;
  $356 = $30;
  $357 = (($355) + ($356<<3)|0);
  $358 = +HEAPF64[$357>>3];
  $359 = $354 * $358;
  $360 = $24;
  $361 = $30;
  $362 = (($360) + ($361<<3)|0);
  HEAPF64[$362>>3] = $359;
  $363 = $24;
  $364 = $30;
  $365 = (($363) + ($364<<3)|0);
  $366 = +HEAPF64[$365>>3];
  $367 = $25;
  $368 = +HEAPF64[$367>>3];
  $369 = $368 + $366;
  HEAPF64[$367>>3] = $369;
  $370 = $30;
  $371 = (($370) + 1)|0;
  $30 = $371;
 }
 $372 = HEAP32[$36>>2]|0;
 $373 = $18;
 HEAP32[$373>>2] = $372;
 $374 = +HEAPF64[$38>>3];
 $375 = $22;
 HEAPF64[$375>>3] = $374;
 $376 = $46;
 _free($376);
 $377 = $37;
 _free($377);
 $378 = $42;
 _free($378);
 $379 = $43;
 _free($379);
 $380 = $44;
 _free($380);
 $381 = $26;
 $382 = $381&1;
 if (!($382)) {
  STACKTOP = sp;return;
 }
 $383 = $32;
 (_fclose($383)|0);
 STACKTOP = sp;return;
}
function _AT_n_bins_for_DSB_distribution($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0.0;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  $18 = $13;
  if (!($17)) {
   break;
  }
  $19 = $8;
  $20 = $14;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $11;
  $24 = $14;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $22 * $26;
  $28 = $12;
  $29 = $27 * $28;
  $30 = $18 > $29;
  if ($30) {
   $31 = $13;
   $43 = $31;
  } else {
   $32 = $8;
   $33 = $14;
   $34 = (($32) + ($33<<3)|0);
   $35 = +HEAPF64[$34>>3];
   $36 = $11;
   $37 = $14;
   $38 = (($36) + ($37<<3)|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $35 * $39;
   $41 = $12;
   $42 = $40 * $41;
   $43 = $42;
  }
  $13 = $43;
  $44 = $14;
  $45 = (($44) + 1)|0;
  $14 = $45;
 }
 $46 = (___DOUBLE_BITS($18)|0);
 $47 = (getTempRet0() | 0);
 $48 = $47 & 2147483647;
 $49 = ($48>>>0)>(2146435072);
 $50 = ($46>>>0)>(0);
 $51 = ($48|0)==(2146435072);
 $52 = $51 & $50;
 $53 = $49 | $52;
 if ($53) {
  $6 = 0;
  $67 = $6;
  STACKTOP = sp;return ($67|0);
 } else {
  $54 = $13;
  $55 = (+Math_floor((+$54)));
  $56 = $55 + 1.0;
  $13 = $56;
  $57 = $13;
  $58 = (+Math_sqrt((+$57)));
  $59 = 5.0 * $58;
  $60 = (+Math_floor((+$59)));
  $61 = $60 + 1.0;
  $62 = $13;
  $63 = $62 + $61;
  $13 = $63;
  $64 = $13;
  $65 = (~~(($64)));
  $66 = (($65) + 1)|0;
  $6 = $66;
  $67 = $6;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAPF64[$2>>3] = $3;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 setTempRet0(($9) | 0);
 STACKTOP = sp;return ($6|0);
}
function _AT_get_DSB_distribution($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0;
 var $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0;
 var $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $32 = $14;
 $33 = (_calloc($32,8)|0);
 $28 = $33;
 $29 = 0;
 while(1) {
  $34 = $29;
  $35 = $14;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $15;
  $38 = $29;
  $39 = (($37) + ($38<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $18;
  $42 = $29;
  $43 = (($41) + ($42<<3)|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $40 * $44;
  $46 = $19;
  $47 = $45 * $46;
  $48 = $28;
  $49 = $29;
  $50 = (($48) + ($49<<3)|0);
  HEAPF64[$50>>3] = $47;
  $51 = $29;
  $52 = (($51) + 1)|0;
  $29 = $52;
 }
 $53 = $23;
 HEAPF64[$53>>3] = 0.0;
 $54 = $24;
 HEAPF64[$54>>3] = 0.0;
 $55 = $25;
 HEAPF64[$55>>3] = 0.0;
 $56 = $26;
 HEAPF64[$56>>3] = 0.0;
 $57 = $27;
 HEAPF64[$57>>3] = 0.0;
 $30 = 0;
 while(1) {
  $58 = $30;
  $59 = $21;
  $60 = ($58|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = $22;
  $62 = $30;
  $63 = (($61) + ($62<<3)|0);
  HEAPF64[$63>>3] = 0.0;
  $31 = 0;
  while(1) {
   $64 = $31;
   $65 = $14;
   $66 = ($64|0)<($65|0);
   if (!($66)) {
    break;
   }
   $67 = $18;
   $68 = $31;
   $69 = (($67) + ($68<<3)|0);
   $70 = +HEAPF64[$69>>3];
   $71 = (___DOUBLE_BITS($70)|0);
   $72 = (getTempRet0() | 0);
   $73 = $72 & 2147483647;
   $74 = ($73>>>0)>(2146435072);
   $75 = ($71>>>0)>(0);
   $76 = ($73|0)==(2146435072);
   $77 = $76 & $75;
   $78 = $74 | $77;
   if ($78) {
    label = 9;
    break;
   }
   $82 = $28;
   $83 = $31;
   $84 = (($82) + ($83<<3)|0);
   $85 = +HEAPF64[$84>>3];
   $86 = $85 > 0.0;
   $87 = $30;
   if ($86) {
    $88 = $28;
    $89 = $31;
    $90 = (($88) + ($89<<3)|0);
    $91 = +HEAPF64[$90>>3];
    $92 = (+_gsl_ran_poisson_pdf($87,$91));
    $93 = $17;
    $94 = $31;
    $95 = (($93) + ($94<<3)|0);
    $96 = +HEAPF64[$95>>3];
    $97 = $92 * $96;
    $98 = $16;
    $99 = $31;
    $100 = (($98) + ($99<<3)|0);
    $101 = +HEAPF64[$100>>3];
    $102 = $97 * $101;
    $103 = $22;
    $104 = $30;
    $105 = (($103) + ($104<<3)|0);
    $106 = +HEAPF64[$105>>3];
    $107 = $106 + $102;
    HEAPF64[$105>>3] = $107;
   } else {
    $108 = ($87|0)==(0);
    if ($108) {
     $109 = $17;
     $110 = $31;
     $111 = (($109) + ($110<<3)|0);
     $112 = +HEAPF64[$111>>3];
     $113 = $16;
     $114 = $31;
     $115 = (($113) + ($114<<3)|0);
     $116 = +HEAPF64[$115>>3];
     $117 = $112 * $116;
     $118 = $22;
     $119 = $30;
     $120 = (($118) + ($119<<3)|0);
     $121 = +HEAPF64[$120>>3];
     $122 = $121 + $117;
     HEAPF64[$120>>3] = $122;
    }
   }
   $123 = $31;
   $124 = (($123) + 1)|0;
   $31 = $124;
  }
  if ((label|0) == 9) {
   label = 0;
   $79 = $22;
   $80 = $30;
   $81 = (($79) + ($80<<3)|0);
   HEAPF64[$81>>3] = nan;
  }
  $125 = $22;
  $126 = $30;
  $127 = (($125) + ($126<<3)|0);
  $128 = +HEAPF64[$127>>3];
  $129 = (___DOUBLE_BITS($128)|0);
  $130 = (getTempRet0() | 0);
  $131 = $130 & 2147483647;
  $132 = ($131>>>0)>(2146435072);
  $133 = ($129>>>0)>(0);
  $134 = ($131|0)==(2146435072);
  $135 = $134 & $133;
  $136 = $132 | $135;
  if (!($136)) {
   $137 = $22;
   $138 = $30;
   $139 = (($137) + ($138<<3)|0);
   $140 = +HEAPF64[$139>>3];
   $141 = $23;
   $142 = +HEAPF64[$141>>3];
   $143 = $142 + $140;
   HEAPF64[$141>>3] = $143;
   $144 = $30;
   $145 = (+($144|0));
   $146 = $22;
   $147 = $30;
   $148 = (($146) + ($147<<3)|0);
   $149 = +HEAPF64[$148>>3];
   $150 = $145 * $149;
   $151 = $24;
   $152 = +HEAPF64[$151>>3];
   $153 = $152 + $150;
   HEAPF64[$151>>3] = $153;
   $154 = $30;
   $155 = ($154|0)==(1);
   if ($155) {
    $156 = $22;
    $157 = $30;
    $158 = (($156) + ($157<<3)|0);
    $159 = +HEAPF64[$158>>3];
    $160 = $25;
    $161 = +HEAPF64[$160>>3];
    $162 = $161 + $159;
    HEAPF64[$160>>3] = $162;
   }
   $163 = $30;
   $164 = ($163|0)>(1);
   if ($164) {
    $165 = $22;
    $166 = $30;
    $167 = (($165) + ($166<<3)|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $26;
    $170 = +HEAPF64[$169>>3];
    $171 = $170 + $168;
    HEAPF64[$169>>3] = $171;
    $172 = $22;
    $173 = $30;
    $174 = (($172) + ($173<<3)|0);
    $175 = +HEAPF64[$174>>3];
    $176 = $30;
    $177 = (+($176|0));
    $178 = $175 * $177;
    $179 = $27;
    $180 = +HEAPF64[$179>>3];
    $181 = $180 + $178;
    HEAPF64[$179>>3] = $181;
   }
  }
  $182 = $30;
  $183 = (($182) + 1)|0;
  $30 = $183;
 }
 $184 = $20;
 $185 = (+($184|0));
 $186 = $24;
 $187 = +HEAPF64[$186>>3];
 $188 = $187 * $185;
 HEAPF64[$186>>3] = $188;
 $189 = $20;
 $190 = (+($189|0));
 $191 = $25;
 $192 = +HEAPF64[$191>>3];
 $193 = $192 * $190;
 HEAPF64[$191>>3] = $193;
 $194 = $20;
 $195 = (+($194|0));
 $196 = $26;
 $197 = +HEAPF64[$196>>3];
 $198 = $197 * $195;
 HEAPF64[$196>>3] = $198;
 $199 = $20;
 $200 = (+($199|0));
 $201 = $26;
 $202 = +HEAPF64[$201>>3];
 $203 = $200 / $202;
 $204 = $27;
 $205 = +HEAPF64[$204>>3];
 $206 = $205 * $203;
 HEAPF64[$204>>3] = $206;
 STACKTOP = sp;return;
}
function _AT_translate_dose_into_DSB_distribution($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $70 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $30 = $7&1;
 $20 = $30;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $31 = $13;
 $32 = $14;
 $33 = $15;
 $34 = $16;
 $35 = $17;
 $36 = $18;
 $37 = (_AT_n_bins_for_DSB_distribution($31,$32,$33,$34,$35,$36)|0);
 $26 = $37;
 $38 = $26;
 $39 = (_calloc($38,8)|0);
 $27 = $39;
 $40 = $13;
 $41 = $14;
 $42 = $15;
 $43 = $16;
 $44 = $17;
 $45 = $18;
 $46 = $19;
 $47 = $26;
 $48 = $27;
 $49 = $21;
 $50 = $22;
 $51 = $23;
 $52 = $24;
 $53 = $25;
 _AT_get_DSB_distribution($40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53);
 $28 = 0;
 $54 = $20;
 $55 = $54&1;
 if (!($55)) {
  STACKTOP = sp;return;
 }
 $56 = (_fopen(81759,81473)|0);
 $28 = $56;
 $57 = $28;
 $58 = ($57|0)==(0|0);
 if ($58) {
  STACKTOP = sp;return;
 }
 $59 = $28;
 (_fprintf($59,81776,$vararg_buffer)|0);
 $29 = 0;
 while(1) {
  $60 = $29;
  $61 = $26;
  $62 = ($60|0)<($61|0);
  $63 = $28;
  if (!($62)) {
   break;
  }
  $64 = $29;
  $65 = $27;
  $66 = $29;
  $67 = (($65) + ($66<<3)|0);
  $68 = +HEAPF64[$67>>3];
  HEAP32[$vararg_buffer1>>2] = $64;
  $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
  HEAPF64[$vararg_ptr3>>3] = $68;
  (_fprintf($63,81791,$vararg_buffer1)|0);
  $69 = $29;
  $70 = (($69) + 1)|0;
  $29 = $70;
 }
 (_fclose($63)|0);
 STACKTOP = sp;return;
}
function _gsl_complex_arctan($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 40|0;
 $10 = +HEAPF64[$1>>3];
 $2 = $10;
 $11 = ((($1)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $3 = $12;
 $13 = $3;
 $14 = $13 == 0.0;
 $15 = $2;
 do {
  if ($14) {
   $16 = (+Math_atan((+$15)));
   HEAPF64[$4>>3] = $16;
   $17 = ((($4)) + 8|0);
   HEAPF64[$17>>3] = 0.0;
  } else {
   $18 = $3;
   $19 = (+_hypot($15,$18));
   $5 = $19;
   $20 = $3;
   $21 = 2.0 * $20;
   $22 = $5;
   $23 = $5;
   $24 = $22 * $23;
   $25 = 1.0 + $24;
   $26 = $21 / $25;
   $7 = $26;
   $27 = $7;
   $28 = (+Math_abs((+$27)));
   $29 = $28 < 0.10000000000000001;
   if ($29) {
    $30 = $7;
    $31 = (+_log1p($30));
    $32 = $7;
    $33 = - $32;
    $34 = (+_log1p($33));
    $35 = $31 - $34;
    $36 = 0.25 * $35;
    $6 = $36;
   } else {
    $37 = $2;
    $38 = $3;
    $39 = $38 + 1.0;
    $40 = (+_hypot($37,$39));
    $8 = $40;
    $41 = $2;
    $42 = $3;
    $43 = $42 - 1.0;
    $44 = (+_hypot($41,$43));
    $9 = $44;
    $45 = $8;
    $46 = $9;
    $47 = $45 / $46;
    $48 = (+Math_log((+$47)));
    $49 = 0.5 * $48;
    $6 = $49;
   }
   $50 = $2;
   $51 = $50 == 0.0;
   if (!($51)) {
    $62 = $2;
    $63 = 2.0 * $62;
    $64 = $5;
    $65 = 1.0 + $64;
    $66 = $5;
    $67 = 1.0 - $66;
    $68 = $65 * $67;
    $69 = (+Math_atan2((+$63),(+$68)));
    $70 = 0.5 * $69;
    HEAPF64[$4>>3] = $70;
    $71 = $6;
    $72 = ((($4)) + 8|0);
    HEAPF64[$72>>3] = $71;
    break;
   }
   $52 = $3;
   $53 = $52 > 1.0;
   if ($53) {
    HEAPF64[$4>>3] = 1.5707963267948966;
    $54 = $6;
    $55 = ((($4)) + 8|0);
    HEAPF64[$55>>3] = $54;
    break;
   }
   $56 = $3;
   $57 = $56 < -1.0;
   if ($57) {
    HEAPF64[$4>>3] = -1.5707963267948966;
    $58 = $6;
    $59 = ((($4)) + 8|0);
    HEAPF64[$59>>3] = $58;
    break;
   } else {
    HEAPF64[$4>>3] = 0.0;
    $60 = $6;
    $61 = ((($4)) + 8|0);
    HEAPF64[$61>>3] = $60;
    break;
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _gsl_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = HEAP32[323065]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $4;
  $11 = $5;
  $12 = $6;
  $13 = $7;
  _no_error_handler($10,$11,$12,$13);
  STACKTOP = sp;return;
 } else {
  $14 = $5;
  $15 = $6;
  $16 = $4;
  _gsl_stream_printf(81800,$14,$15,$16);
  $17 = HEAP32[17850]|0;
  (_fflush($17)|0);
  $18 = HEAP32[17818]|0;
  (_fprintf($18,81806,$vararg_buffer)|0);
  $19 = HEAP32[17818]|0;
  (_fflush($19)|0);
  _abort();
  // unreachable;
 }
}
function _gsl_set_error_handler_off() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[323065]|0;
 $0 = $1;
 HEAP32[323065] = 26;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function _no_error_handler($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 STACKTOP = sp;return;
}
function _gsl_stream_printf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = HEAP32[323066]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[17818]|0;
  HEAP32[323066] = $10;
 }
 $11 = HEAP32[323066]|0;
 $12 = $5;
 $13 = $6;
 $14 = $4;
 $15 = $7;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $14;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $15;
 (_fprintf($11,81842,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _gsl_integration_qag($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $22 = 27;
 $23 = $17;
 $24 = ($23|0)<(1);
 if ($24) {
  $17 = 1;
 } else {
  $25 = $17;
  $26 = ($25|0)>(6);
  if ($26) {
   $17 = 6;
  }
 }
 $27 = $17;
 switch ($27|0) {
 case 1:  {
  $22 = 27;
  break;
 }
 case 2:  {
  $22 = 28;
  break;
 }
 case 3:  {
  $22 = 29;
  break;
 }
 case 4:  {
  $22 = 30;
  break;
 }
 case 5:  {
  $22 = 31;
  break;
 }
 case 6:  {
  $22 = 32;
  break;
 }
 default: {
  _gsl_error(81862,81913,82,4);
  $10 = 4;
  $40 = $10;
  STACKTOP = sp;return ($40|0);
 }
 }
 $28 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 $34 = $18;
 $35 = $19;
 $36 = $20;
 $37 = $22;
 $38 = (_qag($28,$29,$30,$31,$32,$33,$34,$35,$36,$37)|0);
 $21 = $38;
 $39 = $21;
 $10 = $39;
 $40 = $10;
 STACKTOP = sp;return ($40|0);
}
function _qag($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$old2 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0;
 var $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0;
 var $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $23 = sp + 192|0;
 $24 = sp + 184|0;
 $25 = sp + 176|0;
 $26 = sp + 168|0;
 $37 = sp + 112|0;
 $38 = sp + 104|0;
 $39 = sp + 96|0;
 $40 = sp + 88|0;
 $41 = sp + 80|0;
 $42 = sp + 72|0;
 $44 = sp + 56|0;
 $45 = sp + 48|0;
 $47 = sp + 32|0;
 $48 = sp + 24|0;
 $49 = sp + 16|0;
 $50 = sp + 8|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $28 = 0;
 $29 = 0;
 $30 = 0;
 $31 = 0;
 $52 = $17;
 $53 = $12;
 $54 = $13;
 _initialise($52,$53,$54);
 $55 = $18;
 HEAPF64[$55>>3] = 0.0;
 $56 = $19;
 HEAPF64[$56>>3] = 0.0;
 $57 = $16;
 $58 = $17;
 $59 = HEAP32[$58>>2]|0;
 $60 = ($57>>>0)>($59>>>0);
 if ($60) {
  _gsl_error(82078,81913,119,4);
  $10 = 4;
  $225 = $10;
  STACKTOP = sp;return ($225|0);
 }
 $61 = $14;
 $62 = $61 <= 0.0;
 if ($62) {
  $63 = $15;
  $64 = $63 < 1.1102230246251565E-14;
  $65 = $15;
  $66 = $65 < 4.9999999999999999E-29;
  $or$cond = $64 | $66;
  if ($or$cond) {
   _gsl_error(82129,81913,125,13);
   $10 = 13;
   $225 = $10;
   STACKTOP = sp;return ($225|0);
  }
 }
 $67 = $20;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 FUNCTION_TABLE_viddiiii[$67 & 63]($68,$69,$70,$23,$24,$25,$26);
 $71 = $17;
 $72 = +HEAPF64[$23>>3];
 $73 = +HEAPF64[$24>>3];
 _set_initial_result($71,$72,$73);
 $74 = $14;
 $75 = $15;
 $76 = +HEAPF64[$23>>3];
 $77 = (+Math_abs((+$76)));
 $78 = $75 * $77;
 $79 = (+_GSL_MAX_DBL($74,$78));
 $27 = $79;
 $80 = +HEAPF64[$25>>3];
 $81 = 1.1102230246251565E-14 * $80;
 $82 = (+_gsl_coerce_double($81));
 $32 = $82;
 $83 = +HEAPF64[$24>>3];
 $84 = $32;
 $85 = $83 <= $84;
 if ($85) {
  $86 = +HEAPF64[$24>>3];
  $87 = $27;
  $88 = $86 > $87;
  if ($88) {
   $89 = +HEAPF64[$23>>3];
   $90 = $18;
   HEAPF64[$90>>3] = $89;
   $91 = +HEAPF64[$24>>3];
   $92 = $19;
   HEAPF64[$92>>3] = $91;
   _gsl_error(81919,81913,148,18);
   $10 = 18;
   $225 = $10;
   STACKTOP = sp;return ($225|0);
  }
 }
 $93 = +HEAPF64[$24>>3];
 $94 = $27;
 $95 = $93 <= $94;
 $96 = +HEAPF64[$24>>3];
 if ($95) {
  $97 = +HEAPF64[$26>>3];
  $98 = $96 != $97;
  $99 = +HEAPF64[$24>>3];
  $100 = $99 == 0.0;
  $or$cond3 = $98 | $100;
  if ($or$cond3) {
   label = 12;
  }
 } else {
  $$old2 = $96 == 0.0;
  if ($$old2) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $101 = +HEAPF64[$23>>3];
  $102 = $18;
  HEAPF64[$102>>3] = $101;
  $103 = +HEAPF64[$24>>3];
  $104 = $19;
  HEAPF64[$104>>3] = $103;
  $10 = 0;
  $225 = $10;
  STACKTOP = sp;return ($225|0);
 }
 $105 = $16;
 $106 = ($105|0)==(1);
 $107 = +HEAPF64[$23>>3];
 if ($106) {
  $108 = $18;
  HEAPF64[$108>>3] = $107;
  $109 = +HEAPF64[$24>>3];
  $110 = $19;
  HEAPF64[$110>>3] = $109;
  _gsl_error(82252,81913,162,11);
  $10 = 11;
  $225 = $10;
  STACKTOP = sp;return ($225|0);
 }
 $21 = $107;
 $111 = +HEAPF64[$24>>3];
 $22 = $111;
 $28 = 1;
 while(1) {
  HEAPF64[$41>>3] = 0.0;
  HEAPF64[$42>>3] = 0.0;
  $43 = 0.0;
  HEAPF64[$44>>3] = 0.0;
  HEAPF64[$45>>3] = 0.0;
  $46 = 0.0;
  $112 = $17;
  _retrieve($112,$37,$38,$39,$40);
  $113 = +HEAPF64[$37>>3];
  $33 = $113;
  $114 = +HEAPF64[$37>>3];
  $115 = +HEAPF64[$38>>3];
  $116 = $114 + $115;
  $117 = 0.5 * $116;
  $34 = $117;
  $118 = $34;
  $35 = $118;
  $119 = +HEAPF64[$38>>3];
  $36 = $119;
  $120 = $20;
  $121 = $11;
  $122 = $33;
  $123 = $34;
  FUNCTION_TABLE_viddiiii[$120 & 63]($121,$122,$123,$41,$44,$49,$47);
  $124 = $20;
  $125 = $11;
  $126 = $35;
  $127 = $36;
  FUNCTION_TABLE_viddiiii[$124 & 63]($125,$126,$127,$42,$45,$50,$48);
  $128 = +HEAPF64[$41>>3];
  $129 = +HEAPF64[$42>>3];
  $130 = $128 + $129;
  $43 = $130;
  $131 = +HEAPF64[$44>>3];
  $132 = +HEAPF64[$45>>3];
  $133 = $131 + $132;
  $46 = $133;
  $134 = $46;
  $135 = +HEAPF64[$40>>3];
  $136 = $134 - $135;
  $137 = $22;
  $138 = $137 + $136;
  $22 = $138;
  $139 = $43;
  $140 = +HEAPF64[$39>>3];
  $141 = $139 - $140;
  $142 = $21;
  $143 = $142 + $141;
  $21 = $143;
  $144 = +HEAPF64[$47>>3];
  $145 = +HEAPF64[$44>>3];
  $146 = $144 != $145;
  if ($146) {
   $147 = +HEAPF64[$48>>3];
   $148 = +HEAPF64[$45>>3];
   $149 = $147 != $148;
   if ($149) {
    $150 = +HEAPF64[$39>>3];
    $151 = $43;
    $152 = $150 - $151;
    $51 = $152;
    $153 = $51;
    $154 = (+Math_abs((+$153)));
    $155 = $43;
    $156 = (+Math_abs((+$155)));
    $157 = 1.0000000000000001E-5 * $156;
    $158 = $154 <= $157;
    if ($158) {
     $159 = $46;
     $160 = +HEAPF64[$40>>3];
     $161 = 0.98999999999999999 * $160;
     $162 = $159 >= $161;
     if ($162) {
      $163 = $29;
      $164 = (($163) + 1)|0;
      $29 = $164;
     }
    }
    $165 = $28;
    $166 = ($165>>>0)>=(10);
    if ($166) {
     $167 = $46;
     $168 = +HEAPF64[$40>>3];
     $169 = $167 > $168;
     if ($169) {
      $170 = $30;
      $171 = (($170) + 1)|0;
      $30 = $171;
     }
    }
   }
  }
  $172 = $14;
  $173 = $15;
  $174 = $21;
  $175 = (+Math_abs((+$174)));
  $176 = $173 * $175;
  $177 = (+_GSL_MAX_DBL($172,$176));
  $27 = $177;
  $178 = $22;
  $179 = $27;
  $180 = $178 > $179;
  if ($180) {
   $181 = $29;
   $182 = ($181|0)>=(6);
   $183 = $30;
   $184 = ($183|0)>=(20);
   $or$cond6 = $182 | $184;
   if ($or$cond6) {
    $31 = 2;
   }
   $185 = $33;
   $186 = $35;
   $187 = $36;
   $188 = (_subinterval_too_small($185,$186,$187)|0);
   $189 = ($188|0)!=(0);
   if ($189) {
    $31 = 3;
   }
  }
  $190 = $17;
  $191 = $33;
  $192 = $34;
  $193 = +HEAPF64[$41>>3];
  $194 = +HEAPF64[$44>>3];
  $195 = $35;
  $196 = $36;
  $197 = +HEAPF64[$42>>3];
  $198 = +HEAPF64[$45>>3];
  _update($190,$191,$192,$193,$194,$195,$196,$197,$198);
  $199 = $17;
  _retrieve($199,$37,$38,$39,$40);
  $200 = $28;
  $201 = (($200) + 1)|0;
  $28 = $201;
  $202 = $28;
  $203 = $16;
  $204 = ($202>>>0)>=($203>>>0);
  $205 = $31;
  $206 = ($205|0)!=(0);
  $or$cond9 = $204 | $206;
  if ($or$cond9) {
   break;
  }
  $207 = $22;
  $208 = $27;
  $209 = $207 > $208;
  if (!($209)) {
   break;
  }
 }
 $210 = $17;
 $211 = (+_sum_results($210));
 $212 = $18;
 HEAPF64[$212>>3] = $211;
 $213 = $22;
 $214 = $19;
 HEAPF64[$214>>3] = $213;
 $215 = $22;
 $216 = $27;
 $217 = $215 <= $216;
 if ($217) {
  $10 = 0;
  $225 = $10;
  STACKTOP = sp;return ($225|0);
 }
 $218 = $31;
 $219 = ($218|0)==(2);
 if ($219) {
  _gsl_error(81985,81913,248,18);
  $10 = 18;
  $225 = $10;
  STACKTOP = sp;return ($225|0);
 }
 $220 = $31;
 $221 = ($220|0)==(3);
 if ($221) {
  _gsl_error(82383,81913,253,21);
  $10 = 21;
  $225 = $10;
  STACKTOP = sp;return ($225|0);
 }
 $222 = $28;
 $223 = $16;
 $224 = ($222|0)==($223|0);
 if ($224) {
  _gsl_error(82039,81913,257,11);
  $10 = 11;
  $225 = $10;
  STACKTOP = sp;return ($225|0);
 } else {
  _gsl_error(82535,81913,261,5);
  $10 = 5;
  $225 = $10;
  STACKTOP = sp;return ($225|0);
 }
 return (0)|0;
}
function _initialise($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = ((($10)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = $4;
 $13 = $3;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 HEAPF64[$15>>3] = $12;
 $16 = $5;
 $17 = $3;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 HEAPF64[$19>>3] = $16;
 $20 = $3;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 HEAPF64[$22>>3] = 0.0;
 $23 = $3;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 HEAPF64[$25>>3] = 0.0;
 $26 = $3;
 $27 = ((($26)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$28>>2] = 0;
 $29 = $3;
 $30 = ((($29)) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$31>>2] = 0;
 $32 = $3;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function _set_initial_result($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 1;
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 HEAPF64[$11>>3] = $8;
 $12 = $5;
 $13 = $3;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 HEAPF64[$15>>3] = $12;
 STACKTOP = sp;return;
}
function _retrieve($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $5;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $10 = $17;
 $18 = $5;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $11 = $20;
 $21 = $5;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $12 = $23;
 $24 = $5;
 $25 = ((($24)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $13 = $26;
 $27 = $5;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $14 = $29;
 $30 = $11;
 $31 = $10;
 $32 = (($30) + ($31<<3)|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $6;
 HEAPF64[$34>>3] = $33;
 $35 = $12;
 $36 = $10;
 $37 = (($35) + ($36<<3)|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $7;
 HEAPF64[$39>>3] = $38;
 $40 = $13;
 $41 = $10;
 $42 = (($40) + ($41<<3)|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $8;
 HEAPF64[$44>>3] = $43;
 $45 = $14;
 $46 = $10;
 $47 = (($45) + ($46<<3)|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $9;
 HEAPF64[$49>>3] = $48;
 STACKTOP = sp;return;
}
function _subinterval_too_small($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 2.2204460492503131E-16;
 $7 = 2.2250738585072014E-308;
 $10 = $4;
 $11 = (+Math_abs((+$10)));
 $12 = $11 + 2.2250738585072014E-305;
 $13 = 1.0000000000000222 * $12;
 $8 = $13;
 $14 = $3;
 $15 = (+Math_abs((+$14)));
 $16 = $8;
 $17 = $15 <= $16;
 if (!($17)) {
  $23 = 0;
  $22 = $23&1;
  $9 = $22;
  $24 = $9;
  STACKTOP = sp;return ($24|0);
 }
 $18 = $5;
 $19 = (+Math_abs((+$18)));
 $20 = $8;
 $21 = $19 <= $20;
 $23 = $21;
 $22 = $23&1;
 $9 = $22;
 $24 = $9;
 STACKTOP = sp;return ($24|0);
}
function _update($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $26 = $9;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $18 = $28;
 $29 = $9;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $19 = $31;
 $32 = $9;
 $33 = ((($32)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $20 = $34;
 $35 = $9;
 $36 = ((($35)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $21 = $37;
 $38 = $9;
 $39 = ((($38)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $22 = $40;
 $41 = $9;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $23 = $43;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $24 = $46;
 $47 = $9;
 $48 = ((($47)) + 40|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $23;
 $51 = (($49) + ($50<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 $25 = $53;
 $54 = $17;
 $55 = $13;
 $56 = $54 > $55;
 if ($56) {
  $57 = $14;
  $58 = $18;
  $59 = $23;
  $60 = (($58) + ($59<<3)|0);
  HEAPF64[$60>>3] = $57;
  $61 = $16;
  $62 = $20;
  $63 = $23;
  $64 = (($62) + ($63<<3)|0);
  HEAPF64[$64>>3] = $61;
  $65 = $17;
  $66 = $21;
  $67 = $23;
  $68 = (($66) + ($67<<3)|0);
  HEAPF64[$68>>3] = $65;
  $69 = $25;
  $70 = $22;
  $71 = $23;
  $72 = (($70) + ($71<<2)|0);
  HEAP32[$72>>2] = $69;
  $73 = $10;
  $74 = $18;
  $75 = $24;
  $76 = (($74) + ($75<<3)|0);
  HEAPF64[$76>>3] = $73;
  $77 = $11;
  $78 = $19;
  $79 = $24;
  $80 = (($78) + ($79<<3)|0);
  HEAPF64[$80>>3] = $77;
  $81 = $12;
  $82 = $20;
  $83 = $24;
  $84 = (($82) + ($83<<3)|0);
  HEAPF64[$84>>3] = $81;
  $85 = $13;
  $86 = $21;
  $87 = $24;
  $88 = (($86) + ($87<<3)|0);
  HEAPF64[$88>>3] = $85;
  $89 = $25;
  $90 = $22;
  $91 = $24;
  $92 = (($90) + ($91<<2)|0);
  HEAP32[$92>>2] = $89;
 } else {
  $93 = $11;
  $94 = $19;
  $95 = $23;
  $96 = (($94) + ($95<<3)|0);
  HEAPF64[$96>>3] = $93;
  $97 = $12;
  $98 = $20;
  $99 = $23;
  $100 = (($98) + ($99<<3)|0);
  HEAPF64[$100>>3] = $97;
  $101 = $13;
  $102 = $21;
  $103 = $23;
  $104 = (($102) + ($103<<3)|0);
  HEAPF64[$104>>3] = $101;
  $105 = $25;
  $106 = $22;
  $107 = $23;
  $108 = (($106) + ($107<<2)|0);
  HEAP32[$108>>2] = $105;
  $109 = $14;
  $110 = $18;
  $111 = $24;
  $112 = (($110) + ($111<<3)|0);
  HEAPF64[$112>>3] = $109;
  $113 = $15;
  $114 = $19;
  $115 = $24;
  $116 = (($114) + ($115<<3)|0);
  HEAPF64[$116>>3] = $113;
  $117 = $16;
  $118 = $20;
  $119 = $24;
  $120 = (($118) + ($119<<3)|0);
  HEAPF64[$120>>3] = $117;
  $121 = $17;
  $122 = $21;
  $123 = $24;
  $124 = (($122) + ($123<<3)|0);
  HEAPF64[$124>>3] = $121;
  $125 = $25;
  $126 = $22;
  $127 = $24;
  $128 = (($126) + ($127<<2)|0);
  HEAP32[$128>>2] = $125;
 }
 $129 = $9;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($131) + 1)|0;
 HEAP32[$130>>2] = $132;
 $133 = $25;
 $134 = $9;
 $135 = ((($134)) + 16|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($133>>>0)>($136>>>0);
 if (!($137)) {
  $141 = $9;
  _qpsrt($141);
  STACKTOP = sp;return;
 }
 $138 = $25;
 $139 = $9;
 $140 = ((($139)) + 16|0);
 HEAP32[$140>>2] = $138;
 $141 = $9;
 _qpsrt($141);
 STACKTOP = sp;return;
}
function _sum_results($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 $5 = 0.0;
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = $3;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $4;
  $17 = (($15) + ($16<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $5;
  $20 = $19 + $18;
  $5 = $20;
  $21 = $4;
  $22 = (($21) + 1)|0;
  $4 = $22;
 }
 $23 = $5;
 STACKTOP = sp;return (+$23);
}
function _qpsrt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = $0;
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) - 1)|0;
 $2 = $16;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $3 = $18;
 $19 = $1;
 $20 = ((($19)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $4 = $21;
 $22 = $1;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $5 = $24;
 $25 = $1;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $11 = $27;
 $28 = $5;
 $29 = $11;
 $30 = (($28) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $12 = $31;
 $32 = $2;
 $33 = ($32>>>0)<(2);
 if ($33) {
  $34 = $5;
  HEAP32[$34>>2] = 0;
  $35 = $5;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = 1;
  $37 = $12;
  $38 = $1;
  $39 = ((($38)) + 12|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 }
 $40 = $4;
 $41 = $12;
 $42 = (($40) + ($41<<3)|0);
 $43 = +HEAPF64[$42>>3];
 $6 = $43;
 while(1) {
  $44 = $11;
  $45 = ($44>>>0)>(0);
  if (!($45)) {
   break;
  }
  $46 = $6;
  $47 = $4;
  $48 = $5;
  $49 = $11;
  $50 = (($49) - 1)|0;
  $51 = (($48) + ($50<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($47) + ($52<<3)|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $46 > $54;
  if (!($55)) {
   break;
  }
  $56 = $5;
  $57 = $11;
  $58 = (($57) - 1)|0;
  $59 = (($56) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $5;
  $62 = $11;
  $63 = (($61) + ($62<<2)|0);
  HEAP32[$63>>2] = $60;
  $64 = $11;
  $65 = (($64) + -1)|0;
  $11 = $65;
 }
 $66 = $2;
 $67 = $3;
 $68 = (($67>>>0) / 2)&-1;
 $69 = (($68) + 2)|0;
 $70 = ($66>>>0)<($69>>>0);
 if ($70) {
  $71 = $2;
  $10 = $71;
 } else {
  $72 = $3;
  $73 = $2;
  $74 = (($72) - ($73))|0;
  $75 = (($74) + 1)|0;
  $10 = $75;
 }
 $76 = $11;
 $77 = (($76) + 1)|0;
 $8 = $77;
 while(1) {
  $78 = $8;
  $79 = $10;
  $80 = ($78|0)<($79|0);
  if (!($80)) {
   break;
  }
  $81 = $6;
  $82 = $4;
  $83 = $5;
  $84 = $8;
  $85 = (($83) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($82) + ($86<<3)|0);
  $88 = +HEAPF64[$87>>3];
  $89 = $81 < $88;
  if (!($89)) {
   break;
  }
  $90 = $5;
  $91 = $8;
  $92 = (($90) + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $5;
  $95 = $8;
  $96 = (($95) - 1)|0;
  $97 = (($94) + ($96<<2)|0);
  HEAP32[$97>>2] = $93;
  $98 = $8;
  $99 = (($98) + 1)|0;
  $8 = $99;
 }
 $100 = $12;
 $101 = $5;
 $102 = $8;
 $103 = (($102) - 1)|0;
 $104 = (($101) + ($103<<2)|0);
 HEAP32[$104>>2] = $100;
 $105 = $4;
 $106 = $2;
 $107 = (($105) + ($106<<3)|0);
 $108 = +HEAPF64[$107>>3];
 $7 = $108;
 $109 = $10;
 $110 = (($109) - 1)|0;
 $9 = $110;
 while(1) {
  $111 = $9;
  $112 = $8;
  $113 = (($112) - 2)|0;
  $114 = ($111|0)>($113|0);
  if (!($114)) {
   break;
  }
  $115 = $7;
  $116 = $4;
  $117 = $5;
  $118 = $9;
  $119 = (($117) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($116) + ($120<<3)|0);
  $122 = +HEAPF64[$121>>3];
  $123 = $115 >= $122;
  if (!($123)) {
   break;
  }
  $124 = $5;
  $125 = $9;
  $126 = (($124) + ($125<<2)|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $5;
  $129 = $9;
  $130 = (($129) + 1)|0;
  $131 = (($128) + ($130<<2)|0);
  HEAP32[$131>>2] = $127;
  $132 = $9;
  $133 = (($132) + -1)|0;
  $9 = $133;
 }
 $134 = $2;
 $135 = $5;
 $136 = $9;
 $137 = (($136) + 1)|0;
 $138 = (($135) + ($137<<2)|0);
 HEAP32[$138>>2] = $134;
 $139 = $5;
 $140 = $11;
 $141 = (($139) + ($140<<2)|0);
 $142 = HEAP32[$141>>2]|0;
 $12 = $142;
 $143 = $12;
 $144 = $1;
 $145 = ((($144)) + 12|0);
 HEAP32[$145>>2] = $143;
 $146 = $11;
 $147 = $1;
 $148 = ((($147)) + 8|0);
 HEAP32[$148>>2] = $146;
 STACKTOP = sp;return;
}
function _gsl_integration_qags($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $19 = $9;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = $13;
 $24 = $14;
 $25 = $15;
 $26 = $16;
 $27 = $17;
 $28 = (_qags($19,$20,$21,$22,$23,$24,$25,$26,$27,28)|0);
 $18 = $28;
 $29 = $18;
 STACKTOP = sp;return ($29|0);
}
function _qags($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$old2 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0;
 var $299 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0;
 var $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0.0;
 var $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0;
 var $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0;
 var $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0;
 var $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0.0, $79 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond12 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond6 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(848|0);
 $25 = sp + 704|0;
 $26 = sp + 696|0;
 $27 = sp + 688|0;
 $28 = sp + 680|0;
 $32 = sp + 648|0;
 $33 = sp + 640|0;
 $45 = sp + 176|0;
 $51 = sp + 136|0;
 $52 = sp + 128|0;
 $53 = sp + 120|0;
 $54 = sp + 112|0;
 $55 = sp + 104|0;
 $56 = sp + 96|0;
 $58 = sp + 80|0;
 $59 = sp + 72|0;
 $61 = sp + 56|0;
 $62 = sp + 48|0;
 $63 = sp + 40|0;
 $64 = sp + 32|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $30 = 0.0;
 $31 = 0.0;
 HEAPF64[$32>>3] = 0.0;
 HEAPF64[$33>>3] = 0.0;
 $34 = 0.0;
 $35 = 0;
 $36 = 0;
 $37 = 0;
 $38 = 0;
 $39 = 0;
 $40 = 0;
 $41 = 0;
 $42 = 0;
 $43 = 0;
 $44 = 0;
 $69 = $17;
 $70 = $12;
 $71 = $13;
 _initialise_1139($69,$70,$71);
 $72 = $18;
 HEAPF64[$72>>3] = 0.0;
 $73 = $19;
 HEAPF64[$73>>3] = 0.0;
 $74 = $16;
 $75 = $17;
 $76 = HEAP32[$75>>2]|0;
 $77 = ($74>>>0)>($76>>>0);
 if ($77) {
  _gsl_error(82078,82122,232,4);
  $10 = 4;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 $78 = $14;
 $79 = $78 <= 0.0;
 if ($79) {
  $80 = $15;
  $81 = $80 < 1.1102230246251565E-14;
  $82 = $15;
  $83 = $82 < 4.9999999999999999E-29;
  $or$cond = $81 | $83;
  if ($or$cond) {
   _gsl_error(82129,82122,240,13);
   $10 = 13;
   $390 = $10;
   STACKTOP = sp;return ($390|0);
  }
 }
 $84 = $20;
 $85 = $11;
 $86 = $12;
 $87 = $13;
 FUNCTION_TABLE_viddiiii[$84 & 63]($85,$86,$87,$25,$26,$27,$28);
 $88 = $17;
 $89 = +HEAPF64[$25>>3];
 $90 = +HEAPF64[$26>>3];
 _set_initial_result_1143($88,$89,$90);
 $91 = $14;
 $92 = $15;
 $93 = +HEAPF64[$25>>3];
 $94 = (+Math_abs((+$93)));
 $95 = $92 * $94;
 $96 = (+_GSL_MAX_DBL($91,$95));
 $29 = $96;
 $97 = +HEAPF64[$26>>3];
 $98 = +HEAPF64[$27>>3];
 $99 = 2.2204460492503131E-14 * $98;
 $100 = $97 <= $99;
 if ($100) {
  $101 = +HEAPF64[$26>>3];
  $102 = $29;
  $103 = $101 > $102;
  if ($103) {
   $104 = +HEAPF64[$25>>3];
   $105 = $18;
   HEAPF64[$105>>3] = $104;
   $106 = +HEAPF64[$26>>3];
   $107 = $19;
   HEAPF64[$107>>3] = $106;
   _gsl_error(82187,82122,257,18);
   $10 = 18;
   $390 = $10;
   STACKTOP = sp;return ($390|0);
  }
 }
 $108 = +HEAPF64[$26>>3];
 $109 = $29;
 $110 = $108 <= $109;
 $111 = +HEAPF64[$26>>3];
 if ($110) {
  $112 = +HEAPF64[$28>>3];
  $113 = $111 != $112;
  $114 = +HEAPF64[$26>>3];
  $115 = $114 == 0.0;
  $or$cond3 = $113 | $115;
  if ($or$cond3) {
   label = 12;
  }
 } else {
  $$old2 = $111 == 0.0;
  if ($$old2) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $116 = +HEAPF64[$25>>3];
  $117 = $18;
  HEAPF64[$117>>3] = $116;
  $118 = +HEAPF64[$26>>3];
  $119 = $19;
  HEAPF64[$119>>3] = $118;
  $10 = 0;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 $120 = $16;
 $121 = ($120|0)==(1);
 if ($121) {
  $122 = +HEAPF64[$25>>3];
  $123 = $18;
  HEAPF64[$123>>3] = $122;
  $124 = +HEAPF64[$26>>3];
  $125 = $19;
  HEAPF64[$125>>3] = $124;
  _gsl_error(82252,82122,271,11);
  $10 = 11;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 _initialise_table_1146($45);
 $126 = +HEAPF64[$25>>3];
 _append_table_1147($45,$126);
 $127 = +HEAPF64[$25>>3];
 $21 = $127;
 $128 = +HEAPF64[$26>>3];
 $22 = $128;
 $129 = +HEAPF64[$25>>3];
 $23 = $129;
 $24 = 1.7976931348623157E+308;
 $130 = +HEAPF64[$25>>3];
 $131 = +HEAPF64[$27>>3];
 $132 = (_test_positivity_1148($130,$131)|0);
 $42 = $132;
 $41 = 1;
 L26: while(1) {
  HEAPF64[$55>>3] = 0.0;
  HEAPF64[$56>>3] = 0.0;
  $57 = 0.0;
  HEAPF64[$58>>3] = 0.0;
  HEAPF64[$59>>3] = 0.0;
  $60 = 0.0;
  $133 = $17;
  _retrieve_1149($133,$51,$52,$53,$54);
  $134 = $17;
  $135 = ((($134)) + 40|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $17;
  $138 = ((($137)) + 12|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($136) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($141) + 1)|0;
  $46 = $142;
  $143 = +HEAPF64[$51>>3];
  $47 = $143;
  $144 = +HEAPF64[$51>>3];
  $145 = +HEAPF64[$52>>3];
  $146 = $144 + $145;
  $147 = 0.5 * $146;
  $48 = $147;
  $148 = $48;
  $49 = $148;
  $149 = +HEAPF64[$52>>3];
  $50 = $149;
  $150 = $41;
  $151 = (($150) + 1)|0;
  $41 = $151;
  $152 = $20;
  $153 = $11;
  $154 = $47;
  $155 = $48;
  FUNCTION_TABLE_viddiiii[$152 & 63]($153,$154,$155,$55,$58,$63,$61);
  $156 = $20;
  $157 = $11;
  $158 = $49;
  $159 = $50;
  FUNCTION_TABLE_viddiiii[$156 & 63]($157,$158,$159,$56,$59,$64,$62);
  $160 = +HEAPF64[$55>>3];
  $161 = +HEAPF64[$56>>3];
  $162 = $160 + $161;
  $57 = $162;
  $163 = +HEAPF64[$58>>3];
  $164 = +HEAPF64[$59>>3];
  $165 = $163 + $164;
  $60 = $165;
  $166 = +HEAPF64[$54>>3];
  $65 = $166;
  $167 = $22;
  $168 = $60;
  $169 = $167 + $168;
  $170 = +HEAPF64[$54>>3];
  $171 = $169 - $170;
  $22 = $171;
  $172 = $21;
  $173 = $57;
  $174 = $172 + $173;
  $175 = +HEAPF64[$53>>3];
  $176 = $174 - $175;
  $21 = $176;
  $177 = $14;
  $178 = $15;
  $179 = $21;
  $180 = (+Math_abs((+$179)));
  $181 = $178 * $180;
  $182 = (+_GSL_MAX_DBL($177,$181));
  $29 = $182;
  $183 = +HEAPF64[$61>>3];
  $184 = +HEAPF64[$58>>3];
  $185 = $183 != $184;
  if ($185) {
   $186 = +HEAPF64[$62>>3];
   $187 = +HEAPF64[$59>>3];
   $188 = $186 != $187;
   if ($188) {
    $189 = +HEAPF64[$53>>3];
    $190 = $57;
    $191 = $189 - $190;
    $66 = $191;
    $192 = $66;
    $193 = (+Math_abs((+$192)));
    $194 = $57;
    $195 = (+Math_abs((+$194)));
    $196 = 1.0000000000000001E-5 * $195;
    $197 = $193 <= $196;
    do {
     if ($197) {
      $198 = $60;
      $199 = +HEAPF64[$54>>3];
      $200 = 0.98999999999999999 * $199;
      $201 = $198 >= $200;
      if ($201) {
       $202 = $43;
       $203 = ($202|0)!=(0);
       if ($203) {
        $206 = $37;
        $207 = (($206) + 1)|0;
        $37 = $207;
        break;
       } else {
        $204 = $36;
        $205 = (($204) + 1)|0;
        $36 = $205;
        break;
       }
      }
     }
    } while(0);
    $208 = $41;
    $209 = ($208>>>0)>(10);
    if ($209) {
     $210 = $60;
     $211 = +HEAPF64[$54>>3];
     $212 = $210 > $211;
     if ($212) {
      $213 = $38;
      $214 = (($213) + 1)|0;
      $38 = $214;
     }
    }
   }
  }
  $215 = $36;
  $216 = $37;
  $217 = (($215) + ($216))|0;
  $218 = ($217|0)>=(10);
  $219 = $38;
  $220 = ($219|0)>=(20);
  $or$cond6 = $218 | $220;
  if ($or$cond6) {
   $39 = 2;
  }
  $221 = $37;
  $222 = ($221|0)>=(5);
  if ($222) {
   $40 = 1;
  }
  $223 = $47;
  $224 = $49;
  $225 = $50;
  $226 = (_subinterval_too_small_1150($223,$224,$225)|0);
  $227 = ($226|0)!=(0);
  if ($227) {
   $39 = 4;
  }
  $228 = $17;
  $229 = $47;
  $230 = $48;
  $231 = +HEAPF64[$55>>3];
  $232 = +HEAPF64[$58>>3];
  $233 = $49;
  $234 = $50;
  $235 = +HEAPF64[$56>>3];
  $236 = +HEAPF64[$59>>3];
  _update_1151($228,$229,$230,$231,$232,$233,$234,$235,$236);
  $237 = $22;
  $238 = $29;
  $239 = $237 <= $238;
  if ($239) {
   label = 72;
   break;
  }
  $240 = $39;
  $241 = ($240|0)!=(0);
  if ($241) {
   label = 57;
   break;
  }
  $242 = $41;
  $243 = $16;
  $244 = (($243) - 1)|0;
  $245 = ($242>>>0)>=($244>>>0);
  if ($245) {
   label = 35;
   break;
  }
  $246 = $41;
  $247 = ($246|0)==(2);
  L53: do {
   if ($247) {
    $248 = $22;
    $31 = $248;
    $249 = $29;
    $30 = $249;
    $250 = $21;
    _append_table_1147($45,$250);
   } else {
    $251 = $44;
    $252 = ($251|0)!=(0);
    if (!($252)) {
     $253 = $65;
     $254 = - $253;
     $255 = $31;
     $256 = $255 + $254;
     $31 = $256;
     $257 = $46;
     $258 = $17;
     $259 = ((($258)) + 16|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = ($257>>>0)<($260>>>0);
     if ($261) {
      $262 = $60;
      $263 = $31;
      $264 = $263 + $262;
      $31 = $264;
     }
     $265 = $43;
     $266 = ($265|0)!=(0);
     if (!($266)) {
      $267 = $17;
      $268 = (_large_interval_1152($267)|0);
      $269 = ($268|0)!=(0);
      if ($269) {
       break;
      }
      $43 = 1;
      $270 = $17;
      $271 = ((($270)) + 8|0);
      HEAP32[$271>>2] = 1;
     }
     $272 = $40;
     $273 = ($272|0)!=(0);
     do {
      if (!($273)) {
       $274 = $31;
       $275 = $30;
       $276 = $274 > $275;
       if (!($276)) {
        break;
       }
       $277 = $17;
       $278 = (_increase_nrmax_1153($277)|0);
       $279 = ($278|0)!=(0);
       if ($279) {
        break L53;
       }
      }
     } while(0);
     $280 = $21;
     _append_table_1147($45,$280);
     _qelg_1154($45,$32,$33);
     $281 = $35;
     $282 = (($281) + 1)|0;
     $35 = $282;
     $283 = $35;
     $284 = ($283>>>0)>(5);
     do {
      if ($284) {
       $285 = $24;
       $286 = $22;
       $287 = 0.001 * $286;
       $288 = $285 < $287;
       if (!($288)) {
        break;
       }
       $39 = 5;
      }
     } while(0);
     $289 = +HEAPF64[$33>>3];
     $290 = $24;
     $291 = $289 < $290;
     if ($291) {
      $35 = 0;
      $292 = +HEAPF64[$33>>3];
      $24 = $292;
      $293 = +HEAPF64[$32>>3];
      $23 = $293;
      $294 = $31;
      $34 = $294;
      $295 = $14;
      $296 = $15;
      $297 = +HEAPF64[$32>>3];
      $298 = (+Math_abs((+$297)));
      $299 = $296 * $298;
      $300 = (+_GSL_MAX_DBL($295,$299));
      $30 = $300;
      $301 = $24;
      $302 = $30;
      $303 = $301 <= $302;
      if ($303) {
       label = 57;
       break L26;
      }
     }
     $304 = HEAP32[$45>>2]|0;
     $305 = ($304|0)==(1);
     if ($305) {
      $44 = 1;
     }
     $306 = $39;
     $307 = ($306|0)==(5);
     if ($307) {
      label = 57;
      break L26;
     }
     $308 = $17;
     _reset_nrmax_1155($308);
     $43 = 0;
     $309 = $22;
     $31 = $309;
    }
   }
  } while(0);
  $310 = $41;
  $311 = $16;
  $312 = ($310>>>0)<($311>>>0);
  if (!($312)) {
   label = 57;
   break;
  }
 }
 if ((label|0) == 35) {
  $39 = 1;
  label = 57;
 }
 L82: do {
  if ((label|0) == 57) {
   $313 = $23;
   $314 = $18;
   HEAPF64[$314>>3] = $313;
   $315 = $24;
   $316 = $19;
   HEAPF64[$316>>3] = $315;
   $317 = $24;
   $318 = $317 == 1.7976931348623157E+308;
   if ($318) {
    label = 72;
   } else {
    $319 = $39;
    $320 = ($319|0)!=(0);
    $321 = $40;
    $322 = ($321|0)!=(0);
    $or$cond9 = $320 | $322;
    do {
     if ($or$cond9) {
      $323 = $40;
      $324 = ($323|0)!=(0);
      if ($324) {
       $325 = $34;
       $326 = $24;
       $327 = $326 + $325;
       $24 = $327;
      }
      $328 = $39;
      $329 = ($328|0)==(0);
      if ($329) {
       $39 = 3;
      }
      $330 = $23;
      $331 = $330 != 0.0;
      $332 = $21;
      $333 = $332 != 0.0;
      $or$cond12 = $331 & $333;
      $334 = $24;
      if ($or$cond12) {
       $335 = $23;
       $336 = (+Math_abs((+$335)));
       $337 = $334 / $336;
       $338 = $22;
       $339 = $21;
       $340 = (+Math_abs((+$339)));
       $341 = $338 / $340;
       $342 = $337 > $341;
       if ($342) {
        label = 72;
        break L82;
       } else {
        break;
       }
      }
      $343 = $22;
      $344 = $334 > $343;
      if ($344) {
       label = 72;
       break L82;
      }
      $345 = $21;
      $346 = $345 == 0.0;
      if ($346) {
       break L82;
      }
     }
    } while(0);
    $347 = $23;
    $348 = (+Math_abs((+$347)));
    $349 = $21;
    $350 = (+Math_abs((+$349)));
    $351 = (+_GSL_MAX_DBL($348,$350));
    $67 = $351;
    $352 = $42;
    $353 = ($352|0)!=(0);
    if (!($353)) {
     $354 = $67;
     $355 = +HEAPF64[$27>>3];
     $356 = 0.01 * $355;
     $357 = $354 < $356;
     if ($357) {
      break;
     }
    }
    $358 = $23;
    $359 = $21;
    $360 = $358 / $359;
    $68 = $360;
    $361 = $68;
    $362 = $361 < 0.01;
    $363 = $68;
    $364 = $363 > 100.0;
    $or$cond15 = $362 | $364;
    if (!($or$cond15)) {
     $365 = $22;
     $366 = $21;
     $367 = (+Math_abs((+$366)));
     $368 = $365 > $367;
     if (!($368)) {
      break;
     }
    }
    $39 = 6;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $369 = $17;
  $370 = (+_sum_results_1156($369));
  $371 = $18;
  HEAPF64[$371>>3] = $370;
  $372 = $22;
  $373 = $19;
  HEAPF64[$373>>3] = $372;
 }
 $374 = $39;
 $375 = ($374|0)>(2);
 if ($375) {
  $376 = $39;
  $377 = (($376) + -1)|0;
  $39 = $377;
 }
 $378 = $39;
 $379 = ($378|0)==(0);
 if ($379) {
  $10 = 0;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 $380 = $39;
 $381 = ($380|0)==(1);
 if ($381) {
  _gsl_error(82296,82122,543,11);
  $10 = 11;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 $382 = $39;
 $383 = ($382|0)==(2);
 if ($383) {
  _gsl_error(82334,82122,548,18);
  $10 = 18;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 $384 = $39;
 $385 = ($384|0)==(3);
 if ($385) {
  _gsl_error(82383,82122,553,21);
  $10 = 21;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 $386 = $39;
 $387 = ($386|0)==(4);
 if ($387) {
  _gsl_error(82440,82122,558,18);
  $10 = 18;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 $388 = $39;
 $389 = ($388|0)==(5);
 if ($389) {
  _gsl_error(82491,82122,563,22);
  $10 = 22;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 } else {
  _gsl_error(82535,82122,567,5);
  $10 = 5;
  $390 = $10;
  STACKTOP = sp;return ($390|0);
 }
 return (0)|0;
}
function _initialise_1139($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = ((($10)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = $4;
 $13 = $3;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 HEAPF64[$15>>3] = $12;
 $16 = $5;
 $17 = $3;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 HEAPF64[$19>>3] = $16;
 $20 = $3;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 HEAPF64[$22>>3] = 0.0;
 $23 = $3;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 HEAPF64[$25>>3] = 0.0;
 $26 = $3;
 $27 = ((($26)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$28>>2] = 0;
 $29 = $3;
 $30 = ((($29)) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$31>>2] = 0;
 $32 = $3;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function _set_initial_result_1143($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 1;
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 HEAPF64[$11>>3] = $8;
 $12 = $5;
 $13 = $3;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 HEAPF64[$15>>3] = $12;
 STACKTOP = sp;return;
}
function _initialise_table_1146($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 424|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _append_table_1147($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $4 = $6;
 $7 = $3;
 $8 = $2;
 $9 = ((($8)) + 8|0);
 $10 = $4;
 $11 = (($9) + ($10<<3)|0);
 HEAPF64[$11>>3] = $7;
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 STACKTOP = sp;return;
}
function _test_positivity_1148($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (+Math_abs((+$5)));
 $7 = $3;
 $8 = 0.99999999999998889 * $7;
 $9 = $6 >= $8;
 $10 = $9&1;
 $4 = $10;
 $11 = $4;
 STACKTOP = sp;return ($11|0);
}
function _retrieve_1149($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $5;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $10 = $17;
 $18 = $5;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $11 = $20;
 $21 = $5;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $12 = $23;
 $24 = $5;
 $25 = ((($24)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $13 = $26;
 $27 = $5;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $14 = $29;
 $30 = $11;
 $31 = $10;
 $32 = (($30) + ($31<<3)|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $6;
 HEAPF64[$34>>3] = $33;
 $35 = $12;
 $36 = $10;
 $37 = (($35) + ($36<<3)|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $7;
 HEAPF64[$39>>3] = $38;
 $40 = $13;
 $41 = $10;
 $42 = (($40) + ($41<<3)|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $8;
 HEAPF64[$44>>3] = $43;
 $45 = $14;
 $46 = $10;
 $47 = (($45) + ($46<<3)|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $9;
 HEAPF64[$49>>3] = $48;
 STACKTOP = sp;return;
}
function _subinterval_too_small_1150($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 2.2204460492503131E-16;
 $7 = 2.2250738585072014E-308;
 $10 = $4;
 $11 = (+Math_abs((+$10)));
 $12 = $11 + 2.2250738585072014E-305;
 $13 = 1.0000000000000222 * $12;
 $8 = $13;
 $14 = $3;
 $15 = (+Math_abs((+$14)));
 $16 = $8;
 $17 = $15 <= $16;
 if (!($17)) {
  $23 = 0;
  $22 = $23&1;
  $9 = $22;
  $24 = $9;
  STACKTOP = sp;return ($24|0);
 }
 $18 = $5;
 $19 = (+Math_abs((+$18)));
 $20 = $8;
 $21 = $19 <= $20;
 $23 = $21;
 $22 = $23&1;
 $9 = $22;
 $24 = $9;
 STACKTOP = sp;return ($24|0);
}
function _update_1151($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $26 = $9;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $18 = $28;
 $29 = $9;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $19 = $31;
 $32 = $9;
 $33 = ((($32)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $20 = $34;
 $35 = $9;
 $36 = ((($35)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $21 = $37;
 $38 = $9;
 $39 = ((($38)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $22 = $40;
 $41 = $9;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $23 = $43;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $24 = $46;
 $47 = $9;
 $48 = ((($47)) + 40|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $23;
 $51 = (($49) + ($50<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 $25 = $53;
 $54 = $17;
 $55 = $13;
 $56 = $54 > $55;
 if ($56) {
  $57 = $14;
  $58 = $18;
  $59 = $23;
  $60 = (($58) + ($59<<3)|0);
  HEAPF64[$60>>3] = $57;
  $61 = $16;
  $62 = $20;
  $63 = $23;
  $64 = (($62) + ($63<<3)|0);
  HEAPF64[$64>>3] = $61;
  $65 = $17;
  $66 = $21;
  $67 = $23;
  $68 = (($66) + ($67<<3)|0);
  HEAPF64[$68>>3] = $65;
  $69 = $25;
  $70 = $22;
  $71 = $23;
  $72 = (($70) + ($71<<2)|0);
  HEAP32[$72>>2] = $69;
  $73 = $10;
  $74 = $18;
  $75 = $24;
  $76 = (($74) + ($75<<3)|0);
  HEAPF64[$76>>3] = $73;
  $77 = $11;
  $78 = $19;
  $79 = $24;
  $80 = (($78) + ($79<<3)|0);
  HEAPF64[$80>>3] = $77;
  $81 = $12;
  $82 = $20;
  $83 = $24;
  $84 = (($82) + ($83<<3)|0);
  HEAPF64[$84>>3] = $81;
  $85 = $13;
  $86 = $21;
  $87 = $24;
  $88 = (($86) + ($87<<3)|0);
  HEAPF64[$88>>3] = $85;
  $89 = $25;
  $90 = $22;
  $91 = $24;
  $92 = (($90) + ($91<<2)|0);
  HEAP32[$92>>2] = $89;
 } else {
  $93 = $11;
  $94 = $19;
  $95 = $23;
  $96 = (($94) + ($95<<3)|0);
  HEAPF64[$96>>3] = $93;
  $97 = $12;
  $98 = $20;
  $99 = $23;
  $100 = (($98) + ($99<<3)|0);
  HEAPF64[$100>>3] = $97;
  $101 = $13;
  $102 = $21;
  $103 = $23;
  $104 = (($102) + ($103<<3)|0);
  HEAPF64[$104>>3] = $101;
  $105 = $25;
  $106 = $22;
  $107 = $23;
  $108 = (($106) + ($107<<2)|0);
  HEAP32[$108>>2] = $105;
  $109 = $14;
  $110 = $18;
  $111 = $24;
  $112 = (($110) + ($111<<3)|0);
  HEAPF64[$112>>3] = $109;
  $113 = $15;
  $114 = $19;
  $115 = $24;
  $116 = (($114) + ($115<<3)|0);
  HEAPF64[$116>>3] = $113;
  $117 = $16;
  $118 = $20;
  $119 = $24;
  $120 = (($118) + ($119<<3)|0);
  HEAPF64[$120>>3] = $117;
  $121 = $17;
  $122 = $21;
  $123 = $24;
  $124 = (($122) + ($123<<3)|0);
  HEAPF64[$124>>3] = $121;
  $125 = $25;
  $126 = $22;
  $127 = $24;
  $128 = (($126) + ($127<<2)|0);
  HEAP32[$128>>2] = $125;
 }
 $129 = $9;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($131) + 1)|0;
 HEAP32[$130>>2] = $132;
 $133 = $25;
 $134 = $9;
 $135 = ((($134)) + 16|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($133>>>0)>($136>>>0);
 if (!($137)) {
  $141 = $9;
  _qpsrt_1163($141);
  STACKTOP = sp;return;
 }
 $138 = $25;
 $139 = $9;
 $140 = ((($139)) + 16|0);
 HEAP32[$140>>2] = $138;
 $141 = $9;
 _qpsrt_1163($141);
 STACKTOP = sp;return;
}
function _large_interval_1152($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 $11 = $4;
 $12 = $3;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)<($17>>>0);
 if ($18) {
  $1 = 1;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 } else {
  $1 = 0;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _increase_nrmax_1153($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $4 = $13;
 $14 = $2;
 $15 = ((($14)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $6 = $16;
 $17 = $2;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $7 = $19;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $8 = $21;
 $22 = $2;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 1)|0;
 $9 = $25;
 $26 = $9;
 $27 = $8;
 $28 = (($27>>>0) / 2)&-1;
 $29 = (1 + ($28))|0;
 $30 = ($26>>>0)>($29>>>0);
 if ($30) {
  $31 = $8;
  $32 = (($31) + 1)|0;
  $33 = $9;
  $34 = (($32) - ($33))|0;
  $5 = $34;
 } else {
  $35 = $9;
  $5 = $35;
 }
 $36 = $4;
 $3 = $36;
 while(1) {
  $37 = $3;
  $38 = $5;
  $39 = ($37|0)<=($38|0);
  if (!($39)) {
   label = 9;
   break;
  }
  $40 = $7;
  $41 = $2;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($40) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $10 = $45;
  $46 = $10;
  $47 = $2;
  $48 = ((($47)) + 12|0);
  HEAP32[$48>>2] = $46;
  $49 = $6;
  $50 = $10;
  $51 = (($49) + ($50<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $2;
  $54 = ((($53)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52>>>0)<($55>>>0);
  if ($56) {
   label = 7;
   break;
  }
  $57 = $2;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$58>>2] = $60;
  $61 = $3;
  $62 = (($61) + 1)|0;
  $3 = $62;
 }
 if ((label|0) == 7) {
  $1 = 1;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 9) {
  $1 = 0;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _qelg_1154($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0.0;
 var $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0.0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0;
 var $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $35 = $3;
 $36 = ((($35)) + 8|0);
 $6 = $36;
 $37 = $3;
 $38 = ((($37)) + 432|0);
 $7 = $38;
 $39 = $3;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) - 1)|0;
 $8 = $41;
 $42 = $6;
 $43 = $8;
 $44 = (($42) + ($43<<3)|0);
 $45 = +HEAPF64[$44>>3];
 $9 = $45;
 $10 = 1.7976931348623157E+308;
 $46 = $9;
 $47 = (+Math_abs((+$46)));
 $48 = 1.1102230246251565E-15 * $47;
 $11 = $48;
 $49 = $8;
 $50 = (($49>>>0) / 2)&-1;
 $12 = $50;
 $51 = $8;
 $13 = $51;
 $52 = $8;
 $14 = $52;
 $53 = $3;
 $54 = ((($53)) + 424|0);
 $55 = HEAP32[$54>>2]|0;
 $16 = $55;
 $56 = $9;
 $57 = $4;
 HEAPF64[$57>>3] = $56;
 $58 = $5;
 HEAPF64[$58>>3] = 1.7976931348623157E+308;
 $59 = $8;
 $60 = ($59>>>0)<(2);
 if ($60) {
  $61 = $9;
  $62 = $4;
  HEAPF64[$62>>3] = $61;
  $63 = $10;
  $64 = $11;
  $65 = (+_GSL_MAX_DBL($63,$64));
  $66 = $5;
  HEAPF64[$66>>3] = $65;
  STACKTOP = sp;return;
 }
 $67 = $6;
 $68 = $8;
 $69 = (($67) + ($68<<3)|0);
 $70 = +HEAPF64[$69>>3];
 $71 = $6;
 $72 = $8;
 $73 = (($72) + 2)|0;
 $74 = (($71) + ($73<<3)|0);
 HEAPF64[$74>>3] = $70;
 $75 = $6;
 $76 = $8;
 $77 = (($75) + ($76<<3)|0);
 HEAPF64[$77>>3] = 1.7976931348623157E+308;
 $15 = 0;
 while(1) {
  $78 = $15;
  $79 = $12;
  $80 = ($78>>>0)<($79>>>0);
  if (!($80)) {
   break;
  }
  $81 = $6;
  $82 = $8;
  $83 = $15;
  $84 = $83<<1;
  $85 = (($82) - ($84))|0;
  $86 = (($85) + 2)|0;
  $87 = (($81) + ($86<<3)|0);
  $88 = +HEAPF64[$87>>3];
  $17 = $88;
  $89 = $6;
  $90 = $8;
  $91 = $15;
  $92 = $91<<1;
  $93 = (($90) - ($92))|0;
  $94 = (($93) - 2)|0;
  $95 = (($89) + ($94<<3)|0);
  $96 = +HEAPF64[$95>>3];
  $18 = $96;
  $97 = $6;
  $98 = $8;
  $99 = $15;
  $100 = $99<<1;
  $101 = (($98) - ($100))|0;
  $102 = (($101) - 1)|0;
  $103 = (($97) + ($102<<3)|0);
  $104 = +HEAPF64[$103>>3];
  $19 = $104;
  $105 = $17;
  $20 = $105;
  $106 = $19;
  $107 = (+Math_abs((+$106)));
  $21 = $107;
  $108 = $20;
  $109 = $19;
  $110 = $108 - $109;
  $22 = $110;
  $111 = $22;
  $112 = (+Math_abs((+$111)));
  $23 = $112;
  $113 = $20;
  $114 = (+Math_abs((+$113)));
  $115 = $21;
  $116 = (+_GSL_MAX_DBL($114,$115));
  $117 = $116 * 2.2204460492503131E-16;
  $24 = $117;
  $118 = $19;
  $119 = $18;
  $120 = $118 - $119;
  $25 = $120;
  $121 = $25;
  $122 = (+Math_abs((+$121)));
  $26 = $122;
  $123 = $21;
  $124 = $18;
  $125 = (+Math_abs((+$124)));
  $126 = (+_GSL_MAX_DBL($123,$125));
  $127 = $126 * 2.2204460492503131E-16;
  $27 = $127;
  $128 = $23;
  $129 = $24;
  $130 = $128 <= $129;
  if ($130) {
   $131 = $26;
   $132 = $27;
   $133 = $131 <= $132;
   if ($133) {
    label = 7;
    break;
   }
  }
  $146 = $6;
  $147 = $8;
  $148 = $15;
  $149 = $148<<1;
  $150 = (($147) - ($149))|0;
  $151 = (($146) + ($150<<3)|0);
  $152 = +HEAPF64[$151>>3];
  $28 = $152;
  $153 = $19;
  $154 = $6;
  $155 = $8;
  $156 = $15;
  $157 = $156<<1;
  $158 = (($155) - ($157))|0;
  $159 = (($154) + ($158<<3)|0);
  HEAPF64[$159>>3] = $153;
  $160 = $19;
  $161 = $28;
  $162 = $160 - $161;
  $29 = $162;
  $163 = $29;
  $164 = (+Math_abs((+$163)));
  $30 = $164;
  $165 = $21;
  $166 = $28;
  $167 = (+Math_abs((+$166)));
  $168 = (+_GSL_MAX_DBL($165,$167));
  $169 = $168 * 2.2204460492503131E-16;
  $31 = $169;
  $170 = $30;
  $171 = $31;
  $172 = $170 <= $171;
  if ($172) {
   label = 11;
   break;
  }
  $173 = $23;
  $174 = $24;
  $175 = $173 <= $174;
  if ($175) {
   label = 11;
   break;
  }
  $176 = $26;
  $177 = $27;
  $178 = $176 <= $177;
  if ($178) {
   label = 11;
   break;
  }
  $181 = $29;
  $182 = 1.0 / $181;
  $183 = $22;
  $184 = 1.0 / $183;
  $185 = $182 + $184;
  $186 = $25;
  $187 = 1.0 / $186;
  $188 = $185 - $187;
  $32 = $188;
  $189 = $32;
  $190 = $19;
  $191 = $189 * $190;
  $192 = (+Math_abs((+$191)));
  $193 = $192 <= 1.0E-4;
  if ($193) {
   label = 13;
   break;
  }
  $196 = $19;
  $197 = $32;
  $198 = 1.0 / $197;
  $199 = $196 + $198;
  $17 = $199;
  $200 = $17;
  $201 = $6;
  $202 = $8;
  $203 = $15;
  $204 = $203<<1;
  $205 = (($202) - ($204))|0;
  $206 = (($201) + ($205<<3)|0);
  HEAPF64[$206>>3] = $200;
  $207 = $23;
  $208 = $17;
  $209 = $20;
  $210 = $208 - $209;
  $211 = (+Math_abs((+$210)));
  $212 = $207 + $211;
  $213 = $26;
  $214 = $212 + $213;
  $33 = $214;
  $215 = $33;
  $216 = $5;
  $217 = +HEAPF64[$216>>3];
  $218 = $215 <= $217;
  if ($218) {
   $219 = $33;
   $220 = $5;
   HEAPF64[$220>>3] = $219;
   $221 = $17;
   $222 = $4;
   HEAPF64[$222>>3] = $221;
  }
  $223 = $15;
  $224 = (($223) + 1)|0;
  $15 = $224;
 }
 if ((label|0) == 7) {
  $134 = $17;
  $135 = $4;
  HEAPF64[$135>>3] = $134;
  $136 = $23;
  $137 = $26;
  $138 = $136 + $137;
  $10 = $138;
  $139 = $17;
  $140 = (+Math_abs((+$139)));
  $141 = 1.1102230246251565E-15 * $140;
  $11 = $141;
  $142 = $10;
  $143 = $11;
  $144 = (+_GSL_MAX_DBL($142,$143));
  $145 = $5;
  HEAPF64[$145>>3] = $144;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  $179 = $15;
  $180 = $179<<1;
  $14 = $180;
 }
 else if ((label|0) == 13) {
  $194 = $15;
  $195 = $194<<1;
  $14 = $195;
 }
 $34 = 49;
 $225 = $14;
 $226 = ($225|0)==(49);
 if ($226) {
  $14 = 48;
 }
 $227 = $13;
 $228 = (($227>>>0) % 2)&-1;
 $229 = ($228|0)==(1);
 $15 = 0;
 L27: do {
  if ($229) {
   while(1) {
    $230 = $15;
    $231 = $12;
    $232 = ($230>>>0)<=($231>>>0);
    if (!($232)) {
     break L27;
    }
    $233 = $6;
    $234 = $15;
    $235 = $234<<1;
    $236 = (($235) + 3)|0;
    $237 = (($233) + ($236<<3)|0);
    $238 = +HEAPF64[$237>>3];
    $239 = $6;
    $240 = $15;
    $241 = $240<<1;
    $242 = (1 + ($241))|0;
    $243 = (($239) + ($242<<3)|0);
    HEAPF64[$243>>3] = $238;
    $244 = $15;
    $245 = (($244) + 1)|0;
    $15 = $245;
   }
  } else {
   while(1) {
    $246 = $15;
    $247 = $12;
    $248 = ($246>>>0)<=($247>>>0);
    if (!($248)) {
     break L27;
    }
    $249 = $6;
    $250 = $15;
    $251 = $250<<1;
    $252 = (($251) + 2)|0;
    $253 = (($249) + ($252<<3)|0);
    $254 = +HEAPF64[$253>>3];
    $255 = $6;
    $256 = $15;
    $257 = $256<<1;
    $258 = (($255) + ($257<<3)|0);
    HEAPF64[$258>>3] = $254;
    $259 = $15;
    $260 = (($259) + 1)|0;
    $15 = $260;
   }
  }
 } while(0);
 $261 = $13;
 $262 = $14;
 $263 = ($261|0)!=($262|0);
 L37: do {
  if ($263) {
   $15 = 0;
   while(1) {
    $264 = $15;
    $265 = $14;
    $266 = ($264>>>0)<=($265>>>0);
    if (!($266)) {
     break L37;
    }
    $267 = $6;
    $268 = $13;
    $269 = $14;
    $270 = (($268) - ($269))|0;
    $271 = $15;
    $272 = (($270) + ($271))|0;
    $273 = (($267) + ($272<<3)|0);
    $274 = +HEAPF64[$273>>3];
    $275 = $6;
    $276 = $15;
    $277 = (($275) + ($276<<3)|0);
    HEAPF64[$277>>3] = $274;
    $278 = $15;
    $279 = (($278) + 1)|0;
    $15 = $279;
   }
  }
 } while(0);
 $280 = $14;
 $281 = (($280) + 1)|0;
 $282 = $3;
 HEAP32[$282>>2] = $281;
 $283 = $16;
 $284 = ($283>>>0)<(3);
 $285 = $4;
 $286 = +HEAPF64[$285>>3];
 $287 = $7;
 if ($284) {
  $288 = $16;
  $289 = (($287) + ($288<<3)|0);
  HEAPF64[$289>>3] = $286;
  $290 = $5;
  HEAPF64[$290>>3] = 1.7976931348623157E+308;
 } else {
  $291 = ((($287)) + 16|0);
  $292 = +HEAPF64[$291>>3];
  $293 = $286 - $292;
  $294 = (+Math_abs((+$293)));
  $295 = $4;
  $296 = +HEAPF64[$295>>3];
  $297 = $7;
  $298 = ((($297)) + 8|0);
  $299 = +HEAPF64[$298>>3];
  $300 = $296 - $299;
  $301 = (+Math_abs((+$300)));
  $302 = $294 + $301;
  $303 = $4;
  $304 = +HEAPF64[$303>>3];
  $305 = $7;
  $306 = +HEAPF64[$305>>3];
  $307 = $304 - $306;
  $308 = (+Math_abs((+$307)));
  $309 = $302 + $308;
  $310 = $5;
  HEAPF64[$310>>3] = $309;
  $311 = $7;
  $312 = ((($311)) + 8|0);
  $313 = +HEAPF64[$312>>3];
  $314 = $7;
  HEAPF64[$314>>3] = $313;
  $315 = $7;
  $316 = ((($315)) + 16|0);
  $317 = +HEAPF64[$316>>3];
  $318 = $7;
  $319 = ((($318)) + 8|0);
  HEAPF64[$319>>3] = $317;
  $320 = $4;
  $321 = +HEAPF64[$320>>3];
  $322 = $7;
  $323 = ((($322)) + 16|0);
  HEAPF64[$323>>3] = $321;
 }
 $324 = $16;
 $325 = (($324) + 1)|0;
 $326 = $3;
 $327 = ((($326)) + 424|0);
 HEAP32[$327>>2] = $325;
 $328 = $5;
 $329 = +HEAPF64[$328>>3];
 $330 = $4;
 $331 = +HEAPF64[$330>>3];
 $332 = (+Math_abs((+$331)));
 $333 = 1.1102230246251565E-15 * $332;
 $334 = (+_GSL_MAX_DBL($329,$333));
 $335 = $5;
 HEAPF64[$335>>3] = $334;
 STACKTOP = sp;return;
}
function _reset_nrmax_1155($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = $7;
 STACKTOP = sp;return;
}
function _sum_results_1156($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 $5 = 0.0;
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = $3;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $4;
  $17 = (($15) + ($16<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $5;
  $20 = $19 + $18;
  $5 = $20;
  $21 = $4;
  $22 = (($21) + 1)|0;
  $4 = $22;
 }
 $23 = $5;
 STACKTOP = sp;return (+$23);
}
function _qpsrt_1163($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = $0;
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) - 1)|0;
 $2 = $16;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $3 = $18;
 $19 = $1;
 $20 = ((($19)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $4 = $21;
 $22 = $1;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $5 = $24;
 $25 = $1;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $11 = $27;
 $28 = $5;
 $29 = $11;
 $30 = (($28) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $12 = $31;
 $32 = $2;
 $33 = ($32>>>0)<(2);
 if ($33) {
  $34 = $5;
  HEAP32[$34>>2] = 0;
  $35 = $5;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = 1;
  $37 = $12;
  $38 = $1;
  $39 = ((($38)) + 12|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 }
 $40 = $4;
 $41 = $12;
 $42 = (($40) + ($41<<3)|0);
 $43 = +HEAPF64[$42>>3];
 $6 = $43;
 while(1) {
  $44 = $11;
  $45 = ($44>>>0)>(0);
  if (!($45)) {
   break;
  }
  $46 = $6;
  $47 = $4;
  $48 = $5;
  $49 = $11;
  $50 = (($49) - 1)|0;
  $51 = (($48) + ($50<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($47) + ($52<<3)|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $46 > $54;
  if (!($55)) {
   break;
  }
  $56 = $5;
  $57 = $11;
  $58 = (($57) - 1)|0;
  $59 = (($56) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $5;
  $62 = $11;
  $63 = (($61) + ($62<<2)|0);
  HEAP32[$63>>2] = $60;
  $64 = $11;
  $65 = (($64) + -1)|0;
  $11 = $65;
 }
 $66 = $2;
 $67 = $3;
 $68 = (($67>>>0) / 2)&-1;
 $69 = (($68) + 2)|0;
 $70 = ($66>>>0)<($69>>>0);
 if ($70) {
  $71 = $2;
  $10 = $71;
 } else {
  $72 = $3;
  $73 = $2;
  $74 = (($72) - ($73))|0;
  $75 = (($74) + 1)|0;
  $10 = $75;
 }
 $76 = $11;
 $77 = (($76) + 1)|0;
 $8 = $77;
 while(1) {
  $78 = $8;
  $79 = $10;
  $80 = ($78|0)<($79|0);
  if (!($80)) {
   break;
  }
  $81 = $6;
  $82 = $4;
  $83 = $5;
  $84 = $8;
  $85 = (($83) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($82) + ($86<<3)|0);
  $88 = +HEAPF64[$87>>3];
  $89 = $81 < $88;
  if (!($89)) {
   break;
  }
  $90 = $5;
  $91 = $8;
  $92 = (($90) + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $5;
  $95 = $8;
  $96 = (($95) - 1)|0;
  $97 = (($94) + ($96<<2)|0);
  HEAP32[$97>>2] = $93;
  $98 = $8;
  $99 = (($98) + 1)|0;
  $8 = $99;
 }
 $100 = $12;
 $101 = $5;
 $102 = $8;
 $103 = (($102) - 1)|0;
 $104 = (($101) + ($103<<2)|0);
 HEAP32[$104>>2] = $100;
 $105 = $4;
 $106 = $2;
 $107 = (($105) + ($106<<3)|0);
 $108 = +HEAPF64[$107>>3];
 $7 = $108;
 $109 = $10;
 $110 = (($109) - 1)|0;
 $9 = $110;
 while(1) {
  $111 = $9;
  $112 = $8;
  $113 = (($112) - 2)|0;
  $114 = ($111|0)>($113|0);
  if (!($114)) {
   break;
  }
  $115 = $7;
  $116 = $4;
  $117 = $5;
  $118 = $9;
  $119 = (($117) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($116) + ($120<<3)|0);
  $122 = +HEAPF64[$121>>3];
  $123 = $115 >= $122;
  if (!($123)) {
   break;
  }
  $124 = $5;
  $125 = $9;
  $126 = (($124) + ($125<<2)|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $5;
  $129 = $9;
  $130 = (($129) + 1)|0;
  $131 = (($128) + ($130<<2)|0);
  HEAP32[$131>>2] = $127;
  $132 = $9;
  $133 = (($132) + -1)|0;
  $9 = $133;
 }
 $134 = $2;
 $135 = $5;
 $136 = $9;
 $137 = (($136) + 1)|0;
 $138 = (($135) + ($137<<2)|0);
 HEAP32[$138>>2] = $134;
 $139 = $5;
 $140 = $11;
 $141 = (($139) + ($140<<2)|0);
 $142 = HEAP32[$141>>2]|0;
 $12 = $142;
 $143 = $12;
 $144 = $1;
 $145 = ((($144)) + 12|0);
 HEAP32[$145>>2] = $143;
 $146 = $11;
 $147 = $1;
 $148 = ((($147)) + 8|0);
 HEAP32[$148>>2] = $146;
 STACKTOP = sp;return;
}
function _gsl_integration_qk15($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $14 = sp + 64|0;
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 _gsl_integration_qk(8,27664,27728,27760,$14,$15,$16,$17,$18,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function _gsl_integration_qk21($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $14 = sp + 96|0;
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 _gsl_integration_qk(11,27824,27920,27968,$14,$15,$16,$17,$18,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function _gsl_integration_qk31($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $14 = sp + 128|0;
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 _gsl_integration_qk(16,28064,28192,28256,$14,$15,$16,$17,$18,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function _gsl_integration_qk41($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $14 = sp + 176|0;
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 _gsl_integration_qk(21,28384,28560,28640,$14,$15,$16,$17,$18,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function _gsl_integration_qk51($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $14 = sp + 208|0;
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 _gsl_integration_qk(26,28816,29024,29136,$14,$15,$16,$17,$18,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function _gsl_integration_qk61($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $14 = sp + 256|0;
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 _gsl_integration_qk(31,29344,29600,29728,$14,$15,$16,$17,$18,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function _gsl_integration_qk($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = +$8;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0;
 var $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0;
 var $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0;
 var $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $46 = $20;
 $47 = $21;
 $48 = $46 + $47;
 $49 = 0.5 * $48;
 $26 = $49;
 $50 = $21;
 $51 = $20;
 $52 = $50 - $51;
 $53 = 0.5 * $52;
 $27 = $53;
 $54 = $27;
 $55 = (+Math_abs((+$54)));
 $28 = $55;
 $56 = $19;
 $57 = HEAP32[$56>>2]|0;
 $58 = $26;
 $59 = $19;
 $60 = ((($59)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (+FUNCTION_TABLE_ddi[$57 & 31]($58,$61));
 $29 = $62;
 $30 = 0.0;
 $63 = $29;
 $64 = $16;
 $65 = $13;
 $66 = (($65) - 1)|0;
 $67 = (($64) + ($66<<3)|0);
 $68 = +HEAPF64[$67>>3];
 $69 = $63 * $68;
 $31 = $69;
 $70 = $31;
 $71 = (+Math_abs((+$70)));
 $32 = $71;
 $33 = 0.0;
 $34 = 0.0;
 $35 = 0.0;
 $72 = $13;
 $73 = (($72|0) % 2)&-1;
 $74 = ($73|0)==(0);
 if ($74) {
  $75 = $29;
  $76 = $15;
  $77 = $13;
  $78 = (($77|0) / 2)&-1;
  $79 = (($78) - 1)|0;
  $80 = (($76) + ($79<<3)|0);
  $81 = +HEAPF64[$80>>3];
  $82 = $75 * $81;
  $30 = $82;
 }
 $36 = 0;
 while(1) {
  $83 = $36;
  $84 = $13;
  $85 = (($84) - 1)|0;
  $86 = (($85|0) / 2)&-1;
  $87 = ($83|0)<($86|0);
  if (!($87)) {
   break;
  }
  $88 = $36;
  $89 = $88<<1;
  $90 = (($89) + 1)|0;
  $37 = $90;
  $91 = $27;
  $92 = $14;
  $93 = $37;
  $94 = (($92) + ($93<<3)|0);
  $95 = +HEAPF64[$94>>3];
  $96 = $91 * $95;
  $38 = $96;
  $97 = $19;
  $98 = HEAP32[$97>>2]|0;
  $99 = $26;
  $100 = $38;
  $101 = $99 - $100;
  $102 = $19;
  $103 = ((($102)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (+FUNCTION_TABLE_ddi[$98 & 31]($101,$104));
  $39 = $105;
  $106 = $19;
  $107 = HEAP32[$106>>2]|0;
  $108 = $26;
  $109 = $38;
  $110 = $108 + $109;
  $111 = $19;
  $112 = ((($111)) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (+FUNCTION_TABLE_ddi[$107 & 31]($110,$113));
  $40 = $114;
  $115 = $39;
  $116 = $40;
  $117 = $115 + $116;
  $41 = $117;
  $118 = $39;
  $119 = $17;
  $120 = $37;
  $121 = (($119) + ($120<<3)|0);
  HEAPF64[$121>>3] = $118;
  $122 = $40;
  $123 = $18;
  $124 = $37;
  $125 = (($123) + ($124<<3)|0);
  HEAPF64[$125>>3] = $122;
  $126 = $15;
  $127 = $36;
  $128 = (($126) + ($127<<3)|0);
  $129 = +HEAPF64[$128>>3];
  $130 = $41;
  $131 = $129 * $130;
  $132 = $30;
  $133 = $132 + $131;
  $30 = $133;
  $134 = $16;
  $135 = $37;
  $136 = (($134) + ($135<<3)|0);
  $137 = +HEAPF64[$136>>3];
  $138 = $41;
  $139 = $137 * $138;
  $140 = $31;
  $141 = $140 + $139;
  $31 = $141;
  $142 = $16;
  $143 = $37;
  $144 = (($142) + ($143<<3)|0);
  $145 = +HEAPF64[$144>>3];
  $146 = $39;
  $147 = (+Math_abs((+$146)));
  $148 = $40;
  $149 = (+Math_abs((+$148)));
  $150 = $147 + $149;
  $151 = $145 * $150;
  $152 = $32;
  $153 = $152 + $151;
  $32 = $153;
  $154 = $36;
  $155 = (($154) + 1)|0;
  $36 = $155;
 }
 $36 = 0;
 while(1) {
  $156 = $36;
  $157 = $13;
  $158 = (($157|0) / 2)&-1;
  $159 = ($156|0)<($158|0);
  if (!($159)) {
   break;
  }
  $160 = $36;
  $161 = $160<<1;
  $42 = $161;
  $162 = $27;
  $163 = $14;
  $164 = $42;
  $165 = (($163) + ($164<<3)|0);
  $166 = +HEAPF64[$165>>3];
  $167 = $162 * $166;
  $43 = $167;
  $168 = $19;
  $169 = HEAP32[$168>>2]|0;
  $170 = $26;
  $171 = $43;
  $172 = $170 - $171;
  $173 = $19;
  $174 = ((($173)) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (+FUNCTION_TABLE_ddi[$169 & 31]($172,$175));
  $44 = $176;
  $177 = $19;
  $178 = HEAP32[$177>>2]|0;
  $179 = $26;
  $180 = $43;
  $181 = $179 + $180;
  $182 = $19;
  $183 = ((($182)) + 4|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (+FUNCTION_TABLE_ddi[$178 & 31]($181,$184));
  $45 = $185;
  $186 = $44;
  $187 = $17;
  $188 = $42;
  $189 = (($187) + ($188<<3)|0);
  HEAPF64[$189>>3] = $186;
  $190 = $45;
  $191 = $18;
  $192 = $42;
  $193 = (($191) + ($192<<3)|0);
  HEAPF64[$193>>3] = $190;
  $194 = $16;
  $195 = $42;
  $196 = (($194) + ($195<<3)|0);
  $197 = +HEAPF64[$196>>3];
  $198 = $44;
  $199 = $45;
  $200 = $198 + $199;
  $201 = $197 * $200;
  $202 = $31;
  $203 = $202 + $201;
  $31 = $203;
  $204 = $16;
  $205 = $42;
  $206 = (($204) + ($205<<3)|0);
  $207 = +HEAPF64[$206>>3];
  $208 = $44;
  $209 = (+Math_abs((+$208)));
  $210 = $45;
  $211 = (+Math_abs((+$210)));
  $212 = $209 + $211;
  $213 = $207 * $212;
  $214 = $32;
  $215 = $214 + $213;
  $32 = $215;
  $216 = $36;
  $217 = (($216) + 1)|0;
  $36 = $217;
 }
 $218 = $31;
 $219 = $218 * 0.5;
 $34 = $219;
 $220 = $16;
 $221 = $13;
 $222 = (($221) - 1)|0;
 $223 = (($220) + ($222<<3)|0);
 $224 = +HEAPF64[$223>>3];
 $225 = $29;
 $226 = $34;
 $227 = $225 - $226;
 $228 = (+Math_abs((+$227)));
 $229 = $224 * $228;
 $33 = $229;
 $36 = 0;
 while(1) {
  $230 = $36;
  $231 = $13;
  $232 = (($231) - 1)|0;
  $233 = ($230|0)<($232|0);
  if (!($233)) {
   break;
  }
  $234 = $16;
  $235 = $36;
  $236 = (($234) + ($235<<3)|0);
  $237 = +HEAPF64[$236>>3];
  $238 = $17;
  $239 = $36;
  $240 = (($238) + ($239<<3)|0);
  $241 = +HEAPF64[$240>>3];
  $242 = $34;
  $243 = $241 - $242;
  $244 = (+Math_abs((+$243)));
  $245 = $18;
  $246 = $36;
  $247 = (($245) + ($246<<3)|0);
  $248 = +HEAPF64[$247>>3];
  $249 = $34;
  $250 = $248 - $249;
  $251 = (+Math_abs((+$250)));
  $252 = $244 + $251;
  $253 = $237 * $252;
  $254 = $33;
  $255 = $254 + $253;
  $33 = $255;
  $256 = $36;
  $257 = (($256) + 1)|0;
  $36 = $257;
 }
 $258 = $31;
 $259 = $30;
 $260 = $258 - $259;
 $261 = $27;
 $262 = $260 * $261;
 $35 = $262;
 $263 = $27;
 $264 = $31;
 $265 = $264 * $263;
 $31 = $265;
 $266 = $28;
 $267 = $32;
 $268 = $267 * $266;
 $32 = $268;
 $269 = $28;
 $270 = $33;
 $271 = $270 * $269;
 $33 = $271;
 $272 = $31;
 $273 = $22;
 HEAPF64[$273>>3] = $272;
 $274 = $32;
 $275 = $24;
 HEAPF64[$275>>3] = $274;
 $276 = $33;
 $277 = $25;
 HEAPF64[$277>>3] = $276;
 $278 = $35;
 $279 = $32;
 $280 = $33;
 $281 = (+_rescale_error($278,$279,$280));
 $282 = $23;
 HEAPF64[$282>>3] = $281;
 STACKTOP = sp;return;
}
function _rescale_error($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (+Math_abs((+$8)));
 $3 = $9;
 $10 = $5;
 $11 = $10 != 0.0;
 $12 = $3;
 $13 = $12 != 0.0;
 $or$cond = $11 & $13;
 do {
  if ($or$cond) {
   $14 = $3;
   $15 = 200.0 * $14;
   $16 = $5;
   $17 = $15 / $16;
   $18 = (+Math_pow((+$17),1.5));
   $6 = $18;
   $19 = $6;
   $20 = $19 < 1.0;
   $21 = $5;
   if ($20) {
    $22 = $6;
    $23 = $21 * $22;
    $3 = $23;
    break;
   } else {
    $3 = $21;
    break;
   }
  }
 } while(0);
 $24 = $4;
 $25 = $24 > 2.0041683600089728E-294;
 if (!($25)) {
  $32 = $3;
  STACKTOP = sp;return (+$32);
 }
 $26 = $4;
 $27 = 1.1102230246251565E-14 * $26;
 $7 = $27;
 $28 = $7;
 $29 = $3;
 $30 = $28 > $29;
 if (!($30)) {
  $32 = $3;
  STACKTOP = sp;return (+$32);
 }
 $31 = $7;
 $3 = $31;
 $32 = $3;
 STACKTOP = sp;return (+$32);
}
function _gsl_integration_workspace_alloc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  _gsl_error(82564,82608,33,1);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $6 = (_malloc(44)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _gsl_error(82620,82608,42,8);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $9 = $2;
 $10 = $9<<3;
 $11 = (_malloc($10)|0);
 $12 = $3;
 $13 = ((($12)) + 20|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $3;
  _free($18);
  _gsl_error(82666,82608,52,8);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $19 = $2;
 $20 = $19<<3;
 $21 = (_malloc($20)|0);
 $22 = $3;
 $23 = ((($22)) + 24|0);
 HEAP32[$23>>2] = $21;
 $24 = $3;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = $3;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  _free($30);
  $31 = $3;
  _free($31);
  _gsl_error(82708,82608,63,8);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $32 = $2;
 $33 = $32<<3;
 $34 = (_malloc($33)|0);
 $35 = $3;
 $36 = ((($35)) + 28|0);
 HEAP32[$36>>2] = $34;
 $37 = $3;
 $38 = ((($37)) + 28|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  $41 = $3;
  $42 = ((($41)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  _free($43);
  $44 = $3;
  $45 = ((($44)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  _free($46);
  $47 = $3;
  _free($47);
  _gsl_error(82750,82608,75,8);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $48 = $2;
 $49 = $48<<3;
 $50 = (_malloc($49)|0);
 $51 = $3;
 $52 = ((($51)) + 32|0);
 HEAP32[$52>>2] = $50;
 $53 = $3;
 $54 = ((($53)) + 32|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = $3;
  $58 = ((($57)) + 28|0);
  $59 = HEAP32[$58>>2]|0;
  _free($59);
  $60 = $3;
  $61 = ((($60)) + 24|0);
  $62 = HEAP32[$61>>2]|0;
  _free($62);
  $63 = $3;
  $64 = ((($63)) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  _free($65);
  $66 = $3;
  _free($66);
  _gsl_error(82792,82608,89,8);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $67 = $2;
 $68 = $67<<2;
 $69 = (_malloc($68)|0);
 $70 = $3;
 $71 = ((($70)) + 36|0);
 HEAP32[$71>>2] = $69;
 $72 = $3;
 $73 = ((($72)) + 36|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  $76 = $3;
  $77 = ((($76)) + 32|0);
  $78 = HEAP32[$77>>2]|0;
  _free($78);
  $79 = $3;
  $80 = ((($79)) + 28|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
  $82 = $3;
  $83 = ((($82)) + 24|0);
  $84 = HEAP32[$83>>2]|0;
  _free($84);
  $85 = $3;
  $86 = ((($85)) + 20|0);
  $87 = HEAP32[$86>>2]|0;
  _free($87);
  $88 = $3;
  _free($88);
  _gsl_error(82834,82608,103,8);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $89 = $2;
 $90 = $89<<2;
 $91 = (_malloc($90)|0);
 $92 = $3;
 $93 = ((($92)) + 40|0);
 HEAP32[$93>>2] = $91;
 $94 = $3;
 $95 = ((($94)) + 40|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)==(0|0);
 $98 = $3;
 if ($97) {
  $99 = ((($98)) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
  $101 = $3;
  $102 = ((($101)) + 32|0);
  $103 = HEAP32[$102>>2]|0;
  _free($103);
  $104 = $3;
  $105 = ((($104)) + 28|0);
  $106 = HEAP32[$105>>2]|0;
  _free($106);
  $107 = $3;
  $108 = ((($107)) + 24|0);
  $109 = HEAP32[$108>>2]|0;
  _free($109);
  $110 = $3;
  $111 = ((($110)) + 20|0);
  $112 = HEAP32[$111>>2]|0;
  _free($112);
  $113 = $3;
  _free($113);
  _gsl_error(82834,82608,118,8);
  $1 = 0;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 } else {
  $114 = ((($98)) + 4|0);
  HEAP32[$114>>2] = 0;
  $115 = $2;
  $116 = $3;
  HEAP32[$116>>2] = $115;
  $117 = $3;
  $118 = ((($117)) + 16|0);
  HEAP32[$118>>2] = 0;
  $119 = $3;
  $1 = $119;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 return (0)|0;
}
function _gsl_integration_workspace_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 _free($15);
 $16 = $1;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 $19 = $1;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 _free($21);
 $22 = $1;
 _free($22);
 STACKTOP = sp;return;
}
function _gsl_poly_eval($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (($9) - 1)|0;
 $11 = (($8) + ($10<<3)|0);
 $12 = +HEAPF64[$11>>3];
 $7 = $12;
 $13 = $4;
 $14 = (($13) - 1)|0;
 $6 = $14;
 while(1) {
  $15 = $6;
  $16 = ($15|0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $3;
  $18 = $6;
  $19 = (($18) - 1)|0;
  $20 = (($17) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $5;
  $23 = $7;
  $24 = $22 * $23;
  $25 = $21 + $24;
  $7 = $25;
  $26 = $6;
  $27 = (($26) + -1)|0;
  $6 = $27;
 }
 $28 = $7;
 STACKTOP = sp;return (+$28);
}
function _gsl_ran_binomial($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0;
 var $317 = 0.0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0;
 var $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0;
 var $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0;
 var $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0;
 var $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $47 = $6;
 $48 = ($47|0)==(0);
 if ($48) {
  $3 = 0;
  $404 = $3;
  STACKTOP = sp;return ($404|0);
 }
 $49 = $5;
 $50 = $49 > 0.5;
 if ($50) {
  $51 = $5;
  $52 = 1.0 - $51;
  $5 = $52;
  $8 = 1;
 }
 $53 = $5;
 $54 = 1.0 - $53;
 $9 = $54;
 $55 = $5;
 $56 = $9;
 $57 = $55 / $56;
 $10 = $57;
 $58 = $6;
 $59 = (+($58>>>0));
 $60 = $5;
 $61 = $59 * $60;
 $11 = $61;
 $62 = $11;
 $63 = $62 < 14.0;
 L8: do {
  if ($63) {
   $64 = $9;
   $65 = $6;
   $66 = (+_gsl_pow_uint($64,$65));
   $12 = $66;
   while(1) {
    $67 = $12;
    $13 = $67;
    $68 = $4;
    $69 = (+_gsl_rng_uniform($68));
    $14 = $69;
    $7 = 0;
    while(1) {
     $70 = $7;
     $71 = ($70|0)<=(110);
     if (!($71)) {
      break;
     }
     $72 = $14;
     $73 = $13;
     $74 = $72 < $73;
     if ($74) {
      break L8;
     }
     $75 = $13;
     $76 = $14;
     $77 = $76 - $75;
     $14 = $77;
     $78 = $10;
     $79 = $6;
     $80 = $7;
     $81 = (($79) - ($80))|0;
     $82 = (+($81>>>0));
     $83 = $78 * $82;
     $84 = $7;
     $85 = (($84) + 1)|0;
     $86 = (+($85|0));
     $87 = $83 / $86;
     $88 = $13;
     $89 = $88 * $87;
     $13 = $89;
     $90 = $7;
     $91 = (($90) + 1)|0;
     $7 = $91;
    }
   }
  } else {
   $92 = $11;
   $93 = $5;
   $94 = $92 + $93;
   $16 = $94;
   $95 = $16;
   $96 = (~~(($95)));
   $17 = $96;
   $97 = $17;
   $98 = (+($97|0));
   $18 = $98;
   $99 = $18;
   $100 = $99 + 0.5;
   $19 = $100;
   $101 = $11;
   $102 = $9;
   $103 = $101 * $102;
   $20 = $103;
   $104 = $20;
   $105 = (+Math_sqrt((+$104)));
   $106 = 2.1949999999999998 * $105;
   $107 = $9;
   $108 = 4.5999999999999996 * $107;
   $109 = $106 - $108;
   $110 = (+Math_floor((+$109)));
   $111 = $110 + 0.5;
   $21 = $111;
   $112 = $19;
   $113 = $21;
   $114 = $112 - $113;
   $22 = $114;
   $115 = $19;
   $116 = $21;
   $117 = $115 + $116;
   $23 = $117;
   $118 = $18;
   $119 = 15.300000000000001 + $118;
   $120 = 20.5 / $119;
   $121 = 0.13400000000000001 + $120;
   $24 = $121;
   $122 = $21;
   $123 = $24;
   $124 = 1.0 + $123;
   $125 = $24;
   $126 = $124 + $125;
   $127 = $122 * $126;
   $25 = $127;
   $128 = $16;
   $129 = $22;
   $130 = $128 - $129;
   $131 = $16;
   $132 = $22;
   $133 = $5;
   $134 = $132 * $133;
   $135 = $131 - $134;
   $136 = $130 / $135;
   $26 = $136;
   $137 = $26;
   $138 = $26;
   $139 = 0.5 * $138;
   $140 = 1.0 + $139;
   $141 = $137 * $140;
   $27 = $141;
   $142 = $23;
   $143 = $16;
   $144 = $142 - $143;
   $145 = $23;
   $146 = $9;
   $147 = $145 * $146;
   $148 = $144 / $147;
   $28 = $148;
   $149 = $28;
   $150 = $28;
   $151 = 0.5 * $150;
   $152 = 1.0 + $151;
   $153 = $149 * $152;
   $29 = $153;
   $154 = $25;
   $155 = $24;
   $156 = $27;
   $157 = $155 / $156;
   $158 = $154 + $157;
   $30 = $158;
   $159 = $30;
   $160 = $24;
   $161 = $29;
   $162 = $160 / $161;
   $163 = $159 + $162;
   $31 = $163;
   L18: while(1) {
    $164 = $4;
    $165 = (+_gsl_rng_uniform($164));
    $166 = $31;
    $167 = $165 * $166;
    $34 = $167;
    $168 = $4;
    $169 = (+_gsl_rng_uniform($168));
    $35 = $169;
    $170 = $34;
    $171 = $21;
    $172 = $170 <= $171;
    if ($172) {
     break;
    }
    $181 = $34;
    $182 = $25;
    $183 = $181 <= $182;
    do {
     if ($183) {
      $184 = $22;
      $185 = $34;
      $186 = $21;
      $187 = $185 - $186;
      $188 = $24;
      $189 = $187 / $188;
      $190 = $184 + $189;
      $36 = $190;
      $191 = $35;
      $192 = $24;
      $193 = $191 * $192;
      $194 = $193 + 1.0;
      $195 = $36;
      $196 = $19;
      $197 = $195 - $196;
      $198 = (+Math_abs((+$197)));
      $199 = $21;
      $200 = $198 / $199;
      $201 = $194 - $200;
      $35 = $201;
      $202 = $35;
      $203 = $202 > 1.0;
      $204 = $35;
      $205 = $204 <= 0.0;
      $or$cond = $203 | $205;
      if ($or$cond) {
       continue L18;
      } else {
       $206 = $36;
       $207 = (~~(($206)));
       $7 = $207;
       break;
      }
     } else {
      $208 = $34;
      $209 = $30;
      $210 = $208 <= $209;
      if ($210) {
       $211 = $22;
       $212 = $35;
       $213 = (+Math_log((+$212)));
       $214 = $27;
       $215 = $213 / $214;
       $216 = $211 + $215;
       $217 = (~~(($216)));
       $7 = $217;
       $218 = $7;
       $219 = ($218|0)<(0);
       if ($219) {
        continue L18;
       } else {
        $220 = $34;
        $221 = $25;
        $222 = $220 - $221;
        $223 = $27;
        $224 = $222 * $223;
        $225 = $35;
        $226 = $225 * $224;
        $35 = $226;
        break;
       }
      } else {
       $227 = $23;
       $228 = $35;
       $229 = (+Math_log((+$228)));
       $230 = $29;
       $231 = $229 / $230;
       $232 = $227 - $231;
       $233 = (~~(($232)));
       $7 = $233;
       $234 = $7;
       $235 = (+($234|0));
       $236 = $6;
       $237 = (+($236>>>0));
       $238 = $235 > $237;
       if ($238) {
        continue L18;
       } else {
        $239 = $34;
        $240 = $30;
        $241 = $239 - $240;
        $242 = $29;
        $243 = $241 * $242;
        $244 = $35;
        $245 = $244 * $243;
        $35 = $245;
        break;
       }
      }
     }
    } while(0);
    $246 = $7;
    $247 = $17;
    $248 = (($246) - ($247))|0;
    $249 = (Math_abs(($248|0))|0);
    $15 = $249;
    $250 = $15;
    $251 = ($250|0)<=(20);
    if ($251) {
     $252 = $6;
     $253 = (($252) + 1)|0;
     $254 = (+($253>>>0));
     $255 = $10;
     $256 = $254 * $255;
     $37 = $256;
     $38 = 1.0;
     $257 = $35;
     $32 = $257;
     $258 = $17;
     $259 = $7;
     $260 = ($258|0)<($259|0);
     $261 = $17;
     L39: do {
      if ($260) {
       $262 = (($261) + 1)|0;
       $39 = $262;
       while(1) {
        $263 = $39;
        $264 = $7;
        $265 = ($263|0)<=($264|0);
        if (!($265)) {
         break L39;
        }
        $266 = $37;
        $267 = $39;
        $268 = (+($267|0));
        $269 = $266 / $268;
        $270 = $10;
        $271 = $269 - $270;
        $272 = $38;
        $273 = $272 * $271;
        $38 = $273;
        $274 = $39;
        $275 = (($274) + 1)|0;
        $39 = $275;
       }
      } else {
       $276 = $7;
       $277 = ($261|0)>($276|0);
       if ($277) {
        $278 = $7;
        $279 = (($278) + 1)|0;
        $40 = $279;
        while(1) {
         $280 = $40;
         $281 = $17;
         $282 = ($280|0)<=($281|0);
         if (!($282)) {
          break L39;
         }
         $283 = $37;
         $284 = $40;
         $285 = (+($284|0));
         $286 = $283 / $285;
         $287 = $10;
         $288 = $286 - $287;
         $289 = $38;
         $290 = $289 / $288;
         $38 = $290;
         $291 = $40;
         $292 = (($291) + 1)|0;
         $40 = $292;
        }
       }
      }
     } while(0);
     $293 = $38;
     $33 = $293;
    } else {
     $294 = $35;
     $295 = (+Math_log((+$294)));
     $32 = $295;
     $296 = $15;
     $297 = (+($296|0));
     $298 = $20;
     $299 = $298 / 2.0;
     $300 = $299 - 1.0;
     $301 = $297 < $300;
     if ($301) {
      $302 = $15;
      $303 = (+($302|0));
      $304 = $20;
      $305 = $303 / $304;
      $306 = $15;
      $307 = (+($306|0));
      $308 = $15;
      $309 = (+($308|0));
      $310 = $309 / 3.0;
      $311 = $310 + 0.625;
      $312 = $307 * $311;
      $313 = $312 + 0.16666666666666666;
      $314 = $20;
      $315 = $313 / $314;
      $316 = $315 + 0.5;
      $317 = $305 * $316;
      $41 = $317;
      $318 = $15;
      $319 = $15;
      $320 = Math_imul($318, $319)|0;
      $321 = (+($320|0));
      $322 = $20;
      $323 = 2.0 * $322;
      $324 = $321 / $323;
      $325 = - $324;
      $42 = $325;
      $326 = $32;
      $327 = $42;
      $328 = $41;
      $329 = $327 - $328;
      $330 = $326 < $329;
      if ($330) {
       break L8;
      }
      $331 = $32;
      $332 = $42;
      $333 = $41;
      $334 = $332 + $333;
      $335 = $331 > $334;
      if ($335) {
       continue;
      }
     }
     $336 = $7;
     $337 = (+($336|0));
     $338 = $337 + 1.0;
     $43 = $338;
     $339 = $6;
     $340 = $7;
     $341 = (($339) - ($340))|0;
     $342 = (+($341>>>0));
     $343 = $342 + 1.0;
     $44 = $343;
     $344 = $18;
     $345 = $344 + 1.0;
     $45 = $345;
     $346 = $6;
     $347 = (+($346>>>0));
     $348 = $347 + 1.0;
     $349 = $18;
     $350 = $348 - $349;
     $46 = $350;
     $351 = $19;
     $352 = $45;
     $353 = $43;
     $354 = $352 / $353;
     $355 = (+Math_log((+$354)));
     $356 = $351 * $355;
     $357 = $6;
     $358 = $17;
     $359 = (($357) - ($358))|0;
     $360 = (+($359>>>0));
     $361 = $360 + 0.5;
     $362 = $46;
     $363 = $44;
     $364 = $362 / $363;
     $365 = (+Math_log((+$364)));
     $366 = $361 * $365;
     $367 = $356 + $366;
     $368 = $7;
     $369 = $17;
     $370 = (($368) - ($369))|0;
     $371 = (+($370|0));
     $372 = $44;
     $373 = $5;
     $374 = $372 * $373;
     $375 = $43;
     $376 = $9;
     $377 = $375 * $376;
     $378 = $374 / $377;
     $379 = (+Math_log((+$378)));
     $380 = $371 * $379;
     $381 = $367 + $380;
     $382 = $45;
     $383 = (+_Stirling($382));
     $384 = $381 + $383;
     $385 = $46;
     $386 = (+_Stirling($385));
     $387 = $384 + $386;
     $388 = $43;
     $389 = (+_Stirling($388));
     $390 = $387 - $389;
     $391 = $44;
     $392 = (+_Stirling($391));
     $393 = $390 - $392;
     $33 = $393;
    }
    $394 = $32;
    $395 = $33;
    $396 = $394 <= $395;
    if ($396) {
     break L8;
    }
   }
   $173 = $19;
   $174 = $21;
   $175 = $35;
   $176 = $174 * $175;
   $177 = $173 - $176;
   $178 = $34;
   $179 = $177 + $178;
   $180 = (~~(($179)));
   $7 = $180;
  }
 } while(0);
 $397 = $8;
 $398 = ($397|0)!=(0);
 if ($398) {
  $399 = $6;
  $400 = $7;
  $401 = (($399) - ($400))|0;
  $403 = $401;
 } else {
  $402 = $7;
  $403 = $402;
 }
 $3 = $403;
 $404 = $3;
 STACKTOP = sp;return ($404|0);
}
function _Stirling($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = $1;
 $6 = $4 * $5;
 $2 = $6;
 $7 = $2;
 $8 = 140.0 / $7;
 $9 = 99.0 - $8;
 $10 = $2;
 $11 = $9 / $10;
 $12 = 132.0 - $11;
 $13 = $2;
 $14 = $12 / $13;
 $15 = 462.0 - $14;
 $16 = $2;
 $17 = $15 / $16;
 $18 = 13860.0 - $17;
 $19 = $1;
 $20 = $18 / $19;
 $21 = $20 / 166320.0;
 $3 = $21;
 $22 = $3;
 STACKTOP = sp;return (+$22);
}
function _gamma_large($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = 2.0 * $8;
 $10 = $9 - 1.0;
 $11 = (+Math_sqrt((+$10)));
 $4 = $11;
 while(1) {
  while(1) {
   $12 = $2;
   $13 = (+_gsl_rng_uniform($12));
   $14 = 3.1415926535897931 * $13;
   $15 = (+Math_tan((+$14)));
   $6 = $15;
   $16 = $4;
   $17 = $6;
   $18 = $16 * $17;
   $19 = $3;
   $20 = $18 + $19;
   $21 = $20 - 1.0;
   $5 = $21;
   $22 = $5;
   $23 = $22 <= 0.0;
   if (!($23)) {
    break;
   }
  }
  $24 = $2;
  $25 = (+_gsl_rng_uniform($24));
  $7 = $25;
  $26 = $7;
  $27 = $6;
  $28 = $6;
  $29 = $27 * $28;
  $30 = 1.0 + $29;
  $31 = $3;
  $32 = $31 - 1.0;
  $33 = $5;
  $34 = $3;
  $35 = $34 - 1.0;
  $36 = $33 / $35;
  $37 = (+Math_log((+$36)));
  $38 = $32 * $37;
  $39 = $4;
  $40 = $6;
  $41 = $39 * $40;
  $42 = $38 - $41;
  $43 = (+Math_exp((+$42)));
  $44 = $30 * $43;
  $45 = $26 > $44;
  if (!($45)) {
   break;
  }
 }
 $46 = $5;
 STACKTOP = sp;return (+$46);
}
function _gsl_ran_gamma_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7>>>0)<(12);
 if (!($8)) {
  $21 = $3;
  $22 = $4;
  $23 = (+($22>>>0));
  $24 = (+_gamma_large($21,$23));
  $2 = $24;
  $25 = $2;
  STACKTOP = sp;return (+$25);
 }
 $6 = 1.0;
 $5 = 0;
 while(1) {
  $9 = $5;
  $10 = $4;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  $13 = (+_gsl_rng_uniform_pos($12));
  $14 = $6;
  $15 = $14 * $13;
  $6 = $15;
  $16 = $5;
  $17 = (($16) + 1)|0;
  $5 = $17;
 }
 $18 = $6;
 $19 = (+Math_log((+$18)));
 $20 = - $19;
 $2 = $20;
 $25 = $2;
 STACKTOP = sp;return (+$25);
}
function _gsl_ran_gaussian_pdf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (+Math_abs((+$7)));
 $9 = $6 / $8;
 $4 = $9;
 $10 = (+Math_sqrt(6.2831853071795862));
 $11 = $3;
 $12 = (+Math_abs((+$11)));
 $13 = $10 * $12;
 $14 = 1.0 / $13;
 $15 = $4;
 $16 = - $15;
 $17 = $4;
 $18 = $16 * $17;
 $19 = $18 / 2.0;
 $20 = (+Math_exp((+$19)));
 $21 = $14 * $20;
 $5 = $21;
 $22 = $5;
 STACKTOP = sp;return (+$22);
}
function _gsl_ran_ugaussian_pdf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+_gsl_ran_gaussian_pdf($2,1.0));
 STACKTOP = sp;return (+$3);
}
function _gsl_ran_landau_pdf($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $3 = $5;
 $6 = $3;
 $7 = $6 < -5.5;
 $8 = $3;
 if ($7) {
  $9 = $8 + 1.0;
  $10 = (+Math_exp((+$9)));
  $2 = $10;
  $11 = $2;
  $12 = -1.0 / $11;
  $13 = (+Math_exp((+$12)));
  $14 = $2;
  $15 = (+Math_sqrt((+$14)));
  $16 = $13 / $15;
  $17 = 0.39894228030000001 * $16;
  $18 = $2;
  $19 = 0.02709538966 * $18;
  $20 = -0.019965277779999999 + $19;
  $21 = $2;
  $22 = $20 * $21;
  $23 = 0.041666666669999998 + $22;
  $24 = $2;
  $25 = $23 * $24;
  $26 = 1.0 + $25;
  $27 = $17 * $26;
  $4 = $27;
  $232 = $4;
  STACKTOP = sp;return (+$232);
 }
 $28 = $8 < -1.0;
 $29 = $3;
 if ($28) {
  $30 = - $29;
  $31 = $30 - 1.0;
  $32 = (+Math_exp((+$31)));
  $2 = $32;
  $33 = $2;
  $34 = - $33;
  $35 = (+Math_exp((+$34)));
  $36 = $2;
  $37 = (+Math_sqrt((+$36)));
  $38 = $35 * $37;
  $39 = $3;
  $40 = 0.001511162253 * $39;
  $41 = -0.0062982876350000001 + $40;
  $42 = $3;
  $43 = $41 * $42;
  $44 = 0.039842437000000001 + $43;
  $45 = $3;
  $46 = $44 * $45;
  $47 = -0.12497625499999999 + $46;
  $48 = $3;
  $49 = $47 * $48;
  $50 = 0.42598948749999999 + $49;
  $51 = $38 * $50;
  $52 = $3;
  $53 = 0.0037789420630000002 * $52;
  $54 = -0.01608042283 + $53;
  $55 = $3;
  $56 = $54 * $55;
  $57 = 0.09594393323 + $56;
  $58 = $3;
  $59 = $57 * $58;
  $60 = -0.3388260629 + $59;
  $61 = $3;
  $62 = $60 * $61;
  $63 = 1.0 + $62;
  $64 = $51 / $63;
  $4 = $64;
  $232 = $4;
  STACKTOP = sp;return (+$232);
 }
 $65 = $29 < 1.0;
 $66 = $3;
 if ($65) {
  $67 = 1.2836172110000001E-4 * $66;
  $68 = -0.001394989411 + $67;
  $69 = $3;
  $70 = $68 * $69;
  $71 = 0.014888505180000001 + $70;
  $72 = $3;
  $73 = $71 * $72;
  $74 = 0.1173957403 + $73;
  $75 = $3;
  $76 = $74 * $75;
  $77 = 0.1788541609 + $76;
  $78 = $3;
  $79 = 0.0087906097139999993 * $78;
  $80 = 0.066942195479999994 + $79;
  $81 = $3;
  $82 = $80 * $81;
  $83 = 0.3153932961 + $82;
  $84 = $3;
  $85 = $83 * $84;
  $86 = 0.74287950820000004 + $85;
  $87 = $3;
  $88 = $86 * $87;
  $89 = 1.0 + $88;
  $90 = $77 / $89;
  $4 = $90;
  $232 = $4;
  STACKTOP = sp;return (+$232);
 }
 $91 = $66 < 5.0;
 $92 = $3;
 if ($91) {
  $93 = -2.0310491009999998E-6 * $92;
  $94 = 6.6116673190000003E-5 + $93;
  $95 = $3;
  $96 = $94 * $95;
  $97 = 0.006325387654 + $96;
  $98 = $3;
  $99 = $97 * $98;
  $100 = 0.093591616619999998 + $99;
  $101 = $3;
  $102 = $100 * $101;
  $103 = 0.1788544503 + $102;
  $104 = $3;
  $105 = 0.0069573016750000003 * $104;
  $106 = 0.047467223840000003 + $105;
  $107 = $3;
  $108 = $106 * $107;
  $109 = 0.25606166650000001 + $108;
  $110 = $3;
  $111 = $109 * $110;
  $112 = 0.60978099210000003 + $111;
  $113 = $3;
  $114 = $112 * $113;
  $115 = 1.0 + $114;
  $116 = $103 / $115;
  $4 = $116;
  $232 = $4;
  STACKTOP = sp;return (+$232);
 }
 $117 = $92 < 12.0;
 $118 = $3;
 if ($117) {
  $119 = 1.0 / $118;
  $2 = $119;
  $120 = $2;
  $121 = $2;
  $122 = $120 * $121;
  $123 = $2;
  $124 = 427.02621859999999 * $123;
  $125 = -743.77924440000004 + $124;
  $126 = $2;
  $127 = $125 * $126;
  $128 = 849.27943600000003 + $127;
  $129 = $2;
  $130 = $128 * $129;
  $131 = 118.67232730000001 + $130;
  $132 = $2;
  $133 = $131 * $132;
  $134 = 0.98740544070000002 + $133;
  $135 = $122 * $134;
  $136 = $2;
  $137 = 1597.0635110000001 * $136;
  $138 = 2016.712389 + $137;
  $139 = $2;
  $140 = $138 * $139;
  $141 = 337.6496214 + $140;
  $142 = $2;
  $143 = $141 * $142;
  $144 = 106.8615961 + $143;
  $145 = $2;
  $146 = $144 * $145;
  $147 = 1.0 + $146;
  $148 = $135 / $147;
  $4 = $148;
  $232 = $4;
  STACKTOP = sp;return (+$232);
 }
 $149 = $118 < 50.0;
 $150 = $3;
 if ($149) {
  $151 = 1.0 / $150;
  $2 = $151;
  $152 = $2;
  $153 = $2;
  $154 = $152 * $153;
  $155 = $2;
  $156 = -22324.949100000002 * $155;
  $157 = 21217.86767 + $156;
  $158 = $2;
  $159 = $157 * $158;
  $160 = 4789.7112889999999 + $159;
  $161 = $2;
  $162 = $160 * $161;
  $163 = 167.57024340000001 + $162;
  $164 = $2;
  $165 = $163 * $164;
  $166 = 1.003675074 + $165;
  $167 = $154 * $166;
  $168 = $2;
  $169 = 66924.28357 * $168;
  $170 = 9834.6988760000004 + $169;
  $171 = $2;
  $172 = $170 * $171;
  $173 = 3745.3104880000001 + $172;
  $174 = $2;
  $175 = $173 * $174;
  $176 = 156.94245369999999 + $175;
  $177 = $2;
  $178 = $176 * $177;
  $179 = 1.0 + $178;
  $180 = $167 / $179;
  $4 = $180;
  $232 = $4;
  STACKTOP = sp;return (+$232);
 }
 $181 = $150 < 300.0;
 $182 = $3;
 if ($181) {
  $183 = 1.0 / $182;
  $2 = $183;
  $184 = $2;
  $185 = $2;
  $186 = $184 * $185;
  $187 = $2;
  $188 = -5743609.1090000002 * $187;
  $189 = 475554.6998 + $188;
  $190 = $2;
  $191 = $189 * $190;
  $192 = 62972.926650000001 + $191;
  $193 = $2;
  $194 = $192 * $193;
  $195 = 664.91431360000001 + $194;
  $196 = $2;
  $197 = $195 * $196;
  $198 = 1.0008276190000001 + $197;
  $199 = $186 * $198;
  $200 = $2;
  $201 = -2815759.9389999998 * $200;
  $202 = 165917.4725 + $201;
  $203 = $2;
  $204 = $202 * $203;
  $205 = 56974.733330000003 + $204;
  $206 = $2;
  $207 = $205 * $206;
  $208 = 651.41010979999999 + $207;
  $209 = $2;
  $210 = $208 * $209;
  $211 = 1.0 + $210;
  $212 = $199 / $211;
  $4 = $212;
  $232 = $4;
  STACKTOP = sp;return (+$232);
 } else {
  $213 = $3;
  $214 = $3;
  $215 = (+Math_log((+$214)));
  $216 = $213 * $215;
  $217 = $3;
  $218 = $217 + 1.0;
  $219 = $216 / $218;
  $220 = $182 - $219;
  $221 = 1.0 / $220;
  $2 = $221;
  $222 = $2;
  $223 = $2;
  $224 = $222 * $223;
  $225 = $2;
  $226 = -4.2846407429999998 * $225;
  $227 = -1.84556867 + $226;
  $228 = $2;
  $229 = $227 * $228;
  $230 = 1.0 + $229;
  $231 = $224 * $230;
  $4 = $231;
  $232 = $4;
  STACKTOP = sp;return (+$232);
 }
 return +(0.0);
}
function _gsl_ran_poisson($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $6 = 1.0;
 $7 = 0;
 while(1) {
  $10 = $4;
  $11 = $10 > 10.0;
  $12 = $4;
  if (!($11)) {
   break;
  }
  $13 = $12 * 0.875;
  $14 = (~~(($13))>>>0);
  $8 = $14;
  $15 = $3;
  $16 = $8;
  $17 = (+_gsl_ran_gamma_int($15,$16));
  $9 = $17;
  $18 = $9;
  $19 = $4;
  $20 = $18 >= $19;
  if ($20) {
   label = 4;
   break;
  }
  $30 = $8;
  $31 = $7;
  $32 = (($31) + ($30))|0;
  $7 = $32;
  $33 = $9;
  $34 = $4;
  $35 = $34 - $33;
  $4 = $35;
 }
 if ((label|0) == 4) {
  $21 = $7;
  $22 = $3;
  $23 = $4;
  $24 = $9;
  $25 = $23 / $24;
  $26 = $8;
  $27 = (($26) - 1)|0;
  $28 = (_gsl_ran_binomial($22,$25,$27)|0);
  $29 = (($21) + ($28))|0;
  $2 = $29;
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 $36 = - $12;
 $37 = (+Math_exp((+$36)));
 $5 = $37;
 while(1) {
  $38 = $3;
  $39 = (+_gsl_rng_uniform($38));
  $40 = $6;
  $41 = $40 * $39;
  $6 = $41;
  $42 = $7;
  $43 = (($42) + 1)|0;
  $7 = $43;
  $44 = $6;
  $45 = $5;
  $46 = $44 > $45;
  if (!($46)) {
   break;
  }
 }
 $47 = $7;
 $48 = (($47) - 1)|0;
 $2 = $48;
 $49 = $2;
 STACKTOP = sp;return ($49|0);
}
function _gsl_ran_poisson_pdf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (+_gsl_sf_lnfact($6));
 $5 = $7;
 $8 = $3;
 $9 = (+Math_log((+$8)));
 $10 = $2;
 $11 = (+($10>>>0));
 $12 = $9 * $11;
 $13 = $5;
 $14 = $12 - $13;
 $15 = $3;
 $16 = $14 - $15;
 $17 = (+Math_exp((+$16)));
 $4 = $17;
 $18 = $4;
 STACKTOP = sp;return (+$18);
}
function _gsl_rng_get($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$5 & 7]($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _gsl_rng_uniform($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+FUNCTION_TABLE_di[$5 & 3]($8));
 STACKTOP = sp;return (+$9);
}
function _gsl_rng_uniform_pos($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (+FUNCTION_TABLE_di[$6 & 3]($9));
  $2 = $10;
  $11 = $2;
  $12 = $11 == 0.0;
  if (!($12)) {
   break;
  }
 }
 $13 = $2;
 STACKTOP = sp;return (+$13);
}
function _gsl_rng_alloc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_malloc(8)|0);
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _gsl_error(82876,82916,36,8);
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $7 = $2;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_calloc(1,$9)|0);
 $11 = $3;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $3;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = $3;
  _free($17);
  _gsl_error(82922,82916,46,8);
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $18 = $2;
  $19 = $3;
  HEAP32[$19>>2] = $18;
  $20 = $3;
  _gsl_rng_set($20,0);
  $21 = $3;
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _gsl_rng_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 FUNCTION_TABLE_vii[$7 & 1]($10,$11);
 STACKTOP = sp;return;
}
function _gsl_rng_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 _free($7);
 STACKTOP = sp;return;
}
function _taus_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = ($6|0)==(0);
 if ($7) {
  $3 = 1;
 }
 $8 = $3;
 $9 = ($8*69069)|0;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12*69069)|0;
 $14 = $4;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $4;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18*69069)|0;
 $20 = $4;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $4;
 (_taus_get($22)|0);
 $23 = $4;
 (_taus_get($23)|0);
 $24 = $4;
 (_taus_get($24)|0);
 $25 = $4;
 (_taus_get($25)|0);
 $26 = $4;
 (_taus_get($26)|0);
 $27 = $4;
 (_taus_get($27)|0);
 STACKTOP = sp;return;
}
function _taus_get($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -2;
 $7 = $6 << 12;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 13;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $10 ^ $12;
 $14 = $13 >>> 19;
 $15 = $7 ^ $14;
 $16 = $2;
 HEAP32[$16>>2] = $15;
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & -8;
 $21 = $20 << 4;
 $22 = $2;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 << 2;
 $26 = $2;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $25 ^ $28;
 $30 = $29 >>> 25;
 $31 = $21 ^ $30;
 $32 = $2;
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = $31;
 $34 = $2;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & -16;
 $38 = $37 << 17;
 $39 = $2;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 << 3;
 $43 = $2;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $42 ^ $45;
 $47 = $46 >>> 11;
 $48 = $38 ^ $47;
 $49 = $2;
 $50 = ((($49)) + 8|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 $53 = $2;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $52 ^ $55;
 $57 = $2;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $56 ^ $59;
 STACKTOP = sp;return ($60|0);
}
function _taus_get_double($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_taus_get($2)|0);
 $4 = (+($3>>>0));
 $5 = $4 / 4294967296.0;
 STACKTOP = sp;return (+$5);
}
function _gsl_sf_bessel_IJ_taylor_e($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $13 = sp + 136|0;
 $14 = sp + 120|0;
 $20 = sp + 96|0;
 $21 = sp + 80|0;
 $25 = sp + 56|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $36 = $7;
 $37 = $36 < 0.0;
 $38 = $8;
 $39 = $38 < 0.0;
 $or$cond = $37 | $39;
 if ($or$cond) {
  $40 = $12;
  HEAPF64[$40>>3] = nan;
  $41 = $12;
  $42 = ((($41)) + 8|0);
  HEAPF64[$42>>3] = nan;
  _gsl_error(83774,82966,102,1);
  $6 = 1;
  $204 = $6;
  STACKTOP = sp;return ($204|0);
 }
 $43 = $8;
 $44 = $43 == 0.0;
 $45 = $7;
 $46 = $45 == 0.0;
 if ($44) {
  $47 = $12;
  if ($46) {
   HEAPF64[$47>>3] = 1.0;
   $48 = $12;
   $49 = ((($48)) + 8|0);
   HEAPF64[$49>>3] = 0.0;
  } else {
   HEAPF64[$47>>3] = 0.0;
   $50 = $12;
   $51 = ((($50)) + 8|0);
   HEAPF64[$51>>3] = 0.0;
  }
  $6 = 0;
  $204 = $6;
  STACKTOP = sp;return ($204|0);
 }
 do {
  if ($46) {
   HEAPF64[$13>>3] = 1.0;
   $52 = ((($13)) + 8|0);
   HEAPF64[$52>>3] = 0.0;
   $15 = 0;
  } else {
   $53 = $7;
   $54 = $53 < 2147483646.0;
   $55 = $7;
   if ($54) {
    $56 = $55 + 0.5;
    $57 = (+Math_floor((+$56)));
    $58 = (~~(($57)));
    $18 = $58;
    $59 = $7;
    $60 = $18;
    $61 = (+($60|0));
    $62 = $59 - $61;
    $19 = $62;
    $63 = $18;
    $64 = (+($63|0));
    $65 = $64 + 1.0;
    $66 = $19;
    $67 = (_gsl_sf_poch_e($65,$66,$20)|0);
    $22 = $67;
    $68 = $18;
    $69 = $8;
    $70 = 0.5 * $69;
    $71 = (_gsl_sf_taylorcoeff_e($68,$70,$21)|0);
    $23 = $71;
    $72 = $8;
    $73 = 0.5 * $72;
    $74 = $19;
    $75 = (+Math_pow((+$73),(+$74)));
    $24 = $75;
    $76 = +HEAPF64[$21>>3];
    $77 = $24;
    $78 = $76 * $77;
    $79 = +HEAPF64[$20>>3];
    $80 = $78 / $79;
    HEAPF64[$13>>3] = $80;
    $81 = ((($21)) + 8|0);
    $82 = +HEAPF64[$81>>3];
    $83 = $24;
    $84 = $82 * $83;
    $85 = +HEAPF64[$20>>3];
    $86 = $84 / $85;
    $87 = ((($13)) + 8|0);
    HEAPF64[$87>>3] = $86;
    $88 = +HEAPF64[$13>>3];
    $89 = (+Math_abs((+$88)));
    $90 = +HEAPF64[$20>>3];
    $91 = $89 / $90;
    $92 = ((($20)) + 8|0);
    $93 = +HEAPF64[$92>>3];
    $94 = $91 * $93;
    $95 = ((($13)) + 8|0);
    $96 = +HEAPF64[$95>>3];
    $97 = $96 + $94;
    HEAPF64[$95>>3] = $97;
    $98 = +HEAPF64[$13>>3];
    $99 = (+Math_abs((+$98)));
    $100 = 4.4408920985006262E-16 * $99;
    $101 = ((($13)) + 8|0);
    $102 = +HEAPF64[$101>>3];
    $103 = $102 + $100;
    HEAPF64[$101>>3] = $103;
    $104 = $23;
    $105 = ($104|0)!=(0);
    if ($105) {
     $106 = $23;
     $111 = $106;
    } else {
     $107 = $22;
     $108 = ($107|0)!=(0);
     $109 = $22;
     $110 = $108 ? $109 : 0;
     $111 = $110;
    }
    $15 = $111;
    break;
   } else {
    $112 = $55 + 1.0;
    $113 = (_gsl_sf_lngamma_e($112,$25)|0);
    $26 = $113;
    $114 = $7;
    $115 = $8;
    $116 = 0.5 * $115;
    $117 = (+Math_log((+$116)));
    $118 = $114 * $117;
    $27 = $118;
    $119 = +HEAPF64[$25>>3];
    $28 = $119;
    $120 = $27;
    $121 = $28;
    $122 = $120 - $121;
    $29 = $122;
    $123 = $27;
    $124 = (+Math_abs((+$123)));
    $125 = $28;
    $126 = (+Math_abs((+$125)));
    $127 = $124 + $126;
    $128 = 2.2204460492503131E-16 * $127;
    $129 = ((($25)) + 8|0);
    $130 = +HEAPF64[$129>>3];
    $131 = $128 + $130;
    $30 = $131;
    $132 = $29;
    $133 = $30;
    $134 = (_gsl_sf_exp_err_e($132,$133,$13)|0);
    $31 = $134;
    $135 = $31;
    $136 = ($135|0)!=(0);
    if ($136) {
     $137 = $31;
     $142 = $137;
    } else {
     $138 = $26;
     $139 = ($138|0)!=(0);
     $140 = $26;
     $141 = $139 ? $140 : 0;
     $142 = $141;
    }
    $15 = $142;
    break;
   }
  }
 } while(0);
 $143 = $9;
 $144 = (+($143|0));
 $145 = $144 * 0.25;
 $146 = $8;
 $147 = $145 * $146;
 $148 = $8;
 $149 = $147 * $148;
 $32 = $149;
 $33 = 1.0;
 $34 = 1.0;
 $35 = 1;
 while(1) {
  $150 = $35;
  $151 = $10;
  $152 = ($150|0)<=($151|0);
  if (!($152)) {
   break;
  }
  $153 = $32;
  $154 = $7;
  $155 = $35;
  $156 = (+($155|0));
  $157 = $154 + $156;
  $158 = $35;
  $159 = (+($158|0));
  $160 = $157 * $159;
  $161 = $153 / $160;
  $162 = $34;
  $163 = $162 * $161;
  $34 = $163;
  $164 = $34;
  $165 = $33;
  $166 = $165 + $164;
  $33 = $166;
  $167 = $34;
  $168 = $33;
  $169 = $167 / $168;
  $170 = (+Math_abs((+$169)));
  $171 = $11;
  $172 = $170 < $171;
  if ($172) {
   break;
  }
  $173 = $35;
  $174 = (($173) + 1)|0;
  $35 = $174;
 }
 $175 = $33;
 HEAPF64[$14>>3] = $175;
 $176 = $11;
 $177 = $33;
 $178 = (+Math_abs((+$177)));
 $179 = $176 * $178;
 $180 = ((($14)) + 8|0);
 HEAPF64[$180>>3] = $179;
 $181 = $35;
 $182 = $10;
 $183 = ($181|0)>=($182|0);
 $184 = $183 ? 11 : 0;
 $16 = $184;
 $185 = +HEAPF64[$13>>3];
 $186 = ((($13)) + 8|0);
 $187 = +HEAPF64[$186>>3];
 $188 = +HEAPF64[$14>>3];
 $189 = ((($14)) + 8|0);
 $190 = +HEAPF64[$189>>3];
 $191 = $12;
 $192 = (_gsl_sf_multiply_err_e($185,$187,$188,$190,$191)|0);
 $17 = $192;
 $193 = $17;
 $194 = ($193|0)!=(0);
 do {
  if ($194) {
   $195 = $17;
   $203 = $195;
  } else {
   $196 = $15;
   $197 = ($196|0)!=(0);
   if ($197) {
    $198 = $15;
    $203 = $198;
    break;
   } else {
    $199 = $16;
    $200 = ($199|0)!=(0);
    $201 = $16;
    $202 = $200 ? $201 : 0;
    $203 = $202;
    break;
   }
  }
 } while(0);
 $6 = $203;
 $204 = $6;
 STACKTOP = sp;return ($204|0);
}
function _gsl_sf_bessel_Inu_scaled_asymp_unif_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $13 = sp + 144|0;
 $17 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $18 = $5;
 $19 = $4;
 $20 = $18 / $19;
 $8 = $20;
 $21 = $8;
 $22 = (+_hypot(1.0,$21));
 $9 = $22;
 $23 = $4;
 $24 = 6.2831853071795862 * $23;
 $25 = $9;
 $26 = $24 * $25;
 $27 = (+Math_sqrt((+$26)));
 $28 = 1.0 / $27;
 $10 = $28;
 $29 = $9;
 $30 = $8;
 $31 = $9;
 $32 = 1.0 + $31;
 $33 = $30 / $32;
 $34 = (+Math_log((+$33)));
 $35 = $29 + $34;
 $11 = $35;
 $36 = $8;
 $37 = $36 < 165140.3718518207;
 $38 = $4;
 if ($37) {
  $39 = $8;
  $40 = - $39;
  $41 = $11;
  $42 = $40 + $41;
  $43 = $38 * $42;
  $54 = $43;
 } else {
  $44 = -0.5 * $38;
  $45 = $8;
  $46 = $44 / $45;
  $47 = $8;
  $48 = 12.0 * $47;
  $49 = $8;
  $50 = $48 * $49;
  $51 = 1.0 / $50;
  $52 = 1.0 - $51;
  $53 = $46 * $52;
  $54 = $53;
 }
 $12 = $54;
 $55 = $12;
 $56 = (_gsl_sf_exp_e($55,$13)|0);
 $14 = $56;
 $57 = $14;
 $58 = ($57|0)==(0);
 if (!($58)) {
  $155 = $6;
  HEAPF64[$155>>3] = 0.0;
  $156 = $6;
  $157 = ((($156)) + 8|0);
  HEAPF64[$157>>3] = 0.0;
  $158 = $14;
  $3 = $158;
  $159 = $3;
  STACKTOP = sp;return ($159|0);
 }
 $59 = $9;
 $60 = 1.0 / $59;
 $15 = $60;
 HEAPF64[$17>>3] = 1.0;
 $7 = 1;
 while(1) {
  $61 = $7;
  $62 = ($61|0)<(16);
  if (!($62)) {
   break;
  }
  $63 = $15;
  $64 = $7;
  $65 = (($64) - 1)|0;
  $66 = (($17) + ($65<<3)|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $63 * $67;
  $69 = $7;
  $70 = (($17) + ($69<<3)|0);
  HEAPF64[$70>>3] = $68;
  $71 = $7;
  $72 = (($71) + 1)|0;
  $7 = $72;
 }
 $73 = (+_debye_u1($17));
 $74 = $4;
 $75 = $73 / $74;
 $76 = 1.0 + $75;
 $77 = (+_debye_u2($17));
 $78 = $4;
 $79 = $4;
 $80 = $78 * $79;
 $81 = $77 / $80;
 $82 = $76 + $81;
 $83 = (+_debye_u3($17));
 $84 = $4;
 $85 = $4;
 $86 = $84 * $85;
 $87 = $4;
 $88 = $86 * $87;
 $89 = $83 / $88;
 $90 = $82 + $89;
 $91 = (+_debye_u4($17));
 $92 = $4;
 $93 = $4;
 $94 = $92 * $93;
 $95 = $4;
 $96 = $94 * $95;
 $97 = $4;
 $98 = $96 * $97;
 $99 = $91 / $98;
 $100 = $90 + $99;
 $101 = (+_debye_u5($17));
 $102 = $4;
 $103 = $4;
 $104 = $102 * $103;
 $105 = $4;
 $106 = $104 * $105;
 $107 = $4;
 $108 = $106 * $107;
 $109 = $4;
 $110 = $108 * $109;
 $111 = $101 / $110;
 $112 = $100 + $111;
 $16 = $112;
 $113 = $10;
 $114 = +HEAPF64[$13>>3];
 $115 = $113 * $114;
 $116 = $16;
 $117 = $115 * $116;
 $118 = $6;
 HEAPF64[$118>>3] = $117;
 $119 = $10;
 $120 = +HEAPF64[$13>>3];
 $121 = $119 * $120;
 $122 = $4;
 $123 = $4;
 $124 = $122 * $123;
 $125 = $4;
 $126 = $124 * $125;
 $127 = $4;
 $128 = $126 * $127;
 $129 = $4;
 $130 = $128 * $129;
 $131 = $4;
 $132 = $130 * $131;
 $133 = $121 / $132;
 $134 = $6;
 $135 = ((($134)) + 8|0);
 HEAPF64[$135>>3] = $133;
 $136 = $10;
 $137 = ((($13)) + 8|0);
 $138 = +HEAPF64[$137>>3];
 $139 = $136 * $138;
 $140 = $16;
 $141 = (+Math_abs((+$140)));
 $142 = $139 * $141;
 $143 = $6;
 $144 = ((($143)) + 8|0);
 $145 = +HEAPF64[$144>>3];
 $146 = $145 + $142;
 HEAPF64[$144>>3] = $146;
 $147 = $6;
 $148 = +HEAPF64[$147>>3];
 $149 = (+Math_abs((+$148)));
 $150 = 4.4408920985006262E-16 * $149;
 $151 = $6;
 $152 = ((($151)) + 8|0);
 $153 = +HEAPF64[$152>>3];
 $154 = $153 + $150;
 HEAPF64[$152>>3] = $154;
 $3 = 0;
 $159 = $3;
 STACKTOP = sp;return ($159|0);
}
function _debye_u1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = 3.0 * $4;
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 5.0 * $8;
 $10 = $5 - $9;
 $11 = $10 / 24.0;
 STACKTOP = sp;return (+$11);
}
function _debye_u2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = +HEAPF64[$3>>3];
 $5 = 81.0 * $4;
 $6 = $1;
 $7 = ((($6)) + 32|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 462.0 * $8;
 $10 = $5 - $9;
 $11 = $1;
 $12 = ((($11)) + 48|0);
 $13 = +HEAPF64[$12>>3];
 $14 = 385.0 * $13;
 $15 = $10 + $14;
 $16 = $15 / 1152.0;
 STACKTOP = sp;return (+$16);
}
function _debye_u3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = +HEAPF64[$3>>3];
 $5 = 30375.0 * $4;
 $6 = $1;
 $7 = ((($6)) + 40|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 369603.0 * $8;
 $10 = $5 - $9;
 $11 = $1;
 $12 = ((($11)) + 56|0);
 $13 = +HEAPF64[$12>>3];
 $14 = 765765.0 * $13;
 $15 = $10 + $14;
 $16 = $1;
 $17 = ((($16)) + 72|0);
 $18 = +HEAPF64[$17>>3];
 $19 = 425425.0 * $18;
 $20 = $15 - $19;
 $21 = $20 / 414720.0;
 STACKTOP = sp;return (+$21);
}
function _debye_u4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $3 = 0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 32|0);
 $4 = +HEAPF64[$3>>3];
 $5 = 4465125.0 * $4;
 $6 = $1;
 $7 = ((($6)) + 48|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 94121676.0 * $8;
 $10 = $5 - $9;
 $11 = $1;
 $12 = ((($11)) + 64|0);
 $13 = +HEAPF64[$12>>3];
 $14 = 349922430.0 * $13;
 $15 = $10 + $14;
 $16 = $1;
 $17 = ((($16)) + 80|0);
 $18 = +HEAPF64[$17>>3];
 $19 = 446185740.0 * $18;
 $20 = $15 - $19;
 $21 = $1;
 $22 = ((($21)) + 96|0);
 $23 = +HEAPF64[$22>>3];
 $24 = 185910725.0 * $23;
 $25 = $20 + $24;
 $26 = $25 / 39813120.0;
 STACKTOP = sp;return (+$26);
}
function _debye_u5($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 40|0);
 $4 = +HEAPF64[$3>>3];
 $5 = 1519035525.0 * $4;
 $6 = $1;
 $7 = ((($6)) + 56|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 49286948607.0 * $8;
 $10 = $5 - $9;
 $11 = $1;
 $12 = ((($11)) + 72|0);
 $13 = +HEAPF64[$12>>3];
 $14 = 284499769554.0 * $13;
 $15 = $10 + $14;
 $16 = $1;
 $17 = ((($16)) + 88|0);
 $18 = +HEAPF64[$17>>3];
 $19 = 614135872350.0 * $18;
 $20 = $15 - $19;
 $21 = $1;
 $22 = ((($21)) + 104|0);
 $23 = +HEAPF64[$22>>3];
 $24 = 566098157625.0 * $23;
 $25 = $20 + $24;
 $26 = $1;
 $27 = ((($26)) + 120|0);
 $28 = +HEAPF64[$27>>3];
 $29 = 188699385875.0 * $28;
 $30 = $25 - $29;
 $31 = $30 / 6688604160.0;
 STACKTOP = sp;return (+$31);
}
function _gsl_sf_bessel_I_CF1_ser($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 20000;
 $8 = 1.0;
 $9 = 1.0;
 $10 = 0.0;
 $11 = 1;
 while(1) {
  $13 = $11;
  $14 = ($13|0)<(20000);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $4;
  $17 = $11;
  $18 = (+($17|0));
  $19 = $16 + $18;
  $20 = $15 / $19;
  $21 = 0.25 * $20;
  $22 = $5;
  $23 = $21 * $22;
  $24 = $4;
  $25 = $11;
  $26 = (+($25|0));
  $27 = $24 + $26;
  $28 = $27 + 1.0;
  $29 = $23 / $28;
  $12 = $29;
  $30 = $12;
  $31 = - $30;
  $32 = $10;
  $33 = 1.0 + $32;
  $34 = $31 * $33;
  $35 = $12;
  $36 = $10;
  $37 = 1.0 + $36;
  $38 = $35 * $37;
  $39 = 1.0 + $38;
  $40 = $34 / $39;
  $10 = $40;
  $41 = $10;
  $42 = $8;
  $43 = $42 * $41;
  $8 = $43;
  $44 = $8;
  $45 = $9;
  $46 = $45 + $44;
  $9 = $46;
  $47 = $8;
  $48 = $9;
  $49 = $47 / $48;
  $50 = (+Math_abs((+$49)));
  $51 = $50 < 2.2204460492503131E-16;
  if ($51) {
   break;
  }
  $52 = $11;
  $53 = (($52) + 1)|0;
  $11 = $53;
 }
 $54 = $5;
 $55 = $4;
 $56 = $55 + 1.0;
 $57 = 2.0 * $56;
 $58 = $54 / $57;
 $59 = $9;
 $60 = $58 * $59;
 $61 = $6;
 HEAPF64[$61>>3] = $60;
 $62 = $11;
 $63 = ($62|0)==(20000);
 if ($63) {
  _gsl_error(83691,82966,656,11);
  $3 = 11;
  $64 = $3;
  STACKTOP = sp;return ($64|0);
 } else {
  $3 = 0;
  $64 = $3;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _gsl_sf_bessel_K_scaled_steed_temme_CF2($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 10000;
 $12 = 1;
 $26 = $7;
 $27 = 1.0 + $26;
 $28 = 2.0 * $27;
 $13 = $28;
 $29 = $13;
 $30 = 1.0 / $29;
 $14 = $30;
 $31 = $14;
 $15 = $31;
 $32 = $14;
 $16 = $32;
 $17 = 0.0;
 $18 = 1.0;
 $33 = $6;
 $34 = $6;
 $35 = $33 * $34;
 $36 = 0.25 - $35;
 $37 = - $36;
 $19 = $37;
 $38 = $19;
 $20 = $38;
 $39 = $19;
 $40 = - $39;
 $21 = $40;
 $41 = $19;
 $42 = - $41;
 $22 = $42;
 $43 = $22;
 $44 = $15;
 $45 = $43 * $44;
 $46 = 1.0 + $45;
 $23 = $46;
 $12 = 2;
 while(1) {
  $47 = $12;
  $48 = ($47|0)<=(10000);
  if (!($48)) {
   break;
  }
  $49 = $12;
  $50 = (($49) - 1)|0;
  $51 = (+($50|0));
  $52 = 2.0 * $51;
  $53 = $19;
  $54 = $53 - $52;
  $19 = $54;
  $55 = $19;
  $56 = - $55;
  $57 = $21;
  $58 = $56 * $57;
  $59 = $12;
  $60 = (+($59|0));
  $61 = $58 / $60;
  $21 = $61;
  $62 = $17;
  $63 = $13;
  $64 = $18;
  $65 = $63 * $64;
  $66 = $62 - $65;
  $67 = $19;
  $68 = $66 / $67;
  $25 = $68;
  $69 = $18;
  $17 = $69;
  $70 = $25;
  $18 = $70;
  $71 = $21;
  $72 = $18;
  $73 = $71 * $72;
  $74 = $22;
  $75 = $74 + $73;
  $22 = $75;
  $76 = $13;
  $77 = $76 + 2.0;
  $13 = $77;
  $78 = $13;
  $79 = $19;
  $80 = $14;
  $81 = $79 * $80;
  $82 = $78 + $81;
  $83 = 1.0 / $82;
  $14 = $83;
  $84 = $13;
  $85 = $14;
  $86 = $84 * $85;
  $87 = $86 - 1.0;
  $88 = $15;
  $89 = $87 * $88;
  $15 = $89;
  $90 = $15;
  $91 = $16;
  $92 = $91 + $90;
  $16 = $92;
  $93 = $22;
  $94 = $15;
  $95 = $93 * $94;
  $24 = $95;
  $96 = $24;
  $97 = $23;
  $98 = $97 + $96;
  $23 = $98;
  $99 = $24;
  $100 = $23;
  $101 = $99 / $100;
  $102 = (+Math_abs((+$101)));
  $103 = $102 < 2.2204460492503131E-16;
  if ($103) {
   break;
  }
  $104 = $12;
  $105 = (($104) + 1)|0;
  $12 = $105;
 }
 $106 = $20;
 $107 = - $106;
 $108 = $16;
 $109 = $108 * $107;
 $16 = $109;
 $110 = $7;
 $111 = 2.0 * $110;
 $112 = 3.1415926535897931 / $111;
 $113 = (+Math_sqrt((+$112)));
 $114 = $23;
 $115 = $113 / $114;
 $116 = $8;
 HEAPF64[$116>>3] = $115;
 $117 = $8;
 $118 = +HEAPF64[$117>>3];
 $119 = $6;
 $120 = $7;
 $121 = $119 + $120;
 $122 = $121 + 0.5;
 $123 = $16;
 $124 = $122 - $123;
 $125 = $118 * $124;
 $126 = $7;
 $127 = $125 / $126;
 $128 = $9;
 HEAPF64[$128>>3] = $127;
 $129 = $9;
 $130 = +HEAPF64[$129>>3];
 $131 = - $130;
 $132 = $6;
 $133 = $7;
 $134 = $132 / $133;
 $135 = $8;
 $136 = +HEAPF64[$135>>3];
 $137 = $134 * $136;
 $138 = $131 + $137;
 $139 = $10;
 HEAPF64[$139>>3] = $138;
 $140 = $12;
 $141 = ($140|0)==(10000);
 if ($141) {
  _gsl_error(83691,82966,772,11);
  $5 = 11;
  $142 = $5;
  STACKTOP = sp;return ($142|0);
 } else {
  $5 = 0;
  $142 = $5;
  STACKTOP = sp;return ($142|0);
 }
 return (0)|0;
}
function _gsl_sf_bessel_sin_pi4_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $3;
 $15 = (+Math_sin((+$14)));
 $6 = $15;
 $16 = $3;
 $17 = (+Math_cos((+$16)));
 $7 = $17;
 $18 = $6;
 $19 = $7;
 $20 = $18 + $19;
 $8 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $21 - $22;
 $9 = $23;
 $24 = $7;
 $25 = (+Math_abs((+$24)));
 $26 = $6;
 $27 = (+Math_abs((+$26)));
 $28 = $25 + $27;
 $10 = $28;
 $29 = $4;
 $30 = (+Math_abs((+$29)));
 $31 = $30 < 7.4009597974140505E-4;
 $32 = $4;
 if ($31) {
  $33 = $4;
  $34 = $32 * $33;
  $13 = $34;
  $35 = $4;
  $36 = $13;
  $37 = $36 / 6.0;
  $38 = $13;
  $39 = $38 / 20.0;
  $40 = 1.0 - $39;
  $41 = $37 * $40;
  $42 = 1.0 - $41;
  $43 = $35 * $42;
  $11 = $43;
  $44 = $13;
  $45 = $44 / 2.0;
  $46 = $13;
  $47 = $46 / 12.0;
  $48 = 1.0 - $47;
  $49 = $45 * $48;
  $50 = 1.0 - $49;
  $12 = $50;
 } else {
  $51 = (+Math_sin((+$32)));
  $11 = $51;
  $52 = $4;
  $53 = (+Math_cos((+$52)));
  $12 = $53;
 }
 $54 = $12;
 $55 = $9;
 $56 = $54 * $55;
 $57 = $11;
 $58 = $8;
 $59 = $57 * $58;
 $60 = $56 + $59;
 $61 = $60 / 1.4142135623730951;
 $62 = $5;
 HEAPF64[$62>>3] = $61;
 $63 = $12;
 $64 = (+Math_abs((+$63)));
 $65 = $11;
 $66 = (+Math_abs((+$65)));
 $67 = $64 + $66;
 $68 = 4.4408920985006262E-16 * $67;
 $69 = $10;
 $70 = $68 * $69;
 $71 = $70 / 1.4142135623730951;
 $72 = $5;
 $73 = ((($72)) + 8|0);
 HEAPF64[$73>>3] = $71;
 $74 = $3;
 $75 = $74 > 4503599627370496.0;
 $76 = $3;
 if ($75) {
  $77 = 0.5 * $76;
  $78 = $5;
  $79 = ((($78)) + 8|0);
  $80 = +HEAPF64[$79>>3];
  $81 = $80 * $77;
  HEAPF64[$79>>3] = $81;
  STACKTOP = sp;return 0;
 }
 $82 = $76 > 67108864.0;
 if (!($82)) {
  STACKTOP = sp;return 0;
 }
 $83 = $3;
 $84 = 256.0 * $83;
 $85 = $84 * 1.4901161193847656E-8;
 $86 = $5;
 $87 = ((($86)) + 8|0);
 $88 = +HEAPF64[$87>>3];
 $89 = $88 * $85;
 HEAPF64[$87>>3] = $89;
 STACKTOP = sp;return 0;
}
function _gsl_sf_bessel_I0_scaled_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp + 48|0;
 $9 = sp + 24|0;
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $12 = $3;
 $13 = (+Math_abs((+$12)));
 $5 = $13;
 $14 = $5;
 $15 = $14 < 2.9802322387695313E-8;
 $16 = $5;
 if ($15) {
  $17 = 1.0 - $16;
  $18 = $4;
  HEAPF64[$18>>3] = $17;
  $19 = $5;
  $20 = 0.5 * $19;
  $21 = $5;
  $22 = $20 * $21;
  $23 = $4;
  $24 = ((($23)) + 8|0);
  HEAPF64[$24>>3] = $22;
  $2 = 0;
  $118 = $2;
  STACKTOP = sp;return ($118|0);
 }
 $25 = $16 <= 3.0;
 $26 = $5;
 if ($25) {
  $27 = - $26;
  $28 = (+Math_exp((+$27)));
  $6 = $28;
  $29 = $5;
  $30 = $5;
  $31 = $29 * $30;
  $32 = $31 / 4.5;
  $33 = $32 - 1.0;
  (_cheb_eval_e_3581(70240,$33,$7)|0);
  $34 = $6;
  $35 = +HEAPF64[$7>>3];
  $36 = 2.75 + $35;
  $37 = $34 * $36;
  $38 = $4;
  HEAPF64[$38>>3] = $37;
  $39 = $4;
  $40 = +HEAPF64[$39>>3];
  $41 = (+Math_abs((+$40)));
  $42 = 2.2204460492503131E-16 * $41;
  $43 = $6;
  $44 = ((($7)) + 8|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $43 * $45;
  $47 = $42 + $46;
  $48 = $4;
  $49 = ((($48)) + 8|0);
  HEAPF64[$49>>3] = $47;
  $2 = 0;
  $118 = $2;
  STACKTOP = sp;return ($118|0);
 }
 $50 = $26 <= 8.0;
 $51 = $5;
 $52 = (+Math_sqrt((+$51)));
 if ($50) {
  $8 = $52;
  $53 = $5;
  $54 = 48.0 / $53;
  $55 = $54 - 11.0;
  $56 = $55 / 5.0;
  (_cheb_eval_e_3581(70272,$56,$9)|0);
  $57 = +HEAPF64[$9>>3];
  $58 = 0.375 + $57;
  $59 = $8;
  $60 = $58 / $59;
  $61 = $4;
  HEAPF64[$61>>3] = $60;
  $62 = +HEAPF64[$9>>3];
  $63 = (+Math_abs((+$62)));
  $64 = 0.375 + $63;
  $65 = 4.4408920985006262E-16 * $64;
  $66 = $8;
  $67 = $65 / $66;
  $68 = $4;
  $69 = ((($68)) + 8|0);
  HEAPF64[$69>>3] = $67;
  $70 = ((($9)) + 8|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $8;
  $73 = $71 / $72;
  $74 = $4;
  $75 = ((($74)) + 8|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $76 + $73;
  HEAPF64[$75>>3] = $77;
  $78 = $4;
  $79 = +HEAPF64[$78>>3];
  $80 = (+Math_abs((+$79)));
  $81 = 4.4408920985006262E-16 * $80;
  $82 = $4;
  $83 = ((($82)) + 8|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $84 + $81;
  HEAPF64[$83>>3] = $85;
  $2 = 0;
  $118 = $2;
  STACKTOP = sp;return ($118|0);
 } else {
  $10 = $52;
  $86 = $5;
  $87 = 16.0 / $86;
  $88 = $87 - 1.0;
  (_cheb_eval_e_3581(70304,$88,$11)|0);
  $89 = +HEAPF64[$11>>3];
  $90 = 0.375 + $89;
  $91 = $10;
  $92 = $90 / $91;
  $93 = $4;
  HEAPF64[$93>>3] = $92;
  $94 = +HEAPF64[$11>>3];
  $95 = (+Math_abs((+$94)));
  $96 = 0.375 + $95;
  $97 = 4.4408920985006262E-16 * $96;
  $98 = $10;
  $99 = $97 / $98;
  $100 = $4;
  $101 = ((($100)) + 8|0);
  HEAPF64[$101>>3] = $99;
  $102 = ((($11)) + 8|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $10;
  $105 = $103 / $104;
  $106 = $4;
  $107 = ((($106)) + 8|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $108 + $105;
  HEAPF64[$107>>3] = $109;
  $110 = $4;
  $111 = +HEAPF64[$110>>3];
  $112 = (+Math_abs((+$111)));
  $113 = 4.4408920985006262E-16 * $112;
  $114 = $4;
  $115 = ((($114)) + 8|0);
  $116 = +HEAPF64[$115>>3];
  $117 = $116 + $113;
  HEAPF64[$115>>3] = $117;
  $2 = 0;
  $118 = $2;
  STACKTOP = sp;return ($118|0);
 }
 return (0)|0;
}
function _cheb_eval_e_3581($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gsl_sf_bessel_I1_scaled_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0;
 var $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $9 = sp + 80|0;
 $11 = sp + 56|0;
 $15 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = 4.4501477170144028E-308;
 $6 = 4.2146848510894035E-8;
 $18 = $3;
 $19 = (+Math_abs((+$18)));
 $7 = $19;
 $20 = $7;
 $21 = $20 == 0.0;
 if ($21) {
  $22 = $4;
  HEAPF64[$22>>3] = 0.0;
  $23 = $4;
  $24 = ((($23)) + 8|0);
  HEAPF64[$24>>3] = 0.0;
  $2 = 0;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 $25 = $7;
 $26 = $25 < 4.4501477170144028E-308;
 if ($26) {
  $27 = $4;
  HEAPF64[$27>>3] = 0.0;
  $28 = $4;
  $29 = ((($28)) + 8|0);
  HEAPF64[$29>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,82975,158,15);
  $2 = 15;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 $30 = $7;
 $31 = $30 < 4.2146848510894035E-8;
 if ($31) {
  $32 = $3;
  $33 = 0.5 * $32;
  $34 = $4;
  HEAPF64[$34>>3] = $33;
  $35 = $4;
  $36 = ((($35)) + 8|0);
  HEAPF64[$36>>3] = 0.0;
  $2 = 0;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 $37 = $7;
 $38 = $37 <= 3.0;
 $39 = $7;
 if ($38) {
  $40 = - $39;
  $41 = (+Math_exp((+$40)));
  $8 = $41;
  $42 = $7;
  $43 = $7;
  $44 = $42 * $43;
  $45 = $44 / 4.5;
  $46 = $45 - 1.0;
  (_cheb_eval_e_3588(70336,$46,$9)|0);
  $47 = $3;
  $48 = $8;
  $49 = $47 * $48;
  $50 = +HEAPF64[$9>>3];
  $51 = 0.875 + $50;
  $52 = $49 * $51;
  $53 = $4;
  HEAPF64[$53>>3] = $52;
  $54 = $8;
  $55 = ((($9)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $54 * $56;
  $58 = $7;
  $59 = $58 * 2.2204460492503131E-16;
  $60 = $4;
  $61 = +HEAPF64[$60>>3];
  $62 = (+Math_abs((+$61)));
  $63 = $59 * $62;
  $64 = $57 + $63;
  $65 = $4;
  $66 = ((($65)) + 8|0);
  HEAPF64[$66>>3] = $64;
  $67 = $4;
  $68 = +HEAPF64[$67>>3];
  $69 = (+Math_abs((+$68)));
  $70 = 4.4408920985006262E-16 * $69;
  $71 = $4;
  $72 = ((($71)) + 8|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $73 + $70;
  HEAPF64[$72>>3] = $74;
  $2 = 0;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 $75 = $39 <= 8.0;
 $76 = $7;
 $77 = (+Math_sqrt((+$76)));
 if ($75) {
  $10 = $77;
  $78 = $7;
  $79 = 48.0 / $78;
  $80 = $79 - 11.0;
  $81 = $80 / 5.0;
  (_cheb_eval_e_3588(70368,$81,$11)|0);
  $82 = +HEAPF64[$11>>3];
  $83 = 0.375 + $82;
  $84 = $10;
  $85 = $83 / $84;
  $12 = $85;
  $86 = $3;
  $87 = $86 > 0.0;
  $88 = $87 ? 1.0 : -1.0;
  $13 = $88;
  $89 = $13;
  $90 = $12;
  $91 = $89 * $90;
  $92 = $4;
  HEAPF64[$92>>3] = $91;
  $93 = ((($11)) + 8|0);
  $94 = +HEAPF64[$93>>3];
  $95 = $10;
  $96 = $94 / $95;
  $97 = $4;
  $98 = ((($97)) + 8|0);
  HEAPF64[$98>>3] = $96;
  $99 = $4;
  $100 = +HEAPF64[$99>>3];
  $101 = (+Math_abs((+$100)));
  $102 = 4.4408920985006262E-16 * $101;
  $103 = $4;
  $104 = ((($103)) + 8|0);
  $105 = +HEAPF64[$104>>3];
  $106 = $105 + $102;
  HEAPF64[$104>>3] = $106;
  $2 = 0;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 } else {
  $14 = $77;
  $107 = $7;
  $108 = 16.0 / $107;
  $109 = $108 - 1.0;
  (_cheb_eval_e_3588(70400,$109,$15)|0);
  $110 = +HEAPF64[$15>>3];
  $111 = 0.375 + $110;
  $112 = $14;
  $113 = $111 / $112;
  $16 = $113;
  $114 = $3;
  $115 = $114 > 0.0;
  $116 = $115 ? 1.0 : -1.0;
  $17 = $116;
  $117 = $17;
  $118 = $16;
  $119 = $117 * $118;
  $120 = $4;
  HEAPF64[$120>>3] = $119;
  $121 = ((($15)) + 8|0);
  $122 = +HEAPF64[$121>>3];
  $123 = $14;
  $124 = $122 / $123;
  $125 = $4;
  $126 = ((($125)) + 8|0);
  HEAPF64[$126>>3] = $124;
  $127 = $4;
  $128 = +HEAPF64[$127>>3];
  $129 = (+Math_abs((+$128)));
  $130 = 4.4408920985006262E-16 * $129;
  $131 = $4;
  $132 = ((($131)) + 8|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $133 + $130;
  HEAPF64[$132>>3] = $134;
  $2 = 0;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 return (0)|0;
}
function _cheb_eval_e_3588($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gsl_sf_bessel_In_scaled_e($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $8 = sp + 112|0;
 $11 = sp + 88|0;
 $13 = sp + 80|0;
 $21 = sp + 40|0;
 $22 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $29 = $5;
 $30 = (+Math_abs((+$29)));
 $7 = $30;
 $31 = $4;
 $32 = (Math_abs(($31|0))|0);
 $4 = $32;
 $33 = $4;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = $5;
  $36 = $6;
  $37 = (_gsl_sf_bessel_I0_scaled_e($35,$36)|0);
  $3 = $37;
  $252 = $3;
  STACKTOP = sp;return ($252|0);
 }
 $38 = $4;
 $39 = ($38|0)==(1);
 $40 = $5;
 if ($39) {
  $41 = $6;
  $42 = (_gsl_sf_bessel_I1_scaled_e($40,$41)|0);
  $3 = $42;
  $252 = $3;
  STACKTOP = sp;return ($252|0);
 }
 $43 = $40 == 0.0;
 if ($43) {
  $44 = $6;
  HEAPF64[$44>>3] = 0.0;
  $45 = $6;
  $46 = ((($45)) + 8|0);
  HEAPF64[$46>>3] = 0.0;
  $3 = 0;
  $252 = $3;
  STACKTOP = sp;return ($252|0);
 }
 $47 = $5;
 $48 = $5;
 $49 = $47 * $48;
 $50 = $4;
 $51 = (+($50|0));
 $52 = $51 + 1.0;
 $53 = 10.0 * $52;
 $54 = $53 / 2.7182818284590451;
 $55 = $49 < $54;
 if ($55) {
  $56 = $7;
  $57 = - $56;
  $58 = (+Math_exp((+$57)));
  $9 = $58;
  $59 = $4;
  $60 = (+($59|0));
  $61 = $7;
  $62 = (_gsl_sf_bessel_IJ_taylor_e($60,$61,1,50,2.2204460492503131E-16,$8)|0);
  $10 = $62;
  $63 = +HEAPF64[$8>>3];
  $64 = $9;
  $65 = $63 * $64;
  $66 = $6;
  HEAPF64[$66>>3] = $65;
  $67 = ((($8)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $9;
  $70 = $68 * $69;
  $71 = $6;
  $72 = ((($71)) + 8|0);
  HEAPF64[$72>>3] = $70;
  $73 = $6;
  $74 = +HEAPF64[$73>>3];
  $75 = (+Math_abs((+$74)));
  $76 = 4.4408920985006262E-16 * $75;
  $77 = $6;
  $78 = ((($77)) + 8|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $79 + $76;
  HEAPF64[$78>>3] = $80;
  $81 = $5;
  $82 = $81 < 0.0;
  if ($82) {
   $83 = $4;
   $84 = $83 & 1;
   $85 = ($84|0)!=(0);
   if ($85) {
    $86 = $6;
    $87 = +HEAPF64[$86>>3];
    $88 = - $87;
    $89 = $6;
    HEAPF64[$89>>3] = $88;
   }
  }
  $90 = $10;
  $3 = $90;
  $252 = $3;
  STACKTOP = sp;return ($252|0);
 }
 $91 = $4;
 $92 = ($91|0)<(150);
 $93 = $7;
 $94 = $93 < 1.0E+7;
 $or$cond = $92 & $94;
 if ($or$cond) {
  $95 = $7;
  $96 = (_gsl_sf_bessel_I0_scaled_e($95,$11)|0);
  $12 = $96;
  $97 = $4;
  $98 = (+($97|0));
  $99 = $7;
  $100 = (_gsl_sf_bessel_I_CF1_ser($98,$99,$13)|0);
  $14 = $100;
  $101 = +HEAPF64[$13>>3];
  $102 = $101 * 1.4916681462400413E-154;
  $15 = $102;
  $16 = 1.4916681462400413E-154;
  $103 = $4;
  $18 = $103;
  while(1) {
   $104 = $18;
   $105 = ($104|0)>=(1);
   if (!($105)) {
    break;
   }
   $106 = $15;
   $107 = $18;
   $108 = (+($107|0));
   $109 = 2.0 * $108;
   $110 = $7;
   $111 = $109 / $110;
   $112 = $16;
   $113 = $111 * $112;
   $114 = $106 + $113;
   $17 = $114;
   $115 = $16;
   $15 = $115;
   $116 = $17;
   $16 = $116;
   $117 = $18;
   $118 = (($117) + -1)|0;
   $18 = $118;
  }
  $119 = +HEAPF64[$11>>3];
  $120 = $16;
  $121 = 1.4916681462400413E-154 / $120;
  $122 = $119 * $121;
  $123 = $6;
  HEAPF64[$123>>3] = $122;
  $124 = ((($11)) + 8|0);
  $125 = +HEAPF64[$124>>3];
  $126 = $16;
  $127 = 1.4916681462400413E-154 / $126;
  $128 = $125 * $127;
  $129 = $6;
  $130 = ((($129)) + 8|0);
  HEAPF64[$130>>3] = $128;
  $131 = $6;
  $132 = +HEAPF64[$131>>3];
  $133 = (+Math_abs((+$132)));
  $134 = 4.4408920985006262E-16 * $133;
  $135 = $6;
  $136 = ((($135)) + 8|0);
  $137 = +HEAPF64[$136>>3];
  $138 = $137 + $134;
  HEAPF64[$136>>3] = $138;
  $139 = $5;
  $140 = $139 < 0.0;
  if ($140) {
   $141 = $4;
   $142 = $141 & 1;
   $143 = ($142|0)!=(0);
   if ($143) {
    $144 = $6;
    $145 = +HEAPF64[$144>>3];
    $146 = - $145;
    $147 = $6;
    HEAPF64[$147>>3] = $146;
   }
  }
  $148 = $12;
  $149 = ($148|0)!=(0);
  if ($149) {
   $150 = $12;
   $155 = $150;
  } else {
   $151 = $14;
   $152 = ($151|0)!=(0);
   $153 = $14;
   $154 = $152 ? $153 : 0;
   $155 = $154;
  }
  $3 = $155;
  $252 = $3;
  STACKTOP = sp;return ($252|0);
 }
 $156 = $4;
 $157 = $4;
 $158 = Math_imul($156, $157)|0;
 $159 = (+($158|0));
 $160 = 0.28999999999999998 / $159;
 $161 = $4;
 $162 = $4;
 $163 = Math_imul($161, $162)|0;
 $164 = (+($163|0));
 $165 = $5;
 $166 = $5;
 $167 = $165 * $166;
 $168 = $164 + $167;
 $169 = 0.5 / $168;
 $170 = $160 < $169;
 $171 = $4;
 $172 = $4;
 $173 = Math_imul($171, $172)|0;
 $174 = (+($173|0));
 if ($170) {
  $175 = 0.28999999999999998 / $174;
  $182 = $175;
 } else {
  $176 = $5;
  $177 = $5;
  $178 = $176 * $177;
  $179 = $174 + $178;
  $180 = 0.5 / $179;
  $182 = $180;
 }
 $181 = $182 < 3.0277272261966714E-6;
 if ($181) {
  $183 = $4;
  $184 = (+($183|0));
  $185 = $7;
  $186 = $6;
  $187 = (_gsl_sf_bessel_Inu_scaled_asymp_unif_e($184,$185,$186)|0);
  $19 = $187;
  $188 = $5;
  $189 = $188 < 0.0;
  if ($189) {
   $190 = $4;
   $191 = $190 & 1;
   $192 = ($191|0)!=(0);
   if ($192) {
    $193 = $6;
    $194 = +HEAPF64[$193>>3];
    $195 = - $194;
    $196 = $6;
    HEAPF64[$196>>3] = $195;
   }
  }
  $197 = $19;
  $3 = $197;
  $252 = $3;
  STACKTOP = sp;return ($252|0);
 }
 $20 = 489;
 $198 = $7;
 $199 = (_gsl_sf_bessel_Inu_scaled_asymp_unif_e(490.0,$198,$21)|0);
 $23 = $199;
 $200 = $7;
 $201 = (_gsl_sf_bessel_Inu_scaled_asymp_unif_e(489.0,$200,$22)|0);
 $24 = $201;
 $202 = +HEAPF64[$21>>3];
 $25 = $202;
 $203 = +HEAPF64[$22>>3];
 $26 = $203;
 $28 = 489;
 while(1) {
  $204 = $28;
  $205 = $4;
  $206 = ($204|0)>($205|0);
  if (!($206)) {
   break;
  }
  $207 = $25;
  $208 = $28;
  $209 = (+($208|0));
  $210 = 2.0 * $209;
  $211 = $7;
  $212 = $210 / $211;
  $213 = $26;
  $214 = $212 * $213;
  $215 = $207 + $214;
  $27 = $215;
  $216 = $26;
  $25 = $216;
  $217 = $27;
  $26 = $217;
  $218 = $28;
  $219 = (($218) + -1)|0;
  $28 = $219;
 }
 $220 = $26;
 $221 = $6;
 HEAPF64[$221>>3] = $220;
 $222 = $26;
 $223 = ((($21)) + 8|0);
 $224 = +HEAPF64[$223>>3];
 $225 = +HEAPF64[$21>>3];
 $226 = $224 / $225;
 $227 = ((($22)) + 8|0);
 $228 = +HEAPF64[$227>>3];
 $229 = +HEAPF64[$22>>3];
 $230 = $228 / $229;
 $231 = $226 + $230;
 $232 = $222 * $231;
 $233 = $6;
 $234 = ((($233)) + 8|0);
 HEAPF64[$234>>3] = $232;
 $235 = $5;
 $236 = $235 < 0.0;
 if ($236) {
  $237 = $4;
  $238 = $237 & 1;
  $239 = ($238|0)!=(0);
  if ($239) {
   $240 = $6;
   $241 = +HEAPF64[$240>>3];
   $242 = - $241;
   $243 = $6;
   HEAPF64[$243>>3] = $242;
  }
 }
 $244 = $23;
 $245 = ($244|0)!=(0);
 if ($245) {
  $246 = $23;
  $251 = $246;
 } else {
  $247 = $24;
  $248 = ($247|0)!=(0);
  $249 = $24;
  $250 = $248 ? $249 : 0;
  $251 = $250;
 }
 $3 = $251;
 $252 = $3;
 STACKTOP = sp;return ($252|0);
}
function _gsl_sf_bessel_In_scaled($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (_gsl_sf_bessel_In_scaled_e($7,$8,$5)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $6;
  _gsl_error(82999,82987,219,$12);
  $13 = +HEAPF64[$5>>3];
  $2 = $13;
  $15 = $2;
  STACKTOP = sp;return (+$15);
 } else {
  $14 = +HEAPF64[$5>>3];
  $2 = $14;
  $15 = $2;
  STACKTOP = sp;return (+$15);
 }
 return +(0.0);
}
function _gsl_sf_bessel_Inu_scaled_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 72|0;
 $12 = sp + 48|0;
 $13 = sp + 40|0;
 $14 = sp + 32|0;
 $18 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $22 = $5;
 $23 = $22 < 0.0;
 $24 = $4;
 $25 = $24 < 0.0;
 $or$cond = $23 | $25;
 if ($or$cond) {
  $26 = $6;
  HEAPF64[$26>>3] = nan;
  $27 = $6;
  $28 = ((($27)) + 8|0);
  HEAPF64[$28>>3] = nan;
  _gsl_error(83774,83040,43,1);
  $3 = 1;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $29 = $5;
 $30 = $5;
 $31 = $29 * $30;
 $32 = $4;
 $33 = $32 + 1.0;
 $34 = 10.0 * $33;
 $35 = $31 < $34;
 if ($35) {
  $36 = $5;
  $37 = - $36;
  $38 = (+Math_exp((+$37)));
  $8 = $38;
  $39 = $4;
  $40 = $5;
  $41 = (_gsl_sf_bessel_IJ_taylor_e($39,$40,1,100,2.2204460492503131E-16,$7)|0);
  $9 = $41;
  $42 = +HEAPF64[$7>>3];
  $43 = $8;
  $44 = $42 * $43;
  $45 = $6;
  HEAPF64[$45>>3] = $44;
  $46 = ((($7)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $8;
  $49 = $47 * $48;
  $50 = $6;
  $51 = ((($50)) + 8|0);
  HEAPF64[$51>>3] = $49;
  $52 = $6;
  $53 = +HEAPF64[$52>>3];
  $54 = (+Math_abs((+$53)));
  $55 = 4.4408920985006262E-16 * $54;
  $56 = $6;
  $57 = ((($56)) + 8|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $58 + $55;
  HEAPF64[$57>>3] = $59;
  $60 = $9;
  $3 = $60;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $61 = $4;
 $62 = $4;
 $63 = $61 * $62;
 $64 = $5;
 $65 = $5;
 $66 = $64 * $65;
 $67 = $63 + $66;
 $68 = 0.5 / $67;
 $69 = $68 < 6.0554544523933429E-6;
 $70 = $4;
 if ($69) {
  $71 = $5;
  $72 = $6;
  $73 = (_gsl_sf_bessel_Inu_scaled_asymp_unif_e($70,$71,$72)|0);
  $3 = $73;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $74 = $70 + 0.5;
 $75 = (~~(($74)));
 $10 = $75;
 $76 = $4;
 $77 = $10;
 $78 = (+($77|0));
 $79 = $76 - $78;
 $11 = $79;
 $80 = $5;
 $81 = $80 < 2.0;
 $82 = $11;
 $83 = $5;
 if ($81) {
  $84 = (_gsl_sf_bessel_K_scaled_temme($82,$83,$12,$13,$14)|0);
  $20 = $84;
 } else {
  $85 = (_gsl_sf_bessel_K_scaled_steed_temme_CF2($82,$83,$12,$13,$14)|0);
  $20 = $85;
 }
 $86 = +HEAPF64[$12>>3];
 $15 = $86;
 $87 = +HEAPF64[$13>>3];
 $16 = $87;
 $21 = 0;
 while(1) {
  $88 = $21;
  $89 = $10;
  $90 = ($88|0)<($89|0);
  if (!($90)) {
   break;
  }
  $91 = $15;
  $17 = $91;
  $92 = $16;
  $15 = $92;
  $93 = $11;
  $94 = $21;
  $95 = (+($94|0));
  $96 = $93 + $95;
  $97 = $96 + 1.0;
  $98 = 2.0 * $97;
  $99 = $5;
  $100 = $98 / $99;
  $101 = $15;
  $102 = $100 * $101;
  $103 = $17;
  $104 = $102 + $103;
  $16 = $104;
  $105 = $21;
  $106 = (($105) + 1)|0;
  $21 = $106;
 }
 $107 = $4;
 $108 = $5;
 $109 = (_gsl_sf_bessel_I_CF1_ser($107,$108,$18)|0);
 $19 = $109;
 $110 = $5;
 $111 = $16;
 $112 = +HEAPF64[$18>>3];
 $113 = $15;
 $114 = $112 * $113;
 $115 = $111 + $114;
 $116 = $110 * $115;
 $117 = 1.0 / $116;
 $118 = $6;
 HEAPF64[$118>>3] = $117;
 $119 = $10;
 $120 = (+($119|0));
 $121 = 0.5 * $120;
 $122 = $121 + 2.0;
 $123 = 2.2204460492503131E-16 * $122;
 $124 = $6;
 $125 = +HEAPF64[$124>>3];
 $126 = (+Math_abs((+$125)));
 $127 = $123 * $126;
 $128 = $6;
 $129 = ((($128)) + 8|0);
 HEAPF64[$129>>3] = $127;
 $130 = $20;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = $20;
  $137 = $132;
 } else {
  $133 = $19;
  $134 = ($133|0)!=(0);
  $135 = $19;
  $136 = $134 ? $135 : 0;
  $137 = $136;
 }
 $3 = $137;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _gsl_sf_bessel_J1_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 72|0;
 $8 = sp + 48|0;
 $9 = sp + 32|0;
 $10 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $16 = $3;
 $17 = (+Math_abs((+$16)));
 $5 = $17;
 $18 = $5;
 $19 = $18 == 0.0;
 if ($19) {
  $20 = $4;
  HEAPF64[$20>>3] = 0.0;
  $21 = $4;
  $22 = ((($21)) + 8|0);
  HEAPF64[$22>>3] = 0.0;
  $2 = 0;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $23 = $5;
 $24 = $23 < 4.4501477170144028E-308;
 if ($24) {
  $25 = $4;
  HEAPF64[$25>>3] = 0.0;
  $26 = $4;
  $27 = ((($26)) + 8|0);
  HEAPF64[$27>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83053,86,15);
  $2 = 15;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $28 = $5;
 $29 = $28 < 4.2146848510894035E-8;
 if ($29) {
  $30 = $3;
  $31 = 0.5 * $30;
  $32 = $4;
  HEAPF64[$32>>3] = $31;
  $33 = $4;
  $34 = ((($33)) + 8|0);
  HEAPF64[$34>>3] = 0.0;
  $2 = 0;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $35 = $5;
 $36 = $35 < 4.0;
 $37 = $5;
 if ($36) {
  $38 = 0.125 * $37;
  $39 = $5;
  $40 = $38 * $39;
  $41 = $40 - 1.0;
  (_cheb_eval_e_3606(70432,$41,$6)|0);
  $42 = $3;
  $43 = +HEAPF64[$6>>3];
  $44 = 0.25 + $43;
  $45 = $42 * $44;
  $46 = $4;
  HEAPF64[$46>>3] = $45;
  $47 = $3;
  $48 = ((($6)) + 8|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $47 * $49;
  $51 = (+Math_abs((+$50)));
  $52 = $4;
  $53 = ((($52)) + 8|0);
  HEAPF64[$53>>3] = $51;
  $2 = 0;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $54 = $5;
 $55 = $37 * $54;
 $56 = 32.0 / $55;
 $57 = $56 - 1.0;
 $7 = $57;
 $58 = $7;
 $59 = (_cheb_eval_e_3606(70528,$58,$8)|0);
 $11 = $59;
 $60 = $7;
 $61 = (_cheb_eval_e_3606(70560,$60,$9)|0);
 $12 = $61;
 $62 = $5;
 $63 = +HEAPF64[$9>>3];
 $64 = $5;
 $65 = $63 / $64;
 $66 = (_gsl_sf_bessel_sin_pi4_e($62,$65,$10)|0);
 $13 = $66;
 $67 = $5;
 $68 = (+Math_sqrt((+$67)));
 $14 = $68;
 $69 = +HEAPF64[$8>>3];
 $70 = 0.75 + $69;
 $71 = $14;
 $72 = $70 / $71;
 $15 = $72;
 $73 = $3;
 $74 = $73 < 0.0;
 $75 = $15;
 $76 = - $75;
 $77 = $74 ? $76 : $75;
 $78 = +HEAPF64[$10>>3];
 $79 = $77 * $78;
 $80 = $4;
 HEAPF64[$80>>3] = $79;
 $81 = +HEAPF64[$10>>3];
 $82 = (+Math_abs((+$81)));
 $83 = ((($8)) + 8|0);
 $84 = +HEAPF64[$83>>3];
 $85 = $82 * $84;
 $86 = $14;
 $87 = $85 / $86;
 $88 = $15;
 $89 = (+Math_abs((+$88)));
 $90 = ((($10)) + 8|0);
 $91 = +HEAPF64[$90>>3];
 $92 = $89 * $91;
 $93 = $87 + $92;
 $94 = $4;
 $95 = ((($94)) + 8|0);
 HEAPF64[$95>>3] = $93;
 $96 = $4;
 $97 = +HEAPF64[$96>>3];
 $98 = (+Math_abs((+$97)));
 $99 = 2.2204460492503131E-16 * $98;
 $100 = $4;
 $101 = ((($100)) + 8|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $102 + $99;
 HEAPF64[$101>>3] = $103;
 $104 = $11;
 $105 = ($104|0)!=(0);
 do {
  if ($105) {
   $106 = $11;
   $114 = $106;
  } else {
   $107 = $12;
   $108 = ($107|0)!=(0);
   if ($108) {
    $109 = $12;
    $114 = $109;
    break;
   } else {
    $110 = $13;
    $111 = ($110|0)!=(0);
    $112 = $13;
    $113 = $111 ? $112 : 0;
    $114 = $113;
    break;
   }
  }
 } while(0);
 $2 = $114;
 $115 = $2;
 STACKTOP = sp;return ($115|0);
}
function _cheb_eval_e_3606($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gsl_sf_bessel_K0_scaled_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0;
 var $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 24|0;
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $12 = $3;
 $13 = $12 <= 0.0;
 if ($13) {
  $14 = $4;
  HEAPF64[$14>>3] = nan;
  $15 = $4;
  $16 = ((($15)) + 8|0);
  HEAPF64[$16>>3] = nan;
  _gsl_error(83774,83065,136,1);
  $2 = 1;
  $107 = $2;
  STACKTOP = sp;return ($107|0);
 }
 $17 = $3;
 $18 = $17 < 1.0;
 $19 = $3;
 if ($18) {
  $20 = (+Math_log((+$19)));
  $5 = $20;
  $21 = $3;
  $22 = (+Math_exp((+$21)));
  $6 = $22;
  $23 = $3;
  $24 = $3;
  $25 = $23 * $24;
  $7 = $25;
  $26 = $6;
  $27 = $7;
  $28 = (+_gsl_poly_eval(30976,8,$27));
  $29 = $5;
  $30 = $7;
  $31 = 0.25 * $30;
  $32 = $7;
  $33 = 0.25 * $32;
  $34 = (+_gsl_poly_eval(31040,7,$33));
  $35 = $31 * $34;
  $36 = 1.0 + $35;
  $37 = $29 * $36;
  $38 = $28 - $37;
  $39 = $26 * $38;
  $40 = $4;
  HEAPF64[$40>>3] = $39;
  $41 = $6;
  $42 = $5;
  $43 = (+Math_abs((+$42)));
  $44 = $43 * 0.59999999999999998;
  $45 = 1.6000000000000001 + $44;
  $46 = $41 * $45;
  $47 = $46 * 2.2204460492503131E-16;
  $48 = $4;
  $49 = ((($48)) + 8|0);
  HEAPF64[$49>>3] = $47;
  $50 = $4;
  $51 = +HEAPF64[$50>>3];
  $52 = (+Math_abs((+$51)));
  $53 = 4.4408920985006262E-16 * $52;
  $54 = $4;
  $55 = ((($54)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56 + $53;
  HEAPF64[$55>>3] = $57;
  $2 = 0;
  $107 = $2;
  STACKTOP = sp;return ($107|0);
 }
 $58 = $19 <= 8.0;
 $59 = $3;
 $60 = (+Math_sqrt((+$59)));
 if ($58) {
  $8 = $60;
  $61 = $3;
  $62 = 16.0 / $61;
  $63 = $62 - 9.0;
  $64 = $63 / 7.0;
  (_cheb_eval_e_3618(70464,$64,$9)|0);
  $65 = +HEAPF64[$9>>3];
  $66 = 1.203125 + $65;
  $67 = $8;
  $68 = $66 / $67;
  $69 = $4;
  HEAPF64[$69>>3] = $68;
  $70 = ((($9)) + 8|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $8;
  $73 = $71 / $72;
  $74 = $4;
  $75 = ((($74)) + 8|0);
  HEAPF64[$75>>3] = $73;
  $76 = $4;
  $77 = +HEAPF64[$76>>3];
  $78 = (+Math_abs((+$77)));
  $79 = 4.4408920985006262E-16 * $78;
  $80 = $4;
  $81 = ((($80)) + 8|0);
  $82 = +HEAPF64[$81>>3];
  $83 = $82 + $79;
  HEAPF64[$81>>3] = $83;
  $2 = 0;
  $107 = $2;
  STACKTOP = sp;return ($107|0);
 } else {
  $10 = $60;
  $84 = $3;
  $85 = 16.0 / $84;
  $86 = $85 - 1.0;
  (_cheb_eval_e_3618(70496,$86,$11)|0);
  $87 = +HEAPF64[$11>>3];
  $88 = 1.25 + $87;
  $89 = $10;
  $90 = $88 / $89;
  $91 = $4;
  HEAPF64[$91>>3] = $90;
  $92 = ((($11)) + 8|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $93 + 2.2204460492503131E-16;
  $95 = $10;
  $96 = $94 / $95;
  $97 = $4;
  $98 = ((($97)) + 8|0);
  HEAPF64[$98>>3] = $96;
  $99 = $4;
  $100 = +HEAPF64[$99>>3];
  $101 = (+Math_abs((+$100)));
  $102 = 4.4408920985006262E-16 * $101;
  $103 = $4;
  $104 = ((($103)) + 8|0);
  $105 = +HEAPF64[$104>>3];
  $106 = $105 + $102;
  HEAPF64[$104>>3] = $106;
  $2 = 0;
  $107 = $2;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function _cheb_eval_e_3618($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gsl_sf_bessel_Knu_scaled_e10_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $9 = sp + 56|0;
 $10 = sp + 48|0;
 $11 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $19 = $5;
 $20 = $19 <= 0.0;
 $21 = $4;
 $22 = $21 < 0.0;
 $or$cond = $20 | $22;
 if ($or$cond) {
  $23 = $6;
  HEAPF64[$23>>3] = nan;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAPF64[$25>>3] = nan;
  $26 = $6;
  $27 = ((($26)) + 16|0);
  HEAP32[$27>>2] = 0;
  _gsl_error(83774,83077,58,1);
  $3 = 1;
  $95 = $3;
  STACKTOP = sp;return ($95|0);
 }
 $28 = $4;
 $29 = $28 + 0.5;
 $30 = (~~(($29)));
 $7 = $30;
 $31 = $4;
 $32 = $7;
 $33 = (+($32|0));
 $34 = $31 - $33;
 $8 = $34;
 $16 = 0;
 $35 = $5;
 $36 = $35 < 2.0;
 $37 = $8;
 $38 = $5;
 if ($36) {
  (_gsl_sf_bessel_K_scaled_temme($37,$38,$9,$10,$11)|0);
 } else {
  (_gsl_sf_bessel_K_scaled_steed_temme_CF2($37,$38,$9,$10,$11)|0);
 }
 $39 = +HEAPF64[$9>>3];
 $12 = $39;
 $40 = +HEAPF64[$10>>3];
 $13 = $40;
 $15 = 0;
 while(1) {
  $41 = $15;
  $42 = $7;
  $43 = ($41|0)<($42|0);
  $44 = $12;
  if (!($43)) {
   break;
  }
  $14 = $44;
  $45 = $13;
  $12 = $45;
  $46 = $12;
  $47 = (+Math_abs((+$46)));
  $48 = $47 > 1.3407807929942596E+154;
  if ($48) {
   $49 = $12;
   $50 = (+Math_abs((+$49)));
   $51 = (+Math_log((+$50)));
   $52 = $51 / 2.3025850929940459;
   $53 = (+Math_floor((+$52)));
   $17 = $53;
   $54 = $17;
   $55 = (+Math_pow(10.0,(+$54)));
   $18 = $55;
   $56 = $18;
   $57 = $14;
   $58 = $57 / $56;
   $14 = $58;
   $59 = $18;
   $60 = $12;
   $61 = $60 / $59;
   $12 = $61;
   $62 = $17;
   $63 = $16;
   $64 = (+($63|0));
   $65 = $64 + $62;
   $66 = (~~(($65)));
   $16 = $66;
  }
  $67 = $8;
  $68 = $15;
  $69 = (+($68|0));
  $70 = $67 + $69;
  $71 = $70 + 1.0;
  $72 = 2.0 * $71;
  $73 = $5;
  $74 = $72 / $73;
  $75 = $12;
  $76 = $74 * $75;
  $77 = $14;
  $78 = $76 + $77;
  $13 = $78;
  $79 = $15;
  $80 = (($79) + 1)|0;
  $15 = $80;
 }
 $81 = $6;
 HEAPF64[$81>>3] = $44;
 $82 = $7;
 $83 = (+($82|0));
 $84 = $83 + 4.0;
 $85 = 4.4408920985006262E-16 * $84;
 $86 = $6;
 $87 = +HEAPF64[$86>>3];
 $88 = (+Math_abs((+$87)));
 $89 = $85 * $88;
 $90 = $6;
 $91 = ((($90)) + 8|0);
 HEAPF64[$91>>3] = $89;
 $92 = $16;
 $93 = $6;
 $94 = ((($93)) + 16|0);
 HEAP32[$94>>2] = $92;
 $3 = 0;
 $95 = $3;
 STACKTOP = sp;return ($95|0);
}
function _gsl_sf_bessel_lnKnu_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 64|0;
 $9 = sp + 40|0;
 $12 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $5;
 $15 = $14 <= 0.0;
 $16 = $4;
 $17 = $16 < 0.0;
 $or$cond = $15 | $17;
 if ($or$cond) {
  $18 = $6;
  HEAPF64[$18>>3] = nan;
  $19 = $6;
  $20 = ((($19)) + 8|0);
  HEAPF64[$20>>3] = nan;
  _gsl_error(83774,83077,116,1);
  $3 = 1;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $21 = $4;
 $22 = $21 == 0.0;
 $23 = $5;
 if ($22) {
  (_gsl_sf_bessel_K0_scaled_e($23,$7)|0);
  $24 = $5;
  $25 = - $24;
  $26 = +HEAPF64[$7>>3];
  $27 = (+Math_abs((+$26)));
  $28 = (+Math_log((+$27)));
  $29 = $25 + $28;
  $30 = $6;
  HEAPF64[$30>>3] = $29;
  $31 = $5;
  $32 = (+Math_abs((+$31)));
  $33 = 2.2204460492503131E-16 * $32;
  $34 = ((($7)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = +HEAPF64[$7>>3];
  $37 = $35 / $36;
  $38 = (+Math_abs((+$37)));
  $39 = $33 + $38;
  $40 = $6;
  $41 = ((($40)) + 8|0);
  HEAPF64[$41>>3] = $39;
  $42 = $6;
  $43 = +HEAPF64[$42>>3];
  $44 = (+Math_abs((+$43)));
  $45 = 2.2204460492503131E-16 * $44;
  $46 = $6;
  $47 = ((($46)) + 8|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $48 + $45;
  HEAPF64[$47>>3] = $49;
  $3 = 0;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $50 = $23 < 2.0;
 $51 = $4;
 $52 = $51 > 1.0;
 $or$cond3 = $50 & $52;
 if ($or$cond3) {
  $53 = $4;
  (_gsl_sf_lngamma_e($53,$9)|0);
  $54 = $4;
  $55 = $5;
  $56 = 0.5 * $55;
  $57 = (+Math_log((+$56)));
  $58 = $54 * $57;
  $59 = -0.69314718055994529 - $58;
  $60 = +HEAPF64[$9>>3];
  $61 = $59 + $60;
  $8 = $61;
  $62 = $8;
  $63 = $62 > 689.78271289338397;
  if ($63) {
   $64 = $5;
   $65 = 0.25 * $64;
   $66 = $5;
   $67 = $65 * $66;
   $10 = $67;
   $68 = $10;
   $69 = $4;
   $70 = $69 - 1.0;
   $71 = $68 / $70;
   $72 = 1.0 - $71;
   $11 = $72;
   $73 = $4;
   $74 = $73 > 2.0;
   if ($74) {
    $75 = $10;
    $76 = $4;
    $77 = $76 - 1.0;
    $78 = $75 / $77;
    $79 = $10;
    $80 = $4;
    $81 = $80 - 2.0;
    $82 = $79 / $81;
    $83 = $78 * $82;
    $84 = $11;
    $85 = $84 + $83;
    $11 = $85;
   }
   $86 = $8;
   $87 = $11;
   $88 = (+Math_log((+$87)));
   $89 = $86 + $88;
   $90 = $6;
   HEAPF64[$90>>3] = $89;
   $91 = ((($9)) + 8|0);
   $92 = +HEAPF64[$91>>3];
   $93 = $6;
   $94 = ((($93)) + 8|0);
   HEAPF64[$94>>3] = $92;
   $95 = $6;
   $96 = +HEAPF64[$95>>3];
   $97 = (+Math_abs((+$96)));
   $98 = 4.4408920985006262E-16 * $97;
   $99 = $6;
   $100 = ((($99)) + 8|0);
   $101 = +HEAPF64[$100>>3];
   $102 = $101 + $98;
   HEAPF64[$100>>3] = $102;
   $3 = 0;
   $138 = $3;
   STACKTOP = sp;return ($138|0);
  }
 }
 $103 = $4;
 $104 = $5;
 $105 = (_gsl_sf_bessel_Knu_scaled_e10_e($103,$104,$12)|0);
 $13 = $105;
 $106 = $5;
 $107 = - $106;
 $108 = +HEAPF64[$12>>3];
 $109 = (+Math_abs((+$108)));
 $110 = (+Math_log((+$109)));
 $111 = $107 + $110;
 $112 = ((($12)) + 16|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (+($113|0));
 $115 = $114 * 2.3025850929940459;
 $116 = $111 + $115;
 $117 = $6;
 HEAPF64[$117>>3] = $116;
 $118 = $5;
 $119 = (+Math_abs((+$118)));
 $120 = 2.2204460492503131E-16 * $119;
 $121 = ((($12)) + 8|0);
 $122 = +HEAPF64[$121>>3];
 $123 = +HEAPF64[$12>>3];
 $124 = $122 / $123;
 $125 = (+Math_abs((+$124)));
 $126 = $120 + $125;
 $127 = $6;
 $128 = ((($127)) + 8|0);
 HEAPF64[$128>>3] = $126;
 $129 = $6;
 $130 = +HEAPF64[$129>>3];
 $131 = (+Math_abs((+$130)));
 $132 = 2.2204460492503131E-16 * $131;
 $133 = $6;
 $134 = ((($133)) + 8|0);
 $135 = +HEAPF64[$134>>3];
 $136 = $135 + $132;
 HEAPF64[$134>>3] = $136;
 $137 = $13;
 $3 = $137;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _gsl_sf_temme_gamma($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $12 = sp + 16|0;
 $13 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $5;
 $15 = (+Math_abs((+$14)));
 $10 = $15;
 $16 = $10;
 $17 = 4.0 * $16;
 $18 = $17 - 1.0;
 $11 = $18;
 $19 = $11;
 (_cheb_eval_e_3706(70592,$19,$12)|0);
 $20 = $11;
 (_cheb_eval_e_3706(70624,$20,$13)|0);
 $21 = +HEAPF64[$12>>3];
 $22 = $8;
 HEAPF64[$22>>3] = $21;
 $23 = +HEAPF64[$13>>3];
 $24 = $9;
 HEAPF64[$24>>3] = $23;
 $25 = +HEAPF64[$13>>3];
 $26 = $5;
 $27 = +HEAPF64[$12>>3];
 $28 = $26 * $27;
 $29 = $25 + $28;
 $30 = 1.0 / $29;
 $31 = $7;
 HEAPF64[$31>>3] = $30;
 $32 = +HEAPF64[$13>>3];
 $33 = $5;
 $34 = +HEAPF64[$12>>3];
 $35 = $33 * $34;
 $36 = $32 - $35;
 $37 = 1.0 / $36;
 $38 = $6;
 HEAPF64[$38>>3] = $37;
 STACKTOP = sp;return 0;
}
function _cheb_eval_e_3706($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gsl_sf_bessel_K_scaled_temme($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $28 = sp + 40|0;
 $29 = sp + 32|0;
 $30 = sp + 24|0;
 $31 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 15000;
 $35 = $6;
 $36 = 0.5 * $35;
 $11 = $36;
 $37 = $11;
 $38 = (+Math_log((+$37)));
 $12 = $38;
 $39 = $5;
 $40 = $12;
 $41 = $39 * $40;
 $42 = (+Math_exp((+$41)));
 $13 = $42;
 $43 = $5;
 $44 = 3.1415926535897931 * $43;
 $14 = $44;
 $45 = $5;
 $46 = - $45;
 $47 = $12;
 $48 = $46 * $47;
 $15 = $48;
 $49 = $14;
 $50 = (+Math_abs((+$49)));
 $51 = $50 < 2.2204460492503131E-16;
 if ($51) {
  $56 = 1.0;
 } else {
  $52 = $14;
  $53 = $14;
  $54 = (+Math_sin((+$53)));
  $55 = $52 / $54;
  $56 = $55;
 }
 $16 = $56;
 $57 = $15;
 $58 = (+Math_abs((+$57)));
 $59 = $58 < 2.2204460492503131E-16;
 if ($59) {
  $64 = 1.0;
 } else {
  $60 = $15;
  $61 = (+_sinh($60));
  $62 = $15;
  $63 = $61 / $62;
  $64 = $63;
 }
 $17 = $64;
 $65 = $6;
 $66 = (+Math_exp((+$65)));
 $18 = $66;
 $26 = 0;
 $67 = $5;
 $68 = (_gsl_sf_temme_gamma($67,$28,$29,$30,$31)|0);
 $32 = $68;
 $69 = $16;
 $70 = $15;
 $71 = (+_cosh($70));
 $72 = +HEAPF64[$30>>3];
 $73 = $71 * $72;
 $74 = $17;
 $75 = $12;
 $76 = $74 * $75;
 $77 = +HEAPF64[$31>>3];
 $78 = $76 * $77;
 $79 = $73 - $78;
 $80 = $69 * $79;
 $21 = $80;
 $81 = $13;
 $82 = 0.5 / $81;
 $83 = +HEAPF64[$28>>3];
 $84 = $82 * $83;
 $22 = $84;
 $85 = $13;
 $86 = 0.5 * $85;
 $87 = +HEAPF64[$29>>3];
 $88 = $86 * $87;
 $23 = $88;
 $89 = $22;
 $24 = $89;
 $25 = 1.0;
 $90 = $21;
 $19 = $90;
 $91 = $24;
 $20 = $91;
 while(1) {
  $92 = $26;
  $93 = ($92|0)<(15000);
  if (!($93)) {
   break;
  }
  $94 = $26;
  $95 = (($94) + 1)|0;
  $26 = $95;
  $96 = $26;
  $97 = (+($96|0));
  $98 = $21;
  $99 = $97 * $98;
  $100 = $22;
  $101 = $99 + $100;
  $102 = $23;
  $103 = $101 + $102;
  $104 = $26;
  $105 = $26;
  $106 = Math_imul($104, $105)|0;
  $107 = (+($106|0));
  $108 = $5;
  $109 = $5;
  $110 = $108 * $109;
  $111 = $107 - $110;
  $112 = $103 / $111;
  $21 = $112;
  $113 = $11;
  $114 = $11;
  $115 = $113 * $114;
  $116 = $26;
  $117 = (+($116|0));
  $118 = $115 / $117;
  $119 = $25;
  $120 = $119 * $118;
  $25 = $120;
  $121 = $26;
  $122 = (+($121|0));
  $123 = $5;
  $124 = $122 - $123;
  $125 = $22;
  $126 = $125 / $124;
  $22 = $126;
  $127 = $26;
  $128 = (+($127|0));
  $129 = $5;
  $130 = $128 + $129;
  $131 = $23;
  $132 = $131 / $130;
  $23 = $132;
  $133 = $26;
  $134 = (0 - ($133))|0;
  $135 = (+($134|0));
  $136 = $21;
  $137 = $135 * $136;
  $138 = $22;
  $139 = $137 + $138;
  $24 = $139;
  $140 = $25;
  $141 = $21;
  $142 = $140 * $141;
  $33 = $142;
  $143 = $25;
  $144 = $24;
  $145 = $143 * $144;
  $34 = $145;
  $146 = $33;
  $147 = $19;
  $148 = $147 + $146;
  $19 = $148;
  $149 = $34;
  $150 = $20;
  $151 = $150 + $149;
  $20 = $151;
  $152 = $33;
  $153 = (+Math_abs((+$152)));
  $154 = $19;
  $155 = (+Math_abs((+$154)));
  $156 = 0.5 * $155;
  $157 = $156 * 2.2204460492503131E-16;
  $158 = $153 < $157;
  if ($158) {
   break;
  }
 }
 $159 = $19;
 $160 = $18;
 $161 = $159 * $160;
 $162 = $7;
 HEAPF64[$162>>3] = $161;
 $163 = $20;
 $164 = $163 * 2.0;
 $165 = $6;
 $166 = $164 / $165;
 $167 = $18;
 $168 = $166 * $167;
 $169 = $8;
 HEAPF64[$169>>3] = $168;
 $170 = $8;
 $171 = +HEAPF64[$170>>3];
 $172 = - $171;
 $173 = $5;
 $174 = $6;
 $175 = $173 / $174;
 $176 = $7;
 $177 = +HEAPF64[$176>>3];
 $178 = $175 * $177;
 $179 = $172 + $178;
 $180 = $9;
 HEAPF64[$180>>3] = $179;
 $181 = $26;
 $182 = ($181|0)==(15000);
 $183 = $182 ? 11 : 0;
 $27 = $183;
 $184 = $27;
 $185 = ($184|0)!=(0);
 if ($185) {
  $186 = $27;
  $191 = $186;
  STACKTOP = sp;return ($191|0);
 } else {
  $187 = $32;
  $188 = ($187|0)!=(0);
  $189 = $32;
  $190 = $188 ? $189 : 0;
  $191 = $190;
  STACKTOP = sp;return ($191|0);
 }
 return (0)|0;
}
function _gsl_sf_lnbeta_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = (_gsl_sf_lnbeta_sgn_e($9,$10,$11,$7)|0);
 $8 = $12;
 $13 = +HEAPF64[$7>>3];
 $14 = $13 == -1.0;
 if ($14) {
  $15 = $6;
  HEAPF64[$15>>3] = nan;
  $16 = $6;
  $17 = ((($16)) + 8|0);
  HEAPF64[$17>>3] = nan;
  _gsl_error(83774,83090,44,1);
  $3 = 1;
  $19 = $3;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = $8;
  $3 = $18;
  $19 = $3;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _gsl_sf_lnbeta_sgn_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $19 = sp + 128|0;
 $20 = sp + 112|0;
 $21 = sp + 96|0;
 $22 = sp + 80|0;
 $23 = sp + 64|0;
 $24 = sp + 48|0;
 $25 = sp + 32|0;
 $26 = sp + 24|0;
 $27 = sp + 16|0;
 $28 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $33 = $5;
 $34 = $33 == 0.0;
 $35 = $6;
 $36 = $35 == 0.0;
 $or$cond = $34 | $36;
 if ($or$cond) {
  $37 = $8;
  HEAPF64[$37>>3] = 0.0;
  $38 = $7;
  HEAPF64[$38>>3] = nan;
  $39 = $7;
  $40 = ((($39)) + 8|0);
  HEAPF64[$40>>3] = nan;
  _gsl_error(83774,83090,56,1);
  $4 = 1;
  $218 = $4;
  STACKTOP = sp;return ($218|0);
 }
 $41 = $5;
 $42 = (+_isnegint($41));
 $43 = $42 != 0.0;
 if (!($43)) {
  $44 = $6;
  $45 = (+_isnegint($44));
  $46 = $45 != 0.0;
  if (!($46)) {
   $51 = $5;
   $52 = $51 > 0.0;
   $53 = $6;
   $54 = $53 > 0.0;
   $or$cond3 = $52 & $54;
   if ($or$cond3) {
    $55 = $5;
    $56 = $6;
    $57 = $55 > $56;
    $58 = $5;
    $59 = $6;
    $60 = $57 ? $58 : $59;
    $9 = $60;
    $61 = $5;
    $62 = $6;
    $63 = $61 < $62;
    $64 = $5;
    $65 = $6;
    $66 = $63 ? $64 : $65;
    $10 = $66;
    $67 = $10;
    $68 = $9;
    $69 = $67 / $68;
    $11 = $69;
    $70 = $11;
    $71 = $70 < 0.20000000000000001;
    if ($71) {
     $72 = $5;
     (_gsl_sf_gammastar_e($72,$20)|0);
     $73 = $6;
     (_gsl_sf_gammastar_e($73,$21)|0);
     $74 = $5;
     $75 = $6;
     $76 = $74 + $75;
     (_gsl_sf_gammastar_e($76,$22)|0);
     $77 = $11;
     (_gsl_sf_log_1plusx_e($77,$19)|0);
     $78 = +HEAPF64[$20>>3];
     $79 = +HEAPF64[$21>>3];
     $80 = $78 * $79;
     $81 = +HEAPF64[$22>>3];
     $82 = $80 / $81;
     $83 = $82 * 1.4142135623730951;
     $84 = $83 * 1.7724538509055161;
     $85 = (+Math_log((+$84)));
     $12 = $85;
     $86 = ((($20)) + 8|0);
     $87 = +HEAPF64[$86>>3];
     $88 = +HEAPF64[$20>>3];
     $89 = $87 / $88;
     $90 = ((($21)) + 8|0);
     $91 = +HEAPF64[$90>>3];
     $92 = +HEAPF64[$21>>3];
     $93 = $91 / $92;
     $94 = $89 + $93;
     $95 = ((($22)) + 8|0);
     $96 = +HEAPF64[$95>>3];
     $97 = +HEAPF64[$22>>3];
     $98 = $96 / $97;
     $99 = $94 + $98;
     $13 = $99;
     $100 = $10;
     $101 = $11;
     $102 = (+Math_log((+$101)));
     $103 = $100 * $102;
     $16 = $103;
     $104 = $10;
     $105 = (+Math_log((+$104)));
     $106 = 0.5 * $105;
     $17 = $106;
     $107 = $5;
     $108 = $6;
     $109 = $107 + $108;
     $110 = $109 - 0.5;
     $111 = +HEAPF64[$19>>3];
     $112 = $110 * $111;
     $18 = $112;
     $113 = $16;
     $114 = $17;
     $115 = $113 - $114;
     $116 = $18;
     $117 = $115 - $116;
     $14 = $117;
     $118 = $16;
     $119 = (+Math_abs((+$118)));
     $120 = $17;
     $121 = (+Math_abs((+$120)));
     $122 = $119 + $121;
     $123 = $18;
     $124 = (+Math_abs((+$123)));
     $125 = $122 + $124;
     $126 = 2.2204460492503131E-16 * $125;
     $15 = $126;
     $127 = $5;
     $128 = $6;
     $129 = $127 + $128;
     $130 = $129 - 0.5;
     $131 = (+Math_abs((+$130)));
     $132 = ((($19)) + 8|0);
     $133 = +HEAPF64[$132>>3];
     $134 = $131 * $133;
     $135 = $15;
     $136 = $135 + $134;
     $15 = $136;
     $137 = $12;
     $138 = $14;
     $139 = $137 + $138;
     $140 = $7;
     HEAPF64[$140>>3] = $139;
     $141 = $13;
     $142 = $15;
     $143 = $141 + $142;
     $144 = $7;
     $145 = ((($144)) + 8|0);
     HEAPF64[$145>>3] = $143;
     $146 = $7;
     $147 = +HEAPF64[$146>>3];
     $148 = (+Math_abs((+$147)));
     $149 = 4.4408920985006262E-16 * $148;
     $150 = $7;
     $151 = ((($150)) + 8|0);
     $152 = +HEAPF64[$151>>3];
     $153 = $152 + $149;
     HEAPF64[$151>>3] = $153;
     $154 = $8;
     HEAPF64[$154>>3] = 1.0;
     $4 = 0;
     $218 = $4;
     STACKTOP = sp;return ($218|0);
    }
   }
   $155 = $5;
   $156 = $6;
   $157 = $155 + $156;
   $29 = $157;
   $158 = $5;
   $159 = (_gsl_sf_lngamma_sgn_e($158,$23,$26)|0);
   $30 = $159;
   $160 = $6;
   $161 = (_gsl_sf_lngamma_sgn_e($160,$24,$27)|0);
   $31 = $161;
   $162 = $29;
   $163 = (_gsl_sf_lngamma_sgn_e($162,$25,$28)|0);
   $32 = $163;
   $164 = +HEAPF64[$26>>3];
   $165 = +HEAPF64[$27>>3];
   $166 = $164 * $165;
   $167 = +HEAPF64[$28>>3];
   $168 = $166 * $167;
   $169 = $8;
   HEAPF64[$169>>3] = $168;
   $170 = +HEAPF64[$23>>3];
   $171 = +HEAPF64[$24>>3];
   $172 = $170 + $171;
   $173 = +HEAPF64[$25>>3];
   $174 = $172 - $173;
   $175 = $7;
   HEAPF64[$175>>3] = $174;
   $176 = ((($23)) + 8|0);
   $177 = +HEAPF64[$176>>3];
   $178 = ((($24)) + 8|0);
   $179 = +HEAPF64[$178>>3];
   $180 = $177 + $179;
   $181 = ((($25)) + 8|0);
   $182 = +HEAPF64[$181>>3];
   $183 = $180 + $182;
   $184 = $7;
   $185 = ((($184)) + 8|0);
   HEAPF64[$185>>3] = $183;
   $186 = +HEAPF64[$23>>3];
   $187 = (+Math_abs((+$186)));
   $188 = +HEAPF64[$24>>3];
   $189 = (+Math_abs((+$188)));
   $190 = $187 + $189;
   $191 = +HEAPF64[$25>>3];
   $192 = (+Math_abs((+$191)));
   $193 = $190 + $192;
   $194 = 4.4408920985006262E-16 * $193;
   $195 = $7;
   $196 = ((($195)) + 8|0);
   $197 = +HEAPF64[$196>>3];
   $198 = $197 + $194;
   HEAPF64[$196>>3] = $198;
   $199 = $7;
   $200 = +HEAPF64[$199>>3];
   $201 = (+Math_abs((+$200)));
   $202 = 4.4408920985006262E-16 * $201;
   $203 = $7;
   $204 = ((($203)) + 8|0);
   $205 = +HEAPF64[$204>>3];
   $206 = $205 + $202;
   HEAPF64[$204>>3] = $206;
   $207 = $30;
   $208 = ($207|0)!=(0);
   do {
    if ($208) {
     $209 = $30;
     $217 = $209;
    } else {
     $210 = $31;
     $211 = ($210|0)!=(0);
     if ($211) {
      $212 = $31;
      $217 = $212;
      break;
     } else {
      $213 = $32;
      $214 = ($213|0)!=(0);
      $215 = $32;
      $216 = $214 ? $215 : 0;
      $217 = $216;
      break;
     }
    }
   } while(0);
   $4 = $217;
   $218 = $4;
   STACKTOP = sp;return ($218|0);
  }
 }
 $47 = $8;
 HEAPF64[$47>>3] = 0.0;
 $48 = $7;
 HEAPF64[$48>>3] = nan;
 $49 = $7;
 $50 = ((($49)) + 8|0);
 HEAPF64[$50>>3] = nan;
 _gsl_error(83774,83090,59,1);
 $4 = 1;
 $218 = $4;
 STACKTOP = sp;return ($218|0);
}
function _isnegint($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 < 0.0;
 if ($3) {
  $4 = $1;
  $5 = $1;
  $6 = (+Math_floor((+$5)));
  $7 = $4 == $6;
  $9 = $7;
 } else {
  $9 = 0;
 }
 $8 = $9&1;
 $10 = (+($8|0));
 STACKTOP = sp;return (+$10);
}
function _gsl_sf_beta_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0;
 var $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 56|0;
 $8 = sp + 40|0;
 $9 = sp + 24|0;
 $10 = sp + 8|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = $14 > 0.0;
 $16 = $5;
 $17 = $16 > 0.0;
 $or$cond = $15 & $17;
 $18 = $4;
 $19 = $18 < 50.0;
 $or$cond3 = $or$cond & $19;
 $20 = $5;
 $21 = $20 < 50.0;
 $or$cond5 = $or$cond3 & $21;
 $22 = $4;
 if ($or$cond5) {
  (_gsl_sf_gamma_e($22,$7)|0);
  $23 = $5;
  (_gsl_sf_gamma_e($23,$8)|0);
  $24 = $4;
  $25 = $5;
  $26 = $24 + $25;
  (_gsl_sf_gamma_e($26,$9)|0);
  $27 = +HEAPF64[$7>>3];
  $28 = +HEAPF64[$8>>3];
  $29 = $27 * $28;
  $30 = +HEAPF64[$9>>3];
  $31 = $29 / $30;
  $32 = $6;
  HEAPF64[$32>>3] = $31;
  $33 = ((($7)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = +HEAPF64[$8>>3];
  $36 = +HEAPF64[$9>>3];
  $37 = $35 / $36;
  $38 = (+Math_abs((+$37)));
  $39 = $34 * $38;
  $40 = $6;
  $41 = ((($40)) + 8|0);
  HEAPF64[$41>>3] = $39;
  $42 = ((($8)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = +HEAPF64[$7>>3];
  $45 = +HEAPF64[$9>>3];
  $46 = $44 / $45;
  $47 = (+Math_abs((+$46)));
  $48 = $43 * $47;
  $49 = $6;
  $50 = ((($49)) + 8|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $51 + $48;
  HEAPF64[$50>>3] = $52;
  $53 = +HEAPF64[$7>>3];
  $54 = +HEAPF64[$8>>3];
  $55 = $53 * $54;
  $56 = +HEAPF64[$9>>3];
  $57 = +HEAPF64[$9>>3];
  $58 = $56 * $57;
  $59 = $55 / $58;
  $60 = (+Math_abs((+$59)));
  $61 = ((($9)) + 8|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $60 * $62;
  $64 = $6;
  $65 = ((($64)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $66 + $63;
  HEAPF64[$65>>3] = $67;
  $68 = $6;
  $69 = +HEAPF64[$68>>3];
  $70 = (+Math_abs((+$69)));
  $71 = 4.4408920985006262E-16 * $70;
  $72 = $6;
  $73 = ((($72)) + 8|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $74 + $71;
  HEAPF64[$73>>3] = $75;
  $3 = 0;
  $111 = $3;
  STACKTOP = sp;return ($111|0);
 }
 $76 = (+_isnegint($22));
 $77 = $76 != 0.0;
 if (!($77)) {
  $78 = $5;
  $79 = (+_isnegint($78));
  $80 = $79 != 0.0;
  if (!($80)) {
   $84 = $4;
   $85 = $5;
   $86 = $84 + $85;
   $87 = (+_isnegint($86));
   $88 = $87 != 0.0;
   if ($88) {
    $89 = $6;
    HEAPF64[$89>>3] = 0.0;
    $90 = $6;
    $91 = ((($90)) + 8|0);
    HEAPF64[$91>>3] = 0.0;
    $3 = 0;
    $111 = $3;
    STACKTOP = sp;return ($111|0);
   }
   $92 = $4;
   $93 = $5;
   $94 = (_gsl_sf_lnbeta_sgn_e($92,$93,$10,$11)|0);
   $12 = $94;
   $95 = $12;
   $96 = ($95|0)==(0);
   if ($96) {
    $97 = +HEAPF64[$10>>3];
    $98 = ((($10)) + 8|0);
    $99 = +HEAPF64[$98>>3];
    $100 = $6;
    $101 = (_gsl_sf_exp_err_e($97,$99,$100)|0);
    $13 = $101;
    $102 = +HEAPF64[$11>>3];
    $103 = $6;
    $104 = +HEAPF64[$103>>3];
    $105 = $104 * $102;
    HEAPF64[$103>>3] = $105;
    $106 = $13;
    $3 = $106;
    $111 = $3;
    STACKTOP = sp;return ($111|0);
   } else {
    $107 = $6;
    HEAPF64[$107>>3] = 0.0;
    $108 = $6;
    $109 = ((($108)) + 8|0);
    HEAPF64[$109>>3] = 0.0;
    $110 = $12;
    $3 = $110;
    $111 = $3;
    STACKTOP = sp;return ($111|0);
   }
  }
 }
 $81 = $6;
 HEAPF64[$81>>3] = nan;
 $82 = $6;
 $83 = ((($82)) + 8|0);
 HEAPF64[$83>>3] = nan;
 _gsl_error(83774,83090,134,1);
 $3 = 1;
 $111 = $3;
 STACKTOP = sp;return ($111|0);
}
function _gsl_sf_multiply_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = (+Math_abs((+$12)));
 $7 = $13;
 $14 = $5;
 $15 = (+Math_abs((+$14)));
 $8 = $15;
 $16 = $4;
 $17 = $16 == 0.0;
 $18 = $5;
 $19 = $18 == 0.0;
 $or$cond = $17 | $19;
 if ($or$cond) {
  $20 = $6;
  HEAPF64[$20>>3] = 0.0;
  $21 = $6;
  $22 = ((($21)) + 8|0);
  HEAPF64[$22>>3] = 0.0;
  $3 = 0;
  $75 = $3;
  STACKTOP = sp;return ($75|0);
 }
 $23 = $7;
 $24 = $23 <= 1.0;
 $25 = $8;
 $26 = $25 >= 1.0;
 $or$cond3 = $24 & $26;
 if (!($or$cond3)) {
  $27 = $8;
  $28 = $27 <= 1.0;
  $29 = $7;
  $30 = $29 >= 1.0;
  $or$cond5 = $28 & $30;
  if (!($or$cond5)) {
   $9 = 0.99999999999999955;
   $41 = $4;
   $42 = (+Math_abs((+$41)));
   $43 = $5;
   $44 = (+Math_abs((+$43)));
   $45 = (+_GSL_MIN_DBL($42,$44));
   $10 = $45;
   $46 = $4;
   $47 = (+Math_abs((+$46)));
   $48 = $5;
   $49 = (+Math_abs((+$48)));
   $50 = (+_GSL_MAX_DBL($47,$49));
   $11 = $50;
   $51 = $11;
   $52 = $51 < 1.2067027136948336E+154;
   if (!($52)) {
    $53 = $10;
    $54 = $11;
    $55 = 1.7976931348623149E+308 / $54;
    $56 = $53 < $55;
    if (!($56)) {
     $72 = $6;
     HEAPF64[$72>>3] = inf;
     $73 = $6;
     $74 = ((($73)) + 8|0);
     HEAPF64[$74>>3] = inf;
     _gsl_error(83804,83097,61,16);
     $3 = 16;
     $75 = $3;
     STACKTOP = sp;return ($75|0);
    }
   }
   $57 = $4;
   $58 = $5;
   $59 = $57 * $58;
   $60 = (+_gsl_coerce_double($59));
   $61 = $6;
   HEAPF64[$61>>3] = $60;
   $62 = $6;
   $63 = +HEAPF64[$62>>3];
   $64 = (+Math_abs((+$63)));
   $65 = 4.4408920985006262E-16 * $64;
   $66 = $6;
   $67 = ((($66)) + 8|0);
   HEAPF64[$67>>3] = $65;
   $68 = $6;
   $69 = +HEAPF64[$68>>3];
   $70 = (+Math_abs((+$69)));
   $71 = $70 < 2.2250738585072014E-308;
   if ($71) {
    _gsl_error(83794,83097,57,15);
    $3 = 15;
    $75 = $3;
    STACKTOP = sp;return ($75|0);
   } else {
    $3 = 0;
    $75 = $3;
    STACKTOP = sp;return ($75|0);
   }
  }
 }
 $31 = $4;
 $32 = $5;
 $33 = $31 * $32;
 $34 = $6;
 HEAPF64[$34>>3] = $33;
 $35 = $6;
 $36 = +HEAPF64[$35>>3];
 $37 = (+Math_abs((+$36)));
 $38 = 4.4408920985006262E-16 * $37;
 $39 = $6;
 $40 = ((($39)) + 8|0);
 HEAPF64[$40>>3] = $38;
 $3 = 0;
 $75 = $3;
 STACKTOP = sp;return ($75|0);
}
function _gsl_sf_multiply_err_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $12 = $7;
 $13 = $9;
 $14 = (_gsl_sf_multiply_e($11,$12,$13)|0);
 $10 = $14;
 $15 = $6;
 $16 = $7;
 $17 = $15 * $16;
 $18 = (+Math_abs((+$17)));
 $19 = $8;
 $20 = $5;
 $21 = $19 * $20;
 $22 = (+Math_abs((+$21)));
 $23 = $18 + $22;
 $24 = $9;
 $25 = ((($24)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $26 + $23;
 HEAPF64[$25>>3] = $27;
 $28 = $10;
 STACKTOP = sp;return ($28|0);
}
function _gsl_sf_erfc_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0;
 var $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0;
 var $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $8 = sp + 64|0;
 $11 = sp + 32|0;
 $14 = sp;
 $2 = $0;
 $3 = $1;
 $15 = $2;
 $16 = (+Math_abs((+$15)));
 $4 = $16;
 $17 = $4;
 $18 = $17 <= 1.0;
 $19 = $4;
 do {
  if ($18) {
   $20 = 2.0 * $19;
   $21 = $20 - 1.0;
   $7 = $21;
   $22 = $7;
   (_cheb_eval_e_3797(70656,$22,$8)|0);
   $23 = +HEAPF64[$8>>3];
   $5 = $23;
   $24 = ((($8)) + 8|0);
   $25 = +HEAPF64[$24>>3];
   $6 = $25;
  } else {
   $26 = $19 <= 5.0;
   if ($26) {
    $27 = $2;
    $28 = - $27;
    $29 = $2;
    $30 = $28 * $29;
    $31 = (+Math_exp((+$30)));
    $9 = $31;
    $32 = $4;
    $33 = $32 - 3.0;
    $34 = 0.5 * $33;
    $10 = $34;
    $35 = $10;
    (_cheb_eval_e_3797(70688,$35,$11)|0);
    $36 = $9;
    $37 = +HEAPF64[$11>>3];
    $38 = $36 * $37;
    $5 = $38;
    $39 = $9;
    $40 = ((($11)) + 8|0);
    $41 = +HEAPF64[$40>>3];
    $42 = $2;
    $43 = (+Math_abs((+$42)));
    $44 = 2.0 * $43;
    $45 = $44 * 2.2204460492503131E-16;
    $46 = $41 + $45;
    $47 = $39 * $46;
    $6 = $47;
    break;
   }
   $48 = $4;
   $49 = $48 < 10.0;
   if ($49) {
    $50 = $2;
    $51 = - $50;
    $52 = $2;
    $53 = $51 * $52;
    $54 = (+Math_exp((+$53)));
    $55 = $4;
    $56 = $54 / $55;
    $12 = $56;
    $57 = $4;
    $58 = 2.0 * $57;
    $59 = $58 - 15.0;
    $60 = $59 / 5.0;
    $13 = $60;
    $61 = $13;
    (_cheb_eval_e_3797(70720,$61,$14)|0);
    $62 = $12;
    $63 = +HEAPF64[$14>>3];
    $64 = $62 * $63;
    $5 = $64;
    $65 = $12;
    $66 = ((($14)) + 8|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $2;
    $69 = (+Math_abs((+$68)));
    $70 = 2.0 * $69;
    $71 = $70 * 2.2204460492503131E-16;
    $72 = $67 + $71;
    $73 = $72 + 2.2204460492503131E-16;
    $74 = $65 * $73;
    $6 = $74;
    break;
   } else {
    $75 = $4;
    $76 = (+_erfc8($75));
    $5 = $76;
    $77 = $2;
    $78 = $2;
    $79 = $77 * $78;
    $80 = $79 + 1.0;
    $81 = $80 * 2.2204460492503131E-16;
    $82 = $5;
    $83 = (+Math_abs((+$82)));
    $84 = $81 * $83;
    $6 = $84;
    break;
   }
  }
 } while(0);
 $85 = $2;
 $86 = $85 < 0.0;
 $87 = $5;
 if ($86) {
  $88 = 2.0 - $87;
  $89 = $3;
  HEAPF64[$89>>3] = $88;
  $90 = $6;
  $91 = $3;
  $92 = ((($91)) + 8|0);
  HEAPF64[$92>>3] = $90;
  $93 = $3;
  $94 = +HEAPF64[$93>>3];
  $95 = (+Math_abs((+$94)));
  $96 = 4.4408920985006262E-16 * $95;
  $97 = $3;
  $98 = ((($97)) + 8|0);
  $99 = +HEAPF64[$98>>3];
  $100 = $99 + $96;
  HEAPF64[$98>>3] = $100;
  STACKTOP = sp;return 0;
 } else {
  $101 = $3;
  HEAPF64[$101>>3] = $87;
  $102 = $6;
  $103 = $3;
  $104 = ((($103)) + 8|0);
  HEAPF64[$104>>3] = $102;
  $105 = $3;
  $106 = +HEAPF64[$105>>3];
  $107 = (+Math_abs((+$106)));
  $108 = 4.4408920985006262E-16 * $107;
  $109 = $3;
  $110 = ((($109)) + 8|0);
  $111 = +HEAPF64[$110>>3];
  $112 = $111 + $108;
  HEAPF64[$110>>3] = $112;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _cheb_eval_e_3797($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _erfc8($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (+_erfc8_sum($3));
 $2 = $4;
 $5 = $1;
 $6 = - $5;
 $7 = $1;
 $8 = $6 * $7;
 $9 = (+Math_exp((+$8)));
 $10 = $2;
 $11 = $10 * $9;
 $2 = $11;
 $12 = $2;
 STACKTOP = sp;return (+$12);
}
function _erfc8_sum($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0.0;
 $3 = 0.0;
 $2 = 0.56418958354775506;
 $4 = 4;
 while(1) {
  $5 = $4;
  $6 = ($5|0)>=(0);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = $2;
  $9 = $7 * $8;
  $10 = $4;
  $11 = (32016 + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $9 + $12;
  $2 = $13;
  $14 = $4;
  $15 = (($14) + -1)|0;
  $4 = $15;
 }
 $3 = 1.0;
 $4 = 5;
 while(1) {
  $16 = $4;
  $17 = ($16|0)>=(0);
  if (!($17)) {
   break;
  }
  $18 = $1;
  $19 = $3;
  $20 = $18 * $19;
  $21 = $4;
  $22 = (32064 + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $20 + $23;
  $3 = $24;
  $25 = $4;
  $26 = (($25) + -1)|0;
  $4 = $26;
 }
 $27 = $2;
 $28 = $3;
 $29 = $27 / $28;
 STACKTOP = sp;return (+$29);
}
function _gsl_sf_exp_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 > 709.78271289338397;
 if ($6) {
  $7 = $4;
  HEAPF64[$7>>3] = inf;
  $8 = $4;
  $9 = ((($8)) + 8|0);
  HEAPF64[$9>>3] = inf;
  _gsl_error(83804,83110,110,16);
  $2 = 16;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 $10 = $3;
 $11 = $10 < -708.39641853226408;
 if ($11) {
  $12 = $4;
  HEAPF64[$12>>3] = 0.0;
  $13 = $4;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83110,113,15);
  $2 = 15;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 } else {
  $15 = $3;
  $16 = (+Math_exp((+$15)));
  $17 = $4;
  HEAPF64[$17>>3] = $16;
  $18 = $4;
  $19 = +HEAPF64[$18>>3];
  $20 = (+Math_abs((+$19)));
  $21 = 4.4408920985006262E-16 * $20;
  $22 = $4;
  $23 = ((($22)) + 8|0);
  HEAPF64[$23>>3] = $21;
  $2 = 0;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_e10_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $6 > 2147483646.0;
 if ($7) {
  $8 = $4;
  HEAPF64[$8>>3] = inf;
  $9 = $4;
  $10 = ((($9)) + 8|0);
  HEAPF64[$10>>3] = inf;
  $11 = $4;
  $12 = ((($11)) + 16|0);
  HEAP32[$12>>2] = 0;
  _gsl_error(83804,83110,125,16);
  $2 = 16;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $13 = $3;
 $14 = $13 < -2147483647.0;
 if ($14) {
  $15 = $4;
  HEAPF64[$15>>3] = 0.0;
  $16 = $4;
  $17 = ((($16)) + 8|0);
  HEAPF64[$17>>3] = 2.2250738585072014E-308;
  $18 = $4;
  $19 = ((($18)) + 16|0);
  HEAP32[$19>>2] = 0;
  _gsl_error(83794,83110,128,15);
  $2 = 15;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $20 = $3;
 $21 = $20 > 709.78271289338397;
 $22 = $3;
 $23 = $22 < -708.39641853226408;
 $or$cond = $21 | $23;
 if ($or$cond) {
  $24 = $3;
  $25 = $24 / 2.3025850929940459;
  $26 = (+Math_floor((+$25)));
  $27 = (~~(($26)));
  $28 = $27;
 } else {
  $28 = 0;
 }
 $5 = $28;
 $29 = $3;
 $30 = $5;
 $31 = (+($30|0));
 $32 = $31 * 2.3025850929940459;
 $33 = $29 - $32;
 $34 = (+Math_exp((+$33)));
 $35 = $4;
 HEAPF64[$35>>3] = $34;
 $36 = $3;
 $37 = (+Math_abs((+$36)));
 $38 = $37 + 1.0;
 $39 = 2.0 * $38;
 $40 = $39 * 2.2204460492503131E-16;
 $41 = $4;
 $42 = +HEAPF64[$41>>3];
 $43 = (+Math_abs((+$42)));
 $44 = $40 * $43;
 $45 = $4;
 $46 = ((($45)) + 8|0);
 HEAPF64[$46>>3] = $44;
 $47 = $5;
 $48 = $4;
 $49 = ((($48)) + 16|0);
 HEAP32[$49>>2] = $47;
 $2 = 0;
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function _gsl_sf_exp_mult_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $12 = 0.0, $13 = 0.0;
 var $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $17 = $5;
 $18 = (+Math_abs((+$17)));
 $7 = $18;
 $19 = $5;
 $20 = $19 == 0.0;
 if ($20) {
  $21 = $6;
  HEAPF64[$21>>3] = 0.0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAPF64[$23>>3] = 0.0;
  $3 = 0;
  $115 = $3;
  STACKTOP = sp;return ($115|0);
 }
 $24 = $4;
 $25 = $24 < 354.89135644669199;
 $26 = $4;
 $27 = $26 > -354.19820926613204;
 $or$cond = $25 & $27;
 $28 = $7;
 $29 = $28 < 1.0726246343954077E+154;
 $or$cond3 = $or$cond & $29;
 $30 = $7;
 $31 = $30 > 1.7900017754880496E-154;
 $or$cond5 = $or$cond3 & $31;
 if ($or$cond5) {
  $32 = $4;
  $33 = (+Math_exp((+$32)));
  $8 = $33;
  $34 = $5;
  $35 = $8;
  $36 = $34 * $35;
  $37 = $6;
  HEAPF64[$37>>3] = $36;
  $38 = $4;
  $39 = (+Math_abs((+$38)));
  $40 = 2.0 + $39;
  $41 = $40 * 2.2204460492503131E-16;
  $42 = $6;
  $43 = +HEAPF64[$42>>3];
  $44 = (+Math_abs((+$43)));
  $45 = $41 * $44;
  $46 = $6;
  $47 = ((($46)) + 8|0);
  HEAPF64[$47>>3] = $45;
  $3 = 0;
  $115 = $3;
  STACKTOP = sp;return ($115|0);
 }
 $48 = $7;
 $49 = (+Math_log((+$48)));
 $9 = $49;
 $50 = $4;
 $51 = $9;
 $52 = $50 + $51;
 $10 = $52;
 $53 = $10;
 $54 = $53 > 709.77271289338398;
 if ($54) {
  $55 = $6;
  HEAPF64[$55>>3] = inf;
  $56 = $6;
  $57 = ((($56)) + 8|0);
  HEAPF64[$57>>3] = inf;
  _gsl_error(83804,83110,162,16);
  $3 = 16;
  $115 = $3;
  STACKTOP = sp;return ($115|0);
 }
 $58 = $10;
 $59 = $58 < -708.38641853226409;
 if ($59) {
  $60 = $6;
  HEAPF64[$60>>3] = 0.0;
  $61 = $6;
  $62 = ((($61)) + 8|0);
  HEAPF64[$62>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83110,165,15);
  $3 = 15;
  $115 = $3;
  STACKTOP = sp;return ($115|0);
 } else {
  $63 = $5;
  $64 = $63 >= 0.0;
  $65 = $64 ? 1 : -1;
  $66 = (+($65|0));
  $11 = $66;
  $67 = $4;
  $68 = (+Math_floor((+$67)));
  $12 = $68;
  $69 = $9;
  $70 = (+Math_floor((+$69)));
  $13 = $70;
  $71 = $4;
  $72 = $12;
  $73 = $71 - $72;
  $14 = $73;
  $74 = $9;
  $75 = $13;
  $76 = $74 - $75;
  $15 = $76;
  $77 = $9;
  $78 = (+Math_abs((+$77)));
  $79 = $13;
  $80 = (+Math_abs((+$79)));
  $81 = $78 + $80;
  $82 = 4.4408920985006262E-16 * $81;
  $16 = $82;
  $83 = $11;
  $84 = $12;
  $85 = $13;
  $86 = $84 + $85;
  $87 = (+Math_exp((+$86)));
  $88 = $83 * $87;
  $89 = $14;
  $90 = $15;
  $91 = $89 + $90;
  $92 = (+Math_exp((+$91)));
  $93 = $88 * $92;
  $94 = $6;
  HEAPF64[$94>>3] = $93;
  $95 = $16;
  $96 = $6;
  $97 = +HEAPF64[$96>>3];
  $98 = (+Math_abs((+$97)));
  $99 = $95 * $98;
  $100 = $6;
  $101 = ((($100)) + 8|0);
  HEAPF64[$101>>3] = $99;
  $102 = $12;
  $103 = $13;
  $104 = $102 + $103;
  $105 = $104 + 1.0;
  $106 = 4.4408920985006262E-16 * $105;
  $107 = $6;
  $108 = +HEAPF64[$107>>3];
  $109 = (+Math_abs((+$108)));
  $110 = $106 * $109;
  $111 = $6;
  $112 = ((($111)) + 8|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $113 + $110;
  HEAPF64[$112>>3] = $114;
  $3 = 0;
  $115 = $3;
  STACKTOP = sp;return ($115|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_mult_err_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $8;
 $23 = (+Math_abs((+$22)));
 $11 = $23;
 $24 = $8;
 $25 = $24 == 0.0;
 if ($25) {
  $26 = $10;
  HEAPF64[$26>>3] = 0.0;
  $27 = $9;
  $28 = $6;
  $29 = (+Math_exp((+$28)));
  $30 = $27 * $29;
  $31 = (+Math_abs((+$30)));
  $32 = $10;
  $33 = ((($32)) + 8|0);
  HEAPF64[$33>>3] = $31;
  $5 = 0;
  $139 = $5;
  STACKTOP = sp;return ($139|0);
 }
 $34 = $6;
 $35 = $34 < 354.89135644669199;
 $36 = $6;
 $37 = $36 > -354.19820926613204;
 $or$cond = $35 & $37;
 $38 = $11;
 $39 = $38 < 1.0726246343954077E+154;
 $or$cond3 = $or$cond & $39;
 $40 = $11;
 $41 = $40 > 1.7900017754880496E-154;
 $or$cond5 = $or$cond3 & $41;
 if ($or$cond5) {
  $42 = $6;
  $43 = (+Math_exp((+$42)));
  $12 = $43;
  $44 = $8;
  $45 = $12;
  $46 = $44 * $45;
  $47 = $10;
  HEAPF64[$47>>3] = $46;
  $48 = $12;
  $49 = $9;
  $50 = (+Math_abs((+$49)));
  $51 = $8;
  $52 = $7;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $50 + $54;
  $56 = $48 * $55;
  $57 = $10;
  $58 = ((($57)) + 8|0);
  HEAPF64[$58>>3] = $56;
  $59 = $10;
  $60 = +HEAPF64[$59>>3];
  $61 = (+Math_abs((+$60)));
  $62 = 4.4408920985006262E-16 * $61;
  $63 = $10;
  $64 = ((($63)) + 8|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $65 + $62;
  HEAPF64[$64>>3] = $66;
  $5 = 0;
  $139 = $5;
  STACKTOP = sp;return ($139|0);
 }
 $67 = $11;
 $68 = (+Math_log((+$67)));
 $13 = $68;
 $69 = $6;
 $70 = $13;
 $71 = $69 + $70;
 $14 = $71;
 $72 = $14;
 $73 = $72 > 709.77271289338398;
 if ($73) {
  $74 = $10;
  HEAPF64[$74>>3] = inf;
  $75 = $10;
  $76 = ((($75)) + 8|0);
  HEAPF64[$76>>3] = inf;
  _gsl_error(83804,83110,254,16);
  $5 = 16;
  $139 = $5;
  STACKTOP = sp;return ($139|0);
 }
 $77 = $14;
 $78 = $77 < -708.38641853226409;
 if ($78) {
  $79 = $10;
  HEAPF64[$79>>3] = 0.0;
  $80 = $10;
  $81 = ((($80)) + 8|0);
  HEAPF64[$81>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83110,257,15);
  $5 = 15;
  $139 = $5;
  STACKTOP = sp;return ($139|0);
 } else {
  $82 = $8;
  $83 = $82 >= 0.0;
  $84 = $83 ? 1 : -1;
  $85 = (+($84|0));
  $15 = $85;
  $86 = $6;
  $87 = (+Math_floor((+$86)));
  $16 = $87;
  $88 = $13;
  $89 = (+Math_floor((+$88)));
  $17 = $89;
  $90 = $6;
  $91 = $16;
  $92 = $90 - $91;
  $18 = $92;
  $93 = $13;
  $94 = $17;
  $95 = $93 - $94;
  $19 = $95;
  $96 = $16;
  $97 = $17;
  $98 = $96 + $97;
  $99 = (+Math_exp((+$98)));
  $20 = $99;
  $100 = $18;
  $101 = $19;
  $102 = $100 + $101;
  $103 = (+Math_exp((+$102)));
  $21 = $103;
  $104 = $15;
  $105 = $20;
  $106 = $104 * $105;
  $107 = $21;
  $108 = $106 * $107;
  $109 = $10;
  HEAPF64[$109>>3] = $108;
  $110 = $20;
  $111 = $21;
  $112 = $110 * $111;
  $113 = $112 * 2.0;
  $114 = $113 * 2.2204460492503131E-16;
  $115 = $10;
  $116 = ((($115)) + 8|0);
  HEAPF64[$116>>3] = $114;
  $117 = $20;
  $118 = $21;
  $119 = $117 * $118;
  $120 = $9;
  $121 = $8;
  $122 = $120 / $121;
  $123 = (+Math_abs((+$122)));
  $124 = $119 * $123;
  $125 = $10;
  $126 = ((($125)) + 8|0);
  $127 = +HEAPF64[$126>>3];
  $128 = $127 + $124;
  HEAPF64[$126>>3] = $128;
  $129 = $20;
  $130 = $21;
  $131 = $129 * $130;
  $132 = $7;
  $133 = (+Math_abs((+$132)));
  $134 = $131 * $133;
  $135 = $10;
  $136 = ((($135)) + 8|0);
  $137 = +HEAPF64[$136>>3];
  $138 = $137 + $134;
  HEAPF64[$136>>3] = $138;
  $5 = 0;
  $139 = $5;
  STACKTOP = sp;return ($139|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_mult_err_e10_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0.0, $15 = 0.0;
 var $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = $8;
 $20 = (+Math_abs((+$19)));
 $11 = $20;
 $21 = $8;
 $22 = $21 == 0.0;
 if ($22) {
  $23 = $10;
  HEAPF64[$23>>3] = 0.0;
  $24 = $9;
  $25 = $6;
  $26 = (+Math_exp((+$25)));
  $27 = $24 * $26;
  $28 = (+Math_abs((+$27)));
  $29 = $10;
  $30 = ((($29)) + 8|0);
  HEAPF64[$30>>3] = $28;
  $31 = $10;
  $32 = ((($31)) + 16|0);
  HEAP32[$32>>2] = 0;
  $5 = 0;
  $133 = $5;
  STACKTOP = sp;return ($133|0);
 }
 $33 = $6;
 $34 = $33 < 354.89135644669199;
 $35 = $6;
 $36 = $35 > -354.19820926613204;
 $or$cond = $34 & $36;
 $37 = $11;
 $38 = $37 < 1.0726246343954077E+154;
 $or$cond3 = $or$cond & $38;
 $39 = $11;
 $40 = $39 > 1.7900017754880496E-154;
 $or$cond5 = $or$cond3 & $40;
 if ($or$cond5) {
  $41 = $6;
  $42 = (+Math_exp((+$41)));
  $12 = $42;
  $43 = $8;
  $44 = $12;
  $45 = $43 * $44;
  $46 = $10;
  HEAPF64[$46>>3] = $45;
  $47 = $12;
  $48 = $9;
  $49 = (+Math_abs((+$48)));
  $50 = $8;
  $51 = $7;
  $52 = $50 * $51;
  $53 = (+Math_abs((+$52)));
  $54 = $49 + $53;
  $55 = $47 * $54;
  $56 = $10;
  $57 = ((($56)) + 8|0);
  HEAPF64[$57>>3] = $55;
  $58 = $10;
  $59 = +HEAPF64[$58>>3];
  $60 = (+Math_abs((+$59)));
  $61 = 4.4408920985006262E-16 * $60;
  $62 = $10;
  $63 = ((($62)) + 8|0);
  $64 = +HEAPF64[$63>>3];
  $65 = $64 + $61;
  HEAPF64[$63>>3] = $65;
  $66 = $10;
  $67 = ((($66)) + 16|0);
  HEAP32[$67>>2] = 0;
  $5 = 0;
  $133 = $5;
  STACKTOP = sp;return ($133|0);
 }
 $68 = $11;
 $69 = (+Math_log((+$68)));
 $13 = $69;
 $70 = $6;
 $71 = $13;
 $72 = $70 + $71;
 $73 = $72 / 2.3025850929940459;
 $14 = $73;
 $74 = $14;
 $75 = $74 > 2147483646.0;
 if ($75) {
  $76 = $10;
  HEAPF64[$76>>3] = inf;
  $77 = $10;
  $78 = ((($77)) + 8|0);
  HEAPF64[$78>>3] = inf;
  $79 = $10;
  $80 = ((($79)) + 16|0);
  HEAP32[$80>>2] = 0;
  _gsl_error(83804,83110,304,16);
  $5 = 16;
  $133 = $5;
  STACKTOP = sp;return ($133|0);
 }
 $81 = $14;
 $82 = $81 < -2147483647.0;
 if ($82) {
  $83 = $10;
  HEAPF64[$83>>3] = 0.0;
  $84 = $10;
  $85 = ((($84)) + 8|0);
  HEAPF64[$85>>3] = 2.2250738585072014E-308;
  $86 = $10;
  $87 = ((($86)) + 16|0);
  HEAP32[$87>>2] = 0;
  _gsl_error(83794,83110,307,15);
  $5 = 15;
  $133 = $5;
  STACKTOP = sp;return ($133|0);
 } else {
  $88 = $8;
  $89 = $88 >= 0.0;
  $90 = $89 ? 1 : -1;
  $91 = (+($90|0));
  $15 = $91;
  $92 = $14;
  $93 = (+Math_floor((+$92)));
  $94 = (~~(($93)));
  $16 = $94;
  $95 = $14;
  $96 = $16;
  $97 = (+($96|0));
  $98 = $95 - $97;
  $99 = $98 * 2.3025850929940459;
  $17 = $99;
  $100 = $9;
  $101 = $8;
  $102 = (+Math_abs((+$101)));
  $103 = $100 / $102;
  $104 = $7;
  $105 = $103 + $104;
  $106 = $17;
  $107 = (+Math_abs((+$106)));
  $108 = 4.4408920985006262E-16 * $107;
  $109 = $105 + $108;
  $18 = $109;
  $110 = $15;
  $111 = $17;
  $112 = (+Math_exp((+$111)));
  $113 = $110 * $112;
  $114 = $10;
  HEAPF64[$114>>3] = $113;
  $115 = $18;
  $116 = $10;
  $117 = +HEAPF64[$116>>3];
  $118 = (+Math_abs((+$117)));
  $119 = $115 * $118;
  $120 = $10;
  $121 = ((($120)) + 8|0);
  HEAPF64[$121>>3] = $119;
  $122 = $10;
  $123 = +HEAPF64[$122>>3];
  $124 = (+Math_abs((+$123)));
  $125 = 4.4408920985006262E-16 * $124;
  $126 = $10;
  $127 = ((($126)) + 8|0);
  $128 = +HEAPF64[$127>>3];
  $129 = $128 + $125;
  HEAPF64[$127>>3] = $129;
  $130 = $16;
  $131 = $10;
  $132 = ((($131)) + 16|0);
  HEAP32[$132>>2] = $130;
  $5 = 0;
  $133 = $5;
  STACKTOP = sp;return ($133|0);
 }
 return (0)|0;
}
function _gsl_sf_expm1_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0.002;
 $6 = $3;
 $7 = $6 < -708.39641853226408;
 if ($7) {
  $8 = $4;
  HEAPF64[$8>>3] = -1.0;
  $9 = $4;
  $10 = ((($9)) + 8|0);
  HEAPF64[$10>>3] = 2.2204460492503131E-16;
  $2 = 0;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 $11 = $3;
 $12 = $11 < -0.002;
 $13 = $3;
 if ($12) {
  $14 = (+Math_exp((+$13)));
  $15 = $14 - 1.0;
  $16 = $4;
  HEAPF64[$16>>3] = $15;
  $17 = $4;
  $18 = +HEAPF64[$17>>3];
  $19 = (+Math_abs((+$18)));
  $20 = 4.4408920985006262E-16 * $19;
  $21 = $4;
  $22 = ((($21)) + 8|0);
  HEAPF64[$22>>3] = $20;
  $2 = 0;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 $23 = $13 < 0.002;
 $24 = $3;
 if ($23) {
  $25 = $3;
  $26 = 0.5 * $25;
  $27 = $3;
  $28 = $27 / 3.0;
  $29 = $3;
  $30 = 0.25 * $29;
  $31 = $3;
  $32 = 0.20000000000000001 * $31;
  $33 = 1.0 + $32;
  $34 = $30 * $33;
  $35 = 1.0 + $34;
  $36 = $28 * $35;
  $37 = 1.0 + $36;
  $38 = $26 * $37;
  $39 = 1.0 + $38;
  $40 = $24 * $39;
  $41 = $4;
  HEAPF64[$41>>3] = $40;
  $42 = $4;
  $43 = +HEAPF64[$42>>3];
  $44 = (+Math_abs((+$43)));
  $45 = 4.4408920985006262E-16 * $44;
  $46 = $4;
  $47 = ((($46)) + 8|0);
  HEAPF64[$47>>3] = $45;
  $2 = 0;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 $48 = $24 < 709.78271289338397;
 if ($48) {
  $49 = $3;
  $50 = (+Math_exp((+$49)));
  $51 = $50 - 1.0;
  $52 = $4;
  HEAPF64[$52>>3] = $51;
  $53 = $4;
  $54 = +HEAPF64[$53>>3];
  $55 = (+Math_abs((+$54)));
  $56 = 4.4408920985006262E-16 * $55;
  $57 = $4;
  $58 = ((($57)) + 8|0);
  HEAPF64[$58>>3] = $56;
  $2 = 0;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 } else {
  $59 = $4;
  HEAPF64[$59>>3] = inf;
  $60 = $4;
  $61 = ((($60)) + 8|0);
  HEAPF64[$61>>3] = inf;
  _gsl_error(83804,83110,351,16);
  $2 = 16;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _gsl_sf_exprel_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0.002;
 $6 = $3;
 $7 = $6 < -708.39641853226408;
 $8 = $3;
 if ($7) {
  $9 = -1.0 / $8;
  $10 = $4;
  HEAPF64[$10>>3] = $9;
  $11 = $4;
  $12 = +HEAPF64[$11>>3];
  $13 = (+Math_abs((+$12)));
  $14 = 2.2204460492503131E-16 * $13;
  $15 = $4;
  $16 = ((($15)) + 8|0);
  HEAPF64[$16>>3] = $14;
  $2 = 0;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 }
 $17 = $8 < -0.002;
 $18 = $3;
 if ($17) {
  $19 = (+Math_exp((+$18)));
  $20 = $19 - 1.0;
  $21 = $3;
  $22 = $20 / $21;
  $23 = $4;
  HEAPF64[$23>>3] = $22;
  $24 = $4;
  $25 = +HEAPF64[$24>>3];
  $26 = (+Math_abs((+$25)));
  $27 = 4.4408920985006262E-16 * $26;
  $28 = $4;
  $29 = ((($28)) + 8|0);
  HEAPF64[$29>>3] = $27;
  $2 = 0;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 }
 $30 = $18 < 0.002;
 $31 = $3;
 if ($30) {
  $32 = 0.5 * $31;
  $33 = $3;
  $34 = $33 / 3.0;
  $35 = $3;
  $36 = 0.25 * $35;
  $37 = $3;
  $38 = 0.20000000000000001 * $37;
  $39 = 1.0 + $38;
  $40 = $36 * $39;
  $41 = 1.0 + $40;
  $42 = $34 * $41;
  $43 = 1.0 + $42;
  $44 = $32 * $43;
  $45 = 1.0 + $44;
  $46 = $4;
  HEAPF64[$46>>3] = $45;
  $47 = $4;
  $48 = +HEAPF64[$47>>3];
  $49 = (+Math_abs((+$48)));
  $50 = 4.4408920985006262E-16 * $49;
  $51 = $4;
  $52 = ((($51)) + 8|0);
  HEAPF64[$52>>3] = $50;
  $2 = 0;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 }
 $53 = $31 < 709.78271289338397;
 if ($53) {
  $54 = $3;
  $55 = (+Math_exp((+$54)));
  $56 = $55 - 1.0;
  $57 = $3;
  $58 = $56 / $57;
  $59 = $4;
  HEAPF64[$59>>3] = $58;
  $60 = $4;
  $61 = +HEAPF64[$60>>3];
  $62 = (+Math_abs((+$61)));
  $63 = 4.4408920985006262E-16 * $62;
  $64 = $4;
  $65 = ((($64)) + 8|0);
  HEAPF64[$65>>3] = $63;
  $2 = 0;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 } else {
  $66 = $4;
  HEAPF64[$66>>3] = inf;
  $67 = $4;
  $68 = ((($67)) + 8|0);
  HEAPF64[$68>>3] = inf;
  _gsl_error(83804,83110,381,16);
  $2 = 16;
  $69 = $2;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _gsl_sf_exprel_2_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0.002;
 $6 = $3;
 $7 = $6 < -708.39641853226408;
 $8 = $3;
 if ($7) {
  $9 = -2.0 / $8;
  $10 = $3;
  $11 = 1.0 / $10;
  $12 = 1.0 + $11;
  $13 = $9 * $12;
  $14 = $4;
  HEAPF64[$14>>3] = $13;
  $15 = $4;
  $16 = +HEAPF64[$15>>3];
  $17 = (+Math_abs((+$16)));
  $18 = 4.4408920985006262E-16 * $17;
  $19 = $4;
  $20 = ((($19)) + 8|0);
  HEAPF64[$20>>3] = $18;
  $2 = 0;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $21 = $8 < -0.002;
 $22 = $3;
 if ($21) {
  $23 = (+Math_exp((+$22)));
  $24 = $23 - 1.0;
  $25 = $3;
  $26 = $24 - $25;
  $27 = 2.0 * $26;
  $28 = $3;
  $29 = $3;
  $30 = $28 * $29;
  $31 = $27 / $30;
  $32 = $4;
  HEAPF64[$32>>3] = $31;
  $33 = $4;
  $34 = +HEAPF64[$33>>3];
  $35 = (+Math_abs((+$34)));
  $36 = 4.4408920985006262E-16 * $35;
  $37 = $4;
  $38 = ((($37)) + 8|0);
  HEAPF64[$38>>3] = $36;
  $2 = 0;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $39 = $22 < 0.002;
 $40 = $3;
 if ($39) {
  $41 = 0.33333333333333331 * $40;
  $42 = $3;
  $43 = 0.25 * $42;
  $44 = $3;
  $45 = 0.20000000000000001 * $44;
  $46 = $3;
  $47 = 0.16666666666666666 * $46;
  $48 = 1.0 + $47;
  $49 = $45 * $48;
  $50 = 1.0 + $49;
  $51 = $43 * $50;
  $52 = 1.0 + $51;
  $53 = $41 * $52;
  $54 = 1.0 + $53;
  $55 = $4;
  HEAPF64[$55>>3] = $54;
  $56 = $4;
  $57 = +HEAPF64[$56>>3];
  $58 = (+Math_abs((+$57)));
  $59 = 4.4408920985006262E-16 * $58;
  $60 = $4;
  $61 = ((($60)) + 8|0);
  HEAPF64[$61>>3] = $59;
  $2 = 0;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $62 = $40 < 709.78271289338397;
 if ($62) {
  $63 = $3;
  $64 = (+Math_exp((+$63)));
  $65 = $64 - 1.0;
  $66 = $3;
  $67 = $65 - $66;
  $68 = 2.0 * $67;
  $69 = $3;
  $70 = $3;
  $71 = $69 * $70;
  $72 = $68 / $71;
  $73 = $4;
  HEAPF64[$73>>3] = $72;
  $74 = $4;
  $75 = +HEAPF64[$74>>3];
  $76 = (+Math_abs((+$75)));
  $77 = 4.4408920985006262E-16 * $76;
  $78 = $4;
  $79 = ((($78)) + 8|0);
  HEAPF64[$79>>3] = $77;
  $2 = 0;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 } else {
  $80 = $4;
  HEAPF64[$80>>3] = inf;
  $81 = $4;
  $82 = ((($81)) + 8|0);
  HEAPF64[$82>>3] = inf;
  _gsl_error(83804,83110,411,16);
  $2 = 16;
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _gsl_sf_exprel_n_CF_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_exprel_n_CF($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _exprel_n_CF($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 1.3407807929942596E+154;
 $8 = 5000;
 $9 = 1;
 $10 = 1.0;
 $11 = 0.0;
 $12 = 0.0;
 $13 = 1.0;
 $14 = 1.0;
 $15 = 1.0;
 $25 = $5;
 $26 = - $25;
 $16 = $26;
 $27 = $4;
 $28 = $27 + 1.0;
 $17 = $28;
 $29 = $15;
 $30 = $12;
 $31 = $29 * $30;
 $32 = $14;
 $33 = $10;
 $34 = $32 * $33;
 $35 = $31 + $34;
 $21 = $35;
 $36 = $15;
 $37 = $13;
 $38 = $36 * $37;
 $39 = $14;
 $40 = $11;
 $41 = $39 * $40;
 $42 = $38 + $41;
 $22 = $42;
 $43 = $9;
 $44 = (($43) + 1)|0;
 $9 = $44;
 $45 = $12;
 $10 = $45;
 $46 = $13;
 $11 = $46;
 $47 = $21;
 $12 = $47;
 $48 = $22;
 $13 = $48;
 $49 = $17;
 $50 = $12;
 $51 = $49 * $50;
 $52 = $16;
 $53 = $10;
 $54 = $52 * $53;
 $55 = $51 + $54;
 $21 = $55;
 $56 = $17;
 $57 = $13;
 $58 = $56 * $57;
 $59 = $16;
 $60 = $11;
 $61 = $59 * $60;
 $62 = $58 + $61;
 $22 = $62;
 $63 = $21;
 $64 = $22;
 $65 = $63 / $64;
 $20 = $65;
 while(1) {
  $66 = $9;
  $67 = ($66|0)<(5000);
  if (!($67)) {
   break;
  }
  $68 = $9;
  $69 = (($68) + 1)|0;
  $9 = $69;
  $70 = $12;
  $10 = $70;
  $71 = $13;
  $11 = $71;
  $72 = $21;
  $12 = $72;
  $73 = $22;
  $13 = $73;
  $74 = $9;
  $75 = $74 & 1;
  $76 = ($75|0)!=(0);
  if ($76) {
   $77 = $9;
   $78 = (($77) - 1)|0;
   $79 = (($78|0) / 2)&-1;
   $80 = (+($79|0));
   $81 = $5;
   $82 = $80 * $81;
   $92 = $82;
  } else {
   $83 = $4;
   $84 = $9;
   $85 = (($84|0) / 2)&-1;
   $86 = (+($85|0));
   $87 = $83 + $86;
   $88 = $87 - 1.0;
   $89 = - $88;
   $90 = $5;
   $91 = $89 * $90;
   $92 = $91;
  }
  $18 = $92;
  $93 = $4;
  $94 = $9;
  $95 = (+($94|0));
  $96 = $93 + $95;
  $97 = $96 - 1.0;
  $19 = $97;
  $98 = $19;
  $99 = $12;
  $100 = $98 * $99;
  $101 = $18;
  $102 = $10;
  $103 = $101 * $102;
  $104 = $100 + $103;
  $21 = $104;
  $105 = $19;
  $106 = $13;
  $107 = $105 * $106;
  $108 = $18;
  $109 = $11;
  $110 = $108 * $109;
  $111 = $107 + $110;
  $22 = $111;
  $112 = $21;
  $113 = (+Math_abs((+$112)));
  $114 = $113 > 1.3407807929942596E+154;
  if ($114) {
   label = 8;
  } else {
   $115 = $22;
   $116 = (+Math_abs((+$115)));
   $117 = $116 > 1.3407807929942596E+154;
   if ($117) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $118 = $21;
   $119 = $118 / 1.3407807929942596E+154;
   $21 = $119;
   $120 = $22;
   $121 = $120 / 1.3407807929942596E+154;
   $22 = $121;
   $122 = $12;
   $123 = $122 / 1.3407807929942596E+154;
   $12 = $123;
   $124 = $13;
   $125 = $124 / 1.3407807929942596E+154;
   $13 = $125;
   $126 = $10;
   $127 = $126 / 1.3407807929942596E+154;
   $10 = $127;
   $128 = $11;
   $129 = $128 / 1.3407807929942596E+154;
   $11 = $129;
  }
  $130 = $20;
  $23 = $130;
  $131 = $21;
  $132 = $22;
  $133 = $131 / $132;
  $20 = $133;
  $134 = $23;
  $135 = $20;
  $136 = $134 / $135;
  $24 = $136;
  $137 = $24;
  $138 = $137 - 1.0;
  $139 = (+Math_abs((+$138)));
  $140 = $139 < 4.4408920985006262E-16;
  if ($140) {
   break;
  }
 }
 $141 = $20;
 $142 = $6;
 HEAPF64[$142>>3] = $141;
 $143 = $9;
 $144 = (+($143|0));
 $145 = $144 + 1.0;
 $146 = 4.0 * $145;
 $147 = $146 * 2.2204460492503131E-16;
 $148 = $20;
 $149 = (+Math_abs((+$148)));
 $150 = $147 * $149;
 $151 = $6;
 $152 = ((($151)) + 8|0);
 HEAPF64[$152>>3] = $150;
 $153 = $9;
 $154 = ($153|0)==(5000);
 if ($154) {
  _gsl_error(83691,83110,99,11);
  $3 = 11;
  $155 = $3;
  STACKTOP = sp;return ($155|0);
 } else {
  $3 = 0;
  $155 = $3;
  STACKTOP = sp;return ($155|0);
 }
 return (0)|0;
}
function _gsl_sf_exprel_n_e($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0;
 var $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $7 = sp + 144|0;
 $12 = sp + 96|0;
 $17 = sp + 56|0;
 $18 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $27 = $4;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $6;
  HEAPF64[$29>>3] = nan;
  $30 = $6;
  $31 = ((($30)) + 8|0);
  HEAPF64[$31>>3] = nan;
  _gsl_error(83774,83110,426,1);
  $3 = 1;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $32 = $5;
 $33 = $32 == 0.0;
 if ($33) {
  $34 = $6;
  HEAPF64[$34>>3] = 1.0;
  $35 = $6;
  $36 = ((($35)) + 8|0);
  HEAPF64[$36>>3] = 0.0;
  $3 = 0;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $37 = $5;
 $38 = (+Math_abs((+$37)));
 $39 = $4;
 $40 = (+($39|0));
 $41 = 6.0554544523933429E-6 * $40;
 $42 = $38 < $41;
 if ($42) {
  $43 = $5;
  $44 = $4;
  $45 = (($44) + 1)|0;
  $46 = (+($45|0));
  $47 = $43 / $46;
  $48 = $5;
  $49 = $4;
  $50 = (($49) + 2)|0;
  $51 = (+($50|0));
  $52 = $48 / $51;
  $53 = 1.0 + $52;
  $54 = $47 * $53;
  $55 = 1.0 + $54;
  $56 = $6;
  HEAPF64[$56>>3] = $55;
  $57 = $6;
  $58 = ((($57)) + 8|0);
  HEAPF64[$58>>3] = 4.4408920985006262E-16;
  $3 = 0;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $59 = $4;
 $60 = ($59|0)==(0);
 if ($60) {
  $61 = $5;
  $62 = $6;
  $63 = (_gsl_sf_exp_e($61,$62)|0);
  $3 = $63;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $64 = $4;
 $65 = ($64|0)==(1);
 if ($65) {
  $66 = $5;
  $67 = $6;
  $68 = (_gsl_sf_exprel_e($66,$67)|0);
  $3 = $68;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $69 = $4;
 $70 = ($69|0)==(2);
 $71 = $5;
 if ($70) {
  $72 = $6;
  $73 = (_gsl_sf_exprel_2_e($71,$72)|0);
  $3 = $73;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $74 = $4;
 $75 = (+($74|0));
 $76 = $71 > $75;
 if ($76) {
  $77 = $5;
  $78 = - $77;
  $79 = $4;
  $80 = (+($79|0));
  $81 = $5;
  $82 = $4;
  $83 = (+($82|0));
  $84 = $81 / $83;
  $85 = (+Math_log((+$84)));
  $86 = 1.0 + $85;
  $87 = $80 * $86;
  $88 = $78 + $87;
  $89 = $88 < -36.043653389117154;
  if ($89) {
   $90 = $4;
   (_gsl_sf_lnfact_e($90,$7)|0);
   $91 = $4;
   $92 = (+($91|0));
   $93 = $5;
   $94 = (+Math_log((+$93)));
   $95 = $92 * $94;
   $10 = $95;
   $96 = $5;
   $97 = +HEAPF64[$7>>3];
   $98 = $96 + $97;
   $99 = $10;
   $100 = $98 - $99;
   $8 = $100;
   $101 = $5;
   $102 = (+Math_abs((+$101)));
   $103 = +HEAPF64[$7>>3];
   $104 = (+Math_abs((+$103)));
   $105 = $102 + $104;
   $106 = $10;
   $107 = (+Math_abs((+$106)));
   $108 = $105 + $107;
   $109 = 2.2204460492503131E-16 * $108;
   $9 = $109;
   $110 = ((($7)) + 8|0);
   $111 = +HEAPF64[$110>>3];
   $112 = $9;
   $113 = $112 + $111;
   $9 = $113;
   $114 = $8;
   $115 = $9;
   $116 = $6;
   $117 = (_gsl_sf_exp_err_e($114,$115,$116)|0);
   $3 = $117;
   $266 = $3;
   STACKTOP = sp;return ($266|0);
  }
 }
 $118 = $5;
 $119 = $4;
 $120 = (+($119|0));
 $121 = $118 > $120;
 $122 = $5;
 if (!($121)) {
  $228 = $4;
  $229 = (+($228|0));
  $230 = -10.0 * $229;
  $231 = $122 > $230;
  if ($231) {
   $232 = $4;
   $233 = (+($232|0));
   $234 = $5;
   $235 = $6;
   $236 = (_exprel_n_CF($233,$234,$235)|0);
   $3 = $236;
   $266 = $3;
   STACKTOP = sp;return ($266|0);
  }
  $24 = 1.0;
  $25 = 1.0;
  $26 = 1;
  while(1) {
   $237 = $26;
   $238 = $4;
   $239 = ($237|0)<($238|0);
   $240 = $4;
   if (!($239)) {
    break;
   }
   $241 = $26;
   $242 = (($240) - ($241))|0;
   $243 = (+($242|0));
   $244 = $5;
   $245 = $243 / $244;
   $246 = $25;
   $247 = $246 * $245;
   $25 = $247;
   $248 = $25;
   $249 = $24;
   $250 = $249 + $248;
   $24 = $250;
   $251 = $26;
   $252 = (($251) + 1)|0;
   $26 = $252;
  }
  $253 = (0 - ($240))|0;
  $254 = (+($253|0));
  $255 = $5;
  $256 = $254 / $255;
  $257 = $24;
  $258 = $256 * $257;
  $259 = $6;
  HEAPF64[$259>>3] = $258;
  $260 = $6;
  $261 = +HEAPF64[$260>>3];
  $262 = (+Math_abs((+$261)));
  $263 = 4.4408920985006262E-16 * $262;
  $264 = $6;
  $265 = ((($264)) + 8|0);
  HEAPF64[$265>>3] = $263;
  $3 = 0;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $123 = (+Math_log((+$122)));
 $11 = $123;
 $124 = $4;
 (_gsl_sf_lnfact_e($124,$12)|0);
 $125 = +HEAPF64[$12>>3];
 $126 = $4;
 $127 = (+($126|0));
 $128 = (+Math_log((+$127)));
 $129 = $125 - $128;
 $13 = $129;
 $130 = $5;
 $131 = +HEAPF64[$12>>3];
 $132 = $130 + $131;
 $133 = $4;
 $134 = (+($133|0));
 $135 = $11;
 $136 = $134 * $135;
 $137 = $132 - $136;
 $14 = $137;
 $138 = $5;
 $139 = (+Math_abs((+$138)));
 $140 = +HEAPF64[$12>>3];
 $141 = (+Math_abs((+$140)));
 $142 = $139 + $141;
 $143 = $4;
 $144 = (+($143|0));
 $145 = $11;
 $146 = $144 * $145;
 $147 = (+Math_abs((+$146)));
 $148 = $142 + $147;
 $149 = 2.2204460492503131E-16 * $148;
 $15 = $149;
 $150 = ((($12)) + 8|0);
 $151 = +HEAPF64[$150>>3];
 $152 = $15;
 $153 = $152 + $151;
 $15 = $153;
 $154 = $14;
 $155 = $154 < 704.78271289338397;
 if (!($155)) {
  $225 = $6;
  HEAPF64[$225>>3] = inf;
  $226 = $6;
  $227 = ((($226)) + 8|0);
  HEAPF64[$227>>3] = inf;
  _gsl_error(83804,83110,508,16);
  $3 = 16;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $156 = $14;
 $157 = $15;
 $158 = (_gsl_sf_exp_err_e($156,$157,$18)|0);
 $19 = $158;
 $159 = $5;
 $160 = - $159;
 $161 = $4;
 $162 = (($161) - 1)|0;
 $163 = (+($162|0));
 $164 = $11;
 $165 = $163 * $164;
 $166 = $160 + $165;
 $167 = $13;
 $168 = $166 - $167;
 $20 = $168;
 $21 = 1.0;
 $22 = 1.0;
 $23 = 1;
 while(1) {
  $169 = $23;
  $170 = $4;
  $171 = ($169|0)<($170|0);
  if (!($171)) {
   break;
  }
  $172 = $4;
  $173 = $23;
  $174 = (($172) - ($173))|0;
  $175 = (+($174|0));
  $176 = $5;
  $177 = $175 / $176;
  $178 = $22;
  $179 = $178 * $177;
  $22 = $179;
  $180 = $22;
  $181 = $21;
  $182 = $181 + $180;
  $21 = $182;
  $183 = $23;
  $184 = (($183) + 1)|0;
  $23 = $184;
 }
 $185 = $20;
 $186 = $21;
 $187 = (_gsl_sf_exp_mult_e($185,$186,$17)|0);
 $16 = $187;
 $188 = $16;
 $189 = ($188|0)==(0);
 if ($189) {
  $190 = +HEAPF64[$18>>3];
  $191 = +HEAPF64[$17>>3];
  $192 = 1.0 - $191;
  $193 = $190 * $192;
  $194 = $6;
  HEAPF64[$194>>3] = $193;
  $195 = +HEAPF64[$18>>3];
  $196 = ((($17)) + 8|0);
  $197 = +HEAPF64[$196>>3];
  $198 = 4.4408920985006262E-16 + $197;
  $199 = $195 * $198;
  $200 = $6;
  $201 = ((($200)) + 8|0);
  HEAPF64[$201>>3] = $199;
  $202 = ((($18)) + 8|0);
  $203 = +HEAPF64[$202>>3];
  $204 = +HEAPF64[$17>>3];
  $205 = 1.0 - $204;
  $206 = (+Math_abs((+$205)));
  $207 = $203 * $206;
  $208 = $6;
  $209 = ((($208)) + 8|0);
  $210 = +HEAPF64[$209>>3];
  $211 = $210 + $207;
  HEAPF64[$209>>3] = $211;
  $212 = $6;
  $213 = +HEAPF64[$212>>3];
  $214 = (+Math_abs((+$213)));
  $215 = 4.4408920985006262E-16 * $214;
  $216 = $6;
  $217 = ((($216)) + 8|0);
  $218 = +HEAPF64[$217>>3];
  $219 = $218 + $215;
  HEAPF64[$217>>3] = $219;
  $220 = $19;
  $3 = $220;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 } else {
  $221 = $6;
  HEAPF64[$221>>3] = 0.0;
  $222 = $6;
  $223 = ((($222)) + 8|0);
  HEAPF64[$223>>3] = 0.0;
  $224 = $16;
  $3 = $224;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_err_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = (+Math_abs((+$10)));
 $7 = $11;
 $12 = $4;
 $13 = $7;
 $14 = $12 + $13;
 $15 = $14 > 709.78271289338397;
 if ($15) {
  $16 = $6;
  HEAPF64[$16>>3] = inf;
  $17 = $6;
  $18 = ((($17)) + 8|0);
  HEAPF64[$18>>3] = inf;
  _gsl_error(83804,83110,542,16);
  $3 = 16;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 $19 = $4;
 $20 = $7;
 $21 = $19 - $20;
 $22 = $21 < -708.39641853226408;
 if ($22) {
  $23 = $6;
  HEAPF64[$23>>3] = 0.0;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAPF64[$25>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83110,545,15);
  $3 = 15;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 } else {
  $26 = $4;
  $27 = (+Math_exp((+$26)));
  $8 = $27;
  $28 = $7;
  $29 = (+Math_exp((+$28)));
  $9 = $29;
  $30 = $8;
  $31 = $6;
  HEAPF64[$31>>3] = $30;
  $32 = $8;
  $33 = $9;
  $34 = $9;
  $35 = 1.0 / $34;
  $36 = $33 - $35;
  $37 = (+_GSL_MAX_DBL(2.2204460492503131E-16,$36));
  $38 = $32 * $37;
  $39 = $6;
  $40 = ((($39)) + 8|0);
  HEAPF64[$40>>3] = $38;
  $41 = $6;
  $42 = +HEAPF64[$41>>3];
  $43 = (+Math_abs((+$42)));
  $44 = 4.4408920985006262E-16 * $43;
  $45 = $6;
  $46 = ((($45)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $47 + $44;
  HEAPF64[$46>>3] = $48;
  $3 = 0;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_err_e10_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = (+Math_abs((+$10)));
 $7 = $11;
 $12 = $4;
 $13 = $7;
 $14 = $12 + $13;
 $15 = $14 > 2147483646.0;
 if ($15) {
  $16 = $6;
  HEAPF64[$16>>3] = inf;
  $17 = $6;
  $18 = ((($17)) + 8|0);
  HEAPF64[$18>>3] = inf;
  $19 = $6;
  $20 = ((($19)) + 16|0);
  HEAP32[$20>>2] = 0;
  _gsl_error(83804,83110,566,16);
  $3 = 16;
  $55 = $3;
  STACKTOP = sp;return ($55|0);
 }
 $21 = $4;
 $22 = $7;
 $23 = $21 - $22;
 $24 = $23 < -2147483647.0;
 if ($24) {
  $25 = $6;
  HEAPF64[$25>>3] = 0.0;
  $26 = $6;
  $27 = ((($26)) + 8|0);
  HEAPF64[$27>>3] = 2.2250738585072014E-308;
  $28 = $6;
  $29 = ((($28)) + 16|0);
  HEAP32[$29>>2] = 0;
  _gsl_error(83794,83110,569,15);
  $3 = 15;
  $55 = $3;
  STACKTOP = sp;return ($55|0);
 } else {
  $30 = $4;
  $31 = $30 / 2.3025850929940459;
  $32 = (+Math_floor((+$31)));
  $33 = (~~(($32)));
  $8 = $33;
  $34 = $4;
  $35 = $8;
  $36 = (+($35|0));
  $37 = $36 * 2.3025850929940459;
  $38 = $34 - $37;
  $39 = (+Math_exp((+$38)));
  $9 = $39;
  $40 = $9;
  $41 = $6;
  HEAPF64[$41>>3] = $40;
  $42 = $9;
  $43 = $4;
  $44 = (+Math_abs((+$43)));
  $45 = $44 + 1.0;
  $46 = 4.4408920985006262E-16 * $45;
  $47 = $7;
  $48 = $46 + $47;
  $49 = $42 * $48;
  $50 = $6;
  $51 = ((($50)) + 8|0);
  HEAPF64[$51>>3] = $49;
  $52 = $8;
  $53 = $6;
  $54 = ((($53)) + 16|0);
  HEAP32[$54>>2] = $52;
  $3 = 0;
  $55 = $3;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _gsl_sf_expint_E1_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_expint_E1_impl($4,$5,0)|0);
 STACKTOP = sp;return ($6|0);
}
function _expint_E1_impl($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0;
 var $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 136|0;
 $12 = sp + 112|0;
 $15 = sp + 80|0;
 $18 = sp + 48|0;
 $20 = sp + 24|0;
 $22 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 708.39641853226408;
 $23 = (+Math_log(708.39641853226408));
 $24 = 708.39641853226408 - $23;
 $8 = $24;
 $25 = $4;
 $26 = $8;
 $27 = - $26;
 $28 = !($25 < $27);
 $29 = $6;
 $30 = ($29|0)!=(0);
 $or$cond = $28 | $30;
 if (!($or$cond)) {
  $31 = $5;
  HEAPF64[$31>>3] = inf;
  $32 = $5;
  $33 = ((($32)) + 8|0);
  HEAPF64[$33>>3] = inf;
  _gsl_error(83804,83116,298,16);
  $3 = 16;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 $34 = $4;
 $35 = $34 <= -10.0;
 $36 = $4;
 if ($35) {
  $37 = 1.0 / $36;
  $38 = $6;
  $39 = ($38|0)!=(0);
  if ($39) {
   $44 = 1.0;
  } else {
   $40 = $4;
   $41 = - $40;
   $42 = (+Math_exp((+$41)));
   $44 = $42;
  }
  $43 = $37 * $44;
  $9 = $43;
  $45 = $4;
  $46 = 20.0 / $45;
  $47 = $46 + 1.0;
  (_cheb_eval_e_3833(70752,$47,$10)|0);
  $48 = $9;
  $49 = +HEAPF64[$10>>3];
  $50 = 1.0 + $49;
  $51 = $48 * $50;
  $52 = $5;
  HEAPF64[$52>>3] = $51;
  $53 = $9;
  $54 = ((($10)) + 8|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $53 * $55;
  $57 = $5;
  $58 = ((($57)) + 8|0);
  HEAPF64[$58>>3] = $56;
  $59 = $4;
  $60 = (+Math_abs((+$59)));
  $61 = $60 + 1.0;
  $62 = 4.4408920985006262E-16 * $61;
  $63 = $5;
  $64 = +HEAPF64[$63>>3];
  $65 = (+Math_abs((+$64)));
  $66 = $62 * $65;
  $67 = $5;
  $68 = ((($67)) + 8|0);
  $69 = +HEAPF64[$68>>3];
  $70 = $69 + $66;
  HEAPF64[$68>>3] = $70;
  $3 = 0;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 $71 = $36 <= -4.0;
 $72 = $4;
 if ($71) {
  $73 = 1.0 / $72;
  $74 = $6;
  $75 = ($74|0)!=(0);
  if ($75) {
   $80 = 1.0;
  } else {
   $76 = $4;
   $77 = - $76;
   $78 = (+Math_exp((+$77)));
   $80 = $78;
  }
  $79 = $73 * $80;
  $11 = $79;
  $81 = $4;
  $82 = 40.0 / $81;
  $83 = $82 + 7.0;
  $84 = $83 / 3.0;
  (_cheb_eval_e_3833(70784,$84,$12)|0);
  $85 = $11;
  $86 = +HEAPF64[$12>>3];
  $87 = 1.0 + $86;
  $88 = $85 * $87;
  $89 = $5;
  HEAPF64[$89>>3] = $88;
  $90 = $11;
  $91 = ((($12)) + 8|0);
  $92 = +HEAPF64[$91>>3];
  $93 = $90 * $92;
  $94 = $5;
  $95 = ((($94)) + 8|0);
  HEAPF64[$95>>3] = $93;
  $96 = $5;
  $97 = +HEAPF64[$96>>3];
  $98 = (+Math_abs((+$97)));
  $99 = 4.4408920985006262E-16 * $98;
  $100 = $5;
  $101 = ((($100)) + 8|0);
  $102 = +HEAPF64[$101>>3];
  $103 = $102 + $99;
  HEAPF64[$101>>3] = $103;
  $3 = 0;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 $104 = $72 <= -1.0;
 $105 = $4;
 if ($104) {
  $106 = (+Math_abs((+$105)));
  $107 = (+Math_log((+$106)));
  $108 = - $107;
  $13 = $108;
  $109 = $6;
  $110 = ($109|0)!=(0);
  $111 = $4;
  $112 = (+Math_exp((+$111)));
  $113 = $110 ? $112 : 1.0;
  $14 = $113;
  $114 = $4;
  $115 = 2.0 * $114;
  $116 = $115 + 5.0;
  $117 = $116 / 3.0;
  (_cheb_eval_e_3833(70816,$117,$15)|0);
  $118 = $14;
  $119 = $13;
  $120 = +HEAPF64[$15>>3];
  $121 = $119 + $120;
  $122 = $118 * $121;
  $123 = $5;
  HEAPF64[$123>>3] = $122;
  $124 = $14;
  $125 = ((($15)) + 8|0);
  $126 = +HEAPF64[$125>>3];
  $127 = $13;
  $128 = (+Math_abs((+$127)));
  $129 = 2.2204460492503131E-16 * $128;
  $130 = $126 + $129;
  $131 = $124 * $130;
  $132 = $5;
  $133 = ((($132)) + 8|0);
  HEAPF64[$133>>3] = $131;
  $134 = $5;
  $135 = +HEAPF64[$134>>3];
  $136 = (+Math_abs((+$135)));
  $137 = 4.4408920985006262E-16 * $136;
  $138 = $5;
  $139 = ((($138)) + 8|0);
  $140 = +HEAPF64[$139>>3];
  $141 = $140 + $137;
  HEAPF64[$139>>3] = $141;
  $3 = 0;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 $142 = $105 == 0.0;
 if ($142) {
  $143 = $5;
  HEAPF64[$143>>3] = nan;
  $144 = $5;
  $145 = ((($144)) + 8|0);
  HEAPF64[$145>>3] = nan;
  _gsl_error(83774,83116,329,1);
  $3 = 1;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 $146 = $4;
 $147 = $146 <= 1.0;
 $148 = $4;
 if ($147) {
  $149 = (+Math_abs((+$148)));
  $150 = (+Math_log((+$149)));
  $151 = - $150;
  $16 = $151;
  $152 = $6;
  $153 = ($152|0)!=(0);
  $154 = $4;
  $155 = (+Math_exp((+$154)));
  $156 = $153 ? $155 : 1.0;
  $17 = $156;
  $157 = $4;
  (_cheb_eval_e_3833(70848,$157,$18)|0);
  $158 = $17;
  $159 = $16;
  $160 = $159 - 0.6875;
  $161 = $4;
  $162 = $160 + $161;
  $163 = +HEAPF64[$18>>3];
  $164 = $162 + $163;
  $165 = $158 * $164;
  $166 = $5;
  HEAPF64[$166>>3] = $165;
  $167 = $17;
  $168 = ((($18)) + 8|0);
  $169 = +HEAPF64[$168>>3];
  $170 = $16;
  $171 = (+Math_abs((+$170)));
  $172 = 2.2204460492503131E-16 * $171;
  $173 = $169 + $172;
  $174 = $167 * $173;
  $175 = $5;
  $176 = ((($175)) + 8|0);
  HEAPF64[$176>>3] = $174;
  $177 = $5;
  $178 = +HEAPF64[$177>>3];
  $179 = (+Math_abs((+$178)));
  $180 = 4.4408920985006262E-16 * $179;
  $181 = $5;
  $182 = ((($181)) + 8|0);
  $183 = +HEAPF64[$182>>3];
  $184 = $183 + $180;
  HEAPF64[$182>>3] = $184;
  $3 = 0;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 $185 = $148 <= 4.0;
 $186 = $4;
 if ($185) {
  $187 = 1.0 / $186;
  $188 = $6;
  $189 = ($188|0)!=(0);
  if ($189) {
   $194 = 1.0;
  } else {
   $190 = $4;
   $191 = - $190;
   $192 = (+Math_exp((+$191)));
   $194 = $192;
  }
  $193 = $187 * $194;
  $19 = $193;
  $195 = $4;
  $196 = 8.0 / $195;
  $197 = $196 - 5.0;
  $198 = $197 / 3.0;
  (_cheb_eval_e_3833(70880,$198,$20)|0);
  $199 = $19;
  $200 = +HEAPF64[$20>>3];
  $201 = 1.0 + $200;
  $202 = $199 * $201;
  $203 = $5;
  HEAPF64[$203>>3] = $202;
  $204 = $19;
  $205 = ((($20)) + 8|0);
  $206 = +HEAPF64[$205>>3];
  $207 = $204 * $206;
  $208 = $5;
  $209 = ((($208)) + 8|0);
  HEAPF64[$209>>3] = $207;
  $210 = $5;
  $211 = +HEAPF64[$210>>3];
  $212 = (+Math_abs((+$211)));
  $213 = 4.4408920985006262E-16 * $212;
  $214 = $5;
  $215 = ((($214)) + 8|0);
  $216 = +HEAPF64[$215>>3];
  $217 = $216 + $213;
  HEAPF64[$215>>3] = $217;
  $3 = 0;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 $218 = $8;
 $219 = $186 <= $218;
 $220 = $6;
 $221 = ($220|0)!=(0);
 $or$cond3 = $219 | $221;
 if (!($or$cond3)) {
  $264 = $5;
  HEAPF64[$264>>3] = 0.0;
  $265 = $5;
  $266 = ((($265)) + 8|0);
  HEAPF64[$266>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83116,363,15);
  $3 = 15;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 $222 = $4;
 $223 = 1.0 / $222;
 $224 = $6;
 $225 = ($224|0)!=(0);
 if ($225) {
  $230 = 1.0;
 } else {
  $226 = $4;
  $227 = - $226;
  $228 = (+Math_exp((+$227)));
  $230 = $228;
 }
 $229 = $223 * $230;
 $21 = $229;
 $231 = $4;
 $232 = 8.0 / $231;
 $233 = $232 - 1.0;
 (_cheb_eval_e_3833(70912,$233,$22)|0);
 $234 = $21;
 $235 = +HEAPF64[$22>>3];
 $236 = 1.0 + $235;
 $237 = $234 * $236;
 $238 = $5;
 HEAPF64[$238>>3] = $237;
 $239 = $21;
 $240 = ((($22)) + 8|0);
 $241 = +HEAPF64[$240>>3];
 $242 = 2.2204460492503131E-16 + $241;
 $243 = $239 * $242;
 $244 = $5;
 $245 = ((($244)) + 8|0);
 HEAPF64[$245>>3] = $243;
 $246 = $4;
 $247 = $246 + 1.0;
 $248 = 2.0 * $247;
 $249 = $248 * 2.2204460492503131E-16;
 $250 = $5;
 $251 = +HEAPF64[$250>>3];
 $252 = (+Math_abs((+$251)));
 $253 = $249 * $252;
 $254 = $5;
 $255 = ((($254)) + 8|0);
 $256 = +HEAPF64[$255>>3];
 $257 = $256 + $253;
 HEAPF64[$255>>3] = $257;
 $258 = $5;
 $259 = +HEAPF64[$258>>3];
 $260 = $259 == 0.0;
 if ($260) {
  $261 = $5;
  HEAPF64[$261>>3] = 0.0;
  $262 = $5;
  $263 = ((($262)) + 8|0);
  HEAPF64[$263>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83116,358,15);
  $3 = 15;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 } else {
  $3 = 0;
  $267 = $3;
  STACKTOP = sp;return ($267|0);
 }
 return (0)|0;
}
function _cheb_eval_e_3833($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gsl_sf_expint_Ei_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = - $5;
 $7 = $3;
 $8 = (_gsl_sf_expint_E1_e($6,$7)|0);
 $4 = $8;
 $9 = $3;
 $10 = +HEAPF64[$9>>3];
 $11 = - $10;
 $12 = $3;
 HEAPF64[$12>>3] = $11;
 $13 = $4;
 STACKTOP = sp;return ($13|0);
}
function _gsl_sf_expint_Ei($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $2 = $0;
 $5 = $2;
 $6 = (_gsl_sf_expint_Ei_e($5,$3)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $4;
  _gsl_error(83125,83116,575,$9);
  $10 = +HEAPF64[$3>>3];
  $1 = $10;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $11 = +HEAPF64[$3>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _gsl_sf_lngamma_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0.0, $13 = 0;
 var $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0;
 var $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp + 56|0;
 $13 = sp + 16|0;
 $14 = sp;
 $3 = $0;
 $4 = $1;
 $15 = $3;
 $16 = $15 - 1.0;
 $17 = (+Math_abs((+$16)));
 $18 = $17 < 0.01;
 $19 = $3;
 if ($18) {
  $20 = $19 - 1.0;
  $21 = $4;
  $22 = (_lngamma_1_pade($20,$21)|0);
  $5 = $22;
  $23 = $3;
  $24 = $23 - 1.0;
  $25 = (+Math_abs((+$24)));
  $26 = 2.2204460492503131E-16 + $25;
  $27 = 1.0 / $26;
  $28 = $4;
  $29 = ((($28)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $30 * $27;
  HEAPF64[$29>>3] = $31;
  $32 = $5;
  $2 = $32;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $33 = $19 - 2.0;
 $34 = (+Math_abs((+$33)));
 $35 = $34 < 0.01;
 $36 = $3;
 if ($35) {
  $37 = $36 - 2.0;
  $38 = $4;
  $39 = (_lngamma_2_pade($37,$38)|0);
  $6 = $39;
  $40 = $3;
  $41 = $40 - 2.0;
  $42 = (+Math_abs((+$41)));
  $43 = 2.2204460492503131E-16 + $42;
  $44 = 1.0 / $43;
  $45 = $4;
  $46 = ((($45)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $47 * $44;
  HEAPF64[$46>>3] = $48;
  $49 = $6;
  $2 = $49;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $50 = $36 >= 0.5;
 $51 = $3;
 if ($50) {
  $52 = $4;
  $53 = (_lngamma_lanczos($51,$52)|0);
  $2 = $53;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $54 = $51 == 0.0;
 if ($54) {
  $55 = $4;
  HEAPF64[$55>>3] = nan;
  $56 = $4;
  $57 = ((($56)) + 8|0);
  HEAPF64[$57>>3] = nan;
  _gsl_error(83774,83156,1138,1);
  $2 = 1;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $58 = $3;
 $59 = (+Math_abs((+$58)));
 $60 = $59 < 0.02;
 $61 = $3;
 if ($60) {
  $62 = $4;
  $63 = (_lngamma_sgn_0($61,$62,$7)|0);
  $2 = $63;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $64 = $61 > -716770142402832.38;
 if (!($64)) {
  $112 = $4;
  HEAPF64[$112>>3] = 0.0;
  $113 = $4;
  $114 = ((($113)) + 8|0);
  HEAPF64[$114>>3] = 0.0;
  _gsl_error(83691,83156,1180,18);
  $2 = 18;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $65 = $3;
 $66 = 1.0 - $65;
 $8 = $66;
 $67 = $8;
 $68 = 3.1415926535897931 * $67;
 $69 = (+Math_sin((+$68)));
 $9 = $69;
 $70 = $9;
 $71 = (+Math_abs((+$70)));
 $10 = $71;
 $72 = $9;
 $73 = $72 == 0.0;
 if ($73) {
  $74 = $4;
  HEAPF64[$74>>3] = nan;
  $75 = $4;
  $76 = ((($75)) + 8|0);
  HEAPF64[$76>>3] = nan;
  _gsl_error(83774,83156,1152,1);
  $2 = 1;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $77 = $10;
 $78 = $77 < 0.047123889803846894;
 if (!($78)) {
  $96 = $8;
  (_lngamma_lanczos($96,$14)|0);
  $97 = $10;
  $98 = (+Math_log((+$97)));
  $99 = +HEAPF64[$14>>3];
  $100 = $98 + $99;
  $101 = 1.1447298858494002 - $100;
  $102 = $4;
  HEAPF64[$102>>3] = $101;
  $103 = $4;
  $104 = +HEAPF64[$103>>3];
  $105 = (+Math_abs((+$104)));
  $106 = 4.4408920985006262E-16 * $105;
  $107 = ((($14)) + 8|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $106 + $108;
  $110 = $4;
  $111 = ((($110)) + 8|0);
  HEAPF64[$111>>3] = $109;
  $2 = 0;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 $79 = $3;
 $80 = $79 < -2147483646.0;
 if ($80) {
  $81 = $4;
  HEAPF64[$81>>3] = 0.0;
  $82 = $4;
  $83 = ((($82)) + 8|0);
  HEAPF64[$83>>3] = 0.0;
  _gsl_error(83691,83156,1159,18);
  $2 = 18;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 } else {
  $84 = $3;
  $85 = $84 - 0.5;
  $86 = (~~(($85)));
  $87 = (0 - ($86))|0;
  $11 = $87;
  $88 = $3;
  $89 = $11;
  $90 = (+($89|0));
  $91 = $88 + $90;
  $12 = $91;
  $92 = $11;
  $93 = $12;
  $94 = $4;
  $95 = (_lngamma_sgn_sing($92,$93,$94,$13)|0);
  $2 = $95;
  $115 = $2;
  STACKTOP = sp;return ($115|0);
 }
 return (0)|0;
}
function _lngamma_1_pade($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0, $66 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $2 = $0;
 $3 = $1;
 $4 = -1.0017419282349509;
 $5 = 1.736483920992288;
 $6 = 1.2433006018858752;
 $7 = 5.045627410027401;
 $18 = $2;
 $19 = $18 + -1.0017419282349509;
 $20 = $2;
 $21 = $20 + 1.736483920992288;
 $22 = $19 * $21;
 $8 = $22;
 $23 = $2;
 $24 = $23 + 1.2433006018858752;
 $25 = $2;
 $26 = $25 + 5.045627410027401;
 $27 = $24 * $26;
 $9 = $27;
 $28 = $8;
 $29 = 2.081626518866269 * $28;
 $30 = $9;
 $31 = $29 / $30;
 $10 = $31;
 $11 = 0.0047853242575817533;
 $12 = -0.01192457083645441;
 $13 = 0.019319614139604979;
 $14 = -0.025940273987250202;
 $15 = 0.031419287550214552;
 $32 = $2;
 $33 = $2;
 $34 = $32 * $33;
 $35 = $2;
 $36 = $34 * $35;
 $37 = $2;
 $38 = $36 * $37;
 $39 = $2;
 $40 = $38 * $39;
 $16 = $40;
 $41 = $16;
 $42 = $2;
 $43 = $2;
 $44 = $2;
 $45 = $2;
 $46 = 0.031419287550214552 * $45;
 $47 = -0.025940273987250202 + $46;
 $48 = $44 * $47;
 $49 = 0.019319614139604979 + $48;
 $50 = $43 * $49;
 $51 = -0.01192457083645441 + $50;
 $52 = $42 * $51;
 $53 = 0.0047853242575817533 + $52;
 $54 = $41 * $53;
 $17 = $54;
 $55 = $2;
 $56 = $10;
 $57 = $17;
 $58 = $56 + $57;
 $59 = $55 * $58;
 $60 = $3;
 HEAPF64[$60>>3] = $59;
 $61 = $3;
 $62 = +HEAPF64[$61>>3];
 $63 = (+Math_abs((+$62)));
 $64 = 4.4408920985006262E-16 * $63;
 $65 = $3;
 $66 = ((($65)) + 8|0);
 HEAPF64[$66>>3] = $64;
 STACKTOP = sp;return 0;
}
function _lngamma_2_pade($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0, $66 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $2 = $0;
 $3 = $1;
 $4 = 1.0008958347866692;
 $5 = 4.2093767352877549;
 $6 = 2.6188519049032171;
 $7 = 10.857665599009835;
 $18 = $2;
 $19 = $18 + 1.0008958347866692;
 $20 = $2;
 $21 = $20 + 4.2093767352877549;
 $22 = $19 * $21;
 $8 = $22;
 $23 = $2;
 $24 = $23 + 2.6188519049032171;
 $25 = $2;
 $26 = $25 + 10.857665599009835;
 $27 = $24 * $26;
 $9 = $27;
 $28 = $8;
 $29 = 2.853379987657819 * $28;
 $30 = $9;
 $31 = $29 / $30;
 $10 = $31;
 $11 = 1.139406357036744E-4;
 $12 = -1.365435269792533E-4;
 $13 = 1.0672871691836649E-4;
 $14 = -6.9327180093128204E-5;
 $15 = 4.0722092786794999E-5;
 $32 = $2;
 $33 = $2;
 $34 = $32 * $33;
 $35 = $2;
 $36 = $34 * $35;
 $37 = $2;
 $38 = $36 * $37;
 $39 = $2;
 $40 = $38 * $39;
 $16 = $40;
 $41 = $16;
 $42 = $2;
 $43 = $2;
 $44 = $2;
 $45 = $2;
 $46 = 4.0722092786794999E-5 * $45;
 $47 = -6.9327180093128204E-5 + $46;
 $48 = $44 * $47;
 $49 = 1.0672871691836649E-4 + $48;
 $50 = $43 * $49;
 $51 = -1.365435269792533E-4 + $50;
 $52 = $42 * $51;
 $53 = 1.139406357036744E-4 + $52;
 $54 = $41 * $53;
 $17 = $54;
 $55 = $2;
 $56 = $10;
 $57 = $17;
 $58 = $56 + $57;
 $59 = $55 * $58;
 $60 = $3;
 HEAPF64[$60>>3] = $59;
 $61 = $3;
 $62 = +HEAPF64[$61>>3];
 $63 = (+Math_abs((+$62)));
 $64 = 4.4408920985006262E-16 * $63;
 $65 = $3;
 $66 = ((($65)) + 8|0);
 HEAPF64[$66>>3] = $64;
 STACKTOP = sp;return 0;
}
function _lngamma_lanczos($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = $8 - 1.0;
 $2 = $9;
 $5 = 0.99999999999980993;
 $4 = 1;
 while(1) {
  $10 = $4;
  $11 = ($10|0)<=(8);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = (38000 + ($12<<3)|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $2;
  $16 = $4;
  $17 = (+($16|0));
  $18 = $15 + $17;
  $19 = $14 / $18;
  $20 = $5;
  $21 = $20 + $19;
  $5 = $21;
  $22 = $4;
  $23 = (($22) + 1)|0;
  $4 = $23;
 }
 $24 = $2;
 $25 = $24 + 0.5;
 $26 = $2;
 $27 = $26 + 7.5;
 $28 = $27 / 2.7182818284590451;
 $29 = (+Math_log((+$28)));
 $30 = $25 * $29;
 $6 = $30;
 $31 = $5;
 $32 = (+Math_log((+$31)));
 $33 = 0.91893853320467278 + $32;
 $7 = $33;
 $34 = $6;
 $35 = $7;
 $36 = $35 - 7.0;
 $37 = $34 + $36;
 $38 = $3;
 HEAPF64[$38>>3] = $37;
 $39 = $6;
 $40 = (+Math_abs((+$39)));
 $41 = $7;
 $42 = (+Math_abs((+$41)));
 $43 = $40 + $42;
 $44 = $43 + 7.0;
 $45 = 4.4408920985006262E-16 * $44;
 $46 = $3;
 $47 = ((($46)) + 8|0);
 HEAPF64[$47>>3] = $45;
 $48 = $3;
 $49 = +HEAPF64[$48>>3];
 $50 = (+Math_abs((+$49)));
 $51 = 2.2204460492503131E-16 * $50;
 $52 = $3;
 $53 = ((($52)) + 8|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $54 + $51;
 HEAPF64[$53>>3] = $55;
 STACKTOP = sp;return 0;
}
function _lngamma_sgn_0($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = -0.077215664901532866;
 $7 = -0.010944004672027444;
 $8 = 0.092520923919113707;
 $9 = -0.018271913165599812;
 $10 = 0.018004931096854797;
 $11 = -0.0068508853787238068;
 $12 = 0.003998239557568466;
 $13 = -0.0018943062168710781;
 $14 = 9.7473237804513216E-4;
 $15 = -4.8434392722255891E-4;
 $19 = $3;
 $20 = $3;
 $21 = $3;
 $22 = $3;
 $23 = $22 * -4.8434392722255891E-4;
 $24 = 9.7473237804513216E-4 + $23;
 $25 = $21 * $24;
 $26 = -0.0018943062168710781 + $25;
 $27 = $20 * $26;
 $28 = 0.003998239557568466 + $27;
 $29 = $19 * $28;
 $30 = -0.0068508853787238068 + $29;
 $16 = $30;
 $31 = $3;
 $32 = $3;
 $33 = $3;
 $34 = $3;
 $35 = $3;
 $36 = $3;
 $37 = $16;
 $38 = $36 * $37;
 $39 = 0.018004931096854797 + $38;
 $40 = $35 * $39;
 $41 = -0.018271913165599812 + $40;
 $42 = $34 * $41;
 $43 = 0.092520923919113707 + $42;
 $44 = $33 * $43;
 $45 = -0.010944004672027444 + $44;
 $46 = $32 * $45;
 $47 = -0.077215664901532866 + $46;
 $48 = $31 * $47;
 $17 = $48;
 $49 = $17;
 $50 = $3;
 $51 = 1.0 + $50;
 $52 = 1.0 / $51;
 $53 = $49 + $52;
 $54 = $3;
 $55 = 0.5 * $54;
 $56 = $53 + $55;
 $18 = $56;
 $57 = $18;
 $58 = $3;
 $59 = (+Math_abs((+$58)));
 $60 = $57 / $59;
 $61 = (+Math_log((+$60)));
 $62 = $4;
 HEAPF64[$62>>3] = $61;
 $63 = $4;
 $64 = +HEAPF64[$63>>3];
 $65 = (+Math_abs((+$64)));
 $66 = 8.8817841970012523E-16 * $65;
 $67 = $4;
 $68 = ((($67)) + 8|0);
 HEAPF64[$68>>3] = $66;
 $69 = $3;
 $70 = $69 >= 0.0;
 $71 = $70 ? 1 : -1;
 $72 = (+($71|0));
 $73 = $5;
 HEAPF64[$73>>3] = $72;
 STACKTOP = sp;return 0;
}
function _lngamma_sgn_sing($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $39 = sp + 112|0;
 $40 = sp + 96|0;
 $41 = sp + 80|0;
 $42 = sp + 64|0;
 $43 = sp + 48|0;
 $44 = sp + 32|0;
 $45 = sp + 16|0;
 $46 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $47 = $6;
 $48 = $47 == 0.0;
 if ($48) {
  $49 = $7;
  HEAPF64[$49>>3] = 0.0;
  $50 = $7;
  $51 = ((($50)) + 8|0);
  HEAPF64[$51>>3] = 0.0;
  $52 = $8;
  HEAPF64[$52>>3] = 0.0;
  _gsl_error(83691,83156,769,1);
  $4 = 1;
  $240 = $4;
  STACKTOP = sp;return ($240|0);
 }
 $53 = $5;
 $54 = ($53|0)==(1);
 if ($54) {
  $9 = 0.077215664901532866;
  $10 = 0.088159669573560306;
  $11 = -0.0043612543455534055;
  $12 = 0.013910658820046407;
  $13 = -0.0040942722768083908;
  $14 = 0.002756613101915416;
  $15 = -0.0012416264556530502;
  $16 = 6.5267976121802782E-4;
  $17 = -3.2205261682710439E-4;
  $18 = 1.6229131039545457E-4;
  $55 = $6;
  $56 = $6;
  $57 = $6;
  $58 = $6;
  $59 = $58 * 1.6229131039545457E-4;
  $60 = -3.2205261682710439E-4 + $59;
  $61 = $57 * $60;
  $62 = 6.5267976121802782E-4 + $61;
  $63 = $56 * $62;
  $64 = -0.0012416264556530502 + $63;
  $65 = $55 * $64;
  $66 = 0.002756613101915416 + $65;
  $19 = $66;
  $67 = $6;
  $68 = $6;
  $69 = $6;
  $70 = $6;
  $71 = $6;
  $72 = $6;
  $73 = $19;
  $74 = $72 * $73;
  $75 = -0.0040942722768083908 + $74;
  $76 = $71 * $75;
  $77 = 0.013910658820046407 + $76;
  $78 = $70 * $77;
  $79 = -0.0043612543455534055 + $78;
  $80 = $69 * $79;
  $81 = 0.088159669573560306 + $80;
  $82 = $68 * $81;
  $83 = 0.077215664901532866 + $82;
  $84 = $67 * $83;
  $20 = $84;
  $85 = $20;
  $86 = $85 - 1.0;
  $87 = $6;
  $88 = 0.5 * $87;
  $89 = $6;
  $90 = 3.0 * $89;
  $91 = 1.0 + $90;
  $92 = $88 * $91;
  $93 = $6;
  $94 = $6;
  $95 = $93 * $94;
  $96 = 1.0 - $95;
  $97 = $92 / $96;
  $98 = $86 - $97;
  $21 = $98;
  $99 = $21;
  $100 = (+Math_abs((+$99)));
  $101 = $6;
  $102 = (+Math_abs((+$101)));
  $103 = $100 / $102;
  $104 = (+Math_log((+$103)));
  $105 = $7;
  HEAPF64[$105>>3] = $104;
  $106 = $7;
  $107 = +HEAPF64[$106>>3];
  $108 = (+Math_abs((+$107)));
  $109 = 4.4408920985006262E-16 * $108;
  $110 = $7;
  $111 = ((($110)) + 8|0);
  HEAPF64[$111>>3] = $109;
  $112 = $6;
  $113 = $112 > 0.0;
  $114 = $113 ? -1.0 : 1.0;
  $115 = $8;
  HEAPF64[$115>>3] = $114;
  $4 = 0;
  $240 = $4;
  STACKTOP = sp;return ($240|0);
 }
 $23 = -1.6449340668482264;
 $24 = 0.8117424252833536;
 $25 = -0.19075182412208422;
 $26 = 0.0261478478176548;
 $27 = -0.0023460810354558235;
 $116 = $6;
 $117 = $6;
 $118 = $116 * $117;
 $28 = $118;
 $119 = $28;
 $120 = $28;
 $121 = $28;
 $122 = $28;
 $123 = $28;
 $124 = $123 * -0.0023460810354558235;
 $125 = 0.0261478478176548 + $124;
 $126 = $122 * $125;
 $127 = -0.19075182412208422 + $126;
 $128 = $121 * $127;
 $129 = 0.8117424252833536 + $128;
 $130 = $120 * $129;
 $131 = -1.6449340668482264 + $130;
 $132 = $119 * $131;
 $133 = 1.0 + $132;
 $29 = $133;
 $134 = $6;
 $135 = (+Math_abs((+$134)));
 $30 = $135;
 HEAPF64[$42>>3] = 0.0;
 HEAPF64[$43>>3] = 0.0;
 HEAPF64[$44>>3] = 0.0;
 HEAPF64[$45>>3] = 0.0;
 HEAPF64[$46>>3] = 0.0;
 $136 = $5;
 (_gsl_sf_lnfact_e($136,$39)|0);
 $137 = $5;
 $138 = (($137) + 1)|0;
 (_gsl_sf_psi_int_e($138,$40)|0);
 $139 = $5;
 $140 = (($139) + 1)|0;
 (_gsl_sf_psi_1_int_e($140,$41)|0);
 $141 = $30;
 $142 = $141 > 1.0000000000000001E-5;
 if ($142) {
  $143 = $5;
  $144 = (+($143|0));
  $145 = $144 + 1.0;
  (_gsl_sf_psi_n_e(2,$145,$42)|0);
 }
 $146 = $30;
 $147 = $146 > 2.0000000000000001E-4;
 if ($147) {
  $148 = $5;
  $149 = (+($148|0));
  $150 = $149 + 1.0;
  (_gsl_sf_psi_n_e(3,$150,$43)|0);
 }
 $151 = $30;
 $152 = $151 > 0.001;
 if ($152) {
  $153 = $5;
  $154 = (+($153|0));
  $155 = $154 + 1.0;
  (_gsl_sf_psi_n_e(4,$155,$44)|0);
 }
 $156 = $30;
 $157 = $156 > 0.0050000000000000001;
 if ($157) {
  $158 = $5;
  $159 = (+($158|0));
  $160 = $159 + 1.0;
  (_gsl_sf_psi_n_e(5,$160,$45)|0);
 }
 $161 = $30;
 $162 = $161 > 0.01;
 if ($162) {
  $163 = $5;
  $164 = (+($163|0));
  $165 = $164 + 1.0;
  (_gsl_sf_psi_n_e(6,$165,$46)|0);
 }
 $166 = +HEAPF64[$40>>3];
 $31 = $166;
 $167 = +HEAPF64[$41>>3];
 $168 = $167 / 2.0;
 $32 = $168;
 $169 = +HEAPF64[$42>>3];
 $170 = $169 / 6.0;
 $33 = $170;
 $171 = +HEAPF64[$43>>3];
 $172 = $171 / 24.0;
 $34 = $172;
 $173 = +HEAPF64[$44>>3];
 $174 = $173 / 120.0;
 $35 = $174;
 $175 = +HEAPF64[$45>>3];
 $176 = $175 / 720.0;
 $36 = $176;
 $177 = +HEAPF64[$46>>3];
 $178 = $177 / 5040.0;
 $37 = $178;
 $179 = +HEAPF64[$39>>3];
 $180 = $6;
 $181 = $31;
 $182 = $6;
 $183 = $32;
 $184 = $6;
 $185 = $33;
 $186 = $6;
 $187 = $34;
 $188 = $6;
 $189 = $35;
 $190 = $6;
 $191 = $36;
 $192 = $6;
 $193 = $37;
 $194 = $192 * $193;
 $195 = $191 - $194;
 $196 = $190 * $195;
 $197 = $189 - $196;
 $198 = $188 * $197;
 $199 = $187 - $198;
 $200 = $186 * $199;
 $201 = $185 - $200;
 $202 = $184 * $201;
 $203 = $183 - $202;
 $204 = $182 * $203;
 $205 = $181 - $204;
 $206 = $180 * $205;
 $207 = $179 - $206;
 $38 = $207;
 $208 = $38;
 $209 = - $208;
 $210 = $29;
 $211 = (+Math_log((+$210)));
 $212 = $209 - $211;
 $22 = $212;
 $213 = $22;
 $214 = $6;
 $215 = (+Math_abs((+$214)));
 $216 = (+Math_log((+$215)));
 $217 = $213 - $216;
 $218 = $7;
 HEAPF64[$218>>3] = $217;
 $219 = ((($39)) + 8|0);
 $220 = +HEAPF64[$219>>3];
 $221 = $22;
 $222 = (+Math_abs((+$221)));
 $223 = $7;
 $224 = +HEAPF64[$223>>3];
 $225 = (+Math_abs((+$224)));
 $226 = $222 + $225;
 $227 = 4.4408920985006262E-16 * $226;
 $228 = $220 + $227;
 $229 = $7;
 $230 = ((($229)) + 8|0);
 HEAPF64[$230>>3] = $228;
 $231 = $5;
 $232 = $231 & 1;
 $233 = ($232|0)!=(0);
 $234 = $233 ? -1.0 : 1.0;
 $235 = $6;
 $236 = $235 > 0.0;
 $237 = $236 ? 1.0 : -1.0;
 $238 = $234 * $237;
 $239 = $8;
 HEAPF64[$239>>3] = $238;
 $4 = 0;
 $240 = $4;
 STACKTOP = sp;return ($240|0);
}
function _gsl_sf_lnfact_e($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5>>>0)<=(170);
 $7 = $3;
 if ($6) {
  $8 = (33888 + (($7*24)|0)|0);
  $9 = ((($8)) + 8|0);
  $10 = +HEAPF64[$9>>3];
  $11 = (+Math_log((+$10)));
  $12 = $4;
  HEAPF64[$12>>3] = $11;
  $13 = $4;
  $14 = +HEAPF64[$13>>3];
  $15 = (+Math_abs((+$14)));
  $16 = 4.4408920985006262E-16 * $15;
  $17 = $4;
  $18 = ((($17)) + 8|0);
  HEAPF64[$18>>3] = $16;
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 } else {
  $19 = (+($7>>>0));
  $20 = $19 + 1.0;
  $21 = $4;
  (_gsl_sf_lngamma_e($20,$21)|0);
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _gsl_sf_lngamma_sgn_e($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0;
 var $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0;
 var $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $15 = $4;
 $16 = $15 - 1.0;
 $17 = (+Math_abs((+$16)));
 $18 = $17 < 0.01;
 $19 = $4;
 if ($18) {
  $20 = $19 - 1.0;
  $21 = $5;
  $22 = (_lngamma_1_pade($20,$21)|0);
  $7 = $22;
  $23 = $4;
  $24 = $23 - 1.0;
  $25 = (+Math_abs((+$24)));
  $26 = 2.2204460492503131E-16 + $25;
  $27 = 1.0 / $26;
  $28 = $5;
  $29 = ((($28)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $30 * $27;
  HEAPF64[$29>>3] = $31;
  $32 = $6;
  HEAPF64[$32>>3] = 1.0;
  $33 = $7;
  $3 = $33;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $34 = $19 - 2.0;
 $35 = (+Math_abs((+$34)));
 $36 = $35 < 0.01;
 $37 = $4;
 if ($36) {
  $38 = $37 - 2.0;
  $39 = $5;
  $40 = (_lngamma_2_pade($38,$39)|0);
  $8 = $40;
  $41 = $4;
  $42 = $41 - 2.0;
  $43 = (+Math_abs((+$42)));
  $44 = 2.2204460492503131E-16 + $43;
  $45 = 1.0 / $44;
  $46 = $5;
  $47 = ((($46)) + 8|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $48 * $45;
  HEAPF64[$47>>3] = $49;
  $50 = $6;
  HEAPF64[$50>>3] = 1.0;
  $51 = $8;
  $3 = $51;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $52 = $37 >= 0.5;
 if ($52) {
  $53 = $6;
  HEAPF64[$53>>3] = 1.0;
  $54 = $4;
  $55 = $5;
  $56 = (_lngamma_lanczos($54,$55)|0);
  $3 = $56;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $57 = $4;
 $58 = $57 == 0.0;
 if ($58) {
  $59 = $6;
  HEAPF64[$59>>3] = 0.0;
  $60 = $5;
  HEAPF64[$60>>3] = nan;
  $61 = $5;
  $62 = ((($61)) + 8|0);
  HEAPF64[$62>>3] = nan;
  _gsl_error(83774,83156,1205,1);
  $3 = 1;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $63 = $4;
 $64 = (+Math_abs((+$63)));
 $65 = $64 < 0.02;
 $66 = $4;
 if ($65) {
  $67 = $5;
  $68 = $6;
  $69 = (_lngamma_sgn_0($66,$67,$68)|0);
  $3 = $69;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $70 = $66 > -716770142402832.38;
 if (!($70)) {
  $125 = $5;
  HEAPF64[$125>>3] = 0.0;
  $126 = $5;
  $127 = ((($126)) + 8|0);
  HEAPF64[$127>>3] = 0.0;
  $128 = $6;
  HEAPF64[$128>>3] = 0.0;
  _gsl_error(83164,83156,1249,18);
  $3 = 18;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $71 = $4;
 $72 = 1.0 - $71;
 $9 = $72;
 $73 = $4;
 $74 = 3.1415926535897931 * $73;
 $75 = (+Math_sin((+$74)));
 $10 = $75;
 $76 = $10;
 $77 = (+Math_abs((+$76)));
 $11 = $77;
 $78 = $10;
 $79 = $78 == 0.0;
 if ($79) {
  $80 = $6;
  HEAPF64[$80>>3] = 0.0;
  $81 = $5;
  HEAPF64[$81>>3] = nan;
  $82 = $5;
  $83 = ((($82)) + 8|0);
  HEAPF64[$83>>3] = nan;
  _gsl_error(83774,83156,1219,1);
  $3 = 1;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $84 = $11;
 $85 = $84 < 0.047123889803846894;
 if (!($85)) {
  $105 = $9;
  (_lngamma_lanczos($105,$14)|0);
  $106 = $10;
  $107 = $106 > 0.0;
  $108 = $107 ? 1.0 : -1.0;
  $109 = $6;
  HEAPF64[$109>>3] = $108;
  $110 = $11;
  $111 = (+Math_log((+$110)));
  $112 = +HEAPF64[$14>>3];
  $113 = $111 + $112;
  $114 = 1.1447298858494002 - $113;
  $115 = $5;
  HEAPF64[$115>>3] = $114;
  $116 = $5;
  $117 = +HEAPF64[$116>>3];
  $118 = (+Math_abs((+$117)));
  $119 = 4.4408920985006262E-16 * $118;
  $120 = ((($14)) + 8|0);
  $121 = +HEAPF64[$120>>3];
  $122 = $119 + $121;
  $123 = $5;
  $124 = ((($123)) + 8|0);
  HEAPF64[$124>>3] = $122;
  $3 = 0;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $86 = $4;
 $87 = $86 < -2147483646.0;
 if ($87) {
  $88 = $5;
  HEAPF64[$88>>3] = 0.0;
  $89 = $5;
  $90 = ((($89)) + 8|0);
  HEAPF64[$90>>3] = 0.0;
  $91 = $6;
  HEAPF64[$91>>3] = 0.0;
  _gsl_error(83691,83156,1227,18);
  $3 = 18;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 } else {
  $92 = $4;
  $93 = $92 - 0.5;
  $94 = (~~(($93)));
  $95 = (0 - ($94))|0;
  $12 = $95;
  $96 = $4;
  $97 = $12;
  $98 = (+($97|0));
  $99 = $96 + $98;
  $13 = $99;
  $100 = $12;
  $101 = $13;
  $102 = $5;
  $103 = $6;
  $104 = (_lngamma_sgn_sing($100,$101,$102,$103)|0);
  $3 = $104;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 return (0)|0;
}
function _gsl_sf_gamma_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 24|0;
 $10 = sp + 8|0;
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $14 = $3;
 $15 = $14 < 0.5;
 $16 = $3;
 if (!($15)) {
  $92 = $4;
  $93 = (_gamma_xgthalf($16,$92)|0);
  $2 = $93;
  $94 = $2;
  STACKTOP = sp;return ($94|0);
 }
 $17 = $16 + 0.5;
 $18 = (+Math_floor((+$17)));
 $19 = (~~(($18)));
 $5 = $19;
 $20 = $3;
 $21 = $5;
 $22 = (+($21|0));
 $23 = $20 - $22;
 $6 = $23;
 $24 = $5;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 $27 = $26 ^ 1;
 $28 = $27 ? 1.0 : -1.0;
 $7 = $28;
 $29 = $7;
 $30 = $6;
 $31 = 3.1415926535897931 * $30;
 $32 = (+Math_sin((+$31)));
 $33 = $29 * $32;
 $34 = $33 / 3.1415926535897931;
 $8 = $34;
 $35 = $8;
 $36 = $35 == 0.0;
 if ($36) {
  $37 = $4;
  HEAPF64[$37>>3] = nan;
  $38 = $4;
  $39 = ((($38)) + 8|0);
  HEAPF64[$39>>3] = nan;
  _gsl_error(83774,83156,1264,1);
  $2 = 1;
  $94 = $2;
  STACKTOP = sp;return ($94|0);
 }
 $40 = $3;
 $41 = $40 > -169.0;
 $42 = $3;
 if ($41) {
  $43 = 1.0 - $42;
  (_gamma_xgthalf($43,$9)|0);
  $44 = $8;
  $45 = (+Math_abs((+$44)));
  $46 = +HEAPF64[$9>>3];
  $47 = $45 * $46;
  $48 = $47 * 2.2250738585072014E-308;
  $49 = $48 < 1.0;
  if ($49) {
   $50 = $8;
   $51 = +HEAPF64[$9>>3];
   $52 = $50 * $51;
   $53 = 1.0 / $52;
   $54 = $4;
   HEAPF64[$54>>3] = $53;
   $55 = ((($9)) + 8|0);
   $56 = +HEAPF64[$55>>3];
   $57 = +HEAPF64[$9>>3];
   $58 = $56 / $57;
   $59 = (+Math_abs((+$58)));
   $60 = $4;
   $61 = +HEAPF64[$60>>3];
   $62 = (+Math_abs((+$61)));
   $63 = $59 * $62;
   $64 = $4;
   $65 = ((($64)) + 8|0);
   HEAPF64[$65>>3] = $63;
   $66 = $4;
   $67 = +HEAPF64[$66>>3];
   $68 = (+Math_abs((+$67)));
   $69 = 4.4408920985006262E-16 * $68;
   $70 = $4;
   $71 = ((($70)) + 8|0);
   $72 = +HEAPF64[$71>>3];
   $73 = $72 + $69;
   HEAPF64[$71>>3] = $73;
   $2 = 0;
   $94 = $2;
   STACKTOP = sp;return ($94|0);
  } else {
   $74 = $4;
   HEAPF64[$74>>3] = 0.0;
   $75 = $4;
   $76 = ((($75)) + 8|0);
   HEAPF64[$76>>3] = 2.2250738585072014E-308;
   _gsl_error(83794,83156,1276,15);
   $2 = 15;
   $94 = $2;
   STACKTOP = sp;return ($94|0);
  }
 } else {
  $77 = (_gsl_sf_lngamma_sgn_e($42,$10,$11)|0);
  $12 = $77;
  $78 = +HEAPF64[$10>>3];
  $79 = ((($10)) + 8|0);
  $80 = +HEAPF64[$79>>3];
  $81 = +HEAPF64[$11>>3];
  $82 = $4;
  $83 = (_gsl_sf_exp_mult_err_e($78,$80,$81,0.0,$82)|0);
  $13 = $83;
  $84 = $13;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = $13;
   $91 = $86;
  } else {
   $87 = $12;
   $88 = ($87|0)!=(0);
   $89 = $12;
   $90 = $88 ? $89 : 0;
   $91 = $90;
  }
  $2 = $91;
  $94 = $2;
  STACKTOP = sp;return ($94|0);
 }
 return (0)|0;
}
function _gamma_xgthalf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $23 = sp + 80|0;
 $26 = sp + 48|0;
 $31 = sp;
 $3 = $0;
 $4 = $1;
 $33 = $3;
 $34 = $33 == 0.5;
 if ($34) {
  $35 = $4;
  HEAPF64[$35>>3] = 1.7724538509055161;
  $36 = $4;
  $37 = +HEAPF64[$36>>3];
  $38 = 2.2204460492503131E-16 * $37;
  $39 = $4;
  $40 = ((($39)) + 8|0);
  HEAPF64[$40>>3] = $38;
  $2 = 0;
  $199 = $2;
  STACKTOP = sp;return ($199|0);
 }
 $41 = $3;
 $42 = $41 <= 171.0;
 if ($42) {
  $43 = $3;
  $44 = $3;
  $45 = (+Math_floor((+$44)));
  $46 = $43 == $45;
  if ($46) {
   $47 = $3;
   $48 = (+Math_floor((+$47)));
   $49 = (~~(($48)));
   $5 = $49;
   $50 = $5;
   $51 = (($50) - 1)|0;
   $52 = (33888 + (($51*24)|0)|0);
   $53 = ((($52)) + 8|0);
   $54 = +HEAPF64[$53>>3];
   $55 = $4;
   HEAPF64[$55>>3] = $54;
   $56 = $4;
   $57 = +HEAPF64[$56>>3];
   $58 = 2.2204460492503131E-16 * $57;
   $59 = $4;
   $60 = ((($59)) + 8|0);
   HEAPF64[$60>>3] = $58;
   $2 = 0;
   $199 = $2;
   STACKTOP = sp;return ($199|0);
  }
 }
 $61 = $3;
 $62 = $61 - 1.0;
 $63 = (+Math_abs((+$62)));
 $64 = $63 < 0.01;
 $65 = $3;
 if ($64) {
  $66 = $65 - 1.0;
  $6 = $66;
  $7 = 0.42278433509846713;
  $8 = -0.010944004672027444;
  $9 = 0.092520923919113707;
  $10 = -0.018271913165599812;
  $11 = 0.018004931096854797;
  $12 = -0.0068508853787238068;
  $13 = 0.003998239557568466;
  $67 = $3;
  $68 = 1.0 / $67;
  $69 = $6;
  $70 = $6;
  $71 = $6;
  $72 = $6;
  $73 = $6;
  $74 = $6;
  $75 = $6;
  $76 = $75 * 0.003998239557568466;
  $77 = -0.0068508853787238068 + $76;
  $78 = $74 * $77;
  $79 = 0.018004931096854797 + $78;
  $80 = $73 * $79;
  $81 = -0.018271913165599812 + $80;
  $82 = $72 * $81;
  $83 = 0.092520923919113707 + $82;
  $84 = $71 * $83;
  $85 = -0.010944004672027444 + $84;
  $86 = $70 * $85;
  $87 = 0.42278433509846713 + $86;
  $88 = $69 * $87;
  $89 = $68 + $88;
  $90 = $4;
  HEAPF64[$90>>3] = $89;
  $91 = $4;
  $92 = ((($91)) + 8|0);
  HEAPF64[$92>>3] = 2.2204460492503131E-16;
  $2 = 0;
  $199 = $2;
  STACKTOP = sp;return ($199|0);
 }
 $93 = $65 - 2.0;
 $94 = (+Math_abs((+$93)));
 $95 = $94 < 0.01;
 $96 = $3;
 if ($95) {
  $97 = $96 - 2.0;
  $14 = $97;
  $15 = 0.42278433509846713;
  $16 = 0.41184033042643969;
  $17 = 0.081576919247086266;
  $18 = 0.074249010753513894;
  $19 = -2.6698206874501475E-4;
  $20 = 0.011154045718130992;
  $21 = -0.0028526458211553408;
  $22 = 0.0021039333406973879;
  $98 = $14;
  $99 = $14;
  $100 = $14;
  $101 = $14;
  $102 = $14;
  $103 = $14;
  $104 = $14;
  $105 = $14;
  $106 = $105 * 0.0021039333406973879;
  $107 = -0.0028526458211553408 + $106;
  $108 = $104 * $107;
  $109 = 0.011154045718130992 + $108;
  $110 = $103 * $109;
  $111 = -2.6698206874501475E-4 + $110;
  $112 = $102 * $111;
  $113 = 0.074249010753513894 + $112;
  $114 = $101 * $113;
  $115 = 0.081576919247086266 + $114;
  $116 = $100 * $115;
  $117 = 0.41184033042643969 + $116;
  $118 = $99 * $117;
  $119 = 0.42278433509846713 + $118;
  $120 = $98 * $119;
  $121 = 1.0 + $120;
  $122 = $4;
  HEAPF64[$122>>3] = $121;
  $123 = $4;
  $124 = ((($123)) + 8|0);
  HEAPF64[$124>>3] = 2.2204460492503131E-16;
  $2 = 0;
  $199 = $2;
  STACKTOP = sp;return ($199|0);
 }
 $125 = $96 < 5.0;
 $126 = $3;
 if ($125) {
  (_lngamma_lanczos($126,$23)|0);
  $127 = +HEAPF64[$23>>3];
  $128 = (+Math_exp((+$127)));
  $129 = $4;
  HEAPF64[$129>>3] = $128;
  $130 = $4;
  $131 = +HEAPF64[$130>>3];
  $132 = ((($23)) + 8|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $133 + 4.4408920985006262E-16;
  $135 = $131 * $134;
  $136 = $4;
  $137 = ((($136)) + 8|0);
  HEAPF64[$137>>3] = $135;
  $2 = 0;
  $199 = $2;
  STACKTOP = sp;return ($199|0);
 }
 $138 = $126 < 10.0;
 if ($138) {
  $24 = 5040.0;
  $139 = $3;
  $140 = 2.0 * $139;
  $141 = $140 - 15.0;
  $142 = $141 / 5.0;
  $25 = $142;
  $143 = $25;
  (_cheb_eval_e_3874(70944,$143,$26)|0);
  $144 = +HEAPF64[$26>>3];
  $145 = (+Math_exp((+$144)));
  $146 = $145 * 5040.0;
  $147 = $4;
  HEAPF64[$147>>3] = $146;
  $148 = $4;
  $149 = +HEAPF64[$148>>3];
  $150 = ((($26)) + 8|0);
  $151 = +HEAPF64[$150>>3];
  $152 = $149 * $151;
  $153 = $4;
  $154 = ((($153)) + 8|0);
  HEAPF64[$154>>3] = $152;
  $155 = $4;
  $156 = +HEAPF64[$155>>3];
  $157 = 4.4408920985006262E-16 * $156;
  $158 = $4;
  $159 = ((($158)) + 8|0);
  $160 = +HEAPF64[$159>>3];
  $161 = $160 + $157;
  HEAPF64[$159>>3] = $161;
  $2 = 0;
  $199 = $2;
  STACKTOP = sp;return ($199|0);
 }
 $162 = $3;
 $163 = $162 < 171.0;
 if ($163) {
  $164 = $3;
  $165 = $3;
  $166 = 0.5 * $165;
  $167 = (+Math_pow((+$164),(+$166)));
  $27 = $167;
  $168 = $3;
  $169 = - $168;
  $170 = (+Math_exp((+$169)));
  $28 = $170;
  $171 = $27;
  $172 = $28;
  $173 = $171 * $172;
  $174 = $27;
  $175 = $173 * $174;
  $29 = $175;
  $176 = $29;
  $177 = 2.5066282746310007 * $176;
  $178 = $3;
  $179 = (+Math_sqrt((+$178)));
  $180 = $177 / $179;
  $30 = $180;
  $181 = $3;
  $182 = (_gammastar_ser($181,$31)|0);
  $32 = $182;
  $183 = $30;
  $184 = +HEAPF64[$31>>3];
  $185 = $183 * $184;
  $186 = $4;
  HEAPF64[$186>>3] = $185;
  $187 = $3;
  $188 = $187 + 2.5;
  $189 = $188 * 2.2204460492503131E-16;
  $190 = $4;
  $191 = +HEAPF64[$190>>3];
  $192 = $189 * $191;
  $193 = $4;
  $194 = ((($193)) + 8|0);
  HEAPF64[$194>>3] = $192;
  $195 = $32;
  $2 = $195;
  $199 = $2;
  STACKTOP = sp;return ($199|0);
 } else {
  $196 = $4;
  HEAPF64[$196>>3] = inf;
  $197 = $4;
  $198 = ((($197)) + 8|0);
  HEAPF64[$198>>3] = inf;
  _gsl_error(83804,83156,1106,16);
  $2 = 16;
  $199 = $2;
  STACKTOP = sp;return ($199|0);
 }
 return (0)|0;
}
function _cheb_eval_e_3874($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gammastar_ser($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = $0;
 $3 = $1;
 $14 = $2;
 $15 = $2;
 $16 = $14 * $15;
 $17 = 1.0 / $16;
 $4 = $17;
 $5 = 0.083333333333333329;
 $6 = -0.0027777777777777779;
 $7 = 7.9365079365079365E-4;
 $8 = -5.9523809523809529E-4;
 $9 = 8.4175084175084171E-4;
 $10 = -0.0019175269175269176;
 $11 = 0.00641025641025641;
 $12 = -0.029550653594771242;
 $18 = $4;
 $19 = $4;
 $20 = $4;
 $21 = $4;
 $22 = $4;
 $23 = $4;
 $24 = $4;
 $25 = $24 * -0.029550653594771242;
 $26 = 0.00641025641025641 + $25;
 $27 = $23 * $26;
 $28 = -0.0019175269175269176 + $27;
 $29 = $22 * $28;
 $30 = 8.4175084175084171E-4 + $29;
 $31 = $21 * $30;
 $32 = -5.9523809523809529E-4 + $31;
 $33 = $20 * $32;
 $34 = 7.9365079365079365E-4 + $33;
 $35 = $19 * $34;
 $36 = -0.0027777777777777779 + $35;
 $37 = $18 * $36;
 $38 = 0.083333333333333329 + $37;
 $13 = $38;
 $39 = $13;
 $40 = $2;
 $41 = $39 / $40;
 $42 = (+Math_exp((+$41)));
 $43 = $3;
 HEAPF64[$43>>3] = $42;
 $44 = $3;
 $45 = +HEAPF64[$44>>3];
 $46 = 4.4408920985006262E-16 * $45;
 $47 = $13;
 $48 = $2;
 $49 = $47 / $48;
 $50 = (+_GSL_MAX_DBL(1.0,$49));
 $51 = $46 * $50;
 $52 = $3;
 $53 = ((($52)) + 8|0);
 HEAPF64[$53>>3] = $51;
 STACKTOP = sp;return 0;
}
function _gsl_sf_gammastar_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0.0, $16 = 0.0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0;
 var $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp + 72|0;
 $14 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $16 = $3;
 $17 = $16 <= 0.0;
 if ($17) {
  $18 = $4;
  HEAPF64[$18>>3] = nan;
  $19 = $4;
  $20 = ((($19)) + 8|0);
  HEAPF64[$20>>3] = nan;
  _gsl_error(83774,83156,1304,1);
  $2 = 1;
  $132 = $2;
  STACKTOP = sp;return ($132|0);
 }
 $21 = $3;
 $22 = $21 < 0.5;
 $23 = $3;
 if ($22) {
  $24 = (_gsl_sf_lngamma_e($23,$5)|0);
  $6 = $24;
  $25 = $3;
  $26 = (+Math_log((+$25)));
  $7 = $26;
  $8 = 0.91893853320467266;
  $27 = +HEAPF64[$5>>3];
  $28 = $3;
  $29 = $28 - 0.5;
  $30 = $7;
  $31 = $29 * $30;
  $32 = $27 - $31;
  $33 = $3;
  $34 = $32 + $33;
  $35 = $34 - 0.91893853320467266;
  $9 = $35;
  $36 = ((($5)) + 8|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $3;
  $39 = $38 + 0.5;
  $40 = $7;
  $41 = (+Math_abs((+$40)));
  $42 = $39 * $41;
  $43 = $42 + 0.91893853320467266;
  $44 = 4.4408920985006262E-16 * $43;
  $45 = $37 + $44;
  $10 = $45;
  $46 = $9;
  $47 = $10;
  $48 = $4;
  $49 = (_gsl_sf_exp_err_e($46,$47,$48)|0);
  $11 = $49;
  $50 = $6;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = $6;
   $57 = $52;
  } else {
   $53 = $11;
   $54 = ($53|0)!=(0);
   $55 = $11;
   $56 = $54 ? $55 : 0;
   $57 = $56;
  }
  $2 = $57;
  $132 = $2;
  STACKTOP = sp;return ($132|0);
 }
 $58 = $23 < 2.0;
 $59 = $3;
 if ($58) {
  $60 = $59 - 0.5;
  $61 = 1.3333333333333333 * $60;
  $62 = $61 - 1.0;
  $12 = $62;
  $63 = $12;
  $64 = $4;
  $65 = (_cheb_eval_e_3874(70976,$63,$64)|0);
  $2 = $65;
  $132 = $2;
  STACKTOP = sp;return ($132|0);
 }
 $66 = $59 < 10.0;
 $67 = $3;
 if ($66) {
  $68 = $67 - 2.0;
  $69 = 0.25 * $68;
  $70 = $69 - 1.0;
  $13 = $70;
  $71 = $13;
  (_cheb_eval_e_3874(71008,$71,$14)|0);
  $72 = +HEAPF64[$14>>3];
  $73 = $3;
  $74 = $3;
  $75 = $73 * $74;
  $76 = $72 / $75;
  $77 = $76 + 1.0;
  $78 = $3;
  $79 = 12.0 * $78;
  $80 = 1.0 / $79;
  $81 = $77 + $80;
  $82 = $4;
  HEAPF64[$82>>3] = $81;
  $83 = ((($14)) + 8|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $3;
  $86 = $3;
  $87 = $85 * $86;
  $88 = $84 / $87;
  $89 = $4;
  $90 = ((($89)) + 8|0);
  HEAPF64[$90>>3] = $88;
  $91 = $4;
  $92 = +HEAPF64[$91>>3];
  $93 = (+Math_abs((+$92)));
  $94 = 4.4408920985006262E-16 * $93;
  $95 = $4;
  $96 = ((($95)) + 8|0);
  $97 = +HEAPF64[$96>>3];
  $98 = $97 + $94;
  HEAPF64[$96>>3] = $98;
  $2 = 0;
  $132 = $2;
  STACKTOP = sp;return ($132|0);
 }
 $99 = $67 < 8192.0;
 $100 = $3;
 if ($99) {
  $101 = $4;
  $102 = (_gammastar_ser($100,$101)|0);
  $2 = $102;
  $132 = $2;
  STACKTOP = sp;return ($132|0);
 }
 $103 = $100 < 4503599627370496.0;
 if ($103) {
  $104 = $3;
  $105 = 1.0 / $104;
  $15 = $105;
  $106 = $15;
  $107 = $106 / 12.0;
  $108 = $15;
  $109 = $108 / 24.0;
  $110 = $15;
  $111 = $15;
  $112 = 0.066087962962962959 * $111;
  $113 = 0.77222222222222225 + $112;
  $114 = $110 * $113;
  $115 = 1.0 - $114;
  $116 = $109 * $115;
  $117 = 1.0 + $116;
  $118 = $107 * $117;
  $119 = 1.0 + $118;
  $120 = $4;
  HEAPF64[$120>>3] = $119;
  $121 = $4;
  $122 = +HEAPF64[$121>>3];
  $123 = (+Math_abs((+$122)));
  $124 = 4.4408920985006262E-16 * $123;
  $125 = $4;
  $126 = ((($125)) + 8|0);
  HEAPF64[$126>>3] = $124;
  $2 = 0;
  $132 = $2;
  STACKTOP = sp;return ($132|0);
 } else {
  $127 = $4;
  HEAPF64[$127>>3] = 1.0;
  $128 = $3;
  $129 = 1.0 / $128;
  $130 = $4;
  $131 = ((($130)) + 8|0);
  HEAPF64[$131>>3] = $129;
  $2 = 0;
  $132 = $2;
  STACKTOP = sp;return ($132|0);
 }
 return (0)|0;
}
function _gsl_sf_gammainv_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = $10 <= 0.0;
 if ($11) {
  $12 = $3;
  $13 = $3;
  $14 = (+Math_floor((+$13)));
  $15 = $12 == $14;
  if ($15) {
   $16 = $4;
   HEAPF64[$16>>3] = 0.0;
   $17 = $4;
   $18 = ((($17)) + 8|0);
   HEAPF64[$18>>3] = 0.0;
   $2 = 0;
   $73 = $2;
   STACKTOP = sp;return ($73|0);
  }
 }
 $19 = $3;
 $20 = $19 < 0.5;
 $21 = $3;
 if ($20) {
  $22 = (_gsl_sf_lngamma_sgn_e($21,$5,$6)|0);
  $7 = $22;
  $23 = $7;
  $24 = ($23|0)==(1);
  if ($24) {
   $25 = $4;
   HEAPF64[$25>>3] = 0.0;
   $26 = $4;
   $27 = ((($26)) + 8|0);
   HEAPF64[$27>>3] = 0.0;
   $2 = 0;
   $73 = $2;
   STACKTOP = sp;return ($73|0);
  }
  $28 = $7;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $4;
   HEAPF64[$30>>3] = 0.0;
   $31 = $4;
   $32 = ((($31)) + 8|0);
   HEAPF64[$32>>3] = 0.0;
   $33 = $7;
   $2 = $33;
   $73 = $2;
   STACKTOP = sp;return ($73|0);
  } else {
   $34 = +HEAPF64[$5>>3];
   $35 = - $34;
   $36 = ((($5)) + 8|0);
   $37 = +HEAPF64[$36>>3];
   $38 = +HEAPF64[$6>>3];
   $39 = $4;
   $40 = (_gsl_sf_exp_mult_err_e($35,$37,$38,0.0,$39)|0);
   $2 = $40;
   $73 = $2;
   STACKTOP = sp;return ($73|0);
  }
 } else {
  $41 = (_gamma_xgthalf($21,$8)|0);
  $9 = $41;
  $42 = $9;
  $43 = ($42|0)==(16);
  if ($43) {
   $44 = $4;
   HEAPF64[$44>>3] = 0.0;
   $45 = $4;
   $46 = ((($45)) + 8|0);
   HEAPF64[$46>>3] = 2.2250738585072014E-308;
   _gsl_error(83794,83156,1379,15);
   $2 = 15;
   $73 = $2;
   STACKTOP = sp;return ($73|0);
  }
  $47 = +HEAPF64[$8>>3];
  $48 = 1.0 / $47;
  $49 = $4;
  HEAPF64[$49>>3] = $48;
  $50 = ((($8)) + 8|0);
  $51 = +HEAPF64[$50>>3];
  $52 = +HEAPF64[$8>>3];
  $53 = $51 / $52;
  $54 = (+Math_abs((+$53)));
  $55 = $4;
  $56 = +HEAPF64[$55>>3];
  $57 = (+Math_abs((+$56)));
  $58 = $54 * $57;
  $59 = $4;
  $60 = ((($59)) + 8|0);
  HEAPF64[$60>>3] = $58;
  $61 = $4;
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = 4.4408920985006262E-16 * $63;
  $65 = $4;
  $66 = ((($65)) + 8|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $67 + $64;
  HEAPF64[$66>>3] = $68;
  $69 = $4;
  $70 = +HEAPF64[$69>>3];
  $71 = (+Math_abs((+$70)));
  $72 = $71 < 2.2250738585072014E-308;
  if ($72) {
   _gsl_error(83794,83156,1385,15);
   $2 = 15;
   $73 = $2;
   STACKTOP = sp;return ($73|0);
  } else {
   $2 = 0;
   $73 = $2;
   STACKTOP = sp;return ($73|0);
  }
 }
 return (0)|0;
}
function _gsl_sf_taylorcoeff_e($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0;
 var $84 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = $11 < 0.0;
 $13 = $4;
 $14 = ($13|0)<(0);
 $or$cond = $12 | $14;
 if ($or$cond) {
  $15 = $6;
  HEAPF64[$15>>3] = nan;
  $16 = $6;
  $17 = ((($16)) + 8|0);
  HEAPF64[$17>>3] = nan;
  _gsl_error(83774,83156,1432,1);
  $3 = 1;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 $18 = $4;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = $6;
  HEAPF64[$20>>3] = 1.0;
  $21 = $6;
  $22 = ((($21)) + 8|0);
  HEAPF64[$22>>3] = 0.0;
  $3 = 0;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 $23 = $4;
 $24 = ($23|0)==(1);
 $25 = $5;
 if ($24) {
  $26 = $6;
  HEAPF64[$26>>3] = $25;
  $27 = $6;
  $28 = ((($27)) + 8|0);
  HEAPF64[$28>>3] = 0.0;
  $3 = 0;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 $29 = $25 == 0.0;
 if ($29) {
  $30 = $6;
  HEAPF64[$30>>3] = 0.0;
  $31 = $6;
  $32 = ((($31)) + 8|0);
  HEAPF64[$32>>3] = 0.0;
  $3 = 0;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 $7 = 1.8378770664093453;
 $33 = $4;
 $34 = (+($33|0));
 $35 = $5;
 $36 = (+Math_log((+$35)));
 $37 = $36 + 1.0;
 $38 = $34 * $37;
 $39 = $38 + 1.0;
 $40 = $4;
 $41 = (+($40|0));
 $42 = $41 + 0.5;
 $43 = $4;
 $44 = (+($43|0));
 $45 = $44 + 1.0;
 $46 = (+Math_log((+$45)));
 $47 = $42 * $46;
 $48 = $39 - $47;
 $49 = $48 + 0.91893853320467266;
 $8 = $49;
 $50 = $8;
 $51 = $50 < -707.39641853226408;
 if ($51) {
  $52 = $6;
  HEAPF64[$52>>3] = 0.0;
  $53 = $6;
  $54 = ((($53)) + 8|0);
  HEAPF64[$54>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83156,1454,15);
  $3 = 15;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 $55 = $8;
 $56 = $55 > 708.78271289338397;
 if ($56) {
  $57 = $6;
  HEAPF64[$57>>3] = inf;
  $58 = $6;
  $59 = ((($58)) + 8|0);
  HEAPF64[$59>>3] = inf;
  _gsl_error(83804,83156,1457,16);
  $3 = 16;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 $9 = 1.0;
 $10 = 1;
 while(1) {
  $60 = $10;
  $61 = $4;
  $62 = ($60|0)<=($61|0);
  if (!($62)) {
   break;
  }
  $63 = $5;
  $64 = $10;
  $65 = (+($64|0));
  $66 = $63 / $65;
  $67 = $9;
  $68 = $67 * $66;
  $9 = $68;
  $69 = $10;
  $70 = (($69) + 1)|0;
  $10 = $70;
 }
 $71 = $9;
 $72 = $6;
 HEAPF64[$72>>3] = $71;
 $73 = $4;
 $74 = (+($73|0));
 $75 = $74 * 2.2204460492503131E-16;
 $76 = $9;
 $77 = $75 * $76;
 $78 = $6;
 $79 = ((($78)) + 8|0);
 HEAPF64[$79>>3] = $77;
 $80 = $6;
 $81 = +HEAPF64[$80>>3];
 $82 = (+Math_abs((+$81)));
 $83 = $82 < 2.2250738585072014E-308;
 if ($83) {
  _gsl_error(83794,83156,1467,15);
  $3 = 15;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 } else {
  $3 = 0;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 return (0)|0;
}
function _gsl_sf_lnfact($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $2 = $0;
 $5 = $2;
 $6 = (_gsl_sf_lnfact_e($5,$3)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $4;
  _gsl_error(83201,83156,1639,$9);
  $10 = +HEAPF64[$3>>3];
  $1 = $10;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $11 = +HEAPF64[$3>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _gsl_sf_gammainv($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $2 = $0;
 $5 = $2;
 $6 = (_gsl_sf_gammainv_e($5,$3)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $4;
  _gsl_error(83229,83156,1669,$9);
  $10 = +HEAPF64[$3>>3];
  $1 = $10;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $11 = +HEAPF64[$3>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _gamma_inc_P_series($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0.0, $18 = 0.0;
 var $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = sp + 48|0;
 $10 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 10000;
 $18 = $4;
 $19 = $5;
 $20 = (_gamma_inc_D($18,$19,$8)|0);
 $9 = $20;
 $21 = $5;
 $22 = $4;
 $23 = 0.99499999999999999 * $22;
 $24 = $21 > $23;
 $25 = $4;
 $26 = $25 > 1.0E+5;
 $or$cond = $24 & $26;
 if ($or$cond) {
  $27 = $4;
  $28 = $5;
  $29 = (_gsl_sf_exprel_n_CF_e($27,$28,$10)|0);
  $11 = $29;
  $30 = +HEAPF64[$8>>3];
  $31 = +HEAPF64[$10>>3];
  $32 = $30 * $31;
  $33 = $6;
  HEAPF64[$33>>3] = $32;
  $34 = +HEAPF64[$8>>3];
  $35 = ((($10)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $34 * $36;
  $38 = (+Math_abs((+$37)));
  $39 = ((($8)) + 8|0);
  $40 = +HEAPF64[$39>>3];
  $41 = +HEAPF64[$10>>3];
  $42 = $40 * $41;
  $43 = (+Math_abs((+$42)));
  $44 = $38 + $43;
  $45 = $6;
  $46 = ((($45)) + 8|0);
  HEAPF64[$46>>3] = $44;
  $47 = $11;
  $3 = $47;
  $150 = $3;
  STACKTOP = sp;return ($150|0);
 }
 $48 = $5;
 $49 = $4;
 $50 = $49 + 1.0E+4;
 $51 = $48 > $50;
 if ($51) {
  _gsl_error(83322,83259,107,11);
  $3 = 11;
  $150 = $3;
  STACKTOP = sp;return ($150|0);
 }
 $12 = 1.0;
 $13 = 1.0;
 $52 = $5;
 $53 = $4;
 $54 = $52 > $53;
 if ($54) {
  $55 = $5;
  $56 = $4;
  $57 = $55 - $56;
  $59 = $57;
 } else {
  $59 = 0.0;
 }
 $58 = (~~(($59)));
 $16 = $58;
 $15 = 1;
 while(1) {
  $60 = $15;
  $61 = $16;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $5;
  $64 = $4;
  $65 = $15;
  $66 = (+($65|0));
  $67 = $64 + $66;
  $68 = $63 / $67;
  $69 = $13;
  $70 = $69 * $68;
  $13 = $70;
  $71 = $13;
  $72 = $12;
  $73 = $72 + $71;
  $12 = $73;
  $74 = $15;
  $75 = (($74) + 1)|0;
  $15 = $75;
 }
 while(1) {
  $76 = $15;
  $77 = ($76|0)<(10000);
  if (!($77)) {
   break;
  }
  $78 = $5;
  $79 = $4;
  $80 = $15;
  $81 = (+($80|0));
  $82 = $79 + $81;
  $83 = $78 / $82;
  $84 = $13;
  $85 = $84 * $83;
  $13 = $85;
  $86 = $13;
  $87 = $12;
  $88 = $87 + $86;
  $12 = $88;
  $89 = $13;
  $90 = $12;
  $91 = $89 / $90;
  $92 = (+Math_abs((+$91)));
  $93 = $92 < 2.2204460492503131E-16;
  if ($93) {
   break;
  }
  $94 = $15;
  $95 = (($94) + 1)|0;
  $15 = $95;
 }
 $96 = $5;
 $97 = $4;
 $98 = $15;
 $99 = (+($98|0));
 $100 = $97 + $99;
 $101 = $96 / $100;
 $102 = $13;
 $103 = $101 * $102;
 $17 = $103;
 $104 = $17;
 $105 = $5;
 $106 = $4;
 $107 = $15;
 $108 = (+($107|0));
 $109 = $106 + $108;
 $110 = $109 + 1.0;
 $111 = $105 / $110;
 $112 = 1.0 - $111;
 $113 = $104 / $112;
 $14 = $113;
 $114 = +HEAPF64[$8>>3];
 $115 = $12;
 $116 = $114 * $115;
 $117 = $6;
 HEAPF64[$117>>3] = $116;
 $118 = ((($8)) + 8|0);
 $119 = +HEAPF64[$118>>3];
 $120 = $12;
 $121 = (+Math_abs((+$120)));
 $122 = $119 * $121;
 $123 = +HEAPF64[$8>>3];
 $124 = $14;
 $125 = $123 * $124;
 $126 = (+Math_abs((+$125)));
 $127 = $122 + $126;
 $128 = $6;
 $129 = ((($128)) + 8|0);
 HEAPF64[$129>>3] = $127;
 $130 = $15;
 $131 = (+($130|0));
 $132 = 1.0 + $131;
 $133 = $132 * 2.2204460492503131E-16;
 $134 = $6;
 $135 = +HEAPF64[$134>>3];
 $136 = (+Math_abs((+$135)));
 $137 = $133 * $136;
 $138 = $6;
 $139 = ((($138)) + 8|0);
 $140 = +HEAPF64[$139>>3];
 $141 = $140 + $137;
 HEAPF64[$139>>3] = $141;
 $142 = $15;
 $143 = ($142|0)==(10000);
 if ($143) {
  $144 = $14;
  $145 = $12;
  $146 = $144 / $145;
  $147 = (+Math_abs((+$146)));
  $148 = $147 > 1.4901161193847656E-8;
  if ($148) {
   _gsl_error(83360,83259,146,11);
   $3 = 11;
   $150 = $3;
   STACKTOP = sp;return ($150|0);
  }
 }
 $149 = $9;
 $3 = $149;
 $150 = $3;
 STACKTOP = sp;return ($150|0);
}
function _gamma_inc_Q_asymp_unif($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0, $16 = 0.0, $17 = 0.0;
 var $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $8 = sp + 64|0;
 $11 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $17 = $3;
 $18 = (+Math_sqrt((+$17)));
 $6 = $18;
 $19 = $4;
 $20 = $3;
 $21 = $19 - $20;
 $22 = $3;
 $23 = $21 / $22;
 $7 = $23;
 $24 = $7;
 $25 = (_gsl_sf_log_1plusx_mx_e($24,$8)|0);
 $9 = $25;
 $26 = $7;
 $27 = $26 >= 0.0;
 $28 = $27 ? 1 : -1;
 $29 = (+($28|0));
 $30 = +HEAPF64[$8>>3];
 $31 = -2.0 * $30;
 $32 = (+Math_sqrt((+$31)));
 $33 = $29 * $32;
 $10 = $33;
 $34 = $10;
 $35 = $6;
 $36 = $34 * $35;
 $37 = $36 / 1.4142135623730951;
 (_gsl_sf_erfc_e($37,$11)|0);
 $38 = $7;
 $39 = (+Math_abs((+$38)));
 $40 = $39 < 7.4009597974140505E-4;
 if ($40) {
  $41 = $7;
  $42 = $7;
  $43 = $7;
  $44 = $7;
  $45 = $44 * 589.0;
  $46 = $45 / 30240.0;
  $47 = 0.027237654320987653 - $46;
  $48 = $43 * $47;
  $49 = 0.042592592592592592 - $48;
  $50 = $42 * $49;
  $51 = 0.083333333333333329 - $50;
  $52 = $41 * $51;
  $53 = -0.33333333333333331 + $52;
  $13 = $53;
  $54 = $7;
  $55 = $54 / 288.0;
  $56 = -0.0018518518518518519 - $55;
  $14 = $56;
 } else {
  $57 = +HEAPF64[$8>>3];
  $58 = -2.0 * $57;
  $59 = $7;
  $60 = $7;
  $61 = $59 * $60;
  $62 = $58 / $61;
  $63 = (+Math_sqrt((+$62)));
  $15 = $63;
  $64 = $4;
  $65 = $3;
  $66 = $64 / $65;
  $16 = $66;
  $67 = $15;
  $68 = 1.0 / $67;
  $69 = 1.0 - $68;
  $70 = $7;
  $71 = $69 / $70;
  $13 = $71;
  $72 = $10;
  $73 = $10;
  $74 = $72 * $73;
  $75 = $10;
  $76 = $74 * $75;
  $77 = $16;
  $78 = $16;
  $79 = $77 * $78;
  $80 = $16;
  $81 = 10.0 * $80;
  $82 = $79 + $81;
  $83 = $82 + 1.0;
  $84 = $76 * $83;
  $85 = $7;
  $86 = 12.0 * $85;
  $87 = $7;
  $88 = $86 * $87;
  $89 = $7;
  $90 = $88 * $89;
  $91 = $84 - $90;
  $92 = - $91;
  $93 = $10;
  $94 = 12.0 * $93;
  $95 = $10;
  $96 = $94 * $95;
  $97 = $10;
  $98 = $96 * $97;
  $99 = $7;
  $100 = $98 * $99;
  $101 = $7;
  $102 = $100 * $101;
  $103 = $7;
  $104 = $102 * $103;
  $105 = $92 / $104;
  $14 = $105;
 }
 $106 = $3;
 $107 = -0.5 * $106;
 $108 = $10;
 $109 = $107 * $108;
 $110 = $10;
 $111 = $109 * $110;
 $112 = (+Math_exp((+$111)));
 $113 = $6;
 $114 = 2.5066282746310007 * $113;
 $115 = $112 / $114;
 $116 = $13;
 $117 = $14;
 $118 = $3;
 $119 = $117 / $118;
 $120 = $116 + $119;
 $121 = $115 * $120;
 $12 = $121;
 $122 = +HEAPF64[$11>>3];
 $123 = 0.5 * $122;
 $124 = $12;
 $125 = $123 + $124;
 $126 = $5;
 HEAPF64[$126>>3] = $125;
 $127 = $12;
 $128 = $127 * 0.5;
 $129 = $3;
 $130 = $128 * $129;
 $131 = $10;
 $132 = $130 * $131;
 $133 = $10;
 $134 = $132 * $133;
 $135 = (+Math_abs((+$134)));
 $136 = 2.2204460492503131E-16 * $135;
 $137 = ((($11)) + 8|0);
 $138 = +HEAPF64[$137>>3];
 $139 = 0.5 * $138;
 $140 = $136 + $139;
 $141 = $5;
 $142 = ((($141)) + 8|0);
 HEAPF64[$142>>3] = $140;
 $143 = $5;
 $144 = +HEAPF64[$143>>3];
 $145 = (+Math_abs((+$144)));
 $146 = 4.4408920985006262E-16 * $145;
 $147 = $5;
 $148 = ((($147)) + 8|0);
 $149 = +HEAPF64[$148>>3];
 $150 = $149 + $146;
 HEAPF64[$148>>3] = $150;
 $151 = $9;
 STACKTOP = sp;return ($151|0);
}
function _gamma_inc_Q_CF($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = $4;
 $12 = (_gamma_inc_D($10,$11,$6)|0);
 $8 = $12;
 $13 = $3;
 $14 = $4;
 $15 = (_gamma_inc_F_CF($13,$14,$7)|0);
 $9 = $15;
 $16 = +HEAPF64[$6>>3];
 $17 = $3;
 $18 = $4;
 $19 = $17 / $18;
 $20 = $16 * $19;
 $21 = +HEAPF64[$7>>3];
 $22 = $20 * $21;
 $23 = $5;
 HEAPF64[$23>>3] = $22;
 $24 = ((($6)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $3;
 $27 = $4;
 $28 = $26 / $27;
 $29 = +HEAPF64[$7>>3];
 $30 = $28 * $29;
 $31 = (+Math_abs((+$30)));
 $32 = $25 * $31;
 $33 = +HEAPF64[$6>>3];
 $34 = $3;
 $35 = $33 * $34;
 $36 = $4;
 $37 = $35 / $36;
 $38 = ((($7)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $37 * $39;
 $41 = (+Math_abs((+$40)));
 $42 = $32 + $41;
 $43 = $5;
 $44 = ((($43)) + 8|0);
 HEAPF64[$44>>3] = $42;
 $45 = $9;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $9;
  $52 = $47;
  STACKTOP = sp;return ($52|0);
 } else {
  $48 = $8;
  $49 = ($48|0)!=(0);
  $50 = $8;
  $51 = $49 ? $50 : 0;
  $52 = $51;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function _gamma_inc_Q_large_x($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 5000;
 $14 = $4;
 $15 = $5;
 $16 = (_gamma_inc_D($14,$15,$8)|0);
 $9 = $16;
 $10 = 1.0;
 $11 = 1.0;
 $12 = 1.0;
 $13 = 1;
 while(1) {
  $17 = $13;
  $18 = ($17|0)<(5000);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $20 = $13;
  $21 = (+($20|0));
  $22 = $19 - $21;
  $23 = $5;
  $24 = $22 / $23;
  $25 = $11;
  $26 = $25 * $24;
  $11 = $26;
  $27 = $11;
  $28 = $12;
  $29 = $27 / $28;
  $30 = (+Math_abs((+$29)));
  $31 = $30 > 1.0;
  if ($31) {
   break;
  }
  $32 = $11;
  $33 = $10;
  $34 = $32 / $33;
  $35 = (+Math_abs((+$34)));
  $36 = $35 < 2.2204460492503131E-16;
  if ($36) {
   break;
  }
  $37 = $11;
  $38 = $10;
  $39 = $38 + $37;
  $10 = $39;
  $40 = $11;
  $12 = $40;
  $41 = $13;
  $42 = (($41) + 1)|0;
  $13 = $42;
 }
 $43 = +HEAPF64[$8>>3];
 $44 = $4;
 $45 = $5;
 $46 = $44 / $45;
 $47 = $43 * $46;
 $48 = $10;
 $49 = $47 * $48;
 $50 = $6;
 HEAPF64[$50>>3] = $49;
 $51 = ((($8)) + 8|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $4;
 $54 = $5;
 $55 = $53 / $54;
 $56 = $10;
 $57 = $55 * $56;
 $58 = (+Math_abs((+$57)));
 $59 = $52 * $58;
 $60 = $6;
 $61 = ((($60)) + 8|0);
 HEAPF64[$61>>3] = $59;
 $62 = $6;
 $63 = +HEAPF64[$62>>3];
 $64 = (+Math_abs((+$63)));
 $65 = 4.4408920985006262E-16 * $64;
 $66 = $6;
 $67 = ((($66)) + 8|0);
 $68 = +HEAPF64[$67>>3];
 $69 = $68 + $65;
 HEAPF64[$67>>3] = $69;
 $70 = $13;
 $71 = ($70|0)==(5000);
 if ($71) {
  _gsl_error(83271,83259,181,11);
  $3 = 11;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 } else {
  $72 = $9;
  $3 = $72;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _gamma_inc_D($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = sp + 64|0;
 $9 = sp + 48|0;
 $10 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $15 = $4;
 $16 = $15 < 10.0;
 if ($16) {
  $17 = $4;
  $18 = $17 + 1.0;
  (_gsl_sf_lngamma_e($18,$8)|0);
  $19 = $4;
  $20 = $5;
  $21 = (+Math_log((+$20)));
  $22 = $19 * $21;
  $23 = $5;
  $24 = $22 - $23;
  $25 = +HEAPF64[$8>>3];
  $26 = $24 - $25;
  $7 = $26;
  $27 = $7;
  $28 = (+Math_exp((+$27)));
  $29 = $6;
  HEAPF64[$29>>3] = $28;
  $30 = $7;
  $31 = (+Math_abs((+$30)));
  $32 = $31 + 1.0;
  $33 = 4.4408920985006262E-16 * $32;
  $34 = $6;
  $35 = +HEAPF64[$34>>3];
  $36 = (+Math_abs((+$35)));
  $37 = $33 * $36;
  $38 = $6;
  $39 = ((($38)) + 8|0);
  HEAPF64[$39>>3] = $37;
  $3 = 0;
  $122 = $3;
  STACKTOP = sp;return ($122|0);
 }
 $40 = $5;
 $41 = $4;
 $42 = 0.5 * $41;
 $43 = $40 < $42;
 $44 = $5;
 $45 = $4;
 if ($43) {
  $46 = $44 / $45;
  $12 = $46;
  $47 = $12;
  $48 = (+Math_log((+$47)));
  $13 = $48;
  $49 = $13;
  $50 = $12;
  $51 = $49 - $50;
  $52 = $51 + 1.0;
  HEAPF64[$10>>3] = $52;
  $53 = $13;
  $54 = (+Math_abs((+$53)));
  $55 = $12;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $57 + 1.0;
  $59 = $58 * 2.2204460492503131E-16;
  $60 = ((($10)) + 8|0);
  HEAPF64[$60>>3] = $59;
 } else {
  $61 = $44 - $45;
  $62 = $4;
  $63 = $61 / $62;
  $14 = $63;
  $64 = $14;
  (_gsl_sf_log_1plusx_mx_e($64,$10)|0);
  $65 = $14;
  $66 = (+Math_abs((+$65)));
  $67 = 2.2204460492503131E-16 * $66;
  $68 = ((($10)) + 8|0);
  $69 = +HEAPF64[$68>>3];
  $70 = $69 + $67;
  HEAPF64[$68>>3] = $70;
 }
 $71 = $4;
 (_gsl_sf_gammastar_e($71,$9)|0);
 $72 = $4;
 $73 = +HEAPF64[$10>>3];
 $74 = $72 * $73;
 $75 = (+Math_exp((+$74)));
 $76 = $4;
 $77 = 6.2831853071795862 * $76;
 $78 = (+Math_sqrt((+$77)));
 $79 = $75 / $78;
 $11 = $79;
 $80 = $11;
 $81 = +HEAPF64[$9>>3];
 $82 = $80 / $81;
 $83 = $6;
 HEAPF64[$83>>3] = $82;
 $84 = $4;
 $85 = +HEAPF64[$10>>3];
 $86 = $84 * $85;
 $87 = (+Math_abs((+$86)));
 $88 = $87 + 1.0;
 $89 = 4.4408920985006262E-16 * $88;
 $90 = $6;
 $91 = +HEAPF64[$90>>3];
 $92 = (+Math_abs((+$91)));
 $93 = $89 * $92;
 $94 = $6;
 $95 = ((($94)) + 8|0);
 HEAPF64[$95>>3] = $93;
 $96 = $4;
 $97 = (+Math_abs((+$96)));
 $98 = ((($10)) + 8|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $97 * $99;
 $101 = $6;
 $102 = +HEAPF64[$101>>3];
 $103 = (+Math_abs((+$102)));
 $104 = $100 * $103;
 $105 = $6;
 $106 = ((($105)) + 8|0);
 $107 = +HEAPF64[$106>>3];
 $108 = $107 + $104;
 HEAPF64[$106>>3] = $108;
 $109 = ((($9)) + 8|0);
 $110 = +HEAPF64[$109>>3];
 $111 = +HEAPF64[$9>>3];
 $112 = (+Math_abs((+$111)));
 $113 = $110 / $112;
 $114 = $6;
 $115 = +HEAPF64[$114>>3];
 $116 = (+Math_abs((+$115)));
 $117 = $113 * $116;
 $118 = $6;
 $119 = ((($118)) + 8|0);
 $120 = +HEAPF64[$119>>3];
 $121 = $120 + $117;
 HEAPF64[$119>>3] = $121;
 $3 = 0;
 $122 = $3;
 STACKTOP = sp;return ($122|0);
}
function _gamma_inc_F_CF($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0;
 var $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 5000;
 $15 = (+_gsl_pow_3(2.2204460492503131E-16));
 $8 = $15;
 $9 = 1.0;
 $16 = $8;
 $17 = 1.0 / $16;
 $10 = $17;
 $11 = 1.0;
 $12 = 2;
 while(1) {
  $18 = $12;
  $19 = ($18|0)<(5000);
  if (!($19)) {
   break;
  }
  $20 = $12;
  $21 = $20 & 1;
  $22 = ($21|0)!=(0);
  $23 = $12;
  if ($22) {
   $24 = (($23) - 1)|0;
   $25 = (+($24|0));
   $26 = 0.5 * $25;
   $27 = $5;
   $28 = $26 / $27;
   $13 = $28;
  } else {
   $29 = (+($23|0));
   $30 = 0.5 * $29;
   $31 = $4;
   $32 = $30 - $31;
   $33 = $5;
   $34 = $32 / $33;
   $13 = $34;
  }
  $35 = $13;
  $36 = $11;
  $37 = $35 * $36;
  $38 = 1.0 + $37;
  $11 = $38;
  $39 = $11;
  $40 = (+Math_abs((+$39)));
  $41 = $8;
  $42 = $40 < $41;
  if ($42) {
   $43 = $8;
   $11 = $43;
  }
  $44 = $13;
  $45 = $10;
  $46 = $44 / $45;
  $47 = 1.0 + $46;
  $10 = $47;
  $48 = $10;
  $49 = (+Math_abs((+$48)));
  $50 = $8;
  $51 = $49 < $50;
  if ($51) {
   $52 = $8;
   $10 = $52;
  }
  $53 = $11;
  $54 = 1.0 / $53;
  $11 = $54;
  $55 = $10;
  $56 = $11;
  $57 = $55 * $56;
  $14 = $57;
  $58 = $14;
  $59 = $9;
  $60 = $59 * $58;
  $9 = $60;
  $61 = $14;
  $62 = $61 - 1.0;
  $63 = (+Math_abs((+$62)));
  $64 = $63 < 2.2204460492503131E-16;
  if ($64) {
   break;
  }
  $65 = $12;
  $66 = (($65) + 1)|0;
  $12 = $66;
 }
 $67 = $9;
 $68 = $6;
 HEAPF64[$68>>3] = $67;
 $69 = $9;
 $70 = (+Math_abs((+$69)));
 $71 = 4.4408920985006262E-16 * $70;
 $72 = $6;
 $73 = ((($72)) + 8|0);
 HEAPF64[$73>>3] = $71;
 $74 = $12;
 $75 = (+($74|0));
 $76 = 0.5 * $75;
 $77 = 2.0 + $76;
 $78 = 2.2204460492503131E-16 * $77;
 $79 = $6;
 $80 = +HEAPF64[$79>>3];
 $81 = (+Math_abs((+$80)));
 $82 = $78 * $81;
 $83 = $6;
 $84 = ((($83)) + 8|0);
 $85 = +HEAPF64[$84>>3];
 $86 = $85 + $82;
 HEAPF64[$84>>3] = $86;
 $87 = $12;
 $88 = ($87|0)==(5000);
 if ($88) {
  _gsl_error(83299,83259,286,11);
  $3 = 11;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 } else {
  $3 = 0;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function _gsl_sf_gamma_inc_P_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp + 32|0;
 $9 = sp + 16|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = $13 <= 0.0;
 $15 = $5;
 $16 = $15 < 0.0;
 $or$cond = $14 | $16;
 if ($or$cond) {
  $17 = $6;
  HEAPF64[$17>>3] = nan;
  $18 = $6;
  $19 = ((($18)) + 8|0);
  HEAPF64[$19>>3] = nan;
  _gsl_error(83774,83259,584,1);
  $3 = 1;
  $122 = $3;
  STACKTOP = sp;return ($122|0);
 }
 $20 = $5;
 $21 = $20 == 0.0;
 if ($21) {
  $22 = $6;
  HEAPF64[$22>>3] = 0.0;
  $23 = $6;
  $24 = ((($23)) + 8|0);
  HEAPF64[$24>>3] = 0.0;
  $3 = 0;
  $122 = $3;
  STACKTOP = sp;return ($122|0);
 }
 $25 = $5;
 $26 = $25 < 20.0;
 if (!($26)) {
  $27 = $5;
  $28 = $4;
  $29 = 0.5 * $28;
  $30 = $27 < $29;
  if (!($30)) {
   $35 = $4;
   $36 = $35 > 1.0E+6;
   if ($36) {
    $37 = $5;
    $38 = $4;
    $39 = $37 - $38;
    $40 = $5;
    $41 = $4;
    $42 = $40 - $41;
    $43 = $39 * $42;
    $44 = $4;
    $45 = $43 < $44;
    if ($45) {
     $46 = $4;
     $47 = $5;
     $48 = (_gamma_inc_Q_asymp_unif($46,$47,$7)|0);
     $8 = $48;
     $49 = +HEAPF64[$7>>3];
     $50 = 1.0 - $49;
     $51 = $6;
     HEAPF64[$51>>3] = $50;
     $52 = ((($7)) + 8|0);
     $53 = +HEAPF64[$52>>3];
     $54 = $6;
     $55 = ((($54)) + 8|0);
     HEAPF64[$55>>3] = $53;
     $56 = $6;
     $57 = +HEAPF64[$56>>3];
     $58 = (+Math_abs((+$57)));
     $59 = 4.4408920985006262E-16 * $58;
     $60 = $6;
     $61 = ((($60)) + 8|0);
     $62 = +HEAPF64[$61>>3];
     $63 = $62 + $59;
     HEAPF64[$61>>3] = $63;
     $64 = $8;
     $3 = $64;
     $122 = $3;
     STACKTOP = sp;return ($122|0);
    }
   }
   $65 = $4;
   $66 = $5;
   $67 = $65 <= $66;
   if ($67) {
    $68 = $4;
    $69 = $5;
    $70 = 0.20000000000000001 * $69;
    $71 = $68 > $70;
    $72 = $4;
    $73 = $5;
    if ($71) {
     $74 = (_gamma_inc_Q_CF($72,$73,$9)|0);
     $10 = $74;
    } else {
     $75 = (_gamma_inc_Q_large_x($72,$73,$9)|0);
     $10 = $75;
    }
    $76 = +HEAPF64[$9>>3];
    $77 = 1.0 - $76;
    $78 = $6;
    HEAPF64[$78>>3] = $77;
    $79 = ((($9)) + 8|0);
    $80 = +HEAPF64[$79>>3];
    $81 = $6;
    $82 = ((($81)) + 8|0);
    HEAPF64[$82>>3] = $80;
    $83 = $6;
    $84 = +HEAPF64[$83>>3];
    $85 = (+Math_abs((+$84)));
    $86 = 4.4408920985006262E-16 * $85;
    $87 = $6;
    $88 = ((($87)) + 8|0);
    $89 = +HEAPF64[$88>>3];
    $90 = $89 + $86;
    HEAPF64[$88>>3] = $90;
    $91 = $10;
    $3 = $91;
    $122 = $3;
    STACKTOP = sp;return ($122|0);
   } else {
    $92 = $5;
    $93 = $4;
    $94 = $92 - $93;
    $95 = $5;
    $96 = $4;
    $97 = $95 - $96;
    $98 = $94 * $97;
    $99 = $4;
    $100 = $98 < $99;
    $101 = $4;
    $102 = $5;
    if ($100) {
     $103 = (_gamma_inc_Q_CF($101,$102,$11)|0);
     $12 = $103;
     $104 = +HEAPF64[$11>>3];
     $105 = 1.0 - $104;
     $106 = $6;
     HEAPF64[$106>>3] = $105;
     $107 = ((($11)) + 8|0);
     $108 = +HEAPF64[$107>>3];
     $109 = $6;
     $110 = ((($109)) + 8|0);
     HEAPF64[$110>>3] = $108;
     $111 = $6;
     $112 = +HEAPF64[$111>>3];
     $113 = (+Math_abs((+$112)));
     $114 = 4.4408920985006262E-16 * $113;
     $115 = $6;
     $116 = ((($115)) + 8|0);
     $117 = +HEAPF64[$116>>3];
     $118 = $117 + $114;
     HEAPF64[$116>>3] = $118;
     $119 = $12;
     $3 = $119;
     $122 = $3;
     STACKTOP = sp;return ($122|0);
    } else {
     $120 = $6;
     $121 = (_gamma_inc_P_series($101,$102,$120)|0);
     $3 = $121;
     $122 = $3;
     STACKTOP = sp;return ($122|0);
    }
   }
  }
 }
 $31 = $4;
 $32 = $5;
 $33 = $6;
 $34 = (_gamma_inc_P_series($31,$32,$33)|0);
 $3 = $34;
 $122 = $3;
 STACKTOP = sp;return ($122|0);
}
function _gsl_sf_gamma_inc_P($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (_gsl_sf_gamma_inc_P_e($7,$8,$5)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $6;
  _gsl_error(83398,83259,710,$12);
  $13 = +HEAPF64[$5>>3];
  $2 = $13;
  $15 = $2;
  STACKTOP = sp;return (+$15);
 } else {
  $14 = +HEAPF64[$5>>3];
  $2 = $14;
  $15 = $2;
  STACKTOP = sp;return (+$15);
 }
 return +(0.0);
}
function _gsl_sf_hyperg_1F1_int_e($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $13 = $12 == 0.0;
 if ($13) {
  $14 = $8;
  HEAPF64[$14>>3] = 1.0;
  $15 = $8;
  $16 = ((($15)) + 8|0);
  HEAPF64[$16>>3] = 0.0;
  $4 = 0;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 $17 = $5;
 $18 = $6;
 $19 = ($17|0)==($18|0);
 if ($19) {
  $20 = $7;
  $21 = $8;
  $22 = (_gsl_sf_exp_e($20,$21)|0);
  $4 = $22;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 $23 = $6;
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = $8;
  HEAPF64[$25>>3] = nan;
  $26 = $8;
  $27 = ((($26)) + 8|0);
  HEAPF64[$27>>3] = nan;
  _gsl_error(83774,83434,1803,1);
  $4 = 1;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 $28 = $5;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = $8;
  HEAPF64[$30>>3] = 1.0;
  $31 = $8;
  $32 = ((($31)) + 8|0);
  HEAPF64[$32>>3] = 0.0;
  $4 = 0;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 $33 = $6;
 $34 = ($33|0)<(0);
 if ($34) {
  $35 = $5;
  $36 = $6;
  $37 = ($35|0)<($36|0);
  $38 = $5;
  $39 = ($38|0)>(0);
  $or$cond = $37 | $39;
  if ($or$cond) {
   $40 = $8;
   HEAPF64[$40>>3] = nan;
   $41 = $8;
   $42 = ((($41)) + 8|0);
   HEAPF64[$42>>3] = nan;
   _gsl_error(83774,83434,1812,1);
   $4 = 1;
   $133 = $4;
   STACKTOP = sp;return ($133|0);
  }
 }
 $43 = $7;
 $44 = $43 > 100.0;
 if ($44) {
  $45 = $6;
  $46 = $5;
  $47 = (($45) - ($46))|0;
  $48 = (+($47|0));
  $49 = (+Math_abs((+$48)));
  $50 = (+_GSL_MAX_DBL(1.0,$49));
  $51 = $5;
  $52 = (1 - ($51))|0;
  $53 = (+($52|0));
  $54 = (+Math_abs((+$53)));
  $55 = (+_GSL_MAX_DBL(1.0,$54));
  $56 = $50 * $55;
  $57 = $7;
  $58 = 0.5 * $57;
  $59 = $56 < $58;
  if ($59) {
   $60 = $5;
   $61 = (+($60|0));
   $62 = $6;
   $63 = (+($62|0));
   $64 = $7;
   $65 = $8;
   $66 = (_hyperg_1F1_asymp_posx($61,$63,$64,$65)|0);
   $4 = $66;
   $133 = $4;
   STACKTOP = sp;return ($133|0);
  }
 }
 $67 = $7;
 $68 = $67 < -100.0;
 if ($68) {
  $69 = $5;
  $70 = (+($69|0));
  $71 = (+Math_abs((+$70)));
  $72 = (+_GSL_MAX_DBL(1.0,$71));
  $73 = $5;
  $74 = (1 + ($73))|0;
  $75 = $6;
  $76 = (($74) - ($75))|0;
  $77 = (+($76|0));
  $78 = (+Math_abs((+$77)));
  $79 = (+_GSL_MAX_DBL(1.0,$78));
  $80 = $72 * $79;
  $81 = $7;
  $82 = (+Math_abs((+$81)));
  $83 = 0.5 * $82;
  $84 = $80 < $83;
  if ($84) {
   $85 = $5;
   $86 = (+($85|0));
   $87 = $6;
   $88 = (+($87|0));
   $89 = $7;
   $90 = $8;
   $91 = (_hyperg_1F1_asymp_negx($86,$88,$89,$90)|0);
   $4 = $91;
   $133 = $4;
   STACKTOP = sp;return ($133|0);
  }
 }
 $92 = $5;
 $93 = ($92|0)<(0);
 $94 = $6;
 $95 = ($94|0)<(0);
 $or$cond3 = $93 & $95;
 $96 = $5;
 if ($or$cond3) {
  $97 = $6;
  $98 = $7;
  $99 = $8;
  $100 = (_hyperg_1F1_ab_negint($96,$97,$98,$99)|0);
  $4 = $100;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 $101 = ($96|0)<(0);
 $102 = $6;
 $103 = ($102|0)>(0);
 $or$cond5 = $101 & $103;
 if (!($or$cond5)) {
  $128 = $5;
  $129 = $6;
  $130 = $7;
  $131 = $8;
  $132 = (_hyperg_1F1_ab_posint($128,$129,$130,$131)|0);
  $4 = $132;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 $104 = $6;
 $105 = $5;
 $106 = (($104) - ($105))|0;
 $107 = $6;
 $108 = $7;
 $109 = - $108;
 $110 = (_hyperg_1F1_ab_posint($106,$107,$109,$9)|0);
 $10 = $110;
 $111 = $7;
 $112 = $7;
 $113 = (+Math_abs((+$112)));
 $114 = 2.2204460492503131E-16 * $113;
 $115 = +HEAPF64[$9>>3];
 $116 = ((($9)) + 8|0);
 $117 = +HEAPF64[$116>>3];
 $118 = $8;
 $119 = (_gsl_sf_exp_mult_err_e($111,$114,$115,$117,$118)|0);
 $11 = $119;
 $120 = $11;
 $121 = ($120|0)!=(0);
 if ($121) {
  $122 = $11;
  $127 = $122;
 } else {
  $123 = $10;
  $124 = ($123|0)!=(0);
  $125 = $10;
  $126 = $124 ? $125 : 0;
  $127 = $126;
 }
 $4 = $127;
 $133 = $4;
 STACKTOP = sp;return ($133|0);
}
function _hyperg_1F1_asymp_posx($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $9 = sp + 88|0;
 $10 = sp + 72|0;
 $11 = sp + 64|0;
 $12 = sp + 56|0;
 $15 = sp + 40|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $23 = $6;
 $24 = (_gsl_sf_lngamma_sgn_e($23,$9,$11)|0);
 $13 = $24;
 $25 = $5;
 $26 = (_gsl_sf_lngamma_sgn_e($25,$10,$12)|0);
 $14 = $26;
 $27 = $14;
 $28 = ($27|0)==(0);
 $29 = $13;
 $30 = ($29|0)==(0);
 $or$cond = $28 & $30;
 if (!($or$cond)) {
  $106 = $8;
  HEAPF64[$106>>3] = nan;
  $107 = $8;
  $108 = ((($107)) + 8|0);
  HEAPF64[$108>>3] = nan;
  _gsl_error(83774,83434,118,1);
  $4 = 1;
  $109 = $4;
  STACKTOP = sp;return ($109|0);
 }
 $31 = $6;
 $32 = $5;
 $33 = $31 - $32;
 $34 = $5;
 $35 = 1.0 - $34;
 $36 = $7;
 $37 = 1.0 / $36;
 $38 = (_gsl_sf_hyperg_2F0_series_e($33,$35,$37,-1,$15)|0);
 $16 = $38;
 $39 = $16;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = +HEAPF64[$15>>3];
  $42 = $41 != 0.0;
  if ($42) {
   $43 = $7;
   $44 = (+Math_log((+$43)));
   $17 = $44;
   $45 = $5;
   $46 = $6;
   $47 = $45 - $46;
   $48 = $17;
   $49 = $47 * $48;
   $18 = $49;
   $50 = $5;
   $51 = (+Math_abs((+$50)));
   $52 = $6;
   $53 = (+Math_abs((+$52)));
   $54 = $51 + $53;
   $55 = 4.4408920985006262E-16 * $54;
   $56 = $17;
   $57 = (+Math_abs((+$56)));
   $58 = $55 * $57;
   $59 = $5;
   $60 = $6;
   $61 = $59 - $60;
   $62 = (+Math_abs((+$61)));
   $63 = 4.4408920985006262E-16 * $62;
   $64 = $58 + $63;
   $19 = $64;
   $65 = +HEAPF64[$9>>3];
   $66 = +HEAPF64[$10>>3];
   $67 = $65 - $66;
   $68 = $18;
   $69 = $67 + $68;
   $70 = $7;
   $71 = $69 + $70;
   $20 = $71;
   $72 = ((($9)) + 8|0);
   $73 = +HEAPF64[$72>>3];
   $74 = ((($10)) + 8|0);
   $75 = +HEAPF64[$74>>3];
   $76 = $73 + $75;
   $77 = $19;
   $78 = $76 + $77;
   $79 = $7;
   $80 = (+Math_abs((+$79)));
   $81 = 4.4408920985006262E-16 * $80;
   $82 = $78 + $81;
   $21 = $82;
   $83 = $20;
   $84 = $21;
   $85 = +HEAPF64[$12>>3];
   $86 = +HEAPF64[$11>>3];
   $87 = $85 * $86;
   $88 = +HEAPF64[$15>>3];
   $89 = $87 * $88;
   $90 = ((($15)) + 8|0);
   $91 = +HEAPF64[$90>>3];
   $92 = $8;
   $93 = (_gsl_sf_exp_mult_err_e($83,$84,$89,$91,$92)|0);
   $22 = $93;
   $94 = $22;
   $95 = ($94|0)!=(0);
   if ($95) {
    $96 = $22;
    $101 = $96;
   } else {
    $97 = $16;
    $98 = ($97|0)!=(0);
    $99 = $16;
    $100 = $98 ? $99 : 0;
    $101 = $100;
   }
   $4 = $101;
   $109 = $4;
   STACKTOP = sp;return ($109|0);
  }
 }
 $102 = $8;
 HEAPF64[$102>>3] = 0.0;
 $103 = $8;
 $104 = ((($103)) + 8|0);
 HEAPF64[$104>>3] = 0.0;
 $105 = $16;
 $4 = $105;
 $109 = $4;
 STACKTOP = sp;return ($109|0);
}
function _hyperg_1F1_asymp_negx($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $9 = sp + 80|0;
 $10 = sp + 64|0;
 $11 = sp + 56|0;
 $12 = sp + 48|0;
 $15 = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $6;
 $23 = (_gsl_sf_lngamma_sgn_e($22,$9,$11)|0);
 $13 = $23;
 $24 = $6;
 $25 = $5;
 $26 = $24 - $25;
 $27 = (_gsl_sf_lngamma_sgn_e($26,$10,$12)|0);
 $14 = $27;
 $28 = $13;
 $29 = ($28|0)==(0);
 $30 = $14;
 $31 = ($30|0)==(0);
 $or$cond = $29 & $31;
 if (!($or$cond)) {
  $88 = $8;
  HEAPF64[$88>>3] = nan;
  $89 = $8;
  $90 = ((($89)) + 8|0);
  HEAPF64[$90>>3] = nan;
  _gsl_error(83774,83434,75,1);
  $4 = 1;
  $91 = $4;
  STACKTOP = sp;return ($91|0);
 }
 $32 = $5;
 $33 = $5;
 $34 = 1.0 + $33;
 $35 = $6;
 $36 = $34 - $35;
 $37 = $7;
 $38 = -1.0 / $37;
 $39 = (_gsl_sf_hyperg_2F0_series_e($32,$36,$38,-1,$15)|0);
 $16 = $39;
 $40 = +HEAPF64[$15>>3];
 $41 = $40 != 0.0;
 if (!($41)) {
  $84 = $8;
  HEAPF64[$84>>3] = 0.0;
  $85 = $8;
  $86 = ((($85)) + 8|0);
  HEAPF64[$86>>3] = 0.0;
  $87 = $16;
  $4 = $87;
  $91 = $4;
  STACKTOP = sp;return ($91|0);
 }
 $42 = $5;
 $43 = $7;
 $44 = - $43;
 $45 = (+Math_log((+$44)));
 $46 = $42 * $45;
 $17 = $46;
 $47 = $5;
 $48 = (+Math_abs((+$47)));
 $49 = $17;
 $50 = (+Math_abs((+$49)));
 $51 = $48 + $50;
 $52 = 4.4408920985006262E-16 * $51;
 $18 = $52;
 $53 = +HEAPF64[$9>>3];
 $54 = +HEAPF64[$10>>3];
 $55 = $53 - $54;
 $56 = $17;
 $57 = $55 - $56;
 $19 = $57;
 $58 = ((($9)) + 8|0);
 $59 = +HEAPF64[$58>>3];
 $60 = ((($10)) + 8|0);
 $61 = +HEAPF64[$60>>3];
 $62 = $59 + $61;
 $63 = $18;
 $64 = $62 + $63;
 $20 = $64;
 $65 = $19;
 $66 = $20;
 $67 = +HEAPF64[$12>>3];
 $68 = +HEAPF64[$11>>3];
 $69 = $67 * $68;
 $70 = +HEAPF64[$15>>3];
 $71 = $69 * $70;
 $72 = ((($15)) + 8|0);
 $73 = +HEAPF64[$72>>3];
 $74 = $8;
 $75 = (_gsl_sf_exp_mult_err_e($65,$66,$71,$73,$74)|0);
 $21 = $75;
 $76 = $21;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $21;
  $83 = $78;
 } else {
  $79 = $16;
  $80 = ($79|0)!=(0);
  $81 = $16;
  $82 = $80 ? $81 : 0;
  $83 = $82;
 }
 $4 = $83;
 $91 = $4;
 STACKTOP = sp;return ($91|0);
}
function _hyperg_1F1_ab_negint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $13 = $12 == 0.0;
 if ($13) {
  $14 = $8;
  HEAPF64[$14>>3] = 1.0;
  $15 = $8;
  $16 = ((($15)) + 8|0);
  HEAPF64[$16>>3] = 0.0;
  $4 = 0;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $17 = $7;
 $18 = $17 > 0.0;
 if ($18) {
  $19 = $5;
  $20 = $6;
  $21 = (+($20|0));
  $22 = $7;
  $23 = $8;
  $24 = (_hyperg_1F1_a_negint_poly($19,$21,$22,$23)|0);
  $4 = $24;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $25 = $6;
 $26 = $5;
 $27 = (($25) - ($26))|0;
 $28 = $6;
 $29 = (+($28|0));
 $30 = $7;
 $31 = - $30;
 $32 = (_hyperg_1F1_a_negint_poly($27,$29,$31,$9)|0);
 $10 = $32;
 $33 = $7;
 $34 = $7;
 $35 = (+Math_abs((+$34)));
 $36 = 4.4408920985006262E-16 * $35;
 $37 = +HEAPF64[$9>>3];
 $38 = ((($9)) + 8|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $8;
 $41 = (_gsl_sf_exp_mult_err_e($33,$36,$37,$39,$40)|0);
 $11 = $41;
 $42 = $11;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $11;
  $49 = $44;
 } else {
  $45 = $10;
  $46 = ($45|0)!=(0);
  $47 = $10;
  $48 = $46 ? $47 : 0;
  $49 = $48;
 }
 $4 = $49;
 $50 = $4;
 STACKTOP = sp;return ($50|0);
}
function _hyperg_1F1_ab_posint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0.0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0.0;
 var $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0;
 var $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0, $461 = 0.0;
 var $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0.0;
 var $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0, $514 = 0.0, $515 = 0.0;
 var $516 = 0.0, $517 = 0.0, $518 = 0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0, $522 = 0.0, $523 = 0.0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0;
 var $534 = 0.0, $535 = 0, $536 = 0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0.0, $543 = 0.0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0;
 var $552 = 0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0, $569 = 0, $57 = 0.0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0.0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0.0, $585 = 0, $586 = 0, $587 = 0, $588 = 0.0;
 var $589 = 0.0, $59 = 0.0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0.0, $602 = 0, $603 = 0, $604 = 0.0, $605 = 0;
 var $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0.0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0.0, $621 = 0, $622 = 0, $623 = 0.0;
 var $624 = 0.0, $625 = 0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0.0, $630 = 0.0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0, $638 = 0.0, $639 = 0.0, $64 = 0.0, $640 = 0.0, $641 = 0.0;
 var $642 = 0.0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0.0, $650 = 0.0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0.0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0, $678 = 0;
 var $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0.0, $696 = 0.0;
 var $697 = 0.0, $698 = 0.0, $699 = 0, $7 = 0.0, $70 = 0.0, $700 = 0, $701 = 0, $702 = 0.0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0;
 var $714 = 0.0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0.0, $731 = 0.0;
 var $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0, $742 = 0, $743 = 0.0, $744 = 0, $745 = 0.0, $746 = 0.0, $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0;
 var $750 = 0.0, $751 = 0.0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0.0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0, $761 = 0, $762 = 0.0, $763 = 0.0, $764 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $10 = sp + 352|0;
 $13 = sp + 336|0;
 $15 = sp + 320|0;
 $18 = sp + 304|0;
 $27 = sp + 248|0;
 $30 = sp + 224|0;
 $43 = sp + 136|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $65 = $7;
 $66 = (+Math_abs((+$65)));
 $9 = $66;
 $67 = $5;
 $68 = $6;
 $69 = ($67|0)==($68|0);
 if ($69) {
  $70 = $7;
  $71 = $8;
  $72 = (_gsl_sf_exp_e($70,$71)|0);
  $4 = $72;
  $764 = $4;
  STACKTOP = sp;return ($764|0);
 }
 $73 = $5;
 $74 = ($73|0)==(1);
 $75 = $6;
 if ($74) {
  $76 = (($75) - 1)|0;
  $77 = $7;
  $78 = $8;
  $79 = (_gsl_sf_exprel_n_e($76,$77,$78)|0);
  $4 = $79;
  $764 = $4;
  STACKTOP = sp;return ($764|0);
 }
 $80 = $5;
 $81 = (($80) + 1)|0;
 $82 = ($75|0)==($81|0);
 $83 = $5;
 if ($82) {
  $84 = $7;
  $85 = - $84;
  $86 = (_gsl_sf_exprel_n_e($83,$85,$10)|0);
  $11 = $86;
  $87 = $7;
  $88 = $7;
  $89 = (+Math_abs((+$88)));
  $90 = 4.4408920985006262E-16 * $89;
  $91 = +HEAPF64[$10>>3];
  $92 = ((($10)) + 8|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $8;
  $95 = (_gsl_sf_exp_mult_err_e($87,$90,$91,$93,$94)|0);
  $12 = $95;
  $96 = $12;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = $12;
   $103 = $98;
  } else {
   $99 = $11;
   $100 = ($99|0)!=(0);
   $101 = $11;
   $102 = $100 ? $101 : 0;
   $103 = $102;
  }
  $4 = $103;
  $764 = $4;
  STACKTOP = sp;return ($764|0);
 }
 $104 = $6;
 $105 = (($104) + 1)|0;
 $106 = ($83|0)==($105|0);
 if ($106) {
  $107 = $7;
  $108 = (_gsl_sf_exp_e($107,$13)|0);
  $14 = $108;
  $109 = +HEAPF64[$13>>3];
  $110 = $7;
  $111 = $6;
  $112 = (+($111|0));
  $113 = $110 / $112;
  $114 = 1.0 + $113;
  $115 = $109 * $114;
  $116 = $8;
  HEAPF64[$116>>3] = $115;
  $117 = ((($13)) + 8|0);
  $118 = +HEAPF64[$117>>3];
  $119 = $7;
  $120 = $6;
  $121 = (+($120|0));
  $122 = $119 / $121;
  $123 = 1.0 + $122;
  $124 = $118 * $123;
  $125 = $8;
  $126 = ((($125)) + 8|0);
  HEAPF64[$126>>3] = $124;
  $127 = +HEAPF64[$13>>3];
  $128 = $127 * 2.2204460492503131E-16;
  $129 = $7;
  $130 = $6;
  $131 = (+($130|0));
  $132 = $129 / $131;
  $133 = (+Math_abs((+$132)));
  $134 = 1.0 + $133;
  $135 = $128 * $134;
  $136 = $8;
  $137 = ((($136)) + 8|0);
  $138 = +HEAPF64[$137>>3];
  $139 = $138 + $135;
  HEAPF64[$137>>3] = $139;
  $140 = $8;
  $141 = +HEAPF64[$140>>3];
  $142 = (+Math_abs((+$141)));
  $143 = 4.4408920985006262E-16 * $142;
  $144 = $8;
  $145 = ((($144)) + 8|0);
  $146 = +HEAPF64[$145>>3];
  $147 = $146 + $143;
  HEAPF64[$145>>3] = $147;
  $148 = $14;
  $4 = $148;
  $764 = $4;
  STACKTOP = sp;return ($764|0);
 }
 $149 = $5;
 $150 = $6;
 $151 = (($150) + 2)|0;
 $152 = ($149|0)==($151|0);
 if ($152) {
  $153 = $7;
  $154 = (_gsl_sf_exp_e($153,$15)|0);
  $16 = $154;
  $155 = $7;
  $156 = $6;
  $157 = (+($156|0));
  $158 = $155 / $157;
  $159 = $7;
  $160 = $6;
  $161 = (+($160|0));
  $162 = $161 + 1.0;
  $163 = $159 / $162;
  $164 = 2.0 + $163;
  $165 = $158 * $164;
  $166 = 1.0 + $165;
  $17 = $166;
  $167 = +HEAPF64[$15>>3];
  $168 = $17;
  $169 = $167 * $168;
  $170 = $8;
  HEAPF64[$170>>3] = $169;
  $171 = ((($15)) + 8|0);
  $172 = +HEAPF64[$171>>3];
  $173 = $17;
  $174 = (+Math_abs((+$173)));
  $175 = $172 * $174;
  $176 = $8;
  $177 = ((($176)) + 8|0);
  HEAPF64[$177>>3] = $175;
  $178 = +HEAPF64[$15>>3];
  $179 = $178 * 2.2204460492503131E-16;
  $180 = $7;
  $181 = $6;
  $182 = (+($181|0));
  $183 = $180 / $182;
  $184 = (+Math_abs((+$183)));
  $185 = $7;
  $186 = $6;
  $187 = (+($186|0));
  $188 = $187 + 1.0;
  $189 = $185 / $188;
  $190 = (+Math_abs((+$189)));
  $191 = 2.0 + $190;
  $192 = $184 * $191;
  $193 = 1.0 + $192;
  $194 = $179 * $193;
  $195 = $8;
  $196 = ((($195)) + 8|0);
  $197 = +HEAPF64[$196>>3];
  $198 = $197 + $194;
  HEAPF64[$196>>3] = $198;
  $199 = $8;
  $200 = +HEAPF64[$199>>3];
  $201 = (+Math_abs((+$200)));
  $202 = 4.4408920985006262E-16 * $201;
  $203 = $8;
  $204 = ((($203)) + 8|0);
  $205 = +HEAPF64[$204>>3];
  $206 = $205 + $202;
  HEAPF64[$204>>3] = $206;
  $207 = $16;
  $4 = $207;
  $764 = $4;
  STACKTOP = sp;return ($764|0);
 }
 $208 = $6;
 $209 = $5;
 $210 = $209<<1;
 $211 = ($208|0)==($210|0);
 if ($211) {
  $212 = $5;
  $213 = (+($212|0));
  $214 = $7;
  $215 = $8;
  $216 = (_hyperg_1F1_beq2a_pos($213,$214,$215)|0);
  $4 = $216;
  $764 = $4;
  STACKTOP = sp;return ($764|0);
 }
 $217 = $6;
 $218 = ($217|0)<(10);
 $219 = $5;
 $220 = ($219|0)<(10);
 $or$cond = $218 & $220;
 $221 = $9;
 $222 = $221 < 5.0;
 $or$cond3 = $or$cond & $222;
 if (!($or$cond3)) {
  $223 = $6;
  $224 = (+($223|0));
  $225 = $5;
  $226 = (+($225|0));
  $227 = $9;
  $228 = $226 * $227;
  $229 = $224 > $228;
  if (!($229)) {
   $230 = $6;
   $231 = $5;
   $232 = ($230|0)>($231|0);
   $233 = $9;
   $234 = $233 < 5.0;
   $or$cond5 = $232 & $234;
   if (!($or$cond5)) {
    $242 = $6;
    $243 = $5;
    $244 = ($242|0)>($243|0);
    if ($244) {
     $245 = $6;
     $246 = (+($245|0));
     $247 = $5;
     $248 = $247<<1;
     $249 = (+($248|0));
     $250 = $7;
     $251 = $249 + $250;
     $252 = $246 >= $251;
     if ($252) {
      $253 = $5;
      $254 = (+($253|0));
      $255 = $6;
      $256 = (+($255|0));
      $257 = $7;
      $258 = (_hyperg_1F1_CF1_p_ser($254,$256,$257,$18)|0);
      $19 = $258;
      $259 = $7;
      $260 = $5;
      $261 = (+($260|0));
      $262 = $259 / $261;
      $263 = +HEAPF64[$18>>3];
      $264 = $262 * $263;
      $265 = 1.0 + $264;
      $20 = $265;
      $21 = 1.4916681462400413E-154;
      $266 = $20;
      $267 = $21;
      $268 = $266 * $267;
      $22 = $268;
      $269 = $22;
      $23 = $269;
      $270 = $21;
      $24 = $270;
      $271 = $5;
      $26 = $271;
      while(1) {
       $272 = $26;
       $273 = ($272|0)>(0);
       if (!($273)) {
        break;
       }
       $274 = $26;
       $275 = (+($274|0));
       $276 = $23;
       $277 = $275 * $276;
       $278 = $26;
       $279 = $278<<1;
       $280 = $6;
       $281 = (($279) - ($280))|0;
       $282 = (+($281|0));
       $283 = $7;
       $284 = $282 + $283;
       $285 = $24;
       $286 = $284 * $285;
       $287 = $277 - $286;
       $288 = $6;
       $289 = $26;
       $290 = (($288) - ($289))|0;
       $291 = (+($290|0));
       $292 = $287 / $291;
       $25 = $292;
       $293 = $24;
       $23 = $293;
       $294 = $25;
       $24 = $294;
       $295 = $26;
       $296 = (($295) + -1)|0;
       $26 = $296;
      }
      $297 = $21;
      $298 = $24;
      $299 = $297 / $298;
      $300 = $8;
      HEAPF64[$300>>3] = $299;
      $301 = $5;
      $302 = (+($301|0));
      $303 = (+Math_abs((+$302)));
      $304 = $303 + 1.0;
      $305 = 4.4408920985006262E-16 * $304;
      $306 = $21;
      $307 = $24;
      $308 = $306 / $307;
      $309 = (+Math_abs((+$308)));
      $310 = $305 * $309;
      $311 = $8;
      $312 = ((($311)) + 8|0);
      HEAPF64[$312>>3] = $310;
      $313 = $19;
      $4 = $313;
      $764 = $4;
      STACKTOP = sp;return ($764|0);
     }
    }
    $314 = $6;
    $315 = $5;
    $316 = ($314|0)>($315|0);
    if ($316) {
     $317 = $6;
     $318 = (+($317|0));
     $319 = $5;
     $320 = $319<<1;
     $321 = (+($320|0));
     $322 = $7;
     $323 = $321 + $322;
     $324 = $318 < $323;
     if ($324) {
      $325 = $6;
      $326 = (+($325|0));
      $327 = $7;
      $328 = $326 > $327;
      if ($328) {
       $329 = $5;
       $330 = (+($329|0));
       $331 = $6;
       $332 = (+($331|0));
       $333 = $7;
       $334 = (_hyperg_1F1_CF1_p_ser($330,$332,$333,$27)|0);
       $28 = $334;
       $335 = $7;
       $336 = $5;
       $337 = (+($336|0));
       $338 = $335 / $337;
       $339 = +HEAPF64[$27>>3];
       $340 = $338 * $339;
       $341 = 1.0 + $340;
       $29 = $341;
       $32 = 1.4916681462400413E-154;
       $342 = $29;
       $343 = $32;
       $344 = $342 * $343;
       $33 = $344;
       $345 = $32;
       $34 = $345;
       $346 = $33;
       $35 = $346;
       $347 = $5;
       $348 = (($347) + 1)|0;
       $37 = $348;
       while(1) {
        $349 = $37;
        $350 = $6;
        $351 = ($349|0)<($350|0);
        if (!($351)) {
         break;
        }
        $352 = $6;
        $353 = $37;
        $354 = (($352) - ($353))|0;
        $355 = (+($354|0));
        $356 = $34;
        $357 = $355 * $356;
        $358 = $37;
        $359 = $358<<1;
        $360 = $6;
        $361 = (($359) - ($360))|0;
        $362 = (+($361|0));
        $363 = $7;
        $364 = $362 + $363;
        $365 = $35;
        $366 = $364 * $365;
        $367 = $357 + $366;
        $368 = $37;
        $369 = (+($368|0));
        $370 = $367 / $369;
        $36 = $370;
        $371 = $35;
        $34 = $371;
        $372 = $36;
        $35 = $372;
        $373 = $37;
        $374 = (($373) + 1)|0;
        $37 = $374;
       }
       $375 = $7;
       $376 = (_gsl_sf_exp_e($375,$30)|0);
       $31 = $376;
       $377 = +HEAPF64[$30>>3];
       $378 = $32;
       $379 = $377 * $378;
       $380 = $35;
       $381 = $379 / $380;
       $382 = $8;
       HEAPF64[$382>>3] = $381;
       $383 = ((($30)) + 8|0);
       $384 = +HEAPF64[$383>>3];
       $385 = $32;
       $386 = $35;
       $387 = $385 / $386;
       $388 = (+Math_abs((+$387)));
       $389 = $384 * $388;
       $390 = $8;
       $391 = ((($390)) + 8|0);
       HEAPF64[$391>>3] = $389;
       $392 = $6;
       $393 = $5;
       $394 = (($392) - ($393))|0;
       $395 = (+($394|0));
       $396 = (+Math_abs((+$395)));
       $397 = $396 + 1.0;
       $398 = 8.8817841970012523E-16 * $397;
       $399 = $8;
       $400 = +HEAPF64[$399>>3];
       $401 = (+Math_abs((+$400)));
       $402 = $398 * $401;
       $403 = $8;
       $404 = ((($403)) + 8|0);
       $405 = +HEAPF64[$404>>3];
       $406 = $405 + $402;
       HEAPF64[$404>>3] = $406;
       $407 = $31;
       $408 = ($407|0)!=(0);
       if ($408) {
        $409 = $31;
        $414 = $409;
       } else {
        $410 = $28;
        $411 = ($410|0)!=(0);
        $412 = $28;
        $413 = $411 ? $412 : 0;
        $414 = $413;
       }
       $4 = $414;
       $764 = $4;
       STACKTOP = sp;return ($764|0);
      }
     }
    }
    $415 = $7;
    $416 = $415 >= 0.0;
    if ($416) {
     $417 = $6;
     $418 = $5;
     $419 = ($417|0)<($418|0);
     if (!($419)) {
      $44 = 1.0;
      $490 = $6;
      $491 = (($490) - 1)|0;
      $492 = $7;
      (_gsl_sf_exprel_n_e($491,$492,$43)|0);
      $493 = +HEAPF64[$43>>3];
      $45 = $493;
      $47 = 1;
      while(1) {
       $494 = $47;
       $495 = $5;
       $496 = ($494|0)<($495|0);
       if (!($496)) {
        break;
       }
       $497 = $6;
       $498 = $47;
       $499 = (($497) - ($498))|0;
       $500 = (+($499|0));
       $501 = $44;
       $502 = $500 * $501;
       $503 = $47;
       $504 = $503<<1;
       $505 = $6;
       $506 = (($504) - ($505))|0;
       $507 = (+($506|0));
       $508 = $7;
       $509 = $507 + $508;
       $510 = $45;
       $511 = $509 * $510;
       $512 = $502 + $511;
       $513 = $47;
       $514 = (+($513|0));
       $515 = $512 / $514;
       $46 = $515;
       $516 = $45;
       $44 = $516;
       $517 = $46;
       $45 = $517;
       $518 = $47;
       $519 = (($518) + 1)|0;
       $47 = $519;
      }
      $520 = $45;
      $521 = $8;
      HEAPF64[$521>>3] = $520;
      $522 = $45;
      $523 = (+Math_abs((+$522)));
      $524 = $5;
      $525 = (+($524|0));
      $526 = (+Math_abs((+$525)));
      $527 = 1.0 + $526;
      $528 = $523 * $527;
      $529 = ((($43)) + 8|0);
      $530 = +HEAPF64[$529>>3];
      $531 = +HEAPF64[$43>>3];
      $532 = $530 / $531;
      $533 = (+Math_abs((+$532)));
      $534 = $528 * $533;
      $535 = $8;
      $536 = ((($535)) + 8|0);
      HEAPF64[$536>>3] = $534;
      $537 = $45;
      $538 = (+Math_abs((+$537)));
      $539 = 4.4408920985006262E-16 * $538;
      $540 = $8;
      $541 = ((($540)) + 8|0);
      $542 = +HEAPF64[$541>>3];
      $543 = $542 + $539;
      HEAPF64[$541>>3] = $543;
      $4 = 0;
      $764 = $4;
      STACKTOP = sp;return ($764|0);
     }
     $420 = $7;
     $421 = $7;
     $422 = $6;
     $423 = (+($422|0));
     $424 = $421 / $423;
     $425 = (+Math_abs((+$424)));
     $426 = (+Math_log((+$425)));
     $427 = $420 + $426;
     $428 = $427 < 707.78271289338397;
     if (!($428)) {
      $487 = $8;
      HEAPF64[$487>>3] = inf;
      $488 = $8;
      $489 = ((($488)) + 8|0);
      HEAPF64[$489>>3] = inf;
      _gsl_error(83804,83434,1062,16);
      $4 = 16;
      $764 = $4;
      STACKTOP = sp;return ($764|0);
     }
     $429 = $7;
     $430 = (+Math_exp((+$429)));
     $38 = $430;
     $431 = $38;
     $40 = $431;
     $432 = $38;
     $433 = $7;
     $434 = $6;
     $435 = (+($434|0));
     $436 = $433 / $435;
     $437 = 1.0 + $436;
     $438 = $432 * $437;
     $41 = $438;
     $439 = $6;
     $440 = (($439) + 1)|0;
     $39 = $440;
     while(1) {
      $441 = $39;
      $442 = $5;
      $443 = ($441|0)<($442|0);
      if (!($443)) {
       break;
      }
      $444 = $6;
      $445 = $39;
      $446 = (($444) - ($445))|0;
      $447 = (+($446|0));
      $448 = $40;
      $449 = $447 * $448;
      $450 = $39;
      $451 = $450<<1;
      $452 = $6;
      $453 = (($451) - ($452))|0;
      $454 = (+($453|0));
      $455 = $7;
      $456 = $454 + $455;
      $457 = $41;
      $458 = $456 * $457;
      $459 = $449 + $458;
      $460 = $39;
      $461 = (+($460|0));
      $462 = $459 / $461;
      $42 = $462;
      $463 = $41;
      $40 = $463;
      $464 = $42;
      $41 = $464;
      $465 = $39;
      $466 = (($465) + 1)|0;
      $39 = $466;
     }
     $467 = $41;
     $468 = $8;
     HEAPF64[$468>>3] = $467;
     $469 = $7;
     $470 = $469 + 1.0;
     $471 = $470 * 2.2204460492503131E-16;
     $472 = $41;
     $473 = (+Math_abs((+$472)));
     $474 = $471 * $473;
     $475 = $8;
     $476 = ((($475)) + 8|0);
     HEAPF64[$476>>3] = $474;
     $477 = $5;
     $478 = $6;
     $479 = (($477) - ($478))|0;
     $480 = (+($479|0));
     $481 = (+Math_abs((+$480)));
     $482 = $481 + 1.0;
     $483 = $8;
     $484 = ((($483)) + 8|0);
     $485 = +HEAPF64[$484>>3];
     $486 = $485 * $482;
     HEAPF64[$484>>3] = $486;
     $4 = 0;
     $764 = $4;
     STACKTOP = sp;return ($764|0);
    }
    $544 = $5;
    $545 = (+($544|0));
    $546 = $6;
    $547 = (+($546|0));
    $548 = $7;
    $549 = $547 - $548;
    $550 = 0.5 * $549;
    $551 = $545 <= $550;
    if (!($551)) {
     $552 = $5;
     $553 = (+($552|0));
     $554 = $7;
     $555 = - $554;
     $556 = $553 >= $555;
     if (!($556)) {
      $625 = $6;
      $626 = (+($625|0));
      $627 = $7;
      $628 = $626 - $627;
      $629 = 0.5 * $628;
      $630 = (+Math_ceil((+$629)));
      $631 = (~~(($630)));
      $53 = $631;
      $632 = $7;
      $633 = (+Math_exp((+$632)));
      $61 = $633;
      $634 = $61;
      $62 = $634;
      $635 = $61;
      $636 = $7;
      $637 = $53;
      $638 = (+($637|0));
      $639 = $638 - 1.0;
      $640 = $636 / $639;
      $641 = 1.0 + $640;
      $642 = $635 * $641;
      $63 = $642;
      $643 = $53;
      $644 = (($643) - 1)|0;
      $60 = $644;
      while(1) {
       $645 = $60;
       $646 = $6;
       $647 = ($645|0)>($646|0);
       if (!($647)) {
        break;
       }
       $648 = $60;
       $649 = (0 - ($648))|0;
       $650 = (+($649|0));
       $651 = $60;
       $652 = (1 - ($651))|0;
       $653 = (+($652|0));
       $654 = $7;
       $655 = $653 - $654;
       $656 = $650 * $655;
       $657 = $63;
       $658 = $656 * $657;
       $659 = $7;
       $660 = $60;
       $661 = $53;
       $662 = (($660) - ($661))|0;
       $663 = (+($662|0));
       $664 = $659 * $663;
       $665 = $62;
       $666 = $664 * $665;
       $667 = $658 - $666;
       $668 = $60;
       $669 = (+($668|0));
       $670 = $60;
       $671 = (+($670|0));
       $672 = $671 - 1.0;
       $673 = $669 * $672;
       $674 = $667 / $673;
       $64 = $674;
       $675 = $63;
       $62 = $675;
       $676 = $64;
       $63 = $676;
       $677 = $60;
       $678 = (($677) + -1)|0;
       $60 = $678;
      }
      $679 = $62;
      $55 = $679;
      $680 = $63;
      $54 = $680;
      $681 = $6;
      $682 = (+($681|0));
      $683 = $53;
      $684 = (+($683|0));
      $685 = $7;
      $686 = $684 + $685;
      $687 = $682 * $686;
      $688 = $54;
      $689 = $687 * $688;
      $690 = $7;
      $691 = $53;
      $692 = $6;
      $693 = (($691) - ($692))|0;
      $694 = (+($693|0));
      $695 = $690 * $694;
      $696 = $55;
      $697 = $695 * $696;
      $698 = $689 + $697;
      $699 = $53;
      $700 = $6;
      $701 = Math_imul($699, $700)|0;
      $702 = (+($701|0));
      $703 = $698 / $702;
      $56 = $703;
      $704 = $53;
      $705 = $5;
      $706 = ($704|0)>=($705|0);
      L83: do {
       if ($706) {
        $707 = $54;
        $58 = $707;
       } else {
        $708 = $53;
        $709 = (($708) + 1)|0;
        $710 = $5;
        $711 = ($709|0)>=($710|0);
        if ($711) {
         $712 = $56;
         $58 = $712;
         break;
        }
        $713 = $54;
        $57 = $713;
        $714 = $56;
        $58 = $714;
        $715 = $53;
        $716 = (($715) + 1)|0;
        $60 = $716;
        while(1) {
         $717 = $60;
         $718 = $5;
         $719 = ($717|0)<($718|0);
         if (!($719)) {
          break L83;
         }
         $720 = $6;
         $721 = $60;
         $722 = (($720) - ($721))|0;
         $723 = (+($722|0));
         $724 = $57;
         $725 = $723 * $724;
         $726 = $60;
         $727 = $726<<1;
         $728 = $6;
         $729 = (($727) - ($728))|0;
         $730 = (+($729|0));
         $731 = $7;
         $732 = $730 + $731;
         $733 = $58;
         $734 = $732 * $733;
         $735 = $725 + $734;
         $736 = $60;
         $737 = (+($736|0));
         $738 = $735 / $737;
         $59 = $738;
         $739 = $58;
         $57 = $739;
         $740 = $59;
         $58 = $740;
         $741 = $60;
         $742 = (($741) + 1)|0;
         $60 = $742;
        }
       }
      } while(0);
      $743 = $58;
      $744 = $8;
      HEAPF64[$744>>3] = $743;
      $745 = $7;
      $746 = (+Math_abs((+$745)));
      $747 = $746 + 1.0;
      $748 = $747 * 2.2204460492503131E-16;
      $749 = $58;
      $750 = (+Math_abs((+$749)));
      $751 = $748 * $750;
      $752 = $8;
      $753 = ((($752)) + 8|0);
      HEAPF64[$753>>3] = $751;
      $754 = $6;
      $755 = $5;
      $756 = (($754) - ($755))|0;
      $757 = (+($756|0));
      $758 = (+Math_abs((+$757)));
      $759 = $758 + 1.0;
      $760 = $8;
      $761 = ((($760)) + 8|0);
      $762 = +HEAPF64[$761>>3];
      $763 = $762 * $759;
      HEAPF64[$761>>3] = $763;
      $4 = 0;
      $764 = $4;
      STACKTOP = sp;return ($764|0);
     }
    }
    $557 = $7;
    $558 = (+Math_exp((+$557)));
    $48 = $558;
    $559 = $48;
    $49 = $559;
    $560 = $48;
    $561 = $7;
    $562 = $5;
    $563 = (+($562|0));
    $564 = $563 - 1.0;
    $565 = $561 / $564;
    $566 = 1.0 + $565;
    $567 = $560 * $566;
    $50 = $567;
    $568 = $5;
    $569 = (($568) - 1)|0;
    $52 = $569;
    while(1) {
     $570 = $52;
     $571 = $6;
     $572 = ($570|0)>($571|0);
     if (!($572)) {
      break;
     }
     $573 = $52;
     $574 = (0 - ($573))|0;
     $575 = (+($574|0));
     $576 = $52;
     $577 = (1 - ($576))|0;
     $578 = (+($577|0));
     $579 = $7;
     $580 = $578 - $579;
     $581 = $575 * $580;
     $582 = $50;
     $583 = $581 * $582;
     $584 = $7;
     $585 = $52;
     $586 = $5;
     $587 = (($585) - ($586))|0;
     $588 = (+($587|0));
     $589 = $584 * $588;
     $590 = $49;
     $591 = $589 * $590;
     $592 = $583 - $591;
     $593 = $52;
     $594 = (+($593|0));
     $595 = $52;
     $596 = (+($595|0));
     $597 = $596 - 1.0;
     $598 = $594 * $597;
     $599 = $592 / $598;
     $51 = $599;
     $600 = $50;
     $49 = $600;
     $601 = $51;
     $50 = $601;
     $602 = $52;
     $603 = (($602) + -1)|0;
     $52 = $603;
    }
    $604 = $50;
    $605 = $8;
    HEAPF64[$605>>3] = $604;
    $606 = $7;
    $607 = (+Math_abs((+$606)));
    $608 = $607 + 1.0;
    $609 = $608 * 2.2204460492503131E-16;
    $610 = $50;
    $611 = (+Math_abs((+$610)));
    $612 = $609 * $611;
    $613 = $8;
    $614 = ((($613)) + 8|0);
    HEAPF64[$614>>3] = $612;
    $615 = $6;
    $616 = $5;
    $617 = (($615) - ($616))|0;
    $618 = (+($617|0));
    $619 = (+Math_abs((+$618)));
    $620 = $619 + 1.0;
    $621 = $8;
    $622 = ((($621)) + 8|0);
    $623 = +HEAPF64[$622>>3];
    $624 = $623 * $620;
    HEAPF64[$622>>3] = $624;
    $4 = 0;
    $764 = $4;
    STACKTOP = sp;return ($764|0);
   }
  }
 }
 $235 = $5;
 $236 = (+($235|0));
 $237 = $6;
 $238 = (+($237|0));
 $239 = $7;
 $240 = $8;
 $241 = (_gsl_sf_hyperg_1F1_series_e($236,$238,$239,$240)|0);
 $4 = $241;
 $764 = $4;
 STACKTOP = sp;return ($764|0);
}
function _hyperg_1F1_beq2a_pos($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp + 40|0;
 $9 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $15 = $5;
 $16 = $15 == 0.0;
 if ($16) {
  $17 = $6;
  HEAPF64[$17>>3] = 1.0;
  $18 = $6;
  $19 = ((($18)) + 8|0);
  HEAPF64[$19>>3] = 0.0;
  $3 = 0;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 $20 = $4;
 $21 = $20 - 0.5;
 $22 = $5;
 $23 = (+Math_abs((+$22)));
 $24 = 0.5 * $23;
 $25 = (_gsl_sf_bessel_Inu_scaled_e($21,$24,$7)|0);
 $8 = $25;
 $26 = $4;
 $27 = $26 + 0.5;
 $28 = (_gsl_sf_lngamma_e($27,$9)|0);
 $10 = $28;
 $29 = $4;
 $30 = 0.5 - $29;
 $31 = $5;
 $32 = (+Math_abs((+$31)));
 $33 = 0.25 * $32;
 $34 = (+Math_log((+$33)));
 $35 = $30 * $34;
 $11 = $35;
 $36 = +HEAPF64[$9>>3];
 $37 = $5;
 $38 = (+_GSL_MAX_DBL($37,0.0));
 $39 = $36 + $38;
 $40 = $11;
 $41 = $39 + $40;
 $12 = $41;
 $42 = ((($9)) + 8|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $11;
 $45 = (+Math_abs((+$44)));
 $46 = $5;
 $47 = (+Math_abs((+$46)));
 $48 = $45 + $47;
 $49 = 2.2204460492503131E-16 * $48;
 $50 = $43 + $49;
 $13 = $50;
 $51 = $12;
 $52 = $13;
 $53 = +HEAPF64[$7>>3];
 $54 = ((($7)) + 8|0);
 $55 = +HEAPF64[$54>>3];
 $56 = $6;
 $57 = (_gsl_sf_exp_mult_err_e($51,$52,$53,$55,$56)|0);
 $14 = $57;
 $58 = $14;
 $59 = ($58|0)!=(0);
 do {
  if ($59) {
   $60 = $14;
   $68 = $60;
  } else {
   $61 = $10;
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = $10;
    $68 = $63;
    break;
   } else {
    $64 = $8;
    $65 = ($64|0)!=(0);
    $66 = $8;
    $67 = $65 ? $66 : 0;
    $68 = $67;
    break;
   }
  }
 } while(0);
 $3 = $68;
 $69 = $3;
 STACKTOP = sp;return ($69|0);
}
function _hyperg_1F1_CF1_p_ser($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $15 = $5;
 $16 = $15 == 0.0;
 if ($16) {
  $17 = $8;
  HEAPF64[$17>>3] = 0.0;
  $4 = 0;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 $9 = 5000;
 $10 = 1.0;
 $11 = 1.0;
 $12 = 0.0;
 $13 = 1;
 while(1) {
  $18 = $13;
  $19 = ($18|0)<(5000);
  if (!($19)) {
   break;
  }
  $20 = $5;
  $21 = $13;
  $22 = (+($21|0));
  $23 = $20 + $22;
  $24 = $7;
  $25 = $23 * $24;
  $26 = $6;
  $27 = $7;
  $28 = $26 - $27;
  $29 = $13;
  $30 = (+($29|0));
  $31 = $28 + $30;
  $32 = $31 - 1.0;
  $33 = $6;
  $34 = $7;
  $35 = $33 - $34;
  $36 = $13;
  $37 = (+($36|0));
  $38 = $35 + $37;
  $39 = $32 * $38;
  $40 = $25 / $39;
  $14 = $40;
  $41 = $14;
  $42 = - $41;
  $43 = $12;
  $44 = 1.0 + $43;
  $45 = $42 * $44;
  $46 = $14;
  $47 = $12;
  $48 = 1.0 + $47;
  $49 = $46 * $48;
  $50 = 1.0 + $49;
  $51 = $45 / $50;
  $12 = $51;
  $52 = $12;
  $53 = $11;
  $54 = $53 * $52;
  $11 = $54;
  $55 = $11;
  $56 = $10;
  $57 = $56 + $55;
  $10 = $57;
  $58 = $11;
  $59 = $10;
  $60 = $58 / $59;
  $61 = (+Math_abs((+$60)));
  $62 = $61 < 4.4408920985006262E-16;
  if ($62) {
   break;
  }
  $63 = $13;
  $64 = (($63) + 1)|0;
  $13 = $64;
 }
 $65 = $5;
 $66 = $6;
 $67 = $7;
 $68 = $66 - $67;
 $69 = $65 / $68;
 $70 = $10;
 $71 = $69 * $70;
 $72 = $8;
 HEAPF64[$72>>3] = $71;
 $73 = $13;
 $74 = ($73|0)==(5000);
 if ($74) {
  _gsl_error(83691,83434,580,11);
  $4 = 11;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 } else {
  $4 = 0;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _hyperg_1F1_a_negint_poly($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $8;
  HEAPF64[$16>>3] = 1.0;
  $17 = $8;
  $18 = ((($17)) + 8|0);
  HEAPF64[$18>>3] = 1.0;
  $4 = 0;
  $69 = $4;
  STACKTOP = sp;return ($69|0);
 }
 $19 = $5;
 $20 = (0 - ($19))|0;
 $9 = $20;
 $10 = 1.0;
 $21 = $9;
 $22 = (($21) - 1)|0;
 $11 = $22;
 while(1) {
  $23 = $11;
  $24 = ($23|0)>=(0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $5;
  $26 = $11;
  $27 = (($25) + ($26))|0;
  $28 = (+($27|0));
  $29 = $6;
  $30 = $11;
  $31 = (+($30|0));
  $32 = $29 + $31;
  $33 = $28 / $32;
  $34 = $7;
  $35 = $11;
  $36 = (($35) + 1)|0;
  $37 = (+($36|0));
  $38 = $34 / $37;
  $39 = $33 * $38;
  $12 = $39;
  $40 = $12;
  $41 = $10;
  $42 = 1.0 / $41;
  $43 = $40 + $42;
  $13 = $43;
  $44 = $13;
  $45 = $10;
  $46 = 1.6179238213760842E+308 / $45;
  $47 = $44 > $46;
  if ($47) {
   label = 6;
   break;
  }
  $51 = $13;
  $52 = $10;
  $53 = $52 * $51;
  $10 = $53;
  $54 = $11;
  $55 = (($54) + -1)|0;
  $11 = $55;
 }
 if ((label|0) == 6) {
  $48 = $8;
  HEAPF64[$48>>3] = inf;
  $49 = $8;
  $50 = ((($49)) + 8|0);
  HEAPF64[$50>>3] = inf;
  _gsl_error(83804,83434,1198,16);
  $4 = 16;
  $69 = $4;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 8) {
  $56 = $10;
  $57 = $8;
  HEAPF64[$57>>3] = $56;
  $58 = $9;
  $59 = (+($58|0));
  $60 = (+Math_sqrt((+$59)));
  $61 = $60 + 1.0;
  $62 = 2.0 * $61;
  $63 = $62 * 2.2204460492503131E-16;
  $64 = $10;
  $65 = (+Math_abs((+$64)));
  $66 = $63 * $65;
  $67 = $8;
  $68 = ((($67)) + 8|0);
  HEAPF64[$68>>3] = $66;
  $4 = 0;
  $69 = $4;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_1F1_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0.0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0.0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $19 = sp + 128|0;
 $24 = sp + 88|0;
 $27 = sp + 64|0;
 $30 = sp + 48|0;
 $33 = sp + 32|0;
 $36 = sp + 16|0;
 $39 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $42 = $6;
 $43 = $5;
 $44 = $42 - $43;
 $9 = $44;
 $45 = $5;
 $46 = $45 + 0.5;
 $47 = (+Math_floor((+$46)));
 $10 = $47;
 $48 = $6;
 $49 = $48 + 0.5;
 $50 = (+Math_floor((+$49)));
 $11 = $50;
 $51 = $9;
 $52 = $51 + 0.5;
 $53 = (+Math_floor((+$52)));
 $12 = $53;
 $54 = $5;
 $55 = $10;
 $56 = $54 - $55;
 $57 = (+Math_abs((+$56)));
 $58 = $57 < 2.2204460492503131E-14;
 $59 = $10;
 $60 = $59 > -2147483648.0;
 $or$cond = $58 & $60;
 if ($or$cond) {
  $61 = $10;
  $62 = $61 < 2147483647.0;
  $64 = $62;
 } else {
  $64 = 0;
 }
 $63 = $64&1;
 $13 = $63;
 $65 = $6;
 $66 = $11;
 $67 = $65 - $66;
 $68 = (+Math_abs((+$67)));
 $69 = $68 < 2.2204460492503131E-14;
 $70 = $11;
 $71 = $70 > -2147483648.0;
 $or$cond3 = $69 & $71;
 if ($or$cond3) {
  $72 = $11;
  $73 = $72 < 2147483647.0;
  $75 = $73;
 } else {
  $75 = 0;
 }
 $74 = $75&1;
 $14 = $74;
 $76 = $9;
 $77 = $12;
 $78 = $76 - $77;
 $79 = (+Math_abs((+$78)));
 $80 = $79 < 2.2204460492503131E-14;
 $81 = $12;
 $82 = $81 > -2147483648.0;
 $or$cond5 = $80 & $82;
 if ($or$cond5) {
  $83 = $12;
  $84 = $83 < 2147483647.0;
  $86 = $84;
 } else {
  $86 = 0;
 }
 $85 = $86&1;
 $15 = $85;
 $87 = $6;
 $88 = $87 < -0.10000000000000001;
 $89 = $14;
 $90 = ($89|0)!=(0);
 $91 = $88 ? $90 : 0;
 $92 = $91&1;
 $16 = $92;
 $93 = $5;
 $94 = $93 < -0.10000000000000001;
 $95 = $13;
 $96 = ($95|0)!=(0);
 $97 = $94 ? $96 : 0;
 $98 = $97&1;
 $17 = $98;
 $99 = $9;
 $100 = $99 < -0.10000000000000001;
 $101 = $15;
 $102 = ($101|0)!=(0);
 $103 = $100 ? $102 : 0;
 $104 = $103&1;
 $18 = $104;
 $105 = $7;
 $106 = $105 == 0.0;
 if ($106) {
  $107 = $8;
  HEAPF64[$107>>3] = 1.0;
  $108 = $8;
  $109 = ((($108)) + 8|0);
  HEAPF64[$109>>3] = 0.0;
  $4 = 0;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 $110 = $6;
 $111 = $110 == 0.0;
 if ($111) {
  $112 = $8;
  HEAPF64[$112>>3] = nan;
  $113 = $8;
  $114 = ((($113)) + 8|0);
  HEAPF64[$114>>3] = nan;
  _gsl_error(83774,83434,1871,1);
  $4 = 1;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 $115 = $5;
 $116 = $115 == 0.0;
 if ($116) {
  $117 = $8;
  HEAPF64[$117>>3] = 1.0;
  $118 = $8;
  $119 = ((($118)) + 8|0);
  HEAPF64[$119>>3] = 0.0;
  $4 = 0;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 $120 = $5;
 $121 = $6;
 $122 = $120 == $121;
 if ($122) {
  $123 = $7;
  $124 = $8;
  $125 = (_gsl_sf_exp_e($123,$124)|0);
  $4 = $125;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 $126 = $6;
 $127 = (+Math_abs((+$126)));
 $128 = $127 < 2.2204460492503131E-14;
 if ($128) {
  $129 = $5;
  $130 = (+Math_abs((+$129)));
  $131 = $130 < 2.2204460492503131E-14;
  if ($131) {
   $132 = $7;
   $133 = (_gsl_sf_expm1_e($132,$19)|0);
   $20 = $133;
   $134 = $5;
   $135 = $134 > 0.0;
   $136 = $135 ? 1.0 : -1.0;
   $21 = $136;
   $137 = $6;
   $138 = $137 > 0.0;
   $139 = $138 ? 1.0 : -1.0;
   $22 = $139;
   $140 = $5;
   $141 = $6;
   $142 = $140 / $141;
   $143 = (+Math_abs((+$142)));
   $144 = (+Math_log((+$143)));
   $23 = $144;
   $145 = $23;
   $146 = $23;
   $147 = (+Math_abs((+$146)));
   $148 = 2.2204460492503131E-16 * $147;
   $149 = $21;
   $150 = $22;
   $151 = $149 * $150;
   $152 = +HEAPF64[$19>>3];
   $153 = $151 * $152;
   $154 = ((($19)) + 8|0);
   $155 = +HEAPF64[$154>>3];
   $156 = (_gsl_sf_exp_mult_err_e($145,$148,$153,$155,$24)|0);
   $25 = $156;
   $157 = +HEAPF64[$24>>3];
   $158 = $157 == 1.7976931348623157E+308;
   $159 = +HEAPF64[$24>>3];
   $160 = 1.0 + $159;
   $161 = $158 ? $159 : $160;
   $162 = $8;
   HEAPF64[$162>>3] = $161;
   $163 = ((($24)) + 8|0);
   $164 = +HEAPF64[$163>>3];
   $165 = $8;
   $166 = ((($165)) + 8|0);
   HEAPF64[$166>>3] = $164;
   $167 = $25;
   $168 = ($167|0)!=(0);
   if ($168) {
    $169 = $25;
    $174 = $169;
   } else {
    $170 = $20;
    $171 = ($170|0)!=(0);
    $172 = $20;
    $173 = $171 ? $172 : 0;
    $174 = $173;
   }
   $4 = $174;
   $369 = $4;
   STACKTOP = sp;return ($369|0);
  }
 }
 $175 = $6;
 $176 = (+Math_abs((+$175)));
 $177 = $176 < 2.2204460492503131E-14;
 if ($177) {
  $178 = $7;
  $179 = $5;
  $180 = $178 * $179;
  $181 = (+Math_abs((+$180)));
  $182 = $181 < 1.0;
  if ($182) {
   $183 = $6;
   $184 = 0.5 * $183;
   $185 = 1.0 / $184;
   $26 = $185;
   $186 = $5;
   $187 = $7;
   $188 = (_hyperg_1F1_renorm_b0($186,$187,$27)|0);
   $28 = $188;
   $189 = $26;
   $190 = $26;
   $191 = 4.4408920985006262E-16 * $190;
   $192 = +HEAPF64[$27>>3];
   $193 = 0.5 * $192;
   $194 = ((($27)) + 8|0);
   $195 = +HEAPF64[$194>>3];
   $196 = 0.5 * $195;
   $197 = $8;
   $198 = (_gsl_sf_multiply_err_e($189,$191,$193,$196,$197)|0);
   $29 = $198;
   $199 = $29;
   $200 = ($199|0)!=(0);
   if ($200) {
    $201 = $29;
    $206 = $201;
   } else {
    $202 = $28;
    $203 = ($202|0)!=(0);
    $204 = $28;
    $205 = $203 ? $204 : 0;
    $206 = $205;
   }
   $4 = $206;
   $369 = $4;
   STACKTOP = sp;return ($369|0);
  }
 }
 $207 = $13;
 $208 = ($207|0)!=(0);
 $209 = $14;
 $210 = ($209|0)!=(0);
 $or$cond7 = $208 & $210;
 if ($or$cond7) {
  $211 = $10;
  $212 = (~~(($211)));
  $213 = $11;
  $214 = (~~(($213)));
  $215 = $7;
  $216 = $8;
  $217 = (_gsl_sf_hyperg_1F1_int_e($212,$214,$215,$216)|0);
  $4 = $217;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 $218 = $16;
 $219 = ($218|0)!=(0);
 do {
  if ($219) {
   $220 = $17;
   $221 = ($220|0)!=(0);
   if ($221) {
    $222 = $5;
    $223 = $6;
    $224 = $222 > $223;
    if ($224) {
     break;
    }
   }
   $225 = $8;
   HEAPF64[$225>>3] = nan;
   $226 = $8;
   $227 = ((($226)) + 8|0);
   HEAPF64[$227>>3] = nan;
   _gsl_error(83774,83434,1925,1);
   $4 = 1;
   $369 = $4;
   STACKTOP = sp;return ($369|0);
  }
 } while(0);
 $228 = $17;
 $229 = ($228|0)!=(0);
 if ($229) {
  $230 = $10;
  $231 = (~~(($230)));
  $232 = $6;
  $233 = $7;
  $234 = $8;
  $235 = (_hyperg_1F1_a_negint_lag($231,$232,$233,$234)|0);
  $4 = $235;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 $236 = $6;
 $237 = $236 > 0.0;
 if (!($237)) {
  $309 = $18;
  $310 = ($309|0)!=(0);
  $311 = $7;
  $312 = $311 < 0.0;
  $or$cond11 = $310 & $312;
  $313 = $5;
  if ($or$cond11) {
   $314 = $313 < 0.0;
   $315 = $12;
   $316 = (~~(($315)));
   $317 = $6;
   $318 = $7;
   $319 = - $318;
   if ($314) {
    $320 = (_hyperg_1F1_a_negint_poly($316,$317,$319,$36)|0);
    $37 = $320;
   } else {
    $321 = (_hyperg_1F1_a_negint_lag($316,$317,$319,$36)|0);
    $37 = $321;
   }
   $322 = $7;
   $323 = $7;
   $324 = (+Math_abs((+$323)));
   $325 = 2.2204460492503131E-16 * $324;
   $326 = +HEAPF64[$36>>3];
   $327 = ((($36)) + 8|0);
   $328 = +HEAPF64[$327>>3];
   $329 = $8;
   $330 = (_gsl_sf_exp_mult_err_e($322,$325,$326,$328,$329)|0);
   $38 = $330;
   $331 = $38;
   $332 = ($331|0)!=(0);
   if ($332) {
    $333 = $38;
    $338 = $333;
   } else {
    $334 = $37;
    $335 = ($334|0)!=(0);
    $336 = $37;
    $337 = $335 ? $336 : 0;
    $338 = $337;
   }
   $4 = $338;
   $369 = $4;
   STACKTOP = sp;return ($369|0);
  } else {
   $339 = $313 > 0.0;
   if (!($339)) {
    $364 = $5;
    $365 = $6;
    $366 = $7;
    $367 = $8;
    $368 = (_hyperg_1F1_ab_neg($364,$365,$366,$367)|0);
    $4 = $368;
    $369 = $4;
    STACKTOP = sp;return ($369|0);
   }
   $340 = $6;
   $341 = $5;
   $342 = $340 - $341;
   $343 = $6;
   $344 = $7;
   $345 = - $344;
   $346 = (_hyperg_1F1_ab_neg($342,$343,$345,$39)|0);
   $40 = $346;
   $347 = $7;
   $348 = $7;
   $349 = (+Math_abs((+$348)));
   $350 = 2.2204460492503131E-16 * $349;
   $351 = +HEAPF64[$39>>3];
   $352 = ((($39)) + 8|0);
   $353 = +HEAPF64[$352>>3];
   $354 = $8;
   $355 = (_gsl_sf_exp_mult_err_e($347,$350,$351,$353,$354)|0);
   $41 = $355;
   $356 = $41;
   $357 = ($356|0)!=(0);
   if ($357) {
    $358 = $41;
    $363 = $358;
   } else {
    $359 = $40;
    $360 = ($359|0)!=(0);
    $361 = $40;
    $362 = $360 ? $361 : 0;
    $363 = $362;
   }
   $4 = $363;
   $369 = $4;
   STACKTOP = sp;return ($369|0);
  }
 }
 $238 = $5;
 $239 = -1.0 <= $238;
 $240 = $5;
 $241 = $240 <= 1.0;
 $or$cond9 = $239 & $241;
 if ($or$cond9) {
  $242 = $5;
  $243 = $6;
  $244 = $7;
  $245 = $8;
  $246 = (_hyperg_1F1_small_a_bgt0($242,$243,$244,$245)|0);
  $4 = $246;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 $247 = $18;
 $248 = ($247|0)!=(0);
 if ($248) {
  $249 = $12;
  $250 = (~~(($249)));
  $251 = $6;
  $252 = $7;
  $253 = - $252;
  $254 = (_hyperg_1F1_a_negint_lag($250,$251,$253,$30)|0);
  $31 = $254;
  $255 = $7;
  $256 = $7;
  $257 = (+Math_abs((+$256)));
  $258 = 2.2204460492503131E-16 * $257;
  $259 = +HEAPF64[$30>>3];
  $260 = ((($30)) + 8|0);
  $261 = +HEAPF64[$260>>3];
  $262 = $8;
  $263 = (_gsl_sf_exp_mult_err_e($255,$258,$259,$261,$262)|0);
  $32 = $263;
  $264 = $32;
  $265 = ($264|0)!=(0);
  if ($265) {
   $266 = $32;
   $271 = $266;
  } else {
   $267 = $31;
   $268 = ($267|0)!=(0);
   $269 = $31;
   $270 = $268 ? $269 : 0;
   $271 = $270;
  }
  $4 = $271;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 $272 = $5;
 $273 = $272 < 0.0;
 if ($273) {
  $274 = $7;
  $275 = (+Math_abs((+$274)));
  $276 = $275 < 1419.5654257867679;
  if ($276) {
   $277 = $6;
   $278 = $5;
   $279 = $277 - $278;
   $280 = $6;
   $281 = $7;
   $282 = - $281;
   $283 = (_hyperg_1F1_ab_pos($279,$280,$282,$33)|0);
   $34 = $283;
   $284 = $7;
   $285 = $7;
   $286 = (+Math_abs((+$285)));
   $287 = 2.2204460492503131E-16 * $286;
   $288 = +HEAPF64[$33>>3];
   $289 = ((($33)) + 8|0);
   $290 = +HEAPF64[$289>>3];
   $291 = $8;
   $292 = (_gsl_sf_exp_mult_err_e($284,$287,$288,$290,$291)|0);
   $35 = $292;
   $293 = $35;
   $294 = ($293|0)!=(0);
   if ($294) {
    $295 = $35;
    $300 = $295;
   } else {
    $296 = $34;
    $297 = ($296|0)!=(0);
    $298 = $34;
    $299 = $297 ? $298 : 0;
    $300 = $299;
   }
   $4 = $300;
   $369 = $4;
   STACKTOP = sp;return ($369|0);
  }
 }
 $301 = $5;
 $302 = $301 > 0.0;
 $303 = $5;
 $304 = $6;
 $305 = $7;
 $306 = $8;
 if ($302) {
  $307 = (_hyperg_1F1_ab_pos($303,$304,$305,$306)|0);
  $4 = $307;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 } else {
  $308 = (_gsl_sf_hyperg_1F1_series_e($303,$304,$305,$306)|0);
  $4 = $308;
  $369 = $4;
  STACKTOP = sp;return ($369|0);
 }
 return (0)|0;
}
function _hyperg_1F1_renorm_b0($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $9 = sp + 112|0;
 $15 = sp + 64|0;
 $23 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $25 = $4;
 $26 = $5;
 $27 = $25 * $26;
 $7 = $27;
 $28 = $7;
 $29 = $28 > 0.0;
 $30 = $7;
 if ($29) {
  $31 = (+Math_sqrt((+$30)));
  $8 = $31;
  $32 = $8;
  $33 = 2.0 * $32;
  $34 = (_gsl_sf_bessel_I1_scaled_e($33,$9)|0);
  $10 = $34;
  $35 = +HEAPF64[$9>>3];
  $36 = $35 <= 0.0;
  if ($36) {
   $37 = $6;
   HEAPF64[$37>>3] = 0.0;
   $38 = $6;
   $39 = ((($38)) + 8|0);
   HEAPF64[$39>>3] = 0.0;
   $40 = $10;
   $41 = ($40|0)!=(0);
   $42 = $10;
   $43 = $41 ? $42 : 1;
   $3 = $43;
   $146 = $3;
   STACKTOP = sp;return ($146|0);
  } else {
   $44 = $4;
   $45 = 0.66666666666666663 * $44;
   $46 = $5;
   $47 = $4;
   $48 = 4.0 * $47;
   $49 = $46 / $48;
   $50 = (+Math_pow((+$49),1.5));
   $51 = $45 * $50;
   $52 = $8;
   $53 = 2.0 * $52;
   $54 = (+_gsl_sf_bessel_In_scaled(2,$53));
   $55 = $51 * $54;
   $11 = $55;
   $56 = $5;
   $57 = 0.5 * $56;
   $58 = $7;
   $59 = (+Math_log((+$58)));
   $60 = 0.5 * $59;
   $61 = $57 + $60;
   $62 = $8;
   $63 = 2.0 * $62;
   $64 = (+Math_abs((+$63)));
   $65 = $61 + $64;
   $66 = +HEAPF64[$9>>3];
   $67 = $11;
   $68 = $66 + $67;
   $69 = (+Math_log((+$68)));
   $70 = $65 + $69;
   $12 = $70;
   $71 = $5;
   $72 = (+Math_abs((+$71)));
   $73 = 1.5 * $72;
   $74 = $73 + 1.0;
   $75 = 2.2204460492503131E-16 * $74;
   $76 = ((($9)) + 8|0);
   $77 = +HEAPF64[$76>>3];
   $78 = $11;
   $79 = $77 + $78;
   $80 = +HEAPF64[$9>>3];
   $81 = $79 / $80;
   $82 = (+Math_abs((+$81)));
   $83 = $75 + $82;
   $13 = $83;
   $84 = $12;
   $85 = $13;
   $86 = $6;
   $87 = (_gsl_sf_exp_err_e($84,$85,$86)|0);
   $3 = $87;
   $146 = $3;
   STACKTOP = sp;return ($146|0);
  }
 }
 $88 = $30 == 0.0;
 if ($88) {
  $89 = $6;
  HEAPF64[$89>>3] = 0.0;
  $90 = $6;
  $91 = ((($90)) + 8|0);
  HEAPF64[$91>>3] = 0.0;
  $3 = 0;
  $146 = $3;
  STACKTOP = sp;return ($146|0);
 }
 $92 = $7;
 $93 = - $92;
 $94 = (+Math_sqrt((+$93)));
 $14 = $94;
 $95 = $14;
 $96 = 2.0 * $95;
 $97 = (_gsl_sf_bessel_J1_e($96,$15)|0);
 $16 = $97;
 $98 = +HEAPF64[$15>>3];
 $99 = $98 <= 0.0;
 if ($99) {
  $100 = $6;
  HEAPF64[$100>>3] = 0.0;
  $101 = $6;
  $102 = ((($101)) + 8|0);
  HEAPF64[$102>>3] = 0.0;
  $103 = $16;
  $104 = ($103|0)!=(0);
  $105 = $16;
  $106 = $104 ? $105 : 1;
  $3 = $106;
  $146 = $3;
  STACKTOP = sp;return ($146|0);
 } else {
  $107 = $5;
  $108 = 0.5 * $107;
  $17 = $108;
  $109 = $7;
  $110 = - $109;
  $111 = (+Math_log((+$110)));
  $112 = 0.5 * $111;
  $18 = $112;
  $113 = $5;
  $114 = (+Math_abs((+$113)));
  $19 = $114;
  $115 = +HEAPF64[$15>>3];
  $116 = (+Math_log((+$115)));
  $20 = $116;
  $117 = $17;
  $118 = $18;
  $119 = $117 + $118;
  $120 = $19;
  $121 = $119 + $120;
  $122 = $20;
  $123 = $121 + $122;
  $21 = $123;
  $124 = $5;
  $125 = (+Math_abs((+$124)));
  $126 = 1.5 * $125;
  $127 = $126 + 1.0;
  $128 = 2.2204460492503131E-16 * $127;
  $129 = ((($15)) + 8|0);
  $130 = +HEAPF64[$129>>3];
  $131 = +HEAPF64[$15>>3];
  $132 = $130 / $131;
  $133 = (+Math_abs((+$132)));
  $134 = $128 + $133;
  $22 = $134;
  $135 = $21;
  $136 = $22;
  $137 = (_gsl_sf_exp_err_e($135,$136,$23)|0);
  $24 = $137;
  $138 = +HEAPF64[$23>>3];
  $139 = - $138;
  $140 = $6;
  HEAPF64[$140>>3] = $139;
  $141 = ((($23)) + 8|0);
  $142 = +HEAPF64[$141>>3];
  $143 = $6;
  $144 = ((($143)) + 8|0);
  HEAPF64[$144>>3] = $142;
  $145 = $24;
  $3 = $145;
  $146 = $3;
  STACKTOP = sp;return ($146|0);
 }
 return (0)|0;
}
function _hyperg_1F1_a_negint_lag($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0;
 var $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0;
 var $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 152|0;
 $12 = sp + 136|0;
 $13 = sp + 120|0;
 $14 = sp + 104|0;
 $15 = sp + 96|0;
 $16 = sp + 88|0;
 $23 = sp + 56|0;
 $26 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $33 = $5;
 $34 = (0 - ($33))|0;
 $9 = $34;
 $35 = $9;
 $36 = $6;
 $37 = $36 - 1.0;
 $38 = $7;
 $39 = (_gsl_sf_laguerre_n_e($35,$37,$38,$10)|0);
 $11 = $39;
 $40 = $6;
 $41 = $40 < 0.0;
 if ($41) {
  $42 = $9;
  $43 = (_gsl_sf_lnfact_e($42,$12)|0);
  $17 = $43;
  $44 = $6;
  $45 = $9;
  $46 = (+($45|0));
  $47 = $44 + $46;
  $48 = (_gsl_sf_lngamma_sgn_e($47,$13,$15)|0);
  $18 = $48;
  $49 = $6;
  $50 = (_gsl_sf_lngamma_sgn_e($49,$14,$16)|0);
  $19 = $50;
  $51 = +HEAPF64[$12>>3];
  $52 = +HEAPF64[$13>>3];
  $53 = +HEAPF64[$14>>3];
  $54 = $52 - $53;
  $55 = $51 - $54;
  $20 = $55;
  $56 = ((($12)) + 8|0);
  $57 = +HEAPF64[$56>>3];
  $58 = ((($13)) + 8|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $57 + $59;
  $61 = ((($14)) + 8|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $60 + $62;
  $64 = $20;
  $65 = (+Math_abs((+$64)));
  $66 = 4.4408920985006262E-16 * $65;
  $67 = $63 + $66;
  $21 = $67;
  $68 = $20;
  $69 = $21;
  $70 = +HEAPF64[$15>>3];
  $71 = +HEAPF64[$16>>3];
  $72 = $70 * $71;
  $73 = +HEAPF64[$10>>3];
  $74 = $72 * $73;
  $75 = ((($10)) + 8|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $8;
  $78 = (_gsl_sf_exp_mult_err_e($68,$69,$74,$76,$77)|0);
  $22 = $78;
  $79 = $22;
  $80 = ($79|0)!=(0);
  do {
   if ($80) {
    $81 = $22;
    $95 = $81;
   } else {
    $82 = $11;
    $83 = ($82|0)!=(0);
    if ($83) {
     $84 = $11;
     $95 = $84;
     break;
    }
    $85 = $18;
    $86 = ($85|0)!=(0);
    if ($86) {
     $87 = $18;
     $95 = $87;
     break;
    }
    $88 = $19;
    $89 = ($88|0)!=(0);
    if ($89) {
     $90 = $19;
     $95 = $90;
     break;
    } else {
     $91 = $17;
     $92 = ($91|0)!=(0);
     $93 = $17;
     $94 = $92 ? $93 : 0;
     $95 = $94;
     break;
    }
   }
  } while(0);
  $4 = $95;
  $166 = $4;
  STACKTOP = sp;return ($166|0);
 }
 $96 = $6;
 $97 = $9;
 $98 = (+($97|0));
 (_gsl_sf_lnbeta_e($96,$98,$23)|0);
 $99 = +HEAPF64[$23>>3];
 $100 = (+Math_abs((+$99)));
 $101 = $100 < 0.10000000000000001;
 $102 = $9;
 $103 = (+($102|0));
 if (!($101)) {
  $141 = (+Math_log((+$103)));
  $29 = $141;
  $142 = +HEAPF64[$23>>3];
  $143 = $29;
  $144 = $142 + $143;
  $30 = $144;
  $145 = ((($23)) + 8|0);
  $146 = +HEAPF64[$145>>3];
  $147 = $29;
  $148 = (+Math_abs((+$147)));
  $149 = 4.4408920985006262E-16 * $148;
  $150 = $146 + $149;
  $31 = $150;
  $151 = $30;
  $152 = $31;
  $153 = +HEAPF64[$10>>3];
  $154 = ((($10)) + 8|0);
  $155 = +HEAPF64[$154>>3];
  $156 = $8;
  $157 = (_gsl_sf_exp_mult_err_e($151,$152,$153,$155,$156)|0);
  $32 = $157;
  $158 = $32;
  $159 = ($158|0)!=(0);
  if ($159) {
   $160 = $32;
   $165 = $160;
  } else {
   $161 = $11;
   $162 = ($161|0)!=(0);
   $163 = $11;
   $164 = $162 ? $163 : 0;
   $165 = $164;
  }
  $4 = $165;
  $166 = $4;
  STACKTOP = sp;return ($166|0);
 }
 $104 = 1.25 * $103;
 $105 = (+Math_log((+$104)));
 $24 = $105;
 $106 = $24;
 $107 = 4.4408920985006262E-16 * $106;
 $25 = $107;
 $108 = $6;
 $109 = $9;
 $110 = (+($109|0));
 $111 = (_gsl_sf_beta_e($108,$110,$26)|0);
 $27 = $111;
 $112 = $24;
 $113 = $25;
 $114 = +HEAPF64[$10>>3];
 $115 = ((($10)) + 8|0);
 $116 = +HEAPF64[$115>>3];
 $117 = $8;
 $118 = (_gsl_sf_exp_mult_err_e($112,$113,$114,$116,$117)|0);
 $28 = $118;
 $119 = +HEAPF64[$26>>3];
 $120 = $119 / 1.25;
 $121 = $8;
 $122 = +HEAPF64[$121>>3];
 $123 = $122 * $120;
 HEAPF64[$121>>3] = $123;
 $124 = +HEAPF64[$26>>3];
 $125 = $124 / 1.25;
 $126 = $8;
 $127 = ((($126)) + 8|0);
 $128 = +HEAPF64[$127>>3];
 $129 = $128 * $125;
 HEAPF64[$127>>3] = $129;
 $130 = $28;
 $131 = ($130|0)!=(0);
 do {
  if ($131) {
   $132 = $28;
   $140 = $132;
  } else {
   $133 = $11;
   $134 = ($133|0)!=(0);
   if ($134) {
    $135 = $11;
    $140 = $135;
    break;
   } else {
    $136 = $27;
    $137 = ($136|0)!=(0);
    $138 = $27;
    $139 = $137 ? $138 : 0;
    $140 = $139;
    break;
   }
  }
 } while(0);
 $4 = $140;
 $166 = $4;
 STACKTOP = sp;return ($166|0);
}
function _hyperg_1F1_small_a_bgt0($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0;
 var $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $18 = sp + 48|0;
 $19 = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $26 = $6;
 $27 = $5;
 $28 = $26 - $27;
 $9 = $28;
 $29 = $5;
 $30 = 1.0 - $29;
 $10 = $30;
 $31 = $5;
 $32 = 1.0 + $31;
 $33 = $6;
 $34 = $32 - $33;
 $11 = $34;
 $35 = $9;
 $36 = (+Math_abs((+$35)));
 $12 = $36;
 $37 = $10;
 $38 = (+Math_abs((+$37)));
 $13 = $38;
 $39 = $11;
 $40 = (+Math_abs((+$39)));
 $14 = $40;
 $41 = $7;
 $42 = (+Math_abs((+$41)));
 $15 = $42;
 $43 = $5;
 $44 = $43 == 0.0;
 if ($44) {
  $45 = $8;
  HEAPF64[$45>>3] = 1.0;
  $46 = $8;
  $47 = ((($46)) + 8|0);
  HEAPF64[$47>>3] = 0.0;
  $4 = 0;
  $249 = $4;
  STACKTOP = sp;return ($249|0);
 }
 $48 = $5;
 $49 = $48 == 1.0;
 $50 = $6;
 $51 = $50 >= 1.0;
 $or$cond = $49 & $51;
 if ($or$cond) {
  $52 = $6;
  $53 = $7;
  $54 = $8;
  $55 = (_hyperg_1F1_1($52,$53,$54)|0);
  $4 = $55;
  $249 = $4;
  STACKTOP = sp;return ($249|0);
 }
 $56 = $5;
 $57 = $56 == -1.0;
 if ($57) {
  $58 = $5;
  $59 = $6;
  $60 = $58 / $59;
  $61 = $7;
  $62 = $60 * $61;
  $63 = 1.0 + $62;
  $64 = $8;
  HEAPF64[$64>>3] = $63;
  $65 = $5;
  $66 = $6;
  $67 = $65 / $66;
  $68 = $7;
  $69 = $67 * $68;
  $70 = (+Math_abs((+$69)));
  $71 = 1.0 + $70;
  $72 = 2.2204460492503131E-16 * $71;
  $73 = $8;
  $74 = ((($73)) + 8|0);
  HEAPF64[$74>>3] = $72;
  $75 = $8;
  $76 = +HEAPF64[$75>>3];
  $77 = (+Math_abs((+$76)));
  $78 = 4.4408920985006262E-16 * $77;
  $79 = $8;
  $80 = ((($79)) + 8|0);
  $81 = +HEAPF64[$80>>3];
  $82 = $81 + $78;
  HEAPF64[$80>>3] = $82;
  $4 = 0;
  $249 = $4;
  STACKTOP = sp;return ($249|0);
 }
 $83 = $6;
 $84 = $15;
 $85 = 1.3999999999999999 * $84;
 $86 = $83 >= $85;
 if ($86) {
  $87 = $5;
  $88 = $6;
  $89 = $7;
  $90 = $8;
  $91 = (_gsl_sf_hyperg_1F1_series_e($87,$88,$89,$90)|0);
  $4 = $91;
  $249 = $4;
  STACKTOP = sp;return ($249|0);
 }
 $92 = $7;
 $93 = $92 > 0.0;
 if (!($93)) {
  $221 = $15;
  $222 = $221 < 10.0;
  $223 = $6;
  $224 = $223 < 10.0;
  $or$cond3 = $222 & $224;
  if ($or$cond3) {
   $225 = $5;
   $226 = $6;
   $227 = $7;
   $228 = $8;
   $229 = (_gsl_sf_hyperg_1F1_series_e($225,$226,$227,$228)|0);
   $4 = $229;
   $249 = $4;
   STACKTOP = sp;return ($249|0);
  }
  $230 = $15;
  $231 = $230 >= 100.0;
  if ($231) {
   $232 = $14;
   $233 = $232 > 1.0;
   $234 = $14;
   $235 = $233 ? $234 : 1.0;
   $236 = $15;
   $237 = 0.98999999999999999 * $236;
   $238 = $235 < $237;
   if ($238) {
    $239 = $5;
    $240 = $6;
    $241 = $7;
    $242 = $8;
    $243 = (_hyperg_1F1_asymp_negx($239,$240,$241,$242)|0);
    $4 = $243;
    $249 = $4;
    STACKTOP = sp;return ($249|0);
   }
  }
  $244 = $5;
  $245 = $6;
  $246 = $7;
  $247 = $8;
  $248 = (_hyperg_1F1_luke($244,$245,$246,$247)|0);
  $4 = $248;
  $249 = $4;
  STACKTOP = sp;return ($249|0);
 }
 $94 = $7;
 $95 = $94 > 100.0;
 if ($95) {
  $96 = $12;
  $97 = $13;
  $98 = $96 * $97;
  $99 = $7;
  $100 = 0.5 * $99;
  $101 = $98 < $100;
  if ($101) {
   $102 = $5;
   $103 = $6;
   $104 = $7;
   $105 = $8;
   $106 = (_hyperg_1F1_asymp_posx($102,$103,$104,$105)|0);
   $4 = $106;
   $249 = $4;
   STACKTOP = sp;return ($249|0);
  }
 }
 $107 = $6;
 $108 = $107 < 5.0E+6;
 $109 = $7;
 if (!($108)) {
  $194 = (+Math_abs((+$109)));
  $195 = $6;
  $196 = (+Math_abs((+$195)));
  $197 = $194 < $196;
  if ($197) {
   $198 = $5;
   $199 = $7;
   $200 = $198 * $199;
   $201 = (+Math_abs((+$200)));
   $202 = $6;
   $203 = (+Math_abs((+$202)));
   $204 = (+Math_sqrt((+$203)));
   $205 = $6;
   $206 = $7;
   $207 = $205 - $206;
   $208 = (+Math_abs((+$207)));
   $209 = $204 * $208;
   $210 = $201 < $209;
   if ($210) {
    $211 = $5;
    $212 = $6;
    $213 = $7;
    $214 = $8;
    $215 = (_hyperg_1F1_largebx($211,$212,$213,$214)|0);
    $4 = $215;
    $249 = $4;
    STACKTOP = sp;return ($249|0);
   }
  }
  $216 = $5;
  $217 = $6;
  $218 = $7;
  $219 = $8;
  $220 = (_hyperg_1F1_large2bm4a($216,$217,$218,$219)|0);
  $4 = $220;
  $249 = $4;
  STACKTOP = sp;return ($249|0);
 }
 $110 = 1.3999999999999999 * $109;
 $111 = $6;
 $112 = $110 - $111;
 $113 = (+Math_ceil((+$112)));
 $114 = $113 + 1.0;
 $16 = $114;
 $115 = $6;
 $116 = $16;
 $117 = $115 + $116;
 $17 = $117;
 $118 = $5;
 $119 = $17;
 $120 = $119 + 1.0;
 $121 = $7;
 $122 = (_gsl_sf_hyperg_1F1_series_e($118,$120,$121,$18)|0);
 $23 = $122;
 $123 = $5;
 $124 = $17;
 $125 = $7;
 $126 = (_gsl_sf_hyperg_1F1_series_e($123,$124,$125,$19)|0);
 $24 = $126;
 $127 = ((($18)) + 8|0);
 $128 = +HEAPF64[$127>>3];
 $129 = +HEAPF64[$18>>3];
 $130 = $128 / $129;
 $131 = (+Math_abs((+$130)));
 $132 = ((($19)) + 8|0);
 $133 = +HEAPF64[$132>>3];
 $134 = +HEAPF64[$19>>3];
 $135 = $133 / $134;
 $136 = (+Math_abs((+$135)));
 $137 = $131 + $136;
 $25 = $137;
 $138 = +HEAPF64[$18>>3];
 $20 = $138;
 $139 = +HEAPF64[$19>>3];
 $21 = $139;
 while(1) {
  $140 = $17;
  $141 = $6;
  $142 = $141 + 0.10000000000000001;
  $143 = $140 > $142;
  if (!($143)) {
   break;
  }
  $144 = $7;
  $145 = $17;
  $146 = $144 + $145;
  $147 = $146 - 1.0;
  $148 = $21;
  $149 = $147 * $148;
  $150 = $7;
  $151 = $17;
  $152 = $5;
  $153 = $151 - $152;
  $154 = $150 * $153;
  $155 = $17;
  $156 = $154 / $155;
  $157 = $20;
  $158 = $156 * $157;
  $159 = $149 - $158;
  $160 = $17;
  $161 = $160 - 1.0;
  $162 = $159 / $161;
  $22 = $162;
  $163 = $17;
  $164 = $163 - 1.0;
  $17 = $164;
  $165 = $21;
  $20 = $165;
  $166 = $22;
  $21 = $166;
 }
 $167 = $21;
 $168 = $8;
 HEAPF64[$168>>3] = $167;
 $169 = $25;
 $170 = $16;
 $171 = (+Math_abs((+$170)));
 $172 = $171 + 1.0;
 $173 = $169 * $172;
 $174 = $21;
 $175 = (+Math_abs((+$174)));
 $176 = $173 * $175;
 $177 = $8;
 $178 = ((($177)) + 8|0);
 HEAPF64[$178>>3] = $176;
 $179 = $21;
 $180 = (+Math_abs((+$179)));
 $181 = 4.4408920985006262E-16 * $180;
 $182 = $8;
 $183 = ((($182)) + 8|0);
 $184 = +HEAPF64[$183>>3];
 $185 = $184 + $181;
 HEAPF64[$183>>3] = $185;
 $186 = $23;
 $187 = ($186|0)!=(0);
 if ($187) {
  $188 = $23;
  $193 = $188;
 } else {
  $189 = $24;
  $190 = ($189|0)!=(0);
  $191 = $24;
  $192 = $190 ? $191 : 0;
  $193 = $192;
 }
 $4 = $193;
 $249 = $4;
 STACKTOP = sp;return ($249|0);
}
function _hyperg_1F1_ab_pos($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0.0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0;
 var $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0;
 var $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0;
 var $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0;
 var $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0;
 var $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0;
 var $462 = 0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0.0, $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0.0;
 var $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0;
 var $499 = 0.0, $5 = 0.0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0;
 var $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0;
 var $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0;
 var $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0;
 var $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0.0, $583 = 0.0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0, $598 = 0.0, $599 = 0.0, $6 = 0.0, $60 = 0.0, $600 = 0.0, $601 = 0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0;
 var $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0.0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0, $619 = 0.0, $62 = 0.0, $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0.0;
 var $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0.0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0.0;
 var $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0;
 var $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0;
 var $679 = 0.0, $68 = 0.0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0.0, $696 = 0.0;
 var $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0.0, $70 = 0.0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0.0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0.0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0.0;
 var $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0.0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0, $747 = 0.0, $748 = 0.0, $749 = 0, $75 = 0.0;
 var $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0.0, $756 = 0.0, $757 = 0, $758 = 0.0, $759 = 0.0, $76 = 0.0, $760 = 0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0, $766 = 0.0, $767 = 0.0, $768 = 0.0;
 var $769 = 0.0, $77 = 0.0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0, $779 = 0.0, $78 = 0.0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0;
 var $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0.0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0, $80 = 0.0, $800 = 0.0, $801 = 0.0, $802 = 0.0, $803 = 0.0;
 var $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0.0, $808 = 0.0, $809 = 0.0, $81 = 0.0, $810 = 0.0, $811 = 0.0, $812 = 0.0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0.0, $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0.0;
 var $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0.0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0.0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0.0, $839 = 0.0, $84 = 0;
 var $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0, $844 = 0.0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0.0, $85 = 0.0, $850 = 0.0, $851 = 0.0, $852 = 0, $853 = 0.0, $854 = 0.0, $855 = 0.0, $856 = 0.0, $857 = 0.0, $858 = 0.0;
 var $859 = 0.0, $86 = 0.0, $860 = 0.0, $861 = 0.0, $862 = 0.0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0.0, $87 = 0.0, $870 = 0.0, $871 = 0.0, $872 = 0.0, $873 = 0.0, $874 = 0, $875 = 0.0, $876 = 0.0;
 var $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0.0, $880 = 0.0, $881 = 0.0, $882 = 0.0, $883 = 0.0, $884 = 0.0, $885 = 0.0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(768|0);
 $10 = sp + 664|0;
 $18 = sp + 600|0;
 $21 = sp + 576|0;
 $23 = sp + 568|0;
 $33 = sp + 488|0;
 $34 = sp + 472|0;
 $49 = sp + 360|0;
 $50 = sp + 344|0;
 $64 = sp + 240|0;
 $65 = sp + 224|0;
 $90 = sp + 40|0;
 $91 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $97 = $7;
 $98 = (+Math_abs((+$97)));
 $9 = $98;
 $99 = $6;
 $100 = $99 < 10.0;
 $101 = $5;
 $102 = $101 < 10.0;
 $or$cond = $100 & $102;
 $103 = $9;
 $104 = $103 < 5.0;
 $or$cond3 = $or$cond & $104;
 if (!($or$cond3)) {
  $105 = $6;
  $106 = $5;
  $107 = $9;
  $108 = $106 * $107;
  $109 = $105 > $108;
  if (!($109)) {
   $110 = $6;
   $111 = $5;
   $112 = $110 > $111;
   $113 = $9;
   $114 = $113 < 5.0;
   $or$cond5 = $112 & $114;
   if (!($or$cond5)) {
    $120 = $7;
    $121 = $120 < -100.0;
    if ($121) {
     $122 = $5;
     $123 = (+Math_abs((+$122)));
     $124 = (+_GSL_MAX_DBL($123,1.0));
     $125 = $5;
     $126 = 1.0 + $125;
     $127 = $6;
     $128 = $126 - $127;
     $129 = (+Math_abs((+$128)));
     $130 = (+_GSL_MAX_DBL($129,1.0));
     $131 = $124 * $130;
     $132 = $7;
     $133 = (+Math_abs((+$132)));
     $134 = 0.69999999999999996 * $133;
     $135 = $131 < $134;
     if ($135) {
      $136 = $5;
      $137 = $6;
      $138 = $7;
      $139 = $8;
      $140 = (_hyperg_1F1_asymp_negx($136,$137,$138,$139)|0);
      $4 = $140;
      $889 = $4;
      STACKTOP = sp;return ($889|0);
     }
    }
    $141 = $7;
    $142 = $141 > 100.0;
    if ($142) {
     $143 = $6;
     $144 = $5;
     $145 = $143 - $144;
     $146 = (+Math_abs((+$145)));
     $147 = (+_GSL_MAX_DBL($146,1.0));
     $148 = $5;
     $149 = 1.0 - $148;
     $150 = (+Math_abs((+$149)));
     $151 = (+_GSL_MAX_DBL($150,1.0));
     $152 = $147 * $151;
     $153 = $7;
     $154 = (+Math_abs((+$153)));
     $155 = 0.69999999999999996 * $154;
     $156 = $152 < $155;
     if ($156) {
      $157 = $5;
      $158 = $6;
      $159 = $7;
      $160 = $8;
      $161 = (_hyperg_1F1_asymp_posx($157,$158,$159,$160)|0);
      $4 = $161;
      $889 = $4;
      STACKTOP = sp;return ($889|0);
     }
    }
    $162 = $6;
    $163 = $5;
    $164 = $162 - $163;
    $165 = (+Math_abs((+$164)));
    $166 = $165 <= 1.0;
    if ($166) {
     $167 = $5;
     $168 = $6;
     $169 = $167 - $168;
     $170 = $6;
     $171 = $7;
     $172 = $8;
     $173 = (_hyperg_1F1_beps_bgt0($169,$170,$171,$172)|0);
     $4 = $173;
     $889 = $4;
     STACKTOP = sp;return ($889|0);
    }
    $174 = $6;
    $175 = $5;
    $176 = $174 > $175;
    if ($176) {
     $177 = $6;
     $178 = $5;
     $179 = 2.0 * $178;
     $180 = $7;
     $181 = $179 + $180;
     $182 = $177 >= $181;
     if ($182) {
      $183 = $5;
      $184 = $6;
      $185 = $7;
      $186 = (_hyperg_1F1_CF1_p_ser($183,$184,$185,$10)|0);
      $11 = $186;
      $187 = $7;
      $188 = $5;
      $189 = $187 / $188;
      $190 = +HEAPF64[$10>>3];
      $191 = $189 * $190;
      $192 = 1.0 + $191;
      $12 = $192;
      $13 = 1.4916681462400413E-154;
      $193 = $12;
      $194 = $13;
      $195 = $193 * $194;
      $14 = $195;
      $196 = $14;
      $15 = $196;
      $197 = $13;
      $16 = $197;
      $198 = $5;
      $20 = $198;
      while(1) {
       $199 = $20;
       $200 = $199 > 0.5;
       $201 = $20;
       if (!($200)) {
        break;
       }
       $202 = $15;
       $203 = $201 * $202;
       $204 = $20;
       $205 = 2.0 * $204;
       $206 = $6;
       $207 = $205 - $206;
       $208 = $7;
       $209 = $207 + $208;
       $210 = $16;
       $211 = $209 * $210;
       $212 = $203 - $211;
       $213 = $6;
       $214 = $20;
       $215 = $213 - $214;
       $216 = $212 / $215;
       $17 = $216;
       $217 = $16;
       $15 = $217;
       $218 = $17;
       $16 = $218;
       $219 = $20;
       $220 = $219 - 1.0;
       $20 = $220;
      }
      $221 = $6;
      $222 = $7;
      $223 = (_hyperg_1F1_small_a_bgt0($201,$221,$222,$18)|0);
      $19 = $223;
      $224 = $13;
      $225 = $16;
      $226 = $224 / $225;
      $227 = +HEAPF64[$18>>3];
      $228 = $226 * $227;
      $229 = $8;
      HEAPF64[$229>>3] = $228;
      $230 = $13;
      $231 = $16;
      $232 = $230 / $231;
      $233 = (+Math_abs((+$232)));
      $234 = ((($18)) + 8|0);
      $235 = +HEAPF64[$234>>3];
      $236 = $233 * $235;
      $237 = $8;
      $238 = ((($237)) + 8|0);
      HEAPF64[$238>>3] = $236;
      $239 = $5;
      $240 = (+Math_abs((+$239)));
      $241 = $240 + 1.0;
      $242 = 4.4408920985006262E-16 * $241;
      $243 = $8;
      $244 = +HEAPF64[$243>>3];
      $245 = (+Math_abs((+$244)));
      $246 = $242 * $245;
      $247 = $8;
      $248 = ((($247)) + 8|0);
      $249 = +HEAPF64[$248>>3];
      $250 = $249 + $246;
      HEAPF64[$248>>3] = $250;
      $251 = $19;
      $252 = ($251|0)!=(0);
      if ($252) {
       $253 = $19;
       $258 = $253;
      } else {
       $254 = $11;
       $255 = ($254|0)!=(0);
       $256 = $11;
       $257 = $255 ? $256 : 0;
       $258 = $257;
      }
      $4 = $258;
      $889 = $4;
      STACKTOP = sp;return ($889|0);
     }
    }
    $259 = $6;
    $260 = $5;
    $261 = $259 > $260;
    if ($261) {
     $262 = $6;
     $263 = $5;
     $264 = 2.0 * $263;
     $265 = $7;
     $266 = $264 + $265;
     $267 = $262 < $266;
     if ($267) {
      $268 = $6;
      $269 = $7;
      $270 = $268 > $269;
      if ($270) {
       $271 = $5;
       $272 = $6;
       $273 = $7;
       $274 = (_hyperg_1F1_CF1_p_ser($271,$272,$273,$23)|0);
       $24 = $274;
       $275 = $7;
       $276 = $5;
       $277 = $275 / $276;
       $278 = +HEAPF64[$23>>3];
       $279 = $277 * $278;
       $280 = 1.0 + $279;
       $25 = $280;
       $26 = 1.4916681462400413E-154;
       $281 = $26;
       $27 = $281;
       $282 = $25;
       $283 = $27;
       $284 = $282 * $283;
       $28 = $284;
       $285 = $5;
       $286 = $285 + 1.0;
       $30 = $286;
       while(1) {
        $287 = $30;
        $288 = $6;
        $289 = $288 - 0.5;
        $290 = $287 < $289;
        if (!($290)) {
         break;
        }
        $291 = $6;
        $292 = $30;
        $293 = $291 - $292;
        $294 = $27;
        $295 = $293 * $294;
        $296 = $30;
        $297 = 2.0 * $296;
        $298 = $6;
        $299 = $297 - $298;
        $300 = $7;
        $301 = $299 + $300;
        $302 = $28;
        $303 = $301 * $302;
        $304 = $295 + $303;
        $305 = $30;
        $306 = $304 / $305;
        $29 = $306;
        $307 = $28;
        $27 = $307;
        $308 = $29;
        $28 = $308;
        $309 = $30;
        $310 = $309 + 1.0;
        $30 = $310;
       }
       $311 = $30;
       $312 = $6;
       $313 = $311 - $312;
       $314 = $6;
       $315 = $7;
       $316 = (_hyperg_1F1_beps_bgt0($313,$314,$315,$21)|0);
       $22 = $316;
       $317 = $26;
       $318 = $28;
       $319 = $317 / $318;
       $320 = +HEAPF64[$21>>3];
       $321 = $319 * $320;
       $322 = $8;
       HEAPF64[$322>>3] = $321;
       $323 = $26;
       $324 = $28;
       $325 = $323 / $324;
       $326 = (+Math_abs((+$325)));
       $327 = ((($21)) + 8|0);
       $328 = +HEAPF64[$327>>3];
       $329 = $326 * $328;
       $330 = $8;
       $331 = ((($330)) + 8|0);
       HEAPF64[$331>>3] = $329;
       $332 = $6;
       $333 = $5;
       $334 = $332 - $333;
       $335 = (+Math_abs((+$334)));
       $336 = $335 + 1.0;
       $337 = 4.4408920985006262E-16 * $336;
       $338 = $8;
       $339 = +HEAPF64[$338>>3];
       $340 = (+Math_abs((+$339)));
       $341 = $337 * $340;
       $342 = $8;
       $343 = ((($342)) + 8|0);
       $344 = +HEAPF64[$343>>3];
       $345 = $344 + $341;
       HEAPF64[$343>>3] = $345;
       $346 = $22;
       $347 = ($346|0)!=(0);
       if ($347) {
        $348 = $22;
        $353 = $348;
       } else {
        $349 = $24;
        $350 = ($349|0)!=(0);
        $351 = $24;
        $352 = $350 ? $351 : 0;
        $353 = $352;
       }
       $4 = $353;
       $889 = $4;
       STACKTOP = sp;return ($889|0);
      }
     }
    }
    $354 = $7;
    $355 = $354 >= 0.0;
    if ($355) {
     $356 = $6;
     $357 = $5;
     $358 = $356 < $357;
     $359 = $5;
     if ($358) {
      $360 = $6;
      $361 = $359 - $360;
      $362 = (+Math_floor((+$361)));
      $31 = $362;
      $363 = $5;
      $364 = $6;
      $365 = $363 - $364;
      $366 = $31;
      $367 = $365 - $366;
      $32 = $367;
      $368 = $32;
      $369 = $368 - 1.0;
      $370 = $6;
      $371 = $7;
      $372 = (_hyperg_1F1_beps_bgt0($369,$370,$371,$33)|0);
      $35 = $372;
      $373 = $32;
      $374 = $6;
      $375 = $7;
      $376 = (_hyperg_1F1_beps_bgt0($373,$374,$375,$34)|0);
      $36 = $376;
      $377 = +HEAPF64[$33>>3];
      $37 = $377;
      $378 = +HEAPF64[$34>>3];
      $38 = $378;
      $379 = $37;
      $39 = $379;
      $380 = $38;
      $40 = $380;
      $381 = $37;
      $382 = (+Math_abs((+$381)));
      $383 = $38;
      $384 = (+Math_abs((+$383)));
      $385 = $382 + $384;
      $43 = $385;
      $44 = 1.7976931348623157E+308;
      $386 = ((($33)) + 8|0);
      $387 = +HEAPF64[$386>>3];
      $388 = +HEAPF64[$33>>3];
      $389 = $387 / $388;
      $390 = (+Math_abs((+$389)));
      $46 = $390;
      $391 = ((($34)) + 8|0);
      $392 = +HEAPF64[$391>>3];
      $393 = +HEAPF64[$34>>3];
      $394 = $392 / $393;
      $395 = (+Math_abs((+$394)));
      $47 = $395;
      $396 = $6;
      $397 = $32;
      $398 = $396 + $397;
      $42 = $398;
      while(1) {
       $399 = $42;
       $400 = $5;
       $401 = $400 - 0.10000000000000001;
       $402 = $399 < $401;
       if (!($402)) {
        break;
       }
       $403 = $6;
       $404 = $42;
       $405 = $403 - $404;
       $406 = $39;
       $407 = $405 * $406;
       $408 = $42;
       $409 = 2.0 * $408;
       $410 = $6;
       $411 = $409 - $410;
       $412 = $7;
       $413 = $411 + $412;
       $414 = $40;
       $415 = $413 * $414;
       $416 = $407 + $415;
       $417 = $42;
       $418 = $416 / $417;
       $41 = $418;
       $419 = $40;
       $39 = $419;
       $420 = $41;
       $40 = $420;
       $421 = $39;
       $422 = (+Math_abs((+$421)));
       $423 = $40;
       $424 = (+Math_abs((+$423)));
       $425 = $422 + $424;
       $426 = $44;
       $427 = (+_GSL_MIN_DBL($425,$426));
       $44 = $427;
       $428 = $42;
       $429 = $428 + 1.0;
       $42 = $429;
      }
      $430 = $43;
      $431 = $44;
      $432 = $430 / $431;
      $45 = $432;
      $433 = $40;
      $434 = $8;
      HEAPF64[$434>>3] = $433;
      $435 = $46;
      $436 = $47;
      $437 = $435 + $436;
      $438 = $437 + 2.2204460492503131E-16;
      $439 = 2.0 * $438;
      $440 = $6;
      $441 = $5;
      $442 = $440 - $441;
      $443 = (+Math_abs((+$442)));
      $444 = $443 + 1.0;
      $445 = $439 * $444;
      $446 = $40;
      $447 = (+Math_abs((+$446)));
      $448 = $445 * $447;
      $449 = $8;
      $450 = ((($449)) + 8|0);
      HEAPF64[$450>>3] = $448;
      $451 = $46;
      $452 = $47;
      $453 = $451 + $452;
      $454 = 2.0 * $453;
      $455 = $45;
      $456 = $454 * $455;
      $457 = $45;
      $458 = $456 * $457;
      $459 = $40;
      $460 = (+Math_abs((+$459)));
      $461 = $458 * $460;
      $462 = $8;
      $463 = ((($462)) + 8|0);
      $464 = +HEAPF64[$463>>3];
      $465 = $464 + $461;
      HEAPF64[$463>>3] = $465;
      $466 = $40;
      $467 = (+Math_abs((+$466)));
      $468 = 4.4408920985006262E-16 * $467;
      $469 = $8;
      $470 = ((($469)) + 8|0);
      $471 = +HEAPF64[$470>>3];
      $472 = $471 + $468;
      HEAPF64[$470>>3] = $472;
      $473 = $35;
      $474 = ($473|0)!=(0);
      if ($474) {
       $475 = $35;
       $480 = $475;
      } else {
       $476 = $36;
       $477 = ($476|0)!=(0);
       $478 = $36;
       $479 = $477 ? $478 : 0;
       $480 = $479;
      }
      $4 = $480;
      $889 = $4;
      STACKTOP = sp;return ($889|0);
     } else {
      $481 = $5;
      $482 = (+Math_floor((+$481)));
      $483 = $359 - $482;
      $48 = $483;
      $484 = $48;
      $485 = $6;
      $486 = $7;
      $487 = (_hyperg_1F1_small_a_bgt0($484,$485,$486,$49)|0);
      $51 = $487;
      $488 = $48;
      $489 = $488 + 1.0;
      $490 = $6;
      $491 = $7;
      $492 = (_hyperg_1F1_small_a_bgt0($489,$490,$491,$50)|0);
      $52 = $492;
      $493 = +HEAPF64[$49>>3];
      $53 = $493;
      $494 = +HEAPF64[$50>>3];
      $54 = $494;
      $495 = $54;
      $496 = (+Math_abs((+$495)));
      $497 = $53;
      $498 = (+Math_abs((+$497)));
      $499 = $496 + $498;
      $57 = $499;
      $58 = 1.7976931348623157E+308;
      $500 = ((($49)) + 8|0);
      $501 = +HEAPF64[$500>>3];
      $502 = +HEAPF64[$49>>3];
      $503 = $501 / $502;
      $504 = (+Math_abs((+$503)));
      $60 = $504;
      $505 = ((($50)) + 8|0);
      $506 = +HEAPF64[$505>>3];
      $507 = +HEAPF64[$50>>3];
      $508 = $506 / $507;
      $509 = (+Math_abs((+$508)));
      $61 = $509;
      $510 = $48;
      $511 = $510 + 1.0;
      $56 = $511;
      while(1) {
       $512 = $56;
       $513 = $5;
       $514 = $513 - 0.10000000000000001;
       $515 = $512 < $514;
       if (!($515)) {
        break;
       }
       $516 = $6;
       $517 = $56;
       $518 = $516 - $517;
       $519 = $53;
       $520 = $518 * $519;
       $521 = $56;
       $522 = 2.0 * $521;
       $523 = $6;
       $524 = $522 - $523;
       $525 = $7;
       $526 = $524 + $525;
       $527 = $54;
       $528 = $526 * $527;
       $529 = $520 + $528;
       $530 = $56;
       $531 = $529 / $530;
       $55 = $531;
       $532 = $54;
       $53 = $532;
       $533 = $55;
       $54 = $533;
       $534 = $54;
       $535 = (+Math_abs((+$534)));
       $536 = $53;
       $537 = (+Math_abs((+$536)));
       $538 = $535 + $537;
       $539 = $58;
       $540 = (+_GSL_MIN_DBL($538,$539));
       $58 = $540;
       $541 = $56;
       $542 = $541 + 1.0;
       $56 = $542;
      }
      $543 = $57;
      $544 = $58;
      $545 = $543 / $544;
      $59 = $545;
      $546 = $54;
      $547 = $8;
      HEAPF64[$547>>3] = $546;
      $548 = $60;
      $549 = $61;
      $550 = $548 + $549;
      $551 = $550 + 2.2204460492503131E-16;
      $552 = 2.0 * $551;
      $553 = $5;
      $554 = (+Math_abs((+$553)));
      $555 = $554 + 1.0;
      $556 = $552 * $555;
      $557 = $54;
      $558 = (+Math_abs((+$557)));
      $559 = $556 * $558;
      $560 = $8;
      $561 = ((($560)) + 8|0);
      HEAPF64[$561>>3] = $559;
      $562 = $60;
      $563 = $61;
      $564 = $562 + $563;
      $565 = 2.0 * $564;
      $566 = $59;
      $567 = $565 * $566;
      $568 = $59;
      $569 = $567 * $568;
      $570 = $54;
      $571 = (+Math_abs((+$570)));
      $572 = $569 * $571;
      $573 = $8;
      $574 = ((($573)) + 8|0);
      $575 = +HEAPF64[$574>>3];
      $576 = $575 + $572;
      HEAPF64[$574>>3] = $576;
      $577 = $54;
      $578 = (+Math_abs((+$577)));
      $579 = 4.4408920985006262E-16 * $578;
      $580 = $8;
      $581 = ((($580)) + 8|0);
      $582 = +HEAPF64[$581>>3];
      $583 = $582 + $579;
      HEAPF64[$581>>3] = $583;
      $584 = $51;
      $585 = ($584|0)!=(0);
      if ($585) {
       $586 = $51;
       $591 = $586;
      } else {
       $587 = $52;
       $588 = ($587|0)!=(0);
       $589 = $52;
       $590 = $588 ? $589 : 0;
       $591 = $590;
      }
      $4 = $591;
      $889 = $4;
      STACKTOP = sp;return ($889|0);
     }
    }
    $592 = $5;
    $593 = $6;
    $594 = $7;
    $595 = $593 - $594;
    $596 = 0.5 * $595;
    $597 = $592 <= $596;
    if (!($597)) {
     $598 = $5;
     $599 = $7;
     $600 = - $599;
     $601 = $598 >= $600;
     if (!($601)) {
      $722 = $5;
      $723 = $5;
      $724 = (+Math_floor((+$723)));
      $725 = $722 - $724;
      $77 = $725;
      $726 = $6;
      $727 = $7;
      $728 = $726 - $727;
      $729 = 0.5 * $728;
      $730 = (+Math_floor((+$729)));
      $731 = $77;
      $732 = $730 + $731;
      $78 = $732;
      $733 = $78;
      $734 = $6;
      $735 = $733 - $734;
      $736 = (+Math_floor((+$735)));
      $79 = $736;
      $737 = $79;
      $738 = 1.0 + $737;
      $739 = $78;
      $740 = $738 - $739;
      $741 = $6;
      $742 = $740 + $741;
      $80 = $742;
      $743 = $80;
      $744 = - $743;
      $745 = $78;
      $746 = $80;
      $747 = $745 + $746;
      $748 = $7;
      $749 = (_hyperg_1F1_beps_bgt0($744,$747,$748,$90)|0);
      $92 = $749;
      $750 = $80;
      $751 = 1.0 - $750;
      $752 = $78;
      $753 = $80;
      $754 = $752 + $753;
      $755 = $754 - 1.0;
      $756 = $7;
      $757 = (_hyperg_1F1_beps_bgt0($751,$755,$756,$91)|0);
      $93 = $757;
      $758 = +HEAPF64[$90>>3];
      $94 = $758;
      $759 = +HEAPF64[$91>>3];
      $95 = $759;
      $760 = ((($90)) + 8|0);
      $761 = +HEAPF64[$760>>3];
      $762 = +HEAPF64[$90>>3];
      $763 = $761 / $762;
      $764 = (+Math_abs((+$763)));
      $765 = ((($91)) + 8|0);
      $766 = +HEAPF64[$765>>3];
      $767 = +HEAPF64[$91>>3];
      $768 = $766 / $767;
      $769 = (+Math_abs((+$768)));
      $770 = $764 + $769;
      $89 = $770;
      $771 = $78;
      $772 = $80;
      $773 = $771 + $772;
      $774 = $773 - 1.0;
      $88 = $774;
      while(1) {
       $775 = $88;
       $776 = $6;
       $777 = $776 + 0.10000000000000001;
       $778 = $775 > $777;
       if (!($778)) {
        break;
       }
       $779 = $88;
       $780 = - $779;
       $781 = $88;
       $782 = 1.0 - $781;
       $783 = $7;
       $784 = $782 - $783;
       $785 = $780 * $784;
       $786 = $95;
       $787 = $785 * $786;
       $788 = $7;
       $789 = $88;
       $790 = $78;
       $791 = $789 - $790;
       $792 = $788 * $791;
       $793 = $94;
       $794 = $792 * $793;
       $795 = $787 - $794;
       $796 = $88;
       $797 = $88;
       $798 = $797 - 1.0;
       $799 = $796 * $798;
       $800 = $795 / $799;
       $96 = $800;
       $801 = $95;
       $94 = $801;
       $802 = $96;
       $95 = $802;
       $803 = $88;
       $804 = $803 - 1.0;
       $88 = $804;
      }
      $805 = $94;
      $82 = $805;
      $806 = $95;
      $81 = $806;
      $807 = $6;
      $808 = $78;
      $809 = $7;
      $810 = $808 + $809;
      $811 = $807 * $810;
      $812 = $81;
      $813 = $811 * $812;
      $814 = $7;
      $815 = $78;
      $816 = $6;
      $817 = $815 - $816;
      $818 = $814 * $817;
      $819 = $82;
      $820 = $818 * $819;
      $821 = $813 + $820;
      $822 = $78;
      $823 = $6;
      $824 = $822 * $823;
      $825 = $821 / $824;
      $83 = $825;
      $826 = $92;
      $827 = ($826|0)!=(0);
      if ($827) {
       $828 = $92;
       $833 = $828;
      } else {
       $829 = $93;
       $830 = ($829|0)!=(0);
       $831 = $93;
       $832 = $830 ? $831 : 0;
       $833 = $832;
      }
      $84 = $833;
      $834 = $78;
      $835 = $5;
      $836 = $835 - 0.10000000000000001;
      $837 = $834 >= $836;
      L81: do {
       if ($837) {
        $838 = $81;
        $86 = $838;
       } else {
        $839 = $78;
        $840 = $839 + 1.0;
        $841 = $5;
        $842 = $841 - 0.10000000000000001;
        $843 = $840 >= $842;
        if ($843) {
         $844 = $83;
         $86 = $844;
         break;
        }
        $845 = $81;
        $85 = $845;
        $846 = $83;
        $86 = $846;
        $847 = $78;
        $848 = $847 + 1.0;
        $88 = $848;
        while(1) {
         $849 = $88;
         $850 = $5;
         $851 = $850 - 0.10000000000000001;
         $852 = $849 < $851;
         if (!($852)) {
          break L81;
         }
         $853 = $6;
         $854 = $88;
         $855 = $853 - $854;
         $856 = $85;
         $857 = $855 * $856;
         $858 = $88;
         $859 = 2.0 * $858;
         $860 = $6;
         $861 = $859 - $860;
         $862 = $7;
         $863 = $861 + $862;
         $864 = $86;
         $865 = $863 * $864;
         $866 = $857 + $865;
         $867 = $88;
         $868 = $866 / $867;
         $87 = $868;
         $869 = $86;
         $85 = $869;
         $870 = $87;
         $86 = $870;
         $871 = $88;
         $872 = $871 + 1.0;
         $88 = $872;
        }
       }
      } while(0);
      $873 = $86;
      $874 = $8;
      HEAPF64[$874>>3] = $873;
      $875 = $89;
      $876 = $875 + 2.2204460492503131E-16;
      $877 = $6;
      $878 = $5;
      $879 = $877 - $878;
      $880 = (+Math_abs((+$879)));
      $881 = $880 + 1.0;
      $882 = $876 * $881;
      $883 = $86;
      $884 = (+Math_abs((+$883)));
      $885 = $882 * $884;
      $886 = $8;
      $887 = ((($886)) + 8|0);
      HEAPF64[$887>>3] = $885;
      $888 = $84;
      $4 = $888;
      $889 = $4;
      STACKTOP = sp;return ($889|0);
     }
    }
    $602 = $5;
    $603 = $6;
    $604 = $602 - $603;
    $605 = (+Math_floor((+$604)));
    $62 = $605;
    $606 = $62;
    $607 = 1.0 + $606;
    $608 = $5;
    $609 = $607 - $608;
    $610 = $6;
    $611 = $609 + $610;
    $63 = $611;
    $612 = $63;
    $613 = - $612;
    $614 = $5;
    $615 = $63;
    $616 = $614 + $615;
    $617 = $7;
    $618 = (_hyperg_1F1_beps_bgt0($613,$616,$617,$64)|0);
    $66 = $618;
    $619 = $63;
    $620 = 1.0 - $619;
    $621 = $5;
    $622 = $63;
    $623 = $621 + $622;
    $624 = $623 - 1.0;
    $625 = $7;
    $626 = (_hyperg_1F1_beps_bgt0($620,$624,$625,$65)|0);
    $67 = $626;
    $627 = +HEAPF64[$64>>3];
    $68 = $627;
    $628 = +HEAPF64[$65>>3];
    $69 = $628;
    $629 = $68;
    $630 = (+Math_abs((+$629)));
    $631 = $69;
    $632 = (+Math_abs((+$631)));
    $633 = $630 + $632;
    $72 = $633;
    $73 = 1.7976931348623157E+308;
    $634 = ((($64)) + 8|0);
    $635 = +HEAPF64[$634>>3];
    $636 = +HEAPF64[$64>>3];
    $637 = $635 / $636;
    $638 = (+Math_abs((+$637)));
    $75 = $638;
    $639 = ((($65)) + 8|0);
    $640 = +HEAPF64[$639>>3];
    $641 = +HEAPF64[$65>>3];
    $642 = $640 / $641;
    $643 = (+Math_abs((+$642)));
    $76 = $643;
    $644 = $5;
    $645 = $63;
    $646 = $644 + $645;
    $647 = $646 - 1.0;
    $71 = $647;
    while(1) {
     $648 = $71;
     $649 = $6;
     $650 = $649 + 0.10000000000000001;
     $651 = $648 > $650;
     if (!($651)) {
      break;
     }
     $652 = $71;
     $653 = - $652;
     $654 = $71;
     $655 = 1.0 - $654;
     $656 = $7;
     $657 = $655 - $656;
     $658 = $653 * $657;
     $659 = $69;
     $660 = $658 * $659;
     $661 = $7;
     $662 = $71;
     $663 = $5;
     $664 = $662 - $663;
     $665 = $661 * $664;
     $666 = $68;
     $667 = $665 * $666;
     $668 = $660 - $667;
     $669 = $71;
     $670 = $71;
     $671 = $670 - 1.0;
     $672 = $669 * $671;
     $673 = $668 / $672;
     $70 = $673;
     $674 = $69;
     $68 = $674;
     $675 = $70;
     $69 = $675;
     $676 = $68;
     $677 = (+Math_abs((+$676)));
     $678 = $69;
     $679 = (+Math_abs((+$678)));
     $680 = $677 + $679;
     $681 = $73;
     $682 = (+_GSL_MIN_DBL($680,$681));
     $73 = $682;
     $683 = $71;
     $684 = $683 - 1.0;
     $71 = $684;
    }
    $685 = $72;
    $686 = $73;
    $687 = $685 / $686;
    $74 = $687;
    $688 = $69;
    $689 = $8;
    HEAPF64[$689>>3] = $688;
    $690 = $75;
    $691 = $76;
    $692 = $690 + $691;
    $693 = $692 + 2.2204460492503131E-16;
    $694 = 2.0 * $693;
    $695 = $6;
    $696 = $5;
    $697 = $695 - $696;
    $698 = (+Math_abs((+$697)));
    $699 = $698 + 1.0;
    $700 = $694 * $699;
    $701 = $69;
    $702 = (+Math_abs((+$701)));
    $703 = $700 * $702;
    $704 = $8;
    $705 = ((($704)) + 8|0);
    HEAPF64[$705>>3] = $703;
    $706 = $74;
    $707 = $74;
    $708 = $706 * $707;
    $709 = $708 + 1.0;
    $710 = $8;
    $711 = ((($710)) + 8|0);
    $712 = +HEAPF64[$711>>3];
    $713 = $712 * $709;
    HEAPF64[$711>>3] = $713;
    $714 = $66;
    $715 = ($714|0)!=(0);
    if ($715) {
     $716 = $66;
     $721 = $716;
    } else {
     $717 = $67;
     $718 = ($717|0)!=(0);
     $719 = $67;
     $720 = $718 ? $719 : 0;
     $721 = $720;
    }
    $4 = $721;
    $889 = $4;
    STACKTOP = sp;return ($889|0);
   }
  }
 }
 $115 = $5;
 $116 = $6;
 $117 = $7;
 $118 = $8;
 $119 = (_gsl_sf_hyperg_1F1_series_e($115,$116,$117,$118)|0);
 $4 = $119;
 $889 = $4;
 STACKTOP = sp;return ($889|0);
}
function _hyperg_1F1_ab_neg($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $16 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $6;
 $23 = $5;
 $24 = $22 - $23;
 $9 = $24;
 $25 = $7;
 $26 = (+Math_abs((+$25)));
 $10 = $26;
 $27 = $5;
 $28 = (+Math_abs((+$27)));
 $11 = $28;
 $29 = $6;
 $30 = (+Math_abs((+$29)));
 $12 = $30;
 $31 = $11;
 $32 = $31 > 1.0;
 $33 = $11;
 $34 = $32 ? $33 : 1.0;
 $13 = $34;
 $35 = $12;
 $36 = $35 > 1.0;
 $37 = $12;
 $38 = $36 ? $37 : 1.0;
 $14 = $38;
 $39 = $9;
 $40 = $9;
 $41 = $40 + 0.5;
 $42 = (+Math_floor((+$41)));
 $43 = $39 - $42;
 $44 = $43 < 2.2204460492503131E-14;
 $45 = $44&1;
 $15 = $45;
 $46 = $11;
 $47 = $46 < 10.0;
 $48 = $12;
 $49 = $48 < 10.0;
 $or$cond = $47 & $49;
 $50 = $10;
 $51 = $50 < 5.0;
 $or$cond3 = $or$cond & $51;
 if (!($or$cond3)) {
  $52 = $6;
  $53 = $5;
  $54 = (+Math_abs((+$53)));
  $55 = $54 > 1.0;
  $56 = $5;
  $57 = (+Math_abs((+$56)));
  $58 = $55 ? $57 : 1.0;
  $59 = 0.80000000000000004 * $58;
  $60 = $7;
  $61 = (+Math_abs((+$60)));
  $62 = $59 * $61;
  $63 = $52 > $62;
  if (!($63)) {
   $69 = $7;
   $70 = $69 > 0.0;
   if ($70) {
    $71 = $14;
    $72 = $13;
    $73 = $71 > $72;
    if ($73) {
     $74 = $13;
     $75 = $7;
     $76 = 2.7182818284590451 * $75;
     $77 = $14;
     $78 = $76 / $77;
     $79 = (+Math_log((+$78)));
     $80 = $74 * $79;
     $81 = $80 < -29.043653389117154;
     if ($81) {
      $82 = $5;
      $83 = $6;
      $84 = $7;
      $85 = $8;
      $86 = (_gsl_sf_hyperg_1F1_series_e($82,$83,$84,$85)|0);
      $4 = $86;
      $203 = $4;
      STACKTOP = sp;return ($203|0);
     }
    }
   }
   $87 = $10;
   $88 = $87 < 5.0;
   if ($88) {
    $89 = $9;
    $90 = (+Math_abs((+$89)));
    $91 = $90 < 10.0;
    $92 = $12;
    $93 = $92 < 10.0;
    $or$cond5 = $91 & $93;
    if (!($or$cond5)) {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    $94 = $6;
    $95 = $9;
    $96 = (+Math_abs((+$95)));
    $97 = (+_GSL_MAX_DBL($96,1.0));
    $98 = 0.80000000000000004 * $97;
    $99 = $10;
    $100 = $98 * $99;
    $101 = $94 > $100;
    if (!($101)) {
     $124 = $7;
     $125 = $124 < -30.0;
     if ($125) {
      $126 = $5;
      $127 = (+Math_abs((+$126)));
      $128 = (+_GSL_MAX_DBL($127,1.0));
      $129 = $5;
      $130 = 1.0 + $129;
      $131 = $6;
      $132 = $130 - $131;
      $133 = (+Math_abs((+$132)));
      $134 = (+_GSL_MAX_DBL($133,1.0));
      $135 = $128 * $134;
      $136 = $7;
      $137 = (+Math_abs((+$136)));
      $138 = 0.98999999999999999 * $137;
      $139 = $135 < $138;
      if ($139) {
       $140 = $5;
       $141 = $6;
       $142 = $7;
       $143 = $8;
       $144 = (_hyperg_1F1_asymp_negx($140,$141,$142,$143)|0);
       $4 = $144;
       $203 = $4;
       STACKTOP = sp;return ($203|0);
      }
     }
     $145 = $7;
     $146 = $145 > 100.0;
     if ($146) {
      $147 = $9;
      $148 = (+Math_abs((+$147)));
      $149 = (+_GSL_MAX_DBL($148,1.0));
      $150 = $5;
      $151 = 1.0 - $150;
      $152 = (+Math_abs((+$151)));
      $153 = (+_GSL_MAX_DBL($152,1.0));
      $154 = $149 * $153;
      $155 = $7;
      $156 = (+Math_abs((+$155)));
      $157 = 0.98999999999999999 * $156;
      $158 = $154 < $157;
      if ($158) {
       $159 = $5;
       $160 = $6;
       $161 = $7;
       $162 = $8;
       $163 = (_hyperg_1F1_asymp_posx($159,$160,$161,$162)|0);
       $4 = $163;
       $203 = $4;
       STACKTOP = sp;return ($203|0);
      }
     }
     $164 = $7;
     $165 = $164 > 0.0;
     if ($165) {
      $166 = $15;
      $167 = ($166|0)!=(0);
      $168 = $9;
      $169 = $168 > 0.0;
      $or$cond7 = $167 & $169;
      if (!($or$cond7)) {
       $170 = $5;
       $171 = $6;
       $172 = $7;
       $173 = $8;
       $174 = (_hyperg_1F1_U($170,$171,$172,$173)|0);
       $4 = $174;
       $203 = $4;
       STACKTOP = sp;return ($203|0);
      }
     }
     $175 = $7;
     $176 = $175 < 0.0;
     if ($176) {
      $177 = $6;
      $178 = $5;
      $179 = $177 - $178;
      $180 = $6;
      $181 = $7;
      $182 = - $181;
      $183 = $8;
      $184 = (_gsl_sf_hyperg_1F1_series_e($179,$180,$182,$183)|0);
      $19 = $184;
      $185 = $7;
      $186 = (+Math_exp((+$185)));
      $20 = $186;
      $187 = $20;
      $188 = $8;
      $189 = +HEAPF64[$188>>3];
      $190 = $189 * $187;
      HEAPF64[$188>>3] = $190;
      $191 = $20;
      $192 = $8;
      $193 = ((($192)) + 8|0);
      $194 = +HEAPF64[$193>>3];
      $195 = $194 * $191;
      HEAPF64[$193>>3] = $195;
      $196 = $19;
      $4 = $196;
      $203 = $4;
      STACKTOP = sp;return ($203|0);
     } else {
      $197 = $5;
      $198 = $6;
      $199 = $7;
      $200 = $8;
      $201 = (_gsl_sf_hyperg_1F1_series_e($197,$198,$199,$200)|0);
      $21 = $201;
      $202 = $21;
      $4 = $202;
      $203 = $4;
      STACKTOP = sp;return ($203|0);
     }
    }
   }
   $102 = $9;
   $103 = $6;
   $104 = $7;
   $105 = - $104;
   $106 = (_gsl_sf_hyperg_1F1_series_e($102,$103,$105,$16)|0);
   $17 = $106;
   $107 = $7;
   $108 = $7;
   $109 = (+Math_abs((+$108)));
   $110 = 2.2204460492503131E-16 * $109;
   $111 = +HEAPF64[$16>>3];
   $112 = ((($16)) + 8|0);
   $113 = +HEAPF64[$112>>3];
   $114 = $8;
   $115 = (_gsl_sf_exp_mult_err_e($107,$110,$111,$113,$114)|0);
   $18 = $115;
   $116 = $18;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $18;
    $123 = $118;
   } else {
    $119 = $17;
    $120 = ($119|0)!=(0);
    $121 = $17;
    $122 = $120 ? $121 : 0;
    $123 = $122;
   }
   $4 = $123;
   $203 = $4;
   STACKTOP = sp;return ($203|0);
  }
 }
 $64 = $5;
 $65 = $6;
 $66 = $7;
 $67 = $8;
 $68 = (_gsl_sf_hyperg_1F1_series_e($64,$65,$66,$67)|0);
 $4 = $68;
 $203 = $4;
 STACKTOP = sp;return ($203|0);
}
function _hyperg_1F1_U($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $10 = sp + 280|0;
 $11 = sp + 264|0;
 $12 = sp + 256|0;
 $19 = sp + 216|0;
 $20 = sp + 200|0;
 $21 = sp + 192|0;
 $22 = sp + 184|0;
 $28 = sp + 152|0;
 $29 = sp + 128|0;
 $33 = sp + 104|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $49 = $5;
 $50 = 2.0 - $49;
 $8 = $50;
 $51 = $4;
 $52 = $5;
 $53 = $51 - $52;
 $54 = $53 + 1.0;
 $9 = $54;
 $55 = $9;
 $56 = (_gsl_sf_lngamma_sgn_e($55,$10,$12)|0);
 $13 = $56;
 $57 = $8;
 $58 = (_gsl_sf_lngamma_e($57,$11)|0);
 $14 = $58;
 $59 = $13;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = $13;
  $66 = $61;
 } else {
  $62 = $14;
  $63 = ($62|0)!=(0);
  $64 = $14;
  $65 = $63 ? $64 : 0;
  $66 = $65;
 }
 $15 = $66;
 $67 = $8;
 $68 = $67 - 1.0;
 $69 = $6;
 $70 = (+Math_log((+$69)));
 $71 = $68 * $70;
 $16 = $71;
 $72 = +HEAPF64[$10>>3];
 $73 = +HEAPF64[$11>>3];
 $74 = $72 - $73;
 $75 = $16;
 $76 = $74 + $75;
 $17 = $76;
 $77 = ((($10)) + 8|0);
 $78 = +HEAPF64[$77>>3];
 $79 = ((($11)) + 8|0);
 $80 = +HEAPF64[$79>>3];
 $81 = $78 + $80;
 $82 = $16;
 $83 = (+Math_abs((+$82)));
 $84 = 4.4408920985006262E-16 * $83;
 $85 = $81 + $84;
 $18 = $85;
 $86 = $8;
 $87 = 2.0 - $86;
 $88 = (_gsl_sf_lngamma_sgn_e($87,$19,$21)|0);
 $23 = $88;
 $89 = $9;
 $90 = 1.0 + $89;
 $91 = $8;
 $92 = $90 - $91;
 $93 = (_gsl_sf_lngamma_sgn_e($92,$20,$22)|0);
 $24 = $93;
 $94 = $23;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $23;
  $101 = $96;
 } else {
  $97 = $24;
  $98 = ($97|0)!=(0);
  $99 = $24;
  $100 = $98 ? $99 : 0;
  $101 = $100;
 }
 $25 = $101;
 $102 = +HEAPF64[$19>>3];
 $103 = +HEAPF64[$20>>3];
 $104 = $102 - $103;
 $26 = $104;
 $105 = ((($19)) + 8|0);
 $106 = +HEAPF64[$105>>3];
 $107 = ((($20)) + 8|0);
 $108 = +HEAPF64[$107>>3];
 $109 = $106 + $108;
 $110 = +HEAPF64[$19>>3];
 $111 = (+Math_abs((+$110)));
 $112 = +HEAPF64[$20>>3];
 $113 = (+Math_abs((+$112)));
 $114 = $111 + $113;
 $115 = 2.2204460492503131E-16 * $114;
 $116 = $109 + $115;
 $27 = $116;
 $117 = $9;
 $118 = $8;
 $119 = $6;
 $120 = (_gsl_sf_hyperg_1F1_e($117,$118,$119,$28)|0);
 $30 = $120;
 $121 = $9;
 $122 = $8;
 $123 = $6;
 $124 = (_gsl_sf_hyperg_U_e10_e($121,$122,$123,$29)|0);
 $31 = $124;
 $125 = $30;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $30;
  $132 = $127;
 } else {
  $128 = $31;
  $129 = ($128|0)!=(0);
  $130 = $31;
  $131 = $129 ? $130 : 0;
  $132 = $131;
 }
 $32 = $132;
 $133 = $26;
 $134 = $27;
 $135 = +HEAPF64[$21>>3];
 $136 = +HEAPF64[$22>>3];
 $137 = $135 * $136;
 $138 = +HEAPF64[$28>>3];
 $139 = $137 * $138;
 $140 = ((($28)) + 8|0);
 $141 = +HEAPF64[$140>>3];
 $142 = (_gsl_sf_exp_mult_err_e10_e($133,$134,$139,$141,$33)|0);
 $34 = $142;
 $143 = $8;
 $144 = 1.0 - $143;
 $35 = $144;
 $145 = ((($29)) + 16|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (+($146|0));
 $148 = $147 * 2.3025850929940459;
 $36 = $148;
 $149 = $36;
 $150 = (+Math_abs((+$149)));
 $151 = 4.4408920985006262E-16 * $150;
 $37 = $151;
 $152 = ((($33)) + 16|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = (+($153|0));
 $155 = $154 * 2.3025850929940459;
 $38 = $155;
 $156 = $38;
 $157 = (+Math_abs((+$156)));
 $158 = 4.4408920985006262E-16 * $157;
 $39 = $158;
 $159 = $36;
 $160 = $38;
 $161 = $159 > $160;
 if ($161) {
  $162 = $38;
  $163 = $36;
  $164 = $162 - $163;
  $165 = (+Math_exp((+$164)));
  $41 = $165;
  $166 = $38;
  $167 = $36;
  $168 = $166 - $167;
  $169 = (+Math_abs((+$168)));
  $170 = $169 + 1.0;
  $171 = 4.4408920985006262E-16 * $170;
  $172 = $41;
  $173 = $171 * $172;
  $42 = $173;
  $174 = +HEAPF64[$33>>3];
  $175 = $41;
  $176 = $174 * $175;
  $177 = $35;
  $178 = +HEAPF64[$29>>3];
  $179 = $177 * $178;
  $180 = $176 - $179;
  $43 = $180;
  $181 = ((($33)) + 8|0);
  $182 = +HEAPF64[$181>>3];
  $183 = $41;
  $184 = $182 * $183;
  $185 = $35;
  $186 = (+Math_abs((+$185)));
  $187 = ((($29)) + 8|0);
  $188 = +HEAPF64[$187>>3];
  $189 = $186 * $188;
  $190 = $184 + $189;
  $191 = +HEAPF64[$33>>3];
  $192 = (+Math_abs((+$191)));
  $193 = $42;
  $194 = $192 * $193;
  $195 = $190 + $194;
  $196 = +HEAPF64[$33>>3];
  $197 = $41;
  $198 = $196 * $197;
  $199 = (+Math_abs((+$198)));
  $200 = $35;
  $201 = +HEAPF64[$29>>3];
  $202 = $200 * $201;
  $203 = (+Math_abs((+$202)));
  $204 = $199 + $203;
  $205 = 2.2204460492503131E-16 * $204;
  $206 = $195 + $205;
  $44 = $206;
  $207 = $17;
  $208 = $36;
  $209 = $207 + $208;
  $210 = $18;
  $211 = $37;
  $212 = $210 + $211;
  $213 = +HEAPF64[$12>>3];
  $214 = $43;
  $215 = $213 * $214;
  $216 = $44;
  $217 = $7;
  $218 = (_gsl_sf_exp_mult_err_e($209,$212,$215,$216,$217)|0);
  $40 = $218;
 } else {
  $219 = $36;
  $220 = $38;
  $221 = $219 - $220;
  $222 = (+Math_exp((+$221)));
  $45 = $222;
  $223 = $38;
  $224 = $36;
  $225 = $223 - $224;
  $226 = (+Math_abs((+$225)));
  $227 = $226 + 1.0;
  $228 = 4.4408920985006262E-16 * $227;
  $229 = $45;
  $230 = $228 * $229;
  $46 = $230;
  $231 = +HEAPF64[$33>>3];
  $232 = $35;
  $233 = $45;
  $234 = $232 * $233;
  $235 = +HEAPF64[$29>>3];
  $236 = $234 * $235;
  $237 = $231 - $236;
  $47 = $237;
  $238 = ((($33)) + 8|0);
  $239 = +HEAPF64[$238>>3];
  $240 = $35;
  $241 = $45;
  $242 = $240 * $241;
  $243 = ((($29)) + 8|0);
  $244 = +HEAPF64[$243>>3];
  $245 = $242 * $244;
  $246 = (+Math_abs((+$245)));
  $247 = $239 + $246;
  $248 = $35;
  $249 = $46;
  $250 = $248 * $249;
  $251 = +HEAPF64[$29>>3];
  $252 = $250 * $251;
  $253 = (+Math_abs((+$252)));
  $254 = $247 + $253;
  $255 = +HEAPF64[$33>>3];
  $256 = (+Math_abs((+$255)));
  $257 = $35;
  $258 = $45;
  $259 = $257 * $258;
  $260 = +HEAPF64[$29>>3];
  $261 = $259 * $260;
  $262 = (+Math_abs((+$261)));
  $263 = $256 + $262;
  $264 = 2.2204460492503131E-16 * $263;
  $265 = $254 + $264;
  $48 = $265;
  $266 = $17;
  $267 = $38;
  $268 = $266 + $267;
  $269 = $18;
  $270 = $39;
  $271 = $269 + $270;
  $272 = +HEAPF64[$12>>3];
  $273 = $47;
  $274 = $272 * $273;
  $275 = $48;
  $276 = $7;
  $277 = (_gsl_sf_exp_mult_err_e($268,$271,$274,$275,$276)|0);
  $40 = $277;
 }
 $278 = $40;
 $279 = ($278|0)!=(0);
 if ($279) {
  $280 = $40;
  $294 = $280;
  STACKTOP = sp;return ($294|0);
 }
 $281 = $34;
 $282 = ($281|0)!=(0);
 if ($282) {
  $283 = $34;
  $294 = $283;
  STACKTOP = sp;return ($294|0);
 }
 $284 = $32;
 $285 = ($284|0)!=(0);
 if ($285) {
  $286 = $32;
  $294 = $286;
  STACKTOP = sp;return ($294|0);
 }
 $287 = $25;
 $288 = ($287|0)!=(0);
 if ($288) {
  $289 = $25;
  $294 = $289;
  STACKTOP = sp;return ($294|0);
 } else {
  $290 = $15;
  $291 = ($290|0)!=(0);
  $292 = $15;
  $293 = $291 ? $292 : 0;
  $294 = $293;
  STACKTOP = sp;return ($294|0);
 }
 return (0)|0;
}
function _hyperg_1F1_beps_bgt0($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $10 = sp + 48|0;
 $16 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $6;
 $20 = $7;
 $21 = (+Math_abs((+$20)));
 $22 = $19 > $21;
 if ($22) {
  $23 = $5;
  $24 = (+Math_abs((+$23)));
  $25 = $24 < 1.4901161193847656E-8;
  if ($25) {
   $26 = $6;
   $27 = $5;
   $28 = $26 + $27;
   $9 = $28;
   $29 = $9;
   $30 = $7;
   $31 = $29 * $30;
   $32 = $6;
   $33 = $31 / $32;
   $34 = (_gsl_sf_exp_e($33,$10)|0);
   $11 = $34;
   $35 = $9;
   $36 = $6;
   $37 = 2.0 * $36;
   $38 = $6;
   $39 = $37 * $38;
   $40 = $6;
   $41 = $40 + 1.0;
   $42 = $39 * $41;
   $43 = $35 / $42;
   $12 = $43;
   $44 = $9;
   $45 = $6;
   $46 = $9;
   $47 = 2.0 * $46;
   $48 = $45 - $47;
   $49 = $44 * $48;
   $50 = $6;
   $51 = 3.0 * $50;
   $52 = $6;
   $53 = $51 * $52;
   $54 = $6;
   $55 = $53 * $54;
   $56 = $6;
   $57 = $56 + 1.0;
   $58 = $55 * $57;
   $59 = $6;
   $60 = $59 + 2.0;
   $61 = $58 * $60;
   $62 = $49 / $61;
   $13 = $62;
   $63 = $12;
   $64 = $13;
   $65 = $7;
   $66 = $64 * $65;
   $67 = $63 + $66;
   $14 = $67;
   $68 = $5;
   $69 = $7;
   $70 = $68 * $69;
   $71 = $7;
   $72 = $70 * $71;
   $73 = $14;
   $74 = $72 * $73;
   $75 = 1.0 - $74;
   $15 = $75;
   $76 = +HEAPF64[$10>>3];
   $77 = $15;
   $78 = $76 * $77;
   $79 = $8;
   HEAPF64[$79>>3] = $78;
   $80 = ((($10)) + 8|0);
   $81 = +HEAPF64[$80>>3];
   $82 = $15;
   $83 = (+Math_abs((+$82)));
   $84 = $81 * $83;
   $85 = $8;
   $86 = ((($85)) + 8|0);
   HEAPF64[$86>>3] = $84;
   $87 = +HEAPF64[$10>>3];
   $88 = (+Math_abs((+$87)));
   $89 = $88 * 2.2204460492503131E-16;
   $90 = $5;
   $91 = $7;
   $92 = $90 * $91;
   $93 = $7;
   $94 = $92 * $93;
   $95 = $14;
   $96 = $94 * $95;
   $97 = (+Math_abs((+$96)));
   $98 = 1.0 + $97;
   $99 = $89 * $98;
   $100 = $8;
   $101 = ((($100)) + 8|0);
   $102 = +HEAPF64[$101>>3];
   $103 = $102 + $99;
   HEAPF64[$101>>3] = $103;
   $104 = $8;
   $105 = +HEAPF64[$104>>3];
   $106 = (+Math_abs((+$105)));
   $107 = 8.8817841970012523E-16 * $106;
   $108 = $8;
   $109 = ((($108)) + 8|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $110 + $107;
   HEAPF64[$109>>3] = $111;
   $112 = $11;
   $4 = $112;
   $142 = $4;
   STACKTOP = sp;return ($142|0);
  }
 }
 $113 = $5;
 $114 = - $113;
 $115 = $6;
 $116 = $7;
 $117 = - $116;
 $118 = (_hyperg_1F1_small_a_bgt0($114,$115,$117,$16)|0);
 $17 = $118;
 $119 = +HEAPF64[$16>>3];
 $120 = $119 != 0.0;
 if (!($120)) {
  $138 = $8;
  HEAPF64[$138>>3] = 0.0;
  $139 = $8;
  $140 = ((($139)) + 8|0);
  HEAPF64[$140>>3] = 0.0;
  $141 = $17;
  $4 = $141;
  $142 = $4;
  STACKTOP = sp;return ($142|0);
 }
 $121 = $7;
 $122 = $7;
 $123 = (+Math_abs((+$122)));
 $124 = 4.4408920985006262E-16 * $123;
 $125 = +HEAPF64[$16>>3];
 $126 = ((($16)) + 8|0);
 $127 = +HEAPF64[$126>>3];
 $128 = $8;
 $129 = (_gsl_sf_exp_mult_err_e($121,$124,$125,$127,$128)|0);
 $18 = $129;
 $130 = $18;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = $18;
  $137 = $132;
 } else {
  $133 = $17;
  $134 = ($133|0)!=(0);
  $135 = $17;
  $136 = $134 ? $135 : 0;
  $137 = $136;
 }
 $4 = $137;
 $142 = $4;
 STACKTOP = sp;return ($142|0);
}
function _hyperg_1F1_1($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0;
 var $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $11 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $5;
 $15 = (+Math_abs((+$14)));
 $7 = $15;
 $16 = $4;
 $17 = $16 + 0.10000000000000001;
 $18 = (+Math_floor((+$17)));
 $8 = $18;
 $19 = $4;
 $20 = $19 < 1.0;
 if ($20) {
  $21 = $6;
  HEAPF64[$21>>3] = nan;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAPF64[$23>>3] = nan;
  _gsl_error(83774,83434,352,1);
  $3 = 1;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 $24 = $4;
 $25 = $24 == 1.0;
 if ($25) {
  $26 = $5;
  $27 = $6;
  $28 = (_gsl_sf_exp_e($26,$27)|0);
  $3 = $28;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 $29 = $4;
 $30 = $7;
 $31 = 1.3999999999999999 * $30;
 $32 = $29 >= $31;
 $33 = $4;
 if ($32) {
  $34 = $5;
  $35 = $6;
  $36 = (_hyperg_1F1_1_series($33,$34,$35)|0);
  $3 = $36;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 $37 = $8;
 $38 = $33 - $37;
 $39 = (+Math_abs((+$38)));
 $40 = $39 < 2.2204460492503131E-14;
 $41 = $8;
 $42 = $41 < 2147483647.0;
 $or$cond = $40 & $42;
 if ($or$cond) {
  $43 = $8;
  $44 = (~~(($43)));
  $45 = $5;
  $46 = $6;
  $47 = (_hyperg_1F1_1_int($44,$45,$46)|0);
  $3 = $47;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 $48 = $5;
 $49 = $48 > 0.0;
 if (!($49)) {
  $140 = $7;
  $141 = $140 < 10.0;
  $142 = $4;
  $143 = $142 < 10.0;
  $or$cond3 = $141 & $143;
  if ($or$cond3) {
   $144 = $4;
   $145 = $5;
   $146 = $6;
   $147 = (_hyperg_1F1_1_series($144,$145,$146)|0);
   $3 = $147;
   $165 = $3;
   STACKTOP = sp;return ($165|0);
  }
  $148 = $7;
  $149 = $148 >= 100.0;
  if ($149) {
   $150 = $4;
   $151 = 2.0 - $150;
   $152 = (+Math_abs((+$151)));
   $153 = (+_GSL_MAX_DBL($152,1.0));
   $154 = $7;
   $155 = 0.98999999999999999 * $154;
   $156 = $153 < $155;
   if ($156) {
    $157 = $4;
    $158 = $5;
    $159 = $6;
    $160 = (_hyperg_1F1_asymp_negx(1.0,$157,$158,$159)|0);
    $3 = $160;
    $165 = $3;
    STACKTOP = sp;return ($165|0);
   }
  }
  $161 = $4;
  $162 = $5;
  $163 = $6;
  $164 = (_hyperg_1F1_luke(1.0,$161,$162,$163)|0);
  $3 = $164;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 $50 = $5;
 $51 = $50 > 100.0;
 if ($51) {
  $52 = $4;
  $53 = $5;
  $54 = 0.75 * $53;
  $55 = $52 < $54;
  if ($55) {
   $56 = $4;
   $57 = $5;
   $58 = $6;
   $59 = (_hyperg_1F1_asymp_posx(1.0,$56,$57,$58)|0);
   $3 = $59;
   $165 = $3;
   STACKTOP = sp;return ($165|0);
  }
 }
 $60 = $4;
 $61 = $60 < 1.0E+5;
 $62 = $5;
 if ($61) {
  $63 = 1.3999999999999999 * $62;
  $64 = $4;
  $65 = $63 - $64;
  $66 = (+Math_ceil((+$65)));
  $67 = $66 + 1.0;
  $9 = $67;
  $68 = $4;
  $69 = $9;
  $70 = $68 + $69;
  $10 = $70;
  $71 = $10;
  $72 = $5;
  $73 = (_hyperg_1F1_1_series($71,$72,$11)|0);
  $12 = $73;
  $74 = ((($11)) + 8|0);
  $75 = +HEAPF64[$74>>3];
  $76 = +HEAPF64[$11>>3];
  $77 = (+Math_abs((+$76)));
  $78 = $75 / $77;
  $13 = $78;
  while(1) {
   $79 = $10;
   $80 = $4;
   $81 = $80 + 0.10000000000000001;
   $82 = $79 > $81;
   if (!($82)) {
    break;
   }
   $83 = $10;
   $84 = $83 - 1.0;
   $10 = $84;
   $85 = $5;
   $86 = $10;
   $87 = $85 / $86;
   $88 = +HEAPF64[$11>>3];
   $89 = $87 * $88;
   $90 = 1.0 + $89;
   HEAPF64[$11>>3] = $90;
  }
  $91 = +HEAPF64[$11>>3];
  $92 = $6;
  HEAPF64[$92>>3] = $91;
  $93 = $13;
  $94 = +HEAPF64[$11>>3];
  $95 = (+Math_abs((+$94)));
  $96 = $93 * $95;
  $97 = $6;
  $98 = ((($97)) + 8|0);
  HEAPF64[$98>>3] = $96;
  $99 = $9;
  $100 = (+Math_abs((+$99)));
  $101 = $100 + 1.0;
  $102 = 4.4408920985006262E-16 * $101;
  $103 = +HEAPF64[$11>>3];
  $104 = (+Math_abs((+$103)));
  $105 = $102 * $104;
  $106 = $6;
  $107 = ((($106)) + 8|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $108 + $105;
  HEAPF64[$107>>3] = $109;
  $110 = $12;
  $3 = $110;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 $111 = (+Math_abs((+$62)));
 $112 = $4;
 $113 = (+Math_abs((+$112)));
 $114 = $111 < $113;
 if ($114) {
  $115 = $5;
  $116 = (+Math_abs((+$115)));
  $117 = $4;
  $118 = (+Math_abs((+$117)));
  $119 = (+Math_sqrt((+$118)));
  $120 = $4;
  $121 = $5;
  $122 = $120 - $121;
  $123 = (+Math_abs((+$122)));
  $124 = $119 * $123;
  $125 = $116 < $124;
  if ($125) {
   $126 = $4;
   $127 = $5;
   $128 = $6;
   $129 = (_hyperg_1F1_largebx(1.0,$126,$127,$128)|0);
   $3 = $129;
   $165 = $3;
   STACKTOP = sp;return ($165|0);
  }
 }
 $130 = $5;
 $131 = (+Math_abs((+$130)));
 $132 = $4;
 $133 = (+Math_abs((+$132)));
 $134 = $131 > $133;
 $135 = $4;
 $136 = $5;
 $137 = $6;
 if ($134) {
  $138 = (_hyperg_1F1_1_series($135,$136,$137)|0);
  $3 = $138;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 } else {
  $139 = (_hyperg_1F1_large2bm4a(1.0,$135,$136,$137)|0);
  $3 = $139;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 return (0)|0;
}
function _hyperg_1F1_largebx($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = $5;
 $15 = $13 / $14;
 $8 = $15;
 $16 = $4;
 $17 = - $16;
 $18 = $8;
 $19 = - $18;
 $20 = (+_log1p($19));
 $21 = $17 * $20;
 $22 = (+Math_exp((+$21)));
 $9 = $22;
 $23 = $4;
 $24 = $4;
 $25 = $24 + 1.0;
 $26 = $23 * $25;
 $27 = $5;
 $28 = 2.0 * $27;
 $29 = $26 / $28;
 $30 = - $29;
 $31 = $8;
 $32 = $8;
 $33 = 1.0 - $32;
 $34 = $31 / $33;
 $35 = (+Math_pow((+$34),2.0));
 $36 = $30 * $35;
 $10 = $36;
 $37 = $5;
 $38 = 24.0 * $37;
 $39 = $5;
 $40 = $38 * $39;
 $41 = 1.0 / $40;
 $42 = $4;
 $43 = $4;
 $44 = $43 + 1.0;
 $45 = $42 * $44;
 $46 = $8;
 $47 = $45 * $46;
 $48 = $8;
 $49 = $47 * $48;
 $50 = $8;
 $51 = 1.0 - $50;
 $52 = (+Math_pow((+$51),4.0));
 $53 = $49 / $52;
 $54 = $41 * $53;
 $55 = $4;
 $56 = 2.0 * $55;
 $57 = $56 + 1.0;
 $58 = 8.0 * $57;
 $59 = $8;
 $60 = $58 * $59;
 $61 = 12.0 + $60;
 $62 = $4;
 $63 = 3.0 * $62;
 $64 = $4;
 $65 = $63 * $64;
 $66 = $4;
 $67 = $65 - $66;
 $68 = $67 - 2.0;
 $69 = $8;
 $70 = $68 * $69;
 $71 = $8;
 $72 = $70 * $71;
 $73 = $61 + $72;
 $74 = $54 * $73;
 $11 = $74;
 $75 = $5;
 $76 = 48.0 * $75;
 $77 = $5;
 $78 = $76 * $77;
 $79 = $5;
 $80 = $78 * $79;
 $81 = $8;
 $82 = 1.0 - $81;
 $83 = (+Math_pow((+$82),6.0));
 $84 = $80 * $83;
 $85 = -1.0 / $84;
 $86 = $4;
 $87 = $85 * $86;
 $88 = $4;
 $89 = $88 + 1.0;
 $90 = $8;
 $91 = $4;
 $92 = $91 + 1.0;
 $93 = $4;
 $94 = $8;
 $95 = $8;
 $96 = $8;
 $97 = $4;
 $98 = $97 - 2.0;
 $99 = $96 * $98;
 $100 = $99 + 16.0;
 $101 = $4;
 $102 = $101 - 1.0;
 $103 = $100 * $102;
 $104 = $95 * $103;
 $105 = $104 + 72.0;
 $106 = $94 * $105;
 $107 = $93 * $106;
 $108 = $107 + 96.0;
 $109 = $92 * $108;
 $110 = $90 * $109;
 $111 = $110 + 24.0;
 $112 = $8;
 $113 = (+Math_pow((+$112),2.0));
 $114 = $111 * $113;
 $115 = $89 * $114;
 $116 = $87 * $115;
 $12 = $116;
 $117 = $9;
 $118 = $10;
 $119 = 1.0 + $118;
 $120 = $11;
 $121 = $119 + $120;
 $122 = $12;
 $123 = $121 + $122;
 $124 = $117 * $123;
 $125 = $7;
 HEAPF64[$125>>3] = $124;
 $126 = $9;
 $127 = $12;
 $128 = $126 * $127;
 $129 = (+Math_abs((+$128)));
 $130 = 2.0 * $129;
 $131 = $7;
 $132 = +HEAPF64[$131>>3];
 $133 = (+Math_abs((+$132)));
 $134 = 4.4408920985006262E-16 * $133;
 $135 = $130 + $134;
 $136 = $7;
 $137 = ((($136)) + 8|0);
 HEAPF64[$137>>3] = $135;
 STACKTOP = sp;return 0;
}
function _hyperg_1F1_large2bm4a($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0.0;
 var $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $13 = sp + 64|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $24 = $5;
 $25 = 2.0 * $24;
 $26 = $4;
 $27 = 4.0 * $26;
 $28 = $25 - $27;
 $8 = $28;
 $29 = $6;
 $30 = $8;
 $31 = $29 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 1.0 - $32;
 $10 = $33;
 $34 = $9;
 $35 = (+Math_sqrt((+$34)));
 $36 = (+Math_acos((+$35)));
 $11 = $36;
 $37 = $8;
 $38 = 2.4674011002723395 * $37;
 $39 = $8;
 $40 = $38 * $39;
 $41 = $9;
 $42 = $40 * $41;
 $43 = $10;
 $44 = $42 * $43;
 $12 = $44;
 $45 = $5;
 $46 = (_gsl_sf_lngamma_e($45,$13)|0);
 $14 = $46;
 $47 = $5;
 $48 = 1.0 - $47;
 $49 = 0.5 * $48;
 $50 = $6;
 $51 = 0.25 * $50;
 $52 = $8;
 $53 = $51 * $52;
 $54 = (+Math_log((+$53)));
 $55 = $49 * $54;
 $15 = $55;
 $56 = $12;
 $57 = (+Math_log((+$56)));
 $58 = 0.25 * $57;
 $16 = $58;
 $59 = +HEAPF64[$13>>3];
 $60 = $6;
 $61 = 0.5 * $60;
 $62 = $59 + $61;
 $63 = $15;
 $64 = $62 + $63;
 $65 = $16;
 $66 = $64 - $65;
 $17 = $66;
 $67 = ((($13)) + 8|0);
 $68 = +HEAPF64[$67>>3];
 $69 = $6;
 $70 = 0.5 * $69;
 $71 = (+Math_abs((+$70)));
 $72 = $15;
 $73 = (+Math_abs((+$72)));
 $74 = $71 + $73;
 $75 = $16;
 $76 = (+Math_abs((+$75)));
 $77 = $74 + $76;
 $78 = 4.4408920985006262E-16 * $77;
 $79 = $68 + $78;
 $18 = $79;
 $80 = $4;
 $81 = $80 * 3.1415926535897931;
 $82 = (+Math_sin((+$81)));
 $19 = $82;
 $83 = $8;
 $84 = 0.25 * $83;
 $85 = $11;
 $86 = 2.0 * $85;
 $87 = $11;
 $88 = 2.0 * $87;
 $89 = (+Math_sin((+$88)));
 $90 = $86 - $89;
 $91 = $84 * $90;
 $92 = $91 + 0.78539816339744828;
 $93 = (+Math_sin((+$92)));
 $20 = $93;
 $94 = $19;
 $95 = $20;
 $96 = $94 + $95;
 $21 = $96;
 $97 = $19;
 $98 = (+Math_abs((+$97)));
 $99 = $20;
 $100 = (+Math_abs((+$99)));
 $101 = $98 + $100;
 $102 = 4.4408920985006262E-16 * $101;
 $22 = $102;
 $103 = $17;
 $104 = $18;
 $105 = $21;
 $106 = $22;
 $107 = $7;
 $108 = (_gsl_sf_exp_mult_err_e($103,$104,$105,$106,$107)|0);
 $23 = $108;
 $109 = $23;
 $110 = ($109|0)!=(0);
 if ($110) {
  $111 = $23;
  $116 = $111;
  STACKTOP = sp;return ($116|0);
 } else {
  $112 = $14;
  $113 = ($112|0)!=(0);
  $114 = $14;
  $115 = $113 ? $114 : 0;
  $116 = $115;
  STACKTOP = sp;return ($116|0);
 }
 return (0)|0;
}
function _hyperg_1F1_luke($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 1.0000000000000001E+50;
 $9 = 5000;
 $10 = 3;
 $38 = $6;
 $39 = - $38;
 $11 = $39;
 $40 = $11;
 $41 = $11;
 $42 = $40 * $41;
 $43 = $11;
 $44 = $42 * $43;
 $12 = $44;
 $45 = $4;
 $46 = $5;
 $47 = $45 / $46;
 $13 = $47;
 $48 = $4;
 $49 = $48 + 1.0;
 $50 = $5;
 $51 = 2.0 * $50;
 $52 = $49 / $51;
 $14 = $52;
 $53 = $4;
 $54 = $53 + 2.0;
 $55 = $5;
 $56 = $55 + 1.0;
 $57 = 2.0 * $56;
 $58 = $54 / $57;
 $15 = $58;
 $16 = 1.0;
 $18 = 1.0;
 $59 = $14;
 $60 = $11;
 $61 = $59 * $60;
 $62 = 1.0 + $61;
 $19 = $62;
 $63 = $15;
 $64 = $11;
 $65 = $63 * $64;
 $66 = $14;
 $67 = $66 / 3.0;
 $68 = $11;
 $69 = $67 * $68;
 $70 = 1.0 + $69;
 $71 = $65 * $70;
 $72 = 1.0 + $71;
 $20 = $72;
 $21 = 1.0;
 $73 = $19;
 $74 = $13;
 $75 = $11;
 $76 = $74 * $75;
 $77 = $73 - $76;
 $22 = $77;
 $78 = $20;
 $79 = $13;
 $80 = $15;
 $81 = $11;
 $82 = $80 * $81;
 $83 = 1.0 + $82;
 $84 = $79 * $83;
 $85 = $11;
 $86 = $84 * $85;
 $87 = $78 - $86;
 $88 = $13;
 $89 = $14;
 $90 = $88 * $89;
 $91 = $5;
 $92 = $5;
 $93 = $92 + 1.0;
 $94 = $91 / $93;
 $95 = $90 * $94;
 $96 = $11;
 $97 = $95 * $96;
 $98 = $11;
 $99 = $97 * $98;
 $100 = $87 + $99;
 $23 = $100;
 while(1) {
  $101 = $10;
  $102 = (+($101|0));
  $103 = $4;
  $104 = $102 + $103;
  $105 = $104 - 1.0;
  $24 = $105;
  $106 = $10;
  $107 = (+($106|0));
  $108 = $5;
  $109 = $107 + $108;
  $110 = $109 - 1.0;
  $25 = $110;
  $111 = $10;
  $112 = (+($111|0));
  $113 = $4;
  $114 = $112 + $113;
  $115 = $114 - 2.0;
  $26 = $115;
  $116 = $10;
  $117 = (+($116|0));
  $118 = $5;
  $119 = $117 + $118;
  $120 = $119 - 2.0;
  $27 = $120;
  $121 = $10;
  $122 = $121<<1;
  $123 = (($122) - 1)|0;
  $124 = (+($123|0));
  $28 = $124;
  $125 = $10;
  $126 = $125<<1;
  $127 = (($126) - 3)|0;
  $128 = (+($127|0));
  $29 = $128;
  $129 = $10;
  $130 = $129<<1;
  $131 = (($130) - 5)|0;
  $132 = (+($131|0));
  $30 = $132;
  $133 = $10;
  $134 = (+($133|0));
  $135 = $4;
  $136 = $134 - $135;
  $137 = $136 - 2.0;
  $138 = $29;
  $139 = 2.0 * $138;
  $140 = $25;
  $141 = $139 * $140;
  $142 = $137 / $141;
  $31 = $142;
  $143 = $10;
  $144 = (+($143|0));
  $145 = $4;
  $146 = $144 + $145;
  $147 = $24;
  $148 = $146 * $147;
  $149 = $28;
  $150 = 4.0 * $149;
  $151 = $29;
  $152 = $150 * $151;
  $153 = $27;
  $154 = $152 * $153;
  $155 = $25;
  $156 = $154 * $155;
  $157 = $148 / $156;
  $32 = $157;
  $158 = $26;
  $159 = - $158;
  $160 = $24;
  $161 = $159 * $160;
  $162 = $10;
  $163 = (+($162|0));
  $164 = $4;
  $165 = $163 - $164;
  $166 = $165 - 2.0;
  $167 = $161 * $166;
  $168 = $29;
  $169 = 8.0 * $168;
  $170 = $29;
  $171 = $169 * $170;
  $172 = $30;
  $173 = $171 * $172;
  $174 = $10;
  $175 = (+($174|0));
  $176 = $5;
  $177 = $175 + $176;
  $178 = $177 - 3.0;
  $179 = $173 * $178;
  $180 = $27;
  $181 = $179 * $180;
  $182 = $25;
  $183 = $181 * $182;
  $184 = $167 / $183;
  $33 = $184;
  $185 = $24;
  $186 = - $185;
  $187 = $10;
  $188 = (+($187|0));
  $189 = $5;
  $190 = $188 - $189;
  $191 = $190 - 1.0;
  $192 = $186 * $191;
  $193 = $29;
  $194 = 2.0 * $193;
  $195 = $27;
  $196 = $194 * $195;
  $197 = $25;
  $198 = $196 * $197;
  $199 = $192 / $198;
  $34 = $199;
  $200 = $31;
  $201 = $11;
  $202 = $200 * $201;
  $203 = 1.0 + $202;
  $204 = $23;
  $205 = $203 * $204;
  $206 = $34;
  $207 = $32;
  $208 = $11;
  $209 = $207 * $208;
  $210 = $206 + $209;
  $211 = $11;
  $212 = $210 * $211;
  $213 = $22;
  $214 = $212 * $213;
  $215 = $205 + $214;
  $216 = $33;
  $217 = $12;
  $218 = $216 * $217;
  $219 = $21;
  $220 = $218 * $219;
  $221 = $215 + $220;
  $35 = $221;
  $222 = $31;
  $223 = $11;
  $224 = $222 * $223;
  $225 = 1.0 + $224;
  $226 = $20;
  $227 = $225 * $226;
  $228 = $34;
  $229 = $32;
  $230 = $11;
  $231 = $229 * $230;
  $232 = $228 + $231;
  $233 = $11;
  $234 = $232 * $233;
  $235 = $19;
  $236 = $234 * $235;
  $237 = $227 + $236;
  $238 = $33;
  $239 = $12;
  $240 = $238 * $239;
  $241 = $18;
  $242 = $240 * $241;
  $243 = $237 + $242;
  $36 = $243;
  $244 = $35;
  $245 = $36;
  $246 = $244 / $245;
  $37 = $246;
  $247 = $16;
  $248 = $37;
  $249 = $247 - $248;
  $250 = $16;
  $251 = $249 / $250;
  $252 = (+Math_abs((+$251)));
  $17 = $252;
  $253 = $37;
  $16 = $253;
  $254 = $17;
  $255 = $254 < 2.2204460492503131E-16;
  $256 = $10;
  $257 = ($256|0)>(5000);
  $or$cond = $255 | $257;
  if ($or$cond) {
   break;
  }
  $258 = $35;
  $259 = (+Math_abs((+$258)));
  $260 = $259 > 1.0000000000000001E+50;
  do {
   if ($260) {
    label = 5;
   } else {
    $261 = $36;
    $262 = (+Math_abs((+$261)));
    $263 = $262 > 1.0000000000000001E+50;
    if ($263) {
     label = 5;
    } else {
     $280 = $35;
     $281 = (+Math_abs((+$280)));
     $282 = $281 < 9.9999999999999988E-51;
     if (!($282)) {
      $283 = $36;
      $284 = (+Math_abs((+$283)));
      $285 = $284 < 9.9999999999999988E-51;
      if (!($285)) {
       break;
      }
     }
     $286 = $35;
     $287 = $286 * 1.0000000000000001E+50;
     $35 = $287;
     $288 = $36;
     $289 = $288 * 1.0000000000000001E+50;
     $36 = $289;
     $290 = $23;
     $291 = $290 * 1.0000000000000001E+50;
     $23 = $291;
     $292 = $20;
     $293 = $292 * 1.0000000000000001E+50;
     $20 = $293;
     $294 = $22;
     $295 = $294 * 1.0000000000000001E+50;
     $22 = $295;
     $296 = $19;
     $297 = $296 * 1.0000000000000001E+50;
     $19 = $297;
     $298 = $21;
     $299 = $298 * 1.0000000000000001E+50;
     $21 = $299;
     $300 = $18;
     $301 = $300 * 1.0000000000000001E+50;
     $18 = $301;
    }
   }
  } while(0);
  if ((label|0) == 5) {
   label = 0;
   $264 = $35;
   $265 = $264 / 1.0000000000000001E+50;
   $35 = $265;
   $266 = $36;
   $267 = $266 / 1.0000000000000001E+50;
   $36 = $267;
   $268 = $23;
   $269 = $268 / 1.0000000000000001E+50;
   $23 = $269;
   $270 = $20;
   $271 = $270 / 1.0000000000000001E+50;
   $20 = $271;
   $272 = $22;
   $273 = $272 / 1.0000000000000001E+50;
   $22 = $273;
   $274 = $19;
   $275 = $274 / 1.0000000000000001E+50;
   $19 = $275;
   $276 = $21;
   $277 = $276 / 1.0000000000000001E+50;
   $21 = $277;
   $278 = $18;
   $279 = $278 / 1.0000000000000001E+50;
   $18 = $279;
  }
  $302 = $10;
  $303 = (($302) + 1)|0;
  $10 = $303;
  $304 = $19;
  $18 = $304;
  $305 = $20;
  $19 = $305;
  $306 = $36;
  $20 = $306;
  $307 = $22;
  $21 = $307;
  $308 = $23;
  $22 = $308;
  $309 = $35;
  $23 = $309;
 }
 $310 = $16;
 $311 = $7;
 HEAPF64[$311>>3] = $310;
 $312 = $16;
 $313 = $17;
 $314 = $312 * $313;
 $315 = (+Math_abs((+$314)));
 $316 = 2.0 * $315;
 $317 = $7;
 $318 = ((($317)) + 8|0);
 HEAPF64[$318>>3] = $316;
 $319 = $10;
 $320 = (+($319|0));
 $321 = $320 - 1.0;
 $322 = 4.4408920985006262E-16 * $321;
 $323 = $16;
 $324 = (+Math_abs((+$323)));
 $325 = $322 * $324;
 $326 = $7;
 $327 = ((($326)) + 8|0);
 $328 = +HEAPF64[$327>>3];
 $329 = $328 + $325;
 HEAPF64[$327>>3] = $329;
 STACKTOP = sp;return 0;
}
function _hyperg_1F1_1_series($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 1.0;
 $7 = 0.0;
 $8 = 1.0;
 $9 = 1.0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = $10 / $11;
  $13 = (+Math_abs((+$12)));
  $14 = $13 > 5.5511151231257827E-17;
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = $3;
  $17 = $9;
  $18 = $16 + $17;
  $19 = $18 - 1.0;
  $20 = $15 / $19;
  $21 = $8;
  $22 = $21 * $20;
  $8 = $22;
  $23 = $8;
  $24 = $6;
  $25 = $24 + $23;
  $6 = $25;
  $26 = $8;
  $27 = (+Math_abs((+$26)));
  $28 = 1.7763568394002505E-15 * $27;
  $29 = $6;
  $30 = (+Math_abs((+$29)));
  $31 = 2.2204460492503131E-16 * $30;
  $32 = $28 + $31;
  $33 = $7;
  $34 = $33 + $32;
  $7 = $34;
  $35 = $9;
  $36 = $35 + 1.0;
  $9 = $36;
 }
 $37 = $6;
 $38 = $5;
 HEAPF64[$38>>3] = $37;
 $39 = $7;
 $40 = $5;
 $41 = ((($40)) + 8|0);
 HEAPF64[$41>>3] = $39;
 $42 = $8;
 $43 = (+Math_abs((+$42)));
 $44 = 2.0 * $43;
 $45 = $5;
 $46 = ((($45)) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $47 + $44;
 HEAPF64[$46>>3] = $48;
 STACKTOP = sp;return 0;
}
function _hyperg_1F1_1_int($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)<(1);
 do {
  if ($8) {
   $9 = $6;
   HEAPF64[$9>>3] = nan;
   $10 = $6;
   $11 = ((($10)) + 8|0);
   HEAPF64[$11>>3] = nan;
   _gsl_error(83774,83434,322,1);
   $3 = 1;
  } else {
   $12 = $4;
   $13 = ($12|0)==(1);
   if ($13) {
    $14 = $5;
    $15 = $6;
    $16 = (_gsl_sf_exp_e($14,$15)|0);
    $3 = $16;
    break;
   }
   $17 = $4;
   $18 = ($17|0)==(2);
   if ($18) {
    $19 = $5;
    $20 = $6;
    $21 = (_gsl_sf_exprel_e($19,$20)|0);
    $3 = $21;
    break;
   }
   $22 = $4;
   $23 = ($22|0)==(3);
   if ($23) {
    $24 = $5;
    $25 = $6;
    $26 = (_gsl_sf_exprel_2_e($24,$25)|0);
    $3 = $26;
    break;
   } else {
    $27 = $4;
    $28 = (($27) - 1)|0;
    $29 = $5;
    $30 = $6;
    $31 = (_gsl_sf_exprel_n_e($28,$29,$30)|0);
    $3 = $31;
    break;
   }
  }
 } while(0);
 $32 = $3;
 STACKTOP = sp;return ($32|0);
}
function _gsl_sf_hyperg_2F1_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0.0;
 var $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0;
 var $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0;
 var $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond$not = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $18 = sp + 88|0;
 $19 = sp + 72|0;
 $20 = sp + 56|0;
 $21 = sp + 40|0;
 $22 = sp + 32|0;
 $23 = sp + 24|0;
 $24 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $33 = $8;
 $34 = $6;
 $35 = $33 - $34;
 $36 = $7;
 $37 = $35 - $36;
 $11 = $37;
 $38 = $6;
 $39 = $38 + 0.5;
 $40 = (+Math_floor((+$39)));
 $12 = $40;
 $41 = $7;
 $42 = $41 + 0.5;
 $43 = (+Math_floor((+$42)));
 $13 = $43;
 $44 = $8;
 $45 = $44 + 0.5;
 $46 = (+Math_floor((+$45)));
 $14 = $46;
 $47 = $6;
 $48 = $47 < 0.0;
 if ($48) {
  $49 = $6;
  $50 = $12;
  $51 = $49 - $50;
  $52 = (+Math_abs((+$51)));
  $53 = $52 < 2.2204460492503131E-13;
  $55 = $53;
 } else {
  $55 = 0;
 }
 $54 = $55&1;
 $15 = $54;
 $56 = $7;
 $57 = $56 < 0.0;
 if ($57) {
  $58 = $7;
  $59 = $13;
  $60 = $58 - $59;
  $61 = (+Math_abs((+$60)));
  $62 = $61 < 2.2204460492503131E-13;
  $64 = $62;
 } else {
  $64 = 0;
 }
 $63 = $64&1;
 $16 = $63;
 $65 = $8;
 $66 = $65 < 0.0;
 if ($66) {
  $67 = $8;
  $68 = $14;
  $69 = $67 - $68;
  $70 = (+Math_abs((+$69)));
  $71 = $70 < 2.2204460492503131E-13;
  $73 = $71;
 } else {
  $73 = 0;
 }
 $72 = $73&1;
 $17 = $72;
 $74 = $10;
 HEAPF64[$74>>3] = 0.0;
 $75 = $10;
 $76 = ((($75)) + 8|0);
 HEAPF64[$76>>3] = 0.0;
 $77 = $9;
 $78 = $77 - 1.0;
 $79 = (+Math_abs((+$78)));
 $80 = $79 < 2.2204460492503131E-13;
 if ($80) {
  $81 = $8;
  $82 = $6;
  $83 = $81 - $82;
  $84 = $7;
  $85 = $83 - $84;
  $86 = $85 > 0.0;
  $87 = $8;
  $88 = $87 != 0.0;
  $or$cond = $86 & $88;
  $or$cond$not = $or$cond ^ 1;
  $89 = $17;
  $90 = ($89|0)!=(0);
  $or$cond3 = $or$cond$not | $90;
  if (!($or$cond3)) {
   $91 = $8;
   $92 = (_gsl_sf_lngamma_sgn_e($91,$18,$22)|0);
   $26 = $92;
   $93 = $8;
   $94 = $6;
   $95 = $93 - $94;
   $96 = $7;
   $97 = $95 - $96;
   $98 = (_gsl_sf_lngamma_e($97,$19)|0);
   $27 = $98;
   $99 = $8;
   $100 = $6;
   $101 = $99 - $100;
   $102 = (_gsl_sf_lngamma_sgn_e($101,$20,$23)|0);
   $28 = $102;
   $103 = $8;
   $104 = $7;
   $105 = $103 - $104;
   $106 = (_gsl_sf_lngamma_sgn_e($105,$21,$24)|0);
   $29 = $106;
   $107 = $26;
   $108 = ($107|0)!=(0);
   $109 = $27;
   $110 = ($109|0)!=(0);
   $or$cond5 = $108 | $110;
   $111 = $28;
   $112 = ($111|0)!=(0);
   $or$cond7 = $or$cond5 | $112;
   $113 = $29;
   $114 = ($113|0)!=(0);
   $or$cond9 = $or$cond7 | $114;
   if ($or$cond9) {
    $115 = $10;
    HEAPF64[$115>>3] = nan;
    $116 = $10;
    $117 = ((($116)) + 8|0);
    HEAPF64[$117>>3] = nan;
    _gsl_error(83774,83447,672,1);
    $5 = 1;
    $316 = $5;
    STACKTOP = sp;return ($316|0);
   } else {
    $118 = +HEAPF64[$18>>3];
    $119 = +HEAPF64[$19>>3];
    $120 = $118 + $119;
    $121 = +HEAPF64[$20>>3];
    $122 = $120 - $121;
    $123 = +HEAPF64[$21>>3];
    $124 = $122 - $123;
    $125 = ((($18)) + 8|0);
    $126 = +HEAPF64[$125>>3];
    $127 = ((($19)) + 8|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $126 + $128;
    $130 = ((($20)) + 8|0);
    $131 = +HEAPF64[$130>>3];
    $132 = $129 + $131;
    $133 = ((($21)) + 8|0);
    $134 = +HEAPF64[$133>>3];
    $135 = $132 + $134;
    $136 = $10;
    $137 = (_gsl_sf_exp_err_e($124,$135,$136)|0);
    $25 = $137;
    $138 = +HEAPF64[$22>>3];
    $139 = +HEAPF64[$23>>3];
    $140 = +HEAPF64[$24>>3];
    $141 = $139 * $140;
    $142 = $138 / $141;
    $143 = $10;
    $144 = +HEAPF64[$143>>3];
    $145 = $144 * $142;
    HEAPF64[$143>>3] = $145;
    $146 = $25;
    $5 = $146;
    $316 = $5;
    STACKTOP = sp;return ($316|0);
   }
  }
 }
 $147 = $9;
 $148 = $147 < -1.0;
 $149 = $9;
 $150 = 1.0 <= $149;
 $or$cond11 = $148 | $150;
 if ($or$cond11) {
  $151 = $10;
  HEAPF64[$151>>3] = nan;
  $152 = $10;
  $153 = ((($152)) + 8|0);
  HEAPF64[$153>>3] = nan;
  _gsl_error(83774,83447,685,1);
  $5 = 1;
  $316 = $5;
  STACKTOP = sp;return ($316|0);
 }
 $154 = $17;
 $155 = ($154|0)!=(0);
 do {
  if ($155) {
   $156 = $15;
   $157 = ($156|0)!=(0);
   if ($157) {
    $158 = $6;
    $159 = $8;
    $160 = $159 + 0.10000000000000001;
    $161 = $158 > $160;
    if ($161) {
     break;
    }
   }
   $162 = $16;
   $163 = ($162|0)!=(0);
   if ($163) {
    $164 = $7;
    $165 = $8;
    $166 = $165 + 0.10000000000000001;
    $167 = $164 > $166;
    if ($167) {
     break;
    }
   }
   $168 = $10;
   HEAPF64[$168>>3] = nan;
   $169 = $10;
   $170 = ((($169)) + 8|0);
   HEAPF64[$170>>3] = nan;
   _gsl_error(83774,83447,693,1);
   $5 = 1;
   $316 = $5;
   STACKTOP = sp;return ($316|0);
  }
 } while(0);
 $171 = $8;
 $172 = $7;
 $173 = $171 - $172;
 $174 = (+Math_abs((+$173)));
 $175 = $174 < 2.2204460492503131E-13;
 if (!($175)) {
  $176 = $8;
  $177 = $6;
  $178 = $176 - $177;
  $179 = (+Math_abs((+$178)));
  $180 = $179 < 2.2204460492503131E-13;
  if (!($180)) {
   $185 = $6;
   $186 = $185 >= 0.0;
   $187 = $7;
   $188 = $187 >= 0.0;
   $or$cond13 = $186 & $188;
   $189 = $8;
   $190 = $189 >= 0.0;
   $or$cond15 = $or$cond13 & $190;
   $191 = $9;
   $192 = $191 >= 0.0;
   $or$cond17 = $or$cond15 & $192;
   $193 = $9;
   $194 = $193 < 0.99499999999999999;
   $or$cond19 = $or$cond17 & $194;
   $195 = $6;
   if ($or$cond19) {
    $196 = $7;
    $197 = $8;
    $198 = $9;
    $199 = $10;
    $200 = (_hyperg_2F1_series($195,$196,$197,$198,$199)|0);
    $5 = $200;
    $316 = $5;
    STACKTOP = sp;return ($316|0);
   }
   $201 = (+Math_abs((+$195)));
   $202 = $201 < 10.0;
   if ($202) {
    $203 = $7;
    $204 = (+Math_abs((+$203)));
    $205 = $204 < 10.0;
    if ($205) {
     $206 = $15;
     $207 = ($206|0)!=(0);
     if ($207) {
      $208 = $12;
      $209 = $7;
      $210 = $8;
      $211 = $9;
      $212 = $10;
      $213 = (_hyperg_2F1_series($208,$209,$210,$211,$212)|0);
      $5 = $213;
      $316 = $5;
      STACKTOP = sp;return ($316|0);
     }
     $214 = $16;
     $215 = ($214|0)!=(0);
     if ($215) {
      $216 = $6;
      $217 = $13;
      $218 = $8;
      $219 = $9;
      $220 = $10;
      $221 = (_hyperg_2F1_series($216,$217,$218,$219,$220)|0);
      $5 = $221;
      $316 = $5;
      STACKTOP = sp;return ($316|0);
     }
     $222 = $9;
     $223 = $222 < -0.25;
     if ($223) {
      $224 = $6;
      $225 = $7;
      $226 = $8;
      $227 = $9;
      $228 = $10;
      $229 = (_hyperg_2F1_luke($224,$225,$226,$227,$228)|0);
      $5 = $229;
      $316 = $5;
      STACKTOP = sp;return ($316|0);
     }
     $230 = $9;
     $231 = $230 < 0.5;
     if ($231) {
      $232 = $6;
      $233 = $7;
      $234 = $8;
      $235 = $9;
      $236 = $10;
      $237 = (_hyperg_2F1_series($232,$233,$234,$235,$236)|0);
      $5 = $237;
      $316 = $5;
      STACKTOP = sp;return ($316|0);
     }
     $238 = $8;
     $239 = (+Math_abs((+$238)));
     $240 = $239 > 10.0;
     $241 = $6;
     $242 = $7;
     $243 = $8;
     $244 = $9;
     $245 = $10;
     if ($240) {
      $246 = (_hyperg_2F1_series($241,$242,$243,$244,$245)|0);
      $5 = $246;
      $316 = $5;
      STACKTOP = sp;return ($316|0);
     } else {
      $247 = (_hyperg_2F1_reflect($241,$242,$243,$244,$245)|0);
      $5 = $247;
      $316 = $5;
      STACKTOP = sp;return ($316|0);
     }
    }
   }
   $248 = $6;
   $249 = (+Math_abs((+$248)));
   $250 = $7;
   $251 = (+Math_abs((+$250)));
   $252 = $249 > $251;
   if ($252) {
    $253 = $6;
    $31 = $253;
    $254 = $7;
    $30 = $254;
   } else {
    $255 = $7;
    $31 = $255;
    $256 = $6;
    $30 = $256;
   }
   $257 = $9;
   $258 = $257 < 0.0;
   if ($258) {
    $259 = $6;
    $260 = $7;
    $261 = $8;
    $262 = $9;
    $263 = $10;
    $264 = (_hyperg_2F1_luke($259,$260,$261,$262,$263)|0);
    $5 = $264;
    $316 = $5;
    STACKTOP = sp;return ($316|0);
   }
   $265 = $30;
   $266 = (+Math_abs((+$265)));
   $267 = (+_GSL_MAX_DBL($266,1.0));
   $268 = $31;
   $269 = (+Math_abs((+$268)));
   $270 = $267 * $269;
   $271 = $9;
   $272 = (+Math_abs((+$271)));
   $273 = $270 * $272;
   $274 = $8;
   $275 = (+Math_abs((+$274)));
   $276 = 2.0 * $275;
   $277 = $273 < $276;
   if ($277) {
    $278 = $6;
    $279 = $7;
    $280 = $8;
    $281 = $9;
    $282 = $10;
    $283 = (_hyperg_2F1_series($278,$279,$280,$281,$282)|0);
    $5 = $283;
    $316 = $5;
    STACKTOP = sp;return ($316|0);
   }
   $284 = $31;
   $285 = $31;
   $286 = $284 * $285;
   $287 = $9;
   $288 = $286 * $287;
   $289 = $9;
   $290 = $288 * $289;
   $291 = (+Math_abs((+$290)));
   $292 = $31;
   $293 = (+Math_abs((+$292)));
   $294 = 0.001 * $293;
   $295 = $291 < $294;
   if ($295) {
    $296 = $30;
    $297 = (+Math_abs((+$296)));
    $298 = $297 < 10.0;
    if ($298) {
     $299 = $30;
     $300 = $8;
     $301 = $31;
     $302 = $9;
     $303 = $301 * $302;
     $304 = $10;
     $305 = (_gsl_sf_hyperg_1F1_e($299,$300,$303,$304)|0);
     $32 = $305;
     $306 = $10;
     $307 = +HEAPF64[$306>>3];
     $308 = (+Math_abs((+$307)));
     $309 = 0.001 * $308;
     $310 = $10;
     $311 = ((($310)) + 8|0);
     HEAPF64[$311>>3] = $309;
     $312 = $32;
     $5 = $312;
     $316 = $5;
     STACKTOP = sp;return ($316|0);
    }
   }
   $313 = $10;
   HEAPF64[$313>>3] = 0.0;
   $314 = $10;
   $315 = ((($314)) + 8|0);
   HEAPF64[$315>>3] = 0.0;
   _gsl_error(83691,83447,773,24);
   $5 = 24;
   $316 = $5;
   STACKTOP = sp;return ($316|0);
  }
 }
 $181 = $9;
 $182 = $11;
 $183 = $10;
 $184 = (_pow_omx($181,$182,$183)|0);
 $5 = $184;
 $316 = $5;
 STACKTOP = sp;return ($316|0);
}
function _pow_omx($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (+Math_abs((+$8)));
 $10 = $9 < 7.4009597974140505E-4;
 $11 = $3;
 if ($10) {
  $12 = - $11;
  $13 = $3;
  $14 = $3;
  $15 = $3;
  $16 = $15 / 4.0;
  $17 = 0.33333333333333331 + $16;
  $18 = $3;
  $19 = $3;
  $20 = $18 * $19;
  $21 = $20 / 5.0;
  $22 = $17 + $21;
  $23 = $14 * $22;
  $24 = 0.5 + $23;
  $25 = $13 * $24;
  $26 = 1.0 + $25;
  $27 = $12 * $26;
  $6 = $27;
 } else {
  $28 = 1.0 - $11;
  $29 = (+Math_log((+$28)));
  $6 = $29;
 }
 $30 = $4;
 $31 = $6;
 $32 = $30 * $31;
 $7 = $32;
 $33 = $7;
 $34 = $7;
 $35 = (+Math_abs((+$34)));
 $36 = 2.2204460492503131E-16 * $35;
 $37 = $5;
 $38 = (_gsl_sf_exp_err_e($33,$36,$37)|0);
 STACKTOP = sp;return ($38|0);
}
function _hyperg_2F1_series($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 1.0;
 $12 = 0.0;
 $13 = 1.0;
 $14 = 0.0;
 $15 = 1.0;
 $17 = 0.0;
 $18 = 0;
 $19 = $8;
 $20 = (+Math_abs((+$19)));
 $21 = $20 < 2.2204460492503131E-16;
 if ($21) {
  $22 = $10;
  HEAPF64[$22>>3] = 0.0;
  $23 = $10;
  $24 = ((($23)) + 8|0);
  HEAPF64[$24>>3] = 1.0;
  _gsl_error(83691,83447,57,1);
  $5 = 1;
  $144 = $5;
  STACKTOP = sp;return ($144|0);
 }
 while(1) {
  $25 = $18;
  $26 = (($25) + 1)|0;
  $18 = $26;
  $27 = ($26|0)>(30000);
  if ($27) {
   label = 5;
   break;
  }
  $58 = $15;
  $16 = $58;
  $59 = $6;
  $60 = $17;
  $61 = $59 + $60;
  $62 = $7;
  $63 = $17;
  $64 = $62 + $63;
  $65 = $61 * $64;
  $66 = $9;
  $67 = $65 * $66;
  $68 = $8;
  $69 = $17;
  $70 = $68 + $69;
  $71 = $17;
  $72 = $71 + 1.0;
  $73 = $70 * $72;
  $74 = $67 / $73;
  $75 = $15;
  $76 = $75 * $74;
  $15 = $76;
  $77 = $15;
  $78 = $77 > 0.0;
  $79 = $15;
  if ($78) {
   $13 = $79;
   $80 = $15;
   $81 = $11;
   $82 = $81 + $80;
   $11 = $82;
  } else {
   $83 = $79 == 0.0;
   if ($83) {
    label = 9;
    break;
   }
   $84 = $15;
   $85 = - $84;
   $14 = $85;
   $86 = $15;
   $87 = $12;
   $88 = $87 - $86;
   $12 = $88;
  }
  $89 = $16;
  $90 = $11;
  $91 = $12;
  $92 = $90 - $91;
  $93 = $89 / $92;
  $94 = (+Math_abs((+$93)));
  $95 = $94 < 2.2204460492503131E-16;
  if ($95) {
   $96 = $15;
   $97 = $11;
   $98 = $12;
   $99 = $97 - $98;
   $100 = $96 / $99;
   $101 = (+Math_abs((+$100)));
   $102 = $101 < 2.2204460492503131E-16;
   if ($102) {
    break;
   }
  }
  $103 = $17;
  $104 = $103 + 1.0;
  $17 = $104;
  $105 = $13;
  $106 = $14;
  $107 = $105 + $106;
  $108 = $11;
  $109 = $12;
  $110 = $108 - $109;
  $111 = $107 / $110;
  $112 = (+Math_abs((+$111)));
  $113 = $112 > 2.2204460492503131E-16;
  if (!($113)) {
   break;
  }
 }
 if ((label|0) == 5) {
  $28 = $11;
  $29 = $12;
  $30 = $28 - $29;
  $31 = $10;
  HEAPF64[$31>>3] = $30;
  $32 = $13;
  $33 = $14;
  $34 = $32 + $33;
  $35 = $10;
  $36 = ((($35)) + 8|0);
  HEAPF64[$36>>3] = $34;
  $37 = $11;
  $38 = $12;
  $39 = $37 + $38;
  $40 = 4.4408920985006262E-16 * $39;
  $41 = $10;
  $42 = ((($41)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $43 + $40;
  HEAPF64[$42>>3] = $44;
  $45 = $17;
  $46 = (+Math_sqrt((+$45)));
  $47 = 2.0 * $46;
  $48 = $47 + 1.0;
  $49 = 4.4408920985006262E-16 * $48;
  $50 = $10;
  $51 = +HEAPF64[$50>>3];
  $52 = (+Math_abs((+$51)));
  $53 = $49 * $52;
  $54 = $10;
  $55 = ((($54)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56 + $53;
  HEAPF64[$55>>3] = $57;
  _gsl_error(83691,83447,66,11);
  $5 = 11;
  $144 = $5;
  STACKTOP = sp;return ($144|0);
 }
 else if ((label|0) == 9) {
  $13 = 0.0;
  $14 = 0.0;
 }
 $114 = $11;
 $115 = $12;
 $116 = $114 - $115;
 $117 = $10;
 HEAPF64[$117>>3] = $116;
 $118 = $13;
 $119 = $14;
 $120 = $118 + $119;
 $121 = $10;
 $122 = ((($121)) + 8|0);
 HEAPF64[$122>>3] = $120;
 $123 = $11;
 $124 = $12;
 $125 = $123 + $124;
 $126 = 4.4408920985006262E-16 * $125;
 $127 = $10;
 $128 = ((($127)) + 8|0);
 $129 = +HEAPF64[$128>>3];
 $130 = $129 + $126;
 HEAPF64[$128>>3] = $130;
 $131 = $17;
 $132 = (+Math_sqrt((+$131)));
 $133 = 2.0 * $132;
 $134 = $133 + 1.0;
 $135 = 4.4408920985006262E-16 * $134;
 $136 = $10;
 $137 = +HEAPF64[$136>>3];
 $138 = (+Math_abs((+$137)));
 $139 = $135 * $138;
 $140 = $10;
 $141 = ((($140)) + 8|0);
 $142 = +HEAPF64[$141>>3];
 $143 = $142 + $139;
 HEAPF64[$141>>3] = $143;
 $5 = 0;
 $144 = $5;
 STACKTOP = sp;return ($144|0);
}
function _hyperg_2F1_luke($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0.0;
 var $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0;
 var $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 1.0000000000000001E+50;
 $12 = 20000;
 $13 = 3;
 $44 = $8;
 $45 = - $44;
 $14 = $45;
 $46 = $14;
 $47 = $14;
 $48 = $46 * $47;
 $49 = $14;
 $50 = $48 * $49;
 $15 = $50;
 $51 = $5;
 $52 = $6;
 $53 = $51 * $52;
 $54 = $7;
 $55 = $53 / $54;
 $16 = $55;
 $56 = $5;
 $57 = $56 + 1.0;
 $58 = $6;
 $59 = $58 + 1.0;
 $60 = $57 * $59;
 $61 = $7;
 $62 = 2.0 * $61;
 $63 = $60 / $62;
 $17 = $63;
 $64 = $5;
 $65 = $64 + 2.0;
 $66 = $6;
 $67 = $66 + 2.0;
 $68 = $65 * $67;
 $69 = $7;
 $70 = $69 + 1.0;
 $71 = 2.0 * $70;
 $72 = $68 / $71;
 $18 = $72;
 $19 = 1.0;
 $21 = 1.0;
 $73 = $17;
 $74 = $14;
 $75 = $73 * $74;
 $76 = 1.0 + $75;
 $22 = $76;
 $77 = $18;
 $78 = $14;
 $79 = $77 * $78;
 $80 = $17;
 $81 = $80 / 3.0;
 $82 = $14;
 $83 = $81 * $82;
 $84 = 1.0 + $83;
 $85 = $79 * $84;
 $86 = 1.0 + $85;
 $23 = $86;
 $24 = 1.0;
 $87 = $22;
 $88 = $16;
 $89 = $14;
 $90 = $88 * $89;
 $91 = $87 - $90;
 $25 = $91;
 $92 = $23;
 $93 = $16;
 $94 = $18;
 $95 = $14;
 $96 = $94 * $95;
 $97 = 1.0 + $96;
 $98 = $93 * $97;
 $99 = $14;
 $100 = $98 * $99;
 $101 = $92 - $100;
 $102 = $16;
 $103 = $17;
 $104 = $102 * $103;
 $105 = $7;
 $106 = $7;
 $107 = $106 + 1.0;
 $108 = $105 / $107;
 $109 = $104 * $108;
 $110 = $14;
 $111 = $109 * $110;
 $112 = $14;
 $113 = $111 * $112;
 $114 = $101 + $113;
 $26 = $114;
 while(1) {
  $115 = $13;
  $116 = (+($115|0));
  $117 = $5;
  $118 = $116 + $117;
  $119 = $118 - 1.0;
  $27 = $119;
  $120 = $13;
  $121 = (+($120|0));
  $122 = $6;
  $123 = $121 + $122;
  $124 = $123 - 1.0;
  $28 = $124;
  $125 = $13;
  $126 = (+($125|0));
  $127 = $7;
  $128 = $126 + $127;
  $129 = $128 - 1.0;
  $29 = $129;
  $130 = $13;
  $131 = (+($130|0));
  $132 = $5;
  $133 = $131 + $132;
  $134 = $133 - 2.0;
  $30 = $134;
  $135 = $13;
  $136 = (+($135|0));
  $137 = $6;
  $138 = $136 + $137;
  $139 = $138 - 2.0;
  $31 = $139;
  $140 = $13;
  $141 = (+($140|0));
  $142 = $7;
  $143 = $141 + $142;
  $144 = $143 - 2.0;
  $32 = $144;
  $145 = $13;
  $146 = $145<<1;
  $147 = (($146) - 1)|0;
  $148 = (+($147|0));
  $33 = $148;
  $149 = $13;
  $150 = $149<<1;
  $151 = (($150) - 3)|0;
  $152 = (+($151|0));
  $34 = $152;
  $153 = $13;
  $154 = $153<<1;
  $155 = (($154) - 5)|0;
  $156 = (+($155|0));
  $35 = $156;
  $157 = $13;
  $158 = $13;
  $159 = Math_imul($157, $158)|0;
  $160 = (+($159|0));
  $36 = $160;
  $161 = $36;
  $162 = 3.0 * $161;
  $163 = $5;
  $164 = $6;
  $165 = $163 + $164;
  $166 = $165 - 6.0;
  $167 = $13;
  $168 = (+($167|0));
  $169 = $166 * $168;
  $170 = $162 + $169;
  $171 = $170 + 2.0;
  $172 = $5;
  $173 = $6;
  $174 = $172 * $173;
  $175 = $171 - $174;
  $176 = $5;
  $177 = $6;
  $178 = $176 + $177;
  $179 = 2.0 * $178;
  $180 = $175 - $179;
  $181 = $34;
  $182 = 2.0 * $181;
  $183 = $29;
  $184 = $182 * $183;
  $185 = $180 / $184;
  $37 = $185;
  $186 = $36;
  $187 = 3.0 * $186;
  $188 = $5;
  $189 = $6;
  $190 = $188 + $189;
  $191 = $190 + 6.0;
  $192 = $13;
  $193 = (+($192|0));
  $194 = $191 * $193;
  $195 = $187 - $194;
  $196 = $195 + 2.0;
  $197 = $5;
  $198 = $6;
  $199 = $197 * $198;
  $200 = $196 - $199;
  $201 = - $200;
  $202 = $27;
  $203 = $201 * $202;
  $204 = $28;
  $205 = $203 * $204;
  $206 = $33;
  $207 = 4.0 * $206;
  $208 = $34;
  $209 = $207 * $208;
  $210 = $32;
  $211 = $209 * $210;
  $212 = $29;
  $213 = $211 * $212;
  $214 = $205 / $213;
  $38 = $214;
  $215 = $30;
  $216 = $27;
  $217 = $215 * $216;
  $218 = $31;
  $219 = $217 * $218;
  $220 = $28;
  $221 = $219 * $220;
  $222 = $13;
  $223 = (+($222|0));
  $224 = $5;
  $225 = $223 - $224;
  $226 = $225 - 2.0;
  $227 = $221 * $226;
  $228 = $13;
  $229 = (+($228|0));
  $230 = $6;
  $231 = $229 - $230;
  $232 = $231 - 2.0;
  $233 = $227 * $232;
  $234 = $34;
  $235 = 8.0 * $234;
  $236 = $34;
  $237 = $235 * $236;
  $238 = $35;
  $239 = $237 * $238;
  $240 = $13;
  $241 = (+($240|0));
  $242 = $7;
  $243 = $241 + $242;
  $244 = $243 - 3.0;
  $245 = $239 * $244;
  $246 = $32;
  $247 = $245 * $246;
  $248 = $29;
  $249 = $247 * $248;
  $250 = $233 / $249;
  $39 = $250;
  $251 = $27;
  $252 = - $251;
  $253 = $28;
  $254 = $252 * $253;
  $255 = $13;
  $256 = (+($255|0));
  $257 = $7;
  $258 = $256 - $257;
  $259 = $258 - 1.0;
  $260 = $254 * $259;
  $261 = $34;
  $262 = 2.0 * $261;
  $263 = $32;
  $264 = $262 * $263;
  $265 = $29;
  $266 = $264 * $265;
  $267 = $260 / $266;
  $40 = $267;
  $268 = $37;
  $269 = $14;
  $270 = $268 * $269;
  $271 = 1.0 + $270;
  $272 = $26;
  $273 = $271 * $272;
  $274 = $40;
  $275 = $38;
  $276 = $14;
  $277 = $275 * $276;
  $278 = $274 + $277;
  $279 = $14;
  $280 = $278 * $279;
  $281 = $25;
  $282 = $280 * $281;
  $283 = $273 + $282;
  $284 = $39;
  $285 = $15;
  $286 = $284 * $285;
  $287 = $24;
  $288 = $286 * $287;
  $289 = $283 + $288;
  $41 = $289;
  $290 = $37;
  $291 = $14;
  $292 = $290 * $291;
  $293 = 1.0 + $292;
  $294 = $23;
  $295 = $293 * $294;
  $296 = $40;
  $297 = $38;
  $298 = $14;
  $299 = $297 * $298;
  $300 = $296 + $299;
  $301 = $14;
  $302 = $300 * $301;
  $303 = $22;
  $304 = $302 * $303;
  $305 = $295 + $304;
  $306 = $39;
  $307 = $15;
  $308 = $306 * $307;
  $309 = $21;
  $310 = $308 * $309;
  $311 = $305 + $310;
  $42 = $311;
  $312 = $41;
  $313 = $42;
  $314 = $312 / $313;
  $43 = $314;
  $315 = $19;
  $316 = $43;
  $317 = $315 - $316;
  $318 = $19;
  $319 = $317 / $318;
  $320 = (+Math_abs((+$319)));
  $20 = $320;
  $321 = $43;
  $19 = $321;
  $322 = $20;
  $323 = $322 < 2.2204460492503131E-16;
  $324 = $13;
  $325 = ($324|0)>(20000);
  $or$cond = $323 | $325;
  if ($or$cond) {
   break;
  }
  $326 = $41;
  $327 = (+Math_abs((+$326)));
  $328 = $327 > 1.0000000000000001E+50;
  do {
   if ($328) {
    label = 5;
   } else {
    $329 = $42;
    $330 = (+Math_abs((+$329)));
    $331 = $330 > 1.0000000000000001E+50;
    if ($331) {
     label = 5;
    } else {
     $348 = $41;
     $349 = (+Math_abs((+$348)));
     $350 = $349 < 9.9999999999999988E-51;
     if (!($350)) {
      $351 = $42;
      $352 = (+Math_abs((+$351)));
      $353 = $352 < 9.9999999999999988E-51;
      if (!($353)) {
       break;
      }
     }
     $354 = $41;
     $355 = $354 * 1.0000000000000001E+50;
     $41 = $355;
     $356 = $42;
     $357 = $356 * 1.0000000000000001E+50;
     $42 = $357;
     $358 = $26;
     $359 = $358 * 1.0000000000000001E+50;
     $26 = $359;
     $360 = $23;
     $361 = $360 * 1.0000000000000001E+50;
     $23 = $361;
     $362 = $25;
     $363 = $362 * 1.0000000000000001E+50;
     $25 = $363;
     $364 = $22;
     $365 = $364 * 1.0000000000000001E+50;
     $22 = $365;
     $366 = $24;
     $367 = $366 * 1.0000000000000001E+50;
     $24 = $367;
     $368 = $21;
     $369 = $368 * 1.0000000000000001E+50;
     $21 = $369;
    }
   }
  } while(0);
  if ((label|0) == 5) {
   label = 0;
   $332 = $41;
   $333 = $332 / 1.0000000000000001E+50;
   $41 = $333;
   $334 = $42;
   $335 = $334 / 1.0000000000000001E+50;
   $42 = $335;
   $336 = $26;
   $337 = $336 / 1.0000000000000001E+50;
   $26 = $337;
   $338 = $23;
   $339 = $338 / 1.0000000000000001E+50;
   $23 = $339;
   $340 = $25;
   $341 = $340 / 1.0000000000000001E+50;
   $25 = $341;
   $342 = $22;
   $343 = $342 / 1.0000000000000001E+50;
   $22 = $343;
   $344 = $24;
   $345 = $344 / 1.0000000000000001E+50;
   $24 = $345;
   $346 = $21;
   $347 = $346 / 1.0000000000000001E+50;
   $21 = $347;
  }
  $370 = $13;
  $371 = (($370) + 1)|0;
  $13 = $371;
  $372 = $22;
  $21 = $372;
  $373 = $23;
  $22 = $373;
  $374 = $42;
  $23 = $374;
  $375 = $25;
  $24 = $375;
  $376 = $26;
  $25 = $376;
  $377 = $41;
  $26 = $377;
 }
 $378 = $19;
 $379 = $9;
 HEAPF64[$379>>3] = $378;
 $380 = $20;
 $381 = $19;
 $382 = $380 * $381;
 $383 = (+Math_abs((+$382)));
 $384 = 2.0 * $383;
 $385 = $9;
 $386 = ((($385)) + 8|0);
 HEAPF64[$386>>3] = $384;
 $387 = $13;
 $388 = (+($387|0));
 $389 = $388 + 1.0;
 $390 = 4.4408920985006262E-16 * $389;
 $391 = $19;
 $392 = (+Math_abs((+$391)));
 $393 = $390 * $392;
 $394 = $9;
 $395 = ((($394)) + 8|0);
 $396 = +HEAPF64[$395>>3];
 $397 = $396 + $393;
 HEAPF64[$395>>3] = $397;
 $398 = $5;
 $399 = (+Math_abs((+$398)));
 $400 = $6;
 $401 = (+Math_abs((+$400)));
 $402 = $399 + $401;
 $403 = $402 + 1.0;
 $404 = 8.0 * $403;
 $405 = $9;
 $406 = ((($405)) + 8|0);
 $407 = +HEAPF64[$406>>3];
 $408 = $407 * $404;
 HEAPF64[$406>>3] = $408;
 $409 = $13;
 $410 = ($409|0)>=(20000);
 $411 = $410 ? 11 : 0;
 $10 = $411;
 $412 = $10;
 STACKTOP = sp;return ($412|0);
}
function _hyperg_2F1_reflect($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0.0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0;
 var $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0;
 var $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0.0;
 var $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0.0;
 var $463 = 0, $464 = 0.0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0;
 var $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0;
 var $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0.0, $53 = 0.0, $530 = 0.0, $531 = 0, $532 = 0.0, $533 = 0, $534 = 0.0;
 var $535 = 0.0, $536 = 0, $537 = 0.0, $538 = 0.0, $539 = 0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0.0, $545 = 0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0;
 var $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0;
 var $571 = 0.0, $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0;
 var $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0.0, $60 = 0.0, $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0;
 var $607 = 0.0, $608 = 0.0, $609 = 0, $61 = 0.0, $610 = 0.0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0.0, $619 = 0.0, $62 = 0, $620 = 0.0, $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0;
 var $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0.0, $640 = 0, $641 = 0.0, $642 = 0.0;
 var $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0.0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0.0;
 var $661 = 0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0, $679 = 0.0;
 var $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0.0;
 var $698 = 0, $699 = 0, $7 = 0.0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(816|0);
 $18 = sp + 608|0;
 $19 = sp + 592|0;
 $22 = sp + 560|0;
 $23 = sp + 544|0;
 $24 = sp + 528|0;
 $28 = sp + 512|0;
 $29 = sp + 496|0;
 $30 = sp + 480|0;
 $43 = sp + 424|0;
 $44 = sp + 408|0;
 $45 = sp + 392|0;
 $62 = sp + 296|0;
 $63 = sp + 280|0;
 $66 = sp + 248|0;
 $67 = sp + 232|0;
 $70 = sp + 216|0;
 $71 = sp + 200|0;
 $72 = sp + 184|0;
 $73 = sp + 168|0;
 $74 = sp + 160|0;
 $75 = sp + 152|0;
 $76 = sp + 144|0;
 $77 = sp + 136|0;
 $84 = sp + 120|0;
 $85 = sp + 104|0;
 $86 = sp + 88|0;
 $87 = sp + 80|0;
 $88 = sp + 72|0;
 $89 = sp + 64|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $98 = $8;
 $99 = $6;
 $100 = $98 - $99;
 $101 = $7;
 $102 = $100 - $101;
 $11 = $102;
 $103 = $11;
 $104 = $103 + 0.5;
 $105 = (+Math_floor((+$104)));
 $106 = (~~(($105)));
 $12 = $106;
 $107 = $11;
 $108 = $12;
 $109 = (+($108|0));
 $110 = $107 - $109;
 $111 = (+Math_abs((+$110)));
 $112 = $111 < 2.2204460492503131E-13;
 $113 = $112&1;
 $13 = $113;
 $114 = $13;
 $115 = ($114|0)!=(0);
 if (!($115)) {
  $454 = $8;
  $455 = $6;
  $456 = $454 - $455;
  $457 = (_gsl_sf_lngamma_sgn_e($456,$70,$74)|0);
  $78 = $457;
  $458 = $8;
  $459 = $7;
  $460 = $458 - $459;
  $461 = (_gsl_sf_lngamma_sgn_e($460,$71,$75)|0);
  $79 = $461;
  $462 = $6;
  $463 = (_gsl_sf_lngamma_sgn_e($462,$72,$76)|0);
  $80 = $463;
  $464 = $7;
  $465 = (_gsl_sf_lngamma_sgn_e($464,$73,$77)|0);
  $81 = $465;
  $466 = $78;
  $467 = ($466|0)==(0);
  $468 = $79;
  $469 = ($468|0)==(0);
  $470 = $467 ? $469 : 0;
  $471 = $470&1;
  $82 = $471;
  $472 = $80;
  $473 = ($472|0)==(0);
  $474 = $81;
  $475 = ($474|0)==(0);
  $476 = $473 ? $475 : 0;
  $477 = $476&1;
  $83 = $477;
  $478 = $8;
  (_gsl_sf_lngamma_sgn_e($478,$84,$87)|0);
  $479 = $11;
  (_gsl_sf_lngamma_sgn_e($479,$85,$88)|0);
  $480 = $11;
  $481 = - $480;
  (_gsl_sf_lngamma_sgn_e($481,$86,$89)|0);
  $482 = +HEAPF64[$87>>3];
  $483 = +HEAPF64[$88>>3];
  $484 = $482 * $483;
  $485 = +HEAPF64[$74>>3];
  $486 = $484 * $485;
  $487 = +HEAPF64[$75>>3];
  $488 = $486 * $487;
  $64 = $488;
  $489 = +HEAPF64[$87>>3];
  $490 = +HEAPF64[$89>>3];
  $491 = $489 * $490;
  $492 = +HEAPF64[$76>>3];
  $493 = $491 * $492;
  $494 = +HEAPF64[$77>>3];
  $495 = $493 * $494;
  $65 = $495;
  $496 = $82;
  $497 = ($496|0)!=(0);
  $498 = $83;
  $499 = ($498|0)!=(0);
  $or$cond7 = $497 & $499;
  do {
   if ($or$cond7) {
    $500 = +HEAPF64[$84>>3];
    $501 = +HEAPF64[$85>>3];
    $502 = $500 + $501;
    $503 = +HEAPF64[$70>>3];
    $504 = $502 - $503;
    $505 = +HEAPF64[$71>>3];
    $506 = $504 - $505;
    $90 = $506;
    $507 = +HEAPF64[$84>>3];
    $508 = +HEAPF64[$86>>3];
    $509 = $507 + $508;
    $510 = +HEAPF64[$72>>3];
    $511 = $509 - $510;
    $512 = +HEAPF64[$73>>3];
    $513 = $511 - $512;
    $514 = $11;
    $515 = $9;
    $516 = 1.0 - $515;
    $517 = (+Math_log((+$516)));
    $518 = $514 * $517;
    $519 = $513 + $518;
    $91 = $519;
    $520 = ((($84)) + 8|0);
    $521 = +HEAPF64[$520>>3];
    $522 = ((($85)) + 8|0);
    $523 = +HEAPF64[$522>>3];
    $524 = $521 + $523;
    $525 = ((($70)) + 8|0);
    $526 = +HEAPF64[$525>>3];
    $527 = $524 + $526;
    $528 = ((($71)) + 8|0);
    $529 = +HEAPF64[$528>>3];
    $530 = $527 + $529;
    $92 = $530;
    $531 = ((($84)) + 8|0);
    $532 = +HEAPF64[$531>>3];
    $533 = ((($86)) + 8|0);
    $534 = +HEAPF64[$533>>3];
    $535 = $532 + $534;
    $536 = ((($72)) + 8|0);
    $537 = +HEAPF64[$536>>3];
    $538 = $535 + $537;
    $539 = ((($73)) + 8|0);
    $540 = +HEAPF64[$539>>3];
    $541 = $538 + $540;
    $93 = $541;
    $542 = $90;
    $543 = $542 < 709.78271289338397;
    $544 = $91;
    $545 = $544 < 709.78271289338397;
    $or$cond9 = $543 & $545;
    if ($or$cond9) {
     $546 = $90;
     $547 = $92;
     (_gsl_sf_exp_err_e($546,$547,$62)|0);
     $548 = $91;
     $549 = $93;
     (_gsl_sf_exp_err_e($548,$549,$63)|0);
     $550 = $64;
     $551 = +HEAPF64[$62>>3];
     $552 = $551 * $550;
     HEAPF64[$62>>3] = $552;
     $553 = $65;
     $554 = +HEAPF64[$63>>3];
     $555 = $554 * $553;
     HEAPF64[$63>>3] = $555;
     break;
    }
    $556 = $10;
    HEAPF64[$556>>3] = inf;
    $557 = $10;
    $558 = ((($557)) + 8|0);
    HEAPF64[$558>>3] = inf;
    _gsl_error(83804,83447,570,16);
    $5 = 16;
    $716 = $5;
    STACKTOP = sp;return ($716|0);
   } else {
    $559 = $82;
    $560 = ($559|0)==(0);
    $561 = $83;
    $562 = ($561|0)!=(0);
    $or$cond11 = $560 | $562;
    if (!($or$cond11)) {
     $563 = +HEAPF64[$84>>3];
     $564 = +HEAPF64[$85>>3];
     $565 = $563 + $564;
     $566 = +HEAPF64[$70>>3];
     $567 = $565 - $566;
     $568 = +HEAPF64[$71>>3];
     $569 = $567 - $568;
     $94 = $569;
     $570 = ((($84)) + 8|0);
     $571 = +HEAPF64[$570>>3];
     $572 = ((($85)) + 8|0);
     $573 = +HEAPF64[$572>>3];
     $574 = $571 + $573;
     $575 = ((($70)) + 8|0);
     $576 = +HEAPF64[$575>>3];
     $577 = $574 + $576;
     $578 = ((($71)) + 8|0);
     $579 = +HEAPF64[$578>>3];
     $580 = $577 + $579;
     $95 = $580;
     $581 = $94;
     $582 = $581 < 709.78271289338397;
     if ($582) {
      $583 = $94;
      $584 = $95;
      (_gsl_sf_exp_err_e($583,$584,$62)|0);
      $585 = $64;
      $586 = +HEAPF64[$62>>3];
      $587 = $586 * $585;
      HEAPF64[$62>>3] = $587;
      HEAPF64[$63>>3] = 0.0;
      $588 = ((($63)) + 8|0);
      HEAPF64[$588>>3] = 0.0;
      break;
     }
     $589 = $10;
     HEAPF64[$589>>3] = inf;
     $590 = $10;
     $591 = ((($590)) + 8|0);
     HEAPF64[$591>>3] = inf;
     _gsl_error(83804,83447,583,16);
     $5 = 16;
     $716 = $5;
     STACKTOP = sp;return ($716|0);
    }
    $592 = $82;
    $593 = ($592|0)==(0);
    $594 = $83;
    $595 = ($594|0)!=(0);
    $or$cond13 = $593 & $595;
    if (!($or$cond13)) {
     HEAPF64[$62>>3] = 0.0;
     HEAPF64[$63>>3] = 0.0;
     $631 = $10;
     HEAPF64[$631>>3] = 0.0;
     $632 = $10;
     $633 = ((($632)) + 8|0);
     HEAPF64[$633>>3] = 2.2250738585072014E-308;
     _gsl_error(83794,83447,602,15);
     $5 = 15;
     $716 = $5;
     STACKTOP = sp;return ($716|0);
    }
    $596 = +HEAPF64[$84>>3];
    $597 = +HEAPF64[$86>>3];
    $598 = $596 + $597;
    $599 = +HEAPF64[$72>>3];
    $600 = $598 - $599;
    $601 = +HEAPF64[$73>>3];
    $602 = $600 - $601;
    $603 = $11;
    $604 = $9;
    $605 = 1.0 - $604;
    $606 = (+Math_log((+$605)));
    $607 = $603 * $606;
    $608 = $602 + $607;
    $96 = $608;
    $609 = ((($84)) + 8|0);
    $610 = +HEAPF64[$609>>3];
    $611 = ((($86)) + 8|0);
    $612 = +HEAPF64[$611>>3];
    $613 = $610 + $612;
    $614 = ((($72)) + 8|0);
    $615 = +HEAPF64[$614>>3];
    $616 = $613 + $615;
    $617 = ((($73)) + 8|0);
    $618 = +HEAPF64[$617>>3];
    $619 = $616 + $618;
    $97 = $619;
    $620 = $96;
    $621 = $620 < 709.78271289338397;
    if ($621) {
     HEAPF64[$62>>3] = 0.0;
     $622 = ((($62)) + 8|0);
     HEAPF64[$622>>3] = 0.0;
     $623 = $96;
     $624 = $97;
     (_gsl_sf_exp_err_e($623,$624,$63)|0);
     $625 = $65;
     $626 = +HEAPF64[$63>>3];
     $627 = $626 * $625;
     HEAPF64[$63>>3] = $627;
     break;
    }
    $628 = $10;
    HEAPF64[$628>>3] = inf;
    $629 = $10;
    $630 = ((($629)) + 8|0);
    HEAPF64[$630>>3] = inf;
    _gsl_error(83804,83447,596,16);
    $5 = 16;
    $716 = $5;
    STACKTOP = sp;return ($716|0);
   }
  } while(0);
  $634 = $6;
  $635 = $7;
  $636 = $11;
  $637 = 1.0 - $636;
  $638 = $9;
  $639 = 1.0 - $638;
  $640 = (_hyperg_2F1_series($634,$635,$637,$639,$66)|0);
  $68 = $640;
  $641 = $8;
  $642 = $6;
  $643 = $641 - $642;
  $644 = $8;
  $645 = $7;
  $646 = $644 - $645;
  $647 = $11;
  $648 = 1.0 + $647;
  $649 = $9;
  $650 = 1.0 - $649;
  $651 = (_hyperg_2F1_series($643,$646,$648,$650,$67)|0);
  $69 = $651;
  $652 = +HEAPF64[$62>>3];
  $653 = +HEAPF64[$66>>3];
  $654 = $652 * $653;
  $655 = +HEAPF64[$63>>3];
  $656 = +HEAPF64[$67>>3];
  $657 = $655 * $656;
  $658 = $654 + $657;
  $659 = $10;
  HEAPF64[$659>>3] = $658;
  $660 = +HEAPF64[$62>>3];
  $661 = ((($66)) + 8|0);
  $662 = +HEAPF64[$661>>3];
  $663 = $660 * $662;
  $664 = (+Math_abs((+$663)));
  $665 = +HEAPF64[$63>>3];
  $666 = ((($67)) + 8|0);
  $667 = +HEAPF64[$666>>3];
  $668 = $665 * $667;
  $669 = (+Math_abs((+$668)));
  $670 = $664 + $669;
  $671 = $10;
  $672 = ((($671)) + 8|0);
  HEAPF64[$672>>3] = $670;
  $673 = ((($62)) + 8|0);
  $674 = +HEAPF64[$673>>3];
  $675 = +HEAPF64[$66>>3];
  $676 = $674 * $675;
  $677 = (+Math_abs((+$676)));
  $678 = ((($63)) + 8|0);
  $679 = +HEAPF64[$678>>3];
  $680 = +HEAPF64[$67>>3];
  $681 = $679 * $680;
  $682 = (+Math_abs((+$681)));
  $683 = $677 + $682;
  $684 = $10;
  $685 = ((($684)) + 8|0);
  $686 = +HEAPF64[$685>>3];
  $687 = $686 + $683;
  HEAPF64[$685>>3] = $687;
  $688 = +HEAPF64[$62>>3];
  $689 = +HEAPF64[$66>>3];
  $690 = $688 * $689;
  $691 = (+Math_abs((+$690)));
  $692 = +HEAPF64[$63>>3];
  $693 = +HEAPF64[$67>>3];
  $694 = $692 * $693;
  $695 = (+Math_abs((+$694)));
  $696 = $691 + $695;
  $697 = 4.4408920985006262E-16 * $696;
  $698 = $10;
  $699 = ((($698)) + 8|0);
  $700 = +HEAPF64[$699>>3];
  $701 = $700 + $697;
  HEAPF64[$699>>3] = $701;
  $702 = $10;
  $703 = +HEAPF64[$702>>3];
  $704 = (+Math_abs((+$703)));
  $705 = 4.4408920985006262E-16 * $704;
  $706 = $10;
  $707 = ((($706)) + 8|0);
  $708 = +HEAPF64[$707>>3];
  $709 = $708 + $705;
  HEAPF64[$707>>3] = $709;
  $710 = $68;
  $711 = ($710|0)!=(0);
  if ($711) {
   $712 = $68;
   $5 = $712;
   $716 = $5;
   STACKTOP = sp;return ($716|0);
  }
  $713 = $69;
  $714 = ($713|0)!=(0);
  if ($714) {
   $715 = $69;
   $5 = $715;
   $716 = $5;
   STACKTOP = sp;return ($716|0);
  } else {
   $5 = 0;
   $716 = $5;
   STACKTOP = sp;return ($716|0);
  }
 }
 $116 = $9;
 $117 = 1.0 - $116;
 $118 = (+Math_log((+$117)));
 $14 = $118;
 $119 = $11;
 $120 = (+Math_abs((+$119)));
 $15 = $120;
 $16 = 0;
 $121 = $11;
 $122 = $121 >= 0.0;
 if ($122) {
  $123 = $11;
  $20 = $123;
  $21 = 0.0;
 } else {
  $20 = 0.0;
  $124 = $11;
  $21 = $124;
 }
 $125 = $6;
 $126 = $21;
 $127 = $125 + $126;
 $128 = (_gsl_sf_lngamma_e($127,$23)|0);
 $26 = $128;
 $129 = $7;
 $130 = $21;
 $131 = $129 + $130;
 $132 = (_gsl_sf_lngamma_e($131,$24)|0);
 $27 = $132;
 $133 = $8;
 $134 = (_gsl_sf_lngamma_e($133,$22)|0);
 $25 = $134;
 $135 = $15;
 $136 = $135 < 2.2204460492503131E-16;
 do {
  if ($136) {
   HEAPF64[$18>>3] = 0.0;
   $137 = ((($18)) + 8|0);
   HEAPF64[$137>>3] = 0.0;
  } else {
   $138 = $15;
   $139 = (_gsl_sf_lngamma_e($138,$28)|0);
   $31 = $139;
   $140 = $6;
   $141 = $20;
   $142 = $140 + $141;
   $143 = (_gsl_sf_lngamma_e($142,$29)|0);
   $32 = $143;
   $144 = $7;
   $145 = $20;
   $146 = $144 + $145;
   $147 = (_gsl_sf_lngamma_e($146,$30)|0);
   $33 = $147;
   $148 = $32;
   $149 = ($148|0)==(0);
   $150 = $33;
   $151 = ($150|0)==(0);
   $or$cond = $149 & $151;
   $152 = $31;
   $153 = ($152|0)==(0);
   $or$cond3 = $or$cond & $153;
   if (!($or$cond3)) {
    HEAPF64[$18>>3] = 0.0;
    $230 = ((($18)) + 8|0);
    HEAPF64[$230>>3] = 0.0;
    break;
   }
   $35 = 1.0;
   $36 = 1.0;
   $154 = +HEAPF64[$28>>3];
   $155 = +HEAPF64[$22>>3];
   $156 = $154 + $155;
   $157 = $21;
   $158 = $14;
   $159 = $157 * $158;
   $160 = $156 + $159;
   $161 = +HEAPF64[$29>>3];
   $162 = $160 - $161;
   $163 = +HEAPF64[$30>>3];
   $164 = $162 - $163;
   $37 = $164;
   $165 = ((($28)) + 8|0);
   $166 = +HEAPF64[$165>>3];
   $167 = ((($22)) + 8|0);
   $168 = +HEAPF64[$167>>3];
   $169 = $166 + $168;
   $170 = ((($29)) + 8|0);
   $171 = +HEAPF64[$170>>3];
   $172 = $169 + $171;
   $173 = ((($30)) + 8|0);
   $174 = +HEAPF64[$173>>3];
   $175 = $172 + $174;
   $176 = $37;
   $177 = (+Math_abs((+$176)));
   $178 = 2.2204460492503131E-16 * $177;
   $179 = $175 + $178;
   $38 = $179;
   $34 = 1;
   while(1) {
    $180 = $34;
    $181 = (+($180|0));
    $182 = $15;
    $183 = $181 < $182;
    if (!($183)) {
     break;
    }
    $184 = $34;
    $185 = (($184) - 1)|0;
    $40 = $185;
    $186 = $6;
    $187 = $21;
    $188 = $186 + $187;
    $189 = $40;
    $190 = (+($189|0));
    $191 = $188 + $190;
    $192 = $7;
    $193 = $21;
    $194 = $192 + $193;
    $195 = $40;
    $196 = (+($195|0));
    $197 = $194 + $196;
    $198 = $191 * $197;
    $199 = $21;
    $200 = 1.0 + $199;
    $201 = $40;
    $202 = (+($201|0));
    $203 = $200 + $202;
    $204 = $198 / $203;
    $205 = $34;
    $206 = (+($205|0));
    $207 = $204 / $206;
    $208 = $9;
    $209 = 1.0 - $208;
    $210 = $207 * $209;
    $211 = $36;
    $212 = $211 * $210;
    $36 = $212;
    $213 = $36;
    $214 = $35;
    $215 = $214 + $213;
    $35 = $215;
    $216 = $34;
    $217 = (($216) + 1)|0;
    $34 = $217;
   }
   $218 = $37;
   $219 = $38;
   $220 = $35;
   $221 = $35;
   $222 = (+Math_abs((+$221)));
   $223 = 2.2204460492503131E-16 * $222;
   $224 = (_gsl_sf_exp_mult_err_e($218,$219,$220,$223,$18)|0);
   $39 = $224;
   $225 = $39;
   $226 = ($225|0)==(16);
   if ($226) {
    $227 = $10;
    HEAPF64[$227>>3] = inf;
    $228 = $10;
    $229 = ((($228)) + 8|0);
    HEAPF64[$229>>3] = inf;
    _gsl_error(83804,83447,440,16);
    $5 = 16;
    $716 = $5;
    STACKTOP = sp;return ($716|0);
   }
  }
 } while(0);
 $231 = $26;
 $232 = ($231|0)==(0);
 $233 = $27;
 $234 = ($233|0)==(0);
 $or$cond5 = $232 & $234;
 if ($or$cond5) {
  $41 = 2000;
  $42 = -0.57721566490153287;
  $235 = $15;
  $236 = 1.0 + $235;
  $237 = (_gsl_sf_psi_e($236,$43)|0);
  $46 = $237;
  $238 = $6;
  $239 = $20;
  $240 = $238 + $239;
  $241 = (_gsl_sf_psi_e($240,$44)|0);
  $47 = $241;
  $242 = $7;
  $243 = $20;
  $244 = $242 + $243;
  $245 = (_gsl_sf_psi_e($244,$45)|0);
  $48 = $245;
  $246 = $46;
  $247 = ($246|0)!=(0);
  do {
   if ($247) {
    $248 = $46;
    $256 = $248;
   } else {
    $249 = $47;
    $250 = ($249|0)!=(0);
    if ($250) {
     $251 = $47;
     $256 = $251;
     break;
    } else {
     $252 = $48;
     $253 = ($252|0)!=(0);
     $254 = $48;
     $255 = $253 ? $254 : 0;
     $256 = $255;
     break;
    }
   }
  } while(0);
  $49 = $256;
  $257 = $42;
  $258 = +HEAPF64[$43>>3];
  $259 = $257 + $258;
  $260 = +HEAPF64[$44>>3];
  $261 = $259 - $260;
  $262 = +HEAPF64[$45>>3];
  $263 = $261 - $262;
  $264 = $14;
  $265 = $263 - $264;
  $50 = $265;
  $266 = ((($43)) + 8|0);
  $267 = +HEAPF64[$266>>3];
  $268 = ((($44)) + 8|0);
  $269 = +HEAPF64[$268>>3];
  $270 = $267 + $269;
  $271 = ((($45)) + 8|0);
  $272 = +HEAPF64[$271>>3];
  $273 = $270 + $272;
  $274 = $50;
  $275 = (+Math_abs((+$274)));
  $276 = 2.2204460492503131E-16 * $275;
  $277 = $273 + $276;
  $51 = $277;
  $52 = 1.0;
  $278 = $50;
  $53 = $278;
  $279 = $51;
  $54 = $279;
  $280 = +HEAPF64[$22>>3];
  $281 = $20;
  $282 = $14;
  $283 = $281 * $282;
  $284 = $280 + $283;
  $285 = +HEAPF64[$23>>3];
  $286 = $284 - $285;
  $287 = +HEAPF64[$24>>3];
  $288 = $286 - $287;
  $55 = $288;
  $289 = ((($22)) + 8|0);
  $290 = +HEAPF64[$289>>3];
  $291 = ((($23)) + 8|0);
  $292 = +HEAPF64[$291>>3];
  $293 = $290 + $292;
  $294 = ((($24)) + 8|0);
  $295 = +HEAPF64[$294>>3];
  $296 = $293 + $295;
  $297 = $55;
  $298 = (+Math_abs((+$297)));
  $299 = 2.2204460492503131E-16 * $298;
  $300 = $296 + $299;
  $56 = $300;
  $58 = 1;
  while(1) {
   $301 = $58;
   $302 = ($301|0)<(2000);
   if (!($302)) {
    break;
   }
   $303 = $58;
   $304 = (+($303|0));
   $305 = 1.0 / $304;
   $306 = $15;
   $307 = $58;
   $308 = (+($307|0));
   $309 = $306 + $308;
   $310 = 1.0 / $309;
   $311 = $305 + $310;
   $59 = $311;
   $312 = $6;
   $313 = $20;
   $314 = $312 + $313;
   $315 = $58;
   $316 = (+($315|0));
   $317 = $314 + $316;
   $318 = $317 - 1.0;
   $319 = 1.0 / $318;
   $320 = $7;
   $321 = $20;
   $322 = $320 + $321;
   $323 = $58;
   $324 = (+($323|0));
   $325 = $322 + $324;
   $326 = $325 - 1.0;
   $327 = 1.0 / $326;
   $328 = $319 + $327;
   $60 = $328;
   $61 = 0.0;
   $329 = $59;
   $330 = $60;
   $331 = $329 - $330;
   $332 = $50;
   $333 = $332 + $331;
   $50 = $333;
   $334 = $59;
   $335 = (+Math_abs((+$334)));
   $336 = $60;
   $337 = (+Math_abs((+$336)));
   $338 = $335 + $337;
   $339 = 2.2204460492503131E-16 * $338;
   $340 = $51;
   $341 = $340 + $339;
   $51 = $341;
   $342 = $6;
   $343 = $20;
   $344 = $342 + $343;
   $345 = $58;
   $346 = (+($345|0));
   $347 = $344 + $346;
   $348 = $347 - 1.0;
   $349 = $7;
   $350 = $20;
   $351 = $349 + $350;
   $352 = $58;
   $353 = (+($352|0));
   $354 = $351 + $353;
   $355 = $354 - 1.0;
   $356 = $348 * $355;
   $357 = $15;
   $358 = $58;
   $359 = (+($358|0));
   $360 = $357 + $359;
   $361 = $58;
   $362 = (+($361|0));
   $363 = $360 * $362;
   $364 = $356 / $363;
   $365 = $9;
   $366 = 1.0 - $365;
   $367 = $364 * $366;
   $368 = $52;
   $369 = $368 * $367;
   $52 = $369;
   $370 = $52;
   $371 = $50;
   $372 = $370 * $371;
   $61 = $372;
   $373 = $61;
   $374 = $53;
   $375 = $374 + $373;
   $53 = $375;
   $376 = $52;
   $377 = $51;
   $378 = $376 * $377;
   $379 = (+Math_abs((+$378)));
   $380 = $61;
   $381 = (+Math_abs((+$380)));
   $382 = 2.2204460492503131E-16 * $381;
   $383 = $379 + $382;
   $384 = $54;
   $385 = $384 + $383;
   $54 = $385;
   $386 = $61;
   $387 = (+Math_abs((+$386)));
   $388 = $53;
   $389 = (+Math_abs((+$388)));
   $390 = 2.2204460492503131E-16 * $389;
   $391 = $387 < $390;
   if ($391) {
    break;
   }
   $392 = $58;
   $393 = (($392) + 1)|0;
   $58 = $393;
  }
  $394 = $58;
  $395 = ($394|0)==(2000);
  if ($395) {
   $16 = 11;
  }
  $396 = $53;
  $397 = $396 == 0.0;
  if ($397) {
   HEAPF64[$19>>3] = 0.0;
   $398 = ((($19)) + 8|0);
   HEAPF64[$398>>3] = 0.0;
  } else {
   $399 = $55;
   $400 = $56;
   $401 = $53;
   $402 = $54;
   $403 = (_gsl_sf_exp_mult_err_e($399,$400,$401,$402,$19)|0);
   $57 = $403;
   $404 = $57;
   $405 = ($404|0)==(16);
   if ($405) {
    $406 = $10;
    HEAPF64[$406>>3] = 0.0;
    $407 = $10;
    $408 = ((($407)) + 8|0);
    HEAPF64[$408>>3] = 0.0;
    _gsl_error(83691,83447,509,16);
    $5 = 16;
    $716 = $5;
    STACKTOP = sp;return ($716|0);
   }
  }
  $409 = $16;
  $410 = ($409|0)!=(0);
  if ($410) {
   $411 = $16;
   $416 = $411;
  } else {
   $412 = $49;
   $413 = ($412|0)!=(0);
   $414 = $49;
   $415 = $413 ? $414 : 0;
   $416 = $415;
  }
  $16 = $416;
 } else {
  HEAPF64[$19>>3] = 0.0;
  $417 = ((($19)) + 8|0);
  HEAPF64[$417>>3] = 0.0;
 }
 $418 = $12;
 $419 = $418 & 1;
 $420 = ($419|0)!=(0);
 $421 = $420 ? -1.0 : 1.0;
 $17 = $421;
 $422 = +HEAPF64[$18>>3];
 $423 = $17;
 $424 = +HEAPF64[$19>>3];
 $425 = $423 * $424;
 $426 = $422 + $425;
 $427 = $10;
 HEAPF64[$427>>3] = $426;
 $428 = ((($18)) + 8|0);
 $429 = +HEAPF64[$428>>3];
 $430 = ((($19)) + 8|0);
 $431 = +HEAPF64[$430>>3];
 $432 = $429 + $431;
 $433 = $10;
 $434 = ((($433)) + 8|0);
 HEAPF64[$434>>3] = $432;
 $435 = +HEAPF64[$18>>3];
 $436 = (+Math_abs((+$435)));
 $437 = +HEAPF64[$19>>3];
 $438 = (+Math_abs((+$437)));
 $439 = $436 + $438;
 $440 = 4.4408920985006262E-16 * $439;
 $441 = $10;
 $442 = ((($441)) + 8|0);
 $443 = +HEAPF64[$442>>3];
 $444 = $443 + $440;
 HEAPF64[$442>>3] = $444;
 $445 = $10;
 $446 = +HEAPF64[$445>>3];
 $447 = (+Math_abs((+$446)));
 $448 = 4.4408920985006262E-16 * $447;
 $449 = $10;
 $450 = ((($449)) + 8|0);
 $451 = +HEAPF64[$450>>3];
 $452 = $451 + $448;
 HEAPF64[$450>>3] = $452;
 $453 = $16;
 $5 = $453;
 $716 = $5;
 STACKTOP = sp;return ($716|0);
}
function _gsl_sf_hyperg_2F1($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 $15 = (_gsl_sf_hyperg_2F1_e($11,$12,$13,$14,$9)|0);
 $10 = $15;
 $16 = $10;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $10;
  _gsl_error(83460,83447,948,$18);
  $19 = +HEAPF64[$9>>3];
  $4 = $19;
  $21 = $4;
  STACKTOP = sp;return (+$21);
 } else {
  $20 = +HEAPF64[$9>>3];
  $4 = $20;
  $21 = $4;
  STACKTOP = sp;return (+$21);
 }
 return +(0.0);
}
function _gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $5;
 $9 = $19;
 $20 = $6;
 $10 = $20;
 $11 = 1.0;
 $12 = 1.0;
 $13 = 1.0;
 $14 = 1.0;
 $15 = 1.0;
 $16 = 0.0;
 while(1) {
  $21 = $13;
  $22 = $15;
  $23 = (+Math_abs((+$22)));
  $24 = $21 / $23;
  $25 = $24 > 5.5511151231257827E-17;
  if (!($25)) {
   label = 15;
   break;
  }
  $26 = $10;
  $27 = $26 == 0.0;
  if ($27) {
   label = 4;
   break;
  }
  $31 = $9;
  $32 = $31 == 0.0;
  if ($32) {
   label = 6;
   break;
  }
  $47 = $11;
  $48 = $47 > 1.0E+4;
  if ($48) {
   label = 8;
   break;
  }
  $54 = $7;
  $55 = $9;
  $56 = $10;
  $57 = $11;
  $58 = $56 * $57;
  $59 = $55 / $58;
  $60 = $54 * $59;
  $17 = $60;
  $61 = $17;
  $62 = (+Math_abs((+$61)));
  $18 = $62;
  $63 = $18;
  $64 = $63 > 1.0;
  if ($64) {
   $65 = $14;
   $66 = $18;
   $67 = 1.7976931348623157E+308 / $66;
   $68 = $65 > $67;
   if ($68) {
    label = 11;
    break;
   }
  }
  $75 = $17;
  $76 = $12;
  $77 = $76 * $75;
  $12 = $77;
  $78 = $12;
  $79 = $15;
  $80 = $79 + $78;
  $15 = $80;
  $81 = $15;
  $82 = (+Math_abs((+$81)));
  $83 = $82 > 1.7976931348623158E+303;
  if ($83) {
   label = 13;
   break;
  }
  $90 = $12;
  $91 = (+Math_abs((+$90)));
  $13 = $91;
  $92 = $13;
  $93 = $14;
  $94 = (+_GSL_MAX_DBL($92,$93));
  $14 = $94;
  $95 = $13;
  $96 = 4.4408920985006262E-16 * $95;
  $97 = $16;
  $98 = $97 + $96;
  $16 = $98;
  $99 = $9;
  $100 = $99 + 1.0;
  $9 = $100;
  $101 = $10;
  $102 = $101 + 1.0;
  $10 = $102;
  $103 = $11;
  $104 = $103 + 1.0;
  $11 = $104;
 }
 if ((label|0) == 4) {
  $28 = $8;
  HEAPF64[$28>>3] = nan;
  $29 = $8;
  $30 = ((($29)) + 8|0);
  HEAPF64[$30>>3] = nan;
  _gsl_error(83774,83501,55,1);
  $4 = 1;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 else if ((label|0) == 6) {
  $33 = $15;
  $34 = $8;
  HEAPF64[$34>>3] = $33;
  $35 = $16;
  $36 = $8;
  $37 = ((($36)) + 8|0);
  HEAPF64[$37>>3] = $35;
  $38 = $11;
  $39 = 4.4408920985006262E-16 * $38;
  $40 = $15;
  $41 = (+Math_abs((+$40)));
  $42 = $39 * $41;
  $43 = $8;
  $44 = ((($43)) + 8|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $45 + $42;
  HEAPF64[$44>>3] = $46;
  $4 = 0;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 else if ((label|0) == 8) {
  $49 = $15;
  $50 = $8;
  HEAPF64[$50>>3] = $49;
  $51 = $16;
  $52 = $8;
  $53 = ((($52)) + 8|0);
  HEAPF64[$53>>3] = $51;
  _gsl_error(83510,83501,68,5);
  $4 = 5;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 else if ((label|0) == 11) {
  $69 = $15;
  $70 = $8;
  HEAPF64[$70>>3] = $69;
  $71 = $15;
  $72 = (+Math_abs((+$71)));
  $73 = $8;
  $74 = ((($73)) + 8|0);
  HEAPF64[$74>>3] = $72;
  _gsl_error(83804,83501,76,16);
  $4 = 16;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 else if ((label|0) == 13) {
  $84 = $15;
  $85 = $8;
  HEAPF64[$85>>3] = $84;
  $86 = $15;
  $87 = (+Math_abs((+$86)));
  $88 = $8;
  $89 = ((($88)) + 8|0);
  HEAPF64[$89>>3] = $87;
  _gsl_error(83804,83501,83,16);
  $4 = 16;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 else if ((label|0) == 15) {
  $105 = $15;
  $106 = $8;
  HEAPF64[$106>>3] = $105;
  $107 = $16;
  $108 = $8;
  $109 = ((($108)) + 8|0);
  HEAPF64[$109>>3] = $107;
  $110 = $13;
  $111 = $8;
  $112 = ((($111)) + 8|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $113 + $110;
  HEAPF64[$112>>3] = $114;
  $115 = $11;
  $116 = 4.4408920985006262E-16 * $115;
  $117 = $15;
  $118 = (+Math_abs((+$117)));
  $119 = $116 * $118;
  $120 = $8;
  $121 = ((($120)) + 8|0);
  $122 = +HEAPF64[$121>>3];
  $123 = $122 + $119;
  HEAPF64[$121>>3] = $123;
  $4 = 0;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_1F1_large_b_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $18 = $7;
 $19 = $6;
 $20 = $18 / $19;
 $21 = (+Math_abs((+$20)));
 $22 = $21 < 1.0;
 if ($22) {
  $23 = $7;
  $24 = $6;
  $25 = $23 / $24;
  $9 = $25;
  $26 = $9;
  $27 = 1.0 - $26;
  $28 = 1.0 / $27;
  $10 = $28;
  $29 = $10;
  $30 = $5;
  $31 = (+Math_pow((+$29),(+$30)));
  $11 = $31;
  $32 = $9;
  $33 = $10;
  $34 = $32 * $33;
  $12 = $34;
  $35 = $12;
  $36 = $12;
  $37 = $35 * $36;
  $13 = $37;
  $38 = $5;
  $39 = $5;
  $40 = $39 + 1.0;
  $41 = $38 * $40;
  $42 = $6;
  $43 = 2.0 * $42;
  $44 = $41 / $43;
  $45 = $13;
  $46 = $44 * $45;
  $14 = $46;
  $47 = $5;
  $48 = $5;
  $49 = $48 + 1.0;
  $50 = $47 * $49;
  $51 = $6;
  $52 = 24.0 * $51;
  $53 = $6;
  $54 = $52 * $53;
  $55 = $50 / $54;
  $56 = $13;
  $57 = $55 * $56;
  $15 = $57;
  $58 = $5;
  $59 = $58 + 2.0;
  $60 = 16.0 * $59;
  $61 = $12;
  $62 = $60 * $61;
  $63 = 12.0 + $62;
  $64 = $5;
  $65 = $64 + 2.0;
  $66 = 3.0 * $65;
  $67 = $5;
  $68 = $67 + 3.0;
  $69 = $66 * $68;
  $70 = $13;
  $71 = $69 * $70;
  $72 = $63 + $71;
  $16 = $72;
  $73 = $15;
  $74 = $16;
  $75 = $73 * $74;
  $17 = $75;
  $76 = $11;
  $77 = $14;
  $78 = 1.0 - $77;
  $79 = $17;
  $80 = $78 + $79;
  $81 = $76 * $80;
  $82 = $8;
  HEAPF64[$82>>3] = $81;
  $83 = $11;
  $84 = $83 * 2.2204460492503131E-16;
  $85 = $14;
  $86 = (+Math_abs((+$85)));
  $87 = 1.0 + $86;
  $88 = $17;
  $89 = (+Math_abs((+$88)));
  $90 = $87 + $89;
  $91 = $84 * $90;
  $92 = $8;
  $93 = ((($92)) + 8|0);
  HEAPF64[$93>>3] = $91;
  $94 = $8;
  $95 = +HEAPF64[$94>>3];
  $96 = (+Math_abs((+$95)));
  $97 = 4.4408920985006262E-16 * $96;
  $98 = $8;
  $99 = ((($98)) + 8|0);
  $100 = +HEAPF64[$99>>3];
  $101 = $100 + $97;
  HEAPF64[$99>>3] = $101;
  $4 = 0;
  $105 = $4;
  STACKTOP = sp;return ($105|0);
 } else {
  $102 = $8;
  HEAPF64[$102>>3] = nan;
  $103 = $8;
  $104 = ((($103)) + 8|0);
  HEAPF64[$104>>3] = nan;
  _gsl_error(83774,83501,123,1);
  $4 = 1;
  $105 = $4;
  STACKTOP = sp;return ($105|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_U_large_b_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $15 = sp + 336|0;
 $17 = sp + 312|0;
 $18 = sp + 296|0;
 $19 = sp + 280|0;
 $20 = sp + 264|0;
 $21 = sp + 248|0;
 $24 = sp + 224|0;
 $25 = sp + 216|0;
 $26 = sp + 200|0;
 $27 = sp + 192|0;
 $28 = sp + 176|0;
 $29 = sp + 168|0;
 $30 = sp + 152|0;
 $31 = sp + 144|0;
 $32 = sp + 128|0;
 $33 = sp + 112|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $48 = $7;
 $49 = (+Math_floor((+$48)));
 $11 = $49;
 $50 = $7;
 $51 = $11;
 $52 = $50 - $51;
 $12 = $52;
 $53 = $12;
 $54 = (+Math_abs((+$53)));
 $55 = $54 < 1.4901161193847656E-8;
 $56 = $7;
 if (!($55)) {
  $145 = 1.0 - $56;
  $146 = $8;
  $147 = (+Math_log((+$146)));
  $148 = $145 * $147;
  $23 = $148;
  $149 = $6;
  $150 = $7;
  $151 = $8;
  (_gsl_sf_hyperg_1F1_large_b_e($149,$150,$151,$32)|0);
  $152 = $6;
  $153 = 1.0 - $152;
  $154 = $7;
  $155 = 2.0 - $154;
  $156 = $8;
  (_gsl_sf_hyperg_1F1_large_b_e($153,$155,$156,$33)|0);
  $157 = $7;
  $158 = 1.0 - $157;
  (_gsl_sf_lngamma_sgn_e($158,$24,$25)|0);
  $159 = $6;
  $160 = 1.0 + $159;
  $161 = $7;
  $162 = $160 - $161;
  (_gsl_sf_lngamma_sgn_e($162,$26,$27)|0);
  $163 = $7;
  $164 = $163 - 1.0;
  (_gsl_sf_lngamma_sgn_e($164,$28,$29)|0);
  $165 = $6;
  (_gsl_sf_lngamma_sgn_e($165,$30,$31)|0);
  $166 = +HEAPF64[$24>>3];
  $167 = +HEAPF64[$26>>3];
  $168 = $166 - $167;
  $34 = $168;
  $169 = ((($24)) + 8|0);
  $170 = +HEAPF64[$169>>3];
  $171 = ((($26)) + 8|0);
  $172 = +HEAPF64[$171>>3];
  $173 = $170 + $172;
  $36 = $173;
  $174 = +HEAPF64[$28>>3];
  $175 = +HEAPF64[$30>>3];
  $176 = $174 - $175;
  $177 = $23;
  $178 = $176 - $177;
  $179 = $8;
  $180 = $178 - $179;
  $35 = $180;
  $181 = ((($28)) + 8|0);
  $182 = +HEAPF64[$181>>3];
  $183 = ((($30)) + 8|0);
  $184 = +HEAPF64[$183>>3];
  $185 = $182 + $184;
  $186 = $23;
  $187 = (+Math_abs((+$186)));
  $188 = $8;
  $189 = (+Math_abs((+$188)));
  $190 = $187 + $189;
  $191 = 2.2204460492503131E-16 * $190;
  $192 = $185 + $191;
  $37 = $192;
  $193 = +HEAPF64[$25>>3];
  $194 = +HEAPF64[$27>>3];
  $195 = $193 * $194;
  $38 = $195;
  $196 = +HEAPF64[$29>>3];
  $197 = +HEAPF64[$31>>3];
  $198 = $196 * $197;
  $39 = $198;
  $199 = $34;
  $200 = $199 > 699.78271289338397;
  $201 = $35;
  $202 = $201 > 699.78271289338397;
  $or$cond = $200 | $202;
  if ($or$cond) {
   $203 = $34;
   $204 = $35;
   $205 = $203 > $204;
   $206 = $34;
   $207 = $35;
   $208 = $205 ? $206 : $207;
   $40 = $208;
   $209 = $36;
   $210 = $37;
   $211 = $209 > $210;
   $212 = $36;
   $213 = $37;
   $214 = $211 ? $212 : $213;
   $41 = $214;
   $215 = $34;
   $216 = $40;
   $217 = $215 - $216;
   $42 = $217;
   $218 = $35;
   $219 = $40;
   $220 = $218 - $219;
   $43 = $220;
   $221 = $38;
   $222 = $42;
   $223 = (+Math_exp((+$222)));
   $224 = $221 * $223;
   $44 = $224;
   $225 = $39;
   $226 = $43;
   $227 = (+Math_exp((+$226)));
   $228 = $225 * $227;
   $45 = $228;
   $229 = $44;
   $230 = +HEAPF64[$32>>3];
   $231 = $229 * $230;
   $232 = $45;
   $233 = +HEAPF64[$33>>3];
   $234 = $232 * $233;
   $235 = $231 + $234;
   $236 = $9;
   HEAPF64[$236>>3] = $235;
   $237 = $44;
   $238 = (+Math_abs((+$237)));
   $239 = ((($32)) + 8|0);
   $240 = +HEAPF64[$239>>3];
   $241 = $238 * $240;
   $242 = $45;
   $243 = (+Math_abs((+$242)));
   $244 = ((($33)) + 8|0);
   $245 = +HEAPF64[$244>>3];
   $246 = $243 * $245;
   $247 = $241 + $246;
   $248 = $9;
   $249 = ((($248)) + 8|0);
   HEAPF64[$249>>3] = $247;
   $250 = $41;
   $251 = (+Math_exp((+$250)));
   $252 = 2.2204460492503131E-16 * $251;
   $253 = $44;
   $254 = +HEAPF64[$32>>3];
   $255 = $253 * $254;
   $256 = (+Math_abs((+$255)));
   $257 = $45;
   $258 = +HEAPF64[$33>>3];
   $259 = $257 * $258;
   $260 = (+Math_abs((+$259)));
   $261 = $256 + $260;
   $262 = $252 * $261;
   $263 = $9;
   $264 = ((($263)) + 8|0);
   $265 = +HEAPF64[$264>>3];
   $266 = $265 + $262;
   HEAPF64[$264>>3] = $266;
   $267 = $9;
   $268 = +HEAPF64[$267>>3];
   $269 = (+Math_abs((+$268)));
   $270 = 4.4408920985006262E-16 * $269;
   $271 = $9;
   $272 = ((($271)) + 8|0);
   $273 = +HEAPF64[$272>>3];
   $274 = $273 + $270;
   HEAPF64[$272>>3] = $274;
   $275 = $40;
   $276 = $10;
   HEAPF64[$276>>3] = $275;
   _gsl_error(83804,83501,215,16);
   $5 = 16;
   $335 = $5;
   STACKTOP = sp;return ($335|0);
  } else {
   $277 = $38;
   $278 = $34;
   $279 = (+Math_exp((+$278)));
   $280 = $277 * $279;
   $46 = $280;
   $281 = $39;
   $282 = $35;
   $283 = (+Math_exp((+$282)));
   $284 = $281 * $283;
   $47 = $284;
   $285 = $46;
   $286 = +HEAPF64[$32>>3];
   $287 = $285 * $286;
   $288 = $47;
   $289 = +HEAPF64[$33>>3];
   $290 = $288 * $289;
   $291 = $287 + $290;
   $292 = $9;
   HEAPF64[$292>>3] = $291;
   $293 = $46;
   $294 = (+Math_abs((+$293)));
   $295 = ((($32)) + 8|0);
   $296 = +HEAPF64[$295>>3];
   $297 = $294 * $296;
   $298 = $47;
   $299 = (+Math_abs((+$298)));
   $300 = ((($33)) + 8|0);
   $301 = +HEAPF64[$300>>3];
   $302 = $299 * $301;
   $303 = $297 + $302;
   $304 = $9;
   $305 = ((($304)) + 8|0);
   HEAPF64[$305>>3] = $303;
   $306 = $36;
   $307 = (+Math_exp((+$306)));
   $308 = $46;
   $309 = +HEAPF64[$32>>3];
   $310 = $308 * $309;
   $311 = (+Math_abs((+$310)));
   $312 = $307 * $311;
   $313 = $37;
   $314 = (+Math_exp((+$313)));
   $315 = $47;
   $316 = +HEAPF64[$33>>3];
   $317 = $315 * $316;
   $318 = (+Math_abs((+$317)));
   $319 = $314 * $318;
   $320 = $312 + $319;
   $321 = 2.2204460492503131E-16 * $320;
   $322 = $9;
   $323 = ((($322)) + 8|0);
   $324 = +HEAPF64[$323>>3];
   $325 = $324 + $321;
   HEAPF64[$323>>3] = $325;
   $326 = $9;
   $327 = +HEAPF64[$326>>3];
   $328 = (+Math_abs((+$327)));
   $329 = 4.4408920985006262E-16 * $328;
   $330 = $9;
   $331 = ((($330)) + 8|0);
   $332 = +HEAPF64[$331>>3];
   $333 = $332 + $329;
   HEAPF64[$331>>3] = $333;
   $334 = $10;
   HEAPF64[$334>>3] = 0.0;
   $5 = 0;
   $335 = $5;
   STACKTOP = sp;return ($335|0);
  }
 }
 $57 = $56 > 1.0;
 $58 = $7;
 $59 = 1.0 - $58;
 if ($57) {
  $60 = $8;
  $61 = (+Math_log((+$60)));
  $62 = $59 * $61;
  $16 = $62;
  $63 = $7;
  $64 = $63 - 1.0;
  (_gsl_sf_lngamma_e($64,$17)|0);
  $65 = $6;
  (_gsl_sf_lngamma_e($65,$18)|0);
  $66 = $16;
  $67 = $8;
  $68 = $66 + $67;
  $69 = +HEAPF64[$17>>3];
  $70 = $68 + $69;
  $71 = +HEAPF64[$18>>3];
  $72 = $70 - $71;
  $13 = $72;
  $73 = ((($17)) + 8|0);
  $74 = +HEAPF64[$73>>3];
  $75 = ((($18)) + 8|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $74 + $76;
  $78 = $8;
  $79 = (+Math_abs((+$78)));
  $80 = $16;
  $81 = (+Math_abs((+$80)));
  $82 = $79 + $81;
  $83 = 2.2204460492503131E-16 * $82;
  $84 = $77 + $83;
  $14 = $84;
  $85 = $6;
  $86 = 1.0 - $85;
  $87 = $7;
  $88 = 2.0 - $87;
  $89 = $8;
  $90 = - $89;
  (_gsl_sf_hyperg_1F1_large_b_e($86,$88,$90,$15)|0);
 } else {
  (_gsl_sf_lngamma_e($59,$19)|0);
  $91 = $6;
  $92 = 1.0 + $91;
  $93 = $7;
  $94 = $92 - $93;
  (_gsl_sf_lngamma_e($94,$20)|0);
  $95 = +HEAPF64[$19>>3];
  $96 = +HEAPF64[$20>>3];
  $97 = $95 - $96;
  $13 = $97;
  $98 = ((($19)) + 8|0);
  $99 = +HEAPF64[$98>>3];
  $100 = ((($20)) + 8|0);
  $101 = +HEAPF64[$100>>3];
  $102 = $99 + $101;
  $14 = $102;
  $103 = $6;
  $104 = $7;
  $105 = $8;
  (_gsl_sf_hyperg_1F1_large_b_e($103,$104,$105,$15)|0);
 }
 $106 = $13;
 $107 = $106 > 699.78271289338397;
 if ($107) {
  $108 = +HEAPF64[$15>>3];
  $109 = $9;
  HEAPF64[$109>>3] = $108;
  $110 = ((($15)) + 8|0);
  $111 = +HEAPF64[$110>>3];
  $112 = $9;
  $113 = ((($112)) + 8|0);
  HEAPF64[$113>>3] = $111;
  $114 = $13;
  $115 = $10;
  HEAPF64[$115>>3] = $114;
  _gsl_error(83804,83501,165,16);
  $5 = 16;
  $335 = $5;
  STACKTOP = sp;return ($335|0);
 } else {
  $116 = $13;
  $117 = $14;
  $118 = (_gsl_sf_exp_err_e($116,$117,$21)|0);
  $22 = $118;
  $119 = +HEAPF64[$21>>3];
  $120 = +HEAPF64[$15>>3];
  $121 = $119 * $120;
  $122 = $9;
  HEAPF64[$122>>3] = $121;
  $123 = +HEAPF64[$21>>3];
  $124 = ((($15)) + 8|0);
  $125 = +HEAPF64[$124>>3];
  $126 = $123 * $125;
  $127 = ((($21)) + 8|0);
  $128 = +HEAPF64[$127>>3];
  $129 = +HEAPF64[$15>>3];
  $130 = (+Math_abs((+$129)));
  $131 = $128 * $130;
  $132 = $126 + $131;
  $133 = $9;
  $134 = ((($133)) + 8|0);
  HEAPF64[$134>>3] = $132;
  $135 = $9;
  $136 = +HEAPF64[$135>>3];
  $137 = (+Math_abs((+$136)));
  $138 = 4.4408920985006262E-16 * $137;
  $139 = $9;
  $140 = ((($139)) + 8|0);
  $141 = +HEAPF64[$140>>3];
  $142 = $141 + $138;
  HEAPF64[$140>>3] = $142;
  $143 = $10;
  HEAPF64[$143>>3] = 0.0;
  $144 = $22;
  $5 = $144;
  $335 = $5;
  STACKTOP = sp;return ($335|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_2F0_series_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0;
 var $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 2000;
 $22 = $6;
 $12 = $22;
 $23 = $7;
 $13 = $23;
 $14 = 1.0;
 $15 = 1.0;
 $16 = 1.0;
 $17 = 1.0;
 $18 = 1.0;
 $19 = 1.0;
 while(1) {
  $24 = $17;
  $25 = $15;
  $26 = (+Math_abs((+$25)));
  $27 = $24 / $26;
  $28 = $27 > 2.2204460492503131E-16;
  $29 = $14;
  $30 = $29 < 2000.0;
  $31 = $28 ? $30 : 0;
  if (!($31)) {
   break;
  }
  $32 = $12;
  $33 = $13;
  $34 = $14;
  $35 = $33 / $34;
  $36 = $8;
  $37 = $35 * $36;
  $38 = $32 * $37;
  $20 = $38;
  $39 = $20;
  $40 = (+Math_abs((+$39)));
  $21 = $40;
  $41 = $21;
  $42 = $41 > 1.0;
  if ($42) {
   $43 = $18;
   $44 = $21;
   $45 = 1.7976931348623157E+308 / $44;
   $46 = $43 > $45;
   if ($46) {
    label = 5;
    break;
   }
  }
  $53 = $20;
  $54 = $16;
  $55 = $54 * $53;
  $16 = $55;
  $56 = $16;
  $57 = $15;
  $58 = $57 + $56;
  $15 = $58;
  $59 = $16;
  $60 = (+Math_abs((+$59)));
  $17 = $60;
  $61 = $17;
  $62 = $19;
  $63 = $61 > $62;
  if ($63) {
   break;
  }
  $64 = $17;
  $19 = $64;
  $65 = $17;
  $66 = $18;
  $67 = $65 > $66;
  $68 = $17;
  $69 = $18;
  $70 = $67 ? $68 : $69;
  $18 = $70;
  $71 = $12;
  $72 = $71 + 1.0;
  $12 = $72;
  $73 = $13;
  $74 = $73 + 1.0;
  $13 = $74;
  $75 = $14;
  $76 = $75 + 1.0;
  $14 = $76;
  $77 = $12;
  $78 = $77 == 0.0;
  $79 = $13;
  $80 = $79 == 0.0;
  $or$cond = $78 | $80;
  if ($or$cond) {
   break;
  }
  $81 = $9;
  $82 = ($81|0)>=(0);
  if ($82) {
   $83 = $14;
   $84 = $9;
   $85 = (+($84|0));
   $86 = $83 >= $85;
   if ($86) {
    break;
   }
  }
 }
 if ((label|0) == 5) {
  $47 = $15;
  $48 = $10;
  HEAPF64[$48>>3] = $47;
  $49 = $15;
  $50 = (+Math_abs((+$49)));
  $51 = $10;
  $52 = ((($51)) + 8|0);
  HEAPF64[$52>>3] = $50;
  _gsl_error(83804,83501,263,16);
  $5 = 16;
  $97 = $5;
  STACKTOP = sp;return ($97|0);
 }
 $87 = $15;
 $88 = $10;
 HEAPF64[$88>>3] = $87;
 $89 = $14;
 $90 = 2.2204460492503131E-16 * $89;
 $91 = $17;
 $92 = $90 + $91;
 $93 = $10;
 $94 = ((($93)) + 8|0);
 HEAPF64[$94>>3] = $92;
 $95 = $14;
 $96 = $95 >= 2000.0;
 if ($96) {
  _gsl_error(83691,83501,288,11);
  $5 = 11;
  $97 = $5;
  STACKTOP = sp;return ($97|0);
 } else {
  $5 = 0;
  $97 = $5;
  STACKTOP = sp;return ($97|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_U_int_e10_e($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = $7;
 $18 = $17 == 0.0;
 $19 = $6;
 $20 = ($19|0)>=(1);
 $or$cond = $18 & $20;
 if ($or$cond) {
  $21 = $8;
  HEAPF64[$21>>3] = nan;
  $22 = $8;
  $23 = ((($22)) + 8|0);
  HEAPF64[$23>>3] = nan;
  $24 = $8;
  $25 = ((($24)) + 16|0);
  HEAP32[$25>>2] = 0;
  _gsl_error(83774,83551,1656,1);
  $4 = 1;
  $98 = $4;
  STACKTOP = sp;return ($98|0);
 }
 $26 = $7;
 $27 = $26 == 0.0;
 if ($27) {
  $28 = $5;
  $29 = $6;
  $30 = $8;
  $31 = (_hyperg_U_int_origin($28,$29,$30)|0);
  $4 = $31;
  $98 = $4;
  STACKTOP = sp;return ($98|0);
 }
 $32 = $7;
 $33 = $32 < 0.0;
 if ($33) {
  $34 = $5;
  $35 = $6;
  $36 = $7;
  $37 = $8;
  $38 = (_hyperg_U_int_negx($34,$35,$36,$37)|0);
  $4 = $38;
  $98 = $4;
  STACKTOP = sp;return ($98|0);
 }
 $39 = $6;
 $40 = ($39|0)>=(1);
 if ($40) {
  $41 = $5;
  $42 = $6;
  $43 = $7;
  $44 = $8;
  $45 = (_hyperg_U_int_bge1($41,$42,$43,$44)|0);
  $4 = $45;
  $98 = $4;
  STACKTOP = sp;return ($98|0);
 }
 $46 = $7;
 $47 = (+Math_log((+$46)));
 $10 = $47;
 $48 = $5;
 $49 = (1 + ($48))|0;
 $50 = $6;
 $51 = (($49) - ($50))|0;
 $11 = $51;
 $52 = $6;
 $53 = (2 - ($52))|0;
 $12 = $53;
 $54 = $11;
 $55 = $12;
 $56 = $7;
 $57 = (_hyperg_U_int_bge1($54,$55,$56,$9)|0);
 $14 = $57;
 $58 = $6;
 $59 = (+($58|0));
 $60 = 1.0 - $59;
 $61 = $10;
 $62 = $60 * $61;
 $15 = $62;
 $63 = $6;
 $64 = (+($63|0));
 $65 = (+Math_abs((+$64)));
 $66 = $65 + 1.0;
 $67 = 4.4408920985006262E-16 * $66;
 $68 = $10;
 $69 = (+Math_abs((+$68)));
 $70 = $67 * $69;
 $16 = $70;
 $71 = $6;
 $72 = (+($71|0));
 $73 = 1.0 - $72;
 $74 = (+Math_abs((+$73)));
 $75 = 4.4408920985006262E-16 * $74;
 $76 = $16;
 $77 = $76 + $75;
 $16 = $77;
 $78 = $15;
 $79 = ((($9)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (+($80|0));
 $82 = $81 * 2.3025850929940459;
 $83 = $78 + $82;
 $84 = $16;
 $85 = +HEAPF64[$9>>3];
 $86 = ((($9)) + 8|0);
 $87 = +HEAPF64[$86>>3];
 $88 = $8;
 $89 = (_gsl_sf_exp_mult_err_e10_e($83,$84,$85,$87,$88)|0);
 $13 = $89;
 $90 = $13;
 $91 = ($90|0)!=(0);
 if ($91) {
  $92 = $13;
  $97 = $92;
 } else {
  $93 = $14;
  $94 = ($93|0)!=(0);
  $95 = $14;
  $96 = $94 ? $95 : 0;
  $97 = $96;
 }
 $4 = $97;
 $98 = $4;
 STACKTOP = sp;return ($98|0);
}
function _hyperg_U_int_origin($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (+($6|0));
 $8 = $4;
 $9 = (+($8|0));
 $10 = $5;
 $11 = (_hyperg_U_origin($7,$9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _hyperg_U_int_negx($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = $6;
 $16 = ($14|0)<($15|0);
 $17 = $6;
 $18 = ($17|0)<=(0);
 $or$cond = $16 & $18;
 if ($or$cond) {
  $19 = $7;
  $20 = $6;
  $21 = (1 - ($20))|0;
  $22 = (+($21|0));
  $23 = (+Math_pow((+$19),(+$22)));
  $10 = $23;
  $24 = $5;
  $25 = (1 + ($24))|0;
  $26 = $6;
  $27 = (($25) - ($26))|0;
  $28 = (+($27|0));
  $29 = $6;
  $30 = (2 - ($29))|0;
  $31 = (+($30|0));
  $32 = $7;
  $33 = (_hyperg_U_negx($28,$31,$32,$9)|0);
  $11 = $33;
  $34 = $10;
  $35 = +HEAPF64[$9>>3];
  $36 = $34 * $35;
  $12 = $36;
  $37 = $10;
  $38 = (+Math_abs((+$37)));
  $39 = ((($9)) + 8|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $38 * $40;
  $13 = $41;
  $42 = $12;
  $43 = $8;
  HEAPF64[$43>>3] = $42;
  $44 = $13;
  $45 = $8;
  $46 = ((($45)) + 8|0);
  HEAPF64[$46>>3] = $44;
  $47 = $11;
  $4 = $47;
  $55 = $4;
  STACKTOP = sp;return ($55|0);
 } else {
  $48 = $5;
  $49 = (+($48|0));
  $50 = $6;
  $51 = (+($50|0));
  $52 = $7;
  $53 = $8;
  $54 = (_hyperg_U_negx($49,$51,$52,$53)|0);
  $4 = $54;
  $55 = $4;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _hyperg_U_int_bge1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0;
 var $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0.0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0.0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0.0;
 var $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0;
 var $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0.0, $443 = 0.0;
 var $444 = 0, $445 = 0.0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0;
 var $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0.0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0;
 var $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0.0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0;
 var $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0;
 var $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0;
 var $552 = 0.0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0, $565 = 0.0, $566 = 0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0.0;
 var $570 = 0.0, $571 = 0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0.0, $582 = 0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0.0;
 var $589 = 0.0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0;
 var $606 = 0.0, $607 = 0.0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0.0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0.0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0.0, $630 = 0.0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0, $64 = 0.0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0.0, $648 = 0.0, $649 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0;
 var $660 = 0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0.0;
 var $679 = 0.0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0.0, $696 = 0.0;
 var $697 = 0, $698 = 0.0, $699 = 0.0, $7 = 0.0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0, $708 = 0.0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0.0, $712 = 0.0, $713 = 0.0;
 var $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0.0, $720 = 0.0, $721 = 0, $722 = 0.0, $723 = 0, $724 = 0.0, $725 = 0.0, $726 = 0, $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0.0;
 var $732 = 0.0, $733 = 0.0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0.0, $74 = 0.0, $740 = 0, $741 = 0.0, $742 = 0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0, $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0;
 var $750 = 0.0, $751 = 0.0, $752 = 0, $753 = 0.0, $754 = 0, $755 = 0.0, $756 = 0.0, $757 = 0, $758 = 0.0, $759 = 0.0, $76 = 0.0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $766 = 0.0, $767 = 0, $768 = 0.0;
 var $769 = 0.0, $77 = 0, $770 = 0.0, $771 = 0.0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0.0, $785 = 0.0, $786 = 0.0;
 var $787 = 0, $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0, $80 = 0, $800 = 0.0, $801 = 0.0, $802 = 0.0, $803 = 0.0;
 var $804 = 0.0, $805 = 0.0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0.0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0.0, $820 = 0, $821 = 0;
 var $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0.0, $83 = 0.0, $830 = 0.0, $831 = 0.0, $832 = 0.0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0.0, $837 = 0.0, $838 = 0.0, $839 = 0.0, $84 = 0.0;
 var $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0.0, $844 = 0.0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0, $849 = 0.0, $85 = 0, $850 = 0.0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0.0, $855 = 0.0, $856 = 0.0, $857 = 0.0, $858 = 0.0;
 var $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0.0, $862 = 0.0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0, $869 = 0, $87 = 0.0, $870 = 0.0, $871 = 0, $872 = 0, $873 = 0, $874 = 0.0, $875 = 0.0, $876 = 0.0;
 var $877 = 0, $878 = 0, $879 = 0.0, $88 = 0.0, $880 = 0, $881 = 0.0, $882 = 0.0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0.0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(736|0);
 $11 = sp + 568|0;
 $14 = sp + 552|0;
 $18 = sp + 528|0;
 $19 = sp + 512|0;
 $28 = sp + 448|0;
 $29 = sp + 432|0;
 $30 = sp + 416|0;
 $32 = sp + 400|0;
 $43 = sp + 352|0;
 $44 = sp + 664|0;
 $68 = sp + 224|0;
 $69 = sp + 216|0;
 $70 = sp + 624|0;
 $77 = sp + 168|0;
 $78 = sp + 152|0;
 $79 = sp + 136|0;
 $80 = sp + 120|0;
 $81 = sp + 104|0;
 $86 = sp + 72|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $97 = $5;
 $98 = ($97|0)==(0);
 if ($98) {
  $99 = $8;
  HEAPF64[$99>>3] = 1.0;
  $100 = $8;
  $101 = ((($100)) + 8|0);
  HEAPF64[$101>>3] = 0.0;
  $102 = $8;
  $103 = ((($102)) + 16|0);
  HEAP32[$103>>2] = 0;
  $4 = 0;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $104 = $5;
 $105 = ($104|0)==(-1);
 $106 = $6;
 if ($105) {
  $107 = (0 - ($106))|0;
  $108 = (+($107|0));
  $109 = $7;
  $110 = $108 + $109;
  $111 = $8;
  HEAPF64[$111>>3] = $110;
  $112 = $6;
  $113 = (+($112|0));
  $114 = (+Math_abs((+$113)));
  $115 = $7;
  $116 = (+Math_abs((+$115)));
  $117 = $114 + $116;
  $118 = 4.4408920985006262E-16 * $117;
  $119 = $8;
  $120 = ((($119)) + 8|0);
  HEAPF64[$120>>3] = $118;
  $121 = $8;
  $122 = +HEAPF64[$121>>3];
  $123 = (+Math_abs((+$122)));
  $124 = 4.4408920985006262E-16 * $123;
  $125 = $8;
  $126 = ((($125)) + 8|0);
  $127 = +HEAPF64[$126>>3];
  $128 = $127 + $124;
  HEAPF64[$126>>3] = $128;
  $129 = $8;
  $130 = ((($129)) + 16|0);
  HEAP32[$130>>2] = 0;
  $4 = 0;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $131 = $5;
 $132 = (($131) + 1)|0;
 $133 = ($106|0)==($132|0);
 $134 = $5;
 if ($133) {
  $135 = (0 - ($134))|0;
  $136 = (+($135|0));
  $137 = $7;
  $138 = (+Math_log((+$137)));
  $139 = $136 * $138;
  $140 = $8;
  $141 = (_gsl_sf_exp_e10_e($139,$140)|0);
  $4 = $141;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $142 = (+($134|0));
 $143 = (+Math_abs((+$142)));
 $144 = (+_GSL_MAX_DBL($143,1.0));
 $145 = $5;
 $146 = (+($145|0));
 $147 = 1.0 + $146;
 $148 = $6;
 $149 = (+($148|0));
 $150 = $147 - $149;
 $151 = (+Math_abs((+$150)));
 $152 = (+_GSL_MAX_DBL($151,1.0));
 $153 = $144 * $152;
 $154 = $7;
 $155 = (+Math_abs((+$154)));
 $156 = 0.98999999999999999 * $155;
 $157 = $153 < $156;
 $158 = $5;
 if ($157) {
  $159 = (0 - ($158))|0;
  $160 = (+($159|0));
  $161 = $7;
  $162 = (+Math_log((+$161)));
  $163 = $160 * $162;
  $9 = $163;
  $164 = $9;
  $165 = (+Math_abs((+$164)));
  $166 = 4.4408920985006262E-16 * $165;
  $10 = $166;
  $167 = $5;
  $168 = (+($167|0));
  $169 = $6;
  $170 = (+($169|0));
  $171 = $7;
  $172 = (_hyperg_zaU_asymp($168,$170,$171,$11)|0);
  $12 = $172;
  $173 = $9;
  $174 = $10;
  $175 = +HEAPF64[$11>>3];
  $176 = ((($11)) + 8|0);
  $177 = +HEAPF64[$176>>3];
  $178 = $8;
  $179 = (_gsl_sf_exp_mult_err_e10_e($173,$174,$175,$177,$178)|0);
  $13 = $179;
  $180 = $13;
  $181 = ($180|0)!=(0);
  if ($181) {
   $182 = $13;
   $187 = $182;
  } else {
   $183 = $12;
   $184 = ($183|0)!=(0);
   $185 = $12;
   $186 = $184 ? $185 : 0;
   $187 = $186;
  }
  $4 = $187;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $188 = (+($158|0));
 $189 = (+Math_abs((+$188)));
 $190 = $189 < 5.0;
 $191 = $6;
 $192 = ($191|0)<(5);
 $or$cond = $190 & $192;
 $193 = $7;
 $194 = $193 < 2.0;
 $or$cond3 = $or$cond & $194;
 if ($or$cond3) {
  label = 14;
 } else {
  $195 = $5;
  $196 = (+($195|0));
  $197 = (+Math_abs((+$196)));
  $198 = $197 < 10.0;
  $199 = $6;
  $200 = ($199|0)<(10);
  $or$cond5 = $198 & $200;
  $201 = $7;
  $202 = $201 < 1.0;
  $or$cond7 = $or$cond5 & $202;
  if ($or$cond7) {
   label = 14;
  }
 }
 if ((label|0) == 14) {
  $203 = $5;
  $204 = (1 + ($203))|0;
  $205 = $6;
  $206 = (($204) - ($205))|0;
  $207 = ($206|0)>(0);
  if ($207) {
   $208 = $5;
   $209 = (+($208|0));
   $210 = $6;
   $211 = (+($210|0));
   $212 = $7;
   $213 = (_hyperg_U_series($209,$211,$212,$14)|0);
   $15 = $213;
   $214 = +HEAPF64[$14>>3];
   $215 = $8;
   HEAPF64[$215>>3] = $214;
   $216 = ((($14)) + 8|0);
   $217 = +HEAPF64[$216>>3];
   $218 = $8;
   $219 = ((($218)) + 8|0);
   HEAPF64[$219>>3] = $217;
   $220 = $8;
   $221 = ((($220)) + 16|0);
   HEAP32[$221>>2] = 0;
   $222 = $15;
   $4 = $222;
   $894 = $4;
   STACKTOP = sp;return ($894|0);
  }
 }
 $223 = $5;
 $224 = ($223|0)<(0);
 if ($224) {
  $16 = 0;
  $17 = 1.3407807929942596E+154;
  $21 = 1.0;
  $225 = $6;
  $226 = (0 - ($225))|0;
  $227 = (+($226|0));
  $228 = $7;
  $229 = $227 + $228;
  $22 = $229;
  $24 = -1;
  while(1) {
   $230 = $24;
   $231 = $5;
   $232 = ($230|0)>($231|0);
   if (!($232)) {
    break;
   }
   $233 = $24;
   $234 = (+($233|0));
   $235 = $6;
   $236 = $24;
   $237 = (($235) - ($236))|0;
   $238 = (+($237|0));
   $239 = $238 - 1.0;
   $240 = $234 * $239;
   $241 = $21;
   $242 = $240 * $241;
   $243 = $7;
   $244 = $24;
   $245 = (+($244|0));
   $246 = 2.0 * $245;
   $247 = $243 + $246;
   $248 = $6;
   $249 = (+($248|0));
   $250 = $247 - $249;
   $251 = $22;
   $252 = $250 * $251;
   $253 = $242 + $252;
   $23 = $253;
   $254 = $22;
   $21 = $254;
   $255 = $23;
   $22 = $255;
   $256 = $22;
   $257 = (+Math_abs((+$256)));
   $25 = $257;
   $258 = $25;
   $259 = $258 > 1.3407807929942596E+154;
   if ($259) {
    $260 = $22;
    $261 = $260 / 1.3407807929942596E+154;
    $22 = $261;
    $262 = $21;
    $263 = $262 / 1.3407807929942596E+154;
    $21 = $263;
    $264 = $16;
    $265 = (($264) + 1)|0;
    $16 = $265;
   } else {
    $266 = $25;
    $267 = $266 < 7.4583407312002084E-155;
    if ($267) {
     $268 = $22;
     $269 = $268 * 1.3407807929942596E+154;
     $22 = $269;
     $270 = $21;
     $271 = $270 * 1.3407807929942596E+154;
     $21 = $271;
     $272 = $16;
     $273 = (($272) + -1)|0;
     $16 = $273;
    }
   }
   $274 = $24;
   $275 = (($274) + -1)|0;
   $24 = $275;
  }
  $276 = (+Math_log(1.3407807929942596E+154));
  $20 = $276;
  $277 = $16;
  $278 = (+($277|0));
  $279 = $20;
  $280 = $278 * $279;
  HEAPF64[$18>>3] = $280;
  $281 = +HEAPF64[$18>>3];
  $282 = (+Math_abs((+$281)));
  $283 = 4.4408920985006262E-16 * $282;
  $284 = ((($18)) + 8|0);
  HEAPF64[$284>>3] = $283;
  $285 = $22;
  HEAPF64[$19>>3] = $285;
  $286 = $5;
  $287 = (+($286|0));
  $288 = (+Math_abs((+$287)));
  $289 = $288 + 1.0;
  $290 = 8.8817841970012523E-16 * $289;
  $291 = $22;
  $292 = (+Math_abs((+$291)));
  $293 = $290 * $292;
  $294 = ((($19)) + 8|0);
  HEAPF64[$294>>3] = $293;
  $295 = +HEAPF64[$18>>3];
  $296 = ((($18)) + 8|0);
  $297 = +HEAPF64[$296>>3];
  $298 = +HEAPF64[$19>>3];
  $299 = ((($19)) + 8|0);
  $300 = +HEAPF64[$299>>3];
  $301 = $8;
  $302 = (_gsl_sf_exp_mult_err_e10_e($295,$297,$298,$300,$301)|0);
  $4 = $302;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $303 = $6;
 $304 = (+($303|0));
 $305 = $5;
 $306 = (+($305|0));
 $307 = 2.0 * $306;
 $308 = $7;
 $309 = $307 + $308;
 $310 = $304 >= $309;
 if ($310) {
  $26 = 0;
  $27 = 1.3407807929942596E+154;
  $311 = $6;
  $312 = (+($311|0));
  $313 = $7;
  $314 = (_hyperg_U_small_a_bgt0(1.0,$312,$313,$28,$32)|0);
  $33 = $314;
  $35 = 1.0;
  $315 = +HEAPF64[$28>>3];
  $36 = $315;
  $316 = +HEAPF64[$32>>3];
  $317 = - $316;
  $318 = (+Math_exp((+$317)));
  $319 = $35;
  $320 = $319 * $318;
  $35 = $320;
  $38 = 1;
  while(1) {
   $321 = $38;
   $322 = $5;
   $323 = ($321|0)<($322|0);
   if (!($323)) {
    break;
   }
   $324 = $35;
   $325 = $6;
   $326 = (+($325|0));
   $327 = $38;
   $328 = (+($327|0));
   $329 = 2.0 * $328;
   $330 = $326 - $329;
   $331 = $7;
   $332 = $330 - $331;
   $333 = $36;
   $334 = $332 * $333;
   $335 = $324 + $334;
   $336 = - $335;
   $337 = $38;
   $338 = (+($337|0));
   $339 = $38;
   $340 = (+($339|0));
   $341 = 1.0 + $340;
   $342 = $6;
   $343 = (+($342|0));
   $344 = $341 - $343;
   $345 = $338 * $344;
   $346 = $336 / $345;
   $37 = $346;
   $347 = $36;
   $35 = $347;
   $348 = $37;
   $36 = $348;
   $349 = $36;
   $350 = (+Math_abs((+$349)));
   $39 = $350;
   $351 = $39;
   $352 = $351 > 1.3407807929942596E+154;
   if ($352) {
    $353 = $36;
    $354 = $353 / 1.3407807929942596E+154;
    $36 = $354;
    $355 = $35;
    $356 = $355 / 1.3407807929942596E+154;
    $35 = $356;
    $357 = $26;
    $358 = (($357) + 1)|0;
    $26 = $358;
   } else {
    $359 = $39;
    $360 = $359 < 7.4583407312002084E-155;
    if ($360) {
     $361 = $36;
     $362 = $361 * 1.3407807929942596E+154;
     $36 = $362;
     $363 = $35;
     $364 = $363 * 1.3407807929942596E+154;
     $35 = $364;
     $365 = $26;
     $366 = (($365) + -1)|0;
     $26 = $366;
    }
   }
   $367 = $38;
   $368 = (($367) + 1)|0;
   $38 = $368;
  }
  $369 = (+Math_log(1.3407807929942596E+154));
  $31 = $369;
  $370 = +HEAPF64[$32>>3];
  $371 = $26;
  $372 = (+($371|0));
  $373 = $31;
  $374 = $372 * $373;
  $375 = $370 + $374;
  HEAPF64[$29>>3] = $375;
  $376 = +HEAPF64[$32>>3];
  $377 = (+Math_abs((+$376)));
  $378 = $26;
  $379 = (+($378|0));
  $380 = $31;
  $381 = $379 * $380;
  $382 = (+Math_abs((+$381)));
  $383 = $377 + $382;
  $384 = 4.4408920985006262E-16 * $383;
  $385 = ((($29)) + 8|0);
  HEAPF64[$385>>3] = $384;
  $386 = $36;
  HEAPF64[$30>>3] = $386;
  $387 = ((($28)) + 8|0);
  $388 = +HEAPF64[$387>>3];
  $389 = +HEAPF64[$28>>3];
  $390 = $388 / $389;
  $391 = (+Math_abs((+$390)));
  $392 = $36;
  $393 = (+Math_abs((+$392)));
  $394 = $391 * $393;
  $395 = ((($30)) + 8|0);
  HEAPF64[$395>>3] = $394;
  $396 = $5;
  $397 = (+($396|0));
  $398 = (+Math_abs((+$397)));
  $399 = $398 + 1.0;
  $400 = 4.4408920985006262E-16 * $399;
  $401 = $36;
  $402 = (+Math_abs((+$401)));
  $403 = $400 * $402;
  $404 = ((($30)) + 8|0);
  $405 = +HEAPF64[$404>>3];
  $406 = $405 + $403;
  HEAPF64[$404>>3] = $406;
  $407 = +HEAPF64[$29>>3];
  $408 = ((($29)) + 8|0);
  $409 = +HEAPF64[$408>>3];
  $410 = +HEAPF64[$30>>3];
  $411 = ((($30)) + 8|0);
  $412 = +HEAPF64[$411>>3];
  $413 = $8;
  $414 = (_gsl_sf_exp_mult_err_e10_e($407,$409,$410,$412,$413)|0);
  $34 = $414;
  $415 = $34;
  $416 = ($415|0)!=(0);
  if ($416) {
   $417 = $34;
   $422 = $417;
  } else {
   $418 = $33;
   $419 = ($418|0)!=(0);
   $420 = $33;
   $421 = $419 ? $420 : 0;
   $422 = $421;
  }
  $4 = $422;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $423 = $6;
 $424 = (+($423|0));
 $425 = $7;
 $426 = $424 <= $425;
 if ($426) {
  $40 = 1.3407807929942596E+154;
  $41 = 0;
  $427 = $6;
  $428 = $5;
  $429 = (($428) + 1)|0;
  $430 = ($427|0)<($429|0);
  if ($430) {
   $431 = $6;
   $432 = (($431) - 1)|0;
   $45 = $432;
   $433 = $45;
   $434 = (0 - ($433))|0;
   $435 = (+($434|0));
   $436 = $7;
   $437 = (+Math_log((+$436)));
   $438 = $435 * $437;
   $46 = $438;
  } else {
   $45 = 0;
   $46 = 0.0;
  }
  $439 = $5;
  $440 = (+($439|0));
  $441 = $6;
  $442 = (+($441|0));
  $443 = $7;
  $444 = (_hyperg_U_CF1($440,$442,0,$443,$43,$44)|0);
  $42 = $444;
  $47 = 1.0;
  $445 = +HEAPF64[$43>>3];
  $446 = $5;
  $447 = (+($446|0));
  $448 = $445 / $447;
  $449 = $47;
  $450 = $448 * $449;
  $48 = $450;
  $451 = $5;
  $50 = $451;
  while(1) {
   $452 = $50;
   $453 = $45;
   $454 = ($452|0)>($453|0);
   if (!($454)) {
    break;
   }
   $455 = $6;
   $456 = (+($455|0));
   $457 = $50;
   $458 = (+($457|0));
   $459 = 2.0 * $458;
   $460 = $456 - $459;
   $461 = $7;
   $462 = $460 - $461;
   $463 = $47;
   $464 = $462 * $463;
   $465 = $50;
   $466 = (+($465|0));
   $467 = $50;
   $468 = (+($467|0));
   $469 = 1.0 + $468;
   $470 = $6;
   $471 = (+($470|0));
   $472 = $469 - $471;
   $473 = $466 * $472;
   $474 = $48;
   $475 = $473 * $474;
   $476 = $464 + $475;
   $477 = - $476;
   $49 = $477;
   $478 = $47;
   $48 = $478;
   $479 = $49;
   $47 = $479;
   $480 = $47;
   $481 = (+Math_abs((+$480)));
   $51 = $481;
   $482 = $51;
   $483 = $482 > 1.3407807929942596E+154;
   if ($483) {
    $484 = $47;
    $485 = $484 / 1.3407807929942596E+154;
    $47 = $485;
    $486 = $48;
    $487 = $486 / 1.3407807929942596E+154;
    $48 = $487;
    $488 = $41;
    $489 = (($488) + 1)|0;
    $41 = $489;
   } else {
    $490 = $51;
    $491 = $490 < 7.4583407312002084E-155;
    if ($491) {
     $492 = $47;
     $493 = $492 * 1.3407807929942596E+154;
     $47 = $493;
     $494 = $48;
     $495 = $494 * 1.3407807929942596E+154;
     $48 = $495;
     $496 = $41;
     $497 = (($496) + -1)|0;
     $41 = $497;
    }
   }
   $498 = $50;
   $499 = (($498) + -1)|0;
   $50 = $499;
  }
  $500 = $47;
  $501 = $500 == 0.0;
  if ($501) {
   $502 = $8;
   HEAPF64[$502>>3] = 0.0;
   $503 = $8;
   $504 = ((($503)) + 8|0);
   HEAPF64[$504>>3] = 0.0;
   $505 = $8;
   $506 = ((($505)) + 16|0);
   HEAP32[$506>>2] = 0;
   _gsl_error(83691,83551,1002,12);
   $4 = 12;
   $894 = $4;
   STACKTOP = sp;return ($894|0);
  }
  $507 = $41;
  $508 = (0 - ($507))|0;
  $509 = (+($508|0));
  $510 = (+Math_log(1.3407807929942596E+154));
  $511 = $509 * $510;
  $52 = $511;
  $512 = $46;
  $513 = $52;
  $514 = $512 + $513;
  $53 = $514;
  $515 = $46;
  $516 = (+Math_abs((+$515)));
  $517 = $52;
  $518 = (+Math_abs((+$517)));
  $519 = $516 + $518;
  $520 = 4.4408920985006262E-16 * $519;
  $54 = $520;
  $521 = $45;
  $522 = $5;
  $523 = (($521) - ($522))|0;
  $524 = (+($523|0));
  $525 = (+Math_abs((+$524)));
  $526 = HEAP32[$44>>2]|0;
  $527 = (+($526|0));
  $528 = $525 + $527;
  $529 = $528 + 1.0;
  $530 = 2.0 * $529;
  $531 = $530 * 2.2204460492503131E-16;
  $532 = $47;
  $533 = 1.0 / $532;
  $534 = (+Math_abs((+$533)));
  $535 = $531 * $534;
  $55 = $535;
  $536 = $53;
  $537 = $54;
  $538 = $47;
  $539 = 1.0 / $538;
  $540 = $55;
  $541 = $8;
  $542 = (_gsl_sf_exp_mult_err_e10_e($536,$537,$539,$540,$541)|0);
  $56 = $542;
  $543 = $56;
  $544 = ($543|0)!=(0);
  if ($544) {
   $545 = $56;
   $550 = $545;
  } else {
   $546 = $42;
   $547 = ($546|0)!=(0);
   $548 = $42;
   $549 = $547 ? $548 : 0;
   $550 = $549;
  }
  $4 = $550;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $57 = 1.3407807929942596E+154;
 $58 = 0;
 $59 = 0;
 $60 = 1;
 $551 = $60;
 $552 = (+($551|0));
 $553 = $6;
 $554 = (+($553|0));
 $555 = $7;
 $556 = $554 - $555;
 $557 = 0.5 * $556;
 $558 = $60;
 $559 = (+($558|0));
 $560 = $557 - $559;
 $561 = (+Math_ceil((+$560)));
 $562 = $552 + $561;
 $563 = (~~(($562)));
 $61 = $563;
 $564 = $5;
 $565 = (+($564|0));
 $566 = $6;
 $567 = (+($566|0));
 $568 = $7;
 $569 = (_hyperg_U_CF1($565,$567,0,$568,$69,$70)|0);
 $71 = $569;
 $72 = 1.0;
 $570 = +HEAPF64[$69>>3];
 $571 = $5;
 $572 = (+($571|0));
 $573 = $570 / $572;
 $574 = $72;
 $575 = $573 * $574;
 $73 = $575;
 $576 = $5;
 $75 = $576;
 while(1) {
  $577 = $75;
  $578 = $61;
  $579 = ($577|0)>($578|0);
  if (!($579)) {
   break;
  }
  $580 = $6;
  $581 = (+($580|0));
  $582 = $75;
  $583 = (+($582|0));
  $584 = 2.0 * $583;
  $585 = $581 - $584;
  $586 = $7;
  $587 = $585 - $586;
  $588 = $72;
  $589 = $587 * $588;
  $590 = $75;
  $591 = (+($590|0));
  $592 = $75;
  $593 = (+($592|0));
  $594 = 1.0 + $593;
  $595 = $6;
  $596 = (+($595|0));
  $597 = $594 - $596;
  $598 = $591 * $597;
  $599 = $73;
  $600 = $598 * $599;
  $601 = $589 + $600;
  $602 = - $601;
  $74 = $602;
  $603 = $72;
  $73 = $603;
  $604 = $74;
  $72 = $604;
  $605 = $72;
  $606 = (+Math_abs((+$605)));
  $76 = $606;
  $607 = $76;
  $608 = $607 > 1.3407807929942596E+154;
  if ($608) {
   $609 = $72;
   $610 = $609 / 1.3407807929942596E+154;
   $72 = $610;
   $611 = $73;
   $612 = $611 / 1.3407807929942596E+154;
   $73 = $612;
   $613 = $59;
   $614 = (($613) + 1)|0;
   $59 = $614;
  } else {
   $615 = $76;
   $616 = $615 < 7.4583407312002084E-155;
   if ($616) {
    $617 = $72;
    $618 = $617 * 1.3407807929942596E+154;
    $72 = $618;
    $619 = $73;
    $620 = $619 * 1.3407807929942596E+154;
    $73 = $620;
    $621 = $59;
    $622 = (($621) + -1)|0;
    $59 = $622;
   }
  }
  $623 = $75;
  $624 = (($623) + -1)|0;
  $75 = $624;
 }
 $625 = $72;
 $62 = $625;
 $626 = $61;
 $627 = $5;
 $628 = (($626) - ($627))|0;
 $629 = (+($628|0));
 $630 = (+Math_abs((+$629)));
 $631 = HEAP32[$70>>2]|0;
 $632 = (+($631|0));
 $633 = $630 + $632;
 $634 = $633 + 1.0;
 $635 = 4.4408920985006262E-16 * $634;
 $636 = $72;
 $637 = (+Math_abs((+$636)));
 $638 = $635 * $637;
 $63 = $638;
 $639 = $71;
 $67 = $639;
 $640 = $6;
 $641 = $61;
 $642 = $641<<1;
 $643 = ($640|0)==($642|0);
 $644 = $61;
 $645 = ($644|0)>(1);
 $or$cond9 = $643 & $645;
 do {
  if ($or$cond9) {
   $646 = $61;
   $647 = (+($646|0));
   $648 = $7;
   (_hyperg_lnU_beq2a($647,$648,$68)|0);
   $64 = 1.0;
   $65 = 0.0;
   $66 = 0;
  } else {
   $649 = $6;
   $650 = $61;
   $651 = $650<<1;
   $652 = (($651) - 1)|0;
   $653 = ($649|0)==($652|0);
   $654 = $61;
   $655 = ($654|0)>(1);
   $or$cond11 = $653 & $655;
   if ($or$cond11) {
    $656 = $61;
    $657 = (+($656|0));
    $658 = $657 - 1.0;
    $659 = $7;
    (_hyperg_lnU_beq2a($658,$659,$77)|0);
    $660 = $61;
    $661 = (+($660|0));
    $662 = $7;
    (_hyperg_lnU_beq2a($661,$662,$78)|0);
    $663 = +HEAPF64[$77>>3];
    $664 = +HEAPF64[$78>>3];
    $665 = $663 > $664;
    if ($665) {
     $666 = +HEAPF64[$77>>3];
     HEAPF64[$68>>3] = $666;
     $667 = ((($77)) + 8|0);
     $668 = +HEAPF64[$667>>3];
     $669 = ((($68)) + 8|0);
     HEAPF64[$669>>3] = $668;
     HEAPF64[$79>>3] = 1.0;
     $670 = ((($79)) + 8|0);
     HEAPF64[$670>>3] = 0.0;
     $671 = +HEAPF64[$78>>3];
     $672 = +HEAPF64[$68>>3];
     $673 = $671 - $672;
     $674 = ((($78)) + 8|0);
     $675 = +HEAPF64[$674>>3];
     $676 = ((($68)) + 8|0);
     $677 = +HEAPF64[$676>>3];
     $678 = $675 + $677;
     (_gsl_sf_exp_err_e($673,$678,$80)|0);
    } else {
     $679 = +HEAPF64[$78>>3];
     HEAPF64[$68>>3] = $679;
     $680 = ((($78)) + 8|0);
     $681 = +HEAPF64[$680>>3];
     $682 = ((($68)) + 8|0);
     HEAPF64[$682>>3] = $681;
     HEAPF64[$80>>3] = 1.0;
     $683 = ((($80)) + 8|0);
     HEAPF64[$683>>3] = 0.0;
     $684 = +HEAPF64[$77>>3];
     $685 = +HEAPF64[$68>>3];
     $686 = $684 - $685;
     $687 = ((($77)) + 8|0);
     $688 = +HEAPF64[$687>>3];
     $689 = ((($68)) + 8|0);
     $690 = +HEAPF64[$689>>3];
     $691 = $688 + $690;
     (_gsl_sf_exp_err_e($686,$691,$79)|0);
    }
    $692 = $7;
    $693 = +HEAPF64[$80>>3];
    $694 = $692 * $693;
    $695 = +HEAPF64[$79>>3];
    $696 = $694 - $695;
    $697 = $61;
    $698 = (+($697|0));
    $699 = 2.0 * $698;
    $700 = $699 - 2.0;
    $701 = $696 / $700;
    $64 = $701;
    $702 = $7;
    $703 = (+Math_abs((+$702)));
    $704 = ((($80)) + 8|0);
    $705 = +HEAPF64[$704>>3];
    $706 = $703 * $705;
    $707 = ((($79)) + 8|0);
    $708 = +HEAPF64[$707>>3];
    $709 = $706 + $708;
    $710 = $61;
    $711 = (+($710|0));
    $712 = 2.0 * $711;
    $713 = $712 - 2.0;
    $714 = (+Math_abs((+$713)));
    $715 = $709 / $714;
    $65 = $715;
    $716 = $64;
    $717 = (+Math_abs((+$716)));
    $718 = 4.4408920985006262E-16 * $717;
    $719 = $65;
    $720 = $719 + $718;
    $65 = $720;
    $66 = 0;
    break;
   }
   $82 = 1.0;
   $721 = $60;
   $722 = (+($721|0));
   $723 = $6;
   $724 = (+($723|0));
   $725 = $7;
   $726 = (_hyperg_U_small_a_bgt0($722,$724,$725,$81,$86)|0);
   $66 = $726;
   $727 = +HEAPF64[$81>>3];
   $83 = $727;
   $728 = +HEAPF64[$86>>3];
   $729 = - $728;
   $730 = (+Math_exp((+$729)));
   $731 = $82;
   $732 = $731 * $730;
   $82 = $732;
   $733 = +HEAPF64[$86>>3];
   HEAPF64[$68>>3] = $733;
   $734 = ((($68)) + 8|0);
   HEAPF64[$734>>3] = 0.0;
   $735 = $60;
   $85 = $735;
   while(1) {
    $736 = $85;
    $737 = $61;
    $738 = ($736|0)<($737|0);
    if (!($738)) {
     break;
    }
    $739 = $82;
    $740 = $6;
    $741 = (+($740|0));
    $742 = $85;
    $743 = (+($742|0));
    $744 = 2.0 * $743;
    $745 = $741 - $744;
    $746 = $7;
    $747 = $745 - $746;
    $748 = $83;
    $749 = $747 * $748;
    $750 = $739 + $749;
    $751 = - $750;
    $752 = $85;
    $753 = (+($752|0));
    $754 = $85;
    $755 = (+($754|0));
    $756 = 1.0 + $755;
    $757 = $6;
    $758 = (+($757|0));
    $759 = $756 - $758;
    $760 = $753 * $759;
    $761 = $751 / $760;
    $84 = $761;
    $762 = $83;
    $82 = $762;
    $763 = $84;
    $83 = $763;
    $764 = $83;
    $765 = (+Math_abs((+$764)));
    $87 = $765;
    $766 = $87;
    $767 = $766 > 1.3407807929942596E+154;
    if ($767) {
     $768 = $83;
     $769 = $768 / 1.3407807929942596E+154;
     $83 = $769;
     $770 = $82;
     $771 = $770 / 1.3407807929942596E+154;
     $82 = $771;
     $772 = $58;
     $773 = (($772) + 1)|0;
     $58 = $773;
    } else {
     $774 = $87;
     $775 = $774 < 7.4583407312002084E-155;
     if ($775) {
      $776 = $83;
      $777 = $776 * 1.3407807929942596E+154;
      $83 = $777;
      $778 = $82;
      $779 = $778 * 1.3407807929942596E+154;
      $82 = $779;
      $780 = $58;
      $781 = (($780) + -1)|0;
      $58 = $781;
     }
    }
    $782 = $85;
    $783 = (($782) + 1)|0;
    $85 = $783;
   }
   $784 = $83;
   $64 = $784;
   $785 = $83;
   $786 = (+Math_abs((+$785)));
   $787 = ((($81)) + 8|0);
   $788 = +HEAPF64[$787>>3];
   $789 = +HEAPF64[$81>>3];
   $790 = $788 / $789;
   $791 = (+Math_abs((+$790)));
   $792 = $786 * $791;
   $65 = $792;
   $793 = $61;
   $794 = $60;
   $795 = (($793) - ($794))|0;
   $796 = (+($795|0));
   $797 = (+Math_abs((+$796)));
   $798 = $797 + 1.0;
   $799 = 4.4408920985006262E-16 * $798;
   $800 = $64;
   $801 = (+Math_abs((+$800)));
   $802 = $799 * $801;
   $803 = $65;
   $804 = $803 + $802;
   $65 = $804;
  }
 } while(0);
 $805 = $62;
 $806 = $805 == 0.0;
 if ($806) {
  $807 = $8;
  HEAPF64[$807>>3] = 0.0;
  $808 = $8;
  $809 = ((($808)) + 8|0);
  HEAPF64[$809>>3] = 0.0;
  $810 = $8;
  $811 = ((($810)) + 16|0);
  HEAP32[$811>>2] = 0;
  _gsl_error(83691,83551,1127,12);
  $4 = 12;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $812 = $64;
 $813 = $812 == 0.0;
 if ($813) {
  $814 = $8;
  HEAPF64[$814>>3] = 0.0;
  $815 = $8;
  $816 = ((($815)) + 8|0);
  HEAPF64[$816>>3] = 2.2250738585072014E-308;
  $817 = $8;
  $818 = ((($817)) + 16|0);
  HEAP32[$818>>2] = 0;
  _gsl_error(83794,83551,1131,15);
  $4 = 15;
  $894 = $4;
  STACKTOP = sp;return ($894|0);
 }
 $819 = $58;
 $820 = $59;
 $821 = (($819) - ($820))|0;
 $822 = (+($821|0));
 $823 = (+Math_log(1.3407807929942596E+154));
 $824 = $822 * $823;
 $88 = $824;
 $825 = $64;
 $826 = (+Math_abs((+$825)));
 $827 = (+Math_log((+$826)));
 $89 = $827;
 $828 = $65;
 $829 = $64;
 $830 = $828 / $829;
 $831 = (+Math_abs((+$830)));
 $832 = 2.2204460492503131E-16 + $831;
 $90 = $832;
 $833 = $62;
 $834 = (+Math_abs((+$833)));
 $835 = (+Math_log((+$834)));
 $91 = $835;
 $836 = $63;
 $837 = $62;
 $838 = $836 / $837;
 $839 = (+Math_abs((+$838)));
 $840 = 2.2204460492503131E-16 + $839;
 $92 = $840;
 $841 = +HEAPF64[$68>>3];
 $842 = $89;
 $843 = $841 + $842;
 $844 = $91;
 $845 = $843 - $844;
 $846 = $88;
 $847 = $845 + $846;
 $93 = $847;
 $848 = ((($68)) + 8|0);
 $849 = +HEAPF64[$848>>3];
 $850 = $90;
 $851 = $849 + $850;
 $852 = $92;
 $853 = $851 + $852;
 $854 = +HEAPF64[$68>>3];
 $855 = (+Math_abs((+$854)));
 $856 = $89;
 $857 = (+Math_abs((+$856)));
 $858 = $855 + $857;
 $859 = $91;
 $860 = (+Math_abs((+$859)));
 $861 = $858 + $860;
 $862 = $88;
 $863 = (+Math_abs((+$862)));
 $864 = $861 + $863;
 $865 = 4.4408920985006262E-16 * $864;
 $866 = $853 + $865;
 $94 = $866;
 $867 = $64;
 $868 = $867 >= 0.0;
 $869 = $868 ? 1 : -1;
 $870 = $62;
 $871 = $870 >= 0.0;
 $872 = $871 ? 1 : -1;
 $873 = Math_imul($869, $872)|0;
 $874 = (+($873|0));
 $95 = $874;
 $875 = $93;
 $876 = $94;
 $877 = $8;
 $878 = (_gsl_sf_exp_err_e10_e($875,$876,$877)|0);
 $96 = $878;
 $879 = $95;
 $880 = $8;
 $881 = +HEAPF64[$880>>3];
 $882 = $881 * $879;
 HEAPF64[$880>>3] = $882;
 $883 = $96;
 $884 = ($883|0)!=(0);
 do {
  if ($884) {
   $885 = $96;
   $893 = $885;
  } else {
   $886 = $67;
   $887 = ($886|0)!=(0);
   if ($887) {
    $888 = $67;
    $893 = $888;
    break;
   } else {
    $889 = $66;
    $890 = ($889|0)!=(0);
    $891 = $66;
    $892 = $890 ? $891 : 0;
    $893 = $892;
    break;
   }
  }
 } while(0);
 $4 = $893;
 $894 = $4;
 STACKTOP = sp;return ($894|0);
}
function _hyperg_zaU_asymp($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $23 = $5;
 $9 = $23;
 $24 = $5;
 $25 = 1.0 + $24;
 $26 = $6;
 $27 = $25 - $26;
 $10 = $27;
 $28 = $9;
 $29 = $28 + 0.5;
 $30 = (+Math_floor((+$29)));
 $11 = $30;
 $31 = $10;
 $32 = $31 + 0.5;
 $33 = (+Math_floor((+$32)));
 $12 = $33;
 $34 = $9;
 $35 = $34 < 0.0;
 if ($35) {
  $36 = $9;
  $37 = $11;
  $38 = $36 - $37;
  $39 = (+Math_abs((+$38)));
  $40 = $39 < 2.2204460492503131E-13;
  $42 = $40;
 } else {
  $42 = 0;
 }
 $41 = $42&1;
 $13 = $41;
 $43 = $10;
 $44 = $43 < 0.0;
 if ($44) {
  $45 = $10;
  $46 = $12;
  $47 = $45 - $46;
  $48 = (+Math_abs((+$47)));
  $49 = $48 < 2.2204460492503131E-13;
  $51 = $49;
 } else {
  $51 = 0;
 }
 $50 = $51&1;
 $14 = $50;
 $52 = $13;
 $53 = ($52|0)!=(0);
 $54 = $14;
 $55 = ($54|0)!=(0);
 $or$cond = $53 | $55;
 if (!($or$cond)) {
  $114 = $5;
  $115 = $6;
  $116 = $7;
  $117 = $8;
  $118 = (_d9chu($114,$115,$116,$117)|0);
  $4 = $118;
  $119 = $4;
  STACKTOP = sp;return ($119|0);
 }
 $56 = $7;
 $57 = -1.0 / $56;
 $15 = $57;
 $58 = $9;
 $59 = $10;
 $60 = $58 < $59;
 $61 = $9;
 $62 = $10;
 $63 = $60 ? $61 : $62;
 $64 = $63 - 0.10000000000000001;
 $65 = (~~(($64)));
 $66 = (0 - ($65))|0;
 $67 = (+($66|0));
 $16 = $67;
 $17 = 1.0;
 $18 = 1.0;
 $19 = 1.0;
 $20 = 0.0;
 while(1) {
  $68 = $19;
  $69 = $16;
  $70 = $68 <= $69;
  if (!($70)) {
   break;
  }
  $71 = $9;
  $72 = $19;
  $73 = $71 + $72;
  $74 = $73 - 1.0;
  $21 = $74;
  $75 = $10;
  $76 = $19;
  $77 = $75 + $76;
  $78 = $77 - 1.0;
  $22 = $78;
  $79 = $21;
  $80 = $19;
  $81 = $79 / $80;
  $82 = $15;
  $83 = $81 * $82;
  $84 = $22;
  $85 = $83 * $84;
  $86 = $17;
  $87 = $86 * $85;
  $17 = $87;
  $88 = $17;
  $89 = $18;
  $90 = $89 + $88;
  $18 = $90;
  $91 = $17;
  $92 = (+Math_abs((+$91)));
  $93 = 4.4408920985006262E-16 * $92;
  $94 = $20;
  $95 = $94 + $93;
  $20 = $95;
  $96 = $19;
  $97 = $96 + 1.0;
  $19 = $97;
 }
 $98 = $18;
 $99 = $8;
 HEAPF64[$99>>3] = $98;
 $100 = $20;
 $101 = $8;
 $102 = ((($101)) + 8|0);
 HEAPF64[$102>>3] = $100;
 $103 = $16;
 $104 = (+Math_abs((+$103)));
 $105 = $104 + 1.0;
 $106 = 4.4408920985006262E-16 * $105;
 $107 = $18;
 $108 = (+Math_abs((+$107)));
 $109 = $106 * $108;
 $110 = $8;
 $111 = ((($110)) + 8|0);
 $112 = +HEAPF64[$111>>3];
 $113 = $112 + $109;
 HEAPF64[$111>>3] = $113;
 $4 = 0;
 $119 = $4;
 STACKTOP = sp;return ($119|0);
}
function _hyperg_U_series($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy5 = sp + 144|0;
 $$byval_copy4 = sp + 128|0;
 $$byval_copy = sp + 112|0;
 $20 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 2.1073424255447017E-8;
 $23 = $6;
 $24 = $23 < 0.0;
 $25 = $6;
 $26 = $25 - 0.5;
 $27 = (+Math_ceil((+$26)));
 $28 = $25 + 0.5;
 $29 = (+Math_floor((+$28)));
 $30 = $24 ? $27 : $29;
 $10 = $30;
 $31 = $6;
 $32 = $10;
 $33 = $31 - $32;
 $11 = $33;
 $34 = $5;
 $35 = $11;
 $36 = $34 - $35;
 $12 = $36;
 $37 = $12;
 $38 = $37 + 0.5;
 $39 = (+Math_floor((+$38)));
 $13 = $39;
 $40 = $12;
 $41 = $13;
 $42 = $40 - $41;
 $43 = (+Math_abs((+$42)));
 $44 = $43 < 2.2204460492503131E-13;
 $45 = $44&1;
 $46 = (+($45|0));
 $14 = $46;
 $47 = $14;
 $48 = $47 != 0.0;
 $49 = $12;
 $50 = $49 <= 0.0;
 $or$cond = $48 & $50;
 if ($or$cond) {
  $51 = $11;
  $52 = $51 - 1.0;
  $53 = $12;
  $54 = (+Math_floor((+$53)));
  $55 = $52 + $54;
  $11 = $55;
  $56 = $10;
  $57 = $56 + 1.0;
  $58 = $12;
  $59 = (+Math_floor((+$58)));
  $60 = $57 - $59;
  $10 = $60;
 }
 $61 = $5;
 $62 = 1.0 + $61;
 $63 = $6;
 $64 = $62 - $63;
 $65 = (+Math_abs((+$64)));
 $66 = $65 < 2.1073424255447017E-8;
 if ($66) {
  $67 = $5;
  $68 = - $67;
  $69 = $7;
  $70 = (+Math_log((+$69)));
  $71 = $68 * $70;
  $15 = $71;
  $72 = $15;
  $73 = $8;
  $74 = (_gsl_sf_exp_e($72,$73)|0);
  $16 = $74;
  $75 = $8;
  $76 = +HEAPF64[$75>>3];
  $77 = (+Math_abs((+$76)));
  $78 = 4.2146848510894035E-8 * $77;
  $79 = $8;
  $80 = ((($79)) + 8|0);
  $81 = +HEAPF64[$80>>3];
  $82 = $81 + $78;
  HEAPF64[$80>>3] = $82;
  $83 = $16;
  $4 = $83;
  $155 = $4;
  STACKTOP = sp;return ($155|0);
 }
 $84 = $10;
 $85 = (~~(($84)));
 $17 = $85;
 $86 = $7;
 $87 = (+Math_log((+$86)));
 $18 = $87;
 $88 = $11;
 $89 = - $88;
 $90 = $18;
 $91 = $89 * $90;
 $92 = (+Math_exp((+$91)));
 $19 = $92;
 $93 = $17;
 $94 = $5;
 $95 = $6;
 $96 = $7;
 $97 = $19;
 $98 = (_hyperg_U_finite_sum($93,$94,$95,$96,$97,$20)|0);
 $21 = $98;
 $99 = $19;
 $100 = $99 - 1.0;
 $101 = (+Math_abs((+$100)));
 $102 = $101 > 0.5;
 do {
  if ($102) {
   $103 = $17;
   $104 = $5;
   $105 = $10;
   $106 = $6;
   $107 = $11;
   $108 = $7;
   $109 = $19;
   $110 = $8;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$20+12>>2]|0;
   $111 = (_hyperg_U_infinite_sum_stable($103,$104,$105,$106,$107,$108,$109,$$byval_copy,$110)|0);
   $22 = $111;
  } else {
   $112 = $5;
   $113 = 1.0 + $112;
   $114 = $6;
   $115 = $113 - $114;
   $116 = $115 < 0.0;
   if ($116) {
    $117 = $5;
    $118 = 1.0 + $117;
    $119 = $6;
    $120 = $118 - $119;
    $121 = $5;
    $122 = 1.0 + $121;
    $123 = $6;
    $124 = $122 - $123;
    $125 = (+Math_floor((+$124)));
    $126 = $120 == $125;
    $127 = $11;
    $128 = $127 != 0.0;
    $or$cond3 = $126 & $128;
    if ($or$cond3) {
     $129 = $17;
     $130 = $5;
     $131 = $10;
     $132 = $6;
     $133 = $11;
     $134 = $7;
     $135 = $19;
     $136 = $8;
     ;HEAP32[$$byval_copy4>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$20+12>>2]|0;
     $137 = (_hyperg_U_infinite_sum_simple($129,$130,$131,$132,$133,$134,$135,$$byval_copy4,$136)|0);
     $22 = $137;
     break;
    }
   }
   $138 = $17;
   $139 = $5;
   $140 = $10;
   $141 = $6;
   $142 = $11;
   $143 = $7;
   $144 = $19;
   $145 = $8;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$20+12>>2]|0;
   $146 = (_hyperg_U_infinite_sum_improved($138,$139,$140,$141,$142,$143,$144,$$byval_copy5,$145)|0);
   $22 = $146;
  }
 } while(0);
 $147 = $21;
 $148 = ($147|0)!=(0);
 if ($148) {
  $149 = $21;
  $154 = $149;
 } else {
  $150 = $22;
  $151 = ($150|0)!=(0);
  $152 = $22;
  $153 = $151 ? $152 : 0;
  $154 = $153;
 }
 $4 = $154;
 $155 = $4;
 STACKTOP = sp;return ($155|0);
}
function _hyperg_U_small_a_bgt0($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $14 = sp + 48|0;
 $15 = sp + 32|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $6;
 $23 = $22 == 0.0;
 if ($23) {
  $24 = $9;
  HEAPF64[$24>>3] = 1.0;
  $25 = $9;
  $26 = ((($25)) + 8|0);
  HEAPF64[$26>>3] = 0.0;
  $27 = $10;
  HEAPF64[$27>>3] = 0.0;
  $5 = 0;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 $28 = $7;
 $29 = $28 > 5000.0;
 if ($29) {
  $30 = $8;
  $31 = $7;
  $32 = (+Math_abs((+$31)));
  $33 = 0.90000000000000002 * $32;
  $34 = $30 < $33;
  if (!($34)) {
   label = 5;
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   $35 = $7;
   $36 = $35 > 500.0;
   if ($36) {
    $37 = $8;
    $38 = $7;
    $39 = (+Math_abs((+$38)));
    $40 = 0.5 * $39;
    $41 = $37 < $40;
    if ($41) {
     break;
    }
   }
   $51 = $7;
   $52 = $51 > 15.0;
   if (!($52)) {
    $135 = $10;
    HEAPF64[$135>>3] = 0.0;
    $136 = $6;
    $137 = $7;
    $138 = $8;
    $139 = $9;
    $140 = (_hyperg_U_small_ab($136,$137,$138,$139)|0);
    $5 = $140;
    $141 = $5;
    STACKTOP = sp;return ($141|0);
   }
   $53 = $7;
   $54 = $7;
   $55 = (+Math_floor((+$54)));
   $56 = $53 - $55;
   $12 = $56;
   $57 = $12;
   $58 = 1.0 + $57;
   $13 = $58;
   $59 = $6;
   $60 = $13;
   $61 = $8;
   $62 = (_hyperg_U_small_ab($59,$60,$61,$14)|0);
   $16 = $62;
   $63 = $6;
   $64 = $13;
   $65 = $64 + 1.0;
   $66 = $8;
   $67 = (_hyperg_U_small_ab($63,$65,$66,$15)|0);
   $17 = $67;
   $68 = +HEAPF64[$14>>3];
   $18 = $68;
   $69 = +HEAPF64[$15>>3];
   $19 = $69;
   $70 = $13;
   $71 = $70 + 1.0;
   $21 = $71;
   while(1) {
    $72 = $21;
    $73 = $7;
    $74 = $73 - 0.10000000000000001;
    $75 = $72 < $74;
    if (!($75)) {
     break;
    }
    $76 = $6;
    $77 = 1.0 + $76;
    $78 = $21;
    $79 = $77 - $78;
    $80 = $18;
    $81 = $79 * $80;
    $82 = $21;
    $83 = $8;
    $84 = $82 + $83;
    $85 = $84 - 1.0;
    $86 = $19;
    $87 = $85 * $86;
    $88 = $81 + $87;
    $89 = $8;
    $90 = $88 / $89;
    $20 = $90;
    $91 = $19;
    $18 = $91;
    $92 = $20;
    $19 = $92;
    $93 = $21;
    $94 = $93 + 1.0;
    $21 = $94;
   }
   $95 = $19;
   $96 = $9;
   HEAPF64[$96>>3] = $95;
   $97 = ((($14)) + 8|0);
   $98 = +HEAPF64[$97>>3];
   $99 = +HEAPF64[$14>>3];
   $100 = $98 / $99;
   $101 = (+Math_abs((+$100)));
   $102 = ((($15)) + 8|0);
   $103 = +HEAPF64[$102>>3];
   $104 = +HEAPF64[$15>>3];
   $105 = $103 / $104;
   $106 = (+Math_abs((+$105)));
   $107 = $101 + $106;
   $108 = $19;
   $109 = (+Math_abs((+$108)));
   $110 = $107 * $109;
   $111 = $9;
   $112 = ((($111)) + 8|0);
   HEAPF64[$112>>3] = $110;
   $113 = $7;
   $114 = $13;
   $115 = $113 - $114;
   $116 = (+Math_abs((+$115)));
   $117 = $116 + 1.0;
   $118 = 4.4408920985006262E-16 * $117;
   $119 = $19;
   $120 = (+Math_abs((+$119)));
   $121 = $118 * $120;
   $122 = $9;
   $123 = ((($122)) + 8|0);
   $124 = +HEAPF64[$123>>3];
   $125 = $124 + $121;
   HEAPF64[$123>>3] = $125;
   $126 = $10;
   HEAPF64[$126>>3] = 0.0;
   $127 = $16;
   $128 = ($127|0)!=(0);
   if ($128) {
    $129 = $16;
    $134 = $129;
   } else {
    $130 = $17;
    $131 = ($130|0)!=(0);
    $132 = $17;
    $133 = $131 ? $132 : 0;
    $134 = $133;
   }
   $5 = $134;
   $141 = $5;
   STACKTOP = sp;return ($141|0);
  }
 } while(0);
 $42 = $6;
 $43 = $7;
 $44 = $8;
 $45 = $9;
 $46 = $10;
 $47 = (_gsl_sf_hyperg_U_large_b_e($42,$43,$44,$45,$46)|0);
 $11 = $47;
 $48 = $11;
 $49 = ($48|0)==(16);
 if ($49) {
  $5 = 0;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 } else {
  $50 = $11;
  $5 = $50;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 return (0)|0;
}
function _hyperg_U_CF1($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
 var $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 1.3407807929942596E+154;
 $14 = 20000;
 $15 = 1;
 $16 = 1.0;
 $17 = 0.0;
 $18 = 0.0;
 $19 = 1.0;
 $29 = $7;
 $30 = $9;
 $31 = (+($30|0));
 $32 = $29 + $31;
 $33 = - $32;
 $20 = $33;
 $34 = $8;
 $35 = $7;
 $36 = 2.0 * $35;
 $37 = $34 - $36;
 $38 = $10;
 $39 = $37 - $38;
 $40 = $9;
 $41 = (($40) + 1)|0;
 $42 = (+($41|0));
 $43 = 2.0 * $42;
 $44 = $39 - $43;
 $21 = $44;
 $45 = $21;
 $46 = $18;
 $47 = $45 * $46;
 $48 = $20;
 $49 = $16;
 $50 = $48 * $49;
 $51 = $47 + $50;
 $22 = $51;
 $52 = $21;
 $53 = $19;
 $54 = $52 * $53;
 $55 = $20;
 $56 = $17;
 $57 = $55 * $56;
 $58 = $54 + $57;
 $23 = $58;
 $59 = $22;
 $60 = $23;
 $61 = $59 / $60;
 $26 = $61;
 while(1) {
  $62 = $15;
  $63 = ($62|0)<(20000);
  if (!($63)) {
   break;
  }
  $64 = $15;
  $65 = (($64) + 1)|0;
  $15 = $65;
  $66 = $18;
  $16 = $66;
  $67 = $19;
  $17 = $67;
  $68 = $22;
  $18 = $68;
  $69 = $23;
  $19 = $69;
  $70 = $7;
  $71 = $9;
  $72 = (+($71|0));
  $73 = $70 + $72;
  $74 = $15;
  $75 = (+($74|0));
  $76 = $73 + $75;
  $77 = $8;
  $78 = $76 - $77;
  $79 = - $78;
  $80 = $7;
  $81 = $9;
  $82 = (+($81|0));
  $83 = $80 + $82;
  $84 = $15;
  $85 = (+($84|0));
  $86 = $83 + $85;
  $87 = $86 - 1.0;
  $88 = $79 * $87;
  $24 = $88;
  $89 = $8;
  $90 = $7;
  $91 = 2.0 * $90;
  $92 = $89 - $91;
  $93 = $10;
  $94 = $92 - $93;
  $95 = $9;
  $96 = $15;
  $97 = (($95) + ($96))|0;
  $98 = (+($97|0));
  $99 = 2.0 * $98;
  $100 = $94 - $99;
  $25 = $100;
  $101 = $25;
  $102 = $18;
  $103 = $101 * $102;
  $104 = $24;
  $105 = $16;
  $106 = $104 * $105;
  $107 = $103 + $106;
  $22 = $107;
  $108 = $25;
  $109 = $19;
  $110 = $108 * $109;
  $111 = $24;
  $112 = $17;
  $113 = $111 * $112;
  $114 = $110 + $113;
  $23 = $114;
  $115 = $22;
  $116 = (+Math_abs((+$115)));
  $117 = $116 > 1.3407807929942596E+154;
  if ($117) {
   label = 5;
  } else {
   $118 = $23;
   $119 = (+Math_abs((+$118)));
   $120 = $119 > 1.3407807929942596E+154;
   if ($120) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $121 = $22;
   $122 = $121 / 1.3407807929942596E+154;
   $22 = $122;
   $123 = $23;
   $124 = $123 / 1.3407807929942596E+154;
   $23 = $124;
   $125 = $18;
   $126 = $125 / 1.3407807929942596E+154;
   $18 = $126;
   $127 = $19;
   $128 = $127 / 1.3407807929942596E+154;
   $19 = $128;
   $129 = $16;
   $130 = $129 / 1.3407807929942596E+154;
   $16 = $130;
   $131 = $17;
   $132 = $131 / 1.3407807929942596E+154;
   $17 = $132;
  }
  $133 = $26;
  $27 = $133;
  $134 = $22;
  $135 = $23;
  $136 = $134 / $135;
  $26 = $136;
  $137 = $27;
  $138 = $26;
  $139 = $137 / $138;
  $28 = $139;
  $140 = $28;
  $141 = $140 - 1.0;
  $142 = (+Math_abs((+$141)));
  $143 = $142 < 2.2204460492503131E-15;
  if ($143) {
   break;
  }
 }
 $144 = $26;
 $145 = $11;
 HEAPF64[$145>>3] = $144;
 $146 = $15;
 $147 = $12;
 HEAP32[$147>>2] = $146;
 $148 = $15;
 $149 = ($148|0)==(20000);
 if ($149) {
  _gsl_error(83691,83551,121,11);
  $6 = 11;
  $150 = $6;
  STACKTOP = sp;return ($150|0);
 } else {
  $6 = 0;
  $150 = $6;
  STACKTOP = sp;return ($150|0);
 }
 return (0)|0;
}
function _hyperg_lnU_beq2a($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $4;
 $11 = (+Math_log((+$10)));
 $6 = $11;
 $12 = $3;
 $13 = $12 - 0.5;
 $7 = $13;
 $14 = $4;
 $15 = $14 - 1.1447298858494002;
 $16 = 0.5 * $15;
 $17 = $7;
 $18 = $6;
 $19 = $17 * $18;
 $20 = $16 - $19;
 $8 = $20;
 $21 = $7;
 $22 = $4;
 $23 = 0.5 * $22;
 (_gsl_sf_bessel_lnKnu_e($21,$23,$9)|0);
 $24 = $8;
 $25 = +HEAPF64[$9>>3];
 $26 = $24 + $25;
 $27 = $5;
 HEAPF64[$27>>3] = $26;
 $28 = $4;
 $29 = 0.5 * $28;
 $30 = (+Math_abs((+$29)));
 $31 = $30 + 0.57236494292470008;
 $32 = $7;
 $33 = $6;
 $34 = $32 * $33;
 $35 = (+Math_abs((+$34)));
 $36 = $31 + $35;
 $37 = 4.4408920985006262E-16 * $36;
 $38 = $5;
 $39 = ((($38)) + 8|0);
 HEAPF64[$39>>3] = $37;
 $40 = ((($9)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $5;
 $43 = ((($42)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44 + $41;
 HEAPF64[$43>>3] = $45;
 $46 = $5;
 $47 = +HEAPF64[$46>>3];
 $48 = (+Math_abs((+$47)));
 $49 = 4.4408920985006262E-16 * $48;
 $50 = $5;
 $51 = ((($50)) + 8|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $52 + $49;
 HEAPF64[$51>>3] = $53;
 STACKTOP = sp;return 0;
}
function _hyperg_U_small_ab($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = $12 == -1.0;
 if ($13) {
  $14 = $6;
  $15 = - $14;
  $16 = $7;
  $17 = $15 + $16;
  $18 = $8;
  HEAPF64[$18>>3] = $17;
  $19 = $6;
  $20 = (+Math_abs((+$19)));
  $21 = $7;
  $22 = (+Math_abs((+$21)));
  $23 = $20 + $22;
  $24 = 4.4408920985006262E-16 * $23;
  $25 = $8;
  $26 = ((($25)) + 8|0);
  HEAPF64[$26>>3] = $24;
  $27 = $8;
  $28 = +HEAPF64[$27>>3];
  $29 = (+Math_abs((+$28)));
  $30 = 4.4408920985006262E-16 * $29;
  $31 = $8;
  $32 = ((($31)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $33 + $30;
  HEAPF64[$32>>3] = $34;
  $4 = 0;
  $98 = $4;
  STACKTOP = sp;return ($98|0);
 }
 $35 = $5;
 $36 = $35 == 0.0;
 if ($36) {
  $37 = $8;
  HEAPF64[$37>>3] = 1.0;
  $38 = $8;
  $39 = ((($38)) + 8|0);
  HEAPF64[$39>>3] = 0.0;
  $4 = 0;
  $98 = $4;
  STACKTOP = sp;return ($98|0);
 }
 $40 = $5;
 $41 = (+Math_abs((+$40)));
 $42 = (+_GSL_MAX_DBL($41,1.0));
 $43 = $5;
 $44 = 1.0 + $43;
 $45 = $6;
 $46 = $44 - $45;
 $47 = (+Math_abs((+$46)));
 $48 = (+_GSL_MAX_DBL($47,1.0));
 $49 = $42 * $48;
 $50 = $7;
 $51 = (+Math_abs((+$50)));
 $52 = 0.98999999999999999 * $51;
 $53 = $49 < $52;
 if ($53) {
  $54 = $7;
  $55 = $5;
  $56 = - $55;
  $57 = (+Math_pow((+$54),(+$56)));
  $9 = $57;
  $58 = $5;
  $59 = $6;
  $60 = $7;
  $61 = (_hyperg_zaU_asymp($58,$59,$60,$10)|0);
  $11 = $61;
  $62 = +HEAPF64[$10>>3];
  $63 = $9;
  $64 = $62 * $63;
  $65 = $8;
  HEAPF64[$65>>3] = $64;
  $66 = ((($10)) + 8|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $9;
  $69 = $67 * $68;
  $70 = $8;
  $71 = ((($70)) + 8|0);
  HEAPF64[$71>>3] = $69;
  $72 = +HEAPF64[$10>>3];
  $73 = (+Math_abs((+$72)));
  $74 = $73 * 2.2204460492503131E-16;
  $75 = $5;
  $76 = (+Math_abs((+$75)));
  $77 = $74 * $76;
  $78 = $9;
  $79 = $77 * $78;
  $80 = $8;
  $81 = ((($80)) + 8|0);
  $82 = +HEAPF64[$81>>3];
  $83 = $82 + $79;
  HEAPF64[$81>>3] = $83;
  $84 = $8;
  $85 = +HEAPF64[$84>>3];
  $86 = (+Math_abs((+$85)));
  $87 = 4.4408920985006262E-16 * $86;
  $88 = $8;
  $89 = ((($88)) + 8|0);
  $90 = +HEAPF64[$89>>3];
  $91 = $90 + $87;
  HEAPF64[$89>>3] = $91;
  $92 = $11;
  $4 = $92;
  $98 = $4;
  STACKTOP = sp;return ($98|0);
 } else {
  $93 = $5;
  $94 = $6;
  $95 = $7;
  $96 = $8;
  $97 = (_hyperg_U_series($93,$94,$95,$96)|0);
  $4 = $97;
  $98 = $4;
  STACKTOP = sp;return ($98|0);
 }
 return (0)|0;
}
function _hyperg_U_finite_sum($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0;
 var $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $18 = sp + 120|0;
 $23 = sp + 88|0;
 $24 = sp + 72|0;
 $30 = sp + 32|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $36 = $7;
 $37 = ($36|0)<=(0);
 if ($37) {
  $16 = 1.0;
  $17 = 0.0;
  $14 = 1.0;
  $15 = 0.0;
  $13 = 1;
  while(1) {
   $38 = $13;
   $39 = $7;
   $40 = (0 - ($39))|0;
   $41 = ($38|0)<=($40|0);
   if (!($41)) {
    break;
   }
   $42 = $13;
   $43 = (($42) - 1)|0;
   $44 = (+($43|0));
   $20 = $44;
   $45 = $8;
   $46 = $20;
   $47 = $45 + $46;
   $48 = $10;
   $49 = $47 * $48;
   $50 = $9;
   $51 = $20;
   $52 = $50 + $51;
   $53 = $20;
   $54 = $53 + 1.0;
   $55 = $52 * $54;
   $56 = $49 / $55;
   $21 = $56;
   $57 = $21;
   $58 = $16;
   $59 = $58 * $57;
   $16 = $59;
   $60 = $21;
   $61 = (+Math_abs((+$60)));
   $62 = $17;
   $63 = $61 * $62;
   $64 = $16;
   $65 = (+Math_abs((+$64)));
   $66 = $65 * 8.0;
   $67 = $66 * 2.0;
   $68 = $67 * 2.2204460492503131E-16;
   $69 = $63 + $68;
   $70 = $17;
   $71 = $70 + $69;
   $17 = $71;
   $72 = $16;
   $73 = $14;
   $74 = $73 + $72;
   $14 = $74;
   $75 = $17;
   $76 = $15;
   $77 = $76 + $75;
   $15 = $77;
   $78 = $13;
   $79 = (($78) + 1)|0;
   $13 = $79;
  }
  $80 = $8;
  $81 = 1.0 + $80;
  $82 = $9;
  $83 = $81 - $82;
  $84 = $8;
  $85 = - $84;
  $86 = (_gsl_sf_poch_e($83,$85,$18)|0);
  $19 = $86;
  $87 = $14;
  $88 = +HEAPF64[$18>>3];
  $89 = $87 * $88;
  $90 = $12;
  HEAPF64[$90>>3] = $89;
  $91 = $14;
  $92 = (+Math_abs((+$91)));
  $93 = ((($18)) + 8|0);
  $94 = +HEAPF64[$93>>3];
  $95 = $92 * $94;
  $96 = $15;
  $97 = +HEAPF64[$18>>3];
  $98 = (+Math_abs((+$97)));
  $99 = $96 * $98;
  $100 = $95 + $99;
  $101 = $12;
  $102 = ((($101)) + 8|0);
  HEAPF64[$102>>3] = $100;
  $103 = +HEAPF64[$18>>3];
  $104 = (+Math_abs((+$103)));
  $105 = $7;
  $106 = (+($105|0));
  $107 = (+Math_abs((+$106)));
  $108 = $107 + 2.0;
  $109 = $104 * $108;
  $110 = $109 * 2.2204460492503131E-16;
  $111 = $14;
  $112 = (+Math_abs((+$111)));
  $113 = $110 * $112;
  $114 = $12;
  $115 = ((($114)) + 8|0);
  $116 = +HEAPF64[$115>>3];
  $117 = $116 + $113;
  HEAPF64[$115>>3] = $117;
  $118 = $12;
  $119 = +HEAPF64[$118>>3];
  $120 = (+Math_abs((+$119)));
  $121 = 4.4408920985006262E-16 * $120;
  $122 = $12;
  $123 = ((($122)) + 8|0);
  $124 = +HEAPF64[$123>>3];
  $125 = $124 + $121;
  HEAPF64[$123>>3] = $125;
  $126 = $12;
  $127 = ((($126)) + 8|0);
  $128 = +HEAPF64[$127>>3];
  $129 = $128 * 2.0;
  HEAPF64[$127>>3] = $129;
  $130 = $19;
  $6 = $130;
  $271 = $6;
  STACKTOP = sp;return ($271|0);
 }
 $131 = $7;
 $132 = (($131) - 2)|0;
 $22 = $132;
 $133 = $22;
 $134 = ($133|0)<(0);
 if ($134) {
  $135 = $12;
  HEAPF64[$135>>3] = 0.0;
  $136 = $12;
  $137 = ((($136)) + 8|0);
  HEAPF64[$137>>3] = 0.0;
  $6 = 0;
  $271 = $6;
  STACKTOP = sp;return ($271|0);
 }
 $27 = 1.0;
 $28 = 0.0;
 $14 = 1.0;
 $15 = 0.0;
 $13 = 1;
 while(1) {
  $138 = $13;
  $139 = $22;
  $140 = ($138|0)<=($139|0);
  if (!($140)) {
   break;
  }
  $141 = $8;
  $142 = $9;
  $143 = $141 - $142;
  $144 = $13;
  $145 = (+($144|0));
  $146 = $143 + $145;
  $147 = $10;
  $148 = $146 * $147;
  $149 = $9;
  $150 = 1.0 - $149;
  $151 = $13;
  $152 = (+($151|0));
  $153 = $150 + $152;
  $154 = $13;
  $155 = (+($154|0));
  $156 = $153 * $155;
  $157 = $148 / $156;
  $29 = $157;
  $158 = $29;
  $159 = $27;
  $160 = $159 * $158;
  $27 = $160;
  $161 = $28;
  $162 = $29;
  $163 = (+Math_abs((+$162)));
  $164 = $161 * $163;
  $165 = $27;
  $166 = (+Math_abs((+$165)));
  $167 = $166 * 8.0;
  $168 = $167 * 2.0;
  $169 = $168 * 2.2204460492503131E-16;
  $170 = $164 + $169;
  $171 = $28;
  $172 = $171 + $170;
  $28 = $172;
  $173 = $27;
  $174 = $14;
  $175 = $174 + $173;
  $14 = $175;
  $176 = $28;
  $177 = $15;
  $178 = $177 + $176;
  $15 = $178;
  $179 = $13;
  $180 = (($179) + 1)|0;
  $13 = $180;
 }
 $181 = $9;
 $182 = $181 - 1.0;
 $183 = (_gsl_sf_gamma_e($182,$23)|0);
 $25 = $183;
 $184 = $8;
 $185 = (_gsl_sf_gammainv_e($184,$24)|0);
 $26 = $185;
 $186 = $25;
 $187 = ($186|0)==(0);
 if ($187) {
  $188 = $10;
  $189 = $7;
  $190 = (1 - ($189))|0;
  $191 = (_gsl_sf_pow_int_e($188,$190,$30)|0);
  $31 = $191;
  $192 = +HEAPF64[$30>>3];
  $193 = $11;
  $194 = $192 * $193;
  $32 = $194;
  $195 = ((($30)) + 8|0);
  $196 = +HEAPF64[$195>>3];
  $197 = $11;
  $198 = (+Math_abs((+$197)));
  $199 = $196 * $198;
  $200 = $32;
  $201 = (+Math_abs((+$200)));
  $202 = 4.4408920985006262E-16 * $201;
  $203 = $199 + $202;
  $33 = $203;
  $204 = +HEAPF64[$23>>3];
  $205 = +HEAPF64[$24>>3];
  $206 = $204 * $205;
  $207 = $32;
  $208 = $206 * $207;
  $34 = $208;
  $209 = ((($23)) + 8|0);
  $210 = +HEAPF64[$209>>3];
  $211 = +HEAPF64[$24>>3];
  $212 = $32;
  $213 = $211 * $212;
  $214 = (+Math_abs((+$213)));
  $215 = $210 * $214;
  $216 = ((($24)) + 8|0);
  $217 = +HEAPF64[$216>>3];
  $218 = +HEAPF64[$23>>3];
  $219 = $32;
  $220 = $218 * $219;
  $221 = (+Math_abs((+$220)));
  $222 = $217 * $221;
  $223 = $215 + $222;
  $224 = +HEAPF64[$23>>3];
  $225 = +HEAPF64[$24>>3];
  $226 = $224 * $225;
  $227 = (+Math_abs((+$226)));
  $228 = $33;
  $229 = $227 * $228;
  $230 = $223 + $229;
  $231 = $34;
  $232 = (+Math_abs((+$231)));
  $233 = 4.4408920985006262E-16 * $232;
  $234 = $230 + $233;
  $35 = $234;
  $235 = $14;
  $236 = $34;
  $237 = $235 * $236;
  $238 = $12;
  HEAPF64[$238>>3] = $237;
  $239 = $14;
  $240 = (+Math_abs((+$239)));
  $241 = $35;
  $242 = $240 * $241;
  $243 = $15;
  $244 = $34;
  $245 = (+Math_abs((+$244)));
  $246 = $243 * $245;
  $247 = $242 + $246;
  $248 = $12;
  $249 = ((($248)) + 8|0);
  HEAPF64[$249>>3] = $247;
  $250 = $22;
  $251 = (+($250|0));
  $252 = $251 + 2.0;
  $253 = 4.4408920985006262E-16 * $252;
  $254 = $12;
  $255 = +HEAPF64[$254>>3];
  $256 = (+Math_abs((+$255)));
  $257 = $253 * $256;
  $258 = $12;
  $259 = ((($258)) + 8|0);
  $260 = +HEAPF64[$259>>3];
  $261 = $260 + $257;
  HEAPF64[$259>>3] = $261;
  $262 = $12;
  $263 = ((($262)) + 8|0);
  $264 = +HEAPF64[$263>>3];
  $265 = $264 * 2.0;
  HEAPF64[$263>>3] = $265;
  $266 = $31;
  $6 = $266;
  $271 = $6;
  STACKTOP = sp;return ($271|0);
 } else {
  $267 = $12;
  HEAPF64[$267>>3] = 0.0;
  $268 = $12;
  $269 = ((($268)) + 8|0);
  HEAPF64[$269>>3] = 0.0;
  $270 = $25;
  $6 = $270;
  $271 = $6;
  STACKTOP = sp;return ($271|0);
 }
 return (0)|0;
}
function _hyperg_U_infinite_sum_stable($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0;
 var $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $21 = sp + 240|0;
 $22 = sp + 224|0;
 $29 = sp + 176|0;
 $30 = sp + 160|0;
 $31 = sp + 144|0;
 $37 = sp + 128|0;
 $38 = sp + 112|0;
 $49 = sp + 48|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $8;
 $18 = 4.4408920985006262E-16;
 $57 = $10;
 $58 = ($57|0)<(1);
 $59 = $10;
 $60 = (1 - ($59))|0;
 $61 = $58 ? $60 : 0;
 $19 = $61;
 $62 = $19;
 $63 = (+($62|0));
 $20 = $63;
 $64 = $11;
 $65 = 1.0 + $64;
 $66 = $13;
 $67 = $65 - $66;
 $68 = (_gsl_sf_gammainv_e($67,$21)|0);
 $23 = $68;
 $69 = $15;
 $70 = $19;
 $71 = (_gsl_sf_pow_int_e($69,$70,$22)|0);
 $24 = $71;
 $72 = $14;
 $73 = $72 * 3.1415926535897931;
 $25 = $73;
 $74 = $25;
 $75 = $74 != 0.0;
 if ($75) {
  $76 = $25;
  $77 = $25;
  $78 = (+Math_sin((+$77)));
  $79 = $76 / $78;
  $80 = $79;
 } else {
  $80 = 1.0;
 }
 $26 = $80;
 $81 = $26;
 $82 = $10;
 $83 = $82 & 1;
 $84 = ($83|0)!=(0);
 $85 = $84 ? -1.0 : 1.0;
 $86 = $81 * $85;
 $87 = +HEAPF64[$21>>3];
 $88 = $86 * $87;
 $89 = +HEAPF64[$22>>3];
 $90 = $88 * $89;
 $27 = $90;
 $91 = +HEAPF64[$21>>3];
 $92 = (+Math_abs((+$91)));
 $93 = ((($22)) + 8|0);
 $94 = +HEAPF64[$93>>3];
 $95 = $92 * $94;
 $96 = +HEAPF64[$22>>3];
 $97 = (+Math_abs((+$96)));
 $98 = ((($21)) + 8|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $97 * $99;
 $101 = $95 + $100;
 $102 = $27;
 $103 = (+Math_abs((+$102)));
 $104 = 4.4408920985006262E-16 * $103;
 $105 = $101 + $104;
 $28 = $105;
 $106 = $11;
 $107 = $20;
 $108 = (_gsl_sf_poch_e($106,$107,$29)|0);
 $32 = $108;
 $109 = $20;
 $110 = $109 + 1.0;
 $111 = (_gsl_sf_gammainv_e($110,$30)|0);
 $33 = $111;
 $112 = $12;
 $113 = $20;
 $114 = $112 + $113;
 $115 = (_gsl_sf_gammainv_e($114,$31)|0);
 $34 = $115;
 $116 = $23;
 $117 = ($116|0)!=(0);
 do {
  if ($117) {
   $118 = $23;
   $126 = $118;
  } else {
   $119 = $33;
   $120 = ($119|0)!=(0);
   if ($120) {
    $121 = $33;
    $126 = $121;
    break;
   } else {
    $122 = $34;
    $123 = ($122|0)!=(0);
    $124 = $34;
    $125 = $123 ? $124 : 0;
    $126 = $125;
    break;
   }
  }
 } while(0);
 $35 = $126;
 $127 = $35;
 $128 = ($127|0)!=(0);
 do {
  if ($128) {
   $129 = $35;
   $137 = $129;
  } else {
   $130 = $32;
   $131 = ($130|0)!=(0);
   if ($131) {
    $132 = $32;
    $137 = $132;
    break;
   } else {
    $133 = $24;
    $134 = ($133|0)!=(0);
    $135 = $24;
    $136 = $134 ? $135 : 0;
    $137 = $136;
    break;
   }
  }
 } while(0);
 $36 = $137;
 $138 = $11;
 $139 = $20;
 $140 = $14;
 $141 = $139 - $140;
 $142 = (_gsl_sf_poch_e($138,$141,$37)|0);
 $39 = $142;
 $143 = $20;
 $144 = $143 + 1.0;
 $145 = $14;
 $146 = $144 - $145;
 $147 = (_gsl_sf_gammainv_e($146,$38)|0);
 $40 = $147;
 $148 = $36;
 $149 = ($148|0)!=(0);
 do {
  if ($149) {
   $150 = $36;
   $158 = $150;
  } else {
   $151 = $39;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $39;
    $158 = $153;
    break;
   } else {
    $154 = $40;
    $155 = ($154|0)!=(0);
    $156 = $40;
    $157 = $155 ? $156 : 0;
    $158 = $157;
    break;
   }
  }
 } while(0);
 $41 = $158;
 $159 = $27;
 $160 = +HEAPF64[$37>>3];
 $161 = $159 * $160;
 $162 = +HEAPF64[$31>>3];
 $163 = $161 * $162;
 $164 = +HEAPF64[$38>>3];
 $165 = $163 * $164;
 $42 = $165;
 $166 = $27;
 $167 = +HEAPF64[$37>>3];
 $168 = $166 * $167;
 $169 = +HEAPF64[$31>>3];
 $170 = $168 * $169;
 $171 = (+Math_abs((+$170)));
 $172 = ((($38)) + 8|0);
 $173 = +HEAPF64[$172>>3];
 $174 = $171 * $173;
 $175 = $27;
 $176 = +HEAPF64[$37>>3];
 $177 = $175 * $176;
 $178 = +HEAPF64[$38>>3];
 $179 = $177 * $178;
 $180 = (+Math_abs((+$179)));
 $181 = ((($31)) + 8|0);
 $182 = +HEAPF64[$181>>3];
 $183 = $180 * $182;
 $184 = $174 + $183;
 $185 = $27;
 $186 = +HEAPF64[$31>>3];
 $187 = $185 * $186;
 $188 = +HEAPF64[$38>>3];
 $189 = $187 * $188;
 $190 = (+Math_abs((+$189)));
 $191 = ((($37)) + 8|0);
 $192 = +HEAPF64[$191>>3];
 $193 = $190 * $192;
 $194 = $184 + $193;
 $195 = +HEAPF64[$37>>3];
 $196 = +HEAPF64[$31>>3];
 $197 = $195 * $196;
 $198 = +HEAPF64[$38>>3];
 $199 = $197 * $198;
 $200 = (+Math_abs((+$199)));
 $201 = $28;
 $202 = $200 * $201;
 $203 = $194 + $202;
 $204 = $42;
 $205 = (+Math_abs((+$204)));
 $206 = 4.4408920985006262E-16 * $205;
 $207 = $203 + $206;
 $43 = $207;
 $208 = $13;
 $209 = $20;
 $210 = $208 + $209;
 $211 = (_gsl_sf_gammainv_e($210,$49)|0);
 $50 = $211;
 $212 = $27;
 $213 = +HEAPF64[$29>>3];
 $214 = $212 * $213;
 $215 = +HEAPF64[$49>>3];
 $216 = $214 * $215;
 $217 = +HEAPF64[$30>>3];
 $218 = $216 * $217;
 $219 = $14;
 $220 = $218 / $219;
 $51 = $220;
 $221 = $27;
 $222 = +HEAPF64[$29>>3];
 $223 = $221 * $222;
 $224 = +HEAPF64[$49>>3];
 $225 = $223 * $224;
 $226 = $14;
 $227 = $225 / $226;
 $228 = (+Math_abs((+$227)));
 $229 = ((($30)) + 8|0);
 $230 = +HEAPF64[$229>>3];
 $231 = $228 * $230;
 $232 = $27;
 $233 = +HEAPF64[$29>>3];
 $234 = $232 * $233;
 $235 = +HEAPF64[$30>>3];
 $236 = $234 * $235;
 $237 = $14;
 $238 = $236 / $237;
 $239 = (+Math_abs((+$238)));
 $240 = ((($49)) + 8|0);
 $241 = +HEAPF64[$240>>3];
 $242 = $239 * $241;
 $243 = $231 + $242;
 $244 = $27;
 $245 = +HEAPF64[$49>>3];
 $246 = $244 * $245;
 $247 = +HEAPF64[$30>>3];
 $248 = $246 * $247;
 $249 = $14;
 $250 = $248 / $249;
 $251 = (+Math_abs((+$250)));
 $252 = ((($29)) + 8|0);
 $253 = +HEAPF64[$252>>3];
 $254 = $251 * $253;
 $255 = $243 + $254;
 $256 = +HEAPF64[$29>>3];
 $257 = +HEAPF64[$49>>3];
 $258 = $256 * $257;
 $259 = +HEAPF64[$30>>3];
 $260 = $258 * $259;
 $261 = $14;
 $262 = $260 / $261;
 $263 = (+Math_abs((+$262)));
 $264 = $28;
 $265 = $263 * $264;
 $266 = $255 + $265;
 $267 = $51;
 $268 = (+Math_abs((+$267)));
 $269 = 4.4408920985006262E-16 * $268;
 $270 = $266 + $269;
 $52 = $270;
 $271 = $41;
 $272 = ($271|0)!=(0);
 if ($272) {
  $273 = $41;
  $278 = $273;
 } else {
  $274 = $50;
  $275 = ($274|0)!=(0);
  $276 = $50;
  $277 = $275 ? $276 : 0;
  $278 = $277;
 }
 $41 = $278;
 $279 = $16;
 $280 = $42;
 $281 = $279 * $280;
 $282 = $14;
 $283 = $281 / $282;
 $42 = $283;
 $284 = $16;
 $285 = $14;
 $286 = $284 / $285;
 $287 = (+Math_abs((+$286)));
 $288 = $43;
 $289 = $287 * $288;
 $290 = $42;
 $291 = (+Math_abs((+$290)));
 $292 = 8.8817841970012523E-16 * $291;
 $293 = $289 + $292;
 $43 = $293;
 $294 = +HEAPF64[$7>>3];
 $295 = $51;
 $296 = $294 + $295;
 $297 = $42;
 $298 = $296 - $297;
 $45 = $298;
 $299 = ((($7)) + 8|0);
 $300 = +HEAPF64[$299>>3];
 $301 = $52;
 $302 = $300 + $301;
 $303 = $43;
 $304 = $302 + $303;
 $305 = +HEAPF64[$7>>3];
 $306 = (+Math_abs((+$305)));
 $307 = $51;
 $308 = (+Math_abs((+$307)));
 $309 = $306 + $308;
 $310 = $42;
 $311 = (+Math_abs((+$310)));
 $312 = $309 + $311;
 $313 = 4.4408920985006262E-16 * $312;
 $314 = $304 + $313;
 $46 = $314;
 $44 = 1;
 while(1) {
  $315 = $44;
  $316 = ($315|0)<(2000);
  if (!($316)) {
   break;
  }
  $317 = $19;
  $318 = $44;
  $319 = (($317) + ($318))|0;
  $320 = (+($319|0));
  $53 = $320;
  $321 = $19;
  $322 = $44;
  $323 = (($321) + ($322))|0;
  $324 = (($323) - 1)|0;
  $325 = (+($324|0));
  $54 = $325;
  $326 = $11;
  $327 = $54;
  $328 = $326 + $327;
  $329 = $15;
  $330 = $328 * $329;
  $331 = $13;
  $332 = $54;
  $333 = $331 + $332;
  $334 = $53;
  $335 = $333 * $334;
  $336 = $330 / $335;
  $55 = $336;
  $337 = $11;
  $338 = $54;
  $339 = $337 + $338;
  $340 = $14;
  $341 = $339 - $340;
  $342 = $15;
  $343 = $341 * $342;
  $344 = $12;
  $345 = $54;
  $346 = $344 + $345;
  $347 = $53;
  $348 = $14;
  $349 = $347 - $348;
  $350 = $346 * $349;
  $351 = $343 / $350;
  $56 = $351;
  $352 = $55;
  $353 = $51;
  $354 = $353 * $352;
  $51 = $354;
  $355 = $55;
  $356 = (+Math_abs((+$355)));
  $357 = $52;
  $358 = $356 * $357;
  $359 = $52;
  $360 = $359 + $358;
  $52 = $360;
  $361 = $56;
  $362 = $42;
  $363 = $362 * $361;
  $42 = $363;
  $364 = $56;
  $365 = (+Math_abs((+$364)));
  $366 = $43;
  $367 = $365 * $366;
  $368 = $43;
  $369 = $368 + $367;
  $43 = $369;
  $370 = $51;
  $371 = $42;
  $372 = $370 - $371;
  $47 = $372;
  $373 = $52;
  $374 = $43;
  $375 = $373 + $374;
  $48 = $375;
  $376 = $47;
  $377 = $45;
  $378 = $377 + $376;
  $45 = $378;
  $379 = $48;
  $380 = $46;
  $381 = $380 + $379;
  $46 = $381;
  $382 = $47;
  $383 = (+Math_abs((+$382)));
  $384 = $45;
  $385 = (+Math_abs((+$384)));
  $386 = 4.4408920985006262E-16 * $385;
  $387 = $383 < $386;
  if ($387) {
   break;
  }
  $388 = $44;
  $389 = (($388) + 1)|0;
  $44 = $389;
 }
 $390 = $45;
 $391 = $17;
 HEAPF64[$391>>3] = $390;
 $392 = $46;
 $393 = 2.0 * $392;
 $394 = $17;
 $395 = ((($394)) + 8|0);
 HEAPF64[$395>>3] = $393;
 $396 = $47;
 $397 = (+Math_abs((+$396)));
 $398 = 2.0 * $397;
 $399 = $17;
 $400 = ((($399)) + 8|0);
 $401 = +HEAPF64[$400>>3];
 $402 = $401 + $398;
 HEAPF64[$400>>3] = $402;
 $403 = $44;
 $404 = (+($403|0));
 $405 = $404 + 2.0;
 $406 = 8.8817841970012523E-16 * $405;
 $407 = $45;
 $408 = (+Math_abs((+$407)));
 $409 = $406 * $408;
 $410 = $17;
 $411 = ((($410)) + 8|0);
 $412 = +HEAPF64[$411>>3];
 $413 = $412 + $409;
 HEAPF64[$411>>3] = $413;
 $414 = $17;
 $415 = ((($414)) + 8|0);
 $416 = +HEAPF64[$415>>3];
 $417 = $416 * 2.0;
 HEAPF64[$415>>3] = $417;
 $418 = $44;
 $419 = ($418|0)>=(2000);
 if ($419) {
  _gsl_error(83691,83551,438,11);
  $9 = 11;
  $421 = $9;
  STACKTOP = sp;return ($421|0);
 } else {
  $420 = $41;
  $9 = $420;
  $421 = $9;
  STACKTOP = sp;return ($421|0);
 }
 return (0)|0;
}
function _hyperg_U_infinite_sum_simple($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0;
 var $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0;
 var $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0.0;
 var $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0.0, $460 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $21 = sp + 248|0;
 $27 = sp + 200|0;
 $28 = sp + 184|0;
 $29 = sp + 168|0;
 $35 = sp + 152|0;
 $36 = sp + 136|0;
 $48 = sp + 64|0;
 $49 = sp + 48|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $8;
 $18 = 4.4408920985006262E-16;
 $58 = $10;
 $59 = ($58|0)<(1);
 $60 = $10;
 $61 = (1 - ($60))|0;
 $62 = $59 ? $61 : 0;
 $19 = $62;
 $63 = $19;
 $64 = (+($63|0));
 $20 = $64;
 $65 = $15;
 $66 = $19;
 $67 = (_gsl_sf_pow_int_e($65,$66,$21)|0);
 $22 = $67;
 $68 = $14;
 $69 = $68 * 3.1415926535897931;
 $23 = $69;
 $70 = $23;
 $71 = $70 != 0.0;
 if ($71) {
  $72 = $23;
  $73 = $23;
  $74 = (+Math_sin((+$73)));
  $75 = $72 / $74;
  $76 = $75;
 } else {
  $76 = 1.0;
 }
 $24 = $76;
 $77 = $24;
 $78 = $10;
 $79 = $78 & 1;
 $80 = ($79|0)!=(0);
 $81 = $80 ? -1.0 : 1.0;
 $82 = $77 * $81;
 $83 = +HEAPF64[$21>>3];
 $84 = $82 * $83;
 $25 = $84;
 $85 = ((($21)) + 8|0);
 $86 = +HEAPF64[$85>>3];
 $87 = (+Math_abs((+$86)));
 $88 = $25;
 $89 = (+Math_abs((+$88)));
 $90 = 4.4408920985006262E-16 * $89;
 $91 = $87 + $90;
 $26 = $91;
 $92 = $11;
 $93 = $20;
 $94 = (_gsl_sf_poch_e($92,$93,$27)|0);
 $30 = $94;
 $95 = $20;
 $96 = $95 + 1.0;
 $97 = (_gsl_sf_gammainv_e($96,$28)|0);
 $31 = $97;
 $98 = $12;
 $99 = $20;
 $100 = $98 + $99;
 $101 = (_gsl_sf_gammainv_e($100,$29)|0);
 $32 = $101;
 $102 = $31;
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = $31;
  $109 = $104;
 } else {
  $105 = $32;
  $106 = ($105|0)!=(0);
  $107 = $32;
  $108 = $106 ? $107 : 0;
  $109 = $108;
 }
 $33 = $109;
 $110 = $33;
 $111 = ($110|0)!=(0);
 do {
  if ($111) {
   $112 = $33;
   $120 = $112;
  } else {
   $113 = $30;
   $114 = ($113|0)!=(0);
   if ($114) {
    $115 = $30;
    $120 = $115;
    break;
   } else {
    $116 = $22;
    $117 = ($116|0)!=(0);
    $118 = $22;
    $119 = $117 ? $118 : 0;
    $120 = $119;
    break;
   }
  }
 } while(0);
 $34 = $120;
 $121 = $11;
 $122 = $20;
 $123 = $14;
 $124 = $122 - $123;
 $125 = (_gsl_sf_poch_e($121,$124,$35)|0);
 $37 = $125;
 $126 = $20;
 $127 = $126 + 1.0;
 $128 = $14;
 $129 = $127 - $128;
 $130 = (_gsl_sf_gammainv_e($129,$36)|0);
 $38 = $130;
 $131 = $34;
 $132 = ($131|0)!=(0);
 do {
  if ($132) {
   $133 = $34;
   $141 = $133;
  } else {
   $134 = $37;
   $135 = ($134|0)!=(0);
   if ($135) {
    $136 = $37;
    $141 = $136;
    break;
   } else {
    $137 = $38;
    $138 = ($137|0)!=(0);
    $139 = $38;
    $140 = $138 ? $139 : 0;
    $141 = $140;
    break;
   }
  }
 } while(0);
 $39 = $141;
 $142 = $24;
 $143 = $10;
 $144 = $143 & 1;
 $145 = ($144|0)!=(0);
 $146 = $145 ? -1.0 : 1.0;
 $147 = $142 * $146;
 $148 = +HEAPF64[$21>>3];
 $149 = $147 * $148;
 $150 = $11;
 $151 = 1.0 + $150;
 $152 = $13;
 $153 = $151 - $152;
 $154 = $20;
 $155 = $154 - 1.0;
 $156 = $13;
 $157 = $155 + $156;
 $158 = $14;
 $159 = $157 - $158;
 $160 = (+_gsl_sf_poch($153,$159));
 $161 = $149 * $160;
 $162 = $11;
 $163 = (+_gsl_sf_gammainv($162));
 $164 = $161 * $163;
 $40 = $164;
 $165 = $40;
 $166 = +HEAPF64[$29>>3];
 $167 = $165 * $166;
 $168 = +HEAPF64[$36>>3];
 $169 = $167 * $168;
 $41 = $169;
 $170 = $25;
 $171 = +HEAPF64[$35>>3];
 $172 = $170 * $171;
 $173 = +HEAPF64[$29>>3];
 $174 = $172 * $173;
 $175 = (+Math_abs((+$174)));
 $176 = ((($36)) + 8|0);
 $177 = +HEAPF64[$176>>3];
 $178 = $175 * $177;
 $179 = $25;
 $180 = +HEAPF64[$35>>3];
 $181 = $179 * $180;
 $182 = +HEAPF64[$36>>3];
 $183 = $181 * $182;
 $184 = (+Math_abs((+$183)));
 $185 = ((($29)) + 8|0);
 $186 = +HEAPF64[$185>>3];
 $187 = $184 * $186;
 $188 = $178 + $187;
 $189 = $25;
 $190 = +HEAPF64[$29>>3];
 $191 = $189 * $190;
 $192 = +HEAPF64[$36>>3];
 $193 = $191 * $192;
 $194 = (+Math_abs((+$193)));
 $195 = ((($35)) + 8|0);
 $196 = +HEAPF64[$195>>3];
 $197 = $194 * $196;
 $198 = $188 + $197;
 $199 = +HEAPF64[$35>>3];
 $200 = +HEAPF64[$29>>3];
 $201 = $199 * $200;
 $202 = +HEAPF64[$36>>3];
 $203 = $201 * $202;
 $204 = (+Math_abs((+$203)));
 $205 = $26;
 $206 = $204 * $205;
 $207 = $198 + $206;
 $208 = $41;
 $209 = (+Math_abs((+$208)));
 $210 = 4.4408920985006262E-16 * $209;
 $211 = $207 + $210;
 $42 = $211;
 $212 = $11;
 $213 = 1.0 + $212;
 $214 = $13;
 $215 = $213 - $214;
 $216 = (_gsl_sf_gammainv_e($215,$48)|0);
 $50 = $216;
 $217 = $13;
 $218 = $20;
 $219 = $217 + $218;
 $220 = (_gsl_sf_gammainv_e($219,$49)|0);
 $51 = $220;
 $221 = $25;
 $222 = +HEAPF64[$48>>3];
 $223 = $221 * $222;
 $224 = +HEAPF64[$27>>3];
 $225 = $223 * $224;
 $226 = +HEAPF64[$49>>3];
 $227 = $225 * $226;
 $228 = +HEAPF64[$28>>3];
 $229 = $227 * $228;
 $230 = $14;
 $231 = $229 / $230;
 $52 = $231;
 $232 = $25;
 $233 = +HEAPF64[$27>>3];
 $234 = $232 * $233;
 $235 = +HEAPF64[$49>>3];
 $236 = $234 * $235;
 $237 = +HEAPF64[$28>>3];
 $238 = $236 * $237;
 $239 = $14;
 $240 = $238 / $239;
 $241 = (+Math_abs((+$240)));
 $242 = ((($48)) + 8|0);
 $243 = +HEAPF64[$242>>3];
 $244 = $241 * $243;
 $245 = $25;
 $246 = +HEAPF64[$48>>3];
 $247 = $245 * $246;
 $248 = +HEAPF64[$49>>3];
 $249 = $247 * $248;
 $250 = +HEAPF64[$28>>3];
 $251 = $249 * $250;
 $252 = $14;
 $253 = $251 / $252;
 $254 = (+Math_abs((+$253)));
 $255 = ((($27)) + 8|0);
 $256 = +HEAPF64[$255>>3];
 $257 = $254 * $256;
 $258 = $244 + $257;
 $259 = $25;
 $260 = +HEAPF64[$48>>3];
 $261 = $259 * $260;
 $262 = +HEAPF64[$27>>3];
 $263 = $261 * $262;
 $264 = +HEAPF64[$28>>3];
 $265 = $263 * $264;
 $266 = $14;
 $267 = $265 / $266;
 $268 = (+Math_abs((+$267)));
 $269 = ((($49)) + 8|0);
 $270 = +HEAPF64[$269>>3];
 $271 = $268 * $270;
 $272 = $258 + $271;
 $273 = $25;
 $274 = +HEAPF64[$48>>3];
 $275 = $273 * $274;
 $276 = +HEAPF64[$27>>3];
 $277 = $275 * $276;
 $278 = +HEAPF64[$49>>3];
 $279 = $277 * $278;
 $280 = $14;
 $281 = $279 / $280;
 $282 = (+Math_abs((+$281)));
 $283 = ((($28)) + 8|0);
 $284 = +HEAPF64[$283>>3];
 $285 = $282 * $284;
 $286 = $272 + $285;
 $287 = +HEAPF64[$27>>3];
 $288 = +HEAPF64[$48>>3];
 $289 = $287 * $288;
 $290 = +HEAPF64[$49>>3];
 $291 = $289 * $290;
 $292 = +HEAPF64[$28>>3];
 $293 = $291 * $292;
 $294 = $14;
 $295 = $293 / $294;
 $296 = (+Math_abs((+$295)));
 $297 = $26;
 $298 = $296 * $297;
 $299 = $286 + $298;
 $300 = $52;
 $301 = (+Math_abs((+$300)));
 $302 = 4.4408920985006262E-16 * $301;
 $303 = $299 + $302;
 $53 = $303;
 $304 = $39;
 $305 = ($304|0)!=(0);
 do {
  if ($305) {
   $306 = $39;
   $314 = $306;
  } else {
   $307 = $50;
   $308 = ($307|0)!=(0);
   if ($308) {
    $309 = $50;
    $314 = $309;
    break;
   } else {
    $310 = $51;
    $311 = ($310|0)!=(0);
    $312 = $51;
    $313 = $311 ? $312 : 0;
    $314 = $313;
    break;
   }
  }
 } while(0);
 $39 = $314;
 $315 = $16;
 $316 = $41;
 $317 = $315 * $316;
 $318 = $14;
 $319 = $317 / $318;
 $41 = $319;
 $320 = $16;
 $321 = $14;
 $322 = $320 / $321;
 $323 = (+Math_abs((+$322)));
 $324 = $42;
 $325 = $323 * $324;
 $326 = $41;
 $327 = (+Math_abs((+$326)));
 $328 = 8.8817841970012523E-16 * $327;
 $329 = $325 + $328;
 $42 = $329;
 $330 = +HEAPF64[$7>>3];
 $331 = $52;
 $332 = $330 + $331;
 $333 = $41;
 $334 = $332 - $333;
 $44 = $334;
 $335 = ((($7)) + 8|0);
 $336 = +HEAPF64[$335>>3];
 $337 = $53;
 $338 = $336 + $337;
 $339 = $42;
 $340 = $338 + $339;
 $341 = +HEAPF64[$7>>3];
 $342 = (+Math_abs((+$341)));
 $343 = $52;
 $344 = (+Math_abs((+$343)));
 $345 = $342 + $344;
 $346 = $41;
 $347 = (+Math_abs((+$346)));
 $348 = $345 + $347;
 $349 = 4.4408920985006262E-16 * $348;
 $350 = $340 + $349;
 $45 = $350;
 $43 = 1;
 while(1) {
  $351 = $43;
  $352 = ($351|0)<(2000);
  if (!($352)) {
   break;
  }
  $353 = $19;
  $354 = $43;
  $355 = (($353) + ($354))|0;
  $356 = (+($355|0));
  $54 = $356;
  $357 = $19;
  $358 = $43;
  $359 = (($357) + ($358))|0;
  $360 = (($359) - 1)|0;
  $361 = (+($360|0));
  $55 = $361;
  $362 = $11;
  $363 = $55;
  $364 = $362 + $363;
  $365 = $15;
  $366 = $364 * $365;
  $367 = $13;
  $368 = $55;
  $369 = $367 + $368;
  $370 = $54;
  $371 = $369 * $370;
  $372 = $366 / $371;
  $56 = $372;
  $373 = $11;
  $374 = $55;
  $375 = $373 + $374;
  $376 = $14;
  $377 = $375 - $376;
  $378 = $15;
  $379 = $377 * $378;
  $380 = $12;
  $381 = $55;
  $382 = $380 + $381;
  $383 = $54;
  $384 = $14;
  $385 = $383 - $384;
  $386 = $382 * $385;
  $387 = $379 / $386;
  $57 = $387;
  $388 = $56;
  $389 = $52;
  $390 = $389 * $388;
  $52 = $390;
  $391 = $56;
  $392 = (+Math_abs((+$391)));
  $393 = $53;
  $394 = $392 * $393;
  $395 = $53;
  $396 = $395 + $394;
  $53 = $396;
  $397 = $57;
  $398 = $41;
  $399 = $398 * $397;
  $41 = $399;
  $400 = $57;
  $401 = (+Math_abs((+$400)));
  $402 = $42;
  $403 = $401 * $402;
  $404 = $42;
  $405 = $404 + $403;
  $42 = $405;
  $406 = $52;
  $407 = $41;
  $408 = $406 - $407;
  $46 = $408;
  $409 = $53;
  $410 = $42;
  $411 = $409 + $410;
  $47 = $411;
  $412 = $46;
  $413 = $44;
  $414 = $413 + $412;
  $44 = $414;
  $415 = $47;
  $416 = $45;
  $417 = $416 + $415;
  $45 = $417;
  $418 = $46;
  $419 = (_gsl_finite($418)|0);
  $420 = ($419|0)!=(0);
  if (!($420)) {
   break;
  }
  $421 = $46;
  $422 = (+Math_abs((+$421)));
  $423 = $44;
  $424 = (+Math_abs((+$423)));
  $425 = 4.4408920985006262E-16 * $424;
  $426 = $422 < $425;
  if ($426) {
   break;
  }
  $427 = $43;
  $428 = (($427) + 1)|0;
  $43 = $428;
 }
 $429 = $44;
 $430 = $17;
 HEAPF64[$430>>3] = $429;
 $431 = $45;
 $432 = 2.0 * $431;
 $433 = $17;
 $434 = ((($433)) + 8|0);
 HEAPF64[$434>>3] = $432;
 $435 = $46;
 $436 = (+Math_abs((+$435)));
 $437 = 2.0 * $436;
 $438 = $17;
 $439 = ((($438)) + 8|0);
 $440 = +HEAPF64[$439>>3];
 $441 = $440 + $437;
 HEAPF64[$439>>3] = $441;
 $442 = $43;
 $443 = (+($442|0));
 $444 = $443 + 2.0;
 $445 = 8.8817841970012523E-16 * $444;
 $446 = $44;
 $447 = (+Math_abs((+$446)));
 $448 = $445 * $447;
 $449 = $17;
 $450 = ((($449)) + 8|0);
 $451 = +HEAPF64[$450>>3];
 $452 = $451 + $448;
 HEAPF64[$450>>3] = $452;
 $453 = $17;
 $454 = ((($453)) + 8|0);
 $455 = +HEAPF64[$454>>3];
 $456 = $455 * 2.0;
 HEAPF64[$454>>3] = $456;
 $457 = $43;
 $458 = ($457|0)>=(2000);
 if ($458) {
  _gsl_error(83691,83551,537,11);
  $9 = 11;
  $460 = $9;
  STACKTOP = sp;return ($460|0);
 } else {
  $459 = $39;
  $9 = $459;
  $460 = $9;
  STACKTOP = sp;return ($460|0);
 }
 return (0)|0;
}
function _hyperg_U_infinite_sum_improved($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0.0, $28 = 0.0, $280 = 0;
 var $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0;
 var $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0;
 var $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0;
 var $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0;
 var $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0;
 var $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0;
 var $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0;
 var $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0;
 var $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0;
 var $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0;
 var $572 = 0.0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0;
 var $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0, $597 = 0, $598 = 0.0, $599 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0, $602 = 0, $603 = 0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0;
 var $609 = 0.0, $61 = 0.0, $610 = 0.0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0, $619 = 0, $62 = 0.0, $620 = 0.0, $621 = 0.0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $22 = sp + 360|0;
 $23 = sp + 344|0;
 $30 = sp + 296|0;
 $31 = sp + 280|0;
 $32 = sp + 264|0;
 $38 = sp + 248|0;
 $39 = sp + 232|0;
 $46 = sp + 200|0;
 $47 = sp + 184|0;
 $48 = sp + 168|0;
 $58 = sp + 104|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $8;
 $18 = 4.4408920985006262E-16;
 $73 = $15;
 $74 = (+Math_log((+$73)));
 $19 = $74;
 $75 = $10;
 $76 = ($75|0)<(1);
 $77 = $10;
 $78 = (1 - ($77))|0;
 $79 = $76 ? $78 : 0;
 $20 = $79;
 $80 = $20;
 $81 = (+($80|0));
 $21 = $81;
 $82 = $11;
 $83 = 1.0 + $82;
 $84 = $13;
 $85 = $83 - $84;
 $86 = (_gsl_sf_gammainv_e($85,$22)|0);
 $24 = $86;
 $87 = $15;
 $88 = $20;
 $89 = (_gsl_sf_pow_int_e($87,$88,$23)|0);
 $25 = $89;
 $90 = $14;
 $91 = $90 * 3.1415926535897931;
 $26 = $91;
 $92 = $26;
 $93 = $92 != 0.0;
 if ($93) {
  $94 = $26;
  $95 = $26;
  $96 = (+Math_sin((+$95)));
  $97 = $94 / $96;
  $98 = $97;
 } else {
  $98 = 1.0;
 }
 $27 = $98;
 $99 = $27;
 $100 = $10;
 $101 = $100 & 1;
 $102 = ($101|0)!=(0);
 $103 = $102 ? -1.0 : 1.0;
 $104 = $99 * $103;
 $105 = +HEAPF64[$22>>3];
 $106 = $104 * $105;
 $107 = +HEAPF64[$23>>3];
 $108 = $106 * $107;
 $28 = $108;
 $109 = +HEAPF64[$22>>3];
 $110 = (+Math_abs((+$109)));
 $111 = ((($23)) + 8|0);
 $112 = +HEAPF64[$111>>3];
 $113 = $110 * $112;
 $114 = +HEAPF64[$23>>3];
 $115 = (+Math_abs((+$114)));
 $116 = ((($22)) + 8|0);
 $117 = +HEAPF64[$116>>3];
 $118 = $115 * $117;
 $119 = $113 + $118;
 $120 = $28;
 $121 = (+Math_abs((+$120)));
 $122 = 4.4408920985006262E-16 * $121;
 $123 = $119 + $122;
 $29 = $123;
 $124 = $11;
 $125 = $21;
 $126 = (_gsl_sf_poch_e($124,$125,$30)|0);
 $33 = $126;
 $127 = $21;
 $128 = $127 + 1.0;
 $129 = (_gsl_sf_gammainv_e($128,$31)|0);
 $34 = $129;
 $130 = $12;
 $131 = $21;
 $132 = $130 + $131;
 $133 = (_gsl_sf_gammainv_e($132,$32)|0);
 $35 = $133;
 $134 = $24;
 $135 = ($134|0)!=(0);
 do {
  if ($135) {
   $136 = $24;
   $144 = $136;
  } else {
   $137 = $34;
   $138 = ($137|0)!=(0);
   if ($138) {
    $139 = $34;
    $144 = $139;
    break;
   } else {
    $140 = $35;
    $141 = ($140|0)!=(0);
    $142 = $35;
    $143 = $141 ? $142 : 0;
    $144 = $143;
    break;
   }
  }
 } while(0);
 $36 = $144;
 $145 = $36;
 $146 = ($145|0)!=(0);
 do {
  if ($146) {
   $147 = $36;
   $155 = $147;
  } else {
   $148 = $33;
   $149 = ($148|0)!=(0);
   if ($149) {
    $150 = $33;
    $155 = $150;
    break;
   } else {
    $151 = $25;
    $152 = ($151|0)!=(0);
    $153 = $25;
    $154 = $152 ? $153 : 0;
    $155 = $154;
    break;
   }
  }
 } while(0);
 $37 = $155;
 $156 = $11;
 $157 = $21;
 $158 = $14;
 $159 = $157 - $158;
 $160 = (_gsl_sf_poch_e($156,$159,$38)|0);
 $40 = $160;
 $161 = $21;
 $162 = $161 + 1.0;
 $163 = $14;
 $164 = $162 - $163;
 $165 = (_gsl_sf_gammainv_e($164,$39)|0);
 $41 = $165;
 $166 = $37;
 $167 = ($166|0)!=(0);
 do {
  if ($167) {
   $168 = $37;
   $176 = $168;
  } else {
   $169 = $40;
   $170 = ($169|0)!=(0);
   if ($170) {
    $171 = $40;
    $176 = $171;
    break;
   } else {
    $172 = $41;
    $173 = ($172|0)!=(0);
    $174 = $41;
    $175 = $173 ? $174 : 0;
    $176 = $175;
    break;
   }
  }
 } while(0);
 $42 = $176;
 $177 = $28;
 $178 = +HEAPF64[$38>>3];
 $179 = $177 * $178;
 $180 = +HEAPF64[$32>>3];
 $181 = $179 * $180;
 $182 = +HEAPF64[$39>>3];
 $183 = $181 * $182;
 $43 = $183;
 $184 = $28;
 $185 = +HEAPF64[$38>>3];
 $186 = $184 * $185;
 $187 = +HEAPF64[$32>>3];
 $188 = $186 * $187;
 $189 = (+Math_abs((+$188)));
 $190 = ((($39)) + 8|0);
 $191 = +HEAPF64[$190>>3];
 $192 = $189 * $191;
 $193 = $28;
 $194 = +HEAPF64[$38>>3];
 $195 = $193 * $194;
 $196 = +HEAPF64[$39>>3];
 $197 = $195 * $196;
 $198 = (+Math_abs((+$197)));
 $199 = ((($32)) + 8|0);
 $200 = +HEAPF64[$199>>3];
 $201 = $198 * $200;
 $202 = $192 + $201;
 $203 = $28;
 $204 = +HEAPF64[$32>>3];
 $205 = $203 * $204;
 $206 = +HEAPF64[$39>>3];
 $207 = $205 * $206;
 $208 = (+Math_abs((+$207)));
 $209 = ((($38)) + 8|0);
 $210 = +HEAPF64[$209>>3];
 $211 = $208 * $210;
 $212 = $202 + $211;
 $213 = +HEAPF64[$38>>3];
 $214 = +HEAPF64[$32>>3];
 $215 = $213 * $214;
 $216 = +HEAPF64[$39>>3];
 $217 = $215 * $216;
 $218 = (+Math_abs((+$217)));
 $219 = $29;
 $220 = $218 * $219;
 $221 = $212 + $220;
 $222 = $43;
 $223 = (+Math_abs((+$222)));
 $224 = 4.4408920985006262E-16 * $223;
 $225 = $221 + $224;
 $44 = $225;
 $226 = $11;
 $227 = $21;
 $228 = $226 + $227;
 $229 = $14;
 $230 = - $229;
 $231 = (_gsl_sf_pochrel_e($228,$230,$46)|0);
 $49 = $231;
 $232 = $21;
 $233 = $232 + 1.0;
 $234 = $14;
 $235 = $233 - $234;
 $236 = $14;
 $237 = (_gsl_sf_pochrel_e($235,$236,$47)|0);
 $50 = $237;
 $238 = $13;
 $239 = $21;
 $240 = $238 + $239;
 $241 = $14;
 $242 = - $241;
 $243 = (_gsl_sf_pochrel_e($240,$242,$48)|0);
 $51 = $243;
 $244 = $14;
 $245 = +HEAPF64[$46>>3];
 $246 = $244 * $245;
 $247 = +HEAPF64[$47>>3];
 $248 = $246 * $247;
 $52 = $248;
 $249 = $14;
 $250 = (+Math_abs((+$249)));
 $251 = +HEAPF64[$46>>3];
 $252 = (+Math_abs((+$251)));
 $253 = $250 * $252;
 $254 = ((($47)) + 8|0);
 $255 = +HEAPF64[$254>>3];
 $256 = $253 * $255;
 $257 = $14;
 $258 = (+Math_abs((+$257)));
 $259 = +HEAPF64[$47>>3];
 $260 = (+Math_abs((+$259)));
 $261 = $258 * $260;
 $262 = ((($46)) + 8|0);
 $263 = +HEAPF64[$262>>3];
 $264 = $261 * $263;
 $265 = $256 + $264;
 $266 = $52;
 $267 = (+Math_abs((+$266)));
 $268 = 4.4408920985006262E-16 * $267;
 $269 = $265 + $268;
 $53 = $269;
 $270 = +HEAPF64[$48>>3];
 $271 = - $270;
 $272 = +HEAPF64[$46>>3];
 $273 = $271 + $272;
 $274 = +HEAPF64[$47>>3];
 $275 = $273 - $274;
 $276 = $52;
 $277 = $275 + $276;
 $54 = $277;
 $278 = ((($48)) + 8|0);
 $279 = +HEAPF64[$278>>3];
 $280 = ((($46)) + 8|0);
 $281 = +HEAPF64[$280>>3];
 $282 = $279 + $281;
 $283 = ((($47)) + 8|0);
 $284 = +HEAPF64[$283>>3];
 $285 = $282 + $284;
 $286 = $53;
 $287 = $285 + $286;
 $288 = $54;
 $289 = (+Math_abs((+$288)));
 $290 = 4.4408920985006262E-16 * $289;
 $291 = $287 + $290;
 $55 = $291;
 $292 = $28;
 $293 = +HEAPF64[$30>>3];
 $294 = $292 * $293;
 $295 = +HEAPF64[$32>>3];
 $296 = $294 * $295;
 $297 = +HEAPF64[$31>>3];
 $298 = $296 * $297;
 $299 = $54;
 $300 = $298 * $299;
 $56 = $300;
 $301 = $28;
 $302 = +HEAPF64[$30>>3];
 $303 = $301 * $302;
 $304 = +HEAPF64[$32>>3];
 $305 = $303 * $304;
 $306 = +HEAPF64[$31>>3];
 $307 = $305 * $306;
 $308 = (+Math_abs((+$307)));
 $309 = $55;
 $310 = $308 * $309;
 $311 = $28;
 $312 = +HEAPF64[$30>>3];
 $313 = $311 * $312;
 $314 = +HEAPF64[$32>>3];
 $315 = $313 * $314;
 $316 = $54;
 $317 = $315 * $316;
 $318 = (+Math_abs((+$317)));
 $319 = ((($31)) + 8|0);
 $320 = +HEAPF64[$319>>3];
 $321 = $318 * $320;
 $322 = $310 + $321;
 $323 = $28;
 $324 = +HEAPF64[$30>>3];
 $325 = $323 * $324;
 $326 = +HEAPF64[$31>>3];
 $327 = $325 * $326;
 $328 = $54;
 $329 = $327 * $328;
 $330 = (+Math_abs((+$329)));
 $331 = ((($32)) + 8|0);
 $332 = +HEAPF64[$331>>3];
 $333 = $330 * $332;
 $334 = $322 + $333;
 $335 = $28;
 $336 = +HEAPF64[$32>>3];
 $337 = $335 * $336;
 $338 = +HEAPF64[$31>>3];
 $339 = $337 * $338;
 $340 = $54;
 $341 = $339 * $340;
 $342 = (+Math_abs((+$341)));
 $343 = ((($30)) + 8|0);
 $344 = +HEAPF64[$343>>3];
 $345 = $342 * $344;
 $346 = $334 + $345;
 $347 = +HEAPF64[$30>>3];
 $348 = +HEAPF64[$32>>3];
 $349 = $347 * $348;
 $350 = +HEAPF64[$31>>3];
 $351 = $349 * $350;
 $352 = $54;
 $353 = $351 * $352;
 $354 = (+Math_abs((+$353)));
 $355 = $29;
 $356 = $354 * $355;
 $357 = $346 + $356;
 $358 = $56;
 $359 = (+Math_abs((+$358)));
 $360 = 4.4408920985006262E-16 * $359;
 $361 = $357 + $360;
 $57 = $361;
 $362 = $14;
 $363 = - $362;
 $364 = $19;
 $365 = $363 * $364;
 $366 = (_gsl_sf_exprel_e($365,$58)|0);
 $59 = $366;
 $367 = $19;
 $368 = +HEAPF64[$58>>3];
 $369 = $367 * $368;
 $60 = $369;
 $370 = $14;
 $371 = $19;
 $372 = $370 * $371;
 $373 = (+Math_abs((+$372)));
 $374 = 1.0 + $373;
 $375 = 4.4408920985006262E-16 * $374;
 $376 = +HEAPF64[$58>>3];
 $377 = (+Math_abs((+$376)));
 $378 = $375 * $377;
 $379 = $19;
 $380 = (+Math_abs((+$379)));
 $381 = ((($58)) + 8|0);
 $382 = +HEAPF64[$381>>3];
 $383 = $380 * $382;
 $384 = $378 + $383;
 $385 = $60;
 $386 = (+Math_abs((+$385)));
 $387 = 4.4408920985006262E-16 * $386;
 $388 = $384 + $387;
 $61 = $388;
 $389 = +HEAPF64[$7>>3];
 $390 = $56;
 $391 = $389 + $390;
 $392 = $60;
 $393 = $43;
 $394 = $392 * $393;
 $395 = $391 + $394;
 $62 = $395;
 $396 = ((($7)) + 8|0);
 $397 = +HEAPF64[$396>>3];
 $398 = $57;
 $399 = $397 + $398;
 $400 = $60;
 $401 = (+Math_abs((+$400)));
 $402 = $44;
 $403 = $401 * $402;
 $404 = $399 + $403;
 $405 = $61;
 $406 = $43;
 $407 = (+Math_abs((+$406)));
 $408 = $405 * $407;
 $409 = $404 + $408;
 $410 = $43;
 $411 = $19;
 $412 = $410 * $411;
 $413 = (+Math_abs((+$412)));
 $414 = ((($58)) + 8|0);
 $415 = +HEAPF64[$414>>3];
 $416 = $413 * $415;
 $417 = $409 + $416;
 $418 = +HEAPF64[$7>>3];
 $419 = (+Math_abs((+$418)));
 $420 = $56;
 $421 = (+Math_abs((+$420)));
 $422 = $419 + $421;
 $423 = $60;
 $424 = $43;
 $425 = $423 * $424;
 $426 = (+Math_abs((+$425)));
 $427 = $422 + $426;
 $428 = 4.4408920985006262E-16 * $427;
 $429 = $417 + $428;
 $63 = $429;
 $430 = $10;
 $431 = (+($430|0));
 $64 = $431;
 $432 = $42;
 $433 = ($432|0)!=(0);
 do {
  if ($433) {
   $434 = $42;
   $448 = $434;
  } else {
   $435 = $59;
   $436 = ($435|0)!=(0);
   if ($436) {
    $437 = $59;
    $448 = $437;
    break;
   }
   $438 = $51;
   $439 = ($438|0)!=(0);
   if ($439) {
    $440 = $51;
    $448 = $440;
    break;
   }
   $441 = $50;
   $442 = ($441|0)!=(0);
   if ($442) {
    $443 = $50;
    $448 = $443;
    break;
   } else {
    $444 = $49;
    $445 = ($444|0)!=(0);
    $446 = $49;
    $447 = $445 ? $446 : 0;
    $448 = $447;
    break;
   }
  }
 } while(0);
 $42 = $448;
 $45 = 1;
 while(1) {
  $449 = $45;
  $450 = ($449|0)<(2000);
  if (!($450)) {
   break;
  }
  $451 = $20;
  $452 = $45;
  $453 = (($451) + ($452))|0;
  $454 = (+($453|0));
  $67 = $454;
  $455 = $20;
  $456 = $45;
  $457 = (($455) + ($456))|0;
  $458 = (($457) - 1)|0;
  $459 = (+($458|0));
  $68 = $459;
  $460 = $11;
  $461 = $460 - 1.0;
  $462 = $64;
  $463 = $67;
  $464 = 2.0 * $463;
  $465 = $462 + $464;
  $466 = $465 - 1.0;
  $467 = $461 * $466;
  $468 = $67;
  $469 = $67;
  $470 = $14;
  $471 = $469 - $470;
  $472 = $468 * $471;
  $473 = $467 + $472;
  $69 = $473;
  $474 = $11;
  $475 = $68;
  $476 = $474 + $475;
  $477 = $14;
  $478 = $476 - $477;
  $479 = $15;
  $480 = $478 * $479;
  $481 = $64;
  $482 = $68;
  $483 = $481 + $482;
  $484 = $67;
  $485 = $14;
  $486 = $484 - $485;
  $487 = $483 * $486;
  $488 = $480 / $487;
  $70 = $488;
  $489 = $11;
  $490 = $68;
  $491 = $489 + $490;
  $492 = $15;
  $493 = $491 * $492;
  $494 = $13;
  $495 = $68;
  $496 = $494 + $495;
  $497 = $67;
  $498 = $496 * $497;
  $499 = $493 / $498;
  $71 = $499;
  $500 = $69;
  $501 = $67;
  $502 = $13;
  $503 = $68;
  $504 = $502 + $503;
  $505 = $501 * $504;
  $506 = $11;
  $507 = $68;
  $508 = $506 + $507;
  $509 = $14;
  $510 = $508 - $509;
  $511 = $505 * $510;
  $512 = $500 / $511;
  $72 = $512;
  $513 = $70;
  $514 = $43;
  $515 = $514 * $513;
  $43 = $515;
  $516 = $70;
  $517 = (+Math_abs((+$516)));
  $518 = $44;
  $519 = $517 * $518;
  $520 = $43;
  $521 = (+Math_abs((+$520)));
  $522 = $521 * 8.0;
  $523 = $522 * 2.0;
  $524 = $523 * 2.2204460492503131E-16;
  $525 = $519 + $524;
  $526 = $44;
  $527 = $526 + $525;
  $44 = $527;
  $528 = $71;
  $529 = $56;
  $530 = $528 * $529;
  $531 = $72;
  $532 = $43;
  $533 = $531 * $532;
  $534 = $530 - $533;
  $56 = $534;
  $535 = $71;
  $536 = (+Math_abs((+$535)));
  $537 = $57;
  $538 = $536 * $537;
  $539 = $72;
  $540 = (+Math_abs((+$539)));
  $541 = $44;
  $542 = $540 * $541;
  $543 = $538 + $542;
  $544 = $56;
  $545 = (+Math_abs((+$544)));
  $546 = $545 * 8.0;
  $547 = $546 * 2.0;
  $548 = $547 * 2.2204460492503131E-16;
  $549 = $543 + $548;
  $550 = $43;
  $551 = $72;
  $552 = $550 * $551;
  $553 = (+Math_abs((+$552)));
  $554 = $553 * 16.0;
  $555 = $554 * 2.0;
  $556 = $555 * 2.2204460492503131E-16;
  $557 = $549 + $556;
  $57 = $557;
  $558 = $56;
  $559 = $60;
  $560 = $43;
  $561 = $559 * $560;
  $562 = $558 + $561;
  $65 = $562;
  $563 = $57;
  $564 = $60;
  $565 = (+Math_abs((+$564)));
  $566 = $44;
  $567 = $565 * $566;
  $568 = $563 + $567;
  $66 = $568;
  $569 = $43;
  $570 = $19;
  $571 = $569 * $570;
  $572 = (+Math_abs((+$571)));
  $573 = ((($58)) + 8|0);
  $574 = +HEAPF64[$573>>3];
  $575 = $572 * $574;
  $576 = $66;
  $577 = $576 + $575;
  $66 = $577;
  $578 = $43;
  $579 = (+Math_abs((+$578)));
  $580 = $61;
  $581 = $579 * $580;
  $582 = $66;
  $583 = $582 + $581;
  $66 = $583;
  $584 = $65;
  $585 = $62;
  $586 = $585 + $584;
  $62 = $586;
  $587 = $66;
  $588 = $63;
  $589 = $588 + $587;
  $63 = $589;
  $590 = $65;
  $591 = (+Math_abs((+$590)));
  $592 = $62;
  $593 = (+Math_abs((+$592)));
  $594 = 4.4408920985006262E-16 * $593;
  $595 = $591 < $594;
  if ($595) {
   break;
  }
  $596 = $45;
  $597 = (($596) + 1)|0;
  $45 = $597;
 }
 $598 = $62;
 $599 = $17;
 HEAPF64[$599>>3] = $598;
 $600 = $63;
 $601 = 2.0 * $600;
 $602 = $17;
 $603 = ((($602)) + 8|0);
 HEAPF64[$603>>3] = $601;
 $604 = $65;
 $605 = (+Math_abs((+$604)));
 $606 = 2.0 * $605;
 $607 = $17;
 $608 = ((($607)) + 8|0);
 $609 = +HEAPF64[$608>>3];
 $610 = $609 + $606;
 HEAPF64[$608>>3] = $610;
 $611 = $45;
 $612 = (+($611|0));
 $613 = $612 + 2.0;
 $614 = 8.8817841970012523E-16 * $613;
 $615 = $62;
 $616 = (+Math_abs((+$615)));
 $617 = $614 * $616;
 $618 = $17;
 $619 = ((($618)) + 8|0);
 $620 = +HEAPF64[$619>>3];
 $621 = $620 + $617;
 HEAPF64[$619>>3] = $621;
 $622 = $17;
 $623 = ((($622)) + 8|0);
 $624 = +HEAPF64[$623>>3];
 $625 = $624 * 2.0;
 HEAPF64[$623>>3] = $625;
 $626 = $45;
 $627 = ($626|0)>=(2000);
 if ($627) {
  _gsl_error(83691,83551,664,11);
  $9 = 11;
  $629 = $9;
  STACKTOP = sp;return ($629|0);
 } else {
  $628 = $42;
  $9 = $628;
  $629 = $9;
  STACKTOP = sp;return ($629|0);
 }
 return (0)|0;
}
function _d9chu($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $11 = sp + 32|0;
 $12 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 1.7763568394002505E-15;
 $10 = 500;
 $28 = $5;
 $29 = 1.0 + $28;
 $30 = $6;
 $31 = $29 - $30;
 $14 = $31;
 $32 = $5;
 $33 = $14;
 $34 = $32 * $33;
 $15 = $34;
 $35 = $7;
 $36 = $15;
 $37 = $35 - $36;
 $38 = 2.0 * $37;
 $16 = $38;
 $39 = $5;
 $40 = $14;
 $41 = $39 + $40;
 $17 = $41;
 $42 = $17;
 $43 = $42 + 1.0;
 $44 = $15;
 $45 = $43 + $44;
 $18 = $45;
 $46 = $18;
 $47 = $17;
 $48 = $46 + $47;
 $49 = $48 + 3.0;
 $19 = $49;
 $50 = $7;
 $51 = 2.0 * $50;
 $52 = $19;
 $53 = $51 / $52;
 $54 = 1.0 + $53;
 $20 = $54;
 HEAPF64[$12>>3] = 1.0;
 HEAPF64[$11>>3] = 1.0;
 $55 = $7;
 $56 = 2.0 * $55;
 $57 = $18;
 $58 = $56 / $57;
 $59 = 1.0 + $58;
 $60 = ((($12)) + 8|0);
 HEAPF64[$60>>3] = $59;
 $61 = $16;
 $62 = $18;
 $63 = $61 / $62;
 $64 = 1.0 + $63;
 $65 = ((($11)) + 8|0);
 HEAPF64[$65>>3] = $64;
 $66 = $20;
 $67 = 6.0 * $66;
 $68 = $7;
 $69 = $67 * $68;
 $70 = $18;
 $71 = $69 / $70;
 $72 = 1.0 + $71;
 $73 = ((($12)) + 16|0);
 HEAPF64[$73>>3] = $72;
 $74 = $15;
 $75 = 6.0 * $74;
 $76 = $19;
 $77 = $75 / $76;
 $78 = 1.0 + $77;
 $79 = $20;
 $80 = 3.0 * $79;
 $81 = $16;
 $82 = $80 * $81;
 $83 = $18;
 $84 = $82 / $83;
 $85 = $78 + $84;
 $86 = ((($11)) + 16|0);
 HEAPF64[$86>>3] = $85;
 $13 = 4;
 while(1) {
  $87 = $13;
  $88 = ($87|0)<(500);
  if (!($88)) {
   break;
  }
  $89 = $13;
  $90 = $89<<1;
  $91 = (($90) - 3)|0;
  $92 = (+($91|0));
  $27 = $92;
  $93 = $27;
  $94 = $27;
  $95 = $94 - 2.0;
  $96 = $93 / $95;
  $20 = $96;
  $97 = $27;
  $98 = $17;
  $99 = $97 + $98;
  $100 = $19;
  $101 = $100 + $99;
  $19 = $101;
  $102 = $27;
  $103 = $102 - 1.0;
  $104 = $19;
  $105 = $103 / $104;
  $16 = $105;
  $106 = $27;
  $107 = $16;
  $108 = $106 * $107;
  $109 = $108 - 1.0;
  $22 = $109;
  $110 = $27;
  $111 = 2.0 * $110;
  $112 = $7;
  $113 = $111 * $112;
  $114 = $19;
  $115 = $113 / $114;
  $23 = $115;
  $116 = $17;
  $117 = $16;
  $118 = $116 * $117;
  $18 = $118;
  $119 = $23;
  $120 = $20;
  $121 = $22;
  $122 = $18;
  $123 = $121 + $122;
  $124 = $120 * $123;
  $125 = $119 + $124;
  $24 = $125;
  $126 = $23;
  $127 = $22;
  $128 = $126 - $127;
  $25 = $128;
  $129 = $20;
  $130 = $18;
  $131 = 1.0 - $130;
  $132 = $16;
  $133 = 2.0 * $132;
  $134 = $131 - $133;
  $135 = $129 * $134;
  $26 = $135;
  $136 = $24;
  $137 = ((($12)) + 16|0);
  $138 = +HEAPF64[$137>>3];
  $139 = $136 * $138;
  $140 = $25;
  $141 = ((($12)) + 8|0);
  $142 = +HEAPF64[$141>>3];
  $143 = $140 * $142;
  $144 = $139 + $143;
  $145 = $26;
  $146 = +HEAPF64[$12>>3];
  $147 = $145 * $146;
  $148 = $144 + $147;
  $149 = ((($12)) + 24|0);
  HEAPF64[$149>>3] = $148;
  $150 = $24;
  $151 = ((($11)) + 16|0);
  $152 = +HEAPF64[$151>>3];
  $153 = $150 * $152;
  $154 = $25;
  $155 = ((($11)) + 8|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $154 * $156;
  $158 = $153 + $157;
  $159 = $26;
  $160 = +HEAPF64[$11>>3];
  $161 = $159 * $160;
  $162 = $158 + $161;
  $163 = ((($11)) + 24|0);
  HEAPF64[$163>>3] = $162;
  $164 = ((($11)) + 24|0);
  $165 = +HEAPF64[$164>>3];
  $166 = +HEAPF64[$12>>3];
  $167 = $165 * $166;
  $168 = +HEAPF64[$11>>3];
  $169 = ((($12)) + 24|0);
  $170 = +HEAPF64[$169>>3];
  $171 = $168 * $170;
  $172 = $167 - $171;
  $173 = (+Math_abs((+$172)));
  $174 = ((($12)) + 24|0);
  $175 = +HEAPF64[$174>>3];
  $176 = +HEAPF64[$12>>3];
  $177 = $175 * $176;
  $178 = (+Math_abs((+$177)));
  $179 = 1.7763568394002505E-15 * $178;
  $180 = $173 < $179;
  if ($180) {
   break;
  }
  $21 = 0;
  while(1) {
   $181 = $21;
   $182 = ($181|0)<(3);
   if (!($182)) {
    break;
   }
   $183 = $21;
   $184 = (($183) + 1)|0;
   $185 = (($11) + ($184<<3)|0);
   $186 = +HEAPF64[$185>>3];
   $187 = $21;
   $188 = (($11) + ($187<<3)|0);
   HEAPF64[$188>>3] = $186;
   $189 = $21;
   $190 = (($189) + 1)|0;
   $191 = (($12) + ($190<<3)|0);
   $192 = +HEAPF64[$191>>3];
   $193 = $21;
   $194 = (($12) + ($193<<3)|0);
   HEAPF64[$194>>3] = $192;
   $195 = $21;
   $196 = (($195) + 1)|0;
   $21 = $196;
  }
  $197 = $13;
  $198 = (($197) + 1)|0;
  $13 = $198;
 }
 $199 = ((($11)) + 24|0);
 $200 = +HEAPF64[$199>>3];
 $201 = ((($12)) + 24|0);
 $202 = +HEAPF64[$201>>3];
 $203 = $200 / $202;
 $204 = $8;
 HEAPF64[$204>>3] = $203;
 $205 = $8;
 $206 = +HEAPF64[$205>>3];
 $207 = (+Math_abs((+$206)));
 $208 = 1.7763568394002505E-15 * $207;
 $209 = $8;
 $210 = ((($209)) + 8|0);
 HEAPF64[$210>>3] = $208;
 $211 = $13;
 $212 = ($211|0)==(500);
 if ($212) {
  _gsl_error(83691,83551,201,11);
  $4 = 11;
  $213 = $4;
  STACKTOP = sp;return ($213|0);
 } else {
  $4 = 0;
  $213 = $4;
  STACKTOP = sp;return ($213|0);
 }
 return (0)|0;
}
function _hyperg_U_negx($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $9 = sp + 88|0;
 $10 = sp + 72|0;
 $20 = sp + 24|0;
 $22 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $25 = $5;
 $26 = $5;
 $27 = (+Math_floor((+$26)));
 $28 = $25 == $27;
 $29 = $28&1;
 $14 = $29;
 $30 = $6;
 $31 = $6;
 $32 = (+Math_floor((+$31)));
 $33 = $30 == $32;
 $34 = $33&1;
 $15 = $34;
 $16 = 0.0;
 $17 = 0.0;
 $18 = 0.0;
 $19 = 0.0;
 $35 = $15;
 $36 = ($35|0)!=(0);
 $37 = $6;
 $38 = $37 <= 0.0;
 $or$cond = $36 & $38;
 do {
  if ($or$cond) {
   $39 = $14;
   $40 = ($39|0)!=(0);
   $41 = $5;
   $42 = $41 <= 0.0;
   $or$cond3 = $40 & $42;
   if ($or$cond3) {
    $43 = $5;
    $44 = $6;
    $45 = $43 >= $44;
    if ($45) {
     break;
    }
   }
   $46 = $8;
   HEAPF64[$46>>3] = nan;
   $47 = $8;
   $48 = ((($47)) + 8|0);
   HEAPF64[$48>>3] = nan;
   _gsl_error(83562,83551,1548,24);
   $4 = 24;
   $190 = $4;
   STACKTOP = sp;return ($190|0);
  }
 } while(0);
 $49 = $5;
 $50 = 1.0 + $49;
 $51 = $6;
 $52 = $50 - $51;
 $53 = $5;
 $54 = - $53;
 $55 = (_gsl_sf_poch_e($52,$54,$9)|0);
 $11 = $55;
 $56 = $11;
 $13 = $56;
 $57 = +HEAPF64[$9>>3];
 $58 = $57 != 0.0;
 if ($58) {
  $59 = $5;
  $60 = $6;
  $61 = $7;
  $62 = (_gsl_sf_hyperg_1F1_e($59,$60,$61,$20)|0);
  $21 = $62;
  $63 = $13;
  $64 = ($63|0)!=(0);
  if ($64) {
   $65 = $13;
   $70 = $65;
  } else {
   $66 = $21;
   $67 = ($66|0)!=(0);
   $68 = $21;
   $69 = $67 ? $68 : 0;
   $70 = $69;
  }
  $13 = $70;
  $71 = +HEAPF64[$20>>3];
  $72 = +HEAPF64[$9>>3];
  $73 = $71 * $72;
  $16 = $73;
  $74 = $16;
  $75 = (+Math_abs((+$74)));
  $76 = 4.4408920985006262E-16 * $75;
  $77 = ((($20)) + 8|0);
  $78 = +HEAPF64[$77>>3];
  $79 = +HEAPF64[$9>>3];
  $80 = $78 * $79;
  $81 = (+Math_abs((+$80)));
  $82 = $76 + $81;
  $83 = +HEAPF64[$20>>3];
  $84 = ((($9)) + 8|0);
  $85 = +HEAPF64[$84>>3];
  $86 = $83 * $85;
  $87 = (+Math_abs((+$86)));
  $88 = $82 + $87;
  $17 = $88;
 }
 $89 = $15;
 $90 = ($89|0)!=(0);
 $91 = $6;
 $92 = $91 >= 2.0;
 $or$cond5 = $90 & $92;
 do {
  if ($or$cond5) {
   $93 = $14;
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $5;
    $96 = $6;
    $97 = $96 - 2.0;
    $98 = $95 <= $97;
    if ($98) {
     break;
    }
   }
   $99 = $8;
   HEAPF64[$99>>3] = nan;
   $100 = $8;
   $101 = ((($100)) + 8|0);
   HEAPF64[$101>>3] = nan;
   _gsl_error(83602,83551,1581,24);
   $4 = 24;
   $190 = $4;
   STACKTOP = sp;return ($190|0);
  }
 } while(0);
 $102 = $14;
 $103 = ($102|0)!=(0);
 $104 = $5;
 $105 = $104 <= 0.0;
 $or$cond7 = $103 & $105;
 $106 = $6;
 $107 = $106 >= 1.0;
 $or$cond9 = $or$cond7 & $107;
 if ($or$cond9) {
  HEAPF64[$10>>3] = 0.0;
  $108 = ((($10)) + 8|0);
  HEAPF64[$108>>3] = 0.0;
 } else {
  $109 = $5;
  $110 = $5;
  $111 = 1.0 + $110;
  $112 = $6;
  $113 = $111 - $112;
  $114 = - $113;
  $115 = (_gsl_sf_poch_e($109,$114,$10)|0);
  $12 = $115;
  $116 = $13;
  $117 = ($116|0)!=(0);
  if ($117) {
   $118 = $13;
   $123 = $118;
  } else {
   $119 = $12;
   $120 = ($119|0)!=(0);
   $121 = $12;
   $122 = $120 ? $121 : 0;
   $123 = $122;
  }
  $13 = $123;
 }
 $124 = +HEAPF64[$10>>3];
 $125 = $124 != 0.0;
 if ($125) {
  $126 = $5;
  $127 = 1.0 + $126;
  $128 = $6;
  $129 = $127 - $128;
  $130 = $6;
  $131 = 2.0 - $130;
  $132 = $7;
  $133 = (_gsl_sf_hyperg_1F1_e($129,$131,$132,$22)|0);
  $23 = $133;
  $134 = +HEAPF64[$22>>3];
  $135 = +HEAPF64[$10>>3];
  $136 = $134 * $135;
  $18 = $136;
  $137 = $18;
  $138 = (+Math_abs((+$137)));
  $139 = 4.4408920985006262E-16 * $138;
  $140 = ((($22)) + 8|0);
  $141 = +HEAPF64[$140>>3];
  $142 = +HEAPF64[$10>>3];
  $143 = $141 * $142;
  $144 = (+Math_abs((+$143)));
  $145 = $139 + $144;
  $146 = +HEAPF64[$22>>3];
  $147 = ((($10)) + 8|0);
  $148 = +HEAPF64[$147>>3];
  $149 = $146 * $148;
  $150 = (+Math_abs((+$149)));
  $151 = $145 + $150;
  $19 = $151;
  $152 = $13;
  $153 = ($152|0)!=(0);
  if ($153) {
   $154 = $13;
   $159 = $154;
  } else {
   $155 = $23;
   $156 = ($155|0)!=(0);
   $157 = $23;
   $158 = $156 ? $157 : 0;
   $159 = $158;
  }
  $13 = $159;
  $160 = $18;
  $161 = $160 != 0.0;
  if ($161) {
   $162 = $7;
   $163 = $6;
   $164 = 1.0 - $163;
   $165 = (+Math_pow((+$162),(+$164)));
   $24 = $165;
   $166 = $24;
   $167 = $18;
   $168 = $166 * $167;
   $18 = $168;
   $169 = $24;
   $170 = (+Math_abs((+$169)));
   $171 = $19;
   $172 = $170 * $171;
   $19 = $172;
  }
 }
 $173 = $16;
 $174 = $18;
 $175 = $173 + $174;
 $176 = $8;
 HEAPF64[$176>>3] = $175;
 $177 = $8;
 $178 = +HEAPF64[$177>>3];
 $179 = (+Math_abs((+$178)));
 $180 = 4.4408920985006262E-16 * $179;
 $181 = $17;
 $182 = $19;
 $183 = $181 + $182;
 $184 = $180 + $183;
 $185 = $8;
 $186 = ((($185)) + 8|0);
 HEAPF64[$186>>3] = $184;
 $187 = $8;
 $188 = ((($187)) + 16|0);
 HEAP32[$188>>2] = 0;
 $189 = $13;
 $4 = $189;
 $190 = $4;
 STACKTOP = sp;return ($190|0);
}
function _hyperg_U_origin($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 24|0;
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = 1.0 + $11;
 $13 = $4;
 $14 = $12 - $13;
 $15 = (_gsl_sf_gammainv_e($14,$6)|0);
 $8 = $15;
 $16 = $4;
 $17 = (_gsl_sf_gammainv_e($16,$7)|0);
 $9 = $17;
 $18 = $4;
 $19 = 3.1415926535897931 * $18;
 $20 = (+Math_sin((+$19)));
 $21 = 3.1415926535897931 / $20;
 $10 = $21;
 $22 = $10;
 $23 = +HEAPF64[$6>>3];
 $24 = $22 * $23;
 $25 = +HEAPF64[$7>>3];
 $26 = $24 * $25;
 $27 = $5;
 HEAPF64[$27>>3] = $26;
 $28 = $10;
 $29 = (+Math_abs((+$28)));
 $30 = ((($6)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = ((($7)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $31 + $33;
 $35 = $29 * $34;
 $36 = $5;
 $37 = ((($36)) + 8|0);
 HEAPF64[$37>>3] = $35;
 $38 = $5;
 $39 = ((($38)) + 16|0);
 HEAP32[$39>>2] = 0;
 $40 = $8;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $8;
  $47 = $42;
  STACKTOP = sp;return ($47|0);
 } else {
  $43 = $9;
  $44 = ($43|0)!=(0);
  $45 = $9;
  $46 = $44 ? $45 : 0;
  $47 = $46;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_U_e10_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $13 = sp + 64|0;
 $19 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = $22 + 0.5;
 $24 = (+Math_floor((+$23)));
 $9 = $24;
 $25 = $6;
 $26 = $25 + 0.5;
 $27 = (+Math_floor((+$26)));
 $10 = $27;
 $28 = $5;
 $29 = $9;
 $30 = $28 - $29;
 $31 = (+Math_abs((+$30)));
 $32 = $31 < 2.2204460492503131E-13;
 $33 = $32&1;
 $11 = $33;
 $34 = $6;
 $35 = $10;
 $36 = $34 - $35;
 $37 = (+Math_abs((+$36)));
 $38 = $37 < 2.2204460492503131E-13;
 $39 = $38&1;
 $12 = $39;
 $40 = $7;
 $41 = $40 == 0.0;
 $42 = $6;
 $43 = $42 >= 1.0;
 $or$cond = $41 & $43;
 if ($or$cond) {
  $44 = $8;
  HEAPF64[$44>>3] = nan;
  $45 = $8;
  $46 = ((($45)) + 8|0);
  HEAPF64[$46>>3] = nan;
  $47 = $8;
  $48 = ((($47)) + 16|0);
  HEAP32[$48>>2] = 0;
  _gsl_error(83774,83551,1701,1);
  $4 = 1;
  $149 = $4;
  STACKTOP = sp;return ($149|0);
 }
 $49 = $5;
 $50 = $49 == 0.0;
 if ($50) {
  $51 = $8;
  HEAPF64[$51>>3] = 1.0;
  $52 = $8;
  $53 = ((($52)) + 8|0);
  HEAPF64[$53>>3] = 0.0;
  $54 = $8;
  $55 = ((($54)) + 16|0);
  HEAP32[$55>>2] = 0;
  $4 = 0;
  $149 = $4;
  STACKTOP = sp;return ($149|0);
 }
 $56 = $7;
 $57 = $56 == 0.0;
 if ($57) {
  $58 = $5;
  $59 = $6;
  $60 = $8;
  $61 = (_hyperg_U_origin($58,$59,$60)|0);
  $4 = $61;
  $149 = $4;
  STACKTOP = sp;return ($149|0);
 }
 $62 = $11;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $6;
  $65 = $5;
  $66 = $65 + 1.0;
  $67 = $64 == $66;
  if ($67) {
   $68 = $7;
   $69 = $5;
   $70 = - $69;
   $71 = (~~(($70)));
   (_gsl_sf_pow_int_e($68,$71,$13)|0);
   $72 = +HEAPF64[$13>>3];
   $73 = $8;
   HEAPF64[$73>>3] = $72;
   $74 = ((($13)) + 8|0);
   $75 = +HEAPF64[$74>>3];
   $76 = $8;
   $77 = ((($76)) + 8|0);
   HEAPF64[$77>>3] = $75;
   $78 = $8;
   $79 = ((($78)) + 16|0);
   HEAP32[$79>>2] = 0;
   $4 = 0;
   $149 = $4;
   STACKTOP = sp;return ($149|0);
  }
 }
 $80 = $11;
 $81 = ($80|0)!=(0);
 $82 = $12;
 $83 = ($82|0)!=(0);
 $or$cond3 = $81 & $83;
 if ($or$cond3) {
  $84 = $9;
  $85 = (~~(($84)));
  $86 = $10;
  $87 = (~~(($86)));
  $88 = $7;
  $89 = $8;
  $90 = (_gsl_sf_hyperg_U_int_e10_e($85,$87,$88,$89)|0);
  $4 = $90;
  $149 = $4;
  STACKTOP = sp;return ($149|0);
 }
 $91 = $7;
 $92 = $91 < 0.0;
 if ($92) {
  $93 = $5;
  $94 = $6;
  $95 = $7;
  $96 = $8;
  $97 = (_hyperg_U_negx($93,$94,$95,$96)|0);
  $4 = $97;
  $149 = $4;
  STACKTOP = sp;return ($149|0);
 }
 $98 = $6;
 $99 = $98 >= 1.0;
 if ($99) {
  $100 = $5;
  $101 = $6;
  $102 = $7;
  $103 = $8;
  $104 = (_hyperg_U_bge1($100,$101,$102,$103)|0);
  $4 = $104;
  $149 = $4;
  STACKTOP = sp;return ($149|0);
 }
 $105 = $7;
 $106 = (+Math_log((+$105)));
 $14 = $106;
 $107 = $6;
 $108 = 1.0 - $107;
 $109 = $14;
 $110 = $108 * $109;
 $15 = $110;
 $111 = $14;
 $112 = (+Math_abs((+$111)));
 $113 = $112 * 2.0;
 $114 = $113 * 2.2204460492503131E-16;
 $115 = $6;
 $116 = (+Math_abs((+$115)));
 $117 = 1.0 + $116;
 $118 = $114 * $117;
 $16 = $118;
 $119 = $5;
 $120 = 1.0 + $119;
 $121 = $6;
 $122 = $120 - $121;
 $17 = $122;
 $123 = $6;
 $124 = 2.0 - $123;
 $18 = $124;
 $125 = $17;
 $126 = $18;
 $127 = $7;
 $128 = (_hyperg_U_bge1($125,$126,$127,$19)|0);
 $20 = $128;
 $129 = $15;
 $130 = ((($19)) + 16|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (+($131|0));
 $133 = $132 * 2.3025850929940459;
 $134 = $129 + $133;
 $135 = $16;
 $136 = +HEAPF64[$19>>3];
 $137 = ((($19)) + 8|0);
 $138 = +HEAPF64[$137>>3];
 $139 = $8;
 $140 = (_gsl_sf_exp_mult_err_e10_e($134,$135,$136,$138,$139)|0);
 $21 = $140;
 $141 = $21;
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = $21;
  $148 = $143;
 } else {
  $144 = $20;
  $145 = ($144|0)!=(0);
  $146 = $20;
  $147 = $145 ? $146 : 0;
  $148 = $147;
 }
 $4 = $148;
 $149 = $4;
 STACKTOP = sp;return ($149|0);
}
function _hyperg_U_bge1($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $1000 = 0.0, $1001 = 0.0, $1002 = 0.0, $1003 = 0.0, $1004 = 0.0, $1005 = 0.0, $1006 = 0.0, $1007 = 0.0, $1008 = 0.0, $1009 = 0.0, $101 = 0, $1010 = 0.0, $1011 = 0.0, $1012 = 0.0, $1013 = 0.0, $1014 = 0.0, $1015 = 0.0, $1016 = 0.0;
 var $1017 = 0.0, $1018 = 0.0, $1019 = 0.0, $102 = 0, $1020 = 0.0, $1021 = 0, $1022 = 0.0, $1023 = 0.0, $1024 = 0.0, $1025 = 0.0, $1026 = 0, $1027 = 0, $1028 = 0.0, $1029 = 0, $103 = 0.0, $1030 = 0.0, $1031 = 0.0, $1032 = 0.0, $1033 = 0.0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0.0, $1039 = 0, $104 = 0.0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0.0, $1050 = 0, $1051 = 0, $1052 = 0.0;
 var $1053 = 0.0, $1054 = 0.0, $1055 = 0.0, $1056 = 0.0, $1057 = 0.0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0, $1061 = 0.0, $1062 = 0.0, $1063 = 0.0, $1064 = 0.0, $1065 = 0.0, $1066 = 0.0, $1067 = 0.0, $1068 = 0, $1069 = 0.0, $107 = 0, $1070 = 0.0;
 var $1071 = 0.0, $1072 = 0.0, $1073 = 0.0, $1074 = 0.0, $1075 = 0.0, $1076 = 0.0, $1077 = 0, $1078 = 0.0, $1079 = 0.0, $108 = 0, $1080 = 0.0, $1081 = 0.0, $1082 = 0.0, $1083 = 0.0, $1084 = 0.0, $1085 = 0, $1086 = 0.0, $1087 = 0, $1088 = 0.0, $1089 = 0.0;
 var $109 = 0, $1090 = 0, $1091 = 0.0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $111 = 0.0;
 var $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0;
 var $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0;
 var $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0;
 var $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0;
 var $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0;
 var $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0;
 var $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0;
 var $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0;
 var $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0;
 var $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0;
 var $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0.0;
 var $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0.0, $437 = 0.0, $438 = 0.0;
 var $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0;
 var $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0;
 var $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0;
 var $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0, $499 = 0.0, $5 = 0.0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0.0, $51 = 0;
 var $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0, $527 = 0.0, $528 = 0.0;
 var $529 = 0.0, $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0;
 var $547 = 0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0.0;
 var $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0, $599 = 0.0, $6 = 0.0, $60 = 0.0;
 var $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0.0, $618 = 0.0;
 var $619 = 0.0, $62 = 0, $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0.0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0;
 var $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0;
 var $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0.0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0;
 var $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0;
 var $691 = 0.0, $692 = 0.0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0.0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0;
 var $709 = 0.0, $71 = 0.0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0.0, $720 = 0.0, $721 = 0.0, $722 = 0.0, $723 = 0.0, $724 = 0, $725 = 0.0, $726 = 0.0;
 var $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0.0, $732 = 0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0.0, $740 = 0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0;
 var $745 = 0.0, $746 = 0.0, $747 = 0, $748 = 0.0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0.0, $760 = 0, $761 = 0, $762 = 0.0;
 var $763 = 0.0, $764 = 0, $765 = 0.0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0.0, $77 = 0.0, $770 = 0.0, $771 = 0.0, $772 = 0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0.0;
 var $781 = 0.0, $782 = 0.0, $783 = 0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0;
 var $8 = 0, $80 = 0, $800 = 0.0, $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0, $808 = 0.0, $809 = 0.0, $81 = 0.0, $810 = 0.0, $811 = 0.0, $812 = 0, $813 = 0, $814 = 0.0, $815 = 0, $816 = 0.0;
 var $817 = 0.0, $818 = 0.0, $819 = 0.0, $82 = 0, $820 = 0, $821 = 0, $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0, $828 = 0.0, $829 = 0.0, $83 = 0.0, $830 = 0, $831 = 0.0, $832 = 0.0, $833 = 0.0, $834 = 0.0;
 var $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0.0, $839 = 0.0, $84 = 0.0, $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0.0, $844 = 0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0, $85 = 0.0, $850 = 0.0, $851 = 0.0, $852 = 0.0;
 var $853 = 0.0, $854 = 0.0, $855 = 0, $856 = 0.0, $857 = 0.0, $858 = 0.0, $859 = 0.0, $86 = 0, $860 = 0, $861 = 0.0, $862 = 0.0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0, $869 = 0.0, $87 = 0.0, $870 = 0.0;
 var $871 = 0.0, $872 = 0, $873 = 0.0, $874 = 0.0, $875 = 0, $876 = 0.0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0.0, $890 = 0.0, $891 = 0.0, $892 = 0.0, $893 = 0.0, $894 = 0.0, $895 = 0, $896 = 0.0, $897 = 0.0, $898 = 0.0, $899 = 0.0, $9 = 0.0, $90 = 0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0.0, $904 = 0.0, $905 = 0.0, $906 = 0.0;
 var $907 = 0.0, $908 = 0.0, $909 = 0.0, $91 = 0, $910 = 0, $911 = 0.0, $912 = 0.0, $913 = 0.0, $914 = 0.0, $915 = 0.0, $916 = 0.0, $917 = 0.0, $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0.0, $921 = 0, $922 = 0.0, $923 = 0.0, $924 = 0.0;
 var $925 = 0.0, $926 = 0.0, $927 = 0.0, $928 = 0.0, $929 = 0.0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0.0, $936 = 0.0, $937 = 0.0, $938 = 0.0, $939 = 0.0, $94 = 0.0, $940 = 0.0, $941 = 0.0, $942 = 0.0;
 var $943 = 0.0, $944 = 0.0, $945 = 0, $946 = 0.0, $947 = 0.0, $948 = 0.0, $949 = 0.0, $95 = 0, $950 = 0, $951 = 0, $952 = 0.0, $953 = 0, $954 = 0.0, $955 = 0.0, $956 = 0.0, $957 = 0.0, $958 = 0, $959 = 0, $96 = 0, $960 = 0.0;
 var $961 = 0.0, $962 = 0.0, $963 = 0, $964 = 0.0, $965 = 0.0, $966 = 0.0, $967 = 0.0, $968 = 0, $969 = 0.0, $97 = 0.0, $970 = 0.0, $971 = 0.0, $972 = 0, $973 = 0.0, $974 = 0.0, $975 = 0.0, $976 = 0.0, $977 = 0, $978 = 0.0, $979 = 0.0;
 var $98 = 0.0, $980 = 0.0, $981 = 0.0, $982 = 0.0, $983 = 0.0, $984 = 0.0, $985 = 0.0, $986 = 0.0, $987 = 0.0, $988 = 0.0, $989 = 0.0, $99 = 0.0, $990 = 0.0, $991 = 0.0, $992 = 0.0, $993 = 0.0, $994 = 0.0, $995 = 0.0, $996 = 0.0, $997 = 0;
 var $998 = 0.0, $999 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $13 = sp + 864|0;
 $14 = sp + 848|0;
 $19 = sp + 816|0;
 $22 = sp + 800|0;
 $23 = sp + 792|0;
 $26 = sp + 776|0;
 $32 = sp + 744|0;
 $33 = sp + 736|0;
 $35 = sp + 712|0;
 $36 = sp + 696|0;
 $46 = sp + 632|0;
 $47 = sp + 616|0;
 $50 = sp + 584|0;
 $51 = sp + 568|0;
 $61 = sp + 496|0;
 $62 = sp + 488|0;
 $64 = sp + 464|0;
 $65 = sp + 448|0;
 $69 = sp + 432|0;
 $70 = sp + 416|0;
 $79 = sp + 344|0;
 $80 = sp + 328|0;
 $82 = sp + 312|0;
 $86 = sp + 272|0;
 $88 = sp + 256|0;
 $90 = sp + 968|0;
 $101 = sp + 192|0;
 $102 = sp + 176|0;
 $110 = sp + 932|0;
 $115 = sp + 104|0;
 $119 = sp + 72|0;
 $120 = sp + 56|0;
 $121 = sp + 48|0;
 $122 = sp + 40|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $130 = $5;
 $131 = $130 + 0.5;
 $132 = (+Math_floor((+$131)));
 $9 = $132;
 $133 = $5;
 $134 = $133 < 0.0;
 if ($134) {
  $135 = $5;
  $136 = $9;
  $137 = $135 - $136;
  $138 = (+Math_abs((+$137)));
  $139 = $138 < 2.2204460492503131E-13;
  $141 = $139;
 } else {
  $141 = 0;
 }
 $140 = $141&1;
 $10 = $140;
 $142 = $5;
 $143 = $142 == 0.0;
 if ($143) {
  $144 = $8;
  HEAPF64[$144>>3] = 1.0;
  $145 = $8;
  $146 = ((($145)) + 8|0);
  HEAPF64[$146>>3] = 0.0;
  $147 = $8;
  $148 = ((($147)) + 16|0);
  HEAP32[$148>>2] = 0;
  $4 = 0;
  $1105 = $4;
  STACKTOP = sp;return ($1105|0);
 }
 $149 = $10;
 $150 = ($149|0)!=(0);
 if ($150) {
  $151 = $9;
  $152 = (+Math_abs((+$151)));
  $153 = $152 < 2147483647.0;
  if ($153) {
   $154 = $9;
   $155 = (~~(($154)));
   $156 = (0 - ($155))|0;
   $11 = $156;
   $157 = $11;
   $158 = $157 & 1;
   $159 = ($158|0)!=(0);
   $160 = $159 ? -1.0 : 1.0;
   $12 = $160;
   $161 = $11;
   $162 = $6;
   $163 = $162 - 1.0;
   $164 = $7;
   $165 = (_gsl_sf_laguerre_n_e($161,$163,$164,$14)|0);
   $15 = $165;
   $166 = $11;
   (_gsl_sf_lnfact_e($166,$13)|0);
   $167 = +HEAPF64[$13>>3];
   $168 = ((($13)) + 8|0);
   $169 = +HEAPF64[$168>>3];
   $170 = $12;
   $171 = +HEAPF64[$14>>3];
   $172 = $170 * $171;
   $173 = ((($14)) + 8|0);
   $174 = +HEAPF64[$173>>3];
   $175 = $8;
   $176 = (_gsl_sf_exp_mult_err_e10_e($167,$169,$172,$174,$175)|0);
   $16 = $176;
   $177 = $16;
   $178 = ($177|0)!=(0);
   if ($178) {
    $179 = $16;
    $184 = $179;
   } else {
    $180 = $15;
    $181 = ($180|0)!=(0);
    $182 = $15;
    $183 = $181 ? $182 : 0;
    $184 = $183;
   }
   $4 = $184;
   $1105 = $4;
   STACKTOP = sp;return ($1105|0);
  }
 }
 $185 = $5;
 $186 = (+Math_abs((+$185)));
 $187 = (+_GSL_MAX_DBL($186,1.0));
 $188 = $5;
 $189 = 1.0 + $188;
 $190 = $6;
 $191 = $189 - $190;
 $192 = (+Math_abs((+$191)));
 $193 = (+_GSL_MAX_DBL($192,1.0));
 $194 = $187 * $193;
 $195 = $7;
 $196 = (+Math_abs((+$195)));
 $197 = 0.98999999999999999 * $196;
 $198 = $194 < $197;
 $199 = $5;
 if ($198) {
  $200 = - $199;
  $201 = $7;
  $202 = (+Math_log((+$201)));
  $203 = $200 * $202;
  $17 = $203;
  $204 = $17;
  $205 = (+Math_abs((+$204)));
  $206 = 4.4408920985006262E-16 * $205;
  $18 = $206;
  $207 = $5;
  $208 = $6;
  $209 = $7;
  $210 = (_hyperg_zaU_asymp($207,$208,$209,$19)|0);
  $20 = $210;
  $211 = $17;
  $212 = $18;
  $213 = +HEAPF64[$19>>3];
  $214 = ((($19)) + 8|0);
  $215 = +HEAPF64[$214>>3];
  $216 = $8;
  $217 = (_gsl_sf_exp_mult_err_e10_e($211,$212,$213,$215,$216)|0);
  $21 = $217;
  $218 = $21;
  $219 = ($218|0)!=(0);
  if ($219) {
   $220 = $21;
   $225 = $220;
  } else {
   $221 = $20;
   $222 = ($221|0)!=(0);
   $223 = $20;
   $224 = $222 ? $223 : 0;
   $225 = $224;
  }
  $4 = $225;
  $1105 = $4;
  STACKTOP = sp;return ($1105|0);
 }
 $226 = (+Math_abs((+$199)));
 $227 = $226 <= 1.0;
 $228 = $5;
 if ($227) {
  $229 = $6;
  $230 = $7;
  $231 = (_hyperg_U_small_a_bgt0($228,$229,$230,$22,$23)|0);
  $24 = $231;
  $232 = +HEAPF64[$23>>3];
  $233 = +HEAPF64[$23>>3];
  $234 = (+Math_abs((+$233)));
  $235 = 4.4408920985006262E-16 * $234;
  $236 = +HEAPF64[$22>>3];
  $237 = ((($22)) + 8|0);
  $238 = +HEAPF64[$237>>3];
  $239 = $8;
  $240 = (_gsl_sf_exp_mult_err_e10_e($232,$235,$236,$238,$239)|0);
  $25 = $240;
  $241 = $24;
  $242 = ($241|0)!=(0);
  if ($242) {
   $243 = $24;
   $248 = $243;
  } else {
   $244 = $25;
   $245 = ($244|0)!=(0);
   $246 = $25;
   $247 = $245 ? $246 : 0;
   $248 = $247;
  }
  $4 = $248;
  $1105 = $4;
  STACKTOP = sp;return ($1105|0);
 }
 $249 = (+Math_abs((+$228)));
 $250 = $249 < 5.0;
 $251 = $6;
 $252 = $251 < 5.0;
 $or$cond = $250 & $252;
 $253 = $7;
 $254 = $253 < 2.0;
 $or$cond3 = $or$cond & $254;
 if (!($or$cond3)) {
  $255 = $5;
  $256 = (+Math_abs((+$255)));
  $257 = $256 < 10.0;
  $258 = $6;
  $259 = $258 < 10.0;
  $or$cond5 = $257 & $259;
  $260 = $7;
  $261 = $260 < 1.0;
  $or$cond7 = $or$cond5 & $261;
  if (!($or$cond7)) {
   $275 = $5;
   $276 = $275 < 0.0;
   if ($276) {
    $28 = 1.3407807929942596E+154;
    $277 = $5;
    $278 = $5;
    $279 = (+Math_floor((+$278)));
    $280 = $277 - $279;
    $281 = $280 - 1.0;
    $29 = $281;
    $282 = $6;
    $283 = $6;
    $284 = (+Math_floor((+$283)));
    $285 = $282 - $284;
    $286 = $285 + 1.0;
    $30 = $286;
    $31 = 0;
    $287 = $29;
    $288 = $287 + 1.0;
    $289 = $30;
    $290 = $7;
    $291 = (_hyperg_U_small_a_bgt0($288,$289,$290,$35,$32)|0);
    $37 = $291;
    $292 = $29;
    $293 = $30;
    $294 = $7;
    $295 = (_hyperg_U_small_a_bgt0($292,$293,$294,$36,$33)|0);
    $38 = $295;
    $296 = +HEAPF64[$35>>3];
    $40 = $296;
    $297 = +HEAPF64[$36>>3];
    $41 = $297;
    $298 = +HEAPF64[$32>>3];
    $299 = +HEAPF64[$33>>3];
    $300 = $298 > $299;
    $301 = +HEAPF64[$32>>3];
    $302 = +HEAPF64[$33>>3];
    $303 = $300 ? $301 : $302;
    $34 = $303;
    $304 = +HEAPF64[$32>>3];
    $305 = $34;
    $306 = $304 - $305;
    $307 = (+Math_exp((+$306)));
    $308 = $40;
    $309 = $308 * $307;
    $40 = $309;
    $310 = +HEAPF64[$33>>3];
    $311 = $34;
    $312 = $310 - $311;
    $313 = (+Math_exp((+$312)));
    $314 = $41;
    $315 = $314 * $313;
    $41 = $315;
    $316 = $29;
    $43 = $316;
    while(1) {
     $317 = $43;
     $318 = $5;
     $319 = $318 + 0.10000000000000001;
     $320 = $317 > $319;
     if (!($320)) {
      break;
     }
     $321 = $43;
     $322 = $30;
     $323 = $43;
     $324 = $322 - $323;
     $325 = $324 - 1.0;
     $326 = $321 * $325;
     $327 = $40;
     $328 = $326 * $327;
     $329 = $7;
     $330 = $43;
     $331 = 2.0 * $330;
     $332 = $329 + $331;
     $333 = $30;
     $334 = $332 - $333;
     $335 = $41;
     $336 = $334 * $335;
     $337 = $328 + $336;
     $42 = $337;
     $338 = $41;
     $40 = $338;
     $339 = $42;
     $41 = $339;
     $340 = $41;
     $341 = (+Math_abs((+$340)));
     $44 = $341;
     $342 = $44;
     $343 = $342 > 1.3407807929942596E+154;
     if ($343) {
      $344 = $41;
      $345 = $344 / 1.3407807929942596E+154;
      $41 = $345;
      $346 = $40;
      $347 = $346 / 1.3407807929942596E+154;
      $40 = $347;
      $348 = $31;
      $349 = (($348) + 1)|0;
      $31 = $349;
     } else {
      $350 = $44;
      $351 = $350 < 7.4583407312002084E-155;
      if ($351) {
       $352 = $41;
       $353 = $352 * 1.3407807929942596E+154;
       $41 = $353;
       $354 = $40;
       $355 = $354 * 1.3407807929942596E+154;
       $40 = $355;
       $356 = $31;
       $357 = (($356) + -1)|0;
       $31 = $357;
      }
     }
     $358 = $43;
     $359 = $358 - 1.0;
     $43 = $359;
    }
    $360 = $6;
    $361 = $360 < 2.0;
    if ($361) {
     $362 = (+Math_log(1.3407807929942596E+154));
     $45 = $362;
     $363 = $34;
     $364 = $31;
     $365 = (+($364|0));
     $366 = $45;
     $367 = $365 * $366;
     $368 = $363 + $367;
     HEAPF64[$46>>3] = $368;
     $369 = $34;
     $370 = (+Math_abs((+$369)));
     $371 = $31;
     $372 = (+($371|0));
     $373 = $45;
     $374 = (+Math_abs((+$373)));
     $375 = $372 * $374;
     $376 = $370 + $375;
     $377 = 4.4408920985006262E-16 * $376;
     $378 = ((($46)) + 8|0);
     HEAPF64[$378>>3] = $377;
     $379 = $41;
     HEAPF64[$47>>3] = $379;
     $380 = ((($35)) + 8|0);
     $381 = +HEAPF64[$380>>3];
     $382 = +HEAPF64[$35>>3];
     $383 = $381 / $382;
     $384 = (+Math_abs((+$383)));
     $385 = $41;
     $386 = (+Math_abs((+$385)));
     $387 = $384 * $386;
     $388 = ((($47)) + 8|0);
     HEAPF64[$388>>3] = $387;
     $389 = ((($36)) + 8|0);
     $390 = +HEAPF64[$389>>3];
     $391 = +HEAPF64[$36>>3];
     $392 = $390 / $391;
     $393 = (+Math_abs((+$392)));
     $394 = $41;
     $395 = (+Math_abs((+$394)));
     $396 = $393 * $395;
     $397 = ((($47)) + 8|0);
     $398 = +HEAPF64[$397>>3];
     $399 = $398 + $396;
     HEAPF64[$397>>3] = $399;
     $400 = $5;
     $401 = $29;
     $402 = $400 - $401;
     $403 = (+Math_abs((+$402)));
     $404 = $403 + 1.0;
     $405 = 4.4408920985006262E-16 * $404;
     $406 = $41;
     $407 = (+Math_abs((+$406)));
     $408 = $405 * $407;
     $409 = ((($47)) + 8|0);
     $410 = +HEAPF64[$409>>3];
     $411 = $410 + $408;
     HEAPF64[$409>>3] = $411;
     $412 = +HEAPF64[$32>>3];
     $413 = $34;
     $414 = $412 - $413;
     $415 = (+Math_abs((+$414)));
     $416 = $415 + 1.0;
     $417 = ((($47)) + 8|0);
     $418 = +HEAPF64[$417>>3];
     $419 = $418 * $416;
     HEAPF64[$417>>3] = $419;
     $420 = +HEAPF64[$33>>3];
     $421 = $34;
     $422 = $420 - $421;
     $423 = (+Math_abs((+$422)));
     $424 = $423 + 1.0;
     $425 = ((($47)) + 8|0);
     $426 = +HEAPF64[$425>>3];
     $427 = $426 * $424;
     HEAPF64[$425>>3] = $427;
     $428 = +HEAPF64[$46>>3];
     $429 = ((($46)) + 8|0);
     $430 = +HEAPF64[$429>>3];
     $431 = +HEAPF64[$47>>3];
     $432 = ((($47)) + 8|0);
     $433 = +HEAPF64[$432>>3];
     $434 = $8;
     $435 = (_gsl_sf_exp_mult_err_e10_e($428,$430,$431,$433,$434)|0);
     $39 = $435;
    } else {
     $436 = $6;
     $437 = $30;
     $438 = $436 - $437;
     $439 = (+Math_abs((+$438)));
     $440 = $5;
     $441 = $29;
     $442 = $440 - $441;
     $443 = (+Math_abs((+$442)));
     $444 = $439 + $443;
     $445 = $444 + 1.0;
     $48 = $445;
     $446 = (+Math_log(1.3407807929942596E+154));
     $49 = $446;
     $447 = $41;
     $52 = $447;
     $448 = $5;
     $449 = $30;
     $450 = $5;
     $451 = $449 - $450;
     $452 = $451 - 1.0;
     $453 = $448 * $452;
     $454 = $40;
     $455 = $453 * $454;
     $456 = $5;
     $457 = $7;
     $458 = $456 + $457;
     $459 = $41;
     $460 = $458 * $459;
     $461 = $455 + $460;
     $462 = $7;
     $463 = $461 / $462;
     $53 = $463;
     $464 = $30;
     $465 = $464 + 1.0;
     $55 = $465;
     while(1) {
      $466 = $55;
      $467 = $6;
      $468 = $467 - 0.10000000000000001;
      $469 = $466 < $468;
      if (!($469)) {
       break;
      }
      $470 = $5;
      $471 = 1.0 + $470;
      $472 = $55;
      $473 = $471 - $472;
      $474 = $52;
      $475 = $473 * $474;
      $476 = $55;
      $477 = $7;
      $478 = $476 + $477;
      $479 = $478 - 1.0;
      $480 = $53;
      $481 = $479 * $480;
      $482 = $475 + $481;
      $483 = $7;
      $484 = $482 / $483;
      $54 = $484;
      $485 = $53;
      $52 = $485;
      $486 = $54;
      $53 = $486;
      $487 = $53;
      $488 = (+Math_abs((+$487)));
      $56 = $488;
      $489 = $56;
      $490 = $489 > 1.3407807929942596E+154;
      if ($490) {
       $491 = $53;
       $492 = $491 / 1.3407807929942596E+154;
       $53 = $492;
       $493 = $52;
       $494 = $493 / 1.3407807929942596E+154;
       $52 = $494;
       $495 = $31;
       $496 = (($495) + 1)|0;
       $31 = $496;
      } else {
       $497 = $56;
       $498 = $497 < 7.4583407312002084E-155;
       if ($498) {
        $499 = $53;
        $500 = $499 * 1.3407807929942596E+154;
        $53 = $500;
        $501 = $52;
        $502 = $501 * 1.3407807929942596E+154;
        $52 = $502;
        $503 = $31;
        $504 = (($503) + -1)|0;
        $31 = $504;
       }
      }
      $505 = $55;
      $506 = $505 + 1.0;
      $55 = $506;
     }
     $507 = $34;
     $508 = $31;
     $509 = (+($508|0));
     $510 = $49;
     $511 = $509 * $510;
     $512 = $507 + $511;
     HEAPF64[$50>>3] = $512;
     $513 = $34;
     $514 = (+Math_abs((+$513)));
     $515 = $31;
     $516 = (+($515|0));
     $517 = $49;
     $518 = $516 * $517;
     $519 = (+Math_abs((+$518)));
     $520 = $514 + $519;
     $521 = 4.4408920985006262E-16 * $520;
     $522 = ((($50)) + 8|0);
     HEAPF64[$522>>3] = $521;
     $523 = $53;
     HEAPF64[$51>>3] = $523;
     $524 = $48;
     $525 = 2.0 * $524;
     $526 = ((($35)) + 8|0);
     $527 = +HEAPF64[$526>>3];
     $528 = +HEAPF64[$35>>3];
     $529 = $527 / $528;
     $530 = (+Math_abs((+$529)));
     $531 = $525 * $530;
     $532 = $53;
     $533 = (+Math_abs((+$532)));
     $534 = $531 * $533;
     $535 = ((($51)) + 8|0);
     HEAPF64[$535>>3] = $534;
     $536 = $48;
     $537 = 2.0 * $536;
     $538 = ((($36)) + 8|0);
     $539 = +HEAPF64[$538>>3];
     $540 = +HEAPF64[$36>>3];
     $541 = $539 / $540;
     $542 = (+Math_abs((+$541)));
     $543 = $537 * $542;
     $544 = $53;
     $545 = (+Math_abs((+$544)));
     $546 = $543 * $545;
     $547 = ((($51)) + 8|0);
     $548 = +HEAPF64[$547>>3];
     $549 = $548 + $546;
     HEAPF64[$547>>3] = $549;
     $550 = $48;
     $551 = 4.4408920985006262E-16 * $550;
     $552 = $53;
     $553 = (+Math_abs((+$552)));
     $554 = $551 * $553;
     $555 = ((($51)) + 8|0);
     $556 = +HEAPF64[$555>>3];
     $557 = $556 + $554;
     HEAPF64[$555>>3] = $557;
     $558 = +HEAPF64[$32>>3];
     $559 = $34;
     $560 = $558 - $559;
     $561 = (+Math_abs((+$560)));
     $562 = $561 + 1.0;
     $563 = ((($51)) + 8|0);
     $564 = +HEAPF64[$563>>3];
     $565 = $564 * $562;
     HEAPF64[$563>>3] = $565;
     $566 = +HEAPF64[$33>>3];
     $567 = $34;
     $568 = $566 - $567;
     $569 = (+Math_abs((+$568)));
     $570 = $569 + 1.0;
     $571 = ((($51)) + 8|0);
     $572 = +HEAPF64[$571>>3];
     $573 = $572 * $570;
     HEAPF64[$571>>3] = $573;
     $574 = +HEAPF64[$50>>3];
     $575 = ((($50)) + 8|0);
     $576 = +HEAPF64[$575>>3];
     $577 = +HEAPF64[$51>>3];
     $578 = ((($51)) + 8|0);
     $579 = +HEAPF64[$578>>3];
     $580 = $8;
     $581 = (_gsl_sf_exp_mult_err_e10_e($574,$576,$577,$579,$580)|0);
     $39 = $581;
    }
    $582 = $39;
    $583 = ($582|0)!=(0);
    do {
     if ($583) {
      $584 = $39;
      $592 = $584;
     } else {
      $585 = $37;
      $586 = ($585|0)!=(0);
      if ($586) {
       $587 = $37;
       $592 = $587;
       break;
      } else {
       $588 = $38;
       $589 = ($588|0)!=(0);
       $590 = $38;
       $591 = $589 ? $590 : 0;
       $592 = $591;
       break;
      }
     }
    } while(0);
    $4 = $592;
    $1105 = $4;
    STACKTOP = sp;return ($1105|0);
   }
   $593 = $6;
   $594 = $5;
   $595 = 2.0 * $594;
   $596 = $7;
   $597 = $595 + $596;
   $598 = $593 >= $597;
   if ($598) {
    $57 = 0;
    $599 = $5;
    $600 = $5;
    $601 = (+Math_floor((+$600)));
    $602 = $599 - $601;
    $58 = $602;
    $59 = 1.3407807929942596E+154;
    $603 = $58;
    $604 = $603 - 1.0;
    $605 = $6;
    $606 = $7;
    $607 = (_hyperg_U_small_a_bgt0($604,$605,$606,$64,$61)|0);
    $66 = $607;
    $608 = $58;
    $609 = $6;
    $610 = $7;
    $611 = (_hyperg_U_small_a_bgt0($608,$609,$610,$65,$62)|0);
    $67 = $611;
    $612 = +HEAPF64[$64>>3];
    $71 = $612;
    $613 = +HEAPF64[$65>>3];
    $72 = $613;
    $614 = +HEAPF64[$61>>3];
    $615 = +HEAPF64[$62>>3];
    $616 = $614 > $615;
    $617 = +HEAPF64[$61>>3];
    $618 = +HEAPF64[$62>>3];
    $619 = $616 ? $617 : $618;
    $63 = $619;
    $620 = +HEAPF64[$61>>3];
    $621 = $63;
    $622 = $620 - $621;
    $623 = (+Math_exp((+$622)));
    $624 = $71;
    $625 = $624 * $623;
    $71 = $625;
    $626 = +HEAPF64[$62>>3];
    $627 = $63;
    $628 = $626 - $627;
    $629 = (+Math_exp((+$628)));
    $630 = $72;
    $631 = $630 * $629;
    $72 = $631;
    $632 = $58;
    $74 = $632;
    while(1) {
     $633 = $74;
     $634 = $5;
     $635 = $634 - 0.10000000000000001;
     $636 = $633 < $635;
     if (!($636)) {
      break;
     }
     $637 = $71;
     $638 = $6;
     $639 = $74;
     $640 = 2.0 * $639;
     $641 = $638 - $640;
     $642 = $7;
     $643 = $641 - $642;
     $644 = $72;
     $645 = $643 * $644;
     $646 = $637 + $645;
     $647 = - $646;
     $648 = $74;
     $649 = $74;
     $650 = 1.0 + $649;
     $651 = $6;
     $652 = $650 - $651;
     $653 = $648 * $652;
     $654 = $647 / $653;
     $73 = $654;
     $655 = $72;
     $71 = $655;
     $656 = $73;
     $72 = $656;
     $657 = $72;
     $658 = (+Math_abs((+$657)));
     $75 = $658;
     $659 = $75;
     $660 = $659 > 1.3407807929942596E+154;
     if ($660) {
      $661 = $72;
      $662 = $661 / 1.3407807929942596E+154;
      $72 = $662;
      $663 = $71;
      $664 = $663 / 1.3407807929942596E+154;
      $71 = $664;
      $665 = $57;
      $666 = (($665) + 1)|0;
      $57 = $666;
     } else {
      $667 = $75;
      $668 = $667 < 7.4583407312002084E-155;
      if ($668) {
       $669 = $72;
       $670 = $669 * 1.3407807929942596E+154;
       $72 = $670;
       $671 = $71;
       $672 = $671 * 1.3407807929942596E+154;
       $71 = $672;
       $673 = $57;
       $674 = (($673) + -1)|0;
       $57 = $674;
      }
     }
     $675 = $74;
     $676 = $675 + 1.0;
     $74 = $676;
    }
    $677 = (+Math_log(1.3407807929942596E+154));
    $60 = $677;
    $678 = $63;
    $679 = $57;
    $680 = (+($679|0));
    $681 = $60;
    $682 = $680 * $681;
    $683 = $678 + $682;
    HEAPF64[$69>>3] = $683;
    $684 = $63;
    $685 = (+Math_abs((+$684)));
    $686 = $57;
    $687 = (+($686|0));
    $688 = $60;
    $689 = $687 * $688;
    $690 = (+Math_abs((+$689)));
    $691 = $685 + $690;
    $692 = 4.4408920985006262E-16 * $691;
    $693 = ((($69)) + 8|0);
    HEAPF64[$693>>3] = $692;
    $694 = $72;
    HEAPF64[$70>>3] = $694;
    $695 = ((($64)) + 8|0);
    $696 = +HEAPF64[$695>>3];
    $697 = +HEAPF64[$64>>3];
    $698 = $696 / $697;
    $699 = (+Math_abs((+$698)));
    $700 = $72;
    $701 = (+Math_abs((+$700)));
    $702 = $699 * $701;
    $703 = ((($70)) + 8|0);
    HEAPF64[$703>>3] = $702;
    $704 = ((($65)) + 8|0);
    $705 = +HEAPF64[$704>>3];
    $706 = +HEAPF64[$65>>3];
    $707 = $705 / $706;
    $708 = (+Math_abs((+$707)));
    $709 = $72;
    $710 = (+Math_abs((+$709)));
    $711 = $708 * $710;
    $712 = ((($70)) + 8|0);
    $713 = +HEAPF64[$712>>3];
    $714 = $713 + $711;
    HEAPF64[$712>>3] = $714;
    $715 = $5;
    $716 = $58;
    $717 = $715 - $716;
    $718 = (+Math_abs((+$717)));
    $719 = $718 + 1.0;
    $720 = 4.4408920985006262E-16 * $719;
    $721 = $72;
    $722 = (+Math_abs((+$721)));
    $723 = $720 * $722;
    $724 = ((($70)) + 8|0);
    $725 = +HEAPF64[$724>>3];
    $726 = $725 + $723;
    HEAPF64[$724>>3] = $726;
    $727 = +HEAPF64[$61>>3];
    $728 = $63;
    $729 = $727 - $728;
    $730 = (+Math_abs((+$729)));
    $731 = $730 + 1.0;
    $732 = ((($70)) + 8|0);
    $733 = +HEAPF64[$732>>3];
    $734 = $733 * $731;
    HEAPF64[$732>>3] = $734;
    $735 = +HEAPF64[$62>>3];
    $736 = $63;
    $737 = $735 - $736;
    $738 = (+Math_abs((+$737)));
    $739 = $738 + 1.0;
    $740 = ((($70)) + 8|0);
    $741 = +HEAPF64[$740>>3];
    $742 = $741 * $739;
    HEAPF64[$740>>3] = $742;
    $743 = +HEAPF64[$69>>3];
    $744 = ((($69)) + 8|0);
    $745 = +HEAPF64[$744>>3];
    $746 = +HEAPF64[$70>>3];
    $747 = ((($70)) + 8|0);
    $748 = +HEAPF64[$747>>3];
    $749 = $8;
    $750 = (_gsl_sf_exp_mult_err_e10_e($743,$745,$746,$748,$749)|0);
    $68 = $750;
    $751 = $68;
    $752 = ($751|0)!=(0);
    do {
     if ($752) {
      $753 = $68;
      $761 = $753;
     } else {
      $754 = $66;
      $755 = ($754|0)!=(0);
      if ($755) {
       $756 = $66;
       $761 = $756;
       break;
      } else {
       $757 = $67;
       $758 = ($757|0)!=(0);
       $759 = $67;
       $760 = $758 ? $759 : 0;
       $761 = $760;
       break;
      }
     }
    } while(0);
    $4 = $761;
    $1105 = $4;
    STACKTOP = sp;return ($1105|0);
   }
   $762 = $6;
   $763 = $7;
   $764 = $762 <= $763;
   if ($764) {
    $765 = $5;
    $766 = $5;
    $767 = (+Math_floor((+$766)));
    $768 = $765 - $767;
    $76 = $768;
    $77 = 1.3407807929942596E+154;
    $78 = 0;
    $769 = $5;
    $770 = $6;
    $771 = $7;
    $772 = (_hyperg_U_CF1($769,$770,0,$771,$88,$90)|0);
    $91 = $772;
    $773 = +HEAPF64[$88>>3];
    $774 = $5;
    $775 = $773 / $774;
    $89 = $775;
    $84 = 1.4916681462400413E-154;
    $776 = $89;
    $777 = $84;
    $778 = $776 * $777;
    $83 = $778;
    $779 = $5;
    $87 = $779;
    while(1) {
     $780 = $87;
     $781 = $76;
     $782 = $781 + 0.10000000000000001;
     $783 = $780 > $782;
     if (!($783)) {
      break;
     }
     $784 = $6;
     $785 = $87;
     $786 = 2.0 * $785;
     $787 = $784 - $786;
     $788 = $7;
     $789 = $787 - $788;
     $790 = $84;
     $791 = $789 * $790;
     $792 = $87;
     $793 = $87;
     $794 = 1.0 + $793;
     $795 = $6;
     $796 = $794 - $795;
     $797 = $792 * $796;
     $798 = $83;
     $799 = $797 * $798;
     $800 = $791 + $799;
     $801 = - $800;
     $85 = $801;
     $802 = $84;
     $83 = $802;
     $803 = $85;
     $84 = $803;
     $804 = $84;
     $805 = (+Math_abs((+$804)));
     $94 = $805;
     $806 = $94;
     $807 = $806 > 1.3407807929942596E+154;
     if ($807) {
      $808 = $84;
      $809 = $808 / 1.3407807929942596E+154;
      $84 = $809;
      $810 = $83;
      $811 = $810 / 1.3407807929942596E+154;
      $83 = $811;
      $812 = $78;
      $813 = (($812) + 1)|0;
      $78 = $813;
     } else {
      $814 = $94;
      $815 = $814 < 7.4583407312002084E-155;
      if ($815) {
       $816 = $84;
       $817 = $816 * 1.3407807929942596E+154;
       $84 = $817;
       $818 = $83;
       $819 = $818 * 1.3407807929942596E+154;
       $83 = $819;
       $820 = $78;
       $821 = (($820) + -1)|0;
       $78 = $821;
      }
     }
     $822 = $87;
     $823 = $822 - 1.0;
     $87 = $823;
    }
    $824 = $76;
    $825 = $6;
    $826 = $7;
    $827 = (_hyperg_U_small_a_bgt0($824,$825,$826,$86,$82)|0);
    $92 = $827;
    $828 = (+Math_log(1.3407807929942596E+154));
    $81 = $828;
    $829 = +HEAPF64[$82>>3];
    $830 = $78;
    $831 = (+($830|0));
    $832 = $81;
    $833 = $831 * $832;
    $834 = $829 - $833;
    HEAPF64[$79>>3] = $834;
    $835 = +HEAPF64[$82>>3];
    $836 = (+Math_abs((+$835)));
    $837 = $78;
    $838 = (+($837|0));
    $839 = $81;
    $840 = $838 * $839;
    $841 = (+Math_abs((+$840)));
    $842 = $836 + $841;
    $843 = 4.4408920985006262E-16 * $842;
    $844 = ((($79)) + 8|0);
    HEAPF64[$844>>3] = $843;
    $845 = +HEAPF64[$86>>3];
    $846 = $84;
    $847 = $845 / $846;
    $848 = 1.4916681462400413E-154 * $847;
    HEAPF64[$80>>3] = $848;
    $849 = ((($86)) + 8|0);
    $850 = +HEAPF64[$849>>3];
    $851 = $84;
    $852 = (+Math_abs((+$851)));
    $853 = $850 / $852;
    $854 = 1.4916681462400413E-154 * $853;
    $855 = ((($80)) + 8|0);
    HEAPF64[$855>>3] = $854;
    $856 = $76;
    $857 = $5;
    $858 = $856 - $857;
    $859 = (+Math_abs((+$858)));
    $860 = HEAP32[$90>>2]|0;
    $861 = (+($860|0));
    $862 = $859 + $861;
    $863 = $862 + 1.0;
    $864 = 4.4408920985006262E-16 * $863;
    $865 = +HEAPF64[$80>>3];
    $866 = (+Math_abs((+$865)));
    $867 = $864 * $866;
    $868 = ((($80)) + 8|0);
    $869 = +HEAPF64[$868>>3];
    $870 = $869 + $867;
    HEAPF64[$868>>3] = $870;
    $871 = +HEAPF64[$79>>3];
    $872 = ((($79)) + 8|0);
    $873 = +HEAPF64[$872>>3];
    $874 = +HEAPF64[$80>>3];
    $875 = ((($80)) + 8|0);
    $876 = +HEAPF64[$875>>3];
    $877 = $8;
    $878 = (_gsl_sf_exp_mult_err_e10_e($871,$873,$874,$876,$877)|0);
    $93 = $878;
    $879 = $93;
    $880 = ($879|0)!=(0);
    do {
     if ($880) {
      $881 = $93;
      $889 = $881;
     } else {
      $882 = $92;
      $883 = ($882|0)!=(0);
      if ($883) {
       $884 = $92;
       $889 = $884;
       break;
      } else {
       $885 = $91;
       $886 = ($885|0)!=(0);
       $887 = $91;
       $888 = $886 ? $887 : 0;
       $889 = $888;
       break;
      }
     }
    } while(0);
    $4 = $889;
    $1105 = $4;
    STACKTOP = sp;return ($1105|0);
   }
   $95 = 0;
   $96 = 0;
   $97 = 1.3407807929942596E+154;
   $890 = $5;
   $891 = $5;
   $892 = (+Math_floor((+$891)));
   $893 = $890 - $892;
   $98 = $893;
   $894 = $98;
   $895 = $894 == 0.0;
   $896 = $98;
   $897 = $895 ? 1.0 : $896;
   $99 = $897;
   $898 = $99;
   $899 = $6;
   $900 = $7;
   $901 = $899 - $900;
   $902 = 0.5 * $901;
   $903 = $99;
   $904 = $902 - $903;
   $905 = (+Math_ceil((+$904)));
   $906 = $898 + $905;
   $100 = $906;
   $907 = $5;
   $908 = $6;
   $909 = $7;
   $910 = (_hyperg_U_CF1($907,$908,0,$909,$115,$110)|0);
   $117 = $910;
   $911 = +HEAPF64[$115>>3];
   $912 = $5;
   $913 = $911 / $912;
   $116 = $913;
   $112 = 1.4916681462400413E-154;
   $914 = $116;
   $915 = $112;
   $916 = $914 * $915;
   $111 = $916;
   $917 = $5;
   $114 = $917;
   while(1) {
    $918 = $114;
    $919 = $100;
    $920 = $919 + 0.10000000000000001;
    $921 = $918 > $920;
    if (!($921)) {
     break;
    }
    $922 = $6;
    $923 = $114;
    $924 = 2.0 * $923;
    $925 = $922 - $924;
    $926 = $7;
    $927 = $925 - $926;
    $928 = $112;
    $929 = $927 * $928;
    $930 = $114;
    $931 = $114;
    $932 = 1.0 + $931;
    $933 = $6;
    $934 = $932 - $933;
    $935 = $930 * $934;
    $936 = $111;
    $937 = $935 * $936;
    $938 = $929 + $937;
    $939 = - $938;
    $113 = $939;
    $940 = $112;
    $111 = $940;
    $941 = $113;
    $112 = $941;
    $942 = $112;
    $943 = (+Math_abs((+$942)));
    $118 = $943;
    $944 = $118;
    $945 = $944 > 1.3407807929942596E+154;
    if ($945) {
     $946 = $112;
     $947 = $946 / 1.3407807929942596E+154;
     $112 = $947;
     $948 = $111;
     $949 = $948 / 1.3407807929942596E+154;
     $111 = $949;
     $950 = $96;
     $951 = (($950) + 1)|0;
     $96 = $951;
    } else {
     $952 = $118;
     $953 = $952 < 7.4583407312002084E-155;
     if ($953) {
      $954 = $112;
      $955 = $954 * 1.3407807929942596E+154;
      $112 = $955;
      $956 = $111;
      $957 = $956 * 1.3407807929942596E+154;
      $111 = $957;
      $958 = $96;
      $959 = (($958) + -1)|0;
      $96 = $959;
     }
    }
    $960 = $114;
    $961 = $960 - 1.0;
    $114 = $961;
   }
   $962 = $112;
   $105 = $962;
   $963 = $117;
   $108 = $963;
   $964 = $99;
   $965 = $964 - 1.0;
   $966 = $6;
   $967 = $7;
   $968 = (_hyperg_U_small_a_bgt0($965,$966,$967,$119,$121)|0);
   $123 = $968;
   $969 = $99;
   $970 = $6;
   $971 = $7;
   $972 = (_hyperg_U_small_a_bgt0($969,$970,$971,$120,$122)|0);
   $124 = $972;
   $973 = +HEAPF64[$119>>3];
   $125 = $973;
   $974 = +HEAPF64[$120>>3];
   $126 = $974;
   $975 = +HEAPF64[$121>>3];
   $976 = +HEAPF64[$122>>3];
   $977 = $975 > $976;
   $978 = +HEAPF64[$121>>3];
   $979 = +HEAPF64[$122>>3];
   $980 = $977 ? $978 : $979;
   $103 = $980;
   $981 = +HEAPF64[$121>>3];
   $982 = $103;
   $983 = $981 - $982;
   $984 = (+Math_exp((+$983)));
   $985 = $125;
   $986 = $985 * $984;
   $125 = $986;
   $987 = +HEAPF64[$122>>3];
   $988 = $103;
   $989 = $987 - $988;
   $990 = (+Math_exp((+$989)));
   $991 = $126;
   $992 = $991 * $990;
   $126 = $992;
   $993 = $99;
   $128 = $993;
   while(1) {
    $994 = $128;
    $995 = $100;
    $996 = $995 - 0.10000000000000001;
    $997 = $994 < $996;
    if (!($997)) {
     break;
    }
    $998 = $125;
    $999 = $6;
    $1000 = $128;
    $1001 = 2.0 * $1000;
    $1002 = $999 - $1001;
    $1003 = $7;
    $1004 = $1002 - $1003;
    $1005 = $126;
    $1006 = $1004 * $1005;
    $1007 = $998 + $1006;
    $1008 = - $1007;
    $1009 = $128;
    $1010 = $128;
    $1011 = 1.0 + $1010;
    $1012 = $6;
    $1013 = $1011 - $1012;
    $1014 = $1009 * $1013;
    $1015 = $1008 / $1014;
    $127 = $1015;
    $1016 = $126;
    $125 = $1016;
    $1017 = $127;
    $126 = $1017;
    $1018 = $126;
    $1019 = (+Math_abs((+$1018)));
    $129 = $1019;
    $1020 = $129;
    $1021 = $1020 > 1.3407807929942596E+154;
    if ($1021) {
     $1022 = $126;
     $1023 = $1022 / 1.3407807929942596E+154;
     $126 = $1023;
     $1024 = $125;
     $1025 = $1024 / 1.3407807929942596E+154;
     $125 = $1025;
     $1026 = $95;
     $1027 = (($1026) + 1)|0;
     $95 = $1027;
    } else {
     $1028 = $129;
     $1029 = $1028 < 7.4583407312002084E-155;
     if ($1029) {
      $1030 = $126;
      $1031 = $1030 * 1.3407807929942596E+154;
      $126 = $1031;
      $1032 = $125;
      $1033 = $1032 * 1.3407807929942596E+154;
      $125 = $1033;
      $1034 = $95;
      $1035 = (($1034) + -1)|0;
      $95 = $1035;
     }
    }
    $1036 = $128;
    $1037 = $1036 + 1.0;
    $128 = $1037;
   }
   $1038 = $126;
   $106 = $1038;
   $1039 = $123;
   $1040 = ($1039|0)!=(0);
   if ($1040) {
    $1041 = $123;
    $1046 = $1041;
   } else {
    $1042 = $124;
    $1043 = ($1042|0)!=(0);
    $1044 = $124;
    $1045 = $1043 ? $1044 : 0;
    $1046 = $1045;
   }
   $107 = $1046;
   $1047 = (+Math_log(1.3407807929942596E+154));
   $104 = $1047;
   $1048 = $103;
   $1049 = $95;
   $1050 = $96;
   $1051 = (($1049) - ($1050))|0;
   $1052 = (+($1051|0));
   $1053 = $104;
   $1054 = $1052 * $1053;
   $1055 = $1048 + $1054;
   HEAPF64[$101>>3] = $1055;
   $1056 = $103;
   $1057 = (+Math_abs((+$1056)));
   $1058 = $95;
   $1059 = $96;
   $1060 = (($1058) - ($1059))|0;
   $1061 = (+($1060|0));
   $1062 = (+Math_abs((+$1061)));
   $1063 = $104;
   $1064 = (+Math_abs((+$1063)));
   $1065 = $1062 * $1064;
   $1066 = $1057 + $1065;
   $1067 = 4.4408920985006262E-16 * $1066;
   $1068 = ((($101)) + 8|0);
   HEAPF64[$1068>>3] = $1067;
   $1069 = $106;
   $1070 = 1.4916681462400413E-154 * $1069;
   $1071 = $105;
   $1072 = $1070 / $1071;
   HEAPF64[$102>>3] = $1072;
   $1073 = $5;
   $1074 = $99;
   $1075 = $1073 - $1074;
   $1076 = (+Math_abs((+$1075)));
   $1077 = HEAP32[$110>>2]|0;
   $1078 = (+($1077|0));
   $1079 = $1076 + $1078;
   $1080 = $1079 + 1.0;
   $1081 = 4.4408920985006262E-16 * $1080;
   $1082 = +HEAPF64[$102>>3];
   $1083 = (+Math_abs((+$1082)));
   $1084 = $1081 * $1083;
   $1085 = ((($102)) + 8|0);
   HEAPF64[$1085>>3] = $1084;
   $1086 = +HEAPF64[$101>>3];
   $1087 = ((($101)) + 8|0);
   $1088 = +HEAPF64[$1087>>3];
   $1089 = +HEAPF64[$102>>3];
   $1090 = ((($102)) + 8|0);
   $1091 = +HEAPF64[$1090>>3];
   $1092 = $8;
   $1093 = (_gsl_sf_exp_mult_err_e10_e($1086,$1088,$1089,$1091,$1092)|0);
   $109 = $1093;
   $1094 = $109;
   $1095 = ($1094|0)!=(0);
   do {
    if ($1095) {
     $1096 = $109;
     $1104 = $1096;
    } else {
     $1097 = $108;
     $1098 = ($1097|0)!=(0);
     if ($1098) {
      $1099 = $108;
      $1104 = $1099;
      break;
     } else {
      $1100 = $107;
      $1101 = ($1100|0)!=(0);
      $1102 = $107;
      $1103 = $1101 ? $1102 : 0;
      $1104 = $1103;
      break;
     }
    }
   } while(0);
   $4 = $1104;
   $1105 = $4;
   STACKTOP = sp;return ($1105|0);
  }
 }
 $262 = $5;
 $263 = $6;
 $264 = $7;
 $265 = (_hyperg_U_series($262,$263,$264,$26)|0);
 $27 = $265;
 $266 = +HEAPF64[$26>>3];
 $267 = $8;
 HEAPF64[$267>>3] = $266;
 $268 = ((($26)) + 8|0);
 $269 = +HEAPF64[$268>>3];
 $270 = $8;
 $271 = ((($270)) + 8|0);
 HEAPF64[$271>>3] = $269;
 $272 = $8;
 $273 = ((($272)) + 16|0);
 HEAP32[$273>>2] = 0;
 $274 = $27;
 $4 = $274;
 $1105 = $4;
 STACKTOP = sp;return ($1105|0);
}
function _gsl_sf_laguerre_2_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = $10 == -2.0;
 if ($11) {
  $12 = $5;
  $13 = 0.5 * $12;
  $14 = $5;
  $15 = $13 * $14;
  $16 = $6;
  HEAPF64[$16>>3] = $15;
  $17 = $6;
  $18 = +HEAPF64[$17>>3];
  $19 = (+Math_abs((+$18)));
  $20 = 4.4408920985006262E-16 * $19;
  $21 = $6;
  $22 = ((($21)) + 8|0);
  HEAPF64[$22>>3] = $20;
  $3 = 0;
  $72 = $3;
  STACKTOP = sp;return ($72|0);
 } else {
  $23 = $4;
  $24 = 2.0 + $23;
  $25 = 0.5 * $24;
  $26 = $4;
  $27 = 1.0 + $26;
  $28 = $25 * $27;
  $7 = $28;
  $29 = $4;
  $30 = 2.0 + $29;
  $31 = - $30;
  $8 = $31;
  $32 = $4;
  $33 = 2.0 + $32;
  $34 = -0.5 / $33;
  $9 = $34;
  $35 = $7;
  $36 = $8;
  $37 = $5;
  $38 = $36 * $37;
  $39 = $9;
  $40 = $5;
  $41 = $39 * $40;
  $42 = 1.0 + $41;
  $43 = $38 * $42;
  $44 = $35 + $43;
  $45 = $6;
  HEAPF64[$45>>3] = $44;
  $46 = $7;
  $47 = (+Math_abs((+$46)));
  $48 = $8;
  $49 = $5;
  $50 = $48 * $49;
  $51 = (+Math_abs((+$50)));
  $52 = 2.0 * $51;
  $53 = $9;
  $54 = $5;
  $55 = $53 * $54;
  $56 = (+Math_abs((+$55)));
  $57 = 2.0 * $56;
  $58 = 1.0 + $57;
  $59 = $52 * $58;
  $60 = $47 + $59;
  $61 = 4.4408920985006262E-16 * $60;
  $62 = $6;
  $63 = ((($62)) + 8|0);
  HEAPF64[$63>>3] = $61;
  $64 = $6;
  $65 = +HEAPF64[$64>>3];
  $66 = (+Math_abs((+$65)));
  $67 = 4.4408920985006262E-16 * $66;
  $68 = $6;
  $69 = ((($68)) + 8|0);
  $70 = +HEAPF64[$69>>3];
  $71 = $70 + $67;
  HEAPF64[$69>>3] = $71;
  $3 = 0;
  $72 = $3;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _gsl_sf_laguerre_n_e($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $11 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = $5;
 $18 = ($17|0)<(0);
 if ($18) {
  $19 = $8;
  HEAPF64[$19>>3] = nan;
  $20 = $8;
  $21 = ((($20)) + 8|0);
  HEAPF64[$21>>3] = nan;
  _gsl_error(83774,83642,244,1);
  $4 = 1;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 }
 $22 = $5;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = $8;
  HEAPF64[$24>>3] = 1.0;
  $25 = $8;
  $26 = ((($25)) + 8|0);
  HEAPF64[$26>>3] = 0.0;
  $4 = 0;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 }
 $27 = $5;
 $28 = ($27|0)==(1);
 if ($28) {
  $29 = $6;
  $30 = 1.0 + $29;
  $31 = $7;
  $32 = $30 - $31;
  $33 = $8;
  HEAPF64[$33>>3] = $32;
  $34 = $6;
  $35 = (+Math_abs((+$34)));
  $36 = 1.0 + $35;
  $37 = $7;
  $38 = (+Math_abs((+$37)));
  $39 = $36 + $38;
  $40 = 4.4408920985006262E-16 * $39;
  $41 = $8;
  $42 = ((($41)) + 8|0);
  HEAPF64[$42>>3] = $40;
  $4 = 0;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 }
 $43 = $7;
 $44 = $43 == 0.0;
 if ($44) {
  $45 = $6;
  $46 = $45 + 1.0;
  $9 = $46;
  $10 = 2;
  while(1) {
   $47 = $10;
   $48 = $5;
   $49 = ($47|0)<=($48|0);
   if (!($49)) {
    break;
   }
   $50 = $6;
   $51 = $10;
   $52 = (+($51|0));
   $53 = $50 + $52;
   $54 = $10;
   $55 = (+($54|0));
   $56 = $53 / $55;
   $57 = $9;
   $58 = $57 * $56;
   $9 = $58;
   $59 = $10;
   $60 = (($59) + 1)|0;
   $10 = $60;
  }
  $61 = $9;
  $62 = $8;
  HEAPF64[$62>>3] = $61;
  $63 = $5;
  $64 = (+($63|0));
  $65 = $64 + 1.0;
  $66 = 2.0 * $65;
  $67 = $66 * 2.2204460492503131E-16;
  $68 = $9;
  $69 = (+Math_abs((+$68)));
  $70 = $67 * $69;
  $71 = $70 + 2.2204460492503131E-16;
  $72 = $8;
  $73 = ((($72)) + 8|0);
  HEAPF64[$73>>3] = $71;
  $4 = 0;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 }
 $74 = $7;
 $75 = $74 < 0.0;
 $76 = $6;
 $77 = $76 > -1.0;
 $or$cond = $75 & $77;
 $78 = $5;
 if ($or$cond) {
  $79 = $6;
  $80 = $7;
  $81 = $8;
  $82 = (_laguerre_n_cp($78,$79,$80,$81)|0);
  $4 = $82;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 }
 $83 = ($78|0)<(5);
 do {
  if (!($83)) {
   $84 = $7;
   $85 = $84 > 0.0;
   if ($85) {
    $86 = $6;
    $87 = $5;
    $88 = (0 - ($87))|0;
    $89 = (($88) - 1)|0;
    $90 = (+($89|0));
    $91 = $86 < $90;
    if ($91) {
     break;
    }
   }
   $103 = $5;
   $104 = (+($103|0));
   $105 = $104 > 1.0E+7;
   $106 = $7;
   $107 = $106 > 0.0;
   $or$cond3 = $105 & $107;
   $108 = $6;
   $109 = $108 > -1.0;
   $or$cond5 = $or$cond3 & $109;
   if ($or$cond5) {
    $110 = $7;
    $111 = $6;
    $112 = $111 + 1.0;
    $113 = 2.0 * $112;
    $114 = $5;
    $115 = (+($114|0));
    $116 = 4.0 * $115;
    $117 = $113 + $116;
    $118 = $110 < $117;
    if ($118) {
     $119 = $5;
     $120 = $6;
     $121 = $7;
     $122 = $8;
     $123 = (_laguerre_large_n($119,$120,$121,$122)|0);
     $4 = $123;
     $193 = $4;
     STACKTOP = sp;return ($193|0);
    }
   }
   $124 = $6;
   $125 = $124 >= 0.0;
   do {
    if (!($125)) {
     $126 = $7;
     $127 = $126 > 0.0;
     if ($127) {
      $128 = $6;
      $129 = $5;
      $130 = (0 - ($129))|0;
      $131 = (($130) - 1)|0;
      $132 = (+($131|0));
      $133 = $128 < $132;
      if ($133) {
       break;
      }
     }
     $188 = $5;
     $189 = $6;
     $190 = $7;
     $191 = $8;
     $192 = (_laguerre_n_poly_safe($188,$189,$190,$191)|0);
     $4 = $192;
     $193 = $4;
     STACKTOP = sp;return ($193|0);
    }
   } while(0);
   $134 = $6;
   $135 = $7;
   $136 = (_gsl_sf_laguerre_2_e($134,$135,$11)|0);
   $12 = $136;
   $137 = $6;
   $138 = 1.0 + $137;
   $139 = $7;
   $140 = $138 - $139;
   $13 = $140;
   $141 = +HEAPF64[$11>>3];
   $14 = $141;
   $16 = 2;
   while(1) {
    $142 = $16;
    $143 = $5;
    $144 = ($142|0)<($143|0);
    if (!($144)) {
     break;
    }
    $145 = $16;
    $146 = (+($145|0));
    $147 = $6;
    $148 = $146 + $147;
    $149 = - $148;
    $150 = $13;
    $151 = $149 * $150;
    $152 = $16;
    $153 = (+($152|0));
    $154 = 2.0 * $153;
    $155 = $6;
    $156 = $154 + $155;
    $157 = $156 + 1.0;
    $158 = $7;
    $159 = $157 - $158;
    $160 = $14;
    $161 = $159 * $160;
    $162 = $151 + $161;
    $163 = $16;
    $164 = (+($163|0));
    $165 = $164 + 1.0;
    $166 = $162 / $165;
    $15 = $166;
    $167 = $14;
    $13 = $167;
    $168 = $15;
    $14 = $168;
    $169 = $16;
    $170 = (($169) + 1)|0;
    $16 = $170;
   }
   $171 = $14;
   $172 = $8;
   HEAPF64[$172>>3] = $171;
   $173 = ((($11)) + 8|0);
   $174 = +HEAPF64[$173>>3];
   $175 = +HEAPF64[$11>>3];
   $176 = $174 / $175;
   $177 = (+Math_abs((+$176)));
   $178 = $177 + 2.2204460492503131E-16;
   $179 = $5;
   $180 = (+($179|0));
   $181 = $178 * $180;
   $182 = $14;
   $183 = (+Math_abs((+$182)));
   $184 = $181 * $183;
   $185 = $8;
   $186 = ((($185)) + 8|0);
   HEAPF64[$186>>3] = $184;
   $187 = $12;
   $4 = $187;
   $193 = $4;
   STACKTOP = sp;return ($193|0);
  }
 } while(0);
 $92 = $5;
 $93 = $6;
 $94 = $7;
 $95 = $8;
 $96 = (_laguerre_n_cp($92,$93,$94,$95)|0);
 $97 = ($96|0)==(0);
 if ($97) {
  $4 = 0;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 } else {
  $98 = $5;
  $99 = $6;
  $100 = $7;
  $101 = $8;
  $102 = (_laguerre_n_poly_safe($98,$99,$100,$101)|0);
  $4 = $102;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 }
 return (0)|0;
}
function _laguerre_n_cp($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $9 = sp + 96|0;
 $10 = sp + 80|0;
 $11 = sp + 64|0;
 $12 = sp + 56|0;
 $13 = sp + 48|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $25 = $5;
 $26 = (_gsl_sf_lnfact_e($25,$9)|0);
 $14 = $26;
 $27 = $6;
 $28 = $27 + 1.0;
 $29 = $5;
 $30 = (+($29|0));
 $31 = $28 + $30;
 $32 = (_gsl_sf_lngamma_sgn_e($31,$10,$12)|0);
 $15 = $32;
 $33 = $6;
 $34 = $33 + 1.0;
 $35 = (_gsl_sf_lngamma_sgn_e($34,$11,$13)|0);
 $16 = $35;
 $17 = 1.0;
 $18 = 0.0;
 $36 = +HEAPF64[$10>>3];
 $37 = +HEAPF64[$11>>3];
 $38 = $36 - $37;
 $39 = +HEAPF64[$9>>3];
 $40 = $38 - $39;
 $21 = $40;
 $41 = ((($10)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = ((($11)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $42 + $44;
 $46 = ((($9)) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $45 + $47;
 $49 = $21;
 $50 = (+Math_abs((+$49)));
 $51 = 4.4408920985006262E-16 * $50;
 $52 = $48 + $51;
 $22 = $52;
 $53 = $5;
 $54 = (($53) - 1)|0;
 $20 = $54;
 while(1) {
  $55 = $20;
  $56 = ($55|0)>=(0);
  if (!($56)) {
   break;
  }
  $57 = $5;
  $58 = (0 - ($57))|0;
  $59 = $20;
  $60 = (($58) + ($59))|0;
  $61 = (+($60|0));
  $62 = $6;
  $63 = $62 + 1.0;
  $64 = $20;
  $65 = (+($64|0));
  $66 = $63 + $65;
  $67 = $61 / $66;
  $68 = $7;
  $69 = $20;
  $70 = (($69) + 1)|0;
  $71 = (+($70|0));
  $72 = $68 / $71;
  $73 = $67 * $72;
  $23 = $73;
  $74 = $23;
  $75 = $17;
  $76 = 1.0 / $75;
  $77 = $74 + $76;
  $24 = $77;
  $78 = $24;
  $79 = $17;
  $80 = 1.6179238213760842E+308 / $79;
  $81 = $78 > $80;
  if ($81) {
   label = 4;
   break;
  }
  $85 = $23;
  $86 = $17;
  $87 = $85 * $86;
  $88 = 1.0 + $87;
  $17 = $88;
  $89 = $23;
  $90 = (+Math_abs((+$89)));
  $91 = $18;
  $92 = $90 * $91;
  $93 = 2.2204460492503131E-16 + $92;
  $94 = $18;
  $95 = $94 + $93;
  $18 = $95;
  $96 = $20;
  $97 = (($96) + -1)|0;
  $20 = $97;
 }
 if ((label|0) == 4) {
  $82 = $8;
  HEAPF64[$82>>3] = inf;
  $83 = $8;
  $84 = ((($83)) + 8|0);
  HEAPF64[$84>>3] = inf;
  $4 = 16;
  $118 = $4;
  STACKTOP = sp;return ($118|0);
 }
 $98 = $21;
 $99 = $22;
 $100 = $17;
 $101 = $18;
 $102 = $8;
 $103 = (_gsl_sf_exp_mult_err_e($98,$99,$100,$101,$102)|0);
 $19 = $103;
 $104 = $19;
 $105 = ($104|0)!=(0);
 do {
  if ($105) {
   $106 = $19;
   $117 = $106;
  } else {
   $107 = $14;
   $108 = ($107|0)!=(0);
   if ($108) {
    $109 = $14;
    $117 = $109;
    break;
   }
   $110 = $15;
   $111 = ($110|0)!=(0);
   if ($111) {
    $112 = $15;
    $117 = $112;
    break;
   } else {
    $113 = $16;
    $114 = ($113|0)!=(0);
    $115 = $16;
    $116 = $114 ? $115 : 0;
    $117 = $116;
    break;
   }
  }
 } while(0);
 $4 = $117;
 $118 = $4;
 STACKTOP = sp;return ($118|0);
}
function _laguerre_n_poly_safe($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $12 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $18 = $6;
 $19 = $18 + 1.0;
 $9 = $19;
 $20 = $7;
 $21 = - $20;
 $10 = $21;
 $22 = $7;
 $23 = $22 < 0.0;
 if ($23) {
  $28 = 1.0;
 } else {
  $24 = $5;
  $25 = $24 & 1;
  $26 = ($25|0)!=(0);
  $27 = $26 ? -1.0 : 1.0;
  $28 = $27;
 }
 $11 = $28;
 $29 = $5;
 $30 = $7;
 $31 = (+Math_abs((+$30)));
 $32 = (_gsl_sf_taylorcoeff_e($29,$31,$12)|0);
 $13 = $32;
 $33 = $13;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $82 = $8;
  HEAPF64[$82>>3] = 0.0;
  $83 = $8;
  $84 = ((($83)) + 8|0);
  HEAPF64[$84>>3] = 0.0;
  $85 = $13;
  $4 = $85;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $35 = +HEAPF64[$12>>3];
 $36 = $11;
 $37 = $35 * $36;
 $14 = $37;
 $38 = $14;
 $15 = $38;
 $39 = ((($12)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $16 = $40;
 $41 = $5;
 $42 = (($41) - 1)|0;
 $17 = $42;
 while(1) {
  $43 = $17;
  $44 = ($43|0)>=(0);
  if (!($44)) {
   break;
  }
  $45 = $9;
  $46 = $17;
  $47 = (+($46|0));
  $48 = $45 + $47;
  $49 = $5;
  $50 = $17;
  $51 = (($49) - ($50))|0;
  $52 = (+($51|0));
  $53 = $48 / $52;
  $54 = $17;
  $55 = (+($54|0));
  $56 = $55 + 1.0;
  $57 = $53 * $56;
  $58 = $10;
  $59 = $57 / $58;
  $60 = $14;
  $61 = $60 * $59;
  $14 = $61;
  $62 = $14;
  $63 = $15;
  $64 = $63 + $62;
  $15 = $64;
  $65 = $14;
  $66 = (+Math_abs((+$65)));
  $67 = 8.8817841970012523E-16 * $66;
  $68 = $16;
  $69 = $68 + $67;
  $16 = $69;
  $70 = $17;
  $71 = (($70) + -1)|0;
  $17 = $71;
 }
 $72 = $15;
 $73 = $8;
 HEAPF64[$73>>3] = $72;
 $74 = $16;
 $75 = $8;
 $76 = +HEAPF64[$75>>3];
 $77 = (+Math_abs((+$76)));
 $78 = 4.4408920985006262E-16 * $77;
 $79 = $74 + $78;
 $80 = $8;
 $81 = ((($80)) + 8|0);
 HEAPF64[$81>>3] = $79;
 $4 = 0;
 $86 = $4;
 STACKTOP = sp;return ($86|0);
}
function _laguerre_large_n($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $15 = sp + 96|0;
 $16 = sp + 80|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $30 = $4;
 $31 = (0 - ($30))|0;
 $32 = (+($31|0));
 $8 = $32;
 $33 = $5;
 $34 = $33 + 1.0;
 $9 = $34;
 $35 = $9;
 $36 = 2.0 * $35;
 $37 = $8;
 $38 = 4.0 * $37;
 $39 = $36 - $38;
 $10 = $39;
 $40 = $6;
 $41 = $10;
 $42 = $40 / $41;
 $11 = $42;
 $43 = $11;
 $44 = 1.0 - $43;
 $12 = $44;
 $45 = $11;
 $46 = (+Math_sqrt((+$45)));
 $47 = (+Math_asin((+$46)));
 $13 = $47;
 $48 = $10;
 $49 = 2.4674011002723395 * $48;
 $50 = $10;
 $51 = $49 * $50;
 $52 = $11;
 $53 = $51 * $52;
 $54 = $12;
 $55 = $53 * $54;
 $14 = $55;
 $56 = $9;
 $57 = $4;
 $58 = (+($57|0));
 $59 = $56 + $58;
 $60 = (_gsl_sf_lngamma_e($59,$15)|0);
 $17 = $60;
 $61 = $4;
 $62 = (_gsl_sf_lnfact_e($61,$16)|0);
 $18 = $62;
 $63 = $9;
 $64 = 1.0 - $63;
 $65 = 0.5 * $64;
 $66 = $6;
 $67 = 0.25 * $66;
 $68 = $10;
 $69 = $67 * $68;
 $70 = (+Math_log((+$69)));
 $71 = $65 * $70;
 $19 = $71;
 $72 = $14;
 $73 = (+Math_log((+$72)));
 $74 = 0.25 * $73;
 $20 = $74;
 $75 = +HEAPF64[$15>>3];
 $76 = +HEAPF64[$16>>3];
 $77 = $75 - $76;
 $78 = $6;
 $79 = 0.5 * $78;
 $80 = $77 + $79;
 $81 = $19;
 $82 = $80 + $81;
 $83 = $20;
 $84 = $82 - $83;
 $21 = $84;
 $85 = ((($15)) + 8|0);
 $86 = +HEAPF64[$85>>3];
 $87 = ((($16)) + 8|0);
 $88 = +HEAPF64[$87>>3];
 $89 = $86 + $88;
 $90 = $19;
 $91 = (+Math_abs((+$90)));
 $92 = $20;
 $93 = (+Math_abs((+$92)));
 $94 = $91 + $93;
 $95 = 2.2204460492503131E-16 * $94;
 $96 = $89 + $95;
 $22 = $96;
 $97 = $10;
 $98 = 0.25 * $97;
 $99 = $13;
 $100 = 2.0 * $99;
 $101 = $13;
 $102 = 2.0 * $101;
 $103 = (+Math_sin((+$102)));
 $104 = $100 + $103;
 $105 = $98 * $104;
 $23 = $105;
 $106 = $23;
 $107 = (+Math_sin((+$106)));
 $108 = - $107;
 $24 = $108;
 $109 = $12;
 $110 = 4.0 * $109;
 $111 = 5.0 / $110;
 $112 = $9;
 $113 = 3.0 * $112;
 $114 = $9;
 $115 = $113 * $114;
 $116 = $9;
 $117 = 6.0 * $116;
 $118 = $115 - $117;
 $119 = $118 + 2.0;
 $120 = $12;
 $121 = $119 * $120;
 $122 = $111 + $121;
 $123 = $122 - 1.0;
 $124 = 0.083333333333333329 * $123;
 $25 = $124;
 $125 = $25;
 $126 = - $125;
 $127 = $23;
 $128 = (+Math_cos((+$127)));
 $129 = $126 * $128;
 $130 = $10;
 $131 = 0.25 * $130;
 $132 = $13;
 $133 = 2.0 * $132;
 $134 = (+Math_sin((+$133)));
 $135 = $131 * $134;
 $136 = $129 / $135;
 $26 = $136;
 $137 = $24;
 $138 = $26;
 $139 = $137 + $138;
 $27 = $139;
 $140 = $26;
 $141 = $26;
 $142 = $140 * $141;
 $143 = $24;
 $144 = (+Math_abs((+$143)));
 $145 = $26;
 $146 = (+Math_abs((+$145)));
 $147 = $144 + $146;
 $148 = 2.2204460492503131E-16 * $147;
 $149 = $142 + $148;
 $28 = $149;
 $150 = $21;
 $151 = $22;
 $152 = $27;
 $153 = $28;
 $154 = $7;
 $155 = (_gsl_sf_exp_mult_err_e($150,$151,$152,$153,$154)|0);
 $29 = $155;
 $156 = $7;
 $157 = +HEAPF64[$156>>3];
 $158 = (+Math_abs((+$157)));
 $159 = 2.9802322387695313E-8 * $158;
 $160 = $7;
 $161 = ((($160)) + 8|0);
 $162 = +HEAPF64[$161>>3];
 $163 = $162 + $159;
 HEAPF64[$161>>3] = $163;
 $164 = $29;
 $165 = ($164|0)!=(0);
 if ($165) {
  $166 = $29;
  $174 = $166;
  STACKTOP = sp;return ($174|0);
 }
 $167 = $18;
 $168 = ($167|0)!=(0);
 if ($168) {
  $169 = $18;
  $174 = $169;
  STACKTOP = sp;return ($174|0);
 } else {
  $170 = $17;
  $171 = ($170|0)!=(0);
  $172 = $17;
  $173 = $171 ? $172 : 0;
  $174 = $173;
  STACKTOP = sp;return ($174|0);
 }
 return (0)|0;
}
function _gsl_sf_log_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 <= 0.0;
 if ($6) {
  $7 = $4;
  HEAPF64[$7>>3] = nan;
  $8 = $4;
  $9 = ((($8)) + 8|0);
  HEAPF64[$9>>3] = nan;
  _gsl_error(83774,83653,116,1);
  $2 = 1;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $10 = $3;
  $11 = (+Math_log((+$10)));
  $12 = $4;
  HEAPF64[$12>>3] = $11;
  $13 = $4;
  $14 = +HEAPF64[$13>>3];
  $15 = (+Math_abs((+$14)));
  $16 = 4.4408920985006262E-16 * $15;
  $17 = $4;
  $18 = ((($17)) + 8|0);
  HEAPF64[$18>>3] = $16;
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _gsl_sf_log_1plusx_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0;
 var $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $17 = $3;
 $18 = $17 <= -1.0;
 if ($18) {
  $19 = $4;
  HEAPF64[$19>>3] = nan;
  $20 = $4;
  $21 = ((($20)) + 8|0);
  HEAPF64[$21>>3] = nan;
  _gsl_error(83774,83653,170,1);
  $2 = 1;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $22 = $3;
 $23 = (+Math_abs((+$22)));
 $24 = $23 < 0.0024607833005759251;
 if ($24) {
  $5 = -0.5;
  $6 = 0.33333333333333331;
  $7 = -0.25;
  $8 = 0.20000000000000001;
  $9 = -0.16666666666666666;
  $10 = 0.14285714285714285;
  $11 = -0.125;
  $12 = 0.1111111111111111;
  $13 = -0.10000000000000001;
  $25 = $3;
  $26 = $3;
  $27 = $3;
  $28 = $3;
  $29 = $28 * -0.10000000000000001;
  $30 = 0.1111111111111111 + $29;
  $31 = $27 * $30;
  $32 = -0.125 + $31;
  $33 = $26 * $32;
  $34 = 0.14285714285714285 + $33;
  $35 = $25 * $34;
  $36 = -0.16666666666666666 + $35;
  $14 = $36;
  $37 = $3;
  $38 = $3;
  $39 = $3;
  $40 = $3;
  $41 = $3;
  $42 = $3;
  $43 = $14;
  $44 = $42 * $43;
  $45 = 0.20000000000000001 + $44;
  $46 = $41 * $45;
  $47 = -0.25 + $46;
  $48 = $40 * $47;
  $49 = 0.33333333333333331 + $48;
  $50 = $39 * $49;
  $51 = -0.5 + $50;
  $52 = $38 * $51;
  $53 = 1.0 + $52;
  $54 = $37 * $53;
  $55 = $4;
  HEAPF64[$55>>3] = $54;
  $56 = $4;
  $57 = +HEAPF64[$56>>3];
  $58 = (+Math_abs((+$57)));
  $59 = 2.2204460492503131E-16 * $58;
  $60 = $4;
  $61 = ((($60)) + 8|0);
  HEAPF64[$61>>3] = $59;
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $62 = $3;
 $63 = (+Math_abs((+$62)));
 $64 = $63 < 0.5;
 $65 = $3;
 if ($64) {
  $66 = 8.0 * $65;
  $67 = $66 + 1.0;
  $68 = 0.5 * $67;
  $69 = $3;
  $70 = $69 + 2.0;
  $71 = $68 / $70;
  $15 = $71;
  $72 = $15;
  (_cheb_eval_e_4050(71040,$72,$16)|0);
  $73 = $3;
  $74 = +HEAPF64[$16>>3];
  $75 = $73 * $74;
  $76 = $4;
  HEAPF64[$76>>3] = $75;
  $77 = $3;
  $78 = ((($16)) + 8|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $77 * $79;
  $81 = (+Math_abs((+$80)));
  $82 = $4;
  $83 = ((($82)) + 8|0);
  HEAPF64[$83>>3] = $81;
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 } else {
  $84 = 1.0 + $65;
  $85 = (+Math_log((+$84)));
  $86 = $4;
  HEAPF64[$86>>3] = $85;
  $87 = $4;
  $88 = +HEAPF64[$87>>3];
  $89 = (+Math_abs((+$88)));
  $90 = 2.2204460492503131E-16 * $89;
  $91 = $4;
  $92 = ((($91)) + 8|0);
  HEAPF64[$92>>3] = $90;
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 return (0)|0;
}
function _cheb_eval_e_4050($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gsl_sf_log_1plusx_mx_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $16 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $18 = $3;
 $19 = $18 <= -1.0;
 if ($19) {
  $20 = $4;
  HEAPF64[$20>>3] = nan;
  $21 = $4;
  $22 = ((($21)) + 8|0);
  HEAPF64[$22>>3] = nan;
  _gsl_error(83774,83653,209,1);
  $2 = 1;
  $101 = $2;
  STACKTOP = sp;return ($101|0);
 }
 $23 = $3;
 $24 = (+Math_abs((+$23)));
 $25 = $24 < 7.4009597974140505E-4;
 if ($25) {
  $5 = -0.5;
  $6 = 0.33333333333333331;
  $7 = -0.25;
  $8 = 0.20000000000000001;
  $9 = -0.16666666666666666;
  $10 = 0.14285714285714285;
  $11 = -0.125;
  $12 = 0.1111111111111111;
  $13 = -0.10000000000000001;
  $26 = $3;
  $27 = $3;
  $28 = $3;
  $29 = $3;
  $30 = $29 * -0.10000000000000001;
  $31 = 0.1111111111111111 + $30;
  $32 = $28 * $31;
  $33 = -0.125 + $32;
  $34 = $27 * $33;
  $35 = 0.14285714285714285 + $34;
  $36 = $26 * $35;
  $37 = -0.16666666666666666 + $36;
  $14 = $37;
  $38 = $3;
  $39 = $3;
  $40 = $38 * $39;
  $41 = $3;
  $42 = $3;
  $43 = $3;
  $44 = $3;
  $45 = $14;
  $46 = $44 * $45;
  $47 = 0.20000000000000001 + $46;
  $48 = $43 * $47;
  $49 = -0.25 + $48;
  $50 = $42 * $49;
  $51 = 0.33333333333333331 + $50;
  $52 = $41 * $51;
  $53 = -0.5 + $52;
  $54 = $40 * $53;
  $55 = $4;
  HEAPF64[$55>>3] = $54;
  $56 = $4;
  $57 = +HEAPF64[$56>>3];
  $58 = (+Math_abs((+$57)));
  $59 = 2.2204460492503131E-16 * $58;
  $60 = $4;
  $61 = ((($60)) + 8|0);
  HEAPF64[$61>>3] = $59;
  $2 = 0;
  $101 = $2;
  STACKTOP = sp;return ($101|0);
 }
 $62 = $3;
 $63 = (+Math_abs((+$62)));
 $64 = $63 < 0.5;
 $65 = $3;
 if ($64) {
  $66 = 8.0 * $65;
  $67 = $66 + 1.0;
  $68 = 0.5 * $67;
  $69 = $3;
  $70 = $69 + 2.0;
  $71 = $68 / $70;
  $15 = $71;
  $72 = $15;
  (_cheb_eval_e_4050(71072,$72,$16)|0);
  $73 = $3;
  $74 = $3;
  $75 = $73 * $74;
  $76 = +HEAPF64[$16>>3];
  $77 = $75 * $76;
  $78 = $4;
  HEAPF64[$78>>3] = $77;
  $79 = $3;
  $80 = $3;
  $81 = $79 * $80;
  $82 = ((($16)) + 8|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $81 * $83;
  $85 = $4;
  $86 = ((($85)) + 8|0);
  HEAPF64[$86>>3] = $84;
  $2 = 0;
  $101 = $2;
  STACKTOP = sp;return ($101|0);
 } else {
  $87 = 1.0 + $65;
  $88 = (+Math_log((+$87)));
  $17 = $88;
  $89 = $17;
  $90 = $3;
  $91 = $89 - $90;
  $92 = $4;
  HEAPF64[$92>>3] = $91;
  $93 = $17;
  $94 = (+Math_abs((+$93)));
  $95 = $3;
  $96 = (+Math_abs((+$95)));
  $97 = $94 + $96;
  $98 = 2.2204460492503131E-16 * $97;
  $99 = $4;
  $100 = ((($99)) + 8|0);
  HEAPF64[$100>>3] = $98;
  $2 = 0;
  $101 = $2;
  STACKTOP = sp;return ($101|0);
 }
 return (0)|0;
}
function _gsl_sf_log($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $2 = $0;
 $5 = $2;
 $6 = (_gsl_sf_log_e($5,$3)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $4;
  _gsl_error(83659,83653,250,$9);
  $10 = +HEAPF64[$3>>3];
  $1 = $10;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $11 = +HEAPF64[$3>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _lnpoch_pos($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0.0;
 var $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0;
 var $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0;
 var $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $8 = sp + 240|0;
 $9 = sp + 224|0;
 $10 = sp + 208|0;
 $11 = sp + 192|0;
 $33 = sp + 24|0;
 $34 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $38 = $5;
 $39 = (+Math_abs((+$38)));
 $7 = $39;
 $40 = $7;
 $41 = $4;
 $42 = 0.10000000000000001 * $41;
 $43 = $40 > $42;
 if (!($43)) {
  $44 = $7;
  $45 = $4;
  $46 = (+_GSL_MAX_DBL($45,2.0));
  $47 = (+Math_log((+$46)));
  $48 = $44 * $47;
  $49 = $48 > 0.10000000000000001;
  if (!($49)) {
   $120 = $7;
   $121 = $4;
   $122 = 0.10000000000000001 * $121;
   $123 = $120 < $122;
   $124 = $4;
   $125 = $124 > 15.0;
   $or$cond = $123 & $125;
   if ($or$cond) {
    $126 = $5;
    $127 = $4;
    $128 = $126 / $127;
    $14 = $128;
    $129 = $14;
    $130 = 1.0 + $129;
    $15 = $130;
    $131 = $15;
    $132 = $15;
    $133 = $131 * $132;
    $134 = $15;
    $135 = $133 * $134;
    $16 = $135;
    $136 = $16;
    $137 = $15;
    $138 = $136 * $137;
    $139 = $15;
    $140 = $138 * $139;
    $17 = $140;
    $141 = $17;
    $142 = $15;
    $143 = $141 * $142;
    $144 = $15;
    $145 = $143 * $144;
    $18 = $145;
    $146 = $14;
    $147 = - $146;
    $148 = $15;
    $149 = $147 / $148;
    $19 = $149;
    $150 = $14;
    $151 = - $150;
    $152 = $14;
    $153 = $14;
    $154 = 3.0 + $153;
    $155 = $152 * $154;
    $156 = 3.0 + $155;
    $157 = $151 * $156;
    $158 = $16;
    $159 = $157 / $158;
    $20 = $159;
    $160 = $14;
    $161 = - $160;
    $162 = $14;
    $163 = $14;
    $164 = $14;
    $165 = $14;
    $166 = 5.0 + $165;
    $167 = $164 * $166;
    $168 = 10.0 + $167;
    $169 = $163 * $168;
    $170 = 10.0 + $169;
    $171 = $162 * $170;
    $172 = 5.0 + $171;
    $173 = $161 * $172;
    $174 = $17;
    $175 = $173 / $174;
    $21 = $175;
    $176 = $14;
    $177 = - $176;
    $178 = $14;
    $179 = $14;
    $180 = $14;
    $181 = $14;
    $182 = $14;
    $183 = $14;
    $184 = 7.0 + $183;
    $185 = $182 * $184;
    $186 = 21.0 + $185;
    $187 = $181 * $186;
    $188 = 35.0 + $187;
    $189 = $180 * $188;
    $190 = 35.0 + $189;
    $191 = $179 * $190;
    $192 = 21.0 + $191;
    $193 = $178 * $192;
    $194 = 7.0 + $193;
    $195 = $177 * $194;
    $196 = $18;
    $197 = $195 / $196;
    $22 = $197;
    $198 = $14;
    $199 = 1.0 + $198;
    $200 = (+_gsl_sf_pow_int($199,8));
    $23 = $200;
    $201 = $23;
    $202 = 1.0 / $201;
    $203 = $202 - 1.0;
    $24 = $203;
    $204 = $23;
    $205 = $14;
    $206 = 1.0 + $205;
    $207 = $204 * $206;
    $208 = 1.0 / $207;
    $209 = $208 - 1.0;
    $25 = $209;
    $210 = $4;
    $211 = $4;
    $212 = $210 * $211;
    $213 = $4;
    $214 = $212 * $213;
    $215 = $4;
    $216 = $214 * $215;
    $26 = $216;
    $217 = $26;
    $218 = $4;
    $219 = $217 * $218;
    $220 = $4;
    $221 = $219 * $220;
    $27 = $221;
    $222 = $19;
    $223 = $20;
    $224 = $4;
    $225 = 30.0 * $224;
    $226 = $4;
    $227 = $225 * $226;
    $228 = $223 / $227;
    $229 = $222 + $228;
    $230 = $21;
    $231 = $26;
    $232 = 105.0 * $231;
    $233 = $230 / $232;
    $234 = $229 + $233;
    $235 = $22;
    $236 = $27;
    $237 = 140.0 * $236;
    $238 = $235 / $237;
    $239 = $234 + $238;
    $28 = $239;
    $240 = $24;
    $241 = $27;
    $242 = 99.0 * $241;
    $243 = $4;
    $244 = $242 * $243;
    $245 = $4;
    $246 = $244 * $245;
    $247 = $240 / $246;
    $248 = $25;
    $249 = 0.0019175269175269176 * $248;
    $250 = $27;
    $251 = $26;
    $252 = $250 * $251;
    $253 = $249 / $252;
    $254 = $247 - $253;
    $29 = $254;
    $255 = $28;
    $256 = $29;
    $257 = $255 + $256;
    $258 = $4;
    $259 = 12.0 * $258;
    $260 = $257 / $259;
    $30 = $260;
    $261 = $5;
    $262 = $4;
    $263 = $262 / 2.7182818284590451;
    $264 = (+Math_log((+$263)));
    $265 = $261 * $264;
    $31 = $265;
    $266 = $14;
    (_gsl_sf_log_1plusx_e($266,$33)|0);
    $267 = $5;
    $268 = $4;
    $269 = $267 + $268;
    $270 = $269 - 0.5;
    $271 = +HEAPF64[$33>>3];
    $272 = $270 * $271;
    $32 = $272;
    $273 = $31;
    $274 = $32;
    $275 = $273 + $274;
    $276 = $30;
    $277 = $275 + $276;
    $278 = $6;
    HEAPF64[$278>>3] = $277;
    $279 = $31;
    $280 = (+Math_abs((+$279)));
    $281 = 2.2204460492503131E-16 * $280;
    $282 = $6;
    $283 = ((($282)) + 8|0);
    HEAPF64[$283>>3] = $281;
    $284 = $5;
    $285 = $4;
    $286 = $284 + $285;
    $287 = $286 - 0.5;
    $288 = ((($33)) + 8|0);
    $289 = +HEAPF64[$288>>3];
    $290 = $287 * $289;
    $291 = (+Math_abs((+$290)));
    $292 = $6;
    $293 = ((($292)) + 8|0);
    $294 = +HEAPF64[$293>>3];
    $295 = $294 + $291;
    HEAPF64[$293>>3] = $295;
    $296 = +HEAPF64[$33>>3];
    $297 = (+Math_abs((+$296)));
    $298 = $297 * 2.2204460492503131E-16;
    $299 = $5;
    $300 = (+Math_abs((+$299)));
    $301 = $4;
    $302 = (+Math_abs((+$301)));
    $303 = $300 + $302;
    $304 = $303 + 0.5;
    $305 = $298 * $304;
    $306 = $6;
    $307 = ((($306)) + 8|0);
    $308 = +HEAPF64[$307>>3];
    $309 = $308 + $305;
    HEAPF64[$307>>3] = $309;
    $310 = $6;
    $311 = +HEAPF64[$310>>3];
    $312 = (+Math_abs((+$311)));
    $313 = 4.4408920985006262E-16 * $312;
    $314 = $6;
    $315 = ((($314)) + 8|0);
    $316 = +HEAPF64[$315>>3];
    $317 = $316 + $313;
    HEAPF64[$315>>3] = $317;
    $3 = 0;
    $354 = $3;
    STACKTOP = sp;return ($354|0);
   }
   $318 = $4;
   $319 = $5;
   $320 = (_pochrel_smallx($318,$319,$34)|0);
   $35 = $320;
   $321 = $5;
   $322 = +HEAPF64[$34>>3];
   $323 = $321 * $322;
   $36 = $323;
   $324 = $36;
   $325 = $6;
   $326 = (_gsl_sf_log_1plusx_e($324,$325)|0);
   $37 = $326;
   $327 = $5;
   $328 = ((($34)) + 8|0);
   $329 = +HEAPF64[$328>>3];
   $330 = $327 * $329;
   $331 = $36;
   $332 = 1.0 + $331;
   $333 = $330 / $332;
   $334 = (+Math_abs((+$333)));
   $335 = 2.0 * $334;
   $336 = $6;
   $337 = ((($336)) + 8|0);
   HEAPF64[$337>>3] = $335;
   $338 = $6;
   $339 = +HEAPF64[$338>>3];
   $340 = (+Math_abs((+$339)));
   $341 = 4.4408920985006262E-16 * $340;
   $342 = $6;
   $343 = ((($342)) + 8|0);
   $344 = +HEAPF64[$343>>3];
   $345 = $344 + $341;
   HEAPF64[$343>>3] = $345;
   $346 = $37;
   $347 = ($346|0)!=(0);
   if ($347) {
    $348 = $37;
    $353 = $348;
   } else {
    $349 = $35;
    $350 = ($349|0)!=(0);
    $351 = $35;
    $352 = $350 ? $351 : 0;
    $353 = $352;
   }
   $3 = $353;
   $354 = $3;
   STACKTOP = sp;return ($354|0);
  }
 }
 $50 = $4;
 $51 = $50 < 171.0;
 if ($51) {
  $52 = $4;
  $53 = $5;
  $54 = $52 + $53;
  $55 = $54 < 171.0;
  if ($55) {
   $56 = $4;
   (_gsl_sf_gammainv_e($56,$8)|0);
   $57 = $4;
   $58 = $5;
   $59 = $57 + $58;
   (_gsl_sf_gammainv_e($59,$9)|0);
   $60 = +HEAPF64[$9>>3];
   $61 = +HEAPF64[$8>>3];
   $62 = $60 / $61;
   $63 = (+Math_log((+$62)));
   $64 = - $63;
   $65 = $6;
   HEAPF64[$65>>3] = $64;
   $66 = ((($8)) + 8|0);
   $67 = +HEAPF64[$66>>3];
   $68 = +HEAPF64[$8>>3];
   $69 = (+Math_abs((+$68)));
   $70 = $67 / $69;
   $71 = ((($9)) + 8|0);
   $72 = +HEAPF64[$71>>3];
   $73 = +HEAPF64[$9>>3];
   $74 = (+Math_abs((+$73)));
   $75 = $72 / $74;
   $76 = $70 + $75;
   $77 = $6;
   $78 = ((($77)) + 8|0);
   HEAPF64[$78>>3] = $76;
   $79 = $6;
   $80 = +HEAPF64[$79>>3];
   $81 = (+Math_abs((+$80)));
   $82 = 4.4408920985006262E-16 * $81;
   $83 = $6;
   $84 = ((($83)) + 8|0);
   $85 = +HEAPF64[$84>>3];
   $86 = $85 + $82;
   HEAPF64[$84>>3] = $86;
   $3 = 0;
   $354 = $3;
   STACKTOP = sp;return ($354|0);
  }
 }
 $87 = $4;
 $88 = (_gsl_sf_lngamma_e($87,$10)|0);
 $12 = $88;
 $89 = $4;
 $90 = $5;
 $91 = $89 + $90;
 $92 = (_gsl_sf_lngamma_e($91,$11)|0);
 $13 = $92;
 $93 = +HEAPF64[$11>>3];
 $94 = +HEAPF64[$10>>3];
 $95 = $93 - $94;
 $96 = $6;
 HEAPF64[$96>>3] = $95;
 $97 = ((($11)) + 8|0);
 $98 = +HEAPF64[$97>>3];
 $99 = ((($10)) + 8|0);
 $100 = +HEAPF64[$99>>3];
 $101 = $98 + $100;
 $102 = $6;
 $103 = ((($102)) + 8|0);
 HEAPF64[$103>>3] = $101;
 $104 = $6;
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = 4.4408920985006262E-16 * $106;
 $108 = $6;
 $109 = ((($108)) + 8|0);
 $110 = +HEAPF64[$109>>3];
 $111 = $110 + $107;
 HEAPF64[$109>>3] = $111;
 $112 = $12;
 $113 = ($112|0)!=(0);
 if ($113) {
  $114 = $12;
  $119 = $114;
 } else {
  $115 = $13;
  $116 = ($115|0)!=(0);
  $117 = $13;
  $118 = $116 ? $117 : 0;
  $119 = $118;
 }
 $3 = $119;
 $354 = $3;
 STACKTOP = sp;return ($354|0);
}
function _pochrel_smallx($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0;
 var $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $13 = sp + 304|0;
 $24 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 1.3684286665667226E+153;
 $8 = -36.736800569677101;
 $34 = $5;
 $35 = $34 == 0.0;
 $36 = $4;
 if ($35) {
  $37 = $6;
  $38 = (_gsl_sf_psi_e($36,$37)|0);
  $3 = $38;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $39 = $36 < -0.5;
 $40 = $4;
 if ($39) {
  $41 = 1.0 - $40;
  $42 = $5;
  $43 = $41 - $42;
  $44 = $43;
 } else {
  $44 = $40;
 }
 $9 = $44;
 $45 = $9;
 $46 = $45 < 10.0;
 $47 = $9;
 $48 = 11.0 - $47;
 $49 = $46 ? $48 : 0.0;
 $50 = (~~(($49)));
 $10 = $50;
 $51 = $9;
 $52 = $10;
 $53 = (+($52|0));
 $54 = $51 + $53;
 $11 = $54;
 $55 = $11;
 $56 = $5;
 $57 = $56 - 1.0;
 $58 = 0.5 * $57;
 $59 = $55 + $58;
 $16 = $59;
 $60 = $16;
 $61 = (+Math_log((+$60)));
 $17 = $61;
 $62 = $5;
 $63 = $17;
 $64 = $62 * $63;
 $18 = $64;
 $19 = 0.0;
 $65 = $16;
 $66 = $65 < 1.3684286665667226E+153;
 L8: do {
  if ($66) {
   $67 = $17;
   $68 = 18.36840028483855 / $67;
   $69 = $68 + 1.0;
   $70 = (~~(($69)));
   $20 = $70;
   $71 = $16;
   $72 = 1.0 / $71;
   $73 = $16;
   $74 = $72 / $73;
   $21 = $74;
   $75 = $5;
   $76 = $75 + 1.0;
   $77 = 0.5 * $76;
   $22 = $77;
   $78 = $21;
   $23 = $78;
   $79 = ((($24)) + 8|0);
   HEAPF64[$79>>3] = 1.0;
   $80 = $22;
   $81 = - $80;
   $82 = $81 / 12.0;
   $83 = ((($24)) + 16|0);
   HEAPF64[$83>>3] = $82;
   $84 = ((($24)) + 16|0);
   $85 = +HEAPF64[$84>>3];
   $86 = $23;
   $87 = $85 * $86;
   $19 = $87;
   $88 = $20;
   $89 = ($88|0)>(20);
   if ($89) {
    $90 = $6;
    HEAPF64[$90>>3] = 0.0;
    $91 = $6;
    $92 = ((($91)) + 8|0);
    HEAPF64[$92>>3] = 0.0;
    _gsl_error(83691,83684,128,7);
    $3 = 7;
    $266 = $3;
    STACKTOP = sp;return ($266|0);
   }
   $25 = 2;
   while(1) {
    $93 = $25;
    $94 = $20;
    $95 = ($93|0)<=($94|0);
    if (!($95)) {
     break L8;
    }
    $27 = 0.0;
    $26 = 1;
    while(1) {
     $96 = $26;
     $97 = $25;
     $98 = ($96|0)<=($97|0);
     if (!($98)) {
      break;
     }
     $99 = $25;
     $100 = $26;
     $101 = (($99) - ($100))|0;
     $102 = (($101) + 1)|0;
     $103 = (39088 + ($102<<3)|0);
     $104 = +HEAPF64[$103>>3];
     $105 = $26;
     $106 = (($24) + ($105<<3)|0);
     $107 = +HEAPF64[$106>>3];
     $108 = $104 * $107;
     $109 = $27;
     $110 = $109 + $108;
     $27 = $110;
     $111 = $26;
     $112 = (($111) + 1)|0;
     $26 = $112;
    }
    $113 = $22;
    $114 = - $113;
    $115 = $27;
    $116 = $114 * $115;
    $117 = $25;
    $118 = (+($117|0));
    $119 = $116 / $118;
    $120 = $25;
    $121 = (($120) + 1)|0;
    $122 = (($24) + ($121<<3)|0);
    HEAPF64[$122>>3] = $119;
    $123 = $25;
    $124 = $123<<1;
    $125 = (($124) - 2)|0;
    $126 = (+($125|0));
    $127 = $5;
    $128 = $126 - $127;
    $129 = $25;
    $130 = $129<<1;
    $131 = (($130) - 1)|0;
    $132 = (+($131|0));
    $133 = $5;
    $134 = $132 - $133;
    $135 = $128 * $134;
    $136 = $21;
    $137 = $135 * $136;
    $138 = $23;
    $139 = $138 * $137;
    $23 = $139;
    $140 = $25;
    $141 = (($140) + 1)|0;
    $142 = (($24) + ($141<<3)|0);
    $143 = +HEAPF64[$142>>3];
    $144 = $23;
    $145 = $143 * $144;
    $146 = $19;
    $147 = $146 + $145;
    $19 = $147;
    $148 = $25;
    $149 = (($148) + 1)|0;
    $25 = $149;
   }
  }
 } while(0);
 $150 = $18;
 $151 = (_gsl_sf_expm1_e($150,$13)|0);
 $14 = $151;
 $152 = $14;
 $153 = ($152|0)!=(0);
 if ($153) {
  $154 = $6;
  HEAPF64[$154>>3] = 0.0;
  $155 = $6;
  $156 = ((($155)) + 8|0);
  HEAPF64[$156>>3] = 0.0;
  $157 = $14;
  $3 = $157;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 $158 = +HEAPF64[$13>>3];
 $159 = $18;
 $160 = $158 / $159;
 HEAPF64[$13>>3] = $160;
 $161 = $5;
 $162 = $161 - 1.0;
 $163 = $19;
 $164 = $163 * $162;
 $19 = $164;
 $165 = +HEAPF64[$13>>3];
 $166 = $17;
 $167 = $18;
 $168 = $19;
 $169 = $167 * $168;
 $170 = $166 + $169;
 $171 = $165 * $170;
 $172 = $19;
 $173 = $171 + $172;
 $12 = $173;
 $174 = $10;
 $175 = (($174) - 1)|0;
 $15 = $175;
 while(1) {
  $176 = $15;
  $177 = ($176|0)>=(0);
  $178 = $9;
  if (!($177)) {
   break;
  }
  $179 = $15;
  $180 = (+($179|0));
  $181 = $178 + $180;
  $182 = 1.0 / $181;
  $28 = $182;
  $183 = $12;
  $184 = $28;
  $185 = $183 - $184;
  $186 = $5;
  $187 = $28;
  $188 = $186 * $187;
  $189 = 1.0 + $188;
  $190 = $185 / $189;
  $12 = $190;
  $191 = $15;
  $192 = (($191) + -1)|0;
  $15 = $192;
 }
 $193 = $4;
 $194 = $178 == $193;
 if ($194) {
  $195 = $12;
  $196 = $6;
  HEAPF64[$196>>3] = $195;
  $197 = $10;
  $198 = (+($197|0));
  $199 = (+Math_abs((+$198)));
  $200 = $199 + 1.0;
  $201 = 4.4408920985006262E-16 * $200;
  $202 = $6;
  $203 = +HEAPF64[$202>>3];
  $204 = (+Math_abs((+$203)));
  $205 = $201 * $204;
  $206 = $6;
  $207 = ((($206)) + 8|0);
  HEAPF64[$207>>3] = $205;
  $3 = 0;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 } else {
  $208 = $5;
  $209 = 3.1415926535897931 * $208;
  $210 = (+Math_sin((+$209)));
  $211 = $5;
  $212 = $210 / $211;
  $29 = $212;
  $213 = $5;
  $214 = 1.5707963267948966 * $213;
  $215 = (+Math_sin((+$214)));
  $30 = $215;
  $216 = $29;
  $217 = $11;
  $218 = 3.1415926535897931 * $217;
  $219 = (+Math_tan((+$218)));
  $220 = $216 / $219;
  $31 = $220;
  $221 = $30;
  $222 = 2.0 * $221;
  $223 = $30;
  $224 = $5;
  $225 = $223 / $224;
  $226 = $222 * $225;
  $32 = $226;
  $227 = $31;
  $228 = $32;
  $229 = $227 - $228;
  $33 = $229;
  $230 = $12;
  $231 = $5;
  $232 = $33;
  $233 = $231 * $232;
  $234 = 1.0 + $233;
  $235 = $230 * $234;
  $236 = $33;
  $237 = $235 + $236;
  $238 = $6;
  HEAPF64[$238>>3] = $237;
  $239 = $12;
  $240 = $5;
  $241 = $239 * $240;
  $242 = (+Math_abs((+$241)));
  $243 = $242 + 1.0;
  $244 = $243 * 2.2204460492503131E-16;
  $245 = $31;
  $246 = (+Math_abs((+$245)));
  $247 = $32;
  $248 = (+Math_abs((+$247)));
  $249 = $246 + $248;
  $250 = $244 * $249;
  $251 = $6;
  $252 = ((($251)) + 8|0);
  HEAPF64[$252>>3] = $250;
  $253 = $10;
  $254 = (+($253|0));
  $255 = (+Math_abs((+$254)));
  $256 = $255 + 1.0;
  $257 = 4.4408920985006262E-16 * $256;
  $258 = $6;
  $259 = +HEAPF64[$258>>3];
  $260 = (+Math_abs((+$259)));
  $261 = $257 * $260;
  $262 = $6;
  $263 = ((($262)) + 8|0);
  $264 = +HEAPF64[$263>>3];
  $265 = $264 + $261;
  HEAPF64[$263>>3] = $265;
  $3 = 0;
  $266 = $3;
  STACKTOP = sp;return ($266|0);
 }
 return (0)|0;
}
function _gsl_sf_lnpoch_sgn_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $9 = sp + 112|0;
 $17 = sp + 56|0;
 $20 = sp + 32|0;
 $21 = sp + 16|0;
 $22 = sp + 8|0;
 $23 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $26 = $6;
 $27 = $26 == 0.0;
 if ($27) {
  $28 = $8;
  HEAPF64[$28>>3] = 1.0;
  $29 = $7;
  HEAPF64[$29>>3] = 0.0;
  $30 = $7;
  $31 = ((($30)) + 8|0);
  HEAPF64[$31>>3] = 0.0;
  $4 = 0;
  $232 = $4;
  STACKTOP = sp;return ($232|0);
 }
 $32 = $5;
 $33 = $32 > 0.0;
 if ($33) {
  $34 = $5;
  $35 = $6;
  $36 = $34 + $35;
  $37 = $36 > 0.0;
  if ($37) {
   $38 = $8;
   HEAPF64[$38>>3] = 1.0;
   $39 = $5;
   $40 = $6;
   $41 = $7;
   $42 = (_lnpoch_pos($39,$40,$41)|0);
   $4 = $42;
   $232 = $4;
   STACKTOP = sp;return ($232|0);
  }
 }
 $43 = $5;
 $44 = $43 <= 0.0;
 if ($44) {
  $45 = $5;
  $46 = $5;
  $47 = (+Math_floor((+$46)));
  $48 = $45 == $47;
  if ($48) {
   $49 = $5;
   $50 = $6;
   $51 = $49 + $50;
   $52 = $51 < 0.0;
   if ($52) {
    $53 = $6;
    $54 = $6;
    $55 = (+Math_floor((+$54)));
    $56 = $53 == $55;
    if ($56) {
     $57 = $5;
     $58 = - $57;
     $59 = $6;
     $60 = - $59;
     $61 = (_lnpoch_pos($58,$60,$9)|0);
     $10 = $61;
     $62 = $5;
     $63 = $5;
     $64 = $6;
     $65 = $63 + $64;
     $66 = $62 / $65;
     $67 = (+Math_log((+$66)));
     $11 = $67;
     $68 = $6;
     $69 = $68 % 2.0;
     $70 = $69 == 0.0;
     $71 = $70 ? 1 : -1;
     $72 = (+($71|0));
     $12 = $72;
     $73 = $11;
     $74 = +HEAPF64[$9>>3];
     $75 = $73 - $74;
     $76 = $7;
     HEAPF64[$76>>3] = $75;
     $77 = ((($9)) + 8|0);
     $78 = +HEAPF64[$77>>3];
     $79 = $11;
     $80 = 4.4408920985006262E-16 * $79;
     $81 = $78 + $80;
     $82 = $7;
     $83 = ((($82)) + 8|0);
     HEAPF64[$83>>3] = $81;
     $84 = $12;
     $85 = $8;
     HEAPF64[$85>>3] = $84;
     $86 = $10;
     $4 = $86;
     $232 = $4;
     STACKTOP = sp;return ($232|0);
    }
   }
   $87 = $5;
   $88 = $6;
   $89 = $87 + $88;
   $90 = $89 == 0.0;
   if ($90) {
    $91 = $5;
    $92 = - $91;
    $93 = $92 + 1.0;
    $94 = $7;
    $95 = $8;
    $96 = (_gsl_sf_lngamma_sgn_e($93,$94,$95)|0);
    $13 = $96;
    $97 = $5;
    $98 = - $97;
    $99 = $98 % 2.0;
    $100 = $99 == 0.0;
    $101 = $100 ? 1 : -1;
    $102 = (+($101|0));
    $14 = $102;
    $103 = $14;
    $104 = $8;
    $105 = +HEAPF64[$104>>3];
    $106 = $105 * $103;
    HEAPF64[$104>>3] = $106;
    $107 = $13;
    $4 = $107;
    $232 = $4;
    STACKTOP = sp;return ($232|0);
   } else {
    $108 = $7;
    HEAPF64[$108>>3] = -inf;
    $109 = $7;
    $110 = ((($109)) + 8|0);
    HEAPF64[$110>>3] = 0.0;
    $111 = $8;
    HEAPF64[$111>>3] = 1.0;
    $4 = 0;
    $232 = $4;
    STACKTOP = sp;return ($232|0);
   }
  }
 }
 $112 = $5;
 $113 = $112 < 0.0;
 if ($113) {
  $114 = $5;
  $115 = $6;
  $116 = $114 + $115;
  $117 = $116 < 0.0;
  if ($117) {
   $118 = $5;
   $119 = 1.0 - $118;
   $120 = 3.1415926535897931 * $119;
   $121 = (+Math_sin((+$120)));
   $15 = $121;
   $122 = $5;
   $123 = 1.0 - $122;
   $124 = $6;
   $125 = $123 - $124;
   $126 = 3.1415926535897931 * $125;
   $127 = (+Math_sin((+$126)));
   $16 = $127;
   $128 = $15;
   $129 = $128 == 0.0;
   $130 = $16;
   $131 = $130 == 0.0;
   $or$cond = $129 | $131;
   if ($or$cond) {
    $132 = $8;
    HEAPF64[$132>>3] = 0.0;
    $133 = $7;
    HEAPF64[$133>>3] = nan;
    $134 = $7;
    $135 = ((($134)) + 8|0);
    HEAPF64[$135>>3] = nan;
    _gsl_error(83774,83684,349,1);
    $4 = 1;
    $232 = $4;
    STACKTOP = sp;return ($232|0);
   } else {
    $136 = $5;
    $137 = 1.0 - $136;
    $138 = $6;
    $139 = - $138;
    $140 = (_lnpoch_pos($137,$139,$17)|0);
    $18 = $140;
    $141 = $15;
    $142 = $16;
    $143 = $141 / $142;
    $144 = (+Math_abs((+$143)));
    $145 = (+Math_log((+$144)));
    $19 = $145;
    $146 = $19;
    $147 = +HEAPF64[$17>>3];
    $148 = $146 - $147;
    $149 = $7;
    HEAPF64[$149>>3] = $148;
    $150 = ((($17)) + 8|0);
    $151 = +HEAPF64[$150>>3];
    $152 = $7;
    $153 = ((($152)) + 8|0);
    HEAPF64[$153>>3] = $151;
    $154 = $5;
    $155 = 1.0 - $154;
    $156 = (+Math_abs((+$155)));
    $157 = $5;
    $158 = 1.0 - $157;
    $159 = $6;
    $160 = $158 - $159;
    $161 = (+Math_abs((+$160)));
    $162 = $156 + $161;
    $163 = 4.4408920985006262E-16 * $162;
    $164 = $19;
    $165 = (+Math_abs((+$164)));
    $166 = $163 * $165;
    $167 = $7;
    $168 = ((($167)) + 8|0);
    $169 = +HEAPF64[$168>>3];
    $170 = $169 + $166;
    HEAPF64[$168>>3] = $170;
    $171 = $7;
    $172 = +HEAPF64[$171>>3];
    $173 = (+Math_abs((+$172)));
    $174 = 4.4408920985006262E-16 * $173;
    $175 = $7;
    $176 = ((($175)) + 8|0);
    $177 = +HEAPF64[$176>>3];
    $178 = $177 + $174;
    HEAPF64[$176>>3] = $178;
    $179 = $15;
    $180 = $16;
    $181 = $179 * $180;
    $182 = $181 >= 0.0;
    $183 = $182 ? 1 : -1;
    $184 = (+($183|0));
    $185 = $8;
    HEAPF64[$185>>3] = $184;
    $186 = $18;
    $4 = $186;
    $232 = $4;
    STACKTOP = sp;return ($232|0);
   }
  }
 }
 $187 = $5;
 $188 = $6;
 $189 = $187 + $188;
 $190 = (_gsl_sf_lngamma_sgn_e($189,$20,$22)|0);
 $24 = $190;
 $191 = $5;
 $192 = (_gsl_sf_lngamma_sgn_e($191,$21,$23)|0);
 $25 = $192;
 $193 = $24;
 $194 = ($193|0)==(0);
 $195 = $25;
 $196 = ($195|0)==(0);
 $or$cond3 = $194 & $196;
 if ($or$cond3) {
  $197 = +HEAPF64[$20>>3];
  $198 = +HEAPF64[$21>>3];
  $199 = $197 - $198;
  $200 = $7;
  HEAPF64[$200>>3] = $199;
  $201 = ((($20)) + 8|0);
  $202 = +HEAPF64[$201>>3];
  $203 = ((($21)) + 8|0);
  $204 = +HEAPF64[$203>>3];
  $205 = $202 + $204;
  $206 = $7;
  $207 = ((($206)) + 8|0);
  HEAPF64[$207>>3] = $205;
  $208 = $7;
  $209 = +HEAPF64[$208>>3];
  $210 = (+Math_abs((+$209)));
  $211 = 4.4408920985006262E-16 * $210;
  $212 = $7;
  $213 = ((($212)) + 8|0);
  $214 = +HEAPF64[$213>>3];
  $215 = $214 + $211;
  HEAPF64[$213>>3] = $215;
  $216 = +HEAPF64[$23>>3];
  $217 = +HEAPF64[$22>>3];
  $218 = $216 * $217;
  $219 = $8;
  HEAPF64[$219>>3] = $218;
  $4 = 0;
  $232 = $4;
  STACKTOP = sp;return ($232|0);
 }
 $220 = $24;
 $221 = ($220|0)==(1);
 $222 = $25;
 $223 = ($222|0)==(1);
 $or$cond5 = $221 | $223;
 if ($or$cond5) {
  $224 = $8;
  HEAPF64[$224>>3] = 0.0;
  $225 = $7;
  HEAPF64[$225>>3] = nan;
  $226 = $7;
  $227 = ((($226)) + 8|0);
  HEAPF64[$227>>3] = nan;
  _gsl_error(83774,83684,380,1);
  $4 = 1;
  $232 = $4;
  STACKTOP = sp;return ($232|0);
 } else {
  $228 = $7;
  HEAPF64[$228>>3] = 0.0;
  $229 = $7;
  $230 = ((($229)) + 8|0);
  HEAPF64[$230>>3] = 0.0;
  $231 = $8;
  HEAPF64[$231>>3] = 0.0;
  $4 = -1;
  $232 = $4;
  STACKTOP = sp;return ($232|0);
 }
 return (0)|0;
}
function _gsl_sf_poch_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 8|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = $11 == 0.0;
 if ($12) {
  $13 = $6;
  HEAPF64[$13>>3] = 1.0;
  $14 = $6;
  $15 = ((($14)) + 8|0);
  HEAPF64[$15>>3] = 0.0;
  $3 = 0;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 }
 $16 = $4;
 $17 = $5;
 $18 = (_gsl_sf_lnpoch_sgn_e($16,$17,$7,$8)|0);
 $9 = $18;
 $19 = +HEAPF64[$7>>3];
 $20 = $19 == -inf;
 if ($20) {
  $21 = $6;
  HEAPF64[$21>>3] = 0.0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  HEAPF64[$23>>3] = 0.0;
  $24 = $9;
  $3 = $24;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 }
 $25 = +HEAPF64[$7>>3];
 $26 = ((($7)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $6;
 $29 = (_gsl_sf_exp_err_e($25,$27,$28)|0);
 $10 = $29;
 $30 = +HEAPF64[$8>>3];
 $31 = $6;
 $32 = +HEAPF64[$31>>3];
 $33 = $32 * $30;
 HEAPF64[$31>>3] = $33;
 $34 = $6;
 $35 = +HEAPF64[$34>>3];
 $36 = (+Math_abs((+$35)));
 $37 = 4.4408920985006262E-16 * $36;
 $38 = $6;
 $39 = ((($38)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $40 + $37;
 HEAPF64[$39>>3] = $41;
 $42 = $10;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $10;
  $49 = $44;
 } else {
  $45 = $9;
  $46 = ($45|0)!=(0);
  $47 = $9;
  $48 = $46 ? $47 : 0;
  $49 = $48;
 }
 $3 = $49;
 $50 = $3;
 STACKTOP = sp;return ($50|0);
}
function _gsl_sf_pochrel_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $5;
 $14 = (+Math_abs((+$13)));
 $7 = $14;
 $15 = $4;
 $16 = (+Math_abs((+$15)));
 $8 = $16;
 $17 = $7;
 $18 = $8;
 $19 = 0.10000000000000001 * $18;
 $20 = $17 > $19;
 if (!($20)) {
  $21 = $7;
  $22 = $8;
  $23 = $22 > 2.0;
  $24 = $8;
  $25 = $23 ? $24 : 2.0;
  $26 = (+Math_log((+$25)));
  $27 = $21 * $26;
  $28 = $27 > 0.10000000000000001;
  if (!($28)) {
   $69 = $4;
   $70 = $5;
   $71 = $6;
   $72 = (_pochrel_smallx($69,$70,$71)|0);
   $3 = $72;
   $73 = $3;
   STACKTOP = sp;return ($73|0);
  }
 }
 $29 = $4;
 $30 = $5;
 $31 = (_gsl_sf_lnpoch_sgn_e($29,$30,$9,$10)|0);
 $11 = $31;
 $32 = +HEAPF64[$9>>3];
 $33 = $32 > 709.78271289338397;
 if ($33) {
  $34 = $6;
  HEAPF64[$34>>3] = inf;
  $35 = $6;
  $36 = ((($35)) + 8|0);
  HEAPF64[$36>>3] = inf;
  _gsl_error(83804,83684,432,16);
  $3 = 16;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 } else {
  $37 = +HEAPF64[$9>>3];
  $38 = (+Math_exp((+$37)));
  $12 = $38;
  $39 = +HEAPF64[$10>>3];
  $40 = $12;
  $41 = $39 * $40;
  $42 = $41 - 1.0;
  $43 = $5;
  $44 = $42 / $43;
  $45 = $6;
  HEAPF64[$45>>3] = $44;
  $46 = $6;
  $47 = +HEAPF64[$46>>3];
  $48 = (+Math_abs((+$47)));
  $49 = ((($9)) + 8|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $50 + 4.4408920985006262E-16;
  $52 = $48 * $51;
  $53 = $6;
  $54 = ((($53)) + 8|0);
  HEAPF64[$54>>3] = $52;
  $55 = +HEAPF64[$10>>3];
  $56 = $12;
  $57 = $55 * $56;
  $58 = (+Math_abs((+$57)));
  $59 = $58 + 1.0;
  $60 = 4.4408920985006262E-16 * $59;
  $61 = $5;
  $62 = (+Math_abs((+$61)));
  $63 = $60 / $62;
  $64 = $6;
  $65 = ((($64)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $66 + $63;
  HEAPF64[$65>>3] = $67;
  $68 = $11;
  $3 = $68;
  $73 = $3;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _gsl_sf_poch($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (_gsl_sf_poch_e($7,$8,$5)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $6;
  _gsl_error(83697,83684,459,$12);
  $13 = +HEAPF64[$5>>3];
  $2 = $13;
  $15 = $2;
  STACKTOP = sp;return (+$15);
 } else {
  $14 = +HEAPF64[$5>>3];
  $2 = $14;
  $15 = $2;
  STACKTOP = sp;return (+$15);
 }
 return +(0.0);
}
function _gsl_sf_pow_int_e($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 1.0;
 $8 = 0;
 $10 = $5;
 $11 = ($10|0)<(0);
 do {
  if ($11) {
   $12 = $5;
   $13 = (0 - ($12))|0;
   $5 = $13;
   $14 = $4;
   $15 = $14 == 0.0;
   $16 = $4;
   $17 = 1.0 / $16;
   if (!($15)) {
    $4 = $17;
    break;
   }
   $9 = $17;
   $18 = $5;
   $19 = (($18|0) % 2)&-1;
   $20 = ($19|0)!=(0);
   $21 = $9;
   $22 = $9;
   $23 = $21 * $22;
   $24 = $20 ? $21 : $23;
   $25 = $6;
   HEAPF64[$25>>3] = $24;
   $26 = $6;
   $27 = ((($26)) + 8|0);
   HEAPF64[$27>>3] = inf;
   _gsl_error(83804,83726,45,16);
   $3 = 16;
   $54 = $3;
   STACKTOP = sp;return ($54|0);
  }
 } while(0);
 while(1) {
  $28 = $5;
  $29 = $28 & 1;
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $4;
   $32 = $7;
   $33 = $32 * $31;
   $7 = $33;
  }
  $34 = $5;
  $35 = $34 >> 1;
  $5 = $35;
  $36 = $4;
  $37 = $4;
  $38 = $37 * $36;
  $4 = $38;
  $39 = $8;
  $40 = (($39) + 1)|0;
  $8 = $40;
  $41 = $5;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   break;
  }
 }
 $43 = $7;
 $44 = $6;
 HEAPF64[$44>>3] = $43;
 $45 = $8;
 $46 = (+($45|0));
 $47 = $46 + 1.0;
 $48 = 4.4408920985006262E-16 * $47;
 $49 = $7;
 $50 = (+Math_abs((+$49)));
 $51 = $48 * $50;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 HEAPF64[$53>>3] = $51;
 $3 = 0;
 $54 = $3;
 STACKTOP = sp;return ($54|0);
}
function _gsl_sf_pow_int($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (_gsl_sf_pow_int_e($7,$8,$5)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $6;
  _gsl_error(83736,83726,73,$12);
  $13 = +HEAPF64[$5>>3];
  $2 = $13;
  $15 = $2;
  STACKTOP = sp;return (+$15);
 } else {
  $14 = +HEAPF64[$5>>3];
  $2 = $14;
  $15 = $2;
  STACKTOP = sp;return (+$15);
 }
 return +(0.0);
}
function _gsl_sf_psi_int_e($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ($11|0)<=(0);
 if ($12) {
  $13 = $4;
  HEAPF64[$13>>3] = nan;
  $14 = $4;
  $15 = ((($14)) + 8|0);
  HEAPF64[$15>>3] = nan;
  _gsl_error(83774,83768,587,1);
  $2 = 1;
  $79 = $2;
  STACKTOP = sp;return ($79|0);
 }
 $16 = $3;
 $17 = ($16|0)<=(100);
 if ($17) {
  $18 = $3;
  $19 = (39264 + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $4;
  HEAPF64[$21>>3] = $20;
  $22 = $4;
  $23 = +HEAPF64[$22>>3];
  $24 = (+Math_abs((+$23)));
  $25 = 2.2204460492503131E-16 * $24;
  $26 = $4;
  $27 = ((($26)) + 8|0);
  HEAPF64[$27>>3] = $25;
  $2 = 0;
  $79 = $2;
  STACKTOP = sp;return ($79|0);
 } else {
  $5 = -0.083333333333333329;
  $6 = 0.0083333333333333332;
  $7 = -0.003968253968253968;
  $8 = 0.0041666666666666666;
  $28 = $3;
  $29 = (+($28|0));
  $30 = 1.0 / $29;
  $31 = $3;
  $32 = (+($31|0));
  $33 = 1.0 / $32;
  $34 = $30 * $33;
  $9 = $34;
  $35 = $9;
  $36 = $9;
  $37 = $9;
  $38 = $9;
  $39 = $38 * 0.0041666666666666666;
  $40 = -0.003968253968253968 + $39;
  $41 = $37 * $40;
  $42 = 0.0083333333333333332 + $41;
  $43 = $36 * $42;
  $44 = -0.083333333333333329 + $43;
  $45 = $35 * $44;
  $10 = $45;
  $46 = $3;
  $47 = (+($46|0));
  $48 = (+Math_log((+$47)));
  $49 = $3;
  $50 = (+($49|0));
  $51 = 0.5 / $50;
  $52 = $48 - $51;
  $53 = $10;
  $54 = $52 + $53;
  $55 = $4;
  HEAPF64[$55>>3] = $54;
  $56 = $3;
  $57 = (+($56|0));
  $58 = (+Math_log((+$57)));
  $59 = (+Math_abs((+$58)));
  $60 = $3;
  $61 = (+($60|0));
  $62 = 0.5 / $61;
  $63 = (+Math_abs((+$62)));
  $64 = $59 + $63;
  $65 = $10;
  $66 = (+Math_abs((+$65)));
  $67 = $64 + $66;
  $68 = 2.2204460492503131E-16 * $67;
  $69 = $4;
  $70 = ((($69)) + 8|0);
  HEAPF64[$70>>3] = $68;
  $71 = $4;
  $72 = +HEAPF64[$71>>3];
  $73 = (+Math_abs((+$72)));
  $74 = 2.2204460492503131E-16 * $73;
  $75 = $4;
  $76 = ((($75)) + 8|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $77 + $74;
  HEAPF64[$76>>3] = $78;
  $2 = 0;
  $79 = $2;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function _gsl_sf_psi_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_psi_x($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _psi_x($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0;
 var $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0;
 var $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0;
 var $244 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0;
 var $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $7 = sp + 104|0;
 $10 = sp + 72|0;
 $3 = $0;
 $4 = $1;
 $20 = $3;
 $21 = (+Math_abs((+$20)));
 $5 = $21;
 $22 = $3;
 $23 = $22 == 0.0;
 $24 = $3;
 $25 = $24 == -1.0;
 $or$cond = $23 | $25;
 $26 = $3;
 $27 = $26 == -2.0;
 $or$cond3 = $or$cond | $27;
 if ($or$cond3) {
  $28 = $4;
  HEAPF64[$28>>3] = nan;
  $29 = $4;
  $30 = ((($29)) + 8|0);
  HEAPF64[$30>>3] = nan;
  _gsl_error(83774,83768,385,1);
  $2 = 1;
  $244 = $2;
  STACKTOP = sp;return ($244|0);
 }
 $31 = $5;
 $32 = $31 >= 2.0;
 if ($32) {
  $33 = $5;
  $34 = $5;
  $35 = $33 * $34;
  $36 = 8.0 / $35;
  $37 = $36 - 1.0;
  $6 = $37;
  $38 = $6;
  (_cheb_eval_e_4126(71104,$38,$7)|0);
  $39 = $3;
  $40 = $39 < 0.0;
  if (!($40)) {
   $90 = $5;
   $91 = (+Math_log((+$90)));
   $92 = $3;
   $93 = 0.5 / $92;
   $94 = $91 - $93;
   $95 = +HEAPF64[$7>>3];
   $96 = $94 + $95;
   $97 = $4;
   HEAPF64[$97>>3] = $96;
   $98 = ((($7)) + 8|0);
   $99 = +HEAPF64[$98>>3];
   $100 = $4;
   $101 = ((($100)) + 8|0);
   HEAPF64[$101>>3] = $99;
   $102 = $4;
   $103 = +HEAPF64[$102>>3];
   $104 = (+Math_abs((+$103)));
   $105 = 2.2204460492503131E-16 * $104;
   $106 = $4;
   $107 = ((($106)) + 8|0);
   $108 = +HEAPF64[$107>>3];
   $109 = $108 + $105;
   HEAPF64[$107>>3] = $109;
   $2 = 0;
   $244 = $2;
   STACKTOP = sp;return ($244|0);
  }
  $41 = $3;
  $42 = 3.1415926535897931 * $41;
  $43 = (+Math_sin((+$42)));
  $8 = $43;
  $44 = $3;
  $45 = 3.1415926535897931 * $44;
  $46 = (+Math_cos((+$45)));
  $9 = $46;
  $47 = $8;
  $48 = (+Math_abs((+$47)));
  $49 = $48 < 2.9833362924800827E-154;
  if ($49) {
   $50 = $4;
   HEAPF64[$50>>3] = nan;
   $51 = $4;
   $52 = ((($51)) + 8|0);
   HEAPF64[$52>>3] = nan;
   _gsl_error(83774,83768,395,1);
   $2 = 1;
   $244 = $2;
   STACKTOP = sp;return ($244|0);
  } else {
   $53 = $5;
   $54 = (+Math_log((+$53)));
   $55 = $3;
   $56 = 0.5 / $55;
   $57 = $54 - $56;
   $58 = +HEAPF64[$7>>3];
   $59 = $57 + $58;
   $60 = $9;
   $61 = 3.1415926535897931 * $60;
   $62 = $8;
   $63 = $61 / $62;
   $64 = $59 - $63;
   $65 = $4;
   HEAPF64[$65>>3] = $64;
   $66 = $3;
   $67 = (+Math_abs((+$66)));
   $68 = 3.1415926535897931 * $67;
   $69 = $68 * 2.2204460492503131E-16;
   $70 = $8;
   $71 = $8;
   $72 = $70 * $71;
   $73 = $69 / $72;
   $74 = $4;
   $75 = ((($74)) + 8|0);
   HEAPF64[$75>>3] = $73;
   $76 = ((($7)) + 8|0);
   $77 = +HEAPF64[$76>>3];
   $78 = $4;
   $79 = ((($78)) + 8|0);
   $80 = +HEAPF64[$79>>3];
   $81 = $80 + $77;
   HEAPF64[$79>>3] = $81;
   $82 = $4;
   $83 = +HEAPF64[$82>>3];
   $84 = (+Math_abs((+$83)));
   $85 = 2.2204460492503131E-16 * $84;
   $86 = $4;
   $87 = ((($86)) + 8|0);
   $88 = +HEAPF64[$87>>3];
   $89 = $88 + $85;
   HEAPF64[$87>>3] = $89;
   $2 = 0;
   $244 = $2;
   STACKTOP = sp;return ($244|0);
  }
 }
 $110 = $3;
 $111 = $110 < -1.0;
 $112 = $3;
 if ($111) {
  $113 = $112 + 2.0;
  $11 = $113;
  $114 = $3;
  $115 = 1.0 / $114;
  $12 = $115;
  $116 = $3;
  $117 = $116 + 1.0;
  $118 = 1.0 / $117;
  $13 = $118;
  $119 = $11;
  $120 = 1.0 / $119;
  $14 = $120;
  $121 = $11;
  $122 = 2.0 * $121;
  $123 = $122 - 1.0;
  (_cheb_eval_e_4126(71136,$123,$10)|0);
  $124 = $12;
  $125 = $13;
  $126 = $124 + $125;
  $127 = $14;
  $128 = $126 + $127;
  $129 = - $128;
  $130 = +HEAPF64[$10>>3];
  $131 = $129 + $130;
  $132 = $4;
  HEAPF64[$132>>3] = $131;
  $133 = $12;
  $134 = (+Math_abs((+$133)));
  $135 = $3;
  $136 = $13;
  $137 = $13;
  $138 = $136 * $137;
  $139 = $135 / $138;
  $140 = (+Math_abs((+$139)));
  $141 = $134 + $140;
  $142 = $3;
  $143 = $14;
  $144 = $14;
  $145 = $143 * $144;
  $146 = $142 / $145;
  $147 = (+Math_abs((+$146)));
  $148 = $141 + $147;
  $149 = 2.2204460492503131E-16 * $148;
  $150 = $4;
  $151 = ((($150)) + 8|0);
  HEAPF64[$151>>3] = $149;
  $152 = ((($10)) + 8|0);
  $153 = +HEAPF64[$152>>3];
  $154 = $4;
  $155 = ((($154)) + 8|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $156 + $153;
  HEAPF64[$155>>3] = $157;
  $158 = $4;
  $159 = +HEAPF64[$158>>3];
  $160 = (+Math_abs((+$159)));
  $161 = 2.2204460492503131E-16 * $160;
  $162 = $4;
  $163 = ((($162)) + 8|0);
  $164 = +HEAPF64[$163>>3];
  $165 = $164 + $161;
  HEAPF64[$163>>3] = $165;
  $2 = 0;
  $244 = $2;
  STACKTOP = sp;return ($244|0);
 }
 $166 = $112 < 0.0;
 $167 = $3;
 if ($166) {
  $168 = $167 + 1.0;
  $15 = $168;
  $169 = $3;
  $170 = 1.0 / $169;
  $16 = $170;
  $171 = $15;
  $172 = 1.0 / $171;
  $17 = $172;
  $173 = $15;
  $174 = 2.0 * $173;
  $175 = $174 - 1.0;
  (_cheb_eval_e_4126(71136,$175,$10)|0);
  $176 = $16;
  $177 = $17;
  $178 = $176 + $177;
  $179 = - $178;
  $180 = +HEAPF64[$10>>3];
  $181 = $179 + $180;
  $182 = $4;
  HEAPF64[$182>>3] = $181;
  $183 = $16;
  $184 = (+Math_abs((+$183)));
  $185 = $3;
  $186 = $17;
  $187 = $17;
  $188 = $186 * $187;
  $189 = $185 / $188;
  $190 = (+Math_abs((+$189)));
  $191 = $184 + $190;
  $192 = 2.2204460492503131E-16 * $191;
  $193 = $4;
  $194 = ((($193)) + 8|0);
  HEAPF64[$194>>3] = $192;
  $195 = ((($10)) + 8|0);
  $196 = +HEAPF64[$195>>3];
  $197 = $4;
  $198 = ((($197)) + 8|0);
  $199 = +HEAPF64[$198>>3];
  $200 = $199 + $196;
  HEAPF64[$198>>3] = $200;
  $201 = $4;
  $202 = +HEAPF64[$201>>3];
  $203 = (+Math_abs((+$202)));
  $204 = 2.2204460492503131E-16 * $203;
  $205 = $4;
  $206 = ((($205)) + 8|0);
  $207 = +HEAPF64[$206>>3];
  $208 = $207 + $204;
  HEAPF64[$206>>3] = $208;
  $2 = 0;
  $244 = $2;
  STACKTOP = sp;return ($244|0);
 }
 $209 = $167 < 1.0;
 $210 = $3;
 if ($209) {
  $211 = 1.0 / $210;
  $18 = $211;
  $212 = $3;
  $213 = 2.0 * $212;
  $214 = $213 - 1.0;
  (_cheb_eval_e_4126(71136,$214,$10)|0);
  $215 = $18;
  $216 = - $215;
  $217 = +HEAPF64[$10>>3];
  $218 = $216 + $217;
  $219 = $4;
  HEAPF64[$219>>3] = $218;
  $220 = $18;
  $221 = 2.2204460492503131E-16 * $220;
  $222 = $4;
  $223 = ((($222)) + 8|0);
  HEAPF64[$223>>3] = $221;
  $224 = ((($10)) + 8|0);
  $225 = +HEAPF64[$224>>3];
  $226 = $4;
  $227 = ((($226)) + 8|0);
  $228 = +HEAPF64[$227>>3];
  $229 = $228 + $225;
  HEAPF64[$227>>3] = $229;
  $230 = $4;
  $231 = +HEAPF64[$230>>3];
  $232 = (+Math_abs((+$231)));
  $233 = 2.2204460492503131E-16 * $232;
  $234 = $4;
  $235 = ((($234)) + 8|0);
  $236 = +HEAPF64[$235>>3];
  $237 = $236 + $233;
  HEAPF64[$235>>3] = $237;
  $2 = 0;
  $244 = $2;
  STACKTOP = sp;return ($244|0);
 } else {
  $238 = $210 - 1.0;
  $19 = $238;
  $239 = $19;
  $240 = 2.0 * $239;
  $241 = $240 - 1.0;
  $242 = $4;
  $243 = (_cheb_eval_e_4126(71136,$241,$242)|0);
  $2 = $243;
  $244 = $2;
  STACKTOP = sp;return ($244|0);
 }
 return (0)|0;
}
function _cheb_eval_e_4126($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $14 = $4;
 $15 = 2.0 * $14;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $23 / $30;
 $9 = $31;
 $32 = $9;
 $33 = 2.0 * $32;
 $10 = $33;
 $11 = 0.0;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $6 = $36;
 while(1) {
  $37 = $6;
  $38 = ($37|0)>=(1);
  $39 = $7;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $10;
  $41 = $7;
  $42 = $40 * $41;
  $43 = $8;
  $44 = $42 - $43;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = (($46) + ($47<<3)|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $44 + $49;
  $7 = $50;
  $51 = $10;
  $52 = $12;
  $53 = $51 * $52;
  $54 = (+Math_abs((+$53)));
  $55 = $8;
  $56 = (+Math_abs((+$55)));
  $57 = $54 + $56;
  $58 = $3;
  $59 = HEAP32[$58>>2]|0;
  $60 = $6;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $57 + $63;
  $65 = $11;
  $66 = $65 + $64;
  $11 = $66;
  $67 = $12;
  $8 = $67;
  $68 = $6;
  $69 = (($68) + -1)|0;
  $6 = $69;
 }
 $13 = $39;
 $70 = $9;
 $71 = $7;
 $72 = $70 * $71;
 $73 = $8;
 $74 = $72 - $73;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF64[$76>>3];
 $78 = 0.5 * $77;
 $79 = $74 + $78;
 $7 = $79;
 $80 = $9;
 $81 = $13;
 $82 = $80 * $81;
 $83 = (+Math_abs((+$82)));
 $84 = $8;
 $85 = (+Math_abs((+$84)));
 $86 = $83 + $85;
 $87 = $3;
 $88 = HEAP32[$87>>2]|0;
 $89 = +HEAPF64[$88>>3];
 $90 = (+Math_abs((+$89)));
 $91 = 0.5 * $90;
 $92 = $86 + $91;
 $93 = $11;
 $94 = $93 + $92;
 $11 = $94;
 $95 = $7;
 $96 = $5;
 HEAPF64[$96>>3] = $95;
 $97 = $11;
 $98 = 2.2204460492503131E-16 * $97;
 $99 = $3;
 $100 = HEAP32[$99>>2]|0;
 $101 = $3;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103<<3)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = (+Math_abs((+$105)));
 $107 = $98 + $106;
 $108 = $5;
 $109 = ((($108)) + 8|0);
 HEAPF64[$109>>3] = $107;
 STACKTOP = sp;return 0;
}
function _gsl_sf_psi_1_int_e($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = ($10|0)<=(0);
 if ($11) {
  $12 = $4;
  HEAPF64[$12>>3] = nan;
  $13 = $4;
  $14 = ((($13)) + 8|0);
  HEAPF64[$14>>3] = nan;
  _gsl_error(83774,83768,699,1);
  $2 = 1;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 $15 = $3;
 $16 = ($15|0)<=(100);
 if ($16) {
  $17 = $3;
  $18 = (40400 + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $4;
  HEAPF64[$20>>3] = $19;
  $21 = $4;
  $22 = +HEAPF64[$21>>3];
  $23 = 2.2204460492503131E-16 * $22;
  $24 = $4;
  $25 = ((($24)) + 8|0);
  HEAPF64[$25>>3] = $23;
  $2 = 0;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 } else {
  $5 = -0.033333333333333333;
  $6 = 0.023809523809523808;
  $7 = -0.033333333333333333;
  $26 = $3;
  $27 = (+($26|0));
  $28 = 1.0 / $27;
  $29 = $3;
  $30 = (+($29|0));
  $31 = 1.0 / $30;
  $32 = $28 * $31;
  $8 = $32;
  $33 = $8;
  $34 = $8;
  $35 = $33 * $34;
  $36 = $8;
  $37 = $8;
  $38 = -0.033333333333333333 * $37;
  $39 = 0.023809523809523808 + $38;
  $40 = $36 * $39;
  $41 = -0.033333333333333333 + $40;
  $42 = $35 * $41;
  $9 = $42;
  $43 = $3;
  $44 = (+($43|0));
  $45 = 0.5 / $44;
  $46 = 1.0 + $45;
  $47 = $3;
  $48 = (+($47|0));
  $49 = 6.0 * $48;
  $50 = $3;
  $51 = (+($50|0));
  $52 = $49 * $51;
  $53 = 1.0 / $52;
  $54 = $46 + $53;
  $55 = $9;
  $56 = $54 + $55;
  $57 = $3;
  $58 = (+($57|0));
  $59 = $56 / $58;
  $60 = $4;
  HEAPF64[$60>>3] = $59;
  $61 = $4;
  $62 = +HEAPF64[$61>>3];
  $63 = 2.2204460492503131E-16 * $62;
  $64 = $4;
  $65 = ((($64)) + 8|0);
  HEAPF64[$65>>3] = $63;
  $2 = 0;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _gsl_sf_psi_1_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $12 = sp;
 $3 = $0;
 $4 = $1;
 $14 = $3;
 $15 = $14 == 0.0;
 $16 = $3;
 $17 = $16 == -1.0;
 $or$cond = $15 | $17;
 $18 = $3;
 $19 = $18 == -2.0;
 $or$cond3 = $or$cond | $19;
 if ($or$cond3) {
  $20 = $4;
  HEAPF64[$20>>3] = nan;
  $21 = $4;
  $22 = ((($21)) + 8|0);
  HEAPF64[$22>>3] = nan;
  _gsl_error(83774,83768,727,1);
  $2 = 1;
  $97 = $2;
  STACKTOP = sp;return ($97|0);
 }
 $23 = $3;
 $24 = $23 > 0.0;
 $25 = $3;
 if ($24) {
  $26 = $4;
  $27 = (_psi_n_xg0(1,$25,$26)|0);
  $2 = $27;
  $97 = $2;
  STACKTOP = sp;return ($97|0);
 }
 $28 = $25 > -5.0;
 $29 = $3;
 if (!($28)) {
  $76 = 3.1415926535897931 * $29;
  $77 = (+Math_sin((+$76)));
  $10 = $77;
  $78 = $10;
  $79 = $10;
  $80 = $78 * $79;
  $81 = 9.869604401089358 / $80;
  $11 = $81;
  $82 = $3;
  $83 = 1.0 - $82;
  $84 = (_psi_n_xg0(1,$83,$12)|0);
  $13 = $84;
  $85 = $11;
  $86 = +HEAPF64[$12>>3];
  $87 = $85 - $86;
  $88 = $4;
  HEAPF64[$88>>3] = $87;
  $89 = ((($12)) + 8|0);
  $90 = +HEAPF64[$89>>3];
  $91 = $11;
  $92 = 4.4408920985006262E-16 * $91;
  $93 = $90 + $92;
  $94 = $4;
  $95 = ((($94)) + 8|0);
  HEAPF64[$95>>3] = $93;
  $96 = $13;
  $2 = $96;
  $97 = $2;
  STACKTOP = sp;return ($97|0);
 }
 $30 = (+Math_floor((+$29)));
 $31 = - $30;
 $32 = (~~(($31)));
 $5 = $32;
 $33 = $3;
 $34 = $5;
 $35 = (+($34|0));
 $36 = $33 + $35;
 $6 = $36;
 $7 = 0.0;
 $37 = $6;
 $38 = $37 == 0.0;
 if ($38) {
  $39 = $4;
  HEAPF64[$39>>3] = nan;
  $40 = $4;
  $41 = ((($40)) + 8|0);
  HEAPF64[$41>>3] = nan;
  _gsl_error(83774,83768,742,1);
  $2 = 1;
  $97 = $2;
  STACKTOP = sp;return ($97|0);
 }
 $8 = 0;
 while(1) {
  $42 = $8;
  $43 = $5;
  $44 = ($42|0)<($43|0);
  if (!($44)) {
   break;
  }
  $45 = $3;
  $46 = $8;
  $47 = (+($46|0));
  $48 = $45 + $47;
  $49 = $3;
  $50 = $8;
  $51 = (+($50|0));
  $52 = $49 + $51;
  $53 = $48 * $52;
  $54 = 1.0 / $53;
  $55 = $7;
  $56 = $55 + $54;
  $7 = $56;
  $57 = $8;
  $58 = (($57) + 1)|0;
  $8 = $58;
 }
 $59 = $6;
 $60 = $4;
 $61 = (_psi_n_xg0(1,$59,$60)|0);
 $9 = $61;
 $62 = $7;
 $63 = $4;
 $64 = +HEAPF64[$63>>3];
 $65 = $64 + $62;
 HEAPF64[$63>>3] = $65;
 $66 = $5;
 $67 = (+($66|0));
 $68 = $67 * 2.2204460492503131E-16;
 $69 = $7;
 $70 = $68 * $69;
 $71 = $4;
 $72 = ((($71)) + 8|0);
 $73 = +HEAPF64[$72>>3];
 $74 = $73 + $70;
 HEAPF64[$72>>3] = $74;
 $75 = $9;
 $2 = $75;
 $97 = $2;
 STACKTOP = sp;return ($97|0);
}
function _psi_n_xg0($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 16|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $5;
  $15 = $6;
  $16 = (_gsl_sf_psi_e($14,$15)|0);
  $3 = $16;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 }
 $17 = $4;
 $18 = (+($17|0));
 $19 = $18 + 1.0;
 $20 = $5;
 $21 = (_gsl_sf_hzeta_e($19,$20,$8)|0);
 $9 = $21;
 $22 = $4;
 $23 = (_gsl_sf_lnfact_e($22,$7)|0);
 $10 = $23;
 $24 = +HEAPF64[$7>>3];
 $25 = ((($7)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = +HEAPF64[$8>>3];
 $28 = ((($8)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $6;
 $31 = (_gsl_sf_exp_mult_err_e($24,$26,$27,$29,$30)|0);
 $11 = $31;
 $32 = $4;
 $33 = $32 & 1;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $35 = $6;
  $36 = +HEAPF64[$35>>3];
  $37 = - $36;
  $38 = $6;
  HEAPF64[$38>>3] = $37;
 }
 $39 = $11;
 $40 = ($39|0)!=(0);
 do {
  if ($40) {
   $41 = $11;
   $49 = $41;
  } else {
   $42 = $10;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $10;
    $49 = $44;
    break;
   } else {
    $45 = $9;
    $46 = ($45|0)!=(0);
    $47 = $9;
    $48 = $46 ? $47 : 0;
    $49 = $48;
    break;
   }
  }
 } while(0);
 $3 = $49;
 $50 = $3;
 STACKTOP = sp;return ($50|0);
}
function _gsl_sf_psi_n_e($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 16|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $5;
  $15 = $6;
  $16 = (_gsl_sf_psi_e($14,$15)|0);
  $3 = $16;
  $62 = $3;
  STACKTOP = sp;return ($62|0);
 }
 $17 = $4;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = $5;
  $20 = $6;
  $21 = (_gsl_sf_psi_1_e($19,$20)|0);
  $3 = $21;
  $62 = $3;
  STACKTOP = sp;return ($62|0);
 }
 $22 = $4;
 $23 = ($22|0)<(0);
 $24 = $5;
 $25 = $24 <= 0.0;
 $or$cond = $23 | $25;
 if ($or$cond) {
  $26 = $6;
  HEAPF64[$26>>3] = nan;
  $27 = $6;
  $28 = ((($27)) + 8|0);
  HEAPF64[$28>>3] = nan;
  _gsl_error(83774,83768,781,1);
  $3 = 1;
  $62 = $3;
  STACKTOP = sp;return ($62|0);
 }
 $29 = $4;
 $30 = (+($29|0));
 $31 = $30 + 1.0;
 $32 = $5;
 $33 = (_gsl_sf_hzeta_e($31,$32,$8)|0);
 $9 = $33;
 $34 = $4;
 $35 = (_gsl_sf_lnfact_e($34,$7)|0);
 $10 = $35;
 $36 = +HEAPF64[$7>>3];
 $37 = ((($7)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = +HEAPF64[$8>>3];
 $40 = ((($8)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $6;
 $43 = (_gsl_sf_exp_mult_err_e($36,$38,$39,$41,$42)|0);
 $11 = $43;
 $44 = $4;
 $45 = $44 & 1;
 $46 = ($45|0)!=(0);
 if (!($46)) {
  $47 = $6;
  $48 = +HEAPF64[$47>>3];
  $49 = - $48;
  $50 = $6;
  HEAPF64[$50>>3] = $49;
 }
 $51 = $11;
 $52 = ($51|0)!=(0);
 do {
  if ($52) {
   $53 = $11;
   $61 = $53;
  } else {
   $54 = $10;
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = $10;
    $61 = $56;
    break;
   } else {
    $57 = $9;
    $58 = ($57|0)!=(0);
    $59 = $9;
    $60 = $58 ? $59 : 0;
    $61 = $60;
    break;
   }
  }
 } while(0);
 $3 = $61;
 $62 = $3;
 STACKTOP = sp;return ($62|0);
}
function _gsl_sf_hzeta_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $21 = $4;
 $22 = $21 <= 1.0;
 $23 = $5;
 $24 = $23 <= 0.0;
 $or$cond = $22 | $24;
 if ($or$cond) {
  $25 = $6;
  HEAPF64[$25>>3] = nan;
  $26 = $6;
  $27 = ((($26)) + 8|0);
  HEAPF64[$27>>3] = nan;
  _gsl_error(83774,83787,719,1);
  $3 = 1;
  $179 = $3;
  STACKTOP = sp;return ($179|0);
 }
 $7 = 54.0;
 $28 = $4;
 $29 = - $28;
 $30 = $5;
 $31 = (+Math_log((+$30)));
 $32 = $29 * $31;
 $8 = $32;
 $33 = $8;
 $34 = $33 < -707.39641853226408;
 if ($34) {
  $35 = $6;
  HEAPF64[$35>>3] = 0.0;
  $36 = $6;
  $37 = ((($36)) + 8|0);
  HEAPF64[$37>>3] = 2.2250738585072014E-308;
  _gsl_error(83794,83787,726,15);
  $3 = 15;
  $179 = $3;
  STACKTOP = sp;return ($179|0);
 }
 $38 = $8;
 $39 = $38 > 708.78271289338397;
 if ($39) {
  $40 = $6;
  HEAPF64[$40>>3] = inf;
  $41 = $6;
  $42 = ((($41)) + 8|0);
  HEAPF64[$42>>3] = inf;
  _gsl_error(83804,83787,729,16);
  $3 = 16;
  $179 = $3;
  STACKTOP = sp;return ($179|0);
 }
 $43 = $4;
 $44 = $43 > 54.0;
 $45 = $5;
 $46 = $45 < 1.0;
 $or$cond3 = $44 & $46;
 if (!($or$cond3)) {
  $47 = $4;
  $48 = $47 > 27.0;
  $49 = $5;
  $50 = $49 < 0.25;
  $or$cond5 = $48 & $50;
  if (!($or$cond5)) {
   $62 = $4;
   $63 = $62 > 27.0;
   $64 = $5;
   $65 = $64 < 1.0;
   $or$cond7 = $63 & $65;
   if ($or$cond7) {
    $66 = $5;
    $67 = $4;
    $68 = - $67;
    $69 = (+Math_pow((+$66),(+$68)));
    $9 = $69;
    $70 = $5;
    $71 = $5;
    $72 = 1.0 + $71;
    $73 = $70 / $72;
    $74 = $4;
    $75 = (+Math_pow((+$73),(+$74)));
    $10 = $75;
    $76 = $5;
    $77 = $5;
    $78 = 2.0 + $77;
    $79 = $76 / $78;
    $80 = $4;
    $81 = (+Math_pow((+$79),(+$80)));
    $11 = $81;
    $82 = $9;
    $83 = $10;
    $84 = 1.0 + $83;
    $85 = $11;
    $86 = $84 + $85;
    $87 = $82 * $86;
    $88 = $6;
    HEAPF64[$88>>3] = $87;
    $89 = $4;
    $90 = 0.5 * $89;
    $91 = $90 + 2.0;
    $92 = 2.2204460492503131E-16 * $91;
    $93 = $6;
    $94 = +HEAPF64[$93>>3];
    $95 = (+Math_abs((+$94)));
    $96 = $92 * $95;
    $97 = $6;
    $98 = ((($97)) + 8|0);
    HEAPF64[$98>>3] = $96;
    $3 = 0;
    $179 = $3;
    STACKTOP = sp;return ($179|0);
   }
   $12 = 12;
   $13 = 10;
   $99 = $5;
   $100 = 10.0 + $99;
   $101 = $4;
   $102 = - $101;
   $103 = (+Math_pow((+$100),(+$102)));
   $16 = $103;
   $104 = $4;
   $17 = $104;
   $105 = $16;
   $106 = $5;
   $107 = 10.0 + $106;
   $108 = $105 / $107;
   $18 = $108;
   $109 = $16;
   $110 = $5;
   $111 = 10.0 + $110;
   $112 = $4;
   $113 = $112 - 1.0;
   $114 = $111 / $113;
   $115 = $114 + 0.5;
   $116 = $109 * $115;
   $19 = $116;
   $15 = 0;
   while(1) {
    $117 = $15;
    $118 = ($117|0)<(10);
    if (!($118)) {
     break;
    }
    $119 = $15;
    $120 = (+($119|0));
    $121 = $5;
    $122 = $120 + $121;
    $123 = $4;
    $124 = - $123;
    $125 = (+Math_pow((+$122),(+$124)));
    $126 = $19;
    $127 = $126 + $125;
    $19 = $127;
    $128 = $15;
    $129 = (($128) + 1)|0;
    $15 = $129;
   }
   $14 = 0;
   while(1) {
    $130 = $14;
    $131 = ($130|0)<=(12);
    if (!($131)) {
     break;
    }
    $132 = $14;
    $133 = (($132) + 1)|0;
    $134 = (41216 + ($133<<3)|0);
    $135 = +HEAPF64[$134>>3];
    $136 = $17;
    $137 = $135 * $136;
    $138 = $18;
    $139 = $137 * $138;
    $20 = $139;
    $140 = $20;
    $141 = $19;
    $142 = $141 + $140;
    $19 = $142;
    $143 = $20;
    $144 = $19;
    $145 = $143 / $144;
    $146 = (+Math_abs((+$145)));
    $147 = $146 < 1.1102230246251565E-16;
    if ($147) {
     break;
    }
    $148 = $4;
    $149 = $14;
    $150 = $149<<1;
    $151 = (+($150|0));
    $152 = $148 + $151;
    $153 = $152 + 1.0;
    $154 = $4;
    $155 = $14;
    $156 = $155<<1;
    $157 = (+($156|0));
    $158 = $154 + $157;
    $159 = $158 + 2.0;
    $160 = $153 * $159;
    $161 = $17;
    $162 = $161 * $160;
    $17 = $162;
    $163 = $5;
    $164 = 10.0 + $163;
    $165 = $5;
    $166 = 10.0 + $165;
    $167 = $164 * $166;
    $168 = $18;
    $169 = $168 / $167;
    $18 = $169;
    $170 = $14;
    $171 = (($170) + 1)|0;
    $14 = $171;
   }
   $172 = $19;
   $173 = $6;
   HEAPF64[$173>>3] = $172;
   $174 = $19;
   $175 = (+Math_abs((+$174)));
   $176 = 5.773159728050814E-15 * $175;
   $177 = $6;
   $178 = ((($177)) + 8|0);
   HEAPF64[$178>>3] = $176;
   $3 = 0;
   $179 = $3;
   STACKTOP = sp;return ($179|0);
  }
 }
 $51 = $5;
 $52 = $4;
 $53 = - $52;
 $54 = (+Math_pow((+$51),(+$53)));
 $55 = $6;
 HEAPF64[$55>>3] = $54;
 $56 = $6;
 $57 = +HEAPF64[$56>>3];
 $58 = (+Math_abs((+$57)));
 $59 = 4.4408920985006262E-16 * $58;
 $60 = $6;
 $61 = ((($60)) + 8|0);
 HEAPF64[$61>>3] = $59;
 $3 = 0;
 $179 = $3;
 STACKTOP = sp;return ($179|0);
}
function _gsl_coerce_double($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 STACKTOP = sp;return (+$4);
}
function _gsl_finite($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (___DOUBLE_BITS_4543($2)|0);
 $4 = (getTempRet0() | 0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)<(2146435072);
 $7 = ($3>>>0)<(0);
 $8 = ($5|0)==(2146435072);
 $9 = $8 & $7;
 $10 = $6 | $9;
 $11 = $10&1;
 STACKTOP = sp;return ($11|0);
}
function ___DOUBLE_BITS_4543($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAPF64[$2>>3] = $3;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 setTempRet0(($9) | 0);
 STACKTOP = sp;return ($6|0);
}
function _GSL_MAX_DBL($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $4 > $5;
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return (+$9);
}
function _GSL_MIN_DBL($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $4 < $5;
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return (+$9);
}
function _gsl_pow_2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = $2 * $3;
 STACKTOP = sp;return (+$4);
}
function _gsl_pow_3($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = $2 * $3;
 $5 = $1;
 $6 = $4 * $5;
 STACKTOP = sp;return (+$6);
}
function _gsl_pow_4($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $1;
 $5 = $3 * $4;
 $2 = $5;
 $6 = $2;
 $7 = $2;
 $8 = $6 * $7;
 STACKTOP = sp;return (+$8);
}
function _gsl_pow_uint($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 1.0;
 while(1) {
  $5 = $3;
  $6 = $5 & 1;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $2;
   $9 = $4;
   $10 = $9 * $8;
   $4 = $10;
  }
  $11 = $3;
  $12 = $11 >>> 1;
  $3 = $12;
  $13 = $2;
  $14 = $2;
  $15 = $14 * $13;
  $2 = $15;
  $16 = $3;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
 }
 $18 = $4;
 STACKTOP = sp;return (+$18);
}
function _gsl_cdf_ugaussian_Pinv($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $7 = $2;
 $8 = $7 - 0.5;
 $6 = $8;
 $9 = $2;
 $10 = $9 == 1.0;
 do {
  if ($10) {
   $1 = inf;
  } else {
   $11 = $2;
   $12 = $11 == 0.0;
   if ($12) {
    $1 = -inf;
    break;
   }
   $13 = $6;
   $14 = (+Math_abs((+$13)));
   $15 = $14 <= 0.42499999999999999;
   if ($15) {
    $16 = $6;
    $17 = (+_small($16));
    $4 = $17;
    $18 = $4;
    $1 = $18;
    break;
   }
   $19 = $2;
   $20 = $19 < 0.5;
   $21 = $2;
   $22 = 1.0 - $21;
   $23 = $20 ? $21 : $22;
   $5 = $23;
   $24 = $5;
   $25 = (+Math_log((+$24)));
   $26 = - $25;
   $27 = (+Math_sqrt((+$26)));
   $3 = $27;
   $28 = $3;
   $29 = $28 <= 5.0;
   $30 = $3;
   if ($29) {
    $31 = (+_intermediate($30));
    $4 = $31;
   } else {
    $32 = (+_tail($30));
    $4 = $32;
   }
   $33 = $2;
   $34 = $33 < 0.5;
   $35 = $4;
   if ($34) {
    $36 = - $35;
    $1 = $36;
    break;
   } else {
    $1 = $35;
    break;
   }
  }
 } while(0);
 $37 = $1;
 STACKTOP = sp;return (+$37);
}
function _small($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = $1;
 $6 = $4 * $5;
 $7 = 0.18062500000000001 - $6;
 $2 = $7;
 $8 = $1;
 $9 = $2;
 $10 = (+_rat_eval(41600,8,41664,8,$9));
 $11 = $8 * $10;
 $3 = $11;
 $12 = $3;
 STACKTOP = sp;return (+$12);
}
function _intermediate($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 - 1.6000000000000001;
 $5 = (+_rat_eval(41472,8,41536,8,$4));
 $2 = $5;
 $6 = $2;
 STACKTOP = sp;return (+$6);
}
function _tail($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 - 5.0;
 $5 = (+_rat_eval(41344,8,41408,8,$4));
 $2 = $5;
 $6 = $2;
 STACKTOP = sp;return (+$6);
}
function _rat_eval($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $5;
 $16 = $6;
 $17 = (($16) - 1)|0;
 $18 = (($15) + ($17<<3)|0);
 $19 = +HEAPF64[$18>>3];
 $12 = $19;
 $20 = $6;
 $21 = (($20) - 1)|0;
 $10 = $21;
 while(1) {
  $22 = $10;
  $23 = ($22>>>0)>(0);
  if (!($23)) {
   break;
  }
  $24 = $9;
  $25 = $12;
  $26 = $24 * $25;
  $27 = $5;
  $28 = $10;
  $29 = (($28) - 1)|0;
  $30 = (($27) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $26 + $31;
  $12 = $32;
  $33 = $10;
  $34 = (($33) + -1)|0;
  $10 = $34;
 }
 $35 = $7;
 $36 = $8;
 $37 = (($36) - 1)|0;
 $38 = (($35) + ($37<<3)|0);
 $39 = +HEAPF64[$38>>3];
 $13 = $39;
 $40 = $8;
 $41 = (($40) - 1)|0;
 $11 = $41;
 while(1) {
  $42 = $11;
  $43 = ($42>>>0)>(0);
  if (!($43)) {
   break;
  }
  $44 = $9;
  $45 = $13;
  $46 = $44 * $45;
  $47 = $7;
  $48 = $11;
  $49 = (($48) - 1)|0;
  $50 = (($47) + ($49<<3)|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $46 + $51;
  $13 = $52;
  $53 = $11;
  $54 = (($53) + -1)|0;
  $11 = $54;
 }
 $55 = $12;
 $56 = $13;
 $57 = $55 / $56;
 $14 = $57;
 $58 = $14;
 STACKTOP = sp;return (+$58);
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[323067]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (1292308 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[323067] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(1292276)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (1292308 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[323067] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(1292288)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (1292308 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[323067] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(1292276)>>2] = $76;
     HEAP32[(1292288)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(1292272)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (1292572 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (1292572 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(1292272)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(1292288)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (1292308 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[323067] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(1292276)>>2] = $$0171$i;
       HEAP32[(1292288)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(1292272)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (1292572 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (1292572 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312;
       } else {
        $313 = $309;
       }
       $314 = ($313|0)==(0|0);
       if ($314) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $313;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(1292276)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (1292572 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(1292272)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (1292308 + ($382<<2)|0);
           $384 = HEAP32[323067]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[323067] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (1292572 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(1292272)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(1292276)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(1292288)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(1292288)>>2] = $465;
   HEAP32[(1292276)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(1292276)>>2] = 0;
   HEAP32[(1292288)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(1292280)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(1292280)>>2] = $480;
  $481 = HEAP32[(1292292)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(1292292)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[323185]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(1292748)>>2] = 4096;
  HEAP32[(1292744)>>2] = 4096;
  HEAP32[(1292752)>>2] = -1;
  HEAP32[(1292756)>>2] = -1;
  HEAP32[(1292760)>>2] = 0;
  HEAP32[(1292712)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[323185] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(1292748)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(1292708)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(1292700)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(1292712)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(1292292)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (1292716);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(1292744)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(1292700)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(1292708)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(1292748)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(1292712)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(1292712)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(1292700)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(1292700)>>2] = $582;
  $583 = HEAP32[(1292704)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(1292704)>>2] = $582;
  }
  $585 = HEAP32[(1292292)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(1292284)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(1292284)>>2] = $$748$i;
    }
    HEAP32[(1292716)>>2] = $$748$i;
    HEAP32[(1292720)>>2] = $$723947$i;
    HEAP32[(1292728)>>2] = 0;
    $590 = HEAP32[323185]|0;
    HEAP32[(1292304)>>2] = $590;
    HEAP32[(1292300)>>2] = -1;
    HEAP32[(1292320)>>2] = (1292308);
    HEAP32[(1292316)>>2] = (1292308);
    HEAP32[(1292328)>>2] = (1292316);
    HEAP32[(1292324)>>2] = (1292316);
    HEAP32[(1292336)>>2] = (1292324);
    HEAP32[(1292332)>>2] = (1292324);
    HEAP32[(1292344)>>2] = (1292332);
    HEAP32[(1292340)>>2] = (1292332);
    HEAP32[(1292352)>>2] = (1292340);
    HEAP32[(1292348)>>2] = (1292340);
    HEAP32[(1292360)>>2] = (1292348);
    HEAP32[(1292356)>>2] = (1292348);
    HEAP32[(1292368)>>2] = (1292356);
    HEAP32[(1292364)>>2] = (1292356);
    HEAP32[(1292376)>>2] = (1292364);
    HEAP32[(1292372)>>2] = (1292364);
    HEAP32[(1292384)>>2] = (1292372);
    HEAP32[(1292380)>>2] = (1292372);
    HEAP32[(1292392)>>2] = (1292380);
    HEAP32[(1292388)>>2] = (1292380);
    HEAP32[(1292400)>>2] = (1292388);
    HEAP32[(1292396)>>2] = (1292388);
    HEAP32[(1292408)>>2] = (1292396);
    HEAP32[(1292404)>>2] = (1292396);
    HEAP32[(1292416)>>2] = (1292404);
    HEAP32[(1292412)>>2] = (1292404);
    HEAP32[(1292424)>>2] = (1292412);
    HEAP32[(1292420)>>2] = (1292412);
    HEAP32[(1292432)>>2] = (1292420);
    HEAP32[(1292428)>>2] = (1292420);
    HEAP32[(1292440)>>2] = (1292428);
    HEAP32[(1292436)>>2] = (1292428);
    HEAP32[(1292448)>>2] = (1292436);
    HEAP32[(1292444)>>2] = (1292436);
    HEAP32[(1292456)>>2] = (1292444);
    HEAP32[(1292452)>>2] = (1292444);
    HEAP32[(1292464)>>2] = (1292452);
    HEAP32[(1292460)>>2] = (1292452);
    HEAP32[(1292472)>>2] = (1292460);
    HEAP32[(1292468)>>2] = (1292460);
    HEAP32[(1292480)>>2] = (1292468);
    HEAP32[(1292476)>>2] = (1292468);
    HEAP32[(1292488)>>2] = (1292476);
    HEAP32[(1292484)>>2] = (1292476);
    HEAP32[(1292496)>>2] = (1292484);
    HEAP32[(1292492)>>2] = (1292484);
    HEAP32[(1292504)>>2] = (1292492);
    HEAP32[(1292500)>>2] = (1292492);
    HEAP32[(1292512)>>2] = (1292500);
    HEAP32[(1292508)>>2] = (1292500);
    HEAP32[(1292520)>>2] = (1292508);
    HEAP32[(1292516)>>2] = (1292508);
    HEAP32[(1292528)>>2] = (1292516);
    HEAP32[(1292524)>>2] = (1292516);
    HEAP32[(1292536)>>2] = (1292524);
    HEAP32[(1292532)>>2] = (1292524);
    HEAP32[(1292544)>>2] = (1292532);
    HEAP32[(1292540)>>2] = (1292532);
    HEAP32[(1292552)>>2] = (1292540);
    HEAP32[(1292548)>>2] = (1292540);
    HEAP32[(1292560)>>2] = (1292548);
    HEAP32[(1292556)>>2] = (1292548);
    HEAP32[(1292568)>>2] = (1292556);
    HEAP32[(1292564)>>2] = (1292556);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(1292292)>>2] = $599;
    HEAP32[(1292280)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(1292756)>>2]|0;
    HEAP32[(1292296)>>2] = $605;
   } else {
    $$024372$i = (1292716);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(1292280)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(1292292)>>2] = $631;
       HEAP32[(1292280)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(1292756)>>2]|0;
       HEAP32[(1292296)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(1292284)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(1292284)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (1292716);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(1292280)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(1292280)>>2] = $678;
        HEAP32[(1292292)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(1292288)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(1292276)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(1292276)>>2] = $684;
         HEAP32[(1292288)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[323067]|0;
            $703 = $702 & $701;
            HEAP32[323067] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (1292572 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(1292272)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(1292272)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (1292308 + ($763<<2)|0);
         $765 = HEAP32[323067]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[323067] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (1292572 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(1292272)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(1292272)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (1292716);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(1292292)>>2] = $870;
    HEAP32[(1292280)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(1292756)>>2]|0;
    HEAP32[(1292296)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(1292716)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(1292716)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(1292716)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(1292716)+12>>2]|0;
    HEAP32[(1292716)>>2] = $$748$i;
    HEAP32[(1292720)>>2] = $$723947$i;
    HEAP32[(1292728)>>2] = 0;
    HEAP32[(1292724)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (1292308 + ($892<<2)|0);
      $894 = HEAP32[323067]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[323067] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (1292572 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(1292272)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(1292272)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(1292280)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(1292280)>>2] = $971;
   $972 = HEAP32[(1292292)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(1292292)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(1292284)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(1292288)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(1292276)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[323067]|0;
     $29 = $28 & $27;
     HEAP32[323067] = $29;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (1292572 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(1292272)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(1292272)>>2] = $62;
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(1292292)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(1292280)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(1292280)>>2] = $98;
   HEAP32[(1292292)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(1292288)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(1292288)>>2] = 0;
   HEAP32[(1292276)>>2] = 0;
   return;
  }
  $103 = HEAP32[(1292288)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(1292276)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(1292276)>>2] = $106;
   HEAP32[(1292288)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[323067]|0;
     $122 = $121 & $120;
     HEAP32[323067] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (1292572 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(1292272)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(1292272)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(1292288)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(1292276)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (1292308 + ($183<<2)|0);
  $185 = HEAP32[323067]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[323067] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (1292572 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(1292272)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(1292272)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(1292300)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(1292300)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (1292724);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(1292300)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(1292748)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(1292292)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(1292280)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(1292292)>>2] = $33;
  HEAP32[(1292280)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(1292288)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(1292276)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(1292276)>>2] = $storemerge1;
  HEAP32[(1292288)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[323067]|0;
    $81 = $80 & $79;
    HEAP32[323067] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (1292572 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(1292272)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(1292272)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(1292288)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(1292276)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[323067]|0;
     $25 = $24 & $23;
     HEAP32[323067] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (1292572 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(1292272)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(1292272)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(1292292)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(1292280)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(1292280)>>2] = $89;
   HEAP32[(1292292)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(1292288)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(1292288)>>2] = 0;
   HEAP32[(1292276)>>2] = 0;
   return;
  }
  $94 = HEAP32[(1292288)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(1292276)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(1292276)>>2] = $97;
   HEAP32[(1292288)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[323067]|0;
     $113 = $112 & $111;
     HEAP32[323067] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (1292572 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(1292272)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(1292272)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(1292288)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(1292276)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (1292308 + ($174<<2)|0);
  $176 = HEAP32[323067]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[323067] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (1292572 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(1292272)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(1292272)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_560($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1292828|0);
}
function _dummy_560($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 5;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strtox_727($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 setTempRet0(($13) | 0);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((41937) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((41937) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$92 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $93 = ($92|0)<(0);
         $94 = $93 << 31 >> 31;
         $95 = $92 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$92 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$264 = $103;$266 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$264 = 0;$266 = $73;
       }
      } else {
       $$1158 = $$0157;$264 = 0;$266 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (83813 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((41937) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((41937) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((41937) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((41937) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((41937) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $296;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((41937) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$208 = $226;$210 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((41937) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((41937) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$264 = $4;$266 = $3;
    } else {
     $$1158 = $$0157;$264 = $294;$266 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $265 = ($264>>>0)<($4>>>0);
   $267 = ($266>>>0)<($3>>>0);
   $268 = ($264|0)==($4|0);
   $269 = $268 & $267;
   $270 = $265 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($264>>>0)>($4>>>0);
    $280 = ($266>>>0)>($3>>>0);
    $281 = ($264|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $266 ^ $$1158;
   $288 = $264 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_727($0,$1,$2,-2147483648,0)|0);
 $4 = (getTempRet0() | 0);
 return ($3|0);
}
function _hypot($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$036 = 0.0, $$037 = 0.0, $$038 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select40 = 0.0, $spec$select41 = 0.0, $spec$select42 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 HEAPF64[tempDoublePtr>>3] = $0;$6 = HEAP32[tempDoublePtr>>2]|0;
 $7 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$8 = HEAP32[tempDoublePtr>>2]|0;
 $9 = HEAP32[tempDoublePtr+4>>2]|0;
 $10 = $7 & 2147483647;
 $11 = $9 & 2147483647;
 $12 = ($10>>>0)<($11>>>0);
 $13 = ($6>>>0)<($8>>>0);
 $14 = ($10|0)==($11|0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 $17 = $16 ? $8 : $6;
 $18 = $16 ? $11 : $10;
 $19 = $16 ? $6 : $8;
 $20 = $16 ? $10 : $11;
 $21 = (_bitshift64Lshr(($17|0),($18|0),52)|0);
 $22 = (getTempRet0() | 0);
 $23 = (_bitshift64Lshr(($19|0),($20|0),52)|0);
 $24 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$25 = +HEAPF64[tempDoublePtr>>3];
 HEAP32[tempDoublePtr>>2] = $19;HEAP32[tempDoublePtr+4>>2] = $20;$26 = +HEAPF64[tempDoublePtr>>3];
 $27 = ($23|0)==(2047);
 do {
  if ($27) {
   $$036 = $26;
  } else {
   $28 = ($21|0)==(2047);
   $29 = ($19|0)==(0);
   $30 = ($20|0)==(0);
   $31 = $29 & $30;
   $or$cond = $31 | $28;
   if ($or$cond) {
    $$036 = $25;
   } else {
    $32 = (($21) - ($23))|0;
    $33 = ($32|0)>(64);
    if ($33) {
     $34 = $25 + $26;
     $$036 = $34;
     break;
    }
    $35 = ($21|0)>(1533);
    if ($35) {
     $36 = $25 * 1.9010915662951598E-211;
     $37 = $26 * 1.9010915662951598E-211;
     $$0 = 5.2601359015483735E+210;$$037 = $36;$$038 = $37;
    } else {
     $38 = ($23|0)<(573);
     $39 = $25 * 5.2601359015483735E+210;
     $40 = $26 * 5.2601359015483735E+210;
     $spec$select40 = $38 ? $40 : $26;
     $spec$select41 = $38 ? $39 : $25;
     $spec$select42 = $38 ? 1.9010915662951598E-211 : 1.0;
     $$0 = $spec$select42;$$037 = $spec$select41;$$038 = $spec$select40;
    }
    _sq($2,$3,$$037);
    _sq($4,$5,$$038);
    $41 = +HEAPF64[$5>>3];
    $42 = +HEAPF64[$3>>3];
    $43 = $41 + $42;
    $44 = +HEAPF64[$4>>3];
    $45 = $43 + $44;
    $46 = +HEAPF64[$2>>3];
    $47 = $45 + $46;
    $48 = (+Math_sqrt((+$47)));
    $49 = $$0 * $48;
    $$036 = $49;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$036);
}
function _sq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 * 134217729.0;
 $4 = $2 - $3;
 $5 = $3 + $4;
 $6 = $2 - $5;
 $7 = $2 * $2;
 HEAPF64[$0>>3] = $7;
 $8 = $5 * $5;
 $9 = $8 - $7;
 $10 = $5 * 2.0;
 $11 = $10 * $6;
 $12 = $9 + $11;
 $13 = $6 * $6;
 $14 = $13 + $12;
 HEAPF64[$1>>3] = $14;
 return;
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _cosh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $5 = ($3>>>0)<(1072049730);
 do {
  if ($5) {
   $6 = ($3>>>0)<(1045430272);
   if ($6) {
    $$0 = 1.0;
   } else {
    $7 = (+_expm1($4));
    $8 = $7 * $7;
    $9 = $7 + 1.0;
    $10 = $9 * 2.0;
    $11 = $8 / $10;
    $12 = $11 + 1.0;
    $$0 = $12;
   }
  } else {
   $13 = ($3>>>0)<(1082535490);
   if ($13) {
    $14 = (+Math_exp((+$4)));
    $15 = 1.0 / $14;
    $16 = $14 + $15;
    $17 = $16 * 0.5;
    $$0 = $17;
    break;
   } else {
    $18 = (+___expo2($4));
    $$0 = $18;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _sinh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2|0)<(0);
 $spec$select = $3 ? -0.5 : 0.5;
 $4 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
 $6 = ($4>>>0)<(1082535490);
 do {
  if ($6) {
   $7 = (+_expm1($5));
   $8 = ($4>>>0)<(1072693248);
   if (!($8)) {
    $16 = $7 + 1.0;
    $17 = $7 / $16;
    $18 = $7 + $17;
    $19 = $spec$select * $18;
    $$0 = $19;
    break;
   }
   $9 = ($4>>>0)<(1045430272);
   if ($9) {
    $$0 = $0;
   } else {
    $10 = $7 * 2.0;
    $11 = $7 * $7;
    $12 = $7 + 1.0;
    $13 = $11 / $12;
    $14 = $10 - $13;
    $15 = $spec$select * $14;
    $$0 = $15;
   }
  } else {
   $20 = $spec$select * 2.0;
   $21 = (+___expo2($5));
   $22 = $20 * $21;
   $$0 = $22;
  }
 } while(0);
 return (+$$0);
}
function _expm1($0) {
 $0 = +$0;
 var $$0 = 0.0, $$0105 = 0, $$0106 = 0.0, $$0107 = 0.0, $$0109 = 0.0, $$0110 = 0.0, $$0111 = 0.0, $$1 = 0, $$1108 = 0.0, $$sink = 0.0, $$sink113 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $5 = (getTempRet0() | 0);
 $6 = ($3>>>0)>(1078159481);
 do {
  if ($6) {
   $7 = (___DOUBLE_BITS_261($0)|0);
   $8 = (getTempRet0() | 0);
   $9 = $8 & 2147483647;
   $10 = ($9>>>0)>(2146435072);
   $11 = ($7>>>0)>(0);
   $12 = ($9|0)==(2146435072);
   $13 = $12 & $11;
   $14 = $10 | $13;
   if ($14) {
    $$0 = $0;
   } else {
    $15 = ($4|0)==(0);
    if ($15) {
     $16 = $0 > 709.78271289338397;
     if ($16) {
      $17 = $0 * 8.9884656743115795E+307;
      $$0 = $17;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $18 = ($3>>>0)>(1071001154);
   if (!($18)) {
    $35 = ($3>>>0)<(1016070144);
    if ($35) {
     $$0 = $0;
     break;
    } else {
     $$0106 = $0;$$0111 = 0.0;$$1 = 0;
     label = 14;
     break;
    }
   }
   $19 = ($3>>>0)<(1072734898);
   if ($19) {
    $20 = ($4|0)==(0);
    if ($20) {
     $21 = $0 + -0.69314718036912382;
     $$0105 = 1;$$0109 = $21;$$0110 = 1.9082149292705877E-10;
     label = 12;
     break;
    } else {
     $22 = $0 + 0.69314718036912382;
     $$0105 = -1;$$0109 = $22;$$0110 = -1.9082149292705877E-10;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $23 = $0 * 1.4426950408889634;
  $24 = ($4|0)==(0);
  $25 = $24 ? 0.5 : -0.5;
  $26 = $23 + $25;
  $27 = (~~(($26)));
  $28 = (+($27|0));
  $29 = $28 * 0.69314718036912382;
  $30 = $0 - $29;
  $31 = $28 * 1.9082149292705877E-10;
  $$0105 = $27;$$0109 = $30;$$0110 = $31;
  label = 12;
 }
 if ((label|0) == 12) {
  $32 = $$0109 - $$0110;
  $33 = $$0109 - $32;
  $34 = $33 - $$0110;
  $$0106 = $32;$$0111 = $34;$$1 = $$0105;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $36 = $$0106 * 0.5;
   $37 = $$0106 * $36;
   $38 = $37 * 2.0109921818362437E-7;
   $39 = 4.0082178273293624E-6 - $38;
   $40 = $37 * $39;
   $41 = $40 + -7.9365075786748794E-5;
   $42 = $37 * $41;
   $43 = $42 + 0.0015873015872548146;
   $44 = $37 * $43;
   $45 = $44 + -0.033333333333333132;
   $46 = $37 * $45;
   $47 = $46 + 1.0;
   $48 = $36 * $47;
   $49 = 3.0 - $48;
   $50 = $47 - $49;
   $51 = $$0106 * $49;
   $52 = 6.0 - $51;
   $53 = $50 / $52;
   $54 = $37 * $53;
   $55 = ($$1|0)==(0);
   if ($55) {
    $56 = $$0106 * $54;
    $57 = $56 - $37;
    $58 = $$0106 - $57;
    $$0 = $58;
    break;
   }
   $59 = $54 - $$0111;
   $60 = $$0106 * $59;
   $61 = $60 - $$0111;
   $62 = $61 - $37;
   switch ($$1|0) {
   case -1:  {
    $63 = $$0106 - $62;
    $64 = $63 * 0.5;
    $65 = $64 + -0.5;
    $$0 = $65;
    break L18;
    break;
   }
   case 1:  {
    $66 = $$0106 < -0.25;
    if ($66) {
     $67 = $$0106 + 0.5;
     $68 = $62 - $67;
     $69 = $68 * -2.0;
     $$0 = $69;
     break L18;
    } else {
     $70 = $$0106 - $62;
     $71 = $70 * 2.0;
     $72 = $71 + 1.0;
     $$0 = $72;
     break L18;
    }
    break;
   }
   default: {
    $73 = (($$1) + 1023)|0;
    $74 = (_bitshift64Shl(($73|0),0,52)|0);
    $75 = (getTempRet0() | 0);
    HEAP32[tempDoublePtr>>2] = $74;HEAP32[tempDoublePtr+4>>2] = $75;$76 = +HEAPF64[tempDoublePtr>>3];
    $77 = ($$1>>>0)>(56);
    if ($77) {
     $78 = $$0106 - $62;
     $79 = $78 + 1.0;
     $80 = ($$1|0)==(1024);
     $81 = $79 * 2.0;
     $82 = $81 * 8.9884656743115795E+307;
     $83 = $79 * $76;
     $$0107 = $80 ? $82 : $83;
     $84 = $$0107 + -1.0;
     $$0 = $84;
     break L18;
    }
    $85 = (1023 - ($$1))|0;
    $86 = (_bitshift64Shl(($85|0),0,52)|0);
    $87 = (getTempRet0() | 0);
    $88 = ($$1|0)<(20);
    if ($88) {
     $89 = $$0106 - $62;
     HEAP32[tempDoublePtr>>2] = $86;HEAP32[tempDoublePtr+4>>2] = $87;$90 = +HEAPF64[tempDoublePtr>>3];
     $91 = 1.0 - $90;
     $$sink = $91;$$sink113 = $89;
    } else {
     HEAP32[tempDoublePtr>>2] = $86;HEAP32[tempDoublePtr+4>>2] = $87;$92 = +HEAPF64[tempDoublePtr>>3];
     $93 = $62 + $92;
     $94 = $$0106 - $93;
     $$sink = $94;$$sink113 = 1.0;
    }
    $95 = $$sink + $$sink113;
    $$1108 = $95 * $76;
    $$0 = $$1108;
    break L18;
   }
   }
  }
 } while(0);
 return (+$$0);
}
function ___expo2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -1416.0996898839683;
 $2 = (+Math_exp((+$1)));
 $3 = $2 * 2.2471164185778949E+307;
 $4 = $3 * 2.2471164185778949E+307;
 return (+$4);
}
function ___DOUBLE_BITS_261($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=71532; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((42208 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 83822;$$2256 = $spec$select295;$$4266 = $spec$select;$276 = $240;$278 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 83822;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 83822 : (83824);
       $spec$select296 = $266 ? $$ : (83823);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 83822;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 83822;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 83832 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_669($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 83822;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (83822 + ($236)|0);
      $spec$select293 = $or$cond278 ? 83822 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$276 = $225;$278 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$276 = $271;$278 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 83822;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_669($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $277 = ($276|0)!=(0);
     $279 = ($278|0)!=(0);
     $280 = $277 | $279;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_669($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_669($0,32,$$2261,$341,$$6268);
    _out($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_669($0,48,$$2261,$341,$343);
    _pad_669($0,48,$spec$select284,$339,0);
    _out($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_669($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $353 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $354 = ($353>>>0)<(10);
      if ($354) {
       $$3317 = $353;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (42672 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_669($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_670($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_670($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 83839;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (83840) : (83845);
  $spec$select565 = $19 ? $$ : (83842);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 83858 : 83862;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 83896 : 83866;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_669($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_669($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (42672 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_669($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_669($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_669($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_669($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$134 = $$pr;
    while(1) {
     $135 = ($134|0)<(29);
     $136 = $135 ? $134 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $153 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$153>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $154 = ($153>>>0)>($$2483>>>0);
        if ($154) {
         $$3501676 = $153;
        } else {
         $$3501$lcssa = $153;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$134 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_669($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_669($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,83870,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_669($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,83870,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_669($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_669($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_670($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_423()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_423() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (71656|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (42688 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 42784;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 42784;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 63]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy_560($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $spec$store$select = $3 ? 0 : $2;
 $4 = (___syscall_ret($spec$store$select)|0);
 STACKTOP = sp;return ($4|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 48|0;
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $2 = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall197(197,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-9);
 if ($5) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $6 = (___syscall221(221,($vararg_buffer2|0))|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   $9 = $2;
   HEAP32[$vararg_buffer6>>2] = $9;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $3;
   $10 = (___syscall195(195,($vararg_buffer6|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = (___syscall_ret($4)|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=83872; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($0)) + 14|0);
  HEAP8[$3>>0] = 48;
  $4 = ((($0)) + 15|0);
  HEAP8[$4>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $5 = (($$027>>>0) / 10)&-1;
   $6 = (($$126) + 1)|0;
   $7 = ($$027>>>0)<(10);
   if ($7) {
    break;
   } else {
    $$027 = $5;$$126 = $6;
   }
  }
  $8 = (($0) + ($6)|0);
  HEAP8[$8>>0] = 0;
  $$02324 = $1;$$225 = $6;
  while(1) {
   $9 = (($$02324>>>0) / 10)&-1;
   $10 = ($9*10)|0;
   $11 = (($$02324) - ($10))|0;
   $12 = $11 | 48;
   $13 = $12&255;
   $14 = (($$225) + -1)|0;
   $15 = (($0) + ($14)|0);
   HEAP8[$15>>0] = $13;
   $16 = ($$02324>>>0)<(10);
   if ($16) {
    break;
   } else {
    $$02324 = $9;$$225 = $14;
   }
  }
 }
 return;
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $2 = sp;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $$pre = (((($0)) + 24|0) + ($2)|0);
   $$pre$phiZ2D = $$pre;$17 = $2;
   label = 7;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   $8 = $7;
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $8;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $9 = (___syscall220(220,($vararg_buffer|0))|0);
   $10 = ($9|0)<(1);
   if (!($10)) {
    HEAP32[$3>>2] = $9;
    HEAP32[$1>>2] = 0;
    $$pre$phiZ2D = $7;$17 = 0;
    label = 7;
    break;
   }
   switch ($9|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $11 = (0 - ($9))|0;
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = $11;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 7) {
  $13 = ((($$pre$phiZ2D)) + 8|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = (($17) + ($15))|0;
  HEAP32[$1>>2] = $16;
  $18 = ((($$pre$phiZ2D)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 4|0);
  HEAP32[$20>>2] = $19;
  $$1 = $$pre$phiZ2D;
 }
 STACKTOP = sp;return ($$1|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$169$be = 0, $$2 = 0, $$2$be = 0, $$be = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp;
 $5 = sp + 192|0;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$42 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $43 = ($42|0)==(1);
    $or$cond = $41 & $43;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     } else {
      label = 19;
     }
    } else {
     $46 = ($$2|0)<(2);
     if ($46) {
      label = 19;
     } else {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169$be = $60;$$2$be = $49;$$be = $59;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $47 = (_pntz($5)|0);
     _shr($5,$47);
     $48 = (($47) + ($$2))|0;
     $$pre$pre = HEAP32[$5>>2]|0;
     $$pre76 = (($$169) + ($12)|0);
     $$169$be = $$pre76;$$2$be = $48;$$be = $$pre$pre;
    }
    $$169 = $$169$be;$$2 = $$2$be;$42 = $$be;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$02934 = 0, $$03133 = 0, $$035 = 0, $$1 = 0, $$130 = 0, $$132 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02934 = $0;$$03133 = $3;$$035 = 1;$14 = $0;
   while(1) {
    $8 = (($$02934) + ($7)|0);
    $9 = (($$03133) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 31]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 31]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$035;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 31]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($5) + ($$035<<2)|0);
    if ($20) {
     HEAP32[$21>>2] = $13;
     $22 = (($$03133) + -1)|0;
     $$130 = $13;$$132 = $22;
    } else {
     HEAP32[$21>>2] = $8;
     $$130 = $8;$$132 = $9;
    }
    $$1 = (($$035) + 1)|0;
    $23 = ($$132|0)>(1);
    if (!($23)) {
     $$0$lcssa = $$1;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02934 = $$130;$$03133 = $$132;$$035 = $$1;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 31]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 31]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 31]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 31]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_722($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_722($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $spec$select = $9 ? 0 : $8;
  return ($spec$select|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_722($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $$068 & 2;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     (_memcpy(($10|0),($9|0),($8|0))|0);
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      (_memcpy(($12|0),($15|0),($8|0))|0);
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (83887 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (83896 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if (!($81)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $28 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $28 = $27;
  }
  $29 = ($28|0)==(48);
  if ($29) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $41 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $41 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = (getTempRet0() | 0);
    $42 = ($41|0)==(48);
    if ($42) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $41;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $28;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$51 = 0;$53 = 0;$96 = $212;$98 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $53;$215 = $51;$216 = $53;$217 = $51;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $52 = ($51|0)<(0);
   $54 = ($53>>>0)<(8);
   $55 = ($51|0)==(0);
   $56 = $55 & $54;
   $57 = $52 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($51|0)<(0);
     $61 = ($53>>>0)<(14);
     $62 = ($51|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($53|0),($51|0),1,0)|0);
   $74 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $96;$215 = $98;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$51 = $217;$53 = $216;$96 = $214;$98 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $97 = $95 ? $53 : $96;
   $99 = $95 ? $51 : $98;
   $100 = ($51|0)<(0);
   $101 = ($53>>>0)<(8);
   $102 = ($51|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $53;$107 = $51;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = (getTempRet0() | 0);
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = (getTempRet0() | 0);
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($97|0),($99|0),2)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = (getTempRet0() | 0);
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = (getTempRet0() | 0);
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = (getTempRet0() | 0);
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = (getTempRet0() | 0);
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = (getTempRet0() | 0);
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 100|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $25 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $25 = $24;
  }
  $26 = ($25|0)==(48);
  if ($26) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = (getTempRet0() | 0);
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $38 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $38 = $37;
    }
    $39 = ($38|0)==(48);
    if ($39) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $38;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $25;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = (getTempRet0() | 0);
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$76 = $381;$77 = $383;$79 = $382;$80 = $384;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$76 = $375;$77 = 0;$79 = $376;$80 = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $78 = $75 ? $77 : $76;
   $81 = $75 ? $80 : $79;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $78;$388 = $81;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $78;$394 = $81;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = (getTempRet0() | 0);
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($78|0),($81|0))|0);
   $98 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$109 = $97;$111 = $77;$112 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$109 = $387;$111 = $385;$112 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$109 = $393;$111 = $390;$112 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $110 = ($109|0)==($111|0);
   $113 = ($112|0)==($114|0);
   $115 = $110 & $113;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = $105 >>> $2;
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($112|0)>($129|0);
   $131 = ($109>>>0)>($127>>>0);
   $132 = ($112|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($112|0)<($141|0);
   $143 = ($109>>>0)<($139>>>0);
   $144 = ($112|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($109|0);
    $161 = ($109|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($109|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($109|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($109))|0;
      $173 = (44592 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($109, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = $$pre >>> $177;
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($109) + -10)|0;
      $185 = (44592 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($109|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $109;
   } else {
    $191 = ($109|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (44592 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $109;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $109;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = (getTempRet0() | 0);
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = (getTempRet0() | 0);
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = (getTempRet0() | 0);
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = (getTempRet0() | 0);
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = (getTempRet0() | 0);
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $296 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (71900 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = $280 >>> $spec$select420;
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $297 = ($296|0)==($spec$select443|0);
      if (!($297)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $296;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = (getTempRet0() | 0);
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = (getTempRet0() | 0);
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = (getTempRet0() | 0);
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = (getTempRet0() | 0);
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 setTempRet0(($99) | 0);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_273($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$100 = $92;$158 = $97;$159 = $87;$160 = $88;$98 = $91;
      while(1) {
       if ($158) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$100 = $111;$158 = $116;$159 = $106;$160 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $123 = $119;$125 = $117;
     }
    } else {
     $123 = $157;$125 = $156;
    }
    $124 = ($123>>>0)<(1048576);
    $126 = ($125>>>0)<(0);
    $127 = ($123|0)==(1048576);
    $128 = $127 & $126;
    $129 = $124 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_273($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $spec$select = $5 ? 1292832 : $3;
 $6 = HEAP32[$spec$select>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $spec$select47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$spec$select47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_414()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$spec$select47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 19;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (41728 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 19;
       break L1;
      }
      $41 = $$04051 << 6;
      $42 = (($34) + -128)|0;
      $43 = $42 | $41;
      $44 = (($$04350) + -1)|0;
      $45 = ($43|0)<(0);
      if ($45) {
       $$03952$pn = $$03952;$47 = $43;$53 = $44;
       while(1) {
        $56 = ((($$03952$pn)) + 1|0);
        $57 = ($53|0)==(0);
        if ($57) {
         $$2 = $47;
         break L14;
        }
        $49 = HEAP8[$56>>0]|0;
        $58 = $49 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         label = 19;
         break L1;
        }
        $46 = $47 << 6;
        $48 = $49&255;
        $50 = (($48) + -128)|0;
        $51 = $50 | $46;
        $52 = (($53) + -1)|0;
        $54 = ($51|0)<(0);
        if ($54) {
         $$03952$pn = $56;$47 = $51;$53 = $52;
        } else {
         $$lcssa = $52;$$lcssa56 = $51;
         break;
        }
       }
      } else {
       $$lcssa = $44;$$lcssa56 = $43;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select47>>2] = $$lcssa56;
      $55 = (($2) - ($$lcssa))|0;
      $$0 = $55;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $60 = (___errno_location()|0);
  HEAP32[$60>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_414() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function _log1p($0) {
 $0 = +$0;
 var $$081 = 0.0, $$1 = 0.0, $$183 = 0.0, $$185 = 0.0, $$2 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $phitmp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1071284858);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = ($2>>>0)>(3220176895);
   if ($5) {
    $6 = $0 == -1.0;
    if ($6) {
     $$081 = -inf;
     break;
    }
    $7 = $0 - $0;
    $8 = $7 / 0.0;
    $$081 = $8;
    break;
   } else {
    $9 = (_bitshift64Shl(($2|0),0,1)|0);
    $10 = (getTempRet0() | 0);
    $11 = ($9>>>0)<(2034237440);
    if ($11) {
     $$081 = $0;
     break;
    }
    $12 = ($2>>>0)<(3218259653);
    if ($12) {
     $$1 = 0.0;$$183 = $0;$$2 = 0.0;
     label = 11;
     break;
    } else {
     label = 8;
     break;
    }
   }
  } else {
   $13 = ($2>>>0)>(2146435071);
   if ($13) {
    $$081 = $0;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $14 = $0 + 1.0;
  HEAPF64[tempDoublePtr>>3] = $14;$15 = HEAP32[tempDoublePtr>>2]|0;
  $16 = HEAP32[tempDoublePtr+4>>2]|0;
  $17 = (($16) + 614242)|0;
  $18 = $17 >>> 20;
  $19 = (($18) + -1023)|0;
  $20 = ($17>>>0)<(1129316352);
  if ($20) {
   $21 = ($17>>>0)>(1074790399);
   $22 = $14 - $0;
   $23 = 1.0 - $22;
   $24 = $14 + -1.0;
   $25 = $0 - $24;
   $26 = $21 ? $23 : $25;
   $27 = $26 / $14;
   $$185 = $27;
  } else {
   $$185 = 0.0;
  }
  $28 = $17 & 1048575;
  $29 = (($28) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $29;$30 = +HEAPF64[tempDoublePtr>>3];
  $31 = $30 + -1.0;
  $phitmp = (+($19|0));
  $$1 = $phitmp;$$183 = $31;$$2 = $$185;
  label = 11;
 }
 if ((label|0) == 11) {
  $32 = $$183 * 0.5;
  $33 = $$183 * $32;
  $34 = $$183 + 2.0;
  $35 = $$183 / $34;
  $36 = $35 * $35;
  $37 = $36 * $36;
  $38 = $37 * 0.15313837699209373;
  $39 = $38 + 0.22222198432149784;
  $40 = $37 * $39;
  $41 = $40 + 0.39999999999409419;
  $42 = $37 * $41;
  $43 = $37 * 0.14798198605116586;
  $44 = $43 + 0.1818357216161805;
  $45 = $37 * $44;
  $46 = $45 + 0.28571428743662391;
  $47 = $37 * $46;
  $48 = $47 + 0.66666666666667351;
  $49 = $36 * $48;
  $50 = $42 + $49;
  $51 = $33 + $50;
  $52 = $35 * $51;
  $53 = $$1 * 1.9082149292705877E-10;
  $54 = $$2 + $53;
  $55 = $54 + $52;
  $56 = $55 - $33;
  $57 = $$183 + $56;
  $58 = $$1 * 0.69314718036912382;
  $59 = $58 + $57;
  $$081 = $59;
 }
 return (+$$081);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $spec$select;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_603()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_603() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(83900,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(83900,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 33;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 5;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 6;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 4;
   $40 = HEAP32[(1292768)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((1292836|0));
 return (1292844|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((1292836|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 7]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[17882]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[17882]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 63]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 63]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$05963 = 0, $$06065 = 0, $$06164 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond72 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $15 = $6;
 } else {
  $15 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $18 = ($7|0)==(0);
  L11: do {
   if ($18) {
    $$1 = $0;
    label = 17;
   } else {
    $19 = ((($2)) + 4|0);
    $20 = ((($2)) + 8|0);
    $$06065 = $7;$$06164 = $0;
    while(1) {
     $21 = HEAP32[$19>>2]|0;
     $22 = HEAP32[$20>>2]|0;
     $23 = $21;
     $24 = (($22) - ($23))|0;
     $25 = (_memchr($21,10,$24)|0);
     $26 = ($25|0)==(0|0);
     $27 = $25;
     $28 = (1 - ($23))|0;
     $29 = (($28) + ($27))|0;
     $30 = $26 ? $24 : $29;
     $31 = ($30>>>0)<($$06065>>>0);
     $32 = $31 ? $30 : $$06065;
     (_memcpy(($$06164|0),($21|0),($32|0))|0);
     $33 = HEAP32[$19>>2]|0;
     $34 = (($33) + ($32)|0);
     HEAP32[$19>>2] = $34;
     $35 = (($$06164) + ($32)|0);
     $36 = (($$06065) - ($32))|0;
     $37 = ($36|0)!=(0);
     $or$cond = $26 & $37;
     if (!($or$cond)) {
      $$1 = $35;
      label = 17;
      break L11;
     }
     $38 = HEAP32[$20>>2]|0;
     $39 = ($34>>>0)<($38>>>0);
     if ($39) {
      $40 = ((($34)) + 1|0);
      HEAP32[$19>>2] = $40;
      $41 = HEAP8[$34>>0]|0;
      $42 = $41&255;
      $50 = $42;
     } else {
      $43 = (___uflow($2)|0);
      $44 = ($43|0)<(0);
      if ($44) {
       break;
      } else {
       $50 = $43;
      }
     }
     $49 = $50&255;
     $51 = ((($35)) + 1|0);
     HEAP8[$35>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)==(10);
     $53 = (($36) + -1)|0;
     $54 = ($53|0)==(0);
     $or$cond72 = $52 | $54;
     if ($or$cond72) {
      $$1 = $51;
      label = 17;
      break L11;
     } else {
      $$06065 = $53;$$06164 = $51;
     }
    }
    $45 = ($35|0)==($0|0);
    if ($45) {
     $$05963 = 0;
    } else {
     $46 = HEAP32[$2>>2]|0;
     $47 = $46 & 16;
     $48 = ($47|0)==(0);
     if ($48) {
      $$05963 = 0;
     } else {
      $$1 = $35;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $55 = ($0|0)==(0|0);
   if ($55) {
    $$05963 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$05963 = $0;
   }
  }
  $56 = ($15|0)==(0);
  if ($56) {
   $$0 = $$05963;
  } else {
   ___unlockfile($2);
   $$0 = $$05963;
  }
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 34;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0266$lcssa = 0, $$0266409 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0285419 = 0, $$0288411 = 0, $$0290416 = 0, $$0294 = 0, $$0295 = 0, $$0308414 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0;
 var $$1271 = 0, $$1274 = 0, $$1281 = 0, $$1286 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2287 = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3408 = 0, $$4 = 0, $$4284 = 0;
 var $$5 = 0, $$5313 = 0, $$6 = 0, $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$not = 0, $$old4 = 0, $$ph$ph = 0, $$pr = 0, $$pr332 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre$phiZ2D = 0, $$pre485 = 0;
 var $$pre487 = 0, $$pre488 = 0, $$pre490 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor335 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond321 = 0, $or$cond5 = 0, $spec$select = 0, $spec$select319 = 0, $spec$select320 = 0, $spec$select322 = 0, $spec$select323 = 0, $spec$select324 = 0, $spec$select325 = 0, $spec$select326 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 264|0;
 $4 = sp;
 $5 = sp + 260|0;
 $6 = sp + 272|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $319 = $10;
 } else {
  $319 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3293 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273420 = $1;$$0285419 = 0;$$0290416 = 0;$$0308414 = 0;$22 = $11;$321 = 0;
   L6: while(1) {
    $21 = $22&255;
    $23 = (_isspace($21)|0);
    $24 = ($23|0)==(0);
    L8: do {
     if ($24) {
      $51 = HEAP8[$$0273420>>0]|0;
      $52 = ($51<<24>>24)==(37);
      L10: do {
       if ($52) {
        $53 = ((($$0273420)) + 1|0);
        $54 = HEAP8[$53>>0]|0;
        L12: do {
         switch ($54<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $75 = ((($$0273420)) + 2|0);
          $$0295 = 0;$$2275 = $75;
          break;
         }
         default: {
          $76 = $54&255;
          $77 = (_isdigit($76)|0);
          $78 = ($77|0)==(0);
          if (!($78)) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $82 = HEAP8[$53>>0]|0;
            $83 = $82&255;
            $84 = (($83) + -48)|0;
            $85 = (_arg_n($2,$84)|0);
            $86 = ((($$0273420)) + 3|0);
            $$0295 = $85;$$2275 = $86;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $87 = $arglist_current;
          $88 = ((0) + 4|0);
          $expanded1 = $88;
          $expanded = (($expanded1) - 1)|0;
          $89 = (($87) + ($expanded))|0;
          $90 = ((0) + 4|0);
          $expanded5 = $90;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $91 = $89 & $expanded3;
          $92 = $91;
          $93 = HEAP32[$92>>2]|0;
          $arglist_next = ((($92)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0295 = $93;$$2275 = $53;
         }
         }
        } while(0);
        $94 = HEAP8[$$2275>>0]|0;
        $95 = $94&255;
        $96 = (_isdigit($95)|0);
        $97 = ($96|0)==(0);
        if ($97) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266409 = 0;$$3408 = $$2275;
         while(1) {
          $98 = ($$0266409*10)|0;
          $99 = HEAP8[$$3408>>0]|0;
          $100 = $99&255;
          $101 = (($98) + -48)|0;
          $102 = (($101) + ($100))|0;
          $103 = ((($$3408)) + 1|0);
          $104 = HEAP8[$103>>0]|0;
          $105 = $104&255;
          $106 = (_isdigit($105)|0);
          $107 = ($106|0)==(0);
          if ($107) {
           $$0266$lcssa = $102;$$3$lcssa = $103;
           break;
          } else {
           $$0266409 = $102;$$3408 = $103;
          }
         }
        }
        $108 = HEAP8[$$3$lcssa>>0]|0;
        $109 = ($108<<24>>24)==(109);
        $110 = ((($$3$lcssa)) + 1|0);
        if ($109) {
         $111 = ($$0295|0)!=(0|0);
         $112 = $111&1;
         $$pr = HEAP8[$110>>0]|0;
         $$pre488 = ((($$3$lcssa)) + 2|0);
         $$0270 = $112;$$1309 = 0;$$4 = $110;$$pre$phiZ2D = $$pre488;$113 = $$pr;$324 = 0;
        } else {
         $$0270 = 0;$$1309 = $$0308414;$$4 = $$3$lcssa;$$pre$phiZ2D = $110;$113 = $108;$324 = $321;
        }
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$$pre$phiZ2D>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $spec$select323 = $115 ? $116 : $$pre$phiZ2D;
         $spec$select324 = $115 ? -2 : -1;
         $$0268 = $spec$select324;$$5 = $spec$select323;
         break;
        }
        case 108:  {
         $117 = HEAP8[$$pre$phiZ2D>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $spec$select325 = $118 ? $119 : $$pre$phiZ2D;
         $spec$select326 = $118 ? 3 : 1;
         $$0268 = $spec$select326;$$5 = $spec$select325;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $$pre$phiZ2D;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $$pre$phiZ2D;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $$pre$phiZ2D;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$8316 = $$1309;$325 = $324;
         label = 143;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $spec$select = $123 ? $124 : $121;
        $spec$select319 = $123 ? 1 : $$0268;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)>(1);
         $spec$select320 = $125 ? $$0266$lcssa : 1;
         $$1267 = $spec$select320;$$1286 = $$0285419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1286 = $$0285419;
         break;
        }
        case 110:  {
         $126 = ($$0285419|0)<(0);
         $127 = $126 << 31 >> 31;
         _store_int($$0295,$spec$select319,$$0285419,$127);
         $$12 = $$5;$$1291 = $$0290416;$$2287 = $$0285419;$$7315 = $$1309;$322 = $324;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $128 = HEAP32[$13>>2]|0;
          $129 = HEAP32[$14>>2]|0;
          $130 = ($128>>>0)<($129>>>0);
          if ($130) {
           $131 = ((($128)) + 1|0);
           HEAP32[$13>>2] = $131;
           $132 = HEAP8[$128>>0]|0;
           $133 = $132&255;
           $135 = $133;
          } else {
           $134 = (___shgetc($0)|0);
           $135 = $134;
          }
          $136 = (_isspace($135)|0);
          $137 = ($136|0)==(0);
          if ($137) {
           break;
          }
         }
         $138 = HEAP32[$14>>2]|0;
         $139 = ($138|0)==(0|0);
         if ($139) {
          $$pre485 = HEAP32[$13>>2]|0;
          $147 = $$pre485;
         } else {
          $140 = HEAP32[$13>>2]|0;
          $141 = ((($140)) + -1|0);
          HEAP32[$13>>2] = $141;
          $142 = $141;
          $147 = $142;
         }
         $143 = HEAP32[$15>>2]|0;
         $144 = HEAP32[$16>>2]|0;
         $145 = (($143) + ($$0285419))|0;
         $146 = (($145) + ($147))|0;
         $148 = (($146) - ($144))|0;
         $$1267 = $$0266$lcssa;$$1286 = $148;
        }
        }
        ___shlim($0,$$1267);
        $149 = HEAP32[$13>>2]|0;
        $150 = HEAP32[$14>>2]|0;
        $151 = ($149>>>0)<($150>>>0);
        if ($151) {
         $152 = ((($149)) + 1|0);
         HEAP32[$13>>2] = $152;
         $155 = $150;
        } else {
         $153 = (___shgetc($0)|0);
         $154 = ($153|0)<(0);
         if ($154) {
          $$8316 = $$1309;$325 = $324;
          label = 143;
          break L6;
         }
         $$pr332 = HEAP32[$14>>2]|0;
         $155 = $$pr332;
        }
        $156 = ($155|0)==(0|0);
        if (!($156)) {
         $157 = HEAP32[$13>>2]|0;
         $158 = ((($157)) + -1|0);
         HEAP32[$13>>2] = $158;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $159 = ($spec$select|0)==(99);
          $160 = $spec$select | 16;
          $161 = ($160|0)==(115);
          L61: do {
           if ($161) {
            $162 = ($spec$select|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($162) {
             HEAP8[$18>>0] = 0;
             ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP8[$17+4>>0]=0|0;
             $$10 = $$5;
            } else {
             $$10 = $$5;
            }
           } else {
            $163 = ((($$5)) + 1|0);
            $164 = HEAP8[$163>>0]|0;
            $165 = ($164<<24>>24)==(94);
            $166 = ((($$5)) + 2|0);
            $$0294 = $165&1;
            $$6 = $165 ? $166 : $163;
            (_memset(($4|0),($$0294|0),257)|0);
            HEAP8[$4>>0] = 0;
            $167 = HEAP8[$$6>>0]|0;
            switch ($167<<24>>24) {
            case 45:  {
             $168 = ((($$6)) + 1|0);
             $169 = $$0294 ^ 1;
             $170 = $169&255;
             HEAP8[$19>>0] = $170;
             $$7 = $168;$$pre$phi493Z2D = $170;
             break;
            }
            case 93:  {
             $171 = ((($$6)) + 1|0);
             $172 = $$0294 ^ 1;
             $173 = $172&255;
             HEAP8[$20>>0] = $173;
             $$7 = $171;$$pre$phi493Z2D = $173;
             break;
            }
            default: {
             $$pre490 = $$0294 ^ 1;
             $$pre492 = $$pre490&255;
             $$7 = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$8 = $$7;
            while(1) {
             $174 = HEAP8[$$8>>0]|0;
             L72: do {
              switch ($174<<24>>24) {
              case 0:  {
               $$8316 = $$1309;$325 = $324;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $$10 = $$8;
               break L61;
               break;
              }
              case 45:  {
               $175 = ((($$8)) + 1|0);
               $176 = HEAP8[$175>>0]|0;
               switch ($176<<24>>24) {
               case 93: case 0:  {
                $$9 = $$8;$187 = 45;
                break L72;
                break;
               }
               default: {
               }
               }
               $177 = ((($$8)) + -1|0);
               $178 = HEAP8[$177>>0]|0;
               $179 = ($178&255)<($176&255);
               if ($179) {
                $180 = $178&255;
                $$0288411 = $180;
                while(1) {
                 $181 = (($$0288411) + 1)|0;
                 $182 = (($4) + ($181)|0);
                 HEAP8[$182>>0] = $$pre$phi493Z2D;
                 $183 = HEAP8[$175>>0]|0;
                 $184 = $183&255;
                 $185 = ($181>>>0)<($184>>>0);
                 if ($185) {
                  $$0288411 = $181;
                 } else {
                  $$9 = $175;$187 = $183;
                  break;
                 }
                }
               } else {
                $$9 = $175;$187 = $176;
               }
               break;
              }
              default: {
               $$9 = $$8;$187 = $174;
              }
              }
             } while(0);
             $186 = $187&255;
             $188 = (($186) + 1)|0;
             $189 = (($4) + ($188)|0);
             HEAP8[$189>>0] = $$pre$phi493Z2D;
             $190 = ((($$9)) + 1|0);
             $$8 = $190;
            }
           }
          } while(0);
          $191 = (($$1267) + 1)|0;
          $192 = $159 ? $191 : 31;
          $193 = ($spec$select319|0)==(1);
          $194 = ($$0270|0)!=(0);
          L80: do {
           if ($193) {
            if ($194) {
             $195 = $192 << 2;
             $196 = (_malloc($195)|0);
             $197 = ($196|0)==(0|0);
             if ($197) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             } else {
              $327 = $196;
             }
            } else {
             $327 = $$0295;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph$ph = $192;$$0280$ph$ph = 0;$$ph$ph = $327;
            L85: while(1) {
             $198 = ($$ph$ph|0)==(0|0);
             $$0280$ph = $$0280$ph$ph;
             while(1) {
              L89: while(1) {
               $199 = HEAP32[$13>>2]|0;
               $200 = HEAP32[$14>>2]|0;
               $201 = ($199>>>0)<($200>>>0);
               if ($201) {
                $202 = ((($199)) + 1|0);
                HEAP32[$13>>2] = $202;
                $203 = HEAP8[$199>>0]|0;
                $204 = $203&255;
                $207 = $204;
               } else {
                $205 = (___shgetc($0)|0);
                $207 = $205;
               }
               $206 = (($207) + 1)|0;
               $208 = (($4) + ($206)|0);
               $209 = HEAP8[$208>>0]|0;
               $210 = ($209<<24>>24)==(0);
               if ($210) {
                break L85;
               }
               $211 = $207&255;
               HEAP8[$6>>0] = $211;
               $212 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($212|0) {
               case -1:  {
                $$8316 = 0;$325 = $$ph$ph;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($198) {
               $$1281 = $$0280$ph;
              } else {
               $213 = (($$ph$ph) + ($$0280$ph<<2)|0);
               $214 = (($$0280$ph) + 1)|0;
               $215 = HEAP32[$5>>2]|0;
               HEAP32[$213>>2] = $215;
               $$1281 = $214;
              }
              $216 = ($$1281|0)==($$0276$ph$ph|0);
              $or$cond = $194 & $216;
              if ($or$cond) {
               break;
              } else {
               $$0280$ph = $$1281;
              }
             }
             $factor335 = $$0276$ph$ph << 1;
             $217 = $factor335 | 1;
             $218 = $217 << 2;
             $219 = (_realloc($$ph$ph,$218)|0);
             $220 = ($219|0)==(0|0);
             if ($220) {
              $$8316 = 0;$325 = $$ph$ph;
              label = 143;
              break L6;
             } else {
              $$0276$ph$ph = $217;$$0280$ph$ph = $$1281;$$ph$ph = $219;
             }
            }
            $221 = (_mbsinit($3)|0);
            $222 = ($221|0)==(0);
            if ($222) {
             $$8316 = 0;$325 = $$ph$ph;
             label = 143;
             break L6;
            } else {
             $$4284 = $$0280$ph;$$5313 = 0;$$6302 = $$ph$ph;$328 = $$ph$ph;
            }
           } else {
            if ($194) {
             $223 = (_malloc($192)|0);
             $224 = ($223|0)==(0|0);
             if ($224) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             }
             $$2278$ph = $192;$$2282$ph = 0;$$2310$ph = $223;
             while(1) {
              $$2282 = $$2282$ph;
              while(1) {
               $225 = HEAP32[$13>>2]|0;
               $226 = HEAP32[$14>>2]|0;
               $227 = ($225>>>0)<($226>>>0);
               if ($227) {
                $228 = ((($225)) + 1|0);
                HEAP32[$13>>2] = $228;
                $229 = HEAP8[$225>>0]|0;
                $230 = $229&255;
                $233 = $230;
               } else {
                $231 = (___shgetc($0)|0);
                $233 = $231;
               }
               $232 = (($233) + 1)|0;
               $234 = (($4) + ($232)|0);
               $235 = HEAP8[$234>>0]|0;
               $236 = ($235<<24>>24)==(0);
               if ($236) {
                $$4284 = $$2282;$$5313 = $$2310$ph;$$6302 = 0;$328 = 0;
                break L80;
               }
               $237 = $233&255;
               $238 = (($$2282) + 1)|0;
               $239 = (($$2310$ph) + ($$2282)|0);
               HEAP8[$239>>0] = $237;
               $240 = ($238|0)==($$2278$ph|0);
               if ($240) {
                break;
               } else {
                $$2282 = $238;
               }
              }
              $factor = $$2278$ph << 1;
              $241 = $factor | 1;
              $242 = (_realloc($$2310$ph,$241)|0);
              $243 = ($242|0)==(0|0);
              if ($243) {
               $$8316 = $$2310$ph;$325 = 0;
               label = 143;
               break L6;
              } else {
               $$2278$ph = $241;$$2282$ph = $238;$$2310$ph = $242;
              }
             }
            }
            $244 = ($$0295|0)==(0|0);
            if ($244) {
             while(1) {
              $260 = HEAP32[$13>>2]|0;
              $261 = HEAP32[$14>>2]|0;
              $262 = ($260>>>0)<($261>>>0);
              if ($262) {
               $263 = ((($260)) + 1|0);
               HEAP32[$13>>2] = $263;
               $264 = HEAP8[$260>>0]|0;
               $265 = $264&255;
               $268 = $265;
              } else {
               $266 = (___shgetc($0)|0);
               $268 = $266;
              }
              $267 = (($268) + 1)|0;
              $269 = (($4) + ($267)|0);
              $270 = HEAP8[$269>>0]|0;
              $271 = ($270<<24>>24)==(0);
              if ($271) {
               $$4284 = 0;$$5313 = 0;$$6302 = 0;$328 = 0;
               break L80;
              }
             }
            }
            $$3283 = 0;
            while(1) {
             $245 = HEAP32[$13>>2]|0;
             $246 = HEAP32[$14>>2]|0;
             $247 = ($245>>>0)<($246>>>0);
             if ($247) {
              $248 = ((($245)) + 1|0);
              HEAP32[$13>>2] = $248;
              $249 = HEAP8[$245>>0]|0;
              $250 = $249&255;
              $253 = $250;
             } else {
              $251 = (___shgetc($0)|0);
              $253 = $251;
             }
             $252 = (($253) + 1)|0;
             $254 = (($4) + ($252)|0);
             $255 = HEAP8[$254>>0]|0;
             $256 = ($255<<24>>24)==(0);
             if ($256) {
              $$4284 = $$3283;$$5313 = $$0295;$$6302 = 0;$328 = 0;
              break L80;
             }
             $257 = $253&255;
             $258 = (($$3283) + 1)|0;
             $259 = (($$0295) + ($$3283)|0);
             HEAP8[$259>>0] = $257;
             $$3283 = $258;
            }
           }
          } while(0);
          $272 = HEAP32[$14>>2]|0;
          $273 = ($272|0)==(0|0);
          if ($273) {
           $$pre487 = HEAP32[$13>>2]|0;
           $280 = $$pre487;
          } else {
           $274 = HEAP32[$13>>2]|0;
           $275 = ((($274)) + -1|0);
           HEAP32[$13>>2] = $275;
           $276 = $275;
           $280 = $276;
          }
          $277 = HEAP32[$15>>2]|0;
          $278 = HEAP32[$16>>2]|0;
          $279 = (($280) - ($278))|0;
          $281 = (($279) + ($277))|0;
          $282 = ($281|0)==(0);
          if ($282) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          $$not = $159 ^ 1;
          $283 = ($281|0)==($$1267|0);
          $or$cond321 = $283 | $$not;
          if (!($or$cond321)) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          do {
           if ($194) {
            if ($193) {
             HEAP32[$$0295>>2] = $$6302;
             break;
            } else {
             HEAP32[$$0295>>2] = $$5313;
             break;
            }
           }
          } while(0);
          if ($159) {
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          } else {
           $284 = ($$6302|0)==(0|0);
           if (!($284)) {
            $285 = (($$6302) + ($$4284<<2)|0);
            HEAP32[$285>>2] = 0;
           }
           $286 = ($$5313|0)==(0|0);
           if ($286) {
            $$11 = $$10;$$6314 = 0;$326 = $328;
            break L59;
           }
           $287 = (($$5313) + ($$4284)|0);
           HEAP8[$287>>0] = 0;
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $298 = (+___floatscan($0,$spec$select319,0));
          $299 = HEAP32[$15>>2]|0;
          $300 = HEAP32[$13>>2]|0;
          $301 = HEAP32[$16>>2]|0;
          $302 = (($301) - ($300))|0;
          $303 = ($299|0)==($302|0);
          if ($303) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $304 = ($$0295|0)==(0|0);
          if ($304) {
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
          } else {
           switch ($spec$select319|0) {
           case 0:  {
            $305 = $298;
            HEAPF32[$$0295>>2] = $305;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           default: {
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $$11 = $$5;$$6314 = $$1309;$326 = $324;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $288 = (___intscan($0,$$0272,0,-1,-1)|0);
          $289 = (getTempRet0() | 0);
          $290 = HEAP32[$15>>2]|0;
          $291 = HEAP32[$13>>2]|0;
          $292 = HEAP32[$16>>2]|0;
          $293 = (($292) - ($291))|0;
          $294 = ($290|0)==($293|0);
          if ($294) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $295 = ($spec$select|0)==(112);
          $296 = ($$0295|0)!=(0|0);
          $or$cond3 = $296 & $295;
          if ($or$cond3) {
           $297 = $288;
           HEAP32[$$0295>>2] = $297;
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          } else {
           _store_int($$0295,$spec$select319,$288,$289);
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          }
         }
        } while(0);
        $306 = HEAP32[$15>>2]|0;
        $307 = HEAP32[$13>>2]|0;
        $308 = HEAP32[$16>>2]|0;
        $309 = (($306) + ($$1286))|0;
        $310 = (($309) + ($307))|0;
        $311 = (($310) - ($308))|0;
        $312 = ($$0295|0)!=(0|0);
        $313 = $312&1;
        $spec$select322 = (($$0290416) + ($313))|0;
        $$12 = $$11;$$1291 = $spec$select322;$$2287 = $311;$$7315 = $$6314;$322 = $326;
        break L8;
       }
      } while(0);
      $55 = $52&1;
      $56 = (($$0273420) + ($55)|0);
      ___shlim($0,0);
      $57 = HEAP32[$13>>2]|0;
      $58 = HEAP32[$14>>2]|0;
      $59 = ($57>>>0)<($58>>>0);
      if ($59) {
       $60 = ((($57)) + 1|0);
       HEAP32[$13>>2] = $60;
       $61 = HEAP8[$57>>0]|0;
       $62 = $61&255;
       $66 = $62;
      } else {
       $63 = (___shgetc($0)|0);
       $66 = $63;
      }
      $64 = HEAP8[$56>>0]|0;
      $65 = $64&255;
      $67 = ($66|0)==($65|0);
      if (!($67)) {
       label = 23;
       break L6;
      }
      $74 = (($$0285419) + 1)|0;
      $$12 = $56;$$1291 = $$0290416;$$2287 = $74;$$7315 = $$0308414;$322 = $321;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $25 = ((($$1274)) + 1|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        break;
       } else {
        $$1274 = $25;
       }
      }
      ___shlim($0,0);
      while(1) {
       $30 = HEAP32[$13>>2]|0;
       $31 = HEAP32[$14>>2]|0;
       $32 = ($30>>>0)<($31>>>0);
       if ($32) {
        $33 = ((($30)) + 1|0);
        HEAP32[$13>>2] = $33;
        $34 = HEAP8[$30>>0]|0;
        $35 = $34&255;
        $37 = $35;
       } else {
        $36 = (___shgetc($0)|0);
        $37 = $36;
       }
       $38 = (_isspace($37)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        break;
       }
      }
      $40 = HEAP32[$14>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$pre = HEAP32[$13>>2]|0;
       $49 = $$pre;
      } else {
       $42 = HEAP32[$13>>2]|0;
       $43 = ((($42)) + -1|0);
       HEAP32[$13>>2] = $43;
       $44 = $43;
       $49 = $44;
      }
      $45 = HEAP32[$15>>2]|0;
      $46 = HEAP32[$16>>2]|0;
      $47 = (($45) + ($$0285419))|0;
      $48 = (($47) + ($49))|0;
      $50 = (($48) - ($46))|0;
      $$12 = $$1274;$$1291 = $$0290416;$$2287 = $50;$$7315 = $$0308414;$322 = $321;
     }
    } while(0);
    $314 = ((($$12)) + 1|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = ($315<<24>>24)==(0);
    if ($316) {
     $$3293 = $$1291;
     break L4;
    } else {
     $$0273420 = $314;$$0285419 = $$2287;$$0290416 = $$1291;$$0308414 = $$7315;$22 = $315;$321 = $322;
    }
   }
   if ((label|0) == 23) {
    $68 = HEAP32[$14>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     $70 = HEAP32[$13>>2]|0;
     $71 = ((($70)) + -1|0);
     HEAP32[$13>>2] = $71;
    }
    $72 = ($66|0)>(-1);
    $73 = ($$0290416|0)!=(0);
    $or$cond5 = $73 | $72;
    if ($or$cond5) {
     $$3293 = $$0290416;
     break;
    } else {
     $$1271 = 0;$$9317 = $$0308414;$323 = $321;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $$old4 = ($$0290416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$9317 = $$8316;$323 = $325;
     label = 144;
    } else {
     $$10318 = $$8316;$$2 = $$0270;$$2292 = $$0290416;$318 = $325;
    }
   }
   if ((label|0) == 144) {
    $$10318 = $$9317;$$2 = $$1271;$$2292 = -1;$318 = $323;
   }
   $317 = ($$2|0)==(0);
   if ($317) {
    $$3293 = $$2292;
   } else {
    _free($$10318);
    _free($318);
    $$3293 = $$2292;
   }
  }
 } while(0);
 $320 = ($319|0)==(0);
 if (!($320)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3293|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $spec$select = $11 ? $$027 : $2;
 (_memcpy(($1|0),($4|0),($spec$select|0))|0);
 $12 = (($4) + ($spec$select)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($spec$select|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 63]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function _perror($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[17818]|0;
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strerror($3)|0);
 $5 = ((($1)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($1)|0);
  $14 = $8;
 } else {
  $14 = 0;
 }
 $9 = ($0|0)==(0|0);
 if (!($9)) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   $12 = (_strlen($0)|0);
   (_fwrite($0,$12,1,$1)|0);
   (_fputc(58,$1)|0);
   (_fputc(32,$1)|0);
  }
 }
 $13 = (_strlen($4)|0);
 (_fwrite($4,$13,1,$1)|0);
 (_fputc(10,$1)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___unlockfile($1);
 }
 return;
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[17850]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((1292864|0));
 return;
}
function __get_tzname() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1292848|0);
}
function __get_daylight() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1292856|0);
}
function __get_timezone() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1292860|0);
}
function __get_environ() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1292864|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ddi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  return +FUNCTION_TABLE_ddi[index&31](+a1,a2|0);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&3](a1|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_viddiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viddiiii[index&63](a1|0,+a2,+a3,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1](a1|0,a2|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_ddi(0);return +0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_di(1);return +0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_ii(2);return 0;
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(4);return 0;
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0;
}
function b6(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viddiiii(6);
}
function b7(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(7);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ddi = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_AT_sI_int,_AT_Stopping_Power_Mass_MeV_cm2_g_int,_AT_CSDA_range_difference_solver,_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m,_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m,_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy,_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy,_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy,_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy,_AT_RDD_Cucinotta_Ddelta_average_integrand_m,_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy,_AT_inverse_RDD_Cucinotta_solver_function_Gy,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_di = [b1,b1,b1,_taus_get_double];
var FUNCTION_TABLE_ii = [b2,b2,_taus_get,b2,___stdio_close,b2,b2,b2];
var FUNCTION_TABLE_iii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_compare_SPC_Pairs,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_iiii = [b4,b4,b4,b4,b4,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,___stdio_read,_do_read,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,_AT_FromFile_wrapper,_AT_Bethe_wrapper,_AT_PSTAR_wrapper,_AT_ICRU_wrapper,b5,b5,b5];
var FUNCTION_TABLE_viddiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_gsl_integration_qk15,_gsl_integration_qk21
,_gsl_integration_qk31,_gsl_integration_qk41,_gsl_integration_qk51,_gsl_integration_qk61,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_vii = [b7,_taus_set];
var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_no_error_handler,b8,b8
,b8,b8,b8];

  return { _AT_A_from_particle_no: _AT_A_from_particle_no, _AT_A_from_particle_no_single: _AT_A_from_particle_no_single, _AT_Bethe_Stopping_Number: _AT_Bethe_Stopping_Number, _AT_Bethe_energy_loss_MeV_cm2_g: _AT_Bethe_energy_loss_MeV_cm2_g, _AT_Bethe_energy_loss_MeV_cm2_g_single: _AT_Bethe_energy_loss_MeV_cm2_g_single, _AT_Bethe_wrapper: _AT_Bethe_wrapper, _AT_CSDA_energy_after_slab_E_MeV_u_multi: _AT_CSDA_energy_after_slab_E_MeV_u_multi, _AT_CSDA_energy_after_slab_E_MeV_u_single: _AT_CSDA_energy_after_slab_E_MeV_u_single, _AT_CSDA_range_difference_solver: _AT_CSDA_range_difference_solver, _AT_CSDA_range_g_cm2_multi: _AT_CSDA_range_g_cm2_multi, _AT_CSDA_range_g_cm2_single: _AT_CSDA_range_g_cm2_single, _AT_D_RDD_Gy: _AT_D_RDD_Gy, _AT_D_RDD_Gy_int: _AT_D_RDD_Gy_int, _AT_Dyx: _AT_Dyx, _AT_ER_AM_RadDiff_range_g_cm2: _AT_ER_AM_RadDiff_range_g_cm2, _AT_ER_ButtsKatz_range_g_cm2: _AT_ER_ButtsKatz_range_g_cm2, _AT_ER_Edmund_range_g_cm2: _AT_ER_Edmund_range_g_cm2, _AT_ER_Geiss_range_g_cm2: _AT_ER_Geiss_range_g_cm2, _AT_ER_PowerLaw_alpha: _AT_ER_PowerLaw_alpha, _AT_ER_Scholz_new_range_g_cm2: _AT_ER_Scholz_new_range_g_cm2, _AT_ER_Scholz_range_g_cm2: _AT_ER_Scholz_range_g_cm2, _AT_ER_Tabata_constants: _AT_ER_Tabata_constants, _AT_ER_Tabata_range_g_cm2: _AT_ER_Tabata_range_g_cm2, _AT_ER_Waligorski_range_g_cm2: _AT_ER_Waligorski_range_g_cm2, _AT_E_MeV_u_from_momentum_MeV_c_u: _AT_E_MeV_u_from_momentum_MeV_c_u, _AT_E_MeV_u_from_momentum_single: _AT_E_MeV_u_from_momentum_single, _AT_E_RadicalDiffusion_MeV_u: _AT_E_RadicalDiffusion_MeV_u, _AT_E_from_beta: _AT_E_from_beta, _AT_E_from_beta_single: _AT_E_from_beta_single, _AT_E_from_gamma: _AT_E_from_gamma, _AT_E_from_gamma_single: _AT_E_from_gamma_single, _AT_Energy_MeV_u_from_Stopping_Power_single: _AT_Energy_MeV_u_from_Stopping_Power_single, _AT_FromFile_wrapper: _AT_FromFile_wrapper, _AT_GSM_dose_grid_from_particles_positions: _AT_GSM_dose_grid_from_particles_positions, _AT_GSM_local_dose_distrib: _AT_GSM_local_dose_distrib, _AT_GSM_local_dose_distrib_from_dose_grid: _AT_GSM_local_dose_distrib_from_dose_grid, _AT_GSM_multiple_local_dose_distrib: _AT_GSM_multiple_local_dose_distrib, _AT_GSM_response_grid_from_dose_grid: _AT_GSM_response_grid_from_dose_grid, _AT_GSM_sample_particle_positions: _AT_GSM_sample_particle_positions, _AT_Gamma_index_from_material_number: _AT_Gamma_index_from_material_number, _AT_Gamma_name_from_number: _AT_Gamma_name_from_number, _AT_Gamma_number_of_parameters: _AT_Gamma_number_of_parameters, _AT_Gauss_FWHM: _AT_Gauss_FWHM, _AT_Gauss_IDF: _AT_Gauss_IDF, _AT_Gauss_Mean: _AT_Gauss_Mean, _AT_Gauss_Mode: _AT_Gauss_Mode, _AT_Gauss_PDF: _AT_Gauss_PDF, _AT_Highland_angle: _AT_Highland_angle, _AT_Highland_angle_single: _AT_Highland_angle_single, _AT_ICRU_wrapper: _AT_ICRU_wrapper, _AT_I_eV_from_composition: _AT_I_eV_from_composition, _AT_I_eV_from_element_acronym: _AT_I_eV_from_element_acronym, _AT_I_eV_from_element_acronym_single: _AT_I_eV_from_element_acronym_single, _AT_I_eV_from_material_no: _AT_I_eV_from_material_no, _AT_I_eV_from_particle_no: _AT_I_eV_from_particle_no, _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m: _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m, _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2: _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2, _AT_KatzModel_CucinottaExtTarget_inactivation_probability: _AT_KatzModel_CucinottaExtTarget_inactivation_probability, _AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth: _AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth, _AT_KatzModel_KatzExtTarget_Zhang_TrackWidth: _AT_KatzModel_KatzExtTarget_Zhang_TrackWidth, _AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m: _AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m, _AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2: _AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2, _AT_KatzModel_KatzExtTarget_inactivation_probability: _AT_KatzModel_KatzExtTarget_inactivation_probability, _AT_KatzModel_inactivation_cross_section_approximation_m2: _AT_KatzModel_inactivation_cross_section_approximation_m2, _AT_KatzModel_inactivation_cross_section_m2: _AT_KatzModel_inactivation_cross_section_m2, _AT_KatzModel_inactivation_probability: _AT_KatzModel_inactivation_probability, _AT_KatzModel_mixed_field_survival: _AT_KatzModel_mixed_field_survival, _AT_KatzModel_single_field_survival: _AT_KatzModel_single_field_survival, _AT_KatzModel_single_field_survival_from_inactivation_cross_section: _AT_KatzModel_single_field_survival_from_inactivation_cross_section, _AT_KatzModel_single_field_survival_optimized_for_fluence_vector: _AT_KatzModel_single_field_survival_optimized_for_fluence_vector, _AT_Kellerer_folding: _AT_Kellerer_folding, _AT_Kellerer_interpolation: _AT_Kellerer_interpolation, _AT_Kellerer_normalize: _AT_Kellerer_normalize, _AT_Kellerer_reset: _AT_Kellerer_reset, _AT_Kellerer_shrink: _AT_Kellerer_shrink, _AT_Kellerer_zero: _AT_Kellerer_zero, _AT_Landau_IDF: _AT_Landau_IDF, _AT_Landau_PDF: _AT_Landau_PDF, _AT_Landau_energy_loss_distribution: _AT_Landau_energy_loss_distribution, _AT_Mass_Stopping_Power: _AT_Mass_Stopping_Power, _AT_Mass_Stopping_Power_with_no: _AT_Mass_Stopping_Power_with_no, _AT_Moliere_function_f0: _AT_Moliere_function_f0, _AT_Moliere_function_f1: _AT_Moliere_function_f1, _AT_Moliere_function_f2: _AT_Moliere_function_f2, _AT_N2_to_step: _AT_N2_to_step, _AT_PSTAR_wrapper: _AT_PSTAR_wrapper, _AT_P_RDD: _AT_P_RDD, _AT_RDD_CucinottaPoint_Gy: _AT_RDD_CucinottaPoint_Gy, _AT_RDD_Cucinotta_Cnorm: _AT_RDD_Cucinotta_Cnorm, _AT_RDD_Cucinotta_Ddelta_Gy: _AT_RDD_Cucinotta_Ddelta_Gy, _AT_RDD_Cucinotta_Ddelta_average_Gy: _AT_RDD_Cucinotta_Ddelta_average_Gy, _AT_RDD_Cucinotta_Ddelta_average_integrand_m: _AT_RDD_Cucinotta_Ddelta_average_integrand_m, _AT_RDD_Cucinotta_Dexc_Gy: _AT_RDD_Cucinotta_Dexc_Gy, _AT_RDD_Cucinotta_Dexc_average_Gy: _AT_RDD_Cucinotta_Dexc_average_Gy, _AT_RDD_Cucinotta_f_longRange: _AT_RDD_Cucinotta_f_longRange, _AT_RDD_Cucinotta_f_shortRange: _AT_RDD_Cucinotta_f_shortRange, _AT_RDD_ExtendedTarget_CucinottaPoint_Gy: _AT_RDD_ExtendedTarget_CucinottaPoint_Gy, _AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration: _AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration, _AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy: _AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy, _AT_RDD_ExtendedTarget_KatzPoint_Gy: _AT_RDD_ExtendedTarget_KatzPoint_Gy, _AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration: _AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration, _AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy: _AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy, _AT_RDD_Geiss_Gy: _AT_RDD_Geiss_Gy, _AT_RDD_Geiss_average_Gy: _AT_RDD_Geiss_average_Gy, _AT_RDD_KatzPoint_Gy: _AT_RDD_KatzPoint_Gy, _AT_RDD_KatzSite_Gy: _AT_RDD_KatzSite_Gy, _AT_RDD_Katz_LinearER_DSite_Gy: _AT_RDD_Katz_LinearER_DSite_Gy, _AT_RDD_Katz_LinearER_Daverage_Gy: _AT_RDD_Katz_LinearER_Daverage_Gy, _AT_RDD_Katz_LinearER_Dpoint_Gy: _AT_RDD_Katz_LinearER_Dpoint_Gy, _AT_RDD_Katz_LinearER_dEdx_J_m: _AT_RDD_Katz_LinearER_dEdx_J_m, _AT_RDD_Katz_PowerLawER_DSite_Gy: _AT_RDD_Katz_PowerLawER_DSite_Gy, _AT_RDD_Katz_PowerLawER_DaverageKernel: _AT_RDD_Katz_PowerLawER_DaverageKernel, _AT_RDD_Katz_PowerLawER_DaverageKernel_approx: _AT_RDD_Katz_PowerLawER_DaverageKernel_approx, _AT_RDD_Katz_PowerLawER_Daverage_Gy: _AT_RDD_Katz_PowerLawER_Daverage_Gy, _AT_RDD_Katz_PowerLawER_Dpoint_Gy: _AT_RDD_Katz_PowerLawER_Dpoint_Gy, _AT_RDD_Katz_PowerLawER_dEdx_J_m: _AT_RDD_Katz_PowerLawER_dEdx_J_m, _AT_RDD_Katz_coeff_Gy: _AT_RDD_Katz_coeff_Gy, _AT_RDD_Katz_coeff_Gy_general: _AT_RDD_Katz_coeff_Gy_general, _AT_RDD_RadicalDiffusion_Gy: _AT_RDD_RadicalDiffusion_Gy, _AT_RDD_RadicalDiffusion_get_energy_idx: _AT_RDD_RadicalDiffusion_get_energy_idx, _AT_RDD_Test_Gy: _AT_RDD_Test_Gy, _AT_RDD_a0_m: _AT_RDD_a0_m, _AT_RDD_d_max_Gy: _AT_RDD_d_max_Gy, _AT_RDD_d_min_Gy: _AT_RDD_d_min_Gy, _AT_RDD_f1_parameters_mixed_field: _AT_RDD_f1_parameters_mixed_field, _AT_RDD_f1_parameters_single_field: _AT_RDD_f1_parameters_single_field, _AT_RDD_index_from_RDD_number: _AT_RDD_index_from_RDD_number, _AT_RDD_name_from_number: _AT_RDD_name_from_number, _AT_RDD_number_from_name: _AT_RDD_number_from_name, _AT_RDD_number_of_parameters: _AT_RDD_number_of_parameters, _AT_RDD_precalculated_constant_Gy: _AT_RDD_precalculated_constant_Gy, _AT_RDD_r_min_m: _AT_RDD_r_min_m, _AT_Rutherford_SDCS: _AT_Rutherford_SDCS, _AT_Rutherford_scatter_cross_section: _AT_Rutherford_scatter_cross_section, _AT_SPC_decompose_data: _AT_SPC_decompose_data, _AT_SPC_decompose_header: _AT_SPC_decompose_header, _AT_SPC_decompose_size: _AT_SPC_decompose_size, _AT_SPC_fast_read_buffer: _AT_SPC_fast_read_buffer, _AT_SPC_get_number_of_bins_from_filename_fast: _AT_SPC_get_number_of_bins_from_filename_fast, _AT_SPC_get_number_of_bytes_in_file: _AT_SPC_get_number_of_bytes_in_file, _AT_SPC_number_of_bins_at_range: _AT_SPC_number_of_bins_at_range, _AT_SPC_read_data_from_filename_fast: _AT_SPC_read_data_from_filename_fast, _AT_SPC_read_from_filename_fast: _AT_SPC_read_from_filename_fast, _AT_SPC_read_header_from_filename_fast: _AT_SPC_read_header_from_filename_fast, _AT_SPC_spectrum_at_range: _AT_SPC_spectrum_at_range, _AT_Stopping_Power: _AT_Stopping_Power, _AT_Stopping_Power_Mass_MeV_cm2_g_int: _AT_Stopping_Power_Mass_MeV_cm2_g_int, _AT_Stopping_Power_with_no: _AT_Stopping_Power_with_no, _AT_SuccessiveConvolutions: _AT_SuccessiveConvolutions, _AT_Vavilov_IDF: _AT_Vavilov_IDF, _AT_Vavilov_PDF: _AT_Vavilov_PDF, _AT_Vavilov_energy_loss_distribution: _AT_Vavilov_energy_loss_distribution, _AT_WEPL_multi: _AT_WEPL_multi, _AT_WEPL_single: _AT_WEPL_single, _AT_Z_from_element_acronym: _AT_Z_from_element_acronym, _AT_Z_from_element_acronym_single: _AT_Z_from_element_acronym_single, _AT_Z_from_particle_no: _AT_Z_from_particle_no, _AT_Z_from_particle_no_single: _AT_Z_from_particle_no_single, _AT_alpha_g_cm2_MeV_from_material_no: _AT_alpha_g_cm2_MeV_from_material_no, _AT_atomic_weight_from_Z: _AT_atomic_weight_from_Z, _AT_atomic_weight_from_element_acronym: _AT_atomic_weight_from_element_acronym, _AT_atomic_weight_from_element_acronym_single: _AT_atomic_weight_from_element_acronym_single, _AT_atomic_weight_from_particle_no: _AT_atomic_weight_from_particle_no, _AT_average_A_from_composition: _AT_average_A_from_composition, _AT_average_A_from_material_no: _AT_average_A_from_material_no, _AT_average_Z_from_composition: _AT_average_Z_from_composition, _AT_average_Z_from_material_no: _AT_average_Z_from_material_no, _AT_beam_par_physical_to_technical: _AT_beam_par_physical_to_technical, _AT_beam_par_technical_to_physical: _AT_beam_par_technical_to_physical, _AT_beta_from_E: _AT_beta_from_E, _AT_beta_from_E_single: _AT_beta_from_E_single, _AT_characteristic_multiple_scattering_angle: _AT_characteristic_multiple_scattering_angle, _AT_characteristic_multiple_scattering_angle_single: _AT_characteristic_multiple_scattering_angle_single, _AT_characteristic_single_scattering_angle: _AT_characteristic_single_scattering_angle, _AT_characteristic_single_scattering_angle_single: _AT_characteristic_single_scattering_angle_single, _AT_check_energy_range_single_field: _AT_check_energy_range_single_field, _AT_check_energy_range_single_particle: _AT_check_energy_range_single_particle, _AT_check_particle_no_single_field: _AT_check_particle_no_single_field, _AT_check_particle_no_single_particle: _AT_check_particle_no_single_particle, _AT_d_max_RadicalDiffusion_Gy: _AT_d_max_RadicalDiffusion_Gy, _AT_d_min_RadicalDiffusion_Gy: _AT_d_min_RadicalDiffusion_Gy, _AT_density_g_cm3_from_element_acronym: _AT_density_g_cm3_from_element_acronym, _AT_density_g_cm3_from_element_acronym_single: _AT_density_g_cm3_from_element_acronym_single, _AT_density_g_cm3_from_material_no: _AT_density_g_cm3_from_material_no, _AT_dose_Gy_from_fluence_cm2: _AT_dose_Gy_from_fluence_cm2, _AT_dose_Gy_from_fluence_cm2_single: _AT_dose_Gy_from_fluence_cm2_single, _AT_dose_weighted_E_MeV_u: _AT_dose_weighted_E_MeV_u, _AT_dose_weighted_LET_MeV_cm2_g: _AT_dose_weighted_LET_MeV_cm2_g, _AT_effective_Z_from_composition: _AT_effective_Z_from_composition, _AT_effective_charge_from_E_MeV_u: _AT_effective_charge_from_E_MeV_u, _AT_effective_charge_from_E_MeV_u_single: _AT_effective_charge_from_E_MeV_u_single, _AT_effective_charge_from_beta: _AT_effective_charge_from_beta, _AT_effective_charge_from_beta_single: _AT_effective_charge_from_beta_single, _AT_effective_collision_number: _AT_effective_collision_number, _AT_effective_collision_number_single: _AT_effective_collision_number_single, _AT_el_energy_loss_leading_term_MeV_cm2_g: _AT_el_energy_loss_leading_term_MeV_cm2_g, _AT_electron_density_cm3_from_element_acronym: _AT_electron_density_cm3_from_element_acronym, _AT_electron_density_cm3_from_element_acronym_single: _AT_electron_density_cm3_from_element_acronym_single, _AT_electron_density_m3_from_composition: _AT_electron_density_m3_from_composition, _AT_electron_density_m3_from_material_no_multi: _AT_electron_density_m3_from_material_no_multi, _AT_electron_density_m3_from_material_no_single: _AT_electron_density_m3_from_material_no_single, _AT_electron_density_m3_multi: _AT_electron_density_m3_multi, _AT_electron_density_m3_single: _AT_electron_density_m3_single, _AT_element_acronym_from_Z: _AT_element_acronym_from_Z, _AT_element_acronym_from_Z_single: _AT_element_acronym_from_Z_single, _AT_energy_loss_FWHM: _AT_energy_loss_FWHM, _AT_energy_loss_distribution: _AT_energy_loss_distribution, _AT_energy_loss_from_lambda_gauss_multi: _AT_energy_loss_from_lambda_gauss_multi, _AT_energy_loss_from_lambda_landau_multi: _AT_energy_loss_from_lambda_landau_multi, _AT_energy_loss_from_lambda_landau_single: _AT_energy_loss_from_lambda_landau_single, _AT_energy_loss_from_lambda_vavilov_multi: _AT_energy_loss_from_lambda_vavilov_multi, _AT_energy_loss_keV_Landau_FWHM: _AT_energy_loss_keV_Landau_FWHM, _AT_energy_loss_keV_Landau_Mode: _AT_energy_loss_keV_Landau_Mode, _AT_energy_loss_keV_Vavilov_FWHM: _AT_energy_loss_keV_Vavilov_FWHM, _AT_energy_loss_mode: _AT_energy_loss_mode, _AT_energy_straggling_MeV2_cm2_g: _AT_energy_straggling_MeV2_cm2_g, _AT_energy_straggling_after_slab_E_MeV_u: _AT_energy_straggling_after_slab_E_MeV_u, _AT_fluence_cm2_from_dose_Gy: _AT_fluence_cm2_from_dose_Gy, _AT_fluence_cm2_from_dose_Gy_single: _AT_fluence_cm2_from_dose_Gy_single, _AT_fluence_weighted_E_MeV_u: _AT_fluence_weighted_E_MeV_u, _AT_fluence_weighted_LET_MeV_cm2_g: _AT_fluence_weighted_LET_MeV_cm2_g, _AT_gamma_: _AT_gamma_, _AT_gamma_from_E: _AT_gamma_from_E, _AT_gamma_from_E_single: _AT_gamma_from_E_single, _AT_gamma_response: _AT_gamma_response, _AT_get_DSB_distribution: _AT_get_DSB_distribution, _AT_get_error_msg: _AT_get_error_msg, _AT_get_gamma_response: _AT_get_gamma_response, _AT_get_gamma_response_for_average_dose: _AT_get_gamma_response_for_average_dose, _AT_get_interpolated_x_from_input_2d_table: _AT_get_interpolated_x_from_input_2d_table, _AT_get_interpolated_y_from_input_2d_table: _AT_get_interpolated_y_from_input_2d_table, _AT_get_interpolated_y_from_input_table: _AT_get_interpolated_y_from_input_table, _AT_get_interpolated_y_from_interval: _AT_get_interpolated_y_from_interval, _AT_get_ion_efficiency_from_dose_distribution: _AT_get_ion_efficiency_from_dose_distribution, _AT_get_ion_efficiency_from_response_distribution: _AT_get_ion_efficiency_from_response_distribution, _AT_get_ion_response_from_dose_distribution: _AT_get_ion_response_from_dose_distribution, _AT_get_ion_response_from_response_distribution: _AT_get_ion_response_from_response_distribution, _AT_get_material_data: _AT_get_material_data, _AT_get_materials_data: _AT_get_materials_data, _AT_get_response_distribution_from_dose_distribution: _AT_get_response_distribution_from_dose_distribution, _AT_gyroradius_m: _AT_gyroradius_m, _AT_histoOld_bin_no: _AT_histoOld_bin_no, _AT_histoOld_get_bin_width: _AT_histoOld_get_bin_width, _AT_histoOld_get_bin_widths: _AT_histoOld_get_bin_widths, _AT_histoOld_log_bin_width: _AT_histoOld_log_bin_width, _AT_histoOld_lower_bin_limit: _AT_histoOld_lower_bin_limit, _AT_histoOld_upper_bin_limit: _AT_histoOld_upper_bin_limit, _AT_histo_add_multi: _AT_histo_add_multi, _AT_histo_add_single: _AT_histo_add_single, _AT_histo_bin_no: _AT_histo_bin_no, _AT_histo_bin_width: _AT_histo_bin_width, _AT_histo_bin_widths: _AT_histo_bin_widths, _AT_histo_left_limit: _AT_histo_left_limit, _AT_histo_left_limits: _AT_histo_left_limits, _AT_histo_linear_bin_no: _AT_histo_linear_bin_no, _AT_histo_linear_bin_width: _AT_histo_linear_bin_width, _AT_histo_linear_left_limit: _AT_histo_linear_left_limit, _AT_histo_linear_midpoint: _AT_histo_linear_midpoint, _AT_histo_linear_n_bins: _AT_histo_linear_n_bins, _AT_histo_linear_step: _AT_histo_linear_step, _AT_histo_logarithmic_bin_no: _AT_histo_logarithmic_bin_no, _AT_histo_logarithmic_bin_width: _AT_histo_logarithmic_bin_width, _AT_histo_logarithmic_left_limit: _AT_histo_logarithmic_left_limit, _AT_histo_logarithmic_midpoint: _AT_histo_logarithmic_midpoint, _AT_histo_logarithmic_n_bins: _AT_histo_logarithmic_n_bins, _AT_histo_logarithmic_step: _AT_histo_logarithmic_step, _AT_histo_midpoint: _AT_histo_midpoint, _AT_histo_midpoints: _AT_histo_midpoints, _AT_histo_n_bins: _AT_histo_n_bins, _AT_histo_normalize: _AT_histo_normalize, _AT_histo_step: _AT_histo_step, _AT_histo_sum: _AT_histo_sum, _AT_interparticleDistance_m: _AT_interparticleDistance_m, _AT_inv_interparticleDistance_Gy: _AT_inv_interparticleDistance_Gy, _AT_inverse_RDD_Cucinotta_m: _AT_inverse_RDD_Cucinotta_m, _AT_inverse_RDD_Cucinotta_solver_function_Gy: _AT_inverse_RDD_Cucinotta_solver_function_Gy, _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m: _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m, _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy: _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy, _AT_inverse_RDD_ExtendedTarget_KatzPoint_m: _AT_inverse_RDD_ExtendedTarget_KatzPoint_m, _AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy: _AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy, _AT_inverse_RDD_Geiss_m: _AT_inverse_RDD_Geiss_m, _AT_inverse_RDD_KatzPoint_LinearER_m: _AT_inverse_RDD_KatzPoint_LinearER_m, _AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy: _AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy, _AT_inverse_RDD_KatzPoint_m: _AT_inverse_RDD_KatzPoint_m, _AT_inverse_RDD_KatzSite_m: _AT_inverse_RDD_KatzSite_m, _AT_inverse_RDD_Test_m: _AT_inverse_RDD_Test_m, _AT_inverse_RadicalDiffusion_m: _AT_inverse_RadicalDiffusion_m, _AT_kappa_multi: _AT_kappa_multi, _AT_kappa_single: _AT_kappa_single, _AT_kinetic_variable_single: _AT_kinetic_variable_single, _AT_lambda_Landau_FWHM: _AT_lambda_Landau_FWHM, _AT_lambda_Landau_FWHM_left: _AT_lambda_Landau_FWHM_left, _AT_lambda_Landau_FWHM_right: _AT_lambda_Landau_FWHM_right, _AT_lambda_Landau_Mean: _AT_lambda_Landau_Mean, _AT_lambda_Landau_Mode: _AT_lambda_Landau_Mode, _AT_lambda_Vavilov_FWHM: _AT_lambda_Vavilov_FWHM, _AT_lambda_Vavilov_FWHM_left: _AT_lambda_Vavilov_FWHM_left, _AT_lambda_Vavilov_FWHM_right: _AT_lambda_Vavilov_FWHM_right, _AT_lambda_Vavilov_Mean: _AT_lambda_Vavilov_Mean, _AT_lambda_Vavilov_Mode: _AT_lambda_Vavilov_Mode, _AT_lambda_Vavilov_Skewness: _AT_lambda_Vavilov_Skewness, _AT_lambda_Vavilov_Variance: _AT_lambda_Vavilov_Variance, _AT_lambda_landau_from_energy_loss_multi: _AT_lambda_landau_from_energy_loss_multi, _AT_lambda_landau_from_energy_loss_single: _AT_lambda_landau_from_energy_loss_single, _AT_lambda_max_multi: _AT_lambda_max_multi, _AT_lambda_max_single: _AT_lambda_max_single, _AT_lambda_mean_multi: _AT_lambda_mean_multi, _AT_lambda_mean_single: _AT_lambda_mean_single, _AT_lambda_vavilov_from_energy_loss_multi: _AT_lambda_vavilov_from_energy_loss_multi, _AT_lambda_vavilov_from_energy_loss_single: _AT_lambda_vavilov_from_energy_loss_single, _AT_low_fluence_local_dose_distribution: _AT_low_fluence_local_dose_distribution, _AT_m_g_cm2_from_material_no: _AT_m_g_cm2_from_material_no, _AT_mass_correction_terms: _AT_mass_correction_terms, _AT_mass_correction_terms_new: _AT_mass_correction_terms_new, _AT_material_index_from_material_number: _AT_material_index_from_material_number, _AT_material_name_from_number: _AT_material_name_from_number, _AT_material_number_from_name: _AT_material_number_from_name, _AT_max_E_transfer_MeV: _AT_max_E_transfer_MeV, _AT_max_E_transfer_MeV_new: _AT_max_E_transfer_MeV_new, _AT_max_E_transfer_MeV_new_single: _AT_max_E_transfer_MeV_new_single, _AT_max_E_transfer_MeV_single: _AT_max_E_transfer_MeV_single, _AT_max_classic_E_transfer_MeV_new_single: _AT_max_classic_E_transfer_MeV_new_single, _AT_max_classic_E_transfer_MeV_single: _AT_max_classic_E_transfer_MeV_single, _AT_max_electron_range_m: _AT_max_electron_range_m, _AT_max_electron_ranges_m: _AT_max_electron_ranges_m, _AT_max_relativistic_E_transfer_MeV_new_single: _AT_max_relativistic_E_transfer_MeV_new_single, _AT_max_relativistic_E_transfer_MeV_single: _AT_max_relativistic_E_transfer_MeV_single, _AT_mean_energy_loss_keV: _AT_mean_energy_loss_keV, _AT_mean_excitation_energy_eV_from_Z: _AT_mean_excitation_energy_eV_from_Z, _AT_mean_excitation_energy_eV_from_Z_single: _AT_mean_excitation_energy_eV_from_Z_single, _AT_mean_number_of_tracks_contrib: _AT_mean_number_of_tracks_contrib, _AT_momentum_MeV_c_u_from_E_MeV_u: _AT_momentum_MeV_c_u_from_E_MeV_u, _AT_momentum_from_E_MeV_c_u_single: _AT_momentum_from_E_MeV_c_u_single, _AT_n_bins_RadicalDiffusion: _AT_n_bins_RadicalDiffusion, _AT_n_bins_for_DSB_distribution: _AT_n_bins_for_DSB_distribution, _AT_n_bins_for_low_fluence_local_dose_distribution: _AT_n_bins_for_low_fluence_local_dose_distribution, _AT_n_bins_for_single_impact_local_dose_distrib: _AT_n_bins_for_single_impact_local_dose_distrib, _AT_normalize: _AT_normalize, _AT_nuclear_spin_from_Z_and_A: _AT_nuclear_spin_from_Z_and_A, _AT_nuclear_spin_from_particle_no_multi: _AT_nuclear_spin_from_particle_no_multi, _AT_nuclear_spin_from_particle_no_single: _AT_nuclear_spin_from_particle_no_single, _AT_p_MeV_from_material_no: _AT_p_MeV_from_material_no, _AT_particle_name_from_particle_no: _AT_particle_name_from_particle_no, _AT_particle_name_from_particle_no_single: _AT_particle_name_from_particle_no_single, _AT_particle_no_from_Z_and_A: _AT_particle_no_from_Z_and_A, _AT_particle_no_from_Z_and_A_single: _AT_particle_no_from_Z_and_A_single, _AT_particle_no_from_particle_name: _AT_particle_no_from_particle_name, _AT_particle_no_from_particle_name_single: _AT_particle_no_from_particle_name_single, _AT_phase_from_material_no: _AT_phase_from_material_no, _AT_plasma_energy_J_from_material_no: _AT_plasma_energy_J_from_material_no, _AT_plasma_energy_J_single: _AT_plasma_energy_J_single, _AT_r_RDD_m: _AT_r_RDD_m, _AT_r_max_RadicalDiffusion_m: _AT_r_max_RadicalDiffusion_m, _AT_r_min_RadicalDiffusion_m: _AT_r_min_RadicalDiffusion_m, _AT_range_straggling_convolution: _AT_range_straggling_convolution, _AT_reduced_target_thickness: _AT_reduced_target_thickness, _AT_reduced_target_thickness_single: _AT_reduced_target_thickness_single, _AT_run_CPPSC_method: _AT_run_CPPSC_method, _AT_run_CPPSS_method: _AT_run_CPPSS_method, _AT_run_GSM_method: _AT_run_GSM_method, _AT_run_IGK_method: _AT_run_IGK_method, _AT_sI_int: _AT_sI_int, _AT_scattering_angle_distribution: _AT_scattering_angle_distribution, _AT_scattering_angle_distribution_single: _AT_scattering_angle_distribution_single, _AT_screening_angle: _AT_screening_angle, _AT_screening_angle_single: _AT_screening_angle_single, _AT_set_user_material: _AT_set_user_material, _AT_set_user_material_from_composition: _AT_set_user_material_from_composition, _AT_single_impact_dose_Gy: _AT_single_impact_dose_Gy, _AT_single_impact_dose_Gy_single: _AT_single_impact_dose_Gy_single, _AT_single_impact_fluence_cm2: _AT_single_impact_fluence_cm2, _AT_single_impact_fluence_cm2_single: _AT_single_impact_fluence_cm2_single, _AT_single_impact_local_dose_distrib: _AT_single_impact_local_dose_distrib, _AT_step_to_N2: _AT_step_to_N2, _AT_stopping_power_ratio: _AT_stopping_power_ratio, _AT_stopping_power_source_model_name_from_number: _AT_stopping_power_source_model_name_from_number, _AT_stopping_power_source_model_number_from_name: _AT_stopping_power_source_model_number_from_name, _AT_sum: _AT_sum, _AT_test_fun: _AT_test_fun, _AT_total_D_Gy: _AT_total_D_Gy, _AT_total_fluence_cm2: _AT_total_fluence_cm2, _AT_translate_dose_into_DSB_distribution: _AT_translate_dose_into_DSB_distribution, _AT_xi_keV: _AT_xi_keV, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_environ: __get_environ, __get_timezone: __get_timezone, __get_tzname: __get_tzname, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_ddi: dynCall_ddi, dynCall_di: dynCall_di, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_viddiiii: dynCall_viddiiii, dynCall_vii: dynCall_vii, dynCall_viiii: dynCall_viiii, establishStackSpace: establishStackSpace, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__AT_A_from_particle_no = asm["_AT_A_from_particle_no"]; asm["_AT_A_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_A_from_particle_no.apply(null, arguments);
};

var real__AT_A_from_particle_no_single = asm["_AT_A_from_particle_no_single"]; asm["_AT_A_from_particle_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_A_from_particle_no_single.apply(null, arguments);
};

var real__AT_Bethe_Stopping_Number = asm["_AT_Bethe_Stopping_Number"]; asm["_AT_Bethe_Stopping_Number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Bethe_Stopping_Number.apply(null, arguments);
};

var real__AT_Bethe_energy_loss_MeV_cm2_g = asm["_AT_Bethe_energy_loss_MeV_cm2_g"]; asm["_AT_Bethe_energy_loss_MeV_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Bethe_energy_loss_MeV_cm2_g.apply(null, arguments);
};

var real__AT_Bethe_energy_loss_MeV_cm2_g_single = asm["_AT_Bethe_energy_loss_MeV_cm2_g_single"]; asm["_AT_Bethe_energy_loss_MeV_cm2_g_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Bethe_energy_loss_MeV_cm2_g_single.apply(null, arguments);
};

var real__AT_Bethe_wrapper = asm["_AT_Bethe_wrapper"]; asm["_AT_Bethe_wrapper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Bethe_wrapper.apply(null, arguments);
};

var real__AT_CSDA_energy_after_slab_E_MeV_u_multi = asm["_AT_CSDA_energy_after_slab_E_MeV_u_multi"]; asm["_AT_CSDA_energy_after_slab_E_MeV_u_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_energy_after_slab_E_MeV_u_multi.apply(null, arguments);
};

var real__AT_CSDA_energy_after_slab_E_MeV_u_single = asm["_AT_CSDA_energy_after_slab_E_MeV_u_single"]; asm["_AT_CSDA_energy_after_slab_E_MeV_u_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_energy_after_slab_E_MeV_u_single.apply(null, arguments);
};

var real__AT_CSDA_range_difference_solver = asm["_AT_CSDA_range_difference_solver"]; asm["_AT_CSDA_range_difference_solver"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_range_difference_solver.apply(null, arguments);
};

var real__AT_CSDA_range_g_cm2_multi = asm["_AT_CSDA_range_g_cm2_multi"]; asm["_AT_CSDA_range_g_cm2_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_range_g_cm2_multi.apply(null, arguments);
};

var real__AT_CSDA_range_g_cm2_single = asm["_AT_CSDA_range_g_cm2_single"]; asm["_AT_CSDA_range_g_cm2_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_range_g_cm2_single.apply(null, arguments);
};

var real__AT_D_RDD_Gy = asm["_AT_D_RDD_Gy"]; asm["_AT_D_RDD_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_D_RDD_Gy.apply(null, arguments);
};

var real__AT_D_RDD_Gy_int = asm["_AT_D_RDD_Gy_int"]; asm["_AT_D_RDD_Gy_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_D_RDD_Gy_int.apply(null, arguments);
};

var real__AT_Dyx = asm["_AT_Dyx"]; asm["_AT_Dyx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Dyx.apply(null, arguments);
};

var real__AT_ER_AM_RadDiff_range_g_cm2 = asm["_AT_ER_AM_RadDiff_range_g_cm2"]; asm["_AT_ER_AM_RadDiff_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_AM_RadDiff_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_ButtsKatz_range_g_cm2 = asm["_AT_ER_ButtsKatz_range_g_cm2"]; asm["_AT_ER_ButtsKatz_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_ButtsKatz_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Edmund_range_g_cm2 = asm["_AT_ER_Edmund_range_g_cm2"]; asm["_AT_ER_Edmund_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Edmund_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Geiss_range_g_cm2 = asm["_AT_ER_Geiss_range_g_cm2"]; asm["_AT_ER_Geiss_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Geiss_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_PowerLaw_alpha = asm["_AT_ER_PowerLaw_alpha"]; asm["_AT_ER_PowerLaw_alpha"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_PowerLaw_alpha.apply(null, arguments);
};

var real__AT_ER_Scholz_new_range_g_cm2 = asm["_AT_ER_Scholz_new_range_g_cm2"]; asm["_AT_ER_Scholz_new_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Scholz_new_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Scholz_range_g_cm2 = asm["_AT_ER_Scholz_range_g_cm2"]; asm["_AT_ER_Scholz_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Scholz_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Tabata_constants = asm["_AT_ER_Tabata_constants"]; asm["_AT_ER_Tabata_constants"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Tabata_constants.apply(null, arguments);
};

var real__AT_ER_Tabata_range_g_cm2 = asm["_AT_ER_Tabata_range_g_cm2"]; asm["_AT_ER_Tabata_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Tabata_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Waligorski_range_g_cm2 = asm["_AT_ER_Waligorski_range_g_cm2"]; asm["_AT_ER_Waligorski_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Waligorski_range_g_cm2.apply(null, arguments);
};

var real__AT_E_MeV_u_from_momentum_MeV_c_u = asm["_AT_E_MeV_u_from_momentum_MeV_c_u"]; asm["_AT_E_MeV_u_from_momentum_MeV_c_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_MeV_u_from_momentum_MeV_c_u.apply(null, arguments);
};

var real__AT_E_MeV_u_from_momentum_single = asm["_AT_E_MeV_u_from_momentum_single"]; asm["_AT_E_MeV_u_from_momentum_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_MeV_u_from_momentum_single.apply(null, arguments);
};

var real__AT_E_RadicalDiffusion_MeV_u = asm["_AT_E_RadicalDiffusion_MeV_u"]; asm["_AT_E_RadicalDiffusion_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_RadicalDiffusion_MeV_u.apply(null, arguments);
};

var real__AT_E_from_beta = asm["_AT_E_from_beta"]; asm["_AT_E_from_beta"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_from_beta.apply(null, arguments);
};

var real__AT_E_from_beta_single = asm["_AT_E_from_beta_single"]; asm["_AT_E_from_beta_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_from_beta_single.apply(null, arguments);
};

var real__AT_E_from_gamma = asm["_AT_E_from_gamma"]; asm["_AT_E_from_gamma"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_from_gamma.apply(null, arguments);
};

var real__AT_E_from_gamma_single = asm["_AT_E_from_gamma_single"]; asm["_AT_E_from_gamma_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_from_gamma_single.apply(null, arguments);
};

var real__AT_Energy_MeV_u_from_Stopping_Power_single = asm["_AT_Energy_MeV_u_from_Stopping_Power_single"]; asm["_AT_Energy_MeV_u_from_Stopping_Power_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Energy_MeV_u_from_Stopping_Power_single.apply(null, arguments);
};

var real__AT_FromFile_wrapper = asm["_AT_FromFile_wrapper"]; asm["_AT_FromFile_wrapper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_FromFile_wrapper.apply(null, arguments);
};

var real__AT_GSM_dose_grid_from_particles_positions = asm["_AT_GSM_dose_grid_from_particles_positions"]; asm["_AT_GSM_dose_grid_from_particles_positions"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_dose_grid_from_particles_positions.apply(null, arguments);
};

var real__AT_GSM_local_dose_distrib = asm["_AT_GSM_local_dose_distrib"]; asm["_AT_GSM_local_dose_distrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_local_dose_distrib.apply(null, arguments);
};

var real__AT_GSM_local_dose_distrib_from_dose_grid = asm["_AT_GSM_local_dose_distrib_from_dose_grid"]; asm["_AT_GSM_local_dose_distrib_from_dose_grid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_local_dose_distrib_from_dose_grid.apply(null, arguments);
};

var real__AT_GSM_multiple_local_dose_distrib = asm["_AT_GSM_multiple_local_dose_distrib"]; asm["_AT_GSM_multiple_local_dose_distrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_multiple_local_dose_distrib.apply(null, arguments);
};

var real__AT_GSM_response_grid_from_dose_grid = asm["_AT_GSM_response_grid_from_dose_grid"]; asm["_AT_GSM_response_grid_from_dose_grid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_response_grid_from_dose_grid.apply(null, arguments);
};

var real__AT_GSM_sample_particle_positions = asm["_AT_GSM_sample_particle_positions"]; asm["_AT_GSM_sample_particle_positions"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_sample_particle_positions.apply(null, arguments);
};

var real__AT_Gamma_index_from_material_number = asm["_AT_Gamma_index_from_material_number"]; asm["_AT_Gamma_index_from_material_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gamma_index_from_material_number.apply(null, arguments);
};

var real__AT_Gamma_name_from_number = asm["_AT_Gamma_name_from_number"]; asm["_AT_Gamma_name_from_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gamma_name_from_number.apply(null, arguments);
};

var real__AT_Gamma_number_of_parameters = asm["_AT_Gamma_number_of_parameters"]; asm["_AT_Gamma_number_of_parameters"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gamma_number_of_parameters.apply(null, arguments);
};

var real__AT_Gauss_FWHM = asm["_AT_Gauss_FWHM"]; asm["_AT_Gauss_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_FWHM.apply(null, arguments);
};

var real__AT_Gauss_IDF = asm["_AT_Gauss_IDF"]; asm["_AT_Gauss_IDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_IDF.apply(null, arguments);
};

var real__AT_Gauss_Mean = asm["_AT_Gauss_Mean"]; asm["_AT_Gauss_Mean"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_Mean.apply(null, arguments);
};

var real__AT_Gauss_Mode = asm["_AT_Gauss_Mode"]; asm["_AT_Gauss_Mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_Mode.apply(null, arguments);
};

var real__AT_Gauss_PDF = asm["_AT_Gauss_PDF"]; asm["_AT_Gauss_PDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_PDF.apply(null, arguments);
};

var real__AT_Highland_angle = asm["_AT_Highland_angle"]; asm["_AT_Highland_angle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Highland_angle.apply(null, arguments);
};

var real__AT_Highland_angle_single = asm["_AT_Highland_angle_single"]; asm["_AT_Highland_angle_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Highland_angle_single.apply(null, arguments);
};

var real__AT_ICRU_wrapper = asm["_AT_ICRU_wrapper"]; asm["_AT_ICRU_wrapper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ICRU_wrapper.apply(null, arguments);
};

var real__AT_I_eV_from_composition = asm["_AT_I_eV_from_composition"]; asm["_AT_I_eV_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_composition.apply(null, arguments);
};

var real__AT_I_eV_from_element_acronym = asm["_AT_I_eV_from_element_acronym"]; asm["_AT_I_eV_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_element_acronym.apply(null, arguments);
};

var real__AT_I_eV_from_element_acronym_single = asm["_AT_I_eV_from_element_acronym_single"]; asm["_AT_I_eV_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_element_acronym_single.apply(null, arguments);
};

var real__AT_I_eV_from_material_no = asm["_AT_I_eV_from_material_no"]; asm["_AT_I_eV_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_material_no.apply(null, arguments);
};

var real__AT_I_eV_from_particle_no = asm["_AT_I_eV_from_particle_no"]; asm["_AT_I_eV_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_particle_no.apply(null, arguments);
};

var real__AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m"]; asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m.apply(null, arguments);
};

var real__AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2 = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2"]; asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2.apply(null, arguments);
};

var real__AT_KatzModel_CucinottaExtTarget_inactivation_probability = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_probability"]; asm["_AT_KatzModel_CucinottaExtTarget_inactivation_probability"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_CucinottaExtTarget_inactivation_probability.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth = asm["_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth"]; asm["_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_Zhang_TrackWidth = asm["_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth"]; asm["_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_Zhang_TrackWidth.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m = asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m"]; asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2 = asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2"]; asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_inactivation_probability = asm["_AT_KatzModel_KatzExtTarget_inactivation_probability"]; asm["_AT_KatzModel_KatzExtTarget_inactivation_probability"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_inactivation_probability.apply(null, arguments);
};

var real__AT_KatzModel_inactivation_cross_section_approximation_m2 = asm["_AT_KatzModel_inactivation_cross_section_approximation_m2"]; asm["_AT_KatzModel_inactivation_cross_section_approximation_m2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_inactivation_cross_section_approximation_m2.apply(null, arguments);
};

var real__AT_KatzModel_inactivation_cross_section_m2 = asm["_AT_KatzModel_inactivation_cross_section_m2"]; asm["_AT_KatzModel_inactivation_cross_section_m2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_inactivation_cross_section_m2.apply(null, arguments);
};

var real__AT_KatzModel_inactivation_probability = asm["_AT_KatzModel_inactivation_probability"]; asm["_AT_KatzModel_inactivation_probability"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_inactivation_probability.apply(null, arguments);
};

var real__AT_KatzModel_mixed_field_survival = asm["_AT_KatzModel_mixed_field_survival"]; asm["_AT_KatzModel_mixed_field_survival"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_mixed_field_survival.apply(null, arguments);
};

var real__AT_KatzModel_single_field_survival = asm["_AT_KatzModel_single_field_survival"]; asm["_AT_KatzModel_single_field_survival"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_single_field_survival.apply(null, arguments);
};

var real__AT_KatzModel_single_field_survival_from_inactivation_cross_section = asm["_AT_KatzModel_single_field_survival_from_inactivation_cross_section"]; asm["_AT_KatzModel_single_field_survival_from_inactivation_cross_section"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_single_field_survival_from_inactivation_cross_section.apply(null, arguments);
};

var real__AT_KatzModel_single_field_survival_optimized_for_fluence_vector = asm["_AT_KatzModel_single_field_survival_optimized_for_fluence_vector"]; asm["_AT_KatzModel_single_field_survival_optimized_for_fluence_vector"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_single_field_survival_optimized_for_fluence_vector.apply(null, arguments);
};

var real__AT_Kellerer_folding = asm["_AT_Kellerer_folding"]; asm["_AT_Kellerer_folding"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_folding.apply(null, arguments);
};

var real__AT_Kellerer_interpolation = asm["_AT_Kellerer_interpolation"]; asm["_AT_Kellerer_interpolation"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_interpolation.apply(null, arguments);
};

var real__AT_Kellerer_normalize = asm["_AT_Kellerer_normalize"]; asm["_AT_Kellerer_normalize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_normalize.apply(null, arguments);
};

var real__AT_Kellerer_reset = asm["_AT_Kellerer_reset"]; asm["_AT_Kellerer_reset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_reset.apply(null, arguments);
};

var real__AT_Kellerer_shrink = asm["_AT_Kellerer_shrink"]; asm["_AT_Kellerer_shrink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_shrink.apply(null, arguments);
};

var real__AT_Kellerer_zero = asm["_AT_Kellerer_zero"]; asm["_AT_Kellerer_zero"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_zero.apply(null, arguments);
};

var real__AT_Landau_IDF = asm["_AT_Landau_IDF"]; asm["_AT_Landau_IDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Landau_IDF.apply(null, arguments);
};

var real__AT_Landau_PDF = asm["_AT_Landau_PDF"]; asm["_AT_Landau_PDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Landau_PDF.apply(null, arguments);
};

var real__AT_Landau_energy_loss_distribution = asm["_AT_Landau_energy_loss_distribution"]; asm["_AT_Landau_energy_loss_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Landau_energy_loss_distribution.apply(null, arguments);
};

var real__AT_Mass_Stopping_Power = asm["_AT_Mass_Stopping_Power"]; asm["_AT_Mass_Stopping_Power"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Mass_Stopping_Power.apply(null, arguments);
};

var real__AT_Mass_Stopping_Power_with_no = asm["_AT_Mass_Stopping_Power_with_no"]; asm["_AT_Mass_Stopping_Power_with_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Mass_Stopping_Power_with_no.apply(null, arguments);
};

var real__AT_Moliere_function_f0 = asm["_AT_Moliere_function_f0"]; asm["_AT_Moliere_function_f0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Moliere_function_f0.apply(null, arguments);
};

var real__AT_Moliere_function_f1 = asm["_AT_Moliere_function_f1"]; asm["_AT_Moliere_function_f1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Moliere_function_f1.apply(null, arguments);
};

var real__AT_Moliere_function_f2 = asm["_AT_Moliere_function_f2"]; asm["_AT_Moliere_function_f2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Moliere_function_f2.apply(null, arguments);
};

var real__AT_N2_to_step = asm["_AT_N2_to_step"]; asm["_AT_N2_to_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_N2_to_step.apply(null, arguments);
};

var real__AT_PSTAR_wrapper = asm["_AT_PSTAR_wrapper"]; asm["_AT_PSTAR_wrapper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_PSTAR_wrapper.apply(null, arguments);
};

var real__AT_P_RDD = asm["_AT_P_RDD"]; asm["_AT_P_RDD"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_P_RDD.apply(null, arguments);
};

var real__AT_RDD_CucinottaPoint_Gy = asm["_AT_RDD_CucinottaPoint_Gy"]; asm["_AT_RDD_CucinottaPoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_CucinottaPoint_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Cnorm = asm["_AT_RDD_Cucinotta_Cnorm"]; asm["_AT_RDD_Cucinotta_Cnorm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Cnorm.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Ddelta_Gy = asm["_AT_RDD_Cucinotta_Ddelta_Gy"]; asm["_AT_RDD_Cucinotta_Ddelta_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Ddelta_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Ddelta_average_Gy = asm["_AT_RDD_Cucinotta_Ddelta_average_Gy"]; asm["_AT_RDD_Cucinotta_Ddelta_average_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Ddelta_average_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Ddelta_average_integrand_m = asm["_AT_RDD_Cucinotta_Ddelta_average_integrand_m"]; asm["_AT_RDD_Cucinotta_Ddelta_average_integrand_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Ddelta_average_integrand_m.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Dexc_Gy = asm["_AT_RDD_Cucinotta_Dexc_Gy"]; asm["_AT_RDD_Cucinotta_Dexc_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Dexc_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Dexc_average_Gy = asm["_AT_RDD_Cucinotta_Dexc_average_Gy"]; asm["_AT_RDD_Cucinotta_Dexc_average_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Dexc_average_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_f_longRange = asm["_AT_RDD_Cucinotta_f_longRange"]; asm["_AT_RDD_Cucinotta_f_longRange"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_f_longRange.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_f_shortRange = asm["_AT_RDD_Cucinotta_f_shortRange"]; asm["_AT_RDD_Cucinotta_f_shortRange"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_f_shortRange.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_CucinottaPoint_Gy = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy"]; asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_CucinottaPoint_Gy.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration"]; asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy"]; asm["_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_KatzPoint_Gy = asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy"]; asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_KatzPoint_Gy.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration = asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration"]; asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy = asm["_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy"]; asm["_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy.apply(null, arguments);
};

var real__AT_RDD_Geiss_Gy = asm["_AT_RDD_Geiss_Gy"]; asm["_AT_RDD_Geiss_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Geiss_Gy.apply(null, arguments);
};

var real__AT_RDD_Geiss_average_Gy = asm["_AT_RDD_Geiss_average_Gy"]; asm["_AT_RDD_Geiss_average_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Geiss_average_Gy.apply(null, arguments);
};

var real__AT_RDD_KatzPoint_Gy = asm["_AT_RDD_KatzPoint_Gy"]; asm["_AT_RDD_KatzPoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_KatzPoint_Gy.apply(null, arguments);
};

var real__AT_RDD_KatzSite_Gy = asm["_AT_RDD_KatzSite_Gy"]; asm["_AT_RDD_KatzSite_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_KatzSite_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_LinearER_DSite_Gy = asm["_AT_RDD_Katz_LinearER_DSite_Gy"]; asm["_AT_RDD_Katz_LinearER_DSite_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_LinearER_DSite_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_LinearER_Daverage_Gy = asm["_AT_RDD_Katz_LinearER_Daverage_Gy"]; asm["_AT_RDD_Katz_LinearER_Daverage_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_LinearER_Daverage_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_LinearER_Dpoint_Gy = asm["_AT_RDD_Katz_LinearER_Dpoint_Gy"]; asm["_AT_RDD_Katz_LinearER_Dpoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_LinearER_Dpoint_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_LinearER_dEdx_J_m = asm["_AT_RDD_Katz_LinearER_dEdx_J_m"]; asm["_AT_RDD_Katz_LinearER_dEdx_J_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_LinearER_dEdx_J_m.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_DSite_Gy = asm["_AT_RDD_Katz_PowerLawER_DSite_Gy"]; asm["_AT_RDD_Katz_PowerLawER_DSite_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_DSite_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_DaverageKernel = asm["_AT_RDD_Katz_PowerLawER_DaverageKernel"]; asm["_AT_RDD_Katz_PowerLawER_DaverageKernel"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_DaverageKernel.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_DaverageKernel_approx = asm["_AT_RDD_Katz_PowerLawER_DaverageKernel_approx"]; asm["_AT_RDD_Katz_PowerLawER_DaverageKernel_approx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_DaverageKernel_approx.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_Daverage_Gy = asm["_AT_RDD_Katz_PowerLawER_Daverage_Gy"]; asm["_AT_RDD_Katz_PowerLawER_Daverage_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_Daverage_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_Dpoint_Gy = asm["_AT_RDD_Katz_PowerLawER_Dpoint_Gy"]; asm["_AT_RDD_Katz_PowerLawER_Dpoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_Dpoint_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_dEdx_J_m = asm["_AT_RDD_Katz_PowerLawER_dEdx_J_m"]; asm["_AT_RDD_Katz_PowerLawER_dEdx_J_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_dEdx_J_m.apply(null, arguments);
};

var real__AT_RDD_Katz_coeff_Gy = asm["_AT_RDD_Katz_coeff_Gy"]; asm["_AT_RDD_Katz_coeff_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_coeff_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_coeff_Gy_general = asm["_AT_RDD_Katz_coeff_Gy_general"]; asm["_AT_RDD_Katz_coeff_Gy_general"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_coeff_Gy_general.apply(null, arguments);
};

var real__AT_RDD_RadicalDiffusion_Gy = asm["_AT_RDD_RadicalDiffusion_Gy"]; asm["_AT_RDD_RadicalDiffusion_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_RadicalDiffusion_Gy.apply(null, arguments);
};

var real__AT_RDD_RadicalDiffusion_get_energy_idx = asm["_AT_RDD_RadicalDiffusion_get_energy_idx"]; asm["_AT_RDD_RadicalDiffusion_get_energy_idx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_RadicalDiffusion_get_energy_idx.apply(null, arguments);
};

var real__AT_RDD_Test_Gy = asm["_AT_RDD_Test_Gy"]; asm["_AT_RDD_Test_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Test_Gy.apply(null, arguments);
};

var real__AT_RDD_a0_m = asm["_AT_RDD_a0_m"]; asm["_AT_RDD_a0_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_a0_m.apply(null, arguments);
};

var real__AT_RDD_d_max_Gy = asm["_AT_RDD_d_max_Gy"]; asm["_AT_RDD_d_max_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_d_max_Gy.apply(null, arguments);
};

var real__AT_RDD_d_min_Gy = asm["_AT_RDD_d_min_Gy"]; asm["_AT_RDD_d_min_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_d_min_Gy.apply(null, arguments);
};

var real__AT_RDD_f1_parameters_mixed_field = asm["_AT_RDD_f1_parameters_mixed_field"]; asm["_AT_RDD_f1_parameters_mixed_field"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_f1_parameters_mixed_field.apply(null, arguments);
};

var real__AT_RDD_f1_parameters_single_field = asm["_AT_RDD_f1_parameters_single_field"]; asm["_AT_RDD_f1_parameters_single_field"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_f1_parameters_single_field.apply(null, arguments);
};

var real__AT_RDD_index_from_RDD_number = asm["_AT_RDD_index_from_RDD_number"]; asm["_AT_RDD_index_from_RDD_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_index_from_RDD_number.apply(null, arguments);
};

var real__AT_RDD_name_from_number = asm["_AT_RDD_name_from_number"]; asm["_AT_RDD_name_from_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_name_from_number.apply(null, arguments);
};

var real__AT_RDD_number_from_name = asm["_AT_RDD_number_from_name"]; asm["_AT_RDD_number_from_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_number_from_name.apply(null, arguments);
};

var real__AT_RDD_number_of_parameters = asm["_AT_RDD_number_of_parameters"]; asm["_AT_RDD_number_of_parameters"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_number_of_parameters.apply(null, arguments);
};

var real__AT_RDD_precalculated_constant_Gy = asm["_AT_RDD_precalculated_constant_Gy"]; asm["_AT_RDD_precalculated_constant_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_precalculated_constant_Gy.apply(null, arguments);
};

var real__AT_RDD_r_min_m = asm["_AT_RDD_r_min_m"]; asm["_AT_RDD_r_min_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_r_min_m.apply(null, arguments);
};

var real__AT_Rutherford_SDCS = asm["_AT_Rutherford_SDCS"]; asm["_AT_Rutherford_SDCS"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Rutherford_SDCS.apply(null, arguments);
};

var real__AT_Rutherford_scatter_cross_section = asm["_AT_Rutherford_scatter_cross_section"]; asm["_AT_Rutherford_scatter_cross_section"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Rutherford_scatter_cross_section.apply(null, arguments);
};

var real__AT_SPC_decompose_data = asm["_AT_SPC_decompose_data"]; asm["_AT_SPC_decompose_data"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_decompose_data.apply(null, arguments);
};

var real__AT_SPC_decompose_header = asm["_AT_SPC_decompose_header"]; asm["_AT_SPC_decompose_header"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_decompose_header.apply(null, arguments);
};

var real__AT_SPC_decompose_size = asm["_AT_SPC_decompose_size"]; asm["_AT_SPC_decompose_size"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_decompose_size.apply(null, arguments);
};

var real__AT_SPC_fast_read_buffer = asm["_AT_SPC_fast_read_buffer"]; asm["_AT_SPC_fast_read_buffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_fast_read_buffer.apply(null, arguments);
};

var real__AT_SPC_get_number_of_bins_from_filename_fast = asm["_AT_SPC_get_number_of_bins_from_filename_fast"]; asm["_AT_SPC_get_number_of_bins_from_filename_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_get_number_of_bins_from_filename_fast.apply(null, arguments);
};

var real__AT_SPC_get_number_of_bytes_in_file = asm["_AT_SPC_get_number_of_bytes_in_file"]; asm["_AT_SPC_get_number_of_bytes_in_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_get_number_of_bytes_in_file.apply(null, arguments);
};

var real__AT_SPC_number_of_bins_at_range = asm["_AT_SPC_number_of_bins_at_range"]; asm["_AT_SPC_number_of_bins_at_range"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_number_of_bins_at_range.apply(null, arguments);
};

var real__AT_SPC_read_data_from_filename_fast = asm["_AT_SPC_read_data_from_filename_fast"]; asm["_AT_SPC_read_data_from_filename_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_read_data_from_filename_fast.apply(null, arguments);
};

var real__AT_SPC_read_from_filename_fast = asm["_AT_SPC_read_from_filename_fast"]; asm["_AT_SPC_read_from_filename_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_read_from_filename_fast.apply(null, arguments);
};

var real__AT_SPC_read_header_from_filename_fast = asm["_AT_SPC_read_header_from_filename_fast"]; asm["_AT_SPC_read_header_from_filename_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_read_header_from_filename_fast.apply(null, arguments);
};

var real__AT_SPC_spectrum_at_range = asm["_AT_SPC_spectrum_at_range"]; asm["_AT_SPC_spectrum_at_range"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_spectrum_at_range.apply(null, arguments);
};

var real__AT_Stopping_Power = asm["_AT_Stopping_Power"]; asm["_AT_Stopping_Power"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Stopping_Power.apply(null, arguments);
};

var real__AT_Stopping_Power_Mass_MeV_cm2_g_int = asm["_AT_Stopping_Power_Mass_MeV_cm2_g_int"]; asm["_AT_Stopping_Power_Mass_MeV_cm2_g_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Stopping_Power_Mass_MeV_cm2_g_int.apply(null, arguments);
};

var real__AT_Stopping_Power_with_no = asm["_AT_Stopping_Power_with_no"]; asm["_AT_Stopping_Power_with_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Stopping_Power_with_no.apply(null, arguments);
};

var real__AT_SuccessiveConvolutions = asm["_AT_SuccessiveConvolutions"]; asm["_AT_SuccessiveConvolutions"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SuccessiveConvolutions.apply(null, arguments);
};

var real__AT_Vavilov_IDF = asm["_AT_Vavilov_IDF"]; asm["_AT_Vavilov_IDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Vavilov_IDF.apply(null, arguments);
};

var real__AT_Vavilov_PDF = asm["_AT_Vavilov_PDF"]; asm["_AT_Vavilov_PDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Vavilov_PDF.apply(null, arguments);
};

var real__AT_Vavilov_energy_loss_distribution = asm["_AT_Vavilov_energy_loss_distribution"]; asm["_AT_Vavilov_energy_loss_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Vavilov_energy_loss_distribution.apply(null, arguments);
};

var real__AT_WEPL_multi = asm["_AT_WEPL_multi"]; asm["_AT_WEPL_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_WEPL_multi.apply(null, arguments);
};

var real__AT_WEPL_single = asm["_AT_WEPL_single"]; asm["_AT_WEPL_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_WEPL_single.apply(null, arguments);
};

var real__AT_Z_from_element_acronym = asm["_AT_Z_from_element_acronym"]; asm["_AT_Z_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Z_from_element_acronym.apply(null, arguments);
};

var real__AT_Z_from_element_acronym_single = asm["_AT_Z_from_element_acronym_single"]; asm["_AT_Z_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Z_from_element_acronym_single.apply(null, arguments);
};

var real__AT_Z_from_particle_no = asm["_AT_Z_from_particle_no"]; asm["_AT_Z_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Z_from_particle_no.apply(null, arguments);
};

var real__AT_Z_from_particle_no_single = asm["_AT_Z_from_particle_no_single"]; asm["_AT_Z_from_particle_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Z_from_particle_no_single.apply(null, arguments);
};

var real__AT_alpha_g_cm2_MeV_from_material_no = asm["_AT_alpha_g_cm2_MeV_from_material_no"]; asm["_AT_alpha_g_cm2_MeV_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_alpha_g_cm2_MeV_from_material_no.apply(null, arguments);
};

var real__AT_atomic_weight_from_Z = asm["_AT_atomic_weight_from_Z"]; asm["_AT_atomic_weight_from_Z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_atomic_weight_from_Z.apply(null, arguments);
};

var real__AT_atomic_weight_from_element_acronym = asm["_AT_atomic_weight_from_element_acronym"]; asm["_AT_atomic_weight_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_atomic_weight_from_element_acronym.apply(null, arguments);
};

var real__AT_atomic_weight_from_element_acronym_single = asm["_AT_atomic_weight_from_element_acronym_single"]; asm["_AT_atomic_weight_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_atomic_weight_from_element_acronym_single.apply(null, arguments);
};

var real__AT_atomic_weight_from_particle_no = asm["_AT_atomic_weight_from_particle_no"]; asm["_AT_atomic_weight_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_atomic_weight_from_particle_no.apply(null, arguments);
};

var real__AT_average_A_from_composition = asm["_AT_average_A_from_composition"]; asm["_AT_average_A_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_average_A_from_composition.apply(null, arguments);
};

var real__AT_average_A_from_material_no = asm["_AT_average_A_from_material_no"]; asm["_AT_average_A_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_average_A_from_material_no.apply(null, arguments);
};

var real__AT_average_Z_from_composition = asm["_AT_average_Z_from_composition"]; asm["_AT_average_Z_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_average_Z_from_composition.apply(null, arguments);
};

var real__AT_average_Z_from_material_no = asm["_AT_average_Z_from_material_no"]; asm["_AT_average_Z_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_average_Z_from_material_no.apply(null, arguments);
};

var real__AT_beam_par_physical_to_technical = asm["_AT_beam_par_physical_to_technical"]; asm["_AT_beam_par_physical_to_technical"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_beam_par_physical_to_technical.apply(null, arguments);
};

var real__AT_beam_par_technical_to_physical = asm["_AT_beam_par_technical_to_physical"]; asm["_AT_beam_par_technical_to_physical"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_beam_par_technical_to_physical.apply(null, arguments);
};

var real__AT_beta_from_E = asm["_AT_beta_from_E"]; asm["_AT_beta_from_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_beta_from_E.apply(null, arguments);
};

var real__AT_beta_from_E_single = asm["_AT_beta_from_E_single"]; asm["_AT_beta_from_E_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_beta_from_E_single.apply(null, arguments);
};

var real__AT_characteristic_multiple_scattering_angle = asm["_AT_characteristic_multiple_scattering_angle"]; asm["_AT_characteristic_multiple_scattering_angle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_characteristic_multiple_scattering_angle.apply(null, arguments);
};

var real__AT_characteristic_multiple_scattering_angle_single = asm["_AT_characteristic_multiple_scattering_angle_single"]; asm["_AT_characteristic_multiple_scattering_angle_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_characteristic_multiple_scattering_angle_single.apply(null, arguments);
};

var real__AT_characteristic_single_scattering_angle = asm["_AT_characteristic_single_scattering_angle"]; asm["_AT_characteristic_single_scattering_angle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_characteristic_single_scattering_angle.apply(null, arguments);
};

var real__AT_characteristic_single_scattering_angle_single = asm["_AT_characteristic_single_scattering_angle_single"]; asm["_AT_characteristic_single_scattering_angle_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_characteristic_single_scattering_angle_single.apply(null, arguments);
};

var real__AT_check_energy_range_single_field = asm["_AT_check_energy_range_single_field"]; asm["_AT_check_energy_range_single_field"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_check_energy_range_single_field.apply(null, arguments);
};

var real__AT_check_energy_range_single_particle = asm["_AT_check_energy_range_single_particle"]; asm["_AT_check_energy_range_single_particle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_check_energy_range_single_particle.apply(null, arguments);
};

var real__AT_check_particle_no_single_field = asm["_AT_check_particle_no_single_field"]; asm["_AT_check_particle_no_single_field"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_check_particle_no_single_field.apply(null, arguments);
};

var real__AT_check_particle_no_single_particle = asm["_AT_check_particle_no_single_particle"]; asm["_AT_check_particle_no_single_particle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_check_particle_no_single_particle.apply(null, arguments);
};

var real__AT_d_max_RadicalDiffusion_Gy = asm["_AT_d_max_RadicalDiffusion_Gy"]; asm["_AT_d_max_RadicalDiffusion_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_d_max_RadicalDiffusion_Gy.apply(null, arguments);
};

var real__AT_d_min_RadicalDiffusion_Gy = asm["_AT_d_min_RadicalDiffusion_Gy"]; asm["_AT_d_min_RadicalDiffusion_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_d_min_RadicalDiffusion_Gy.apply(null, arguments);
};

var real__AT_density_g_cm3_from_element_acronym = asm["_AT_density_g_cm3_from_element_acronym"]; asm["_AT_density_g_cm3_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_density_g_cm3_from_element_acronym.apply(null, arguments);
};

var real__AT_density_g_cm3_from_element_acronym_single = asm["_AT_density_g_cm3_from_element_acronym_single"]; asm["_AT_density_g_cm3_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_density_g_cm3_from_element_acronym_single.apply(null, arguments);
};

var real__AT_density_g_cm3_from_material_no = asm["_AT_density_g_cm3_from_material_no"]; asm["_AT_density_g_cm3_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_density_g_cm3_from_material_no.apply(null, arguments);
};

var real__AT_dose_Gy_from_fluence_cm2 = asm["_AT_dose_Gy_from_fluence_cm2"]; asm["_AT_dose_Gy_from_fluence_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_Gy_from_fluence_cm2.apply(null, arguments);
};

var real__AT_dose_Gy_from_fluence_cm2_single = asm["_AT_dose_Gy_from_fluence_cm2_single"]; asm["_AT_dose_Gy_from_fluence_cm2_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_Gy_from_fluence_cm2_single.apply(null, arguments);
};

var real__AT_dose_weighted_E_MeV_u = asm["_AT_dose_weighted_E_MeV_u"]; asm["_AT_dose_weighted_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_weighted_E_MeV_u.apply(null, arguments);
};

var real__AT_dose_weighted_LET_MeV_cm2_g = asm["_AT_dose_weighted_LET_MeV_cm2_g"]; asm["_AT_dose_weighted_LET_MeV_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_weighted_LET_MeV_cm2_g.apply(null, arguments);
};

var real__AT_effective_Z_from_composition = asm["_AT_effective_Z_from_composition"]; asm["_AT_effective_Z_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_Z_from_composition.apply(null, arguments);
};

var real__AT_effective_charge_from_E_MeV_u = asm["_AT_effective_charge_from_E_MeV_u"]; asm["_AT_effective_charge_from_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_charge_from_E_MeV_u.apply(null, arguments);
};

var real__AT_effective_charge_from_E_MeV_u_single = asm["_AT_effective_charge_from_E_MeV_u_single"]; asm["_AT_effective_charge_from_E_MeV_u_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_charge_from_E_MeV_u_single.apply(null, arguments);
};

var real__AT_effective_charge_from_beta = asm["_AT_effective_charge_from_beta"]; asm["_AT_effective_charge_from_beta"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_charge_from_beta.apply(null, arguments);
};

var real__AT_effective_charge_from_beta_single = asm["_AT_effective_charge_from_beta_single"]; asm["_AT_effective_charge_from_beta_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_charge_from_beta_single.apply(null, arguments);
};

var real__AT_effective_collision_number = asm["_AT_effective_collision_number"]; asm["_AT_effective_collision_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_collision_number.apply(null, arguments);
};

var real__AT_effective_collision_number_single = asm["_AT_effective_collision_number_single"]; asm["_AT_effective_collision_number_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_collision_number_single.apply(null, arguments);
};

var real__AT_el_energy_loss_leading_term_MeV_cm2_g = asm["_AT_el_energy_loss_leading_term_MeV_cm2_g"]; asm["_AT_el_energy_loss_leading_term_MeV_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_el_energy_loss_leading_term_MeV_cm2_g.apply(null, arguments);
};

var real__AT_electron_density_cm3_from_element_acronym = asm["_AT_electron_density_cm3_from_element_acronym"]; asm["_AT_electron_density_cm3_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_cm3_from_element_acronym.apply(null, arguments);
};

var real__AT_electron_density_cm3_from_element_acronym_single = asm["_AT_electron_density_cm3_from_element_acronym_single"]; asm["_AT_electron_density_cm3_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_cm3_from_element_acronym_single.apply(null, arguments);
};

var real__AT_electron_density_m3_from_composition = asm["_AT_electron_density_m3_from_composition"]; asm["_AT_electron_density_m3_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_from_composition.apply(null, arguments);
};

var real__AT_electron_density_m3_from_material_no_multi = asm["_AT_electron_density_m3_from_material_no_multi"]; asm["_AT_electron_density_m3_from_material_no_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_from_material_no_multi.apply(null, arguments);
};

var real__AT_electron_density_m3_from_material_no_single = asm["_AT_electron_density_m3_from_material_no_single"]; asm["_AT_electron_density_m3_from_material_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_from_material_no_single.apply(null, arguments);
};

var real__AT_electron_density_m3_multi = asm["_AT_electron_density_m3_multi"]; asm["_AT_electron_density_m3_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_multi.apply(null, arguments);
};

var real__AT_electron_density_m3_single = asm["_AT_electron_density_m3_single"]; asm["_AT_electron_density_m3_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_single.apply(null, arguments);
};

var real__AT_element_acronym_from_Z = asm["_AT_element_acronym_from_Z"]; asm["_AT_element_acronym_from_Z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_element_acronym_from_Z.apply(null, arguments);
};

var real__AT_element_acronym_from_Z_single = asm["_AT_element_acronym_from_Z_single"]; asm["_AT_element_acronym_from_Z_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_element_acronym_from_Z_single.apply(null, arguments);
};

var real__AT_energy_loss_FWHM = asm["_AT_energy_loss_FWHM"]; asm["_AT_energy_loss_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_FWHM.apply(null, arguments);
};

var real__AT_energy_loss_distribution = asm["_AT_energy_loss_distribution"]; asm["_AT_energy_loss_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_distribution.apply(null, arguments);
};

var real__AT_energy_loss_from_lambda_gauss_multi = asm["_AT_energy_loss_from_lambda_gauss_multi"]; asm["_AT_energy_loss_from_lambda_gauss_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_from_lambda_gauss_multi.apply(null, arguments);
};

var real__AT_energy_loss_from_lambda_landau_multi = asm["_AT_energy_loss_from_lambda_landau_multi"]; asm["_AT_energy_loss_from_lambda_landau_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_from_lambda_landau_multi.apply(null, arguments);
};

var real__AT_energy_loss_from_lambda_landau_single = asm["_AT_energy_loss_from_lambda_landau_single"]; asm["_AT_energy_loss_from_lambda_landau_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_from_lambda_landau_single.apply(null, arguments);
};

var real__AT_energy_loss_from_lambda_vavilov_multi = asm["_AT_energy_loss_from_lambda_vavilov_multi"]; asm["_AT_energy_loss_from_lambda_vavilov_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_from_lambda_vavilov_multi.apply(null, arguments);
};

var real__AT_energy_loss_keV_Landau_FWHM = asm["_AT_energy_loss_keV_Landau_FWHM"]; asm["_AT_energy_loss_keV_Landau_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_keV_Landau_FWHM.apply(null, arguments);
};

var real__AT_energy_loss_keV_Landau_Mode = asm["_AT_energy_loss_keV_Landau_Mode"]; asm["_AT_energy_loss_keV_Landau_Mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_keV_Landau_Mode.apply(null, arguments);
};

var real__AT_energy_loss_keV_Vavilov_FWHM = asm["_AT_energy_loss_keV_Vavilov_FWHM"]; asm["_AT_energy_loss_keV_Vavilov_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_keV_Vavilov_FWHM.apply(null, arguments);
};

var real__AT_energy_loss_mode = asm["_AT_energy_loss_mode"]; asm["_AT_energy_loss_mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_mode.apply(null, arguments);
};

var real__AT_energy_straggling_MeV2_cm2_g = asm["_AT_energy_straggling_MeV2_cm2_g"]; asm["_AT_energy_straggling_MeV2_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_straggling_MeV2_cm2_g.apply(null, arguments);
};

var real__AT_energy_straggling_after_slab_E_MeV_u = asm["_AT_energy_straggling_after_slab_E_MeV_u"]; asm["_AT_energy_straggling_after_slab_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_straggling_after_slab_E_MeV_u.apply(null, arguments);
};

var real__AT_fluence_cm2_from_dose_Gy = asm["_AT_fluence_cm2_from_dose_Gy"]; asm["_AT_fluence_cm2_from_dose_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fluence_cm2_from_dose_Gy.apply(null, arguments);
};

var real__AT_fluence_cm2_from_dose_Gy_single = asm["_AT_fluence_cm2_from_dose_Gy_single"]; asm["_AT_fluence_cm2_from_dose_Gy_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fluence_cm2_from_dose_Gy_single.apply(null, arguments);
};

var real__AT_fluence_weighted_E_MeV_u = asm["_AT_fluence_weighted_E_MeV_u"]; asm["_AT_fluence_weighted_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fluence_weighted_E_MeV_u.apply(null, arguments);
};

var real__AT_fluence_weighted_LET_MeV_cm2_g = asm["_AT_fluence_weighted_LET_MeV_cm2_g"]; asm["_AT_fluence_weighted_LET_MeV_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fluence_weighted_LET_MeV_cm2_g.apply(null, arguments);
};

var real__AT_gamma_ = asm["_AT_gamma_"]; asm["_AT_gamma_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gamma_.apply(null, arguments);
};

var real__AT_gamma_from_E = asm["_AT_gamma_from_E"]; asm["_AT_gamma_from_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gamma_from_E.apply(null, arguments);
};

var real__AT_gamma_from_E_single = asm["_AT_gamma_from_E_single"]; asm["_AT_gamma_from_E_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gamma_from_E_single.apply(null, arguments);
};

var real__AT_gamma_response = asm["_AT_gamma_response"]; asm["_AT_gamma_response"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gamma_response.apply(null, arguments);
};

var real__AT_get_DSB_distribution = asm["_AT_get_DSB_distribution"]; asm["_AT_get_DSB_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_DSB_distribution.apply(null, arguments);
};

var real__AT_get_error_msg = asm["_AT_get_error_msg"]; asm["_AT_get_error_msg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_error_msg.apply(null, arguments);
};

var real__AT_get_gamma_response = asm["_AT_get_gamma_response"]; asm["_AT_get_gamma_response"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_gamma_response.apply(null, arguments);
};

var real__AT_get_gamma_response_for_average_dose = asm["_AT_get_gamma_response_for_average_dose"]; asm["_AT_get_gamma_response_for_average_dose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_gamma_response_for_average_dose.apply(null, arguments);
};

var real__AT_get_interpolated_x_from_input_2d_table = asm["_AT_get_interpolated_x_from_input_2d_table"]; asm["_AT_get_interpolated_x_from_input_2d_table"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_interpolated_x_from_input_2d_table.apply(null, arguments);
};

var real__AT_get_interpolated_y_from_input_2d_table = asm["_AT_get_interpolated_y_from_input_2d_table"]; asm["_AT_get_interpolated_y_from_input_2d_table"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_interpolated_y_from_input_2d_table.apply(null, arguments);
};

var real__AT_get_interpolated_y_from_input_table = asm["_AT_get_interpolated_y_from_input_table"]; asm["_AT_get_interpolated_y_from_input_table"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_interpolated_y_from_input_table.apply(null, arguments);
};

var real__AT_get_interpolated_y_from_interval = asm["_AT_get_interpolated_y_from_interval"]; asm["_AT_get_interpolated_y_from_interval"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_interpolated_y_from_interval.apply(null, arguments);
};

var real__AT_get_ion_efficiency_from_dose_distribution = asm["_AT_get_ion_efficiency_from_dose_distribution"]; asm["_AT_get_ion_efficiency_from_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_ion_efficiency_from_dose_distribution.apply(null, arguments);
};

var real__AT_get_ion_efficiency_from_response_distribution = asm["_AT_get_ion_efficiency_from_response_distribution"]; asm["_AT_get_ion_efficiency_from_response_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_ion_efficiency_from_response_distribution.apply(null, arguments);
};

var real__AT_get_ion_response_from_dose_distribution = asm["_AT_get_ion_response_from_dose_distribution"]; asm["_AT_get_ion_response_from_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_ion_response_from_dose_distribution.apply(null, arguments);
};

var real__AT_get_ion_response_from_response_distribution = asm["_AT_get_ion_response_from_response_distribution"]; asm["_AT_get_ion_response_from_response_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_ion_response_from_response_distribution.apply(null, arguments);
};

var real__AT_get_material_data = asm["_AT_get_material_data"]; asm["_AT_get_material_data"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_material_data.apply(null, arguments);
};

var real__AT_get_materials_data = asm["_AT_get_materials_data"]; asm["_AT_get_materials_data"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_materials_data.apply(null, arguments);
};

var real__AT_get_response_distribution_from_dose_distribution = asm["_AT_get_response_distribution_from_dose_distribution"]; asm["_AT_get_response_distribution_from_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_response_distribution_from_dose_distribution.apply(null, arguments);
};

var real__AT_gyroradius_m = asm["_AT_gyroradius_m"]; asm["_AT_gyroradius_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gyroradius_m.apply(null, arguments);
};

var real__AT_histoOld_bin_no = asm["_AT_histoOld_bin_no"]; asm["_AT_histoOld_bin_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_bin_no.apply(null, arguments);
};

var real__AT_histoOld_get_bin_width = asm["_AT_histoOld_get_bin_width"]; asm["_AT_histoOld_get_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_get_bin_width.apply(null, arguments);
};

var real__AT_histoOld_get_bin_widths = asm["_AT_histoOld_get_bin_widths"]; asm["_AT_histoOld_get_bin_widths"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_get_bin_widths.apply(null, arguments);
};

var real__AT_histoOld_log_bin_width = asm["_AT_histoOld_log_bin_width"]; asm["_AT_histoOld_log_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_log_bin_width.apply(null, arguments);
};

var real__AT_histoOld_lower_bin_limit = asm["_AT_histoOld_lower_bin_limit"]; asm["_AT_histoOld_lower_bin_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_lower_bin_limit.apply(null, arguments);
};

var real__AT_histoOld_upper_bin_limit = asm["_AT_histoOld_upper_bin_limit"]; asm["_AT_histoOld_upper_bin_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_upper_bin_limit.apply(null, arguments);
};

var real__AT_histo_add_multi = asm["_AT_histo_add_multi"]; asm["_AT_histo_add_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_add_multi.apply(null, arguments);
};

var real__AT_histo_add_single = asm["_AT_histo_add_single"]; asm["_AT_histo_add_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_add_single.apply(null, arguments);
};

var real__AT_histo_bin_no = asm["_AT_histo_bin_no"]; asm["_AT_histo_bin_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_bin_no.apply(null, arguments);
};

var real__AT_histo_bin_width = asm["_AT_histo_bin_width"]; asm["_AT_histo_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_bin_width.apply(null, arguments);
};

var real__AT_histo_bin_widths = asm["_AT_histo_bin_widths"]; asm["_AT_histo_bin_widths"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_bin_widths.apply(null, arguments);
};

var real__AT_histo_left_limit = asm["_AT_histo_left_limit"]; asm["_AT_histo_left_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_left_limit.apply(null, arguments);
};

var real__AT_histo_left_limits = asm["_AT_histo_left_limits"]; asm["_AT_histo_left_limits"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_left_limits.apply(null, arguments);
};

var real__AT_histo_linear_bin_no = asm["_AT_histo_linear_bin_no"]; asm["_AT_histo_linear_bin_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_bin_no.apply(null, arguments);
};

var real__AT_histo_linear_bin_width = asm["_AT_histo_linear_bin_width"]; asm["_AT_histo_linear_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_bin_width.apply(null, arguments);
};

var real__AT_histo_linear_left_limit = asm["_AT_histo_linear_left_limit"]; asm["_AT_histo_linear_left_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_left_limit.apply(null, arguments);
};

var real__AT_histo_linear_midpoint = asm["_AT_histo_linear_midpoint"]; asm["_AT_histo_linear_midpoint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_midpoint.apply(null, arguments);
};

var real__AT_histo_linear_n_bins = asm["_AT_histo_linear_n_bins"]; asm["_AT_histo_linear_n_bins"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_n_bins.apply(null, arguments);
};

var real__AT_histo_linear_step = asm["_AT_histo_linear_step"]; asm["_AT_histo_linear_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_step.apply(null, arguments);
};

var real__AT_histo_logarithmic_bin_no = asm["_AT_histo_logarithmic_bin_no"]; asm["_AT_histo_logarithmic_bin_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_bin_no.apply(null, arguments);
};

var real__AT_histo_logarithmic_bin_width = asm["_AT_histo_logarithmic_bin_width"]; asm["_AT_histo_logarithmic_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_bin_width.apply(null, arguments);
};

var real__AT_histo_logarithmic_left_limit = asm["_AT_histo_logarithmic_left_limit"]; asm["_AT_histo_logarithmic_left_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_left_limit.apply(null, arguments);
};

var real__AT_histo_logarithmic_midpoint = asm["_AT_histo_logarithmic_midpoint"]; asm["_AT_histo_logarithmic_midpoint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_midpoint.apply(null, arguments);
};

var real__AT_histo_logarithmic_n_bins = asm["_AT_histo_logarithmic_n_bins"]; asm["_AT_histo_logarithmic_n_bins"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_n_bins.apply(null, arguments);
};

var real__AT_histo_logarithmic_step = asm["_AT_histo_logarithmic_step"]; asm["_AT_histo_logarithmic_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_step.apply(null, arguments);
};

var real__AT_histo_midpoint = asm["_AT_histo_midpoint"]; asm["_AT_histo_midpoint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_midpoint.apply(null, arguments);
};

var real__AT_histo_midpoints = asm["_AT_histo_midpoints"]; asm["_AT_histo_midpoints"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_midpoints.apply(null, arguments);
};

var real__AT_histo_n_bins = asm["_AT_histo_n_bins"]; asm["_AT_histo_n_bins"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_n_bins.apply(null, arguments);
};

var real__AT_histo_normalize = asm["_AT_histo_normalize"]; asm["_AT_histo_normalize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_normalize.apply(null, arguments);
};

var real__AT_histo_step = asm["_AT_histo_step"]; asm["_AT_histo_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_step.apply(null, arguments);
};

var real__AT_histo_sum = asm["_AT_histo_sum"]; asm["_AT_histo_sum"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_sum.apply(null, arguments);
};

var real__AT_interparticleDistance_m = asm["_AT_interparticleDistance_m"]; asm["_AT_interparticleDistance_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_interparticleDistance_m.apply(null, arguments);
};

var real__AT_inv_interparticleDistance_Gy = asm["_AT_inv_interparticleDistance_Gy"]; asm["_AT_inv_interparticleDistance_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inv_interparticleDistance_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_Cucinotta_m = asm["_AT_inverse_RDD_Cucinotta_m"]; asm["_AT_inverse_RDD_Cucinotta_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_Cucinotta_m.apply(null, arguments);
};

var real__AT_inverse_RDD_Cucinotta_solver_function_Gy = asm["_AT_inverse_RDD_Cucinotta_solver_function_Gy"]; asm["_AT_inverse_RDD_Cucinotta_solver_function_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_Cucinotta_solver_function_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m = asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m"]; asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m.apply(null, arguments);
};

var real__AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy = asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy"]; asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_ExtendedTarget_KatzPoint_m = asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_m"]; asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_ExtendedTarget_KatzPoint_m.apply(null, arguments);
};

var real__AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy = asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy"]; asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_Geiss_m = asm["_AT_inverse_RDD_Geiss_m"]; asm["_AT_inverse_RDD_Geiss_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_Geiss_m.apply(null, arguments);
};

var real__AT_inverse_RDD_KatzPoint_LinearER_m = asm["_AT_inverse_RDD_KatzPoint_LinearER_m"]; asm["_AT_inverse_RDD_KatzPoint_LinearER_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_KatzPoint_LinearER_m.apply(null, arguments);
};

var real__AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy = asm["_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy"]; asm["_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_KatzPoint_m = asm["_AT_inverse_RDD_KatzPoint_m"]; asm["_AT_inverse_RDD_KatzPoint_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_KatzPoint_m.apply(null, arguments);
};

var real__AT_inverse_RDD_KatzSite_m = asm["_AT_inverse_RDD_KatzSite_m"]; asm["_AT_inverse_RDD_KatzSite_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_KatzSite_m.apply(null, arguments);
};

var real__AT_inverse_RDD_Test_m = asm["_AT_inverse_RDD_Test_m"]; asm["_AT_inverse_RDD_Test_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_Test_m.apply(null, arguments);
};

var real__AT_inverse_RadicalDiffusion_m = asm["_AT_inverse_RadicalDiffusion_m"]; asm["_AT_inverse_RadicalDiffusion_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RadicalDiffusion_m.apply(null, arguments);
};

var real__AT_kappa_multi = asm["_AT_kappa_multi"]; asm["_AT_kappa_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_kappa_multi.apply(null, arguments);
};

var real__AT_kappa_single = asm["_AT_kappa_single"]; asm["_AT_kappa_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_kappa_single.apply(null, arguments);
};

var real__AT_kinetic_variable_single = asm["_AT_kinetic_variable_single"]; asm["_AT_kinetic_variable_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_kinetic_variable_single.apply(null, arguments);
};

var real__AT_lambda_Landau_FWHM = asm["_AT_lambda_Landau_FWHM"]; asm["_AT_lambda_Landau_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_FWHM.apply(null, arguments);
};

var real__AT_lambda_Landau_FWHM_left = asm["_AT_lambda_Landau_FWHM_left"]; asm["_AT_lambda_Landau_FWHM_left"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_FWHM_left.apply(null, arguments);
};

var real__AT_lambda_Landau_FWHM_right = asm["_AT_lambda_Landau_FWHM_right"]; asm["_AT_lambda_Landau_FWHM_right"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_FWHM_right.apply(null, arguments);
};

var real__AT_lambda_Landau_Mean = asm["_AT_lambda_Landau_Mean"]; asm["_AT_lambda_Landau_Mean"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_Mean.apply(null, arguments);
};

var real__AT_lambda_Landau_Mode = asm["_AT_lambda_Landau_Mode"]; asm["_AT_lambda_Landau_Mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_Mode.apply(null, arguments);
};

var real__AT_lambda_Vavilov_FWHM = asm["_AT_lambda_Vavilov_FWHM"]; asm["_AT_lambda_Vavilov_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_FWHM.apply(null, arguments);
};

var real__AT_lambda_Vavilov_FWHM_left = asm["_AT_lambda_Vavilov_FWHM_left"]; asm["_AT_lambda_Vavilov_FWHM_left"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_FWHM_left.apply(null, arguments);
};

var real__AT_lambda_Vavilov_FWHM_right = asm["_AT_lambda_Vavilov_FWHM_right"]; asm["_AT_lambda_Vavilov_FWHM_right"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_FWHM_right.apply(null, arguments);
};

var real__AT_lambda_Vavilov_Mean = asm["_AT_lambda_Vavilov_Mean"]; asm["_AT_lambda_Vavilov_Mean"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_Mean.apply(null, arguments);
};

var real__AT_lambda_Vavilov_Mode = asm["_AT_lambda_Vavilov_Mode"]; asm["_AT_lambda_Vavilov_Mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_Mode.apply(null, arguments);
};

var real__AT_lambda_Vavilov_Skewness = asm["_AT_lambda_Vavilov_Skewness"]; asm["_AT_lambda_Vavilov_Skewness"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_Skewness.apply(null, arguments);
};

var real__AT_lambda_Vavilov_Variance = asm["_AT_lambda_Vavilov_Variance"]; asm["_AT_lambda_Vavilov_Variance"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_Variance.apply(null, arguments);
};

var real__AT_lambda_landau_from_energy_loss_multi = asm["_AT_lambda_landau_from_energy_loss_multi"]; asm["_AT_lambda_landau_from_energy_loss_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_landau_from_energy_loss_multi.apply(null, arguments);
};

var real__AT_lambda_landau_from_energy_loss_single = asm["_AT_lambda_landau_from_energy_loss_single"]; asm["_AT_lambda_landau_from_energy_loss_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_landau_from_energy_loss_single.apply(null, arguments);
};

var real__AT_lambda_max_multi = asm["_AT_lambda_max_multi"]; asm["_AT_lambda_max_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_max_multi.apply(null, arguments);
};

var real__AT_lambda_max_single = asm["_AT_lambda_max_single"]; asm["_AT_lambda_max_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_max_single.apply(null, arguments);
};

var real__AT_lambda_mean_multi = asm["_AT_lambda_mean_multi"]; asm["_AT_lambda_mean_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_mean_multi.apply(null, arguments);
};

var real__AT_lambda_mean_single = asm["_AT_lambda_mean_single"]; asm["_AT_lambda_mean_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_mean_single.apply(null, arguments);
};

var real__AT_lambda_vavilov_from_energy_loss_multi = asm["_AT_lambda_vavilov_from_energy_loss_multi"]; asm["_AT_lambda_vavilov_from_energy_loss_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_vavilov_from_energy_loss_multi.apply(null, arguments);
};

var real__AT_lambda_vavilov_from_energy_loss_single = asm["_AT_lambda_vavilov_from_energy_loss_single"]; asm["_AT_lambda_vavilov_from_energy_loss_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_vavilov_from_energy_loss_single.apply(null, arguments);
};

var real__AT_low_fluence_local_dose_distribution = asm["_AT_low_fluence_local_dose_distribution"]; asm["_AT_low_fluence_local_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_low_fluence_local_dose_distribution.apply(null, arguments);
};

var real__AT_m_g_cm2_from_material_no = asm["_AT_m_g_cm2_from_material_no"]; asm["_AT_m_g_cm2_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_m_g_cm2_from_material_no.apply(null, arguments);
};

var real__AT_mass_correction_terms = asm["_AT_mass_correction_terms"]; asm["_AT_mass_correction_terms"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mass_correction_terms.apply(null, arguments);
};

var real__AT_mass_correction_terms_new = asm["_AT_mass_correction_terms_new"]; asm["_AT_mass_correction_terms_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mass_correction_terms_new.apply(null, arguments);
};

var real__AT_material_index_from_material_number = asm["_AT_material_index_from_material_number"]; asm["_AT_material_index_from_material_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_material_index_from_material_number.apply(null, arguments);
};

var real__AT_material_name_from_number = asm["_AT_material_name_from_number"]; asm["_AT_material_name_from_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_material_name_from_number.apply(null, arguments);
};

var real__AT_material_number_from_name = asm["_AT_material_number_from_name"]; asm["_AT_material_number_from_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_material_number_from_name.apply(null, arguments);
};

var real__AT_max_E_transfer_MeV = asm["_AT_max_E_transfer_MeV"]; asm["_AT_max_E_transfer_MeV"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_E_transfer_MeV.apply(null, arguments);
};

var real__AT_max_E_transfer_MeV_new = asm["_AT_max_E_transfer_MeV_new"]; asm["_AT_max_E_transfer_MeV_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_E_transfer_MeV_new.apply(null, arguments);
};

var real__AT_max_E_transfer_MeV_new_single = asm["_AT_max_E_transfer_MeV_new_single"]; asm["_AT_max_E_transfer_MeV_new_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_E_transfer_MeV_new_single.apply(null, arguments);
};

var real__AT_max_E_transfer_MeV_single = asm["_AT_max_E_transfer_MeV_single"]; asm["_AT_max_E_transfer_MeV_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_E_transfer_MeV_single.apply(null, arguments);
};

var real__AT_max_classic_E_transfer_MeV_new_single = asm["_AT_max_classic_E_transfer_MeV_new_single"]; asm["_AT_max_classic_E_transfer_MeV_new_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_classic_E_transfer_MeV_new_single.apply(null, arguments);
};

var real__AT_max_classic_E_transfer_MeV_single = asm["_AT_max_classic_E_transfer_MeV_single"]; asm["_AT_max_classic_E_transfer_MeV_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_classic_E_transfer_MeV_single.apply(null, arguments);
};

var real__AT_max_electron_range_m = asm["_AT_max_electron_range_m"]; asm["_AT_max_electron_range_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_electron_range_m.apply(null, arguments);
};

var real__AT_max_electron_ranges_m = asm["_AT_max_electron_ranges_m"]; asm["_AT_max_electron_ranges_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_electron_ranges_m.apply(null, arguments);
};

var real__AT_max_relativistic_E_transfer_MeV_new_single = asm["_AT_max_relativistic_E_transfer_MeV_new_single"]; asm["_AT_max_relativistic_E_transfer_MeV_new_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_relativistic_E_transfer_MeV_new_single.apply(null, arguments);
};

var real__AT_max_relativistic_E_transfer_MeV_single = asm["_AT_max_relativistic_E_transfer_MeV_single"]; asm["_AT_max_relativistic_E_transfer_MeV_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_relativistic_E_transfer_MeV_single.apply(null, arguments);
};

var real__AT_mean_energy_loss_keV = asm["_AT_mean_energy_loss_keV"]; asm["_AT_mean_energy_loss_keV"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mean_energy_loss_keV.apply(null, arguments);
};

var real__AT_mean_excitation_energy_eV_from_Z = asm["_AT_mean_excitation_energy_eV_from_Z"]; asm["_AT_mean_excitation_energy_eV_from_Z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mean_excitation_energy_eV_from_Z.apply(null, arguments);
};

var real__AT_mean_excitation_energy_eV_from_Z_single = asm["_AT_mean_excitation_energy_eV_from_Z_single"]; asm["_AT_mean_excitation_energy_eV_from_Z_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mean_excitation_energy_eV_from_Z_single.apply(null, arguments);
};

var real__AT_mean_number_of_tracks_contrib = asm["_AT_mean_number_of_tracks_contrib"]; asm["_AT_mean_number_of_tracks_contrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mean_number_of_tracks_contrib.apply(null, arguments);
};

var real__AT_momentum_MeV_c_u_from_E_MeV_u = asm["_AT_momentum_MeV_c_u_from_E_MeV_u"]; asm["_AT_momentum_MeV_c_u_from_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_momentum_MeV_c_u_from_E_MeV_u.apply(null, arguments);
};

var real__AT_momentum_from_E_MeV_c_u_single = asm["_AT_momentum_from_E_MeV_c_u_single"]; asm["_AT_momentum_from_E_MeV_c_u_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_momentum_from_E_MeV_c_u_single.apply(null, arguments);
};

var real__AT_n_bins_RadicalDiffusion = asm["_AT_n_bins_RadicalDiffusion"]; asm["_AT_n_bins_RadicalDiffusion"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_n_bins_RadicalDiffusion.apply(null, arguments);
};

var real__AT_n_bins_for_DSB_distribution = asm["_AT_n_bins_for_DSB_distribution"]; asm["_AT_n_bins_for_DSB_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_n_bins_for_DSB_distribution.apply(null, arguments);
};

var real__AT_n_bins_for_low_fluence_local_dose_distribution = asm["_AT_n_bins_for_low_fluence_local_dose_distribution"]; asm["_AT_n_bins_for_low_fluence_local_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_n_bins_for_low_fluence_local_dose_distribution.apply(null, arguments);
};

var real__AT_n_bins_for_single_impact_local_dose_distrib = asm["_AT_n_bins_for_single_impact_local_dose_distrib"]; asm["_AT_n_bins_for_single_impact_local_dose_distrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_n_bins_for_single_impact_local_dose_distrib.apply(null, arguments);
};

var real__AT_normalize = asm["_AT_normalize"]; asm["_AT_normalize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_normalize.apply(null, arguments);
};

var real__AT_nuclear_spin_from_Z_and_A = asm["_AT_nuclear_spin_from_Z_and_A"]; asm["_AT_nuclear_spin_from_Z_and_A"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_nuclear_spin_from_Z_and_A.apply(null, arguments);
};

var real__AT_nuclear_spin_from_particle_no_multi = asm["_AT_nuclear_spin_from_particle_no_multi"]; asm["_AT_nuclear_spin_from_particle_no_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_nuclear_spin_from_particle_no_multi.apply(null, arguments);
};

var real__AT_nuclear_spin_from_particle_no_single = asm["_AT_nuclear_spin_from_particle_no_single"]; asm["_AT_nuclear_spin_from_particle_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_nuclear_spin_from_particle_no_single.apply(null, arguments);
};

var real__AT_p_MeV_from_material_no = asm["_AT_p_MeV_from_material_no"]; asm["_AT_p_MeV_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_p_MeV_from_material_no.apply(null, arguments);
};

var real__AT_particle_name_from_particle_no = asm["_AT_particle_name_from_particle_no"]; asm["_AT_particle_name_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_name_from_particle_no.apply(null, arguments);
};

var real__AT_particle_name_from_particle_no_single = asm["_AT_particle_name_from_particle_no_single"]; asm["_AT_particle_name_from_particle_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_name_from_particle_no_single.apply(null, arguments);
};

var real__AT_particle_no_from_Z_and_A = asm["_AT_particle_no_from_Z_and_A"]; asm["_AT_particle_no_from_Z_and_A"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_no_from_Z_and_A.apply(null, arguments);
};

var real__AT_particle_no_from_Z_and_A_single = asm["_AT_particle_no_from_Z_and_A_single"]; asm["_AT_particle_no_from_Z_and_A_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_no_from_Z_and_A_single.apply(null, arguments);
};

var real__AT_particle_no_from_particle_name = asm["_AT_particle_no_from_particle_name"]; asm["_AT_particle_no_from_particle_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_no_from_particle_name.apply(null, arguments);
};

var real__AT_particle_no_from_particle_name_single = asm["_AT_particle_no_from_particle_name_single"]; asm["_AT_particle_no_from_particle_name_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_no_from_particle_name_single.apply(null, arguments);
};

var real__AT_phase_from_material_no = asm["_AT_phase_from_material_no"]; asm["_AT_phase_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_phase_from_material_no.apply(null, arguments);
};

var real__AT_plasma_energy_J_from_material_no = asm["_AT_plasma_energy_J_from_material_no"]; asm["_AT_plasma_energy_J_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_plasma_energy_J_from_material_no.apply(null, arguments);
};

var real__AT_plasma_energy_J_single = asm["_AT_plasma_energy_J_single"]; asm["_AT_plasma_energy_J_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_plasma_energy_J_single.apply(null, arguments);
};

var real__AT_r_RDD_m = asm["_AT_r_RDD_m"]; asm["_AT_r_RDD_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_r_RDD_m.apply(null, arguments);
};

var real__AT_r_max_RadicalDiffusion_m = asm["_AT_r_max_RadicalDiffusion_m"]; asm["_AT_r_max_RadicalDiffusion_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_r_max_RadicalDiffusion_m.apply(null, arguments);
};

var real__AT_r_min_RadicalDiffusion_m = asm["_AT_r_min_RadicalDiffusion_m"]; asm["_AT_r_min_RadicalDiffusion_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_r_min_RadicalDiffusion_m.apply(null, arguments);
};

var real__AT_range_straggling_convolution = asm["_AT_range_straggling_convolution"]; asm["_AT_range_straggling_convolution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_range_straggling_convolution.apply(null, arguments);
};

var real__AT_reduced_target_thickness = asm["_AT_reduced_target_thickness"]; asm["_AT_reduced_target_thickness"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_reduced_target_thickness.apply(null, arguments);
};

var real__AT_reduced_target_thickness_single = asm["_AT_reduced_target_thickness_single"]; asm["_AT_reduced_target_thickness_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_reduced_target_thickness_single.apply(null, arguments);
};

var real__AT_run_CPPSC_method = asm["_AT_run_CPPSC_method"]; asm["_AT_run_CPPSC_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_run_CPPSC_method.apply(null, arguments);
};

var real__AT_run_CPPSS_method = asm["_AT_run_CPPSS_method"]; asm["_AT_run_CPPSS_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_run_CPPSS_method.apply(null, arguments);
};

var real__AT_run_GSM_method = asm["_AT_run_GSM_method"]; asm["_AT_run_GSM_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_run_GSM_method.apply(null, arguments);
};

var real__AT_run_IGK_method = asm["_AT_run_IGK_method"]; asm["_AT_run_IGK_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_run_IGK_method.apply(null, arguments);
};

var real__AT_sI_int = asm["_AT_sI_int"]; asm["_AT_sI_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_sI_int.apply(null, arguments);
};

var real__AT_scattering_angle_distribution = asm["_AT_scattering_angle_distribution"]; asm["_AT_scattering_angle_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_scattering_angle_distribution.apply(null, arguments);
};

var real__AT_scattering_angle_distribution_single = asm["_AT_scattering_angle_distribution_single"]; asm["_AT_scattering_angle_distribution_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_scattering_angle_distribution_single.apply(null, arguments);
};

var real__AT_screening_angle = asm["_AT_screening_angle"]; asm["_AT_screening_angle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_screening_angle.apply(null, arguments);
};

var real__AT_screening_angle_single = asm["_AT_screening_angle_single"]; asm["_AT_screening_angle_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_screening_angle_single.apply(null, arguments);
};

var real__AT_set_user_material = asm["_AT_set_user_material"]; asm["_AT_set_user_material"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_set_user_material.apply(null, arguments);
};

var real__AT_set_user_material_from_composition = asm["_AT_set_user_material_from_composition"]; asm["_AT_set_user_material_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_set_user_material_from_composition.apply(null, arguments);
};

var real__AT_single_impact_dose_Gy = asm["_AT_single_impact_dose_Gy"]; asm["_AT_single_impact_dose_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_dose_Gy.apply(null, arguments);
};

var real__AT_single_impact_dose_Gy_single = asm["_AT_single_impact_dose_Gy_single"]; asm["_AT_single_impact_dose_Gy_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_dose_Gy_single.apply(null, arguments);
};

var real__AT_single_impact_fluence_cm2 = asm["_AT_single_impact_fluence_cm2"]; asm["_AT_single_impact_fluence_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_fluence_cm2.apply(null, arguments);
};

var real__AT_single_impact_fluence_cm2_single = asm["_AT_single_impact_fluence_cm2_single"]; asm["_AT_single_impact_fluence_cm2_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_fluence_cm2_single.apply(null, arguments);
};

var real__AT_single_impact_local_dose_distrib = asm["_AT_single_impact_local_dose_distrib"]; asm["_AT_single_impact_local_dose_distrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_local_dose_distrib.apply(null, arguments);
};

var real__AT_step_to_N2 = asm["_AT_step_to_N2"]; asm["_AT_step_to_N2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_step_to_N2.apply(null, arguments);
};

var real__AT_stopping_power_ratio = asm["_AT_stopping_power_ratio"]; asm["_AT_stopping_power_ratio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_stopping_power_ratio.apply(null, arguments);
};

var real__AT_stopping_power_source_model_name_from_number = asm["_AT_stopping_power_source_model_name_from_number"]; asm["_AT_stopping_power_source_model_name_from_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_stopping_power_source_model_name_from_number.apply(null, arguments);
};

var real__AT_stopping_power_source_model_number_from_name = asm["_AT_stopping_power_source_model_number_from_name"]; asm["_AT_stopping_power_source_model_number_from_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_stopping_power_source_model_number_from_name.apply(null, arguments);
};

var real__AT_sum = asm["_AT_sum"]; asm["_AT_sum"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_sum.apply(null, arguments);
};

var real__AT_test_fun = asm["_AT_test_fun"]; asm["_AT_test_fun"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_test_fun.apply(null, arguments);
};

var real__AT_total_D_Gy = asm["_AT_total_D_Gy"]; asm["_AT_total_D_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_total_D_Gy.apply(null, arguments);
};

var real__AT_total_fluence_cm2 = asm["_AT_total_fluence_cm2"]; asm["_AT_total_fluence_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_total_fluence_cm2.apply(null, arguments);
};

var real__AT_translate_dose_into_DSB_distribution = asm["_AT_translate_dose_into_DSB_distribution"]; asm["_AT_translate_dose_into_DSB_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_translate_dose_into_DSB_distribution.apply(null, arguments);
};

var real__AT_xi_keV = asm["_AT_xi_keV"]; asm["_AT_xi_keV"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_xi_keV.apply(null, arguments);
};

var real____emscripten_environ_constructor = asm["___emscripten_environ_constructor"]; asm["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_environ_constructor.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_daylight = asm["__get_daylight"]; asm["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_environ = asm["__get_environ"]; asm["__get_environ"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_environ.apply(null, arguments);
};

var real___get_timezone = asm["__get_timezone"]; asm["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real___get_tzname = asm["__get_tzname"]; asm["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var _AT_A_from_particle_no = Module["_AT_A_from_particle_no"] = asm["_AT_A_from_particle_no"];
var _AT_A_from_particle_no_single = Module["_AT_A_from_particle_no_single"] = asm["_AT_A_from_particle_no_single"];
var _AT_Bethe_Stopping_Number = Module["_AT_Bethe_Stopping_Number"] = asm["_AT_Bethe_Stopping_Number"];
var _AT_Bethe_energy_loss_MeV_cm2_g = Module["_AT_Bethe_energy_loss_MeV_cm2_g"] = asm["_AT_Bethe_energy_loss_MeV_cm2_g"];
var _AT_Bethe_energy_loss_MeV_cm2_g_single = Module["_AT_Bethe_energy_loss_MeV_cm2_g_single"] = asm["_AT_Bethe_energy_loss_MeV_cm2_g_single"];
var _AT_Bethe_wrapper = Module["_AT_Bethe_wrapper"] = asm["_AT_Bethe_wrapper"];
var _AT_CSDA_energy_after_slab_E_MeV_u_multi = Module["_AT_CSDA_energy_after_slab_E_MeV_u_multi"] = asm["_AT_CSDA_energy_after_slab_E_MeV_u_multi"];
var _AT_CSDA_energy_after_slab_E_MeV_u_single = Module["_AT_CSDA_energy_after_slab_E_MeV_u_single"] = asm["_AT_CSDA_energy_after_slab_E_MeV_u_single"];
var _AT_CSDA_range_difference_solver = Module["_AT_CSDA_range_difference_solver"] = asm["_AT_CSDA_range_difference_solver"];
var _AT_CSDA_range_g_cm2_multi = Module["_AT_CSDA_range_g_cm2_multi"] = asm["_AT_CSDA_range_g_cm2_multi"];
var _AT_CSDA_range_g_cm2_single = Module["_AT_CSDA_range_g_cm2_single"] = asm["_AT_CSDA_range_g_cm2_single"];
var _AT_D_RDD_Gy = Module["_AT_D_RDD_Gy"] = asm["_AT_D_RDD_Gy"];
var _AT_D_RDD_Gy_int = Module["_AT_D_RDD_Gy_int"] = asm["_AT_D_RDD_Gy_int"];
var _AT_Dyx = Module["_AT_Dyx"] = asm["_AT_Dyx"];
var _AT_ER_AM_RadDiff_range_g_cm2 = Module["_AT_ER_AM_RadDiff_range_g_cm2"] = asm["_AT_ER_AM_RadDiff_range_g_cm2"];
var _AT_ER_ButtsKatz_range_g_cm2 = Module["_AT_ER_ButtsKatz_range_g_cm2"] = asm["_AT_ER_ButtsKatz_range_g_cm2"];
var _AT_ER_Edmund_range_g_cm2 = Module["_AT_ER_Edmund_range_g_cm2"] = asm["_AT_ER_Edmund_range_g_cm2"];
var _AT_ER_Geiss_range_g_cm2 = Module["_AT_ER_Geiss_range_g_cm2"] = asm["_AT_ER_Geiss_range_g_cm2"];
var _AT_ER_PowerLaw_alpha = Module["_AT_ER_PowerLaw_alpha"] = asm["_AT_ER_PowerLaw_alpha"];
var _AT_ER_Scholz_new_range_g_cm2 = Module["_AT_ER_Scholz_new_range_g_cm2"] = asm["_AT_ER_Scholz_new_range_g_cm2"];
var _AT_ER_Scholz_range_g_cm2 = Module["_AT_ER_Scholz_range_g_cm2"] = asm["_AT_ER_Scholz_range_g_cm2"];
var _AT_ER_Tabata_constants = Module["_AT_ER_Tabata_constants"] = asm["_AT_ER_Tabata_constants"];
var _AT_ER_Tabata_range_g_cm2 = Module["_AT_ER_Tabata_range_g_cm2"] = asm["_AT_ER_Tabata_range_g_cm2"];
var _AT_ER_Waligorski_range_g_cm2 = Module["_AT_ER_Waligorski_range_g_cm2"] = asm["_AT_ER_Waligorski_range_g_cm2"];
var _AT_E_MeV_u_from_momentum_MeV_c_u = Module["_AT_E_MeV_u_from_momentum_MeV_c_u"] = asm["_AT_E_MeV_u_from_momentum_MeV_c_u"];
var _AT_E_MeV_u_from_momentum_single = Module["_AT_E_MeV_u_from_momentum_single"] = asm["_AT_E_MeV_u_from_momentum_single"];
var _AT_E_RadicalDiffusion_MeV_u = Module["_AT_E_RadicalDiffusion_MeV_u"] = asm["_AT_E_RadicalDiffusion_MeV_u"];
var _AT_E_from_beta = Module["_AT_E_from_beta"] = asm["_AT_E_from_beta"];
var _AT_E_from_beta_single = Module["_AT_E_from_beta_single"] = asm["_AT_E_from_beta_single"];
var _AT_E_from_gamma = Module["_AT_E_from_gamma"] = asm["_AT_E_from_gamma"];
var _AT_E_from_gamma_single = Module["_AT_E_from_gamma_single"] = asm["_AT_E_from_gamma_single"];
var _AT_Energy_MeV_u_from_Stopping_Power_single = Module["_AT_Energy_MeV_u_from_Stopping_Power_single"] = asm["_AT_Energy_MeV_u_from_Stopping_Power_single"];
var _AT_FromFile_wrapper = Module["_AT_FromFile_wrapper"] = asm["_AT_FromFile_wrapper"];
var _AT_GSM_dose_grid_from_particles_positions = Module["_AT_GSM_dose_grid_from_particles_positions"] = asm["_AT_GSM_dose_grid_from_particles_positions"];
var _AT_GSM_local_dose_distrib = Module["_AT_GSM_local_dose_distrib"] = asm["_AT_GSM_local_dose_distrib"];
var _AT_GSM_local_dose_distrib_from_dose_grid = Module["_AT_GSM_local_dose_distrib_from_dose_grid"] = asm["_AT_GSM_local_dose_distrib_from_dose_grid"];
var _AT_GSM_multiple_local_dose_distrib = Module["_AT_GSM_multiple_local_dose_distrib"] = asm["_AT_GSM_multiple_local_dose_distrib"];
var _AT_GSM_response_grid_from_dose_grid = Module["_AT_GSM_response_grid_from_dose_grid"] = asm["_AT_GSM_response_grid_from_dose_grid"];
var _AT_GSM_sample_particle_positions = Module["_AT_GSM_sample_particle_positions"] = asm["_AT_GSM_sample_particle_positions"];
var _AT_Gamma_index_from_material_number = Module["_AT_Gamma_index_from_material_number"] = asm["_AT_Gamma_index_from_material_number"];
var _AT_Gamma_name_from_number = Module["_AT_Gamma_name_from_number"] = asm["_AT_Gamma_name_from_number"];
var _AT_Gamma_number_of_parameters = Module["_AT_Gamma_number_of_parameters"] = asm["_AT_Gamma_number_of_parameters"];
var _AT_Gauss_FWHM = Module["_AT_Gauss_FWHM"] = asm["_AT_Gauss_FWHM"];
var _AT_Gauss_IDF = Module["_AT_Gauss_IDF"] = asm["_AT_Gauss_IDF"];
var _AT_Gauss_Mean = Module["_AT_Gauss_Mean"] = asm["_AT_Gauss_Mean"];
var _AT_Gauss_Mode = Module["_AT_Gauss_Mode"] = asm["_AT_Gauss_Mode"];
var _AT_Gauss_PDF = Module["_AT_Gauss_PDF"] = asm["_AT_Gauss_PDF"];
var _AT_Highland_angle = Module["_AT_Highland_angle"] = asm["_AT_Highland_angle"];
var _AT_Highland_angle_single = Module["_AT_Highland_angle_single"] = asm["_AT_Highland_angle_single"];
var _AT_ICRU_wrapper = Module["_AT_ICRU_wrapper"] = asm["_AT_ICRU_wrapper"];
var _AT_I_eV_from_composition = Module["_AT_I_eV_from_composition"] = asm["_AT_I_eV_from_composition"];
var _AT_I_eV_from_element_acronym = Module["_AT_I_eV_from_element_acronym"] = asm["_AT_I_eV_from_element_acronym"];
var _AT_I_eV_from_element_acronym_single = Module["_AT_I_eV_from_element_acronym_single"] = asm["_AT_I_eV_from_element_acronym_single"];
var _AT_I_eV_from_material_no = Module["_AT_I_eV_from_material_no"] = asm["_AT_I_eV_from_material_no"];
var _AT_I_eV_from_particle_no = Module["_AT_I_eV_from_particle_no"] = asm["_AT_I_eV_from_particle_no"];
var _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m = Module["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m"] = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m"];
var _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2 = Module["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2"] = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2"];
var _AT_KatzModel_CucinottaExtTarget_inactivation_probability = Module["_AT_KatzModel_CucinottaExtTarget_inactivation_probability"] = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_probability"];
var _AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth = Module["_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth"] = asm["_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth"];
var _AT_KatzModel_KatzExtTarget_Zhang_TrackWidth = Module["_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth"] = asm["_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth"];
var _AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m = Module["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m"] = asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m"];
var _AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2 = Module["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2"] = asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2"];
var _AT_KatzModel_KatzExtTarget_inactivation_probability = Module["_AT_KatzModel_KatzExtTarget_inactivation_probability"] = asm["_AT_KatzModel_KatzExtTarget_inactivation_probability"];
var _AT_KatzModel_inactivation_cross_section_approximation_m2 = Module["_AT_KatzModel_inactivation_cross_section_approximation_m2"] = asm["_AT_KatzModel_inactivation_cross_section_approximation_m2"];
var _AT_KatzModel_inactivation_cross_section_m2 = Module["_AT_KatzModel_inactivation_cross_section_m2"] = asm["_AT_KatzModel_inactivation_cross_section_m2"];
var _AT_KatzModel_inactivation_probability = Module["_AT_KatzModel_inactivation_probability"] = asm["_AT_KatzModel_inactivation_probability"];
var _AT_KatzModel_mixed_field_survival = Module["_AT_KatzModel_mixed_field_survival"] = asm["_AT_KatzModel_mixed_field_survival"];
var _AT_KatzModel_single_field_survival = Module["_AT_KatzModel_single_field_survival"] = asm["_AT_KatzModel_single_field_survival"];
var _AT_KatzModel_single_field_survival_from_inactivation_cross_section = Module["_AT_KatzModel_single_field_survival_from_inactivation_cross_section"] = asm["_AT_KatzModel_single_field_survival_from_inactivation_cross_section"];
var _AT_KatzModel_single_field_survival_optimized_for_fluence_vector = Module["_AT_KatzModel_single_field_survival_optimized_for_fluence_vector"] = asm["_AT_KatzModel_single_field_survival_optimized_for_fluence_vector"];
var _AT_Kellerer_folding = Module["_AT_Kellerer_folding"] = asm["_AT_Kellerer_folding"];
var _AT_Kellerer_interpolation = Module["_AT_Kellerer_interpolation"] = asm["_AT_Kellerer_interpolation"];
var _AT_Kellerer_normalize = Module["_AT_Kellerer_normalize"] = asm["_AT_Kellerer_normalize"];
var _AT_Kellerer_reset = Module["_AT_Kellerer_reset"] = asm["_AT_Kellerer_reset"];
var _AT_Kellerer_shrink = Module["_AT_Kellerer_shrink"] = asm["_AT_Kellerer_shrink"];
var _AT_Kellerer_zero = Module["_AT_Kellerer_zero"] = asm["_AT_Kellerer_zero"];
var _AT_Landau_IDF = Module["_AT_Landau_IDF"] = asm["_AT_Landau_IDF"];
var _AT_Landau_PDF = Module["_AT_Landau_PDF"] = asm["_AT_Landau_PDF"];
var _AT_Landau_energy_loss_distribution = Module["_AT_Landau_energy_loss_distribution"] = asm["_AT_Landau_energy_loss_distribution"];
var _AT_Mass_Stopping_Power = Module["_AT_Mass_Stopping_Power"] = asm["_AT_Mass_Stopping_Power"];
var _AT_Mass_Stopping_Power_with_no = Module["_AT_Mass_Stopping_Power_with_no"] = asm["_AT_Mass_Stopping_Power_with_no"];
var _AT_Moliere_function_f0 = Module["_AT_Moliere_function_f0"] = asm["_AT_Moliere_function_f0"];
var _AT_Moliere_function_f1 = Module["_AT_Moliere_function_f1"] = asm["_AT_Moliere_function_f1"];
var _AT_Moliere_function_f2 = Module["_AT_Moliere_function_f2"] = asm["_AT_Moliere_function_f2"];
var _AT_N2_to_step = Module["_AT_N2_to_step"] = asm["_AT_N2_to_step"];
var _AT_PSTAR_wrapper = Module["_AT_PSTAR_wrapper"] = asm["_AT_PSTAR_wrapper"];
var _AT_P_RDD = Module["_AT_P_RDD"] = asm["_AT_P_RDD"];
var _AT_RDD_CucinottaPoint_Gy = Module["_AT_RDD_CucinottaPoint_Gy"] = asm["_AT_RDD_CucinottaPoint_Gy"];
var _AT_RDD_Cucinotta_Cnorm = Module["_AT_RDD_Cucinotta_Cnorm"] = asm["_AT_RDD_Cucinotta_Cnorm"];
var _AT_RDD_Cucinotta_Ddelta_Gy = Module["_AT_RDD_Cucinotta_Ddelta_Gy"] = asm["_AT_RDD_Cucinotta_Ddelta_Gy"];
var _AT_RDD_Cucinotta_Ddelta_average_Gy = Module["_AT_RDD_Cucinotta_Ddelta_average_Gy"] = asm["_AT_RDD_Cucinotta_Ddelta_average_Gy"];
var _AT_RDD_Cucinotta_Ddelta_average_integrand_m = Module["_AT_RDD_Cucinotta_Ddelta_average_integrand_m"] = asm["_AT_RDD_Cucinotta_Ddelta_average_integrand_m"];
var _AT_RDD_Cucinotta_Dexc_Gy = Module["_AT_RDD_Cucinotta_Dexc_Gy"] = asm["_AT_RDD_Cucinotta_Dexc_Gy"];
var _AT_RDD_Cucinotta_Dexc_average_Gy = Module["_AT_RDD_Cucinotta_Dexc_average_Gy"] = asm["_AT_RDD_Cucinotta_Dexc_average_Gy"];
var _AT_RDD_Cucinotta_f_longRange = Module["_AT_RDD_Cucinotta_f_longRange"] = asm["_AT_RDD_Cucinotta_f_longRange"];
var _AT_RDD_Cucinotta_f_shortRange = Module["_AT_RDD_Cucinotta_f_shortRange"] = asm["_AT_RDD_Cucinotta_f_shortRange"];
var _AT_RDD_ExtendedTarget_CucinottaPoint_Gy = Module["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy"] = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy"];
var _AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration = Module["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration"] = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration"];
var _AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy = Module["_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy"] = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy"];
var _AT_RDD_ExtendedTarget_KatzPoint_Gy = Module["_AT_RDD_ExtendedTarget_KatzPoint_Gy"] = asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy"];
var _AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration = Module["_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration"] = asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration"];
var _AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy = Module["_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy"] = asm["_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy"];
var _AT_RDD_Geiss_Gy = Module["_AT_RDD_Geiss_Gy"] = asm["_AT_RDD_Geiss_Gy"];
var _AT_RDD_Geiss_average_Gy = Module["_AT_RDD_Geiss_average_Gy"] = asm["_AT_RDD_Geiss_average_Gy"];
var _AT_RDD_KatzPoint_Gy = Module["_AT_RDD_KatzPoint_Gy"] = asm["_AT_RDD_KatzPoint_Gy"];
var _AT_RDD_KatzSite_Gy = Module["_AT_RDD_KatzSite_Gy"] = asm["_AT_RDD_KatzSite_Gy"];
var _AT_RDD_Katz_LinearER_DSite_Gy = Module["_AT_RDD_Katz_LinearER_DSite_Gy"] = asm["_AT_RDD_Katz_LinearER_DSite_Gy"];
var _AT_RDD_Katz_LinearER_Daverage_Gy = Module["_AT_RDD_Katz_LinearER_Daverage_Gy"] = asm["_AT_RDD_Katz_LinearER_Daverage_Gy"];
var _AT_RDD_Katz_LinearER_Dpoint_Gy = Module["_AT_RDD_Katz_LinearER_Dpoint_Gy"] = asm["_AT_RDD_Katz_LinearER_Dpoint_Gy"];
var _AT_RDD_Katz_LinearER_dEdx_J_m = Module["_AT_RDD_Katz_LinearER_dEdx_J_m"] = asm["_AT_RDD_Katz_LinearER_dEdx_J_m"];
var _AT_RDD_Katz_PowerLawER_DSite_Gy = Module["_AT_RDD_Katz_PowerLawER_DSite_Gy"] = asm["_AT_RDD_Katz_PowerLawER_DSite_Gy"];
var _AT_RDD_Katz_PowerLawER_DaverageKernel = Module["_AT_RDD_Katz_PowerLawER_DaverageKernel"] = asm["_AT_RDD_Katz_PowerLawER_DaverageKernel"];
var _AT_RDD_Katz_PowerLawER_DaverageKernel_approx = Module["_AT_RDD_Katz_PowerLawER_DaverageKernel_approx"] = asm["_AT_RDD_Katz_PowerLawER_DaverageKernel_approx"];
var _AT_RDD_Katz_PowerLawER_Daverage_Gy = Module["_AT_RDD_Katz_PowerLawER_Daverage_Gy"] = asm["_AT_RDD_Katz_PowerLawER_Daverage_Gy"];
var _AT_RDD_Katz_PowerLawER_Dpoint_Gy = Module["_AT_RDD_Katz_PowerLawER_Dpoint_Gy"] = asm["_AT_RDD_Katz_PowerLawER_Dpoint_Gy"];
var _AT_RDD_Katz_PowerLawER_dEdx_J_m = Module["_AT_RDD_Katz_PowerLawER_dEdx_J_m"] = asm["_AT_RDD_Katz_PowerLawER_dEdx_J_m"];
var _AT_RDD_Katz_coeff_Gy = Module["_AT_RDD_Katz_coeff_Gy"] = asm["_AT_RDD_Katz_coeff_Gy"];
var _AT_RDD_Katz_coeff_Gy_general = Module["_AT_RDD_Katz_coeff_Gy_general"] = asm["_AT_RDD_Katz_coeff_Gy_general"];
var _AT_RDD_RadicalDiffusion_Gy = Module["_AT_RDD_RadicalDiffusion_Gy"] = asm["_AT_RDD_RadicalDiffusion_Gy"];
var _AT_RDD_RadicalDiffusion_get_energy_idx = Module["_AT_RDD_RadicalDiffusion_get_energy_idx"] = asm["_AT_RDD_RadicalDiffusion_get_energy_idx"];
var _AT_RDD_Test_Gy = Module["_AT_RDD_Test_Gy"] = asm["_AT_RDD_Test_Gy"];
var _AT_RDD_a0_m = Module["_AT_RDD_a0_m"] = asm["_AT_RDD_a0_m"];
var _AT_RDD_d_max_Gy = Module["_AT_RDD_d_max_Gy"] = asm["_AT_RDD_d_max_Gy"];
var _AT_RDD_d_min_Gy = Module["_AT_RDD_d_min_Gy"] = asm["_AT_RDD_d_min_Gy"];
var _AT_RDD_f1_parameters_mixed_field = Module["_AT_RDD_f1_parameters_mixed_field"] = asm["_AT_RDD_f1_parameters_mixed_field"];
var _AT_RDD_f1_parameters_single_field = Module["_AT_RDD_f1_parameters_single_field"] = asm["_AT_RDD_f1_parameters_single_field"];
var _AT_RDD_index_from_RDD_number = Module["_AT_RDD_index_from_RDD_number"] = asm["_AT_RDD_index_from_RDD_number"];
var _AT_RDD_name_from_number = Module["_AT_RDD_name_from_number"] = asm["_AT_RDD_name_from_number"];
var _AT_RDD_number_from_name = Module["_AT_RDD_number_from_name"] = asm["_AT_RDD_number_from_name"];
var _AT_RDD_number_of_parameters = Module["_AT_RDD_number_of_parameters"] = asm["_AT_RDD_number_of_parameters"];
var _AT_RDD_precalculated_constant_Gy = Module["_AT_RDD_precalculated_constant_Gy"] = asm["_AT_RDD_precalculated_constant_Gy"];
var _AT_RDD_r_min_m = Module["_AT_RDD_r_min_m"] = asm["_AT_RDD_r_min_m"];
var _AT_Rutherford_SDCS = Module["_AT_Rutherford_SDCS"] = asm["_AT_Rutherford_SDCS"];
var _AT_Rutherford_scatter_cross_section = Module["_AT_Rutherford_scatter_cross_section"] = asm["_AT_Rutherford_scatter_cross_section"];
var _AT_SPC_decompose_data = Module["_AT_SPC_decompose_data"] = asm["_AT_SPC_decompose_data"];
var _AT_SPC_decompose_header = Module["_AT_SPC_decompose_header"] = asm["_AT_SPC_decompose_header"];
var _AT_SPC_decompose_size = Module["_AT_SPC_decompose_size"] = asm["_AT_SPC_decompose_size"];
var _AT_SPC_fast_read_buffer = Module["_AT_SPC_fast_read_buffer"] = asm["_AT_SPC_fast_read_buffer"];
var _AT_SPC_get_number_of_bins_from_filename_fast = Module["_AT_SPC_get_number_of_bins_from_filename_fast"] = asm["_AT_SPC_get_number_of_bins_from_filename_fast"];
var _AT_SPC_get_number_of_bytes_in_file = Module["_AT_SPC_get_number_of_bytes_in_file"] = asm["_AT_SPC_get_number_of_bytes_in_file"];
var _AT_SPC_number_of_bins_at_range = Module["_AT_SPC_number_of_bins_at_range"] = asm["_AT_SPC_number_of_bins_at_range"];
var _AT_SPC_read_data_from_filename_fast = Module["_AT_SPC_read_data_from_filename_fast"] = asm["_AT_SPC_read_data_from_filename_fast"];
var _AT_SPC_read_from_filename_fast = Module["_AT_SPC_read_from_filename_fast"] = asm["_AT_SPC_read_from_filename_fast"];
var _AT_SPC_read_header_from_filename_fast = Module["_AT_SPC_read_header_from_filename_fast"] = asm["_AT_SPC_read_header_from_filename_fast"];
var _AT_SPC_spectrum_at_range = Module["_AT_SPC_spectrum_at_range"] = asm["_AT_SPC_spectrum_at_range"];
var _AT_Stopping_Power = Module["_AT_Stopping_Power"] = asm["_AT_Stopping_Power"];
var _AT_Stopping_Power_Mass_MeV_cm2_g_int = Module["_AT_Stopping_Power_Mass_MeV_cm2_g_int"] = asm["_AT_Stopping_Power_Mass_MeV_cm2_g_int"];
var _AT_Stopping_Power_with_no = Module["_AT_Stopping_Power_with_no"] = asm["_AT_Stopping_Power_with_no"];
var _AT_SuccessiveConvolutions = Module["_AT_SuccessiveConvolutions"] = asm["_AT_SuccessiveConvolutions"];
var _AT_Vavilov_IDF = Module["_AT_Vavilov_IDF"] = asm["_AT_Vavilov_IDF"];
var _AT_Vavilov_PDF = Module["_AT_Vavilov_PDF"] = asm["_AT_Vavilov_PDF"];
var _AT_Vavilov_energy_loss_distribution = Module["_AT_Vavilov_energy_loss_distribution"] = asm["_AT_Vavilov_energy_loss_distribution"];
var _AT_WEPL_multi = Module["_AT_WEPL_multi"] = asm["_AT_WEPL_multi"];
var _AT_WEPL_single = Module["_AT_WEPL_single"] = asm["_AT_WEPL_single"];
var _AT_Z_from_element_acronym = Module["_AT_Z_from_element_acronym"] = asm["_AT_Z_from_element_acronym"];
var _AT_Z_from_element_acronym_single = Module["_AT_Z_from_element_acronym_single"] = asm["_AT_Z_from_element_acronym_single"];
var _AT_Z_from_particle_no = Module["_AT_Z_from_particle_no"] = asm["_AT_Z_from_particle_no"];
var _AT_Z_from_particle_no_single = Module["_AT_Z_from_particle_no_single"] = asm["_AT_Z_from_particle_no_single"];
var _AT_alpha_g_cm2_MeV_from_material_no = Module["_AT_alpha_g_cm2_MeV_from_material_no"] = asm["_AT_alpha_g_cm2_MeV_from_material_no"];
var _AT_atomic_weight_from_Z = Module["_AT_atomic_weight_from_Z"] = asm["_AT_atomic_weight_from_Z"];
var _AT_atomic_weight_from_element_acronym = Module["_AT_atomic_weight_from_element_acronym"] = asm["_AT_atomic_weight_from_element_acronym"];
var _AT_atomic_weight_from_element_acronym_single = Module["_AT_atomic_weight_from_element_acronym_single"] = asm["_AT_atomic_weight_from_element_acronym_single"];
var _AT_atomic_weight_from_particle_no = Module["_AT_atomic_weight_from_particle_no"] = asm["_AT_atomic_weight_from_particle_no"];
var _AT_average_A_from_composition = Module["_AT_average_A_from_composition"] = asm["_AT_average_A_from_composition"];
var _AT_average_A_from_material_no = Module["_AT_average_A_from_material_no"] = asm["_AT_average_A_from_material_no"];
var _AT_average_Z_from_composition = Module["_AT_average_Z_from_composition"] = asm["_AT_average_Z_from_composition"];
var _AT_average_Z_from_material_no = Module["_AT_average_Z_from_material_no"] = asm["_AT_average_Z_from_material_no"];
var _AT_beam_par_physical_to_technical = Module["_AT_beam_par_physical_to_technical"] = asm["_AT_beam_par_physical_to_technical"];
var _AT_beam_par_technical_to_physical = Module["_AT_beam_par_technical_to_physical"] = asm["_AT_beam_par_technical_to_physical"];
var _AT_beta_from_E = Module["_AT_beta_from_E"] = asm["_AT_beta_from_E"];
var _AT_beta_from_E_single = Module["_AT_beta_from_E_single"] = asm["_AT_beta_from_E_single"];
var _AT_characteristic_multiple_scattering_angle = Module["_AT_characteristic_multiple_scattering_angle"] = asm["_AT_characteristic_multiple_scattering_angle"];
var _AT_characteristic_multiple_scattering_angle_single = Module["_AT_characteristic_multiple_scattering_angle_single"] = asm["_AT_characteristic_multiple_scattering_angle_single"];
var _AT_characteristic_single_scattering_angle = Module["_AT_characteristic_single_scattering_angle"] = asm["_AT_characteristic_single_scattering_angle"];
var _AT_characteristic_single_scattering_angle_single = Module["_AT_characteristic_single_scattering_angle_single"] = asm["_AT_characteristic_single_scattering_angle_single"];
var _AT_check_energy_range_single_field = Module["_AT_check_energy_range_single_field"] = asm["_AT_check_energy_range_single_field"];
var _AT_check_energy_range_single_particle = Module["_AT_check_energy_range_single_particle"] = asm["_AT_check_energy_range_single_particle"];
var _AT_check_particle_no_single_field = Module["_AT_check_particle_no_single_field"] = asm["_AT_check_particle_no_single_field"];
var _AT_check_particle_no_single_particle = Module["_AT_check_particle_no_single_particle"] = asm["_AT_check_particle_no_single_particle"];
var _AT_d_max_RadicalDiffusion_Gy = Module["_AT_d_max_RadicalDiffusion_Gy"] = asm["_AT_d_max_RadicalDiffusion_Gy"];
var _AT_d_min_RadicalDiffusion_Gy = Module["_AT_d_min_RadicalDiffusion_Gy"] = asm["_AT_d_min_RadicalDiffusion_Gy"];
var _AT_density_g_cm3_from_element_acronym = Module["_AT_density_g_cm3_from_element_acronym"] = asm["_AT_density_g_cm3_from_element_acronym"];
var _AT_density_g_cm3_from_element_acronym_single = Module["_AT_density_g_cm3_from_element_acronym_single"] = asm["_AT_density_g_cm3_from_element_acronym_single"];
var _AT_density_g_cm3_from_material_no = Module["_AT_density_g_cm3_from_material_no"] = asm["_AT_density_g_cm3_from_material_no"];
var _AT_dose_Gy_from_fluence_cm2 = Module["_AT_dose_Gy_from_fluence_cm2"] = asm["_AT_dose_Gy_from_fluence_cm2"];
var _AT_dose_Gy_from_fluence_cm2_single = Module["_AT_dose_Gy_from_fluence_cm2_single"] = asm["_AT_dose_Gy_from_fluence_cm2_single"];
var _AT_dose_weighted_E_MeV_u = Module["_AT_dose_weighted_E_MeV_u"] = asm["_AT_dose_weighted_E_MeV_u"];
var _AT_dose_weighted_LET_MeV_cm2_g = Module["_AT_dose_weighted_LET_MeV_cm2_g"] = asm["_AT_dose_weighted_LET_MeV_cm2_g"];
var _AT_effective_Z_from_composition = Module["_AT_effective_Z_from_composition"] = asm["_AT_effective_Z_from_composition"];
var _AT_effective_charge_from_E_MeV_u = Module["_AT_effective_charge_from_E_MeV_u"] = asm["_AT_effective_charge_from_E_MeV_u"];
var _AT_effective_charge_from_E_MeV_u_single = Module["_AT_effective_charge_from_E_MeV_u_single"] = asm["_AT_effective_charge_from_E_MeV_u_single"];
var _AT_effective_charge_from_beta = Module["_AT_effective_charge_from_beta"] = asm["_AT_effective_charge_from_beta"];
var _AT_effective_charge_from_beta_single = Module["_AT_effective_charge_from_beta_single"] = asm["_AT_effective_charge_from_beta_single"];
var _AT_effective_collision_number = Module["_AT_effective_collision_number"] = asm["_AT_effective_collision_number"];
var _AT_effective_collision_number_single = Module["_AT_effective_collision_number_single"] = asm["_AT_effective_collision_number_single"];
var _AT_el_energy_loss_leading_term_MeV_cm2_g = Module["_AT_el_energy_loss_leading_term_MeV_cm2_g"] = asm["_AT_el_energy_loss_leading_term_MeV_cm2_g"];
var _AT_electron_density_cm3_from_element_acronym = Module["_AT_electron_density_cm3_from_element_acronym"] = asm["_AT_electron_density_cm3_from_element_acronym"];
var _AT_electron_density_cm3_from_element_acronym_single = Module["_AT_electron_density_cm3_from_element_acronym_single"] = asm["_AT_electron_density_cm3_from_element_acronym_single"];
var _AT_electron_density_m3_from_composition = Module["_AT_electron_density_m3_from_composition"] = asm["_AT_electron_density_m3_from_composition"];
var _AT_electron_density_m3_from_material_no_multi = Module["_AT_electron_density_m3_from_material_no_multi"] = asm["_AT_electron_density_m3_from_material_no_multi"];
var _AT_electron_density_m3_from_material_no_single = Module["_AT_electron_density_m3_from_material_no_single"] = asm["_AT_electron_density_m3_from_material_no_single"];
var _AT_electron_density_m3_multi = Module["_AT_electron_density_m3_multi"] = asm["_AT_electron_density_m3_multi"];
var _AT_electron_density_m3_single = Module["_AT_electron_density_m3_single"] = asm["_AT_electron_density_m3_single"];
var _AT_element_acronym_from_Z = Module["_AT_element_acronym_from_Z"] = asm["_AT_element_acronym_from_Z"];
var _AT_element_acronym_from_Z_single = Module["_AT_element_acronym_from_Z_single"] = asm["_AT_element_acronym_from_Z_single"];
var _AT_energy_loss_FWHM = Module["_AT_energy_loss_FWHM"] = asm["_AT_energy_loss_FWHM"];
var _AT_energy_loss_distribution = Module["_AT_energy_loss_distribution"] = asm["_AT_energy_loss_distribution"];
var _AT_energy_loss_from_lambda_gauss_multi = Module["_AT_energy_loss_from_lambda_gauss_multi"] = asm["_AT_energy_loss_from_lambda_gauss_multi"];
var _AT_energy_loss_from_lambda_landau_multi = Module["_AT_energy_loss_from_lambda_landau_multi"] = asm["_AT_energy_loss_from_lambda_landau_multi"];
var _AT_energy_loss_from_lambda_landau_single = Module["_AT_energy_loss_from_lambda_landau_single"] = asm["_AT_energy_loss_from_lambda_landau_single"];
var _AT_energy_loss_from_lambda_vavilov_multi = Module["_AT_energy_loss_from_lambda_vavilov_multi"] = asm["_AT_energy_loss_from_lambda_vavilov_multi"];
var _AT_energy_loss_keV_Landau_FWHM = Module["_AT_energy_loss_keV_Landau_FWHM"] = asm["_AT_energy_loss_keV_Landau_FWHM"];
var _AT_energy_loss_keV_Landau_Mode = Module["_AT_energy_loss_keV_Landau_Mode"] = asm["_AT_energy_loss_keV_Landau_Mode"];
var _AT_energy_loss_keV_Vavilov_FWHM = Module["_AT_energy_loss_keV_Vavilov_FWHM"] = asm["_AT_energy_loss_keV_Vavilov_FWHM"];
var _AT_energy_loss_mode = Module["_AT_energy_loss_mode"] = asm["_AT_energy_loss_mode"];
var _AT_energy_straggling_MeV2_cm2_g = Module["_AT_energy_straggling_MeV2_cm2_g"] = asm["_AT_energy_straggling_MeV2_cm2_g"];
var _AT_energy_straggling_after_slab_E_MeV_u = Module["_AT_energy_straggling_after_slab_E_MeV_u"] = asm["_AT_energy_straggling_after_slab_E_MeV_u"];
var _AT_fluence_cm2_from_dose_Gy = Module["_AT_fluence_cm2_from_dose_Gy"] = asm["_AT_fluence_cm2_from_dose_Gy"];
var _AT_fluence_cm2_from_dose_Gy_single = Module["_AT_fluence_cm2_from_dose_Gy_single"] = asm["_AT_fluence_cm2_from_dose_Gy_single"];
var _AT_fluence_weighted_E_MeV_u = Module["_AT_fluence_weighted_E_MeV_u"] = asm["_AT_fluence_weighted_E_MeV_u"];
var _AT_fluence_weighted_LET_MeV_cm2_g = Module["_AT_fluence_weighted_LET_MeV_cm2_g"] = asm["_AT_fluence_weighted_LET_MeV_cm2_g"];
var _AT_gamma_ = Module["_AT_gamma_"] = asm["_AT_gamma_"];
var _AT_gamma_from_E = Module["_AT_gamma_from_E"] = asm["_AT_gamma_from_E"];
var _AT_gamma_from_E_single = Module["_AT_gamma_from_E_single"] = asm["_AT_gamma_from_E_single"];
var _AT_gamma_response = Module["_AT_gamma_response"] = asm["_AT_gamma_response"];
var _AT_get_DSB_distribution = Module["_AT_get_DSB_distribution"] = asm["_AT_get_DSB_distribution"];
var _AT_get_error_msg = Module["_AT_get_error_msg"] = asm["_AT_get_error_msg"];
var _AT_get_gamma_response = Module["_AT_get_gamma_response"] = asm["_AT_get_gamma_response"];
var _AT_get_gamma_response_for_average_dose = Module["_AT_get_gamma_response_for_average_dose"] = asm["_AT_get_gamma_response_for_average_dose"];
var _AT_get_interpolated_x_from_input_2d_table = Module["_AT_get_interpolated_x_from_input_2d_table"] = asm["_AT_get_interpolated_x_from_input_2d_table"];
var _AT_get_interpolated_y_from_input_2d_table = Module["_AT_get_interpolated_y_from_input_2d_table"] = asm["_AT_get_interpolated_y_from_input_2d_table"];
var _AT_get_interpolated_y_from_input_table = Module["_AT_get_interpolated_y_from_input_table"] = asm["_AT_get_interpolated_y_from_input_table"];
var _AT_get_interpolated_y_from_interval = Module["_AT_get_interpolated_y_from_interval"] = asm["_AT_get_interpolated_y_from_interval"];
var _AT_get_ion_efficiency_from_dose_distribution = Module["_AT_get_ion_efficiency_from_dose_distribution"] = asm["_AT_get_ion_efficiency_from_dose_distribution"];
var _AT_get_ion_efficiency_from_response_distribution = Module["_AT_get_ion_efficiency_from_response_distribution"] = asm["_AT_get_ion_efficiency_from_response_distribution"];
var _AT_get_ion_response_from_dose_distribution = Module["_AT_get_ion_response_from_dose_distribution"] = asm["_AT_get_ion_response_from_dose_distribution"];
var _AT_get_ion_response_from_response_distribution = Module["_AT_get_ion_response_from_response_distribution"] = asm["_AT_get_ion_response_from_response_distribution"];
var _AT_get_material_data = Module["_AT_get_material_data"] = asm["_AT_get_material_data"];
var _AT_get_materials_data = Module["_AT_get_materials_data"] = asm["_AT_get_materials_data"];
var _AT_get_response_distribution_from_dose_distribution = Module["_AT_get_response_distribution_from_dose_distribution"] = asm["_AT_get_response_distribution_from_dose_distribution"];
var _AT_gyroradius_m = Module["_AT_gyroradius_m"] = asm["_AT_gyroradius_m"];
var _AT_histoOld_bin_no = Module["_AT_histoOld_bin_no"] = asm["_AT_histoOld_bin_no"];
var _AT_histoOld_get_bin_width = Module["_AT_histoOld_get_bin_width"] = asm["_AT_histoOld_get_bin_width"];
var _AT_histoOld_get_bin_widths = Module["_AT_histoOld_get_bin_widths"] = asm["_AT_histoOld_get_bin_widths"];
var _AT_histoOld_log_bin_width = Module["_AT_histoOld_log_bin_width"] = asm["_AT_histoOld_log_bin_width"];
var _AT_histoOld_lower_bin_limit = Module["_AT_histoOld_lower_bin_limit"] = asm["_AT_histoOld_lower_bin_limit"];
var _AT_histoOld_upper_bin_limit = Module["_AT_histoOld_upper_bin_limit"] = asm["_AT_histoOld_upper_bin_limit"];
var _AT_histo_add_multi = Module["_AT_histo_add_multi"] = asm["_AT_histo_add_multi"];
var _AT_histo_add_single = Module["_AT_histo_add_single"] = asm["_AT_histo_add_single"];
var _AT_histo_bin_no = Module["_AT_histo_bin_no"] = asm["_AT_histo_bin_no"];
var _AT_histo_bin_width = Module["_AT_histo_bin_width"] = asm["_AT_histo_bin_width"];
var _AT_histo_bin_widths = Module["_AT_histo_bin_widths"] = asm["_AT_histo_bin_widths"];
var _AT_histo_left_limit = Module["_AT_histo_left_limit"] = asm["_AT_histo_left_limit"];
var _AT_histo_left_limits = Module["_AT_histo_left_limits"] = asm["_AT_histo_left_limits"];
var _AT_histo_linear_bin_no = Module["_AT_histo_linear_bin_no"] = asm["_AT_histo_linear_bin_no"];
var _AT_histo_linear_bin_width = Module["_AT_histo_linear_bin_width"] = asm["_AT_histo_linear_bin_width"];
var _AT_histo_linear_left_limit = Module["_AT_histo_linear_left_limit"] = asm["_AT_histo_linear_left_limit"];
var _AT_histo_linear_midpoint = Module["_AT_histo_linear_midpoint"] = asm["_AT_histo_linear_midpoint"];
var _AT_histo_linear_n_bins = Module["_AT_histo_linear_n_bins"] = asm["_AT_histo_linear_n_bins"];
var _AT_histo_linear_step = Module["_AT_histo_linear_step"] = asm["_AT_histo_linear_step"];
var _AT_histo_logarithmic_bin_no = Module["_AT_histo_logarithmic_bin_no"] = asm["_AT_histo_logarithmic_bin_no"];
var _AT_histo_logarithmic_bin_width = Module["_AT_histo_logarithmic_bin_width"] = asm["_AT_histo_logarithmic_bin_width"];
var _AT_histo_logarithmic_left_limit = Module["_AT_histo_logarithmic_left_limit"] = asm["_AT_histo_logarithmic_left_limit"];
var _AT_histo_logarithmic_midpoint = Module["_AT_histo_logarithmic_midpoint"] = asm["_AT_histo_logarithmic_midpoint"];
var _AT_histo_logarithmic_n_bins = Module["_AT_histo_logarithmic_n_bins"] = asm["_AT_histo_logarithmic_n_bins"];
var _AT_histo_logarithmic_step = Module["_AT_histo_logarithmic_step"] = asm["_AT_histo_logarithmic_step"];
var _AT_histo_midpoint = Module["_AT_histo_midpoint"] = asm["_AT_histo_midpoint"];
var _AT_histo_midpoints = Module["_AT_histo_midpoints"] = asm["_AT_histo_midpoints"];
var _AT_histo_n_bins = Module["_AT_histo_n_bins"] = asm["_AT_histo_n_bins"];
var _AT_histo_normalize = Module["_AT_histo_normalize"] = asm["_AT_histo_normalize"];
var _AT_histo_step = Module["_AT_histo_step"] = asm["_AT_histo_step"];
var _AT_histo_sum = Module["_AT_histo_sum"] = asm["_AT_histo_sum"];
var _AT_interparticleDistance_m = Module["_AT_interparticleDistance_m"] = asm["_AT_interparticleDistance_m"];
var _AT_inv_interparticleDistance_Gy = Module["_AT_inv_interparticleDistance_Gy"] = asm["_AT_inv_interparticleDistance_Gy"];
var _AT_inverse_RDD_Cucinotta_m = Module["_AT_inverse_RDD_Cucinotta_m"] = asm["_AT_inverse_RDD_Cucinotta_m"];
var _AT_inverse_RDD_Cucinotta_solver_function_Gy = Module["_AT_inverse_RDD_Cucinotta_solver_function_Gy"] = asm["_AT_inverse_RDD_Cucinotta_solver_function_Gy"];
var _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m = Module["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m"] = asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m"];
var _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy = Module["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy"] = asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy"];
var _AT_inverse_RDD_ExtendedTarget_KatzPoint_m = Module["_AT_inverse_RDD_ExtendedTarget_KatzPoint_m"] = asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_m"];
var _AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy = Module["_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy"] = asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy"];
var _AT_inverse_RDD_Geiss_m = Module["_AT_inverse_RDD_Geiss_m"] = asm["_AT_inverse_RDD_Geiss_m"];
var _AT_inverse_RDD_KatzPoint_LinearER_m = Module["_AT_inverse_RDD_KatzPoint_LinearER_m"] = asm["_AT_inverse_RDD_KatzPoint_LinearER_m"];
var _AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy = Module["_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy"] = asm["_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy"];
var _AT_inverse_RDD_KatzPoint_m = Module["_AT_inverse_RDD_KatzPoint_m"] = asm["_AT_inverse_RDD_KatzPoint_m"];
var _AT_inverse_RDD_KatzSite_m = Module["_AT_inverse_RDD_KatzSite_m"] = asm["_AT_inverse_RDD_KatzSite_m"];
var _AT_inverse_RDD_Test_m = Module["_AT_inverse_RDD_Test_m"] = asm["_AT_inverse_RDD_Test_m"];
var _AT_inverse_RadicalDiffusion_m = Module["_AT_inverse_RadicalDiffusion_m"] = asm["_AT_inverse_RadicalDiffusion_m"];
var _AT_kappa_multi = Module["_AT_kappa_multi"] = asm["_AT_kappa_multi"];
var _AT_kappa_single = Module["_AT_kappa_single"] = asm["_AT_kappa_single"];
var _AT_kinetic_variable_single = Module["_AT_kinetic_variable_single"] = asm["_AT_kinetic_variable_single"];
var _AT_lambda_Landau_FWHM = Module["_AT_lambda_Landau_FWHM"] = asm["_AT_lambda_Landau_FWHM"];
var _AT_lambda_Landau_FWHM_left = Module["_AT_lambda_Landau_FWHM_left"] = asm["_AT_lambda_Landau_FWHM_left"];
var _AT_lambda_Landau_FWHM_right = Module["_AT_lambda_Landau_FWHM_right"] = asm["_AT_lambda_Landau_FWHM_right"];
var _AT_lambda_Landau_Mean = Module["_AT_lambda_Landau_Mean"] = asm["_AT_lambda_Landau_Mean"];
var _AT_lambda_Landau_Mode = Module["_AT_lambda_Landau_Mode"] = asm["_AT_lambda_Landau_Mode"];
var _AT_lambda_Vavilov_FWHM = Module["_AT_lambda_Vavilov_FWHM"] = asm["_AT_lambda_Vavilov_FWHM"];
var _AT_lambda_Vavilov_FWHM_left = Module["_AT_lambda_Vavilov_FWHM_left"] = asm["_AT_lambda_Vavilov_FWHM_left"];
var _AT_lambda_Vavilov_FWHM_right = Module["_AT_lambda_Vavilov_FWHM_right"] = asm["_AT_lambda_Vavilov_FWHM_right"];
var _AT_lambda_Vavilov_Mean = Module["_AT_lambda_Vavilov_Mean"] = asm["_AT_lambda_Vavilov_Mean"];
var _AT_lambda_Vavilov_Mode = Module["_AT_lambda_Vavilov_Mode"] = asm["_AT_lambda_Vavilov_Mode"];
var _AT_lambda_Vavilov_Skewness = Module["_AT_lambda_Vavilov_Skewness"] = asm["_AT_lambda_Vavilov_Skewness"];
var _AT_lambda_Vavilov_Variance = Module["_AT_lambda_Vavilov_Variance"] = asm["_AT_lambda_Vavilov_Variance"];
var _AT_lambda_landau_from_energy_loss_multi = Module["_AT_lambda_landau_from_energy_loss_multi"] = asm["_AT_lambda_landau_from_energy_loss_multi"];
var _AT_lambda_landau_from_energy_loss_single = Module["_AT_lambda_landau_from_energy_loss_single"] = asm["_AT_lambda_landau_from_energy_loss_single"];
var _AT_lambda_max_multi = Module["_AT_lambda_max_multi"] = asm["_AT_lambda_max_multi"];
var _AT_lambda_max_single = Module["_AT_lambda_max_single"] = asm["_AT_lambda_max_single"];
var _AT_lambda_mean_multi = Module["_AT_lambda_mean_multi"] = asm["_AT_lambda_mean_multi"];
var _AT_lambda_mean_single = Module["_AT_lambda_mean_single"] = asm["_AT_lambda_mean_single"];
var _AT_lambda_vavilov_from_energy_loss_multi = Module["_AT_lambda_vavilov_from_energy_loss_multi"] = asm["_AT_lambda_vavilov_from_energy_loss_multi"];
var _AT_lambda_vavilov_from_energy_loss_single = Module["_AT_lambda_vavilov_from_energy_loss_single"] = asm["_AT_lambda_vavilov_from_energy_loss_single"];
var _AT_low_fluence_local_dose_distribution = Module["_AT_low_fluence_local_dose_distribution"] = asm["_AT_low_fluence_local_dose_distribution"];
var _AT_m_g_cm2_from_material_no = Module["_AT_m_g_cm2_from_material_no"] = asm["_AT_m_g_cm2_from_material_no"];
var _AT_mass_correction_terms = Module["_AT_mass_correction_terms"] = asm["_AT_mass_correction_terms"];
var _AT_mass_correction_terms_new = Module["_AT_mass_correction_terms_new"] = asm["_AT_mass_correction_terms_new"];
var _AT_material_index_from_material_number = Module["_AT_material_index_from_material_number"] = asm["_AT_material_index_from_material_number"];
var _AT_material_name_from_number = Module["_AT_material_name_from_number"] = asm["_AT_material_name_from_number"];
var _AT_material_number_from_name = Module["_AT_material_number_from_name"] = asm["_AT_material_number_from_name"];
var _AT_max_E_transfer_MeV = Module["_AT_max_E_transfer_MeV"] = asm["_AT_max_E_transfer_MeV"];
var _AT_max_E_transfer_MeV_new = Module["_AT_max_E_transfer_MeV_new"] = asm["_AT_max_E_transfer_MeV_new"];
var _AT_max_E_transfer_MeV_new_single = Module["_AT_max_E_transfer_MeV_new_single"] = asm["_AT_max_E_transfer_MeV_new_single"];
var _AT_max_E_transfer_MeV_single = Module["_AT_max_E_transfer_MeV_single"] = asm["_AT_max_E_transfer_MeV_single"];
var _AT_max_classic_E_transfer_MeV_new_single = Module["_AT_max_classic_E_transfer_MeV_new_single"] = asm["_AT_max_classic_E_transfer_MeV_new_single"];
var _AT_max_classic_E_transfer_MeV_single = Module["_AT_max_classic_E_transfer_MeV_single"] = asm["_AT_max_classic_E_transfer_MeV_single"];
var _AT_max_electron_range_m = Module["_AT_max_electron_range_m"] = asm["_AT_max_electron_range_m"];
var _AT_max_electron_ranges_m = Module["_AT_max_electron_ranges_m"] = asm["_AT_max_electron_ranges_m"];
var _AT_max_relativistic_E_transfer_MeV_new_single = Module["_AT_max_relativistic_E_transfer_MeV_new_single"] = asm["_AT_max_relativistic_E_transfer_MeV_new_single"];
var _AT_max_relativistic_E_transfer_MeV_single = Module["_AT_max_relativistic_E_transfer_MeV_single"] = asm["_AT_max_relativistic_E_transfer_MeV_single"];
var _AT_mean_energy_loss_keV = Module["_AT_mean_energy_loss_keV"] = asm["_AT_mean_energy_loss_keV"];
var _AT_mean_excitation_energy_eV_from_Z = Module["_AT_mean_excitation_energy_eV_from_Z"] = asm["_AT_mean_excitation_energy_eV_from_Z"];
var _AT_mean_excitation_energy_eV_from_Z_single = Module["_AT_mean_excitation_energy_eV_from_Z_single"] = asm["_AT_mean_excitation_energy_eV_from_Z_single"];
var _AT_mean_number_of_tracks_contrib = Module["_AT_mean_number_of_tracks_contrib"] = asm["_AT_mean_number_of_tracks_contrib"];
var _AT_momentum_MeV_c_u_from_E_MeV_u = Module["_AT_momentum_MeV_c_u_from_E_MeV_u"] = asm["_AT_momentum_MeV_c_u_from_E_MeV_u"];
var _AT_momentum_from_E_MeV_c_u_single = Module["_AT_momentum_from_E_MeV_c_u_single"] = asm["_AT_momentum_from_E_MeV_c_u_single"];
var _AT_n_bins_RadicalDiffusion = Module["_AT_n_bins_RadicalDiffusion"] = asm["_AT_n_bins_RadicalDiffusion"];
var _AT_n_bins_for_DSB_distribution = Module["_AT_n_bins_for_DSB_distribution"] = asm["_AT_n_bins_for_DSB_distribution"];
var _AT_n_bins_for_low_fluence_local_dose_distribution = Module["_AT_n_bins_for_low_fluence_local_dose_distribution"] = asm["_AT_n_bins_for_low_fluence_local_dose_distribution"];
var _AT_n_bins_for_single_impact_local_dose_distrib = Module["_AT_n_bins_for_single_impact_local_dose_distrib"] = asm["_AT_n_bins_for_single_impact_local_dose_distrib"];
var _AT_normalize = Module["_AT_normalize"] = asm["_AT_normalize"];
var _AT_nuclear_spin_from_Z_and_A = Module["_AT_nuclear_spin_from_Z_and_A"] = asm["_AT_nuclear_spin_from_Z_and_A"];
var _AT_nuclear_spin_from_particle_no_multi = Module["_AT_nuclear_spin_from_particle_no_multi"] = asm["_AT_nuclear_spin_from_particle_no_multi"];
var _AT_nuclear_spin_from_particle_no_single = Module["_AT_nuclear_spin_from_particle_no_single"] = asm["_AT_nuclear_spin_from_particle_no_single"];
var _AT_p_MeV_from_material_no = Module["_AT_p_MeV_from_material_no"] = asm["_AT_p_MeV_from_material_no"];
var _AT_particle_name_from_particle_no = Module["_AT_particle_name_from_particle_no"] = asm["_AT_particle_name_from_particle_no"];
var _AT_particle_name_from_particle_no_single = Module["_AT_particle_name_from_particle_no_single"] = asm["_AT_particle_name_from_particle_no_single"];
var _AT_particle_no_from_Z_and_A = Module["_AT_particle_no_from_Z_and_A"] = asm["_AT_particle_no_from_Z_and_A"];
var _AT_particle_no_from_Z_and_A_single = Module["_AT_particle_no_from_Z_and_A_single"] = asm["_AT_particle_no_from_Z_and_A_single"];
var _AT_particle_no_from_particle_name = Module["_AT_particle_no_from_particle_name"] = asm["_AT_particle_no_from_particle_name"];
var _AT_particle_no_from_particle_name_single = Module["_AT_particle_no_from_particle_name_single"] = asm["_AT_particle_no_from_particle_name_single"];
var _AT_phase_from_material_no = Module["_AT_phase_from_material_no"] = asm["_AT_phase_from_material_no"];
var _AT_plasma_energy_J_from_material_no = Module["_AT_plasma_energy_J_from_material_no"] = asm["_AT_plasma_energy_J_from_material_no"];
var _AT_plasma_energy_J_single = Module["_AT_plasma_energy_J_single"] = asm["_AT_plasma_energy_J_single"];
var _AT_r_RDD_m = Module["_AT_r_RDD_m"] = asm["_AT_r_RDD_m"];
var _AT_r_max_RadicalDiffusion_m = Module["_AT_r_max_RadicalDiffusion_m"] = asm["_AT_r_max_RadicalDiffusion_m"];
var _AT_r_min_RadicalDiffusion_m = Module["_AT_r_min_RadicalDiffusion_m"] = asm["_AT_r_min_RadicalDiffusion_m"];
var _AT_range_straggling_convolution = Module["_AT_range_straggling_convolution"] = asm["_AT_range_straggling_convolution"];
var _AT_reduced_target_thickness = Module["_AT_reduced_target_thickness"] = asm["_AT_reduced_target_thickness"];
var _AT_reduced_target_thickness_single = Module["_AT_reduced_target_thickness_single"] = asm["_AT_reduced_target_thickness_single"];
var _AT_run_CPPSC_method = Module["_AT_run_CPPSC_method"] = asm["_AT_run_CPPSC_method"];
var _AT_run_CPPSS_method = Module["_AT_run_CPPSS_method"] = asm["_AT_run_CPPSS_method"];
var _AT_run_GSM_method = Module["_AT_run_GSM_method"] = asm["_AT_run_GSM_method"];
var _AT_run_IGK_method = Module["_AT_run_IGK_method"] = asm["_AT_run_IGK_method"];
var _AT_sI_int = Module["_AT_sI_int"] = asm["_AT_sI_int"];
var _AT_scattering_angle_distribution = Module["_AT_scattering_angle_distribution"] = asm["_AT_scattering_angle_distribution"];
var _AT_scattering_angle_distribution_single = Module["_AT_scattering_angle_distribution_single"] = asm["_AT_scattering_angle_distribution_single"];
var _AT_screening_angle = Module["_AT_screening_angle"] = asm["_AT_screening_angle"];
var _AT_screening_angle_single = Module["_AT_screening_angle_single"] = asm["_AT_screening_angle_single"];
var _AT_set_user_material = Module["_AT_set_user_material"] = asm["_AT_set_user_material"];
var _AT_set_user_material_from_composition = Module["_AT_set_user_material_from_composition"] = asm["_AT_set_user_material_from_composition"];
var _AT_single_impact_dose_Gy = Module["_AT_single_impact_dose_Gy"] = asm["_AT_single_impact_dose_Gy"];
var _AT_single_impact_dose_Gy_single = Module["_AT_single_impact_dose_Gy_single"] = asm["_AT_single_impact_dose_Gy_single"];
var _AT_single_impact_fluence_cm2 = Module["_AT_single_impact_fluence_cm2"] = asm["_AT_single_impact_fluence_cm2"];
var _AT_single_impact_fluence_cm2_single = Module["_AT_single_impact_fluence_cm2_single"] = asm["_AT_single_impact_fluence_cm2_single"];
var _AT_single_impact_local_dose_distrib = Module["_AT_single_impact_local_dose_distrib"] = asm["_AT_single_impact_local_dose_distrib"];
var _AT_step_to_N2 = Module["_AT_step_to_N2"] = asm["_AT_step_to_N2"];
var _AT_stopping_power_ratio = Module["_AT_stopping_power_ratio"] = asm["_AT_stopping_power_ratio"];
var _AT_stopping_power_source_model_name_from_number = Module["_AT_stopping_power_source_model_name_from_number"] = asm["_AT_stopping_power_source_model_name_from_number"];
var _AT_stopping_power_source_model_number_from_name = Module["_AT_stopping_power_source_model_number_from_name"] = asm["_AT_stopping_power_source_model_number_from_name"];
var _AT_sum = Module["_AT_sum"] = asm["_AT_sum"];
var _AT_test_fun = Module["_AT_test_fun"] = asm["_AT_test_fun"];
var _AT_total_D_Gy = Module["_AT_total_D_Gy"] = asm["_AT_total_D_Gy"];
var _AT_total_fluence_cm2 = Module["_AT_total_fluence_cm2"] = asm["_AT_total_fluence_cm2"];
var _AT_translate_dose_into_DSB_distribution = Module["_AT_translate_dose_into_DSB_distribution"] = asm["_AT_translate_dose_into_DSB_distribution"];
var _AT_xi_keV = Module["_AT_xi_keV"] = asm["_AT_xi_keV"];
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ddi = Module["dynCall_ddi"] = asm["dynCall_ddi"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_viddiiii = Module["dynCall_viddiiii"] = asm["dynCall_viddiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



