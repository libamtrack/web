// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 1292640,
    STACKTOP = STACK_BASE,
    STACK_MAX = 6535520,
    DYNAMIC_BASE = 6535520,
    DYNAMICTOP_PTR = 1292448;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw what;
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}






// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 1292632;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 1292624
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        // Browser language detection #8751
        ENV['LANG'] = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        ENV['_'] = thisProgram;
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___lock() {}

  
    

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[44];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(70);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function (fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
  
      var struct_size = 280;
      var pos = 0;
      var off = FS.llseek(stream, 0, 1);
  
      var idx = Math.floor(off / struct_size);
  
      while (idx < stream.getdents.length && pos + struct_size <= count) {
        var id;
        var type;
        var name = stream.getdents[idx];
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        (tempI64 = [id>>>0,(tempDouble=id,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((dirp + pos)>>2)]=tempI64[0],HEAP32[(((dirp + pos)+(4))>>2)]=tempI64[1]);
        (tempI64 = [(idx + 1) * struct_size>>>0,(tempDouble=(idx + 1) * struct_size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((dirp + pos)+(8))>>2)]=tempI64[0],HEAP32[(((dirp + pos)+(12))>>2)]=tempI64[1]);
        HEAP16[(((dirp + pos)+(16))>>1)]=280;
        HEAP8[(((dirp + pos)+(18))>>0)]=type;
        stringToUTF8(name, dirp + pos + 19, 256);
        pos += struct_size;
        idx += 1;
      }
      FS.llseek(stream, idx * struct_size, 0);
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close() {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_fdstat_get(fd, pbuf) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      // All character devices are terminals (other things a Linux system would
      // assume is a character device, like the mouse, we have special APIs for).
      var type = stream.tty ? 2 :
                 FS.isDir(stream.mode) ? 3 :
                 FS.isLink(stream.mode) ? 7 :
                 4;
      HEAP8[((pbuf)>>0)]=type;
      // TODO HEAP16[(((pbuf)+(2))>>1)]=?;
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(8))>>2)]=tempI64[0],HEAP32[(((pbuf)+(12))>>2)]=tempI64[1]);
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(16))>>2)]=tempI64[0],HEAP32[(((pbuf)+(20))>>2)]=tempI64[1]);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_fdstat_get() {
  return _fd_fdstat_get.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read() {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek() {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write() {
  return _fd_write.apply(null, arguments)
  }

  function _abort() {
      abort();
    }

   

   

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

   

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

  
  function _llvm_log10_f32(x) {
      return Math.log(x) / Math.LN10; // TODO: Math.log10, when browser support is there
    }function _llvm_log10_f64(a0
  /*``*/) {
  return _llvm_log10_f32(a0);
  }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  var ___tm_current=1292480;
  
  
  var ___tm_timezone=(stringToUTF8("GMT", 1292528, 4), 1292528);
  
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      HEAP32[((__get_daylight())>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
FS.staticInit();;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array

function nullFunc_ddi(x) { abortFnPtrError(x, 'ddi'); }
function nullFunc_di(x) { abortFnPtrError(x, 'di'); }
function nullFunc_idii(x) { abortFnPtrError(x, 'idii'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidii(x) { abortFnPtrError(x, 'iidii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiidddddd(x) { abortFnPtrError(x, 'iiidddddd'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiidd(x) { abortFnPtrError(x, 'iiiidd'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_iiiiii(x) { abortFnPtrError(x, 'iiiiii'); }
function nullFunc_iiiiiii(x) { abortFnPtrError(x, 'iiiiiii'); }
function nullFunc_iiiiiiii(x) { abortFnPtrError(x, 'iiiiiiii'); }
function nullFunc_iiiiiiiii(x) { abortFnPtrError(x, 'iiiiiiiii'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_viddiiii(x) { abortFnPtrError(x, 'viddiiii'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viii(x) { abortFnPtrError(x, 'viii'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

var asmLibraryArg = { "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall195": ___syscall195, "___syscall197": ___syscall197, "___syscall220": ___syscall220, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_fdstat_get": ___wasi_fd_fdstat_get, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "_abort": _abort, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_exit": _exit, "_fd_close": _fd_close, "_fd_fdstat_get": _fd_fdstat_get, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_getenv": _getenv, "_llvm_log10_f32": _llvm_log10_f32, "_llvm_log10_f64": _llvm_log10_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_localtime": _localtime, "_localtime_r": _localtime_r, "_time": _time, "_tzset": _tzset, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "demangle": demangle, "demangleAll": demangleAll, "getTempRet0": getTempRet0, "jsStackTrace": jsStackTrace, "nullFunc_ddi": nullFunc_ddi, "nullFunc_di": nullFunc_di, "nullFunc_idii": nullFunc_idii, "nullFunc_ii": nullFunc_ii, "nullFunc_iidii": nullFunc_iidii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiidddddd": nullFunc_iiidddddd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiidd": nullFunc_iiiidd, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_viddiiii": nullFunc_viddiiii, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "setTempRet0": setTempRet0, "stackTrace": stackTrace, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_pow=global.Math.pow,
  Math_cos=global.Math.cos,
  Math_sin=global.Math.sin,
  Math_tan=global.Math.tan,
  Math_acos=global.Math.acos,
  Math_asin=global.Math.asin,
  Math_atan=global.Math.atan,
  Math_atan2=global.Math.atan2,
  Math_exp=global.Math.exp,
  Math_log=global.Math.log,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_ddi=env.nullFunc_ddi,
  nullFunc_di=env.nullFunc_di,
  nullFunc_idii=env.nullFunc_idii,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidii=env.nullFunc_iidii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiidddddd=env.nullFunc_iiidddddd,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiidd=env.nullFunc_iiiidd,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_iiiiii=env.nullFunc_iiiiii,
  nullFunc_iiiiiii=env.nullFunc_iiiiiii,
  nullFunc_iiiiiiii=env.nullFunc_iiiiiiii,
  nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_viddiiii=env.nullFunc_viddiiii,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiii=env.nullFunc_viiii,
  ___assert_fail=env.___assert_fail,
  ___buildEnvironment=env.___buildEnvironment,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall195=env.___syscall195,
  ___syscall197=env.___syscall197,
  ___syscall220=env.___syscall220,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___unlock=env.___unlock,
  ___wasi_fd_close=env.___wasi_fd_close,
  ___wasi_fd_fdstat_get=env.___wasi_fd_fdstat_get,
  ___wasi_fd_read=env.___wasi_fd_read,
  ___wasi_fd_seek=env.___wasi_fd_seek,
  ___wasi_fd_write=env.___wasi_fd_write,
  _abort=env._abort,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _exit=env._exit,
  _fd_close=env._fd_close,
  _fd_fdstat_get=env._fd_fdstat_get,
  _fd_read=env._fd_read,
  _fd_seek=env._fd_seek,
  _fd_write=env._fd_write,
  _getenv=env._getenv,
  _llvm_log10_f32=env._llvm_log10_f32,
  _llvm_log10_f64=env._llvm_log10_f64,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _localtime=env._localtime,
  _localtime_r=env._localtime_r,
  _time=env._time,
  _tzset=env._tzset,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  demangle=env.demangle,
  demangleAll=env.demangleAll,
  jsStackTrace=env.jsStackTrace,
  stackTrace=env.stackTrace,
  STACKTOP = 1292640,
  STACK_MAX = 6535520,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function _AT_test_fun($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $4 + $5;
 STACKTOP = sp;return (+$6);
}
function _AT_run_CPPSC_method($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = +$12;
 $13 = $13|0;
 $14 = $14|0;
 $15 = +$15;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 $24 = $24|0;
 $25 = $25|0;
 $26 = $26|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0;
 var $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0.0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $vararg_buffer49 = sp + 208|0;
 $vararg_buffer46 = sp + 200|0;
 $vararg_buffer43 = sp + 192|0;
 $vararg_buffer40 = sp + 184|0;
 $vararg_buffer37 = sp + 176|0;
 $vararg_buffer34 = sp + 168|0;
 $vararg_buffer31 = sp + 160|0;
 $vararg_buffer28 = sp + 152|0;
 $vararg_buffer25 = sp + 144|0;
 $vararg_buffer22 = sp + 136|0;
 $vararg_buffer19 = sp + 128|0;
 $vararg_buffer16 = sp + 120|0;
 $vararg_buffer11 = sp + 96|0;
 $vararg_buffer8 = sp + 88|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 56|0;
 $38 = sp + 372|0;
 $56 = sp + 324|0;
 $57 = sp + 280|0;
 $59 = sp + 272|0;
 $66 = sp + 244|0;
 $72 = sp + 32|0;
 $75 = sp + 24|0;
 $78 = sp + 8|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $4;
 $32 = $5;
 $33 = $6;
 $34 = $7;
 $35 = $8;
 $36 = $9;
 $37 = $10;
 HEAP32[$38>>2] = $11;
 $39 = $12;
 $80 = $13&1;
 $40 = $80;
 $81 = $14&1;
 $41 = $81;
 $42 = $15;
 $82 = $16&1;
 $43 = $82;
 $83 = $17&1;
 $44 = $83;
 $45 = $18;
 $46 = $19;
 $47 = $20;
 $48 = $21;
 $49 = $22;
 $50 = $23;
 $51 = $24;
 $52 = $25;
 $53 = $26;
 $55 = 0;
 $84 = $40;
 $85 = $84&1;
 L1: do {
  if ($85) {
   $86 = (_fopen(68028,68038)|0);
   $55 = $86;
   $87 = $55;
   $88 = ($87|0)==(0|0);
   if ($88) {
    STACKTOP = sp;return;
   }
   $89 = (_time((0|0))|0);
   HEAP32[$56>>2] = $89;
   $90 = (_localtime(($56|0))|0);
   dest=$57; src=$90; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $91 = $55;
   (_fprintf($91,68040,$vararg_buffer)|0);
   $92 = $55;
   $93 = ((($57)) + 20|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + 1900)|0;
   $96 = ((($57)) + 16|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 1)|0;
   $99 = ((($57)) + 12|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($57)) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($57)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = HEAP32[$57>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $95;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $98;
   $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr4>>2] = $100;
   $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr5>>2] = $102;
   $vararg_ptr6 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr6>>2] = $104;
   $vararg_ptr7 = ((($vararg_buffer1)) + 20|0);
   HEAP32[$vararg_ptr7>>2] = $105;
   (_fprintf($92,68067,$vararg_buffer1)|0);
   $106 = $55;
   $107 = $27;
   HEAP32[$vararg_buffer8>>2] = $107;
   (_fprintf($106,68097,$vararg_buffer8)|0);
   $58 = 0;
   while(1) {
    $108 = $58;
    $109 = $27;
    $110 = ($108|0)<($109|0);
    if (!($110)) {
     break L1;
    }
    $111 = $55;
    $112 = $28;
    $113 = $58;
    $114 = (($112) + ($113<<3)|0);
    $115 = +HEAPF64[$114>>3];
    $116 = $29;
    $117 = $58;
    $118 = (($116) + ($117<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $30;
    $121 = $58;
    $122 = (($120) + ($121<<3)|0);
    $123 = +HEAPF64[$122>>3];
    HEAPF64[$vararg_buffer11>>3] = $115;
    $vararg_ptr14 = ((($vararg_buffer11)) + 8|0);
    HEAP32[$vararg_ptr14>>2] = $119;
    $vararg_ptr15 = ((($vararg_buffer11)) + 16|0);
    HEAPF64[$vararg_ptr15>>3] = $123;
    (_fprintf($111,68167,$vararg_buffer11)|0);
    $124 = $58;
    $125 = (($124) + 1)|0;
    $58 = $125;
   }
  }
 } while(0);
 $126 = $45;
 HEAPF64[$126>>3] = 0.0;
 $127 = $46;
 HEAPF64[$127>>3] = 0.0;
 $128 = $47;
 HEAPF64[$128>>3] = 0.0;
 $129 = $48;
 HEAPF64[$129>>3] = 0.0;
 $130 = $49;
 HEAPF64[$130>>3] = 0.0;
 $131 = $50;
 HEAPF64[$131>>3] = 0.0;
 $132 = $51;
 HEAP32[$132>>2] = 0;
 $133 = $52;
 HEAPF64[$133>>3] = 0.0;
 $134 = $53;
 HEAPF64[$134>>3] = 0.0;
 $135 = $27;
 $136 = $28;
 $137 = $29;
 $138 = $31;
 $139 = $33;
 $140 = $34;
 $141 = $35;
 $142 = HEAP32[$38>>2]|0;
 $143 = $32;
 $144 = (_AT_n_bins_for_single_impact_local_dose_distrib($135,$136,$137,$138,$139,$140,$141,$142,$143)|0);
 HEAP32[$59>>2] = $144;
 $145 = $40;
 $146 = $145&1;
 if ($146) {
  $147 = $55;
  $148 = HEAP32[$59>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $148;
  (_fprintf($147,68186,$vararg_buffer16)|0);
 }
 $149 = $27;
 $150 = $149<<3;
 $151 = (_calloc($150,8)|0);
 $60 = $151;
 $152 = $27;
 $153 = $28;
 $154 = $29;
 $155 = $31;
 $156 = $33;
 $157 = $34;
 $158 = $35;
 $159 = $32;
 $160 = $60;
 _AT_RDD_f1_parameters_mixed_field($152,$153,$154,$155,$156,$157,$158,$159,$160);
 $161 = $40;
 $162 = $161&1;
 if ($162) {
  $163 = $55;
  $164 = $60;
  $165 = +HEAPF64[$164>>3];
  HEAPF64[$vararg_buffer19>>3] = $165;
  (_fprintf($163,68202,$vararg_buffer19)|0);
  $166 = $55;
  $167 = $60;
  $168 = ((($167)) + 8|0);
  $169 = +HEAPF64[$168>>3];
  HEAPF64[$vararg_buffer22>>3] = $169;
  (_fprintf($166,68239,$vararg_buffer22)|0);
  $170 = $55;
  $171 = $60;
  $172 = ((($171)) + 16|0);
  $173 = +HEAPF64[$172>>3];
  HEAPF64[$vararg_buffer25>>3] = $173;
  (_fprintf($170,68256,$vararg_buffer25)|0);
  $174 = $55;
  $175 = $60;
  $176 = ((($175)) + 24|0);
  $177 = +HEAPF64[$176>>3];
  HEAPF64[$vararg_buffer28>>3] = $177;
  (_fprintf($174,68286,$vararg_buffer28)|0);
  $178 = $55;
  $179 = $60;
  $180 = ((($179)) + 32|0);
  $181 = +HEAPF64[$180>>3];
  HEAPF64[$vararg_buffer31>>3] = $181;
  (_fprintf($178,68304,$vararg_buffer31)|0);
  $182 = $55;
  $183 = $60;
  $184 = ((($183)) + 40|0);
  $185 = +HEAPF64[$184>>3];
  HEAPF64[$vararg_buffer34>>3] = $185;
  (_fprintf($182,68322,$vararg_buffer34)|0);
  $186 = $55;
  $187 = $60;
  $188 = ((($187)) + 48|0);
  $189 = +HEAPF64[$188>>3];
  HEAPF64[$vararg_buffer37>>3] = $189;
  (_fprintf($186,68348,$vararg_buffer37)|0);
  $190 = $55;
  $191 = $60;
  $192 = ((($191)) + 56|0);
  $193 = +HEAPF64[$192>>3];
  HEAPF64[$vararg_buffer40>>3] = $193;
  (_fprintf($190,68383,$vararg_buffer40)|0);
 }
 $194 = HEAP32[$59>>2]|0;
 $195 = (_calloc($194,8)|0);
 $61 = $195;
 $196 = HEAP32[$59>>2]|0;
 $197 = (_calloc($196,8)|0);
 $62 = $197;
 $198 = HEAP32[$59>>2]|0;
 $199 = (_calloc($198,8)|0);
 $63 = $199;
 $200 = $27;
 $201 = $28;
 $202 = $29;
 $203 = $30;
 $204 = $31;
 $205 = $33;
 $206 = $34;
 $207 = $35;
 $208 = HEAP32[$38>>2]|0;
 $209 = HEAP32[$59>>2]|0;
 $210 = $60;
 $211 = $32;
 $212 = $61;
 $213 = $62;
 $214 = $63;
 _AT_single_impact_local_dose_distrib($200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214);
 $215 = $27;
 $216 = (_calloc($215,8)|0);
 $64 = $216;
 $217 = $30;
 $218 = +HEAPF64[$217>>3];
 $219 = $218 < 0.0;
 L16: do {
  if ($219) {
   $220 = $27;
   $221 = (_calloc($220,8)|0);
   $65 = $221;
   $54 = 0;
   while(1) {
    $222 = $54;
    $223 = $27;
    $224 = ($222|0)<($223|0);
    if (!($224)) {
     break;
    }
    $225 = $30;
    $226 = $54;
    $227 = (($225) + ($226<<3)|0);
    $228 = +HEAPF64[$227>>3];
    $229 = -1.0 * $228;
    $230 = $65;
    $231 = $54;
    $232 = (($230) + ($231<<3)|0);
    HEAPF64[$232>>3] = $229;
    $233 = $54;
    $234 = (($233) + 1)|0;
    $54 = $234;
   }
   $235 = $27;
   $236 = $28;
   $237 = $29;
   $238 = $65;
   $239 = $31;
   $240 = $32;
   $241 = $64;
   _AT_fluence_cm2_from_dose_Gy($235,$236,$237,$238,$239,$240,$241);
   $242 = $65;
   _free($242);
  } else {
   $54 = 0;
   while(1) {
    $243 = $54;
    $244 = $27;
    $245 = ($243|0)<($244|0);
    if (!($245)) {
     break L16;
    }
    $246 = $30;
    $247 = $54;
    $248 = (($246) + ($247<<3)|0);
    $249 = +HEAPF64[$248>>3];
    $250 = $64;
    $251 = $54;
    $252 = (($250) + ($251<<3)|0);
    HEAPF64[$252>>3] = $249;
    $253 = $54;
    $254 = (($253) + 1)|0;
    $54 = $254;
   }
  }
 } while(0);
 $255 = $27;
 $256 = $28;
 $257 = $29;
 $258 = $64;
 $259 = $31;
 $260 = $35;
 $261 = $32;
 $262 = (+_AT_mean_number_of_tracks_contrib($255,$256,$257,$258,$259,$260,$261));
 $263 = $49;
 HEAPF64[$263>>3] = $262;
 $264 = $64;
 _free($264);
 $265 = $40;
 $266 = $265&1;
 if ($266) {
  $267 = $55;
  $268 = $49;
  $269 = +HEAPF64[$268>>3];
  HEAPF64[$vararg_buffer43>>3] = $269;
  (_fprintf($267,68414,$vararg_buffer43)|0);
 }
 $270 = $49;
 $271 = +HEAPF64[$270>>3];
 $272 = $39;
 $273 = HEAP32[$38>>2]|0;
 $274 = HEAP32[$59>>2]|0;
 $275 = $61;
 $276 = $62;
 $277 = $63;
 $278 = $50;
 $279 = $51;
 _AT_n_bins_for_low_fluence_local_dose_distribution($271,$272,$273,$274,$275,$276,$277,$66,$278,$279);
 $280 = $40;
 $281 = $280&1;
 if ($281) {
  $282 = $55;
  $283 = $50;
  $284 = +HEAPF64[$283>>3];
  HEAPF64[$vararg_buffer46>>3] = $284;
  (_fprintf($282,68452,$vararg_buffer46)|0);
  $285 = $55;
  $286 = $51;
  $287 = HEAP32[$286>>2]|0;
  HEAP32[$vararg_buffer49>>2] = $287;
  (_fprintf($285,68491,$vararg_buffer49)|0);
 }
 $288 = HEAP32[$66>>2]|0;
 $289 = (_calloc($288,8)|0);
 $67 = $289;
 $290 = HEAP32[$66>>2]|0;
 $291 = (_calloc($290,8)|0);
 $68 = $291;
 $292 = HEAP32[$66>>2]|0;
 $293 = (_calloc($292,8)|0);
 $69 = $293;
 $294 = HEAP32[$66>>2]|0;
 $295 = (_calloc($294,8)|0);
 $70 = $295;
 $296 = HEAP32[$66>>2]|0;
 $297 = (_calloc($296,8)|0);
 $71 = $297;
 HEAPF64[$72>>3] = 0.0;
 $298 = HEAP32[$59>>2]|0;
 $299 = HEAP32[$38>>2]|0;
 $300 = $61;
 $301 = $62;
 $302 = $63;
 $303 = HEAP32[$66>>2]|0;
 $304 = $67;
 $305 = $68;
 $306 = $69;
 _AT_low_fluence_local_dose_distribution($298,$299,$300,$301,$302,$303,$304,$305,$306);
 $307 = $49;
 $308 = +HEAPF64[$307>>3];
 $309 = HEAP32[$66>>2]|0;
 $310 = $67;
 $311 = $68;
 $312 = $69;
 $313 = $70;
 $314 = $71;
 $315 = $46;
 $316 = $40;
 $317 = $316&1;
 $318 = $41;
 $319 = $318&1;
 $320 = $42;
 $321 = $43;
 $322 = $321&1;
 _AT_SuccessiveConvolutions($308,$309,$38,$59,$310,$311,$312,$72,$313,$314,$315,$317,$319,$320,$322);
 $323 = HEAP32[$59>>2]|0;
 $73 = $323;
 $324 = $73;
 $325 = (_calloc($324,8)|0);
 $74 = $325;
 $326 = $73;
 $327 = $67;
 $328 = $69;
 $329 = $36;
 $330 = $37;
 $331 = $44;
 $332 = $331&1;
 $333 = $74;
 _AT_get_response_distribution_from_dose_distribution($326,$327,$328,$329,$330,$332,$333);
 $334 = $73;
 $335 = $68;
 $336 = $69;
 $337 = $74;
 $338 = (+_AT_get_ion_response_from_response_distribution($334,$335,$336,$337));
 $339 = $47;
 HEAPF64[$339>>3] = $338;
 $340 = $73;
 $341 = $67;
 $342 = $68;
 $343 = $69;
 $344 = $36;
 $345 = $37;
 $346 = $44;
 $347 = $346&1;
 $348 = (+_AT_get_gamma_response_for_average_dose($340,$341,$342,$343,$344,$345,$347));
 $349 = $48;
 HEAPF64[$349>>3] = $348;
 $350 = $47;
 $351 = +HEAPF64[$350>>3];
 $352 = $48;
 $353 = +HEAPF64[$352>>3];
 $354 = $351 / $353;
 $355 = $45;
 HEAPF64[$355>>3] = $354;
 HEAPF64[$75>>3] = 0.0;
 $76 = 0.0;
 $77 = 1;
 HEAPF64[$78>>3] = 0.0;
 $356 = $36;
 $357 = $37;
 _AT_gamma_response(1,$78,$356,$357,0,$75);
 $358 = +HEAPF64[$75>>3];
 $359 = $358 > 0.0;
 if ($359) {
  $360 = +HEAPF64[$75>>3];
  $361 = (+Math_log((+$360)));
  $76 = $361;
 }
 $362 = +HEAPF64[$72>>3];
 $363 = $76;
 $364 = $362 * $363;
 $365 = $52;
 HEAPF64[$365>>3] = $364;
 $54 = 0;
 while(1) {
  $366 = $54;
  $367 = $73;
  $368 = ($366|0)<($367|0);
  if (!($368)) {
   break;
  }
  $79 = 0.0;
  $369 = $74;
  $370 = $54;
  $371 = (($369) + ($370<<3)|0);
  $372 = +HEAPF64[$371>>3];
  $373 = $372 > 0.0;
  if ($373) {
   $374 = $74;
   $375 = $54;
   $376 = (($374) + ($375<<3)|0);
   $377 = +HEAPF64[$376>>3];
   $378 = (+Math_log((+$377)));
   $79 = $378;
  }
  $379 = $69;
  $380 = $54;
  $381 = (($379) + ($380<<3)|0);
  $382 = +HEAPF64[$381>>3];
  $383 = $79;
  $384 = $382 * $383;
  $385 = $68;
  $386 = $54;
  $387 = (($385) + ($386<<3)|0);
  $388 = +HEAPF64[$387>>3];
  $389 = $384 * $388;
  $390 = $52;
  $391 = +HEAPF64[$390>>3];
  $392 = $391 + $389;
  HEAPF64[$390>>3] = $392;
  $393 = $54;
  $394 = (($393) + 1)|0;
  $54 = $394;
 }
 $395 = $52;
 $396 = +HEAPF64[$395>>3];
 $397 = (+Math_exp((+$396)));
 $398 = $52;
 HEAPF64[$398>>3] = $397;
 $399 = +HEAPF64[$72>>3];
 $400 = +HEAPF64[$75>>3];
 $401 = $399 * $400;
 $402 = $53;
 HEAPF64[$402>>3] = $401;
 $54 = 0;
 while(1) {
  $403 = $54;
  $404 = $73;
  $405 = ($403|0)<($404|0);
  if (!($405)) {
   break;
  }
  $406 = $69;
  $407 = $54;
  $408 = (($406) + ($407<<3)|0);
  $409 = +HEAPF64[$408>>3];
  $410 = $74;
  $411 = $54;
  $412 = (($410) + ($411<<3)|0);
  $413 = +HEAPF64[$412>>3];
  $414 = $409 * $413;
  $415 = $68;
  $416 = $54;
  $417 = (($415) + ($416<<3)|0);
  $418 = +HEAPF64[$417>>3];
  $419 = $414 * $418;
  $420 = $53;
  $421 = +HEAPF64[$420>>3];
  $422 = $421 + $419;
  HEAPF64[$420>>3] = $422;
  $423 = $54;
  $424 = (($423) + 1)|0;
  $54 = $424;
 }
 $425 = $60;
 _free($425);
 $426 = $61;
 _free($426);
 $427 = $62;
 _free($427);
 $428 = $63;
 _free($428);
 $429 = $67;
 _free($429);
 $430 = $68;
 _free($430);
 $431 = $69;
 _free($431);
 $432 = $70;
 _free($432);
 $433 = $71;
 _free($433);
 $434 = $74;
 _free($434);
 $435 = $40;
 $436 = $435&1;
 if (!($436)) {
  STACKTOP = sp;return;
 }
 $437 = $55;
 (_fclose($437)|0);
 STACKTOP = sp;return;
}
function _AT_run_CPPSS_method($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = +$13;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0;
 var $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0;
 var $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0;
 var $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0;
 var $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0, $403 = 0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $vararg_buffer54 = sp + 320|0;
 $vararg_buffer52 = sp + 312|0;
 $vararg_buffer50 = sp + 304|0;
 $vararg_buffer48 = sp + 296|0;
 $vararg_buffer42 = sp + 264|0;
 $vararg_buffer39 = sp + 256|0;
 $vararg_buffer33 = sp + 224|0;
 $vararg_buffer30 = sp + 216|0;
 $vararg_buffer27 = sp + 208|0;
 $vararg_buffer24 = sp + 200|0;
 $vararg_buffer21 = sp + 192|0;
 $vararg_buffer18 = sp + 184|0;
 $vararg_buffer16 = sp + 176|0;
 $vararg_buffer13 = sp + 168|0;
 $vararg_buffer11 = sp + 160|0;
 $vararg_buffer9 = sp + 152|0;
 $vararg_buffer7 = sp + 144|0;
 $vararg_buffer5 = sp + 136|0;
 $vararg_buffer3 = sp + 128|0;
 $vararg_buffer1 = sp + 120|0;
 $vararg_buffer = sp + 112|0;
 $46 = sp + 364|0;
 $47 = sp + 88|0;
 $48 = sp + 360|0;
 $56 = sp + 64|0;
 $58 = sp + 48|0;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 $20 = $3;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 (_printf(68516,$vararg_buffer)|0);
 (_printf(68516,$vararg_buffer1)|0);
 (_printf(68579,$vararg_buffer3)|0);
 (_printf(68614,$vararg_buffer5)|0);
 $34 = 0;
 $69 = $31;
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = (_fopen(68616,77823)|0);
  $34 = $71;
  $72 = $34;
  $73 = ($72|0)==(0|0);
  if ($73) {
   STACKTOP = sp;return;
  }
 }
 $74 = $17;
 $75 = $18;
 $76 = $19;
 $77 = $21;
 $78 = $23;
 $79 = $24;
 $80 = $25;
 $81 = $29;
 $82 = $22;
 $83 = (_AT_n_bins_for_single_impact_local_dose_distrib($74,$75,$76,$77,$78,$79,$80,$81,$82)|0);
 $35 = $83;
 $84 = $17;
 $85 = $84<<3;
 $86 = (_calloc($85,8)|0);
 $36 = $86;
 $87 = $17;
 $88 = $18;
 $89 = $19;
 $90 = $21;
 $91 = $23;
 $92 = $24;
 $93 = $25;
 $94 = $22;
 $95 = $36;
 _AT_RDD_f1_parameters_mixed_field($87,$88,$89,$90,$91,$92,$93,$94,$95);
 $96 = $35;
 $97 = (_calloc($96,8)|0);
 $37 = $97;
 $98 = $35;
 $99 = (_calloc($98,8)|0);
 $38 = $99;
 $100 = $35;
 $101 = (_calloc($100,8)|0);
 $39 = $101;
 $102 = $17;
 $103 = $18;
 $104 = $19;
 $105 = $20;
 $106 = $21;
 $107 = $23;
 $108 = $24;
 $109 = $25;
 $110 = $29;
 $111 = $35;
 $112 = $36;
 $113 = $22;
 $114 = $37;
 $115 = $38;
 $116 = $39;
 _AT_single_impact_local_dose_distrib($102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116);
 $117 = $17;
 $118 = (_calloc($117,8)|0);
 $40 = $118;
 $119 = $17;
 $120 = (_calloc($119,8)|0);
 $41 = $120;
 $121 = $20;
 $122 = +HEAPF64[$121>>3];
 $123 = $122 < 0.0;
 $42 = 0;
 if ($123) {
  while(1) {
   $124 = $42;
   $125 = $17;
   $126 = ($124|0)<($125|0);
   if (!($126)) {
    break;
   }
   $127 = $20;
   $128 = $42;
   $129 = (($127) + ($128<<3)|0);
   $130 = +HEAPF64[$129>>3];
   $131 = -1.0 * $130;
   $132 = $41;
   $133 = $42;
   $134 = (($132) + ($133<<3)|0);
   HEAPF64[$134>>3] = $131;
   $135 = $42;
   $136 = (($135) + 1)|0;
   $42 = $136;
  }
  $137 = $17;
  $138 = $18;
  $139 = $19;
  $140 = $41;
  $141 = $21;
  $142 = $22;
  $143 = $40;
  _AT_fluence_cm2_from_dose_Gy($137,$138,$139,$140,$141,$142,$143);
 } else {
  while(1) {
   $144 = $42;
   $145 = $17;
   $146 = ($144|0)<($145|0);
   if (!($146)) {
    break;
   }
   $147 = $20;
   $148 = $42;
   $149 = (($147) + ($148<<3)|0);
   $150 = +HEAPF64[$149>>3];
   $151 = $40;
   $152 = $42;
   $153 = (($151) + ($152<<3)|0);
   HEAPF64[$153>>3] = $150;
   $154 = $42;
   $155 = (($154) + 1)|0;
   $42 = $155;
  }
  $156 = $17;
  $157 = $18;
  $158 = $19;
  $159 = $40;
  $160 = $21;
  $161 = $22;
  $162 = $41;
  _AT_dose_Gy_from_fluence_cm2($156,$157,$158,$159,$160,$161,$162);
 }
 $163 = $17;
 $164 = (_calloc($163,8)|0);
 $43 = $164;
 $165 = $17;
 $166 = $40;
 $167 = $43;
 _AT_normalize($165,$166,$167);
 $168 = $17;
 $169 = $18;
 $170 = $19;
 $171 = $40;
 $172 = $21;
 $173 = $25;
 $174 = $22;
 $175 = (+_AT_mean_number_of_tracks_contrib($168,$169,$170,$171,$172,$173,$174));
 $44 = $175;
 $176 = $40;
 _free($176);
 $177 = $41;
 _free($177);
 $178 = $17;
 $179 = (_calloc($178,8)|0);
 $45 = $179;
 $180 = $43;
 $181 = +HEAPF64[$180>>3];
 $182 = $45;
 HEAPF64[$182>>3] = $181;
 $183 = $17;
 $184 = ($183|0)>(1);
 L17: do {
  if ($184) {
   $42 = 1;
   while(1) {
    $185 = $42;
    $186 = $17;
    $187 = ($185|0)<($186|0);
    if (!($187)) {
     break L17;
    }
    $188 = $45;
    $189 = $42;
    $190 = (($189) - 1)|0;
    $191 = (($188) + ($190<<3)|0);
    $192 = +HEAPF64[$191>>3];
    $193 = $43;
    $194 = $42;
    $195 = (($193) + ($194<<3)|0);
    $196 = +HEAPF64[$195>>3];
    $197 = $192 + $196;
    $198 = $45;
    $199 = $42;
    $200 = (($198) + ($199<<3)|0);
    $201 = +HEAPF64[$200>>3];
    $202 = $201 + $197;
    HEAPF64[$200>>3] = $202;
    $203 = $42;
    $204 = (($203) + 1)|0;
    $42 = $204;
   }
  }
 } while(0);
 $205 = $43;
 _free($205);
 $206 = $44;
 $207 = $30;
 $208 = $29;
 $209 = $35;
 $210 = $37;
 $211 = $38;
 $212 = $39;
 _AT_n_bins_for_low_fluence_local_dose_distribution($206,$207,$208,$209,$210,$211,$212,$46,$47,$48);
 $213 = HEAP32[$46>>2]|0;
 $214 = (_calloc($213,8)|0);
 $49 = $214;
 $215 = HEAP32[$46>>2]|0;
 $216 = (_calloc($215,8)|0);
 $50 = $216;
 $217 = HEAP32[$46>>2]|0;
 $218 = (_calloc($217,8)|0);
 $51 = $218;
 $52 = 0.0;
 $219 = $35;
 $220 = $29;
 $221 = $37;
 $222 = $38;
 $223 = $39;
 $224 = HEAP32[$46>>2]|0;
 $225 = $49;
 $226 = $50;
 $227 = $51;
 _AT_low_fluence_local_dose_distribution($219,$220,$221,$222,$223,$224,$225,$226,$227);
 $42 = 0;
 while(1) {
  $228 = $42;
  $229 = HEAP32[$46>>2]|0;
  $230 = ($228|0)<($229|0);
  if (!($230)) {
   break;
  }
  $231 = $51;
  $232 = $42;
  $233 = (($231) + ($232<<3)|0);
  HEAPF64[$233>>3] = 0.0;
  $234 = $42;
  $235 = (($234) + 1)|0;
  $42 = $235;
 }
 $236 = $32;
 $237 = ($236|0)!=(0);
 (_printf(68614,$vararg_buffer7)|0);
 if ($237) {
  $238 = $32;
  HEAP32[$vararg_buffer9>>2] = $238;
  (_printf(68626,$vararg_buffer9)|0);
 } else {
  (_printf(68683,$vararg_buffer11)|0);
 }
 $239 = (_gsl_rng_alloc(67680)|0);
 $53 = $239;
 $240 = $53;
 _gsl_rng_set($240,12345678);
 $59 = 1;
 $241 = $49;
 $242 = HEAP32[$46>>2]|0;
 $243 = (($242) - 1)|0;
 $244 = (($241) + ($243<<3)|0);
 $245 = +HEAPF64[$244>>3];
 $246 = (+_llvm_log10_f64((+$245)));
 $62 = $246;
 $247 = $49;
 $248 = +HEAPF64[$247>>3];
 $249 = (+_llvm_log10_f64((+$248)));
 $63 = $249;
 $250 = $62;
 $251 = $63;
 $252 = $250 - $251;
 $253 = HEAP32[$46>>2]|0;
 $254 = (+($253|0));
 $255 = $252 / $254;
 $64 = $255;
 $42 = 0;
 while(1) {
  $256 = $42;
  $257 = $28;
  $258 = ($256|0)<($257|0);
  if (!($258)) {
   break;
  }
  $259 = $53;
  $260 = $44;
  $261 = (_gsl_ran_poisson($259,$260)|0);
  $54 = $261;
  $55 = 0.0;
  $57 = 1.0;
  $65 = 0;
  while(1) {
   $262 = $65;
   $263 = $54;
   $264 = ($262|0)<($263|0);
   if (!($264)) {
    break;
   }
   $265 = $53;
   $266 = (+_gsl_rng_uniform($265));
   $60 = $266;
   $66 = 0;
   while(1) {
    $267 = $66;
    $268 = $17;
    $269 = ($267|0)<($268|0);
    if (!($269)) {
     break;
    }
    $270 = $45;
    $271 = $66;
    $272 = (($270) + ($271<<3)|0);
    $273 = +HEAPF64[$272>>3];
    $274 = $60;
    $275 = $273 >= $274;
    if ($275) {
     break;
    }
    $276 = $66;
    $277 = (($276) + 1)|0;
    $66 = $277;
   }
   $278 = $53;
   $279 = (+_gsl_rng_uniform($278));
   $60 = $279;
   $280 = $32;
   $281 = ($280|0)!=(0);
   if ($281) {
    $282 = $32;
    $283 = (+($282|0));
    $284 = $60;
    $285 = $32;
    $286 = (+($285|0));
    $287 = $286 - 1.0;
    $288 = (+Math_pow((+$284),(+$287)));
    $289 = $283 * $288;
    $290 = $57;
    $291 = $290 * $289;
    $57 = $291;
    $292 = $60;
    $293 = $32;
    $294 = (+($293|0));
    $295 = (+Math_pow((+$292),(+$294)));
    $60 = $295;
   }
   $296 = $36;
   $297 = $66;
   $298 = ($297*9)|0;
   $299 = (($298) + 2)|0;
   $300 = (($296) + ($299<<3)|0);
   $301 = +HEAPF64[$300>>3];
   $302 = $60;
   $303 = (+Math_sqrt((+$302)));
   $304 = $301 * $303;
   HEAPF64[$58>>3] = $304;
   $305 = $59;
   $306 = $18;
   $307 = $66;
   $308 = (($306) + ($307<<3)|0);
   $309 = +HEAPF64[$308>>3];
   $310 = $19;
   $311 = $66;
   $312 = (($310) + ($311<<2)|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = $21;
   $315 = $23;
   $316 = $24;
   $317 = $25;
   $318 = $22;
   (_AT_D_RDD_Gy($305,$58,$309,$313,$314,$315,$316,$317,$318,$56)|0);
   $319 = +HEAPF64[$56>>3];
   $320 = $55;
   $321 = $320 + $319;
   $55 = $321;
   $322 = $65;
   $323 = (($322) + 1)|0;
   $65 = $323;
  }
  $324 = $55;
  $325 = $324 == 0.0;
  if ($325) {
   $326 = $57;
   $327 = $52;
   $328 = $327 + $326;
   $52 = $328;
  } else {
   $329 = $55;
   $330 = (+_llvm_log10_f64((+$329)));
   $331 = $63;
   $332 = $330 - $331;
   $333 = $64;
   $334 = 3.0 * $333;
   $335 = $334 / 2.0;
   $336 = $332 + $335;
   $337 = $64;
   $338 = $336 / $337;
   $339 = (+Math_floor((+$338)));
   $340 = (~~(($339)));
   $61 = $340;
   $341 = $61;
   $342 = HEAP32[$46>>2]|0;
   $343 = ($341|0)>($342|0);
   if ($343) {
    $344 = HEAP32[$46>>2]|0;
    $61 = $344;
   }
   $345 = $57;
   $346 = $50;
   $347 = $61;
   $348 = (($347) - 1)|0;
   $349 = (($346) + ($348<<3)|0);
   $350 = +HEAPF64[$349>>3];
   $351 = $345 / $350;
   $352 = $51;
   $353 = $61;
   $354 = (($353) - 1)|0;
   $355 = (($352) + ($354<<3)|0);
   $356 = +HEAPF64[$355>>3];
   $357 = $356 + $351;
   HEAPF64[$355>>3] = $357;
  }
  $358 = $42;
  $359 = (($358|0) % 100)&-1;
  $360 = ($359|0)==(0);
  if ($360) {
   $361 = $42;
   HEAP32[$vararg_buffer13>>2] = $361;
   (_printf(68715,$vararg_buffer13)|0);
  }
  $362 = $42;
  $363 = (($362) + 1)|0;
  $42 = $363;
 }
 $67 = 0.0;
 $68 = 0.0;
 $42 = 0;
 while(1) {
  $364 = $42;
  $365 = HEAP32[$46>>2]|0;
  $366 = ($364|0)<($365|0);
  if (!($366)) {
   break;
  }
  $367 = $50;
  $368 = $42;
  $369 = (($367) + ($368<<3)|0);
  $370 = +HEAPF64[$369>>3];
  $371 = $51;
  $372 = $42;
  $373 = (($371) + ($372<<3)|0);
  $374 = +HEAPF64[$373>>3];
  $375 = $370 * $374;
  $376 = $67;
  $377 = $376 + $375;
  $67 = $377;
  $378 = $42;
  $379 = (($378) + 1)|0;
  $42 = $379;
 }
 $380 = $52;
 $381 = $67;
 $382 = $381 + $380;
 $67 = $382;
 $42 = 0;
 while(1) {
  $383 = $42;
  $384 = HEAP32[$46>>2]|0;
  $385 = ($383|0)<($384|0);
  if (!($385)) {
   break;
  }
  $386 = $67;
  $387 = $51;
  $388 = $42;
  $389 = (($387) + ($388<<3)|0);
  $390 = +HEAPF64[$389>>3];
  $391 = $390 / $386;
  HEAPF64[$389>>3] = $391;
  $392 = $49;
  $393 = $42;
  $394 = (($392) + ($393<<3)|0);
  $395 = +HEAPF64[$394>>3];
  $396 = $50;
  $397 = $42;
  $398 = (($396) + ($397<<3)|0);
  $399 = +HEAPF64[$398>>3];
  $400 = $395 * $399;
  $401 = $51;
  $402 = $42;
  $403 = (($401) + ($402<<3)|0);
  $404 = +HEAPF64[$403>>3];
  $405 = $400 * $404;
  $406 = $68;
  $407 = $406 + $405;
  $68 = $407;
  $408 = $42;
  $409 = (($408) + 1)|0;
  $42 = $409;
 }
 $410 = $31;
 $411 = ($410|0)!=(0);
 if ($411) {
  $412 = $34;
  (_fprintf($412,68730,$vararg_buffer16)|0);
  $413 = $34;
  $414 = $28;
  HEAP32[$vararg_buffer18>>2] = $414;
  (_fprintf($413,68737,$vararg_buffer18)|0);
  $415 = $34;
  $416 = $68;
  HEAPF64[$vararg_buffer21>>3] = $416;
  (_fprintf($415,68758,$vararg_buffer21)|0);
  $417 = $34;
  $418 = $67;
  HEAPF64[$vararg_buffer24>>3] = $418;
  (_fprintf($417,68781,$vararg_buffer24)|0);
  $419 = $34;
  $420 = HEAP32[$46>>2]|0;
  HEAP32[$vararg_buffer27>>2] = $420;
  (_fprintf($419,68804,$vararg_buffer27)|0);
  $421 = $34;
  $422 = $52;
  HEAPF64[$vararg_buffer30>>3] = $422;
  (_fprintf($421,68820,$vararg_buffer30)|0);
  $42 = 0;
  while(1) {
   $423 = $42;
   $424 = HEAP32[$46>>2]|0;
   $425 = ($423|0)<($424|0);
   $426 = $34;
   if (!($425)) {
    break;
   }
   $427 = $42;
   $428 = (($427) + 1)|0;
   $429 = $49;
   $430 = $42;
   $431 = (($429) + ($430<<3)|0);
   $432 = +HEAPF64[$431>>3];
   $433 = $50;
   $434 = $42;
   $435 = (($433) + ($434<<3)|0);
   $436 = +HEAPF64[$435>>3];
   $437 = $51;
   $438 = $42;
   $439 = (($437) + ($438<<3)|0);
   $440 = +HEAPF64[$439>>3];
   HEAP32[$vararg_buffer33>>2] = $428;
   $vararg_ptr36 = ((($vararg_buffer33)) + 8|0);
   HEAPF64[$vararg_ptr36>>3] = $432;
   $vararg_ptr37 = ((($vararg_buffer33)) + 16|0);
   HEAPF64[$vararg_ptr37>>3] = $436;
   $vararg_ptr38 = ((($vararg_buffer33)) + 24|0);
   HEAPF64[$vararg_ptr38>>3] = $440;
   (_fprintf($426,68831,$vararg_buffer33)|0);
   $441 = $42;
   $442 = (($441) + 1)|0;
   $42 = $442;
  }
  $443 = $35;
  HEAP32[$vararg_buffer39>>2] = $443;
  (_fprintf($426,68857,$vararg_buffer39)|0);
  $42 = 0;
  while(1) {
   $444 = $42;
   $445 = $35;
   $446 = ($444|0)<($445|0);
   $447 = $34;
   if (!($446)) {
    break;
   }
   $448 = $42;
   $449 = (($448) + 1)|0;
   $450 = $37;
   $451 = $42;
   $452 = (($450) + ($451<<3)|0);
   $453 = +HEAPF64[$452>>3];
   $454 = $38;
   $455 = $42;
   $456 = (($454) + ($455<<3)|0);
   $457 = +HEAPF64[$456>>3];
   $458 = $39;
   $459 = $42;
   $460 = (($458) + ($459<<3)|0);
   $461 = +HEAPF64[$460>>3];
   HEAP32[$vararg_buffer42>>2] = $449;
   $vararg_ptr45 = ((($vararg_buffer42)) + 8|0);
   HEAPF64[$vararg_ptr45>>3] = $453;
   $vararg_ptr46 = ((($vararg_buffer42)) + 16|0);
   HEAPF64[$vararg_ptr46>>3] = $457;
   $vararg_ptr47 = ((($vararg_buffer42)) + 24|0);
   HEAPF64[$vararg_ptr47>>3] = $461;
   (_fprintf($447,68831,$vararg_buffer42)|0);
   $462 = $42;
   $463 = (($462) + 1)|0;
   $42 = $463;
  }
  (_fprintf($447,68614,$vararg_buffer48)|0);
  $464 = $34;
  (_fprintf($464,68873,$vararg_buffer50)|0);
  $465 = $34;
  (_fprintf($465,68902,$vararg_buffer52)|0);
  $466 = $34;
  (_fprintf($466,68902,$vararg_buffer54)|0);
  $467 = $34;
  (_fclose($467)|0);
 }
 $468 = $45;
 _free($468);
 STACKTOP = sp;return;
}
function _AT_GSM_sample_particle_positions($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $21 = (_gsl_rng_alloc(67680)|0);
 $14 = $21;
 $22 = $14;
 $23 = $10;
 $24 = HEAP32[$23>>2]|0;
 _gsl_rng_set($22,$24);
 $25 = $7;
 $26 = $8;
 $27 = (+_AT_sum($25,$26));
 $15 = $27;
 $28 = $7;
 $29 = (_calloc($28,8)|0);
 $16 = $29;
 $30 = $7;
 $31 = $8;
 $32 = $16;
 _AT_normalize($30,$31,$32);
 $33 = $9;
 $34 = 100.0 * $33;
 $35 = (+_gsl_pow_2($34));
 $19 = $35;
 $18 = 0;
 while(1) {
  $36 = $18;
  $37 = $7;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $19;
  $40 = $15;
  $41 = $39 * $40;
  $42 = $16;
  $43 = $18;
  $44 = (($42) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $41 * $45;
  $17 = $46;
  $47 = $14;
  $48 = $17;
  $49 = (_gsl_ran_poisson($47,$48)|0);
  $50 = $11;
  $51 = $18;
  $52 = (($50) + ($51<<2)|0);
  HEAP32[$52>>2] = $49;
  $53 = $11;
  $54 = $18;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_calloc($56,8)|0);
  $58 = $12;
  $59 = $18;
  $60 = (($58) + ($59<<2)|0);
  HEAP32[$60>>2] = $57;
  $61 = $11;
  $62 = $18;
  $63 = (($61) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_calloc($64,8)|0);
  $66 = $13;
  $67 = $18;
  $68 = (($66) + ($67<<2)|0);
  HEAP32[$68>>2] = $65;
  $69 = $18;
  $70 = (($69) + 1)|0;
  $18 = $70;
 }
 $71 = $16;
 _free($71);
 $18 = 0;
 while(1) {
  $72 = $18;
  $73 = $7;
  $74 = ($72|0)<($73|0);
  if (!($74)) {
   break;
  }
  $20 = 0;
  while(1) {
   $75 = $20;
   $76 = $11;
   $77 = $18;
   $78 = (($76) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($75|0)<($79|0);
   if (!($80)) {
    break;
   }
   $81 = $14;
   $82 = (+_gsl_rng_uniform_pos($81));
   $83 = $9;
   $84 = $82 * $83;
   $85 = $12;
   $86 = $18;
   $87 = (($85) + ($86<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $20;
   $90 = (($88) + ($89<<3)|0);
   HEAPF64[$90>>3] = $84;
   $91 = $14;
   $92 = (+_gsl_rng_uniform_pos($91));
   $93 = $9;
   $94 = $92 * $93;
   $95 = $13;
   $96 = $18;
   $97 = (($95) + ($96<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $20;
   $100 = (($98) + ($99<<3)|0);
   HEAPF64[$100>>3] = $94;
   $101 = $20;
   $102 = (($101) + 1)|0;
   $20 = $102;
  }
  $103 = $18;
  $104 = (($103) + 1)|0;
  $18 = $104;
 }
 $105 = $14;
 $106 = (_gsl_rng_get($105)|0);
 $107 = $10;
 HEAP32[$107>>2] = $106;
 $108 = $14;
 _gsl_rng_free($108);
 STACKTOP = sp;return;
}
function _AT_GSM_dose_grid_from_particles_positions($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = +$12;
 $13 = $13|0;
 var $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0;
 var $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0;
 var $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0.0;
 var $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $47 = $14;
 $48 = (_calloc($47,8)|0);
 $32 = $48;
 $49 = $14;
 $50 = $15;
 $51 = $17;
 $52 = $20;
 $53 = $32;
 _AT_max_electron_ranges_m($49,$50,$51,$52,$53);
 $33 = 0.0;
 $28 = 0;
 while(1) {
  $54 = $28;
  $55 = $14;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  $57 = $33;
  $58 = $32;
  $59 = $28;
  $60 = (($58) + ($59<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $57 > $61;
  if ($62) {
   $63 = $33;
   $68 = $63;
  } else {
   $64 = $32;
   $65 = $28;
   $66 = (($64) + ($65<<3)|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $67;
  }
  $33 = $68;
  $69 = $28;
  $70 = (($69) + 1)|0;
  $28 = $70;
 }
 $71 = $14;
 $72 = (_calloc($71,4)|0);
 $34 = $72;
 $73 = $14;
 $74 = (_calloc($73,4)|0);
 $35 = $74;
 $75 = $14;
 $76 = (_calloc($75,4)|0);
 $36 = $76;
 $28 = 0;
 while(1) {
  $77 = $28;
  $78 = $14;
  $79 = ($77|0)<($78|0);
  if (!($79)) {
   break;
  }
  $80 = $35;
  $81 = $28;
  $82 = (($80) + ($81<<2)|0);
  HEAP32[$82>>2] = 0;
  $83 = $36;
  $84 = $28;
  $85 = (($83) + ($84<<2)|0);
  HEAP32[$85>>2] = 0;
  $86 = $28;
  $87 = (($86) + 1)|0;
  $28 = $87;
 }
 $29 = 0;
 while(1) {
  $88 = $29;
  $89 = $25;
  $90 = ($88|0)<($89|0);
  if (!($90)) {
   break;
  }
  $91 = $33;
  $92 = $29;
  $93 = (+($92|0));
  $94 = $93 + 0.5;
  $95 = $26;
  $96 = $94 * $95;
  $97 = $91 + $96;
  $37 = $97;
  $28 = 0;
  while(1) {
   $98 = $28;
   $99 = $25;
   $100 = ($98|0)<($99|0);
   if (!($100)) {
    break;
   }
   $101 = $33;
   $102 = $28;
   $103 = (+($102|0));
   $104 = $103 + 0.5;
   $105 = $26;
   $106 = $104 * $105;
   $107 = $101 + $106;
   $38 = $107;
   $30 = 0;
   while(1) {
    $108 = $30;
    $109 = $14;
    $110 = ($108|0)<($109|0);
    if (!($110)) {
     break;
    }
    $31 = 0;
    while(1) {
     $111 = $31;
     $112 = $22;
     $113 = $30;
     $114 = (($112) + ($113<<2)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($111|0)<($115|0);
     if (!($116)) {
      break;
     }
     $117 = $23;
     $118 = $30;
     $119 = (($117) + ($118<<2)|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $31;
     $122 = (($120) + ($121<<3)|0);
     $123 = +HEAPF64[$122>>3];
     $124 = $38;
     $125 = $123 - $124;
     $126 = (+_gsl_pow_2($125));
     $127 = $24;
     $128 = $30;
     $129 = (($127) + ($128<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $31;
     $132 = (($130) + ($131<<3)|0);
     $133 = +HEAPF64[$132>>3];
     $134 = $37;
     $135 = $133 - $134;
     $136 = (+_gsl_pow_2($135));
     $137 = $126 + $136;
     $138 = (+Math_sqrt((+$137)));
     $39 = $138;
     $139 = $39;
     $140 = $32;
     $141 = $30;
     $142 = (($140) + ($141<<3)|0);
     $143 = +HEAPF64[$142>>3];
     $144 = $139 <= $143;
     if ($144) {
      $145 = $35;
      $146 = $30;
      $147 = (($145) + ($146<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (($148) + 1)|0;
      HEAP32[$147>>2] = $149;
     }
     $150 = $31;
     $151 = (($150) + 1)|0;
     $31 = $151;
    }
    $152 = $30;
    $153 = (($152) + 1)|0;
    $30 = $153;
   }
   $154 = $28;
   $155 = (($154) + 1)|0;
   $28 = $155;
  }
  $156 = $29;
  $157 = (($156) + 1)|0;
  $29 = $157;
 }
 $30 = 0;
 while(1) {
  $158 = $30;
  $159 = $14;
  $160 = ($158|0)<($159|0);
  if (!($160)) {
   break;
  }
  $161 = $35;
  $162 = $30;
  $163 = (($161) + ($162<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (_calloc($164,8)|0);
  $166 = $34;
  $167 = $30;
  $168 = (($166) + ($167<<2)|0);
  HEAP32[$168>>2] = $165;
  $169 = $30;
  $170 = (($169) + 1)|0;
  $30 = $170;
 }
 $29 = 0;
 while(1) {
  $171 = $29;
  $172 = $25;
  $173 = ($171|0)<($172|0);
  if (!($173)) {
   break;
  }
  $174 = $33;
  $175 = $29;
  $176 = (+($175|0));
  $177 = $176 + 0.5;
  $178 = $26;
  $179 = $177 * $178;
  $180 = $174 + $179;
  $40 = $180;
  $28 = 0;
  while(1) {
   $181 = $28;
   $182 = $25;
   $183 = ($181|0)<($182|0);
   if (!($183)) {
    break;
   }
   $184 = $33;
   $185 = $28;
   $186 = (+($185|0));
   $187 = $186 + 0.5;
   $188 = $26;
   $189 = $187 * $188;
   $190 = $184 + $189;
   $41 = $190;
   $30 = 0;
   while(1) {
    $191 = $30;
    $192 = $14;
    $193 = ($191|0)<($192|0);
    if (!($193)) {
     break;
    }
    $31 = 0;
    while(1) {
     $194 = $31;
     $195 = $22;
     $196 = $30;
     $197 = (($195) + ($196<<2)|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ($194|0)<($198|0);
     if (!($199)) {
      break;
     }
     $200 = $23;
     $201 = $30;
     $202 = (($200) + ($201<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = $31;
     $205 = (($203) + ($204<<3)|0);
     $206 = +HEAPF64[$205>>3];
     $207 = $41;
     $208 = $206 - $207;
     $209 = (+_gsl_pow_2($208));
     $210 = $24;
     $211 = $30;
     $212 = (($210) + ($211<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $31;
     $215 = (($213) + ($214<<3)|0);
     $216 = +HEAPF64[$215>>3];
     $217 = $40;
     $218 = $216 - $217;
     $219 = (+_gsl_pow_2($218));
     $220 = $209 + $219;
     $221 = (+Math_sqrt((+$220)));
     $42 = $221;
     $222 = $42;
     $223 = $32;
     $224 = $30;
     $225 = (($223) + ($224<<3)|0);
     $226 = +HEAPF64[$225>>3];
     $227 = $222 <= $226;
     if ($227) {
      $228 = $42;
      $229 = $34;
      $230 = $30;
      $231 = (($229) + ($230<<2)|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = $36;
      $234 = $30;
      $235 = (($233) + ($234<<2)|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (($232) + ($236<<3)|0);
      HEAPF64[$237>>3] = $228;
      $238 = $36;
      $239 = $30;
      $240 = (($238) + ($239<<2)|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = (($241) + 1)|0;
      HEAP32[$240>>2] = $242;
     }
     $243 = $31;
     $244 = (($243) + 1)|0;
     $31 = $244;
    }
    $245 = $30;
    $246 = (($245) + 1)|0;
    $30 = $246;
   }
   $247 = $28;
   $248 = (($247) + 1)|0;
   $28 = $248;
  }
  $249 = $29;
  $250 = (($249) + 1)|0;
  $29 = $250;
 }
 $251 = $14;
 $252 = (_calloc($251,4)|0);
 $43 = $252;
 $28 = 0;
 while(1) {
  $253 = $28;
  $254 = $14;
  $255 = ($253|0)<($254|0);
  if (!($255)) {
   break;
  }
  $256 = $35;
  $257 = $28;
  $258 = (($256) + ($257<<2)|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (_calloc($259,8)|0);
  $261 = $43;
  $262 = $28;
  $263 = (($261) + ($262<<2)|0);
  HEAP32[$263>>2] = $260;
  $264 = $35;
  $265 = $28;
  $266 = (($264) + ($265<<2)|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = $34;
  $269 = $28;
  $270 = (($268) + ($269<<2)|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $15;
  $273 = $28;
  $274 = (($272) + ($273<<3)|0);
  $275 = +HEAPF64[$274>>3];
  $276 = $16;
  $277 = $28;
  $278 = (($276) + ($277<<2)|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $17;
  $281 = $18;
  $282 = $19;
  $283 = $20;
  $284 = $21;
  $285 = $43;
  $286 = $28;
  $287 = (($285) + ($286<<2)|0);
  $288 = HEAP32[$287>>2]|0;
  (_AT_D_RDD_Gy($267,$271,$275,$279,$280,$281,$282,$283,$284,$288)|0);
  $289 = $28;
  $290 = (($289) + 1)|0;
  $28 = $290;
 }
 $28 = 0;
 while(1) {
  $291 = $28;
  $292 = $14;
  $293 = ($291|0)<($292|0);
  $294 = $34;
  if (!($293)) {
   break;
  }
  $295 = $28;
  $296 = (($294) + ($295<<2)|0);
  $297 = HEAP32[$296>>2]|0;
  _free($297);
  $298 = $36;
  $299 = $28;
  $300 = (($298) + ($299<<2)|0);
  HEAP32[$300>>2] = 0;
  $301 = $28;
  $302 = (($301) + 1)|0;
  $28 = $302;
 }
 _free($294);
 $303 = $35;
 _free($303);
 $29 = 0;
 while(1) {
  $304 = $29;
  $305 = $25;
  $306 = ($304|0)<($305|0);
  if (!($306)) {
   break;
  }
  $307 = $33;
  $308 = $29;
  $309 = (+($308|0));
  $310 = $309 + 0.5;
  $311 = $26;
  $312 = $310 * $311;
  $313 = $307 + $312;
  $44 = $313;
  $28 = 0;
  while(1) {
   $314 = $28;
   $315 = $25;
   $316 = ($314|0)<($315|0);
   if (!($316)) {
    break;
   }
   $317 = $33;
   $318 = $28;
   $319 = (+($318|0));
   $320 = $319 + 0.5;
   $321 = $26;
   $322 = $320 * $321;
   $323 = $317 + $322;
   $45 = $323;
   $324 = $27;
   $325 = $28;
   $326 = (($324) + ($325<<2)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = $29;
   $329 = (($327) + ($328<<3)|0);
   HEAPF64[$329>>3] = 0.0;
   $30 = 0;
   while(1) {
    $330 = $30;
    $331 = $14;
    $332 = ($330|0)<($331|0);
    if (!($332)) {
     break;
    }
    $31 = 0;
    while(1) {
     $333 = $31;
     $334 = $22;
     $335 = $30;
     $336 = (($334) + ($335<<2)|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = ($333|0)<($337|0);
     if (!($338)) {
      break;
     }
     $339 = $23;
     $340 = $30;
     $341 = (($339) + ($340<<2)|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = $31;
     $344 = (($342) + ($343<<3)|0);
     $345 = +HEAPF64[$344>>3];
     $346 = $45;
     $347 = $345 - $346;
     $348 = (+_gsl_pow_2($347));
     $349 = $24;
     $350 = $30;
     $351 = (($349) + ($350<<2)|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = $31;
     $354 = (($352) + ($353<<3)|0);
     $355 = +HEAPF64[$354>>3];
     $356 = $44;
     $357 = $355 - $356;
     $358 = (+_gsl_pow_2($357));
     $359 = $348 + $358;
     $360 = (+Math_sqrt((+$359)));
     $46 = $360;
     $361 = $46;
     $362 = $32;
     $363 = $30;
     $364 = (($362) + ($363<<3)|0);
     $365 = +HEAPF64[$364>>3];
     $366 = $361 <= $365;
     if ($366) {
      $367 = $43;
      $368 = $30;
      $369 = (($367) + ($368<<2)|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = $36;
      $372 = $30;
      $373 = (($371) + ($372<<2)|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (($370) + ($374<<3)|0);
      $376 = +HEAPF64[$375>>3];
      $377 = $27;
      $378 = $28;
      $379 = (($377) + ($378<<2)|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = $29;
      $382 = (($380) + ($381<<3)|0);
      $383 = +HEAPF64[$382>>3];
      $384 = $383 + $376;
      HEAPF64[$382>>3] = $384;
      $385 = $36;
      $386 = $30;
      $387 = (($385) + ($386<<2)|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = (($388) + 1)|0;
      HEAP32[$387>>2] = $389;
     }
     $390 = $31;
     $391 = (($390) + 1)|0;
     $31 = $391;
    }
    $392 = $30;
    $393 = (($392) + 1)|0;
    $30 = $393;
   }
   $394 = $28;
   $395 = (($394) + 1)|0;
   $28 = $395;
  }
  $396 = $29;
  $397 = (($396) + 1)|0;
  $29 = $397;
 }
 $28 = 0;
 while(1) {
  $398 = $28;
  $399 = $14;
  $400 = ($398|0)<($399|0);
  $401 = $43;
  if (!($400)) {
   break;
  }
  $402 = $28;
  $403 = (($401) + ($402<<2)|0);
  $404 = HEAP32[$403>>2]|0;
  _free($404);
  $405 = $28;
  $406 = (($405) + 1)|0;
  $28 = $406;
 }
 _free($401);
 $407 = $36;
 _free($407);
 $408 = $32;
 _free($408);
 STACKTOP = sp;return;
}
function _AT_GSM_local_dose_distrib_from_dose_grid($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $15 = $12;
  $16 = $6;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $13 = 0;
  while(1) {
   $18 = $13;
   $19 = $6;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    break;
   }
   $21 = $7;
   $22 = $12;
   $23 = (($21) + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $13;
   $26 = (($24) + ($25<<3)|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $27 == 0.0;
   if ($28) {
    $29 = $10;
    $30 = +HEAPF64[$29>>3];
    $31 = $30 + 1.0;
    HEAPF64[$29>>3] = $31;
   } else {
    $32 = $8;
    $33 = $9;
    $34 = $7;
    $35 = $12;
    $36 = (($34) + ($35<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $13;
    $39 = (($37) + ($38<<3)|0);
    $40 = +HEAPF64[$39>>3];
    $41 = (_AT_histoOld_bin_no($32,$33,$40)|0);
    $14 = $41;
    $42 = $11;
    $43 = $14;
    $44 = (($42) + ($43<<3)|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $45 + 1.0;
    HEAPF64[$44>>3] = $46;
   }
   $47 = $13;
   $48 = (($47) + 1)|0;
   $13 = $48;
  }
  $49 = $12;
  $50 = (($49) + 1)|0;
  $12 = $50;
 }
 $12 = 0;
 while(1) {
  $51 = $12;
  $52 = $8;
  $53 = ($51|0)<($52|0);
  $54 = $6;
  $55 = (+($54|0));
  $56 = (+_gsl_pow_2($55));
  if (!($53)) {
   break;
  }
  $57 = $11;
  $58 = $12;
  $59 = (($57) + ($58<<3)|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $60 / $56;
  HEAPF64[$59>>3] = $61;
  $62 = $12;
  $63 = (($62) + 1)|0;
  $12 = $63;
 }
 $64 = $10;
 $65 = +HEAPF64[$64>>3];
 $66 = $65 / $56;
 HEAPF64[$64>>3] = $66;
 STACKTOP = sp;return;
}
function _AT_GSM_response_grid_from_dose_grid($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $13 = $4&1;
 $10 = $13;
 $11 = $5;
 $12 = 0;
 while(1) {
  $14 = $12;
  $15 = $6;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = $9;
  $19 = $12;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $7;
  $23 = $8;
  $24 = $10;
  $25 = $24&1;
  $26 = $11;
  $27 = $12;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  _AT_gamma_response($17,$21,$22,$23,$25,$29);
  $30 = $12;
  $31 = (($30) + 1)|0;
  $12 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_run_GSM_method($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = +$14;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 $24 = $24|0;
 $25 = $25|0;
 var $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0;
 var $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0;
 var $405 = 0.0, $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0;
 var $423 = 0.0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0.0;
 var $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0.0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0.0, $459 = 0;
 var $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0;
 var $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0.0, $494 = 0, $495 = 0;
 var $496 = 0.0, $497 = 0, $498 = 0.0, $499 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0, $505 = 0.0, $506 = 0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0.0, $513 = 0;
 var $514 = 0.0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0;
 var $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0.0, $549 = 0.0, $55 = 0;
 var $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0;
 var $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $65 = sp + 112|0;
 $70 = sp + 24|0;
 $72 = sp + 8|0;
 $26 = $0;
 $27 = $1;
 $28 = $2;
 $29 = $3;
 $30 = $4;
 $31 = $5;
 $32 = $6;
 $33 = $7;
 $34 = $8;
 $35 = $9;
 $36 = $10;
 $37 = $11;
 $74 = $12&1;
 $38 = $74;
 $39 = $13;
 $40 = $14;
 $75 = $15&1;
 $41 = $75;
 $42 = $16;
 $43 = $17;
 $44 = $18;
 $45 = $19;
 $46 = $20;
 $47 = $21;
 $48 = $22;
 $49 = $23;
 $50 = $24;
 $51 = $25;
 $76 = $42;
 HEAPF64[$76>>3] = 0.0;
 $77 = $43;
 HEAPF64[$77>>3] = 0.0;
 $78 = $44;
 HEAPF64[$78>>3] = 0.0;
 $79 = $45;
 HEAPF64[$79>>3] = 0.0;
 $80 = $46;
 HEAPF64[$80>>3] = 0.0;
 $81 = $47;
 HEAPF64[$81>>3] = 0.0;
 $82 = $48;
 HEAPF64[$82>>3] = 0.0;
 $83 = $49;
 HEAPF64[$83>>3] = 0.0;
 $84 = $50;
 HEAPF64[$84>>3] = 0.0;
 $85 = $51;
 HEAPF64[$85>>3] = 0.0;
 $86 = $26;
 $87 = (_calloc($86,8)|0);
 $55 = $87;
 $88 = $29;
 $89 = +HEAPF64[$88>>3];
 $90 = $89 < 0.0;
 L1: do {
  if ($90) {
   $91 = $26;
   $92 = (_calloc($91,8)|0);
   $56 = $92;
   $52 = 0;
   while(1) {
    $93 = $52;
    $94 = $26;
    $95 = ($93|0)<($94|0);
    if (!($95)) {
     break;
    }
    $96 = $29;
    $97 = $52;
    $98 = (($96) + ($97<<3)|0);
    $99 = +HEAPF64[$98>>3];
    $100 = -1.0 * $99;
    $101 = $56;
    $102 = $52;
    $103 = (($101) + ($102<<3)|0);
    HEAPF64[$103>>3] = $100;
    $104 = $52;
    $105 = (($104) + 1)|0;
    $52 = $105;
   }
   $106 = $26;
   $107 = $27;
   $108 = $28;
   $109 = $56;
   $110 = $30;
   $111 = $31;
   $112 = $55;
   _AT_fluence_cm2_from_dose_Gy($106,$107,$108,$109,$110,$111,$112);
   $113 = $56;
   _free($113);
  } else {
   $52 = 0;
   while(1) {
    $114 = $52;
    $115 = $26;
    $116 = ($114|0)<($115|0);
    if (!($116)) {
     break L1;
    }
    $117 = $29;
    $118 = $52;
    $119 = (($117) + ($118<<3)|0);
    $120 = +HEAPF64[$119>>3];
    $121 = $55;
    $122 = $52;
    $123 = (($121) + ($122<<3)|0);
    HEAPF64[$123>>3] = $120;
    $124 = $52;
    $125 = (($124) + 1)|0;
    $52 = $125;
   }
  }
 } while(0);
 $57 = 0.0;
 $52 = 0;
 while(1) {
  $126 = $52;
  $127 = $26;
  $128 = ($126|0)<($127|0);
  if (!($128)) {
   break;
  }
  $129 = $57;
  $130 = $27;
  $131 = $52;
  $132 = (($130) + ($131<<3)|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $30;
  $135 = $34;
  $136 = (+_AT_max_electron_range_m($133,$134,$135));
  $137 = $129 > $136;
  if ($137) {
   $138 = $57;
   $146 = $138;
  } else {
   $139 = $27;
   $140 = $52;
   $141 = (($139) + ($140<<3)|0);
   $142 = +HEAPF64[$141>>3];
   $143 = $30;
   $144 = $34;
   $145 = (+_AT_max_electron_range_m($142,$143,$144));
   $146 = $145;
  }
  $57 = $146;
  $147 = $52;
  $148 = (($147) + 1)|0;
  $52 = $148;
 }
 $149 = $40;
 $150 = $39;
 $151 = (+($150|0));
 $152 = $149 * $151;
 $153 = $57;
 $154 = 2.0099999999999998 * $153;
 $155 = $152 + $154;
 $58 = $155;
 $156 = $26;
 $157 = (_calloc($156,8)|0);
 $59 = $157;
 $158 = $26;
 $159 = (_calloc($158,4)|0);
 $60 = $159;
 $160 = $26;
 $161 = (_calloc($160,4)|0);
 $61 = $161;
 $162 = $39;
 $163 = (_calloc($162,4)|0);
 $62 = $163;
 $164 = $39;
 $165 = $39;
 $166 = Math_imul($164, $165)|0;
 $167 = (_calloc($166,8)|0);
 $168 = $62;
 HEAP32[$168>>2] = $167;
 $52 = 1;
 while(1) {
  $169 = $52;
  $170 = $39;
  $171 = ($169|0)<($170|0);
  if (!($171)) {
   break;
  }
  $172 = $62;
  $173 = HEAP32[$172>>2]|0;
  $174 = $52;
  $175 = $39;
  $176 = Math_imul($174, $175)|0;
  $177 = (($173) + ($176<<3)|0);
  $178 = $62;
  $179 = $52;
  $180 = (($178) + ($179<<2)|0);
  HEAP32[$180>>2] = $177;
  $181 = $52;
  $182 = (($181) + 1)|0;
  $52 = $182;
 }
 $183 = $39;
 $184 = (_calloc($183,4)|0);
 $63 = $184;
 $185 = $39;
 $186 = $39;
 $187 = Math_imul($185, $186)|0;
 $188 = (_calloc($187,8)|0);
 $189 = $63;
 HEAP32[$189>>2] = $188;
 $52 = 1;
 while(1) {
  $190 = $52;
  $191 = $39;
  $192 = ($190|0)<($191|0);
  if (!($192)) {
   break;
  }
  $193 = $63;
  $194 = HEAP32[$193>>2]|0;
  $195 = $52;
  $196 = $39;
  $197 = Math_imul($195, $196)|0;
  $198 = (($194) + ($197<<3)|0);
  $199 = $63;
  $200 = $52;
  $201 = (($199) + ($200<<2)|0);
  HEAP32[$201>>2] = $198;
  $202 = $52;
  $203 = (($202) + 1)|0;
  $52 = $203;
 }
 $204 = (_gsl_rng_alloc(67680)|0);
 $64 = $204;
 $205 = $64;
 _gsl_rng_set($205,137);
 $206 = $64;
 $207 = (_gsl_rng_get($206)|0);
 HEAP32[$65>>2] = $207;
 $54 = 0;
 while(1) {
  $208 = $54;
  $209 = $37;
  $210 = ($208|0)<($209|0);
  if (!($210)) {
   break;
  }
  $211 = $26;
  $212 = $55;
  $213 = $58;
  $214 = $59;
  $215 = $60;
  $216 = $61;
  _AT_GSM_sample_particle_positions($211,$212,$213,$65,$214,$215,$216);
  $66 = 0;
  $52 = 0;
  while(1) {
   $217 = $52;
   $218 = $26;
   $219 = ($217|0)<($218|0);
   if (!($219)) {
    break;
   }
   $220 = $59;
   $221 = $52;
   $222 = (($220) + ($221<<2)|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = $66;
   $225 = (($224) + ($223))|0;
   $66 = $225;
   $226 = $52;
   $227 = (($226) + 1)|0;
   $52 = $227;
  }
  $228 = $26;
  $229 = $27;
  $230 = $28;
  $231 = $30;
  $232 = $32;
  $233 = $33;
  $234 = $34;
  $235 = $31;
  $236 = $59;
  $237 = $60;
  $238 = $61;
  $239 = $39;
  $240 = $40;
  $241 = $62;
  _AT_GSM_dose_grid_from_particles_positions($228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241);
  $52 = 0;
  while(1) {
   $242 = $52;
   $243 = $26;
   $244 = ($242|0)<($243|0);
   if (!($244)) {
    break;
   }
   $245 = $60;
   $246 = $52;
   $247 = (($245) + ($246<<2)|0);
   $248 = HEAP32[$247>>2]|0;
   _free($248);
   $249 = $61;
   $250 = $52;
   $251 = (($249) + ($250<<2)|0);
   $252 = HEAP32[$251>>2]|0;
   _free($252);
   $253 = $52;
   $254 = (($253) + 1)|0;
   $52 = $254;
  }
  $255 = $54;
  $256 = ($255|0)==(0);
  if ($256) {
   $67 = 0;
   $257 = (_fopen(68964,77823)|0);
   $67 = $257;
   $258 = $67;
   $259 = ($258|0)==(0|0);
   if ($259) {
    label = 63;
    break;
   }
   $260 = $67;
   (_fprintf($260,68980,$vararg_buffer)|0);
   $53 = 0;
   while(1) {
    $261 = $53;
    $262 = $39;
    $263 = ($261|0)<($262|0);
    if (!($263)) {
     break;
    }
    $264 = $57;
    $265 = $53;
    $266 = (+($265|0));
    $267 = $266 + 0.5;
    $268 = $40;
    $269 = $267 * $268;
    $270 = $264 + $269;
    $68 = $270;
    $52 = 0;
    while(1) {
     $271 = $52;
     $272 = $39;
     $273 = ($271|0)<($272|0);
     if (!($273)) {
      break;
     }
     $274 = $57;
     $275 = $52;
     $276 = (+($275|0));
     $277 = $276 + 0.5;
     $278 = $40;
     $279 = $277 * $278;
     $280 = $274 + $279;
     $69 = $280;
     $281 = $67;
     $282 = $69;
     $283 = $68;
     $284 = $62;
     $285 = $52;
     $286 = (($284) + ($285<<2)|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = $53;
     $289 = (($287) + ($288<<3)|0);
     $290 = +HEAPF64[$289>>3];
     HEAPF64[$vararg_buffer6>>3] = $282;
     $vararg_ptr8 = ((($vararg_buffer6)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $283;
     $vararg_ptr9 = ((($vararg_buffer6)) + 16|0);
     HEAPF64[$vararg_ptr9>>3] = $290;
     (_fprintf($281,68994,$vararg_buffer6)|0);
     $291 = $52;
     $292 = (($291) + 1)|0;
     $52 = $292;
    }
    $293 = $53;
    $294 = (($293) + 1)|0;
    $53 = $294;
   }
   $295 = $67;
   (_fclose($295)|0);
  }
  $296 = $39;
  $297 = $35;
  $298 = $36;
  $299 = $62;
  $300 = $41;
  $301 = $300&1;
  $302 = $63;
  _AT_GSM_response_grid_from_dose_grid($296,$297,$298,$299,$301,$302);
  HEAPF64[$70>>3] = 0.0;
  $71 = 0.0;
  $52 = 0;
  while(1) {
   $303 = $52;
   $304 = $39;
   $305 = ($303|0)<($304|0);
   if (!($305)) {
    break;
   }
   $53 = 0;
   while(1) {
    $306 = $53;
    $307 = $39;
    $308 = ($306|0)<($307|0);
    if (!($308)) {
     break;
    }
    $309 = $62;
    $310 = $52;
    $311 = (($309) + ($310<<2)|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $53;
    $314 = (($312) + ($313<<3)|0);
    $315 = +HEAPF64[$314>>3];
    $316 = +HEAPF64[$70>>3];
    $317 = $316 + $315;
    HEAPF64[$70>>3] = $317;
    $318 = $63;
    $319 = $52;
    $320 = (($318) + ($319<<2)|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = $53;
    $323 = (($321) + ($322<<3)|0);
    $324 = +HEAPF64[$323>>3];
    $325 = $71;
    $326 = $325 + $324;
    $71 = $326;
    $327 = $53;
    $328 = (($327) + 1)|0;
    $53 = $328;
   }
   $329 = $52;
   $330 = (($329) + 1)|0;
   $52 = $330;
  }
  $331 = $39;
  $332 = (+($331|0));
  $333 = (+_gsl_pow_2($332));
  $334 = +HEAPF64[$70>>3];
  $335 = $334 / $333;
  HEAPF64[$70>>3] = $335;
  $336 = $39;
  $337 = (+($336|0));
  $338 = (+_gsl_pow_2($337));
  $339 = $71;
  $340 = $339 / $338;
  $71 = $340;
  $341 = $41;
  $342 = $341&1;
  if ($342) {
   $343 = $71;
   $344 = -1.0 * $343;
   $345 = (+Math_exp((+$344)));
   $71 = $345;
   $346 = $35;
   $347 = ($346|0)==(4);
   $348 = $35;
   $349 = ($348|0)==(2);
   $or$cond = $347 | $349;
   $350 = $35;
   $351 = ($350|0)==(3);
   $or$cond3 = $or$cond | $351;
   $352 = $35;
   $353 = ($352|0)==(6);
   $or$cond5 = $or$cond3 | $353;
   if ($or$cond5) {
    $354 = $71;
    $355 = 1.0 - $354;
    $71 = $355;
   }
  }
  HEAPF64[$72>>3] = 0.0;
  $356 = $35;
  $357 = $36;
  _AT_gamma_response(1,$70,$356,$357,0,$72);
  $73 = 0.0;
  $358 = +HEAPF64[$72>>3];
  $359 = $358 > 0.0;
  if ($359) {
   $360 = $71;
   $361 = +HEAPF64[$72>>3];
   $362 = $360 / $361;
   $73 = $362;
  }
  $363 = $73;
  $364 = $42;
  $365 = +HEAPF64[$364>>3];
  $366 = $365 + $363;
  HEAPF64[$364>>3] = $366;
  $367 = +HEAPF64[$70>>3];
  $368 = $43;
  $369 = +HEAPF64[$368>>3];
  $370 = $369 + $367;
  HEAPF64[$368>>3] = $370;
  $371 = $71;
  $372 = $44;
  $373 = +HEAPF64[$372>>3];
  $374 = $373 + $371;
  HEAPF64[$372>>3] = $374;
  $375 = +HEAPF64[$72>>3];
  $376 = $45;
  $377 = +HEAPF64[$376>>3];
  $378 = $377 + $375;
  HEAPF64[$376>>3] = $378;
  $379 = $66;
  $380 = (+($379|0));
  $381 = $46;
  $382 = +HEAPF64[$381>>3];
  $383 = $382 + $380;
  HEAPF64[$381>>3] = $383;
  $384 = $73;
  $385 = (+_gsl_pow_2($384));
  $386 = $47;
  $387 = +HEAPF64[$386>>3];
  $388 = $387 + $385;
  HEAPF64[$386>>3] = $388;
  $389 = +HEAPF64[$70>>3];
  $390 = (+_gsl_pow_2($389));
  $391 = $48;
  $392 = +HEAPF64[$391>>3];
  $393 = $392 + $390;
  HEAPF64[$391>>3] = $393;
  $394 = $71;
  $395 = (+_gsl_pow_2($394));
  $396 = $49;
  $397 = +HEAPF64[$396>>3];
  $398 = $397 + $395;
  HEAPF64[$396>>3] = $398;
  $399 = +HEAPF64[$72>>3];
  $400 = (+_gsl_pow_2($399));
  $401 = $50;
  $402 = +HEAPF64[$401>>3];
  $403 = $402 + $400;
  HEAPF64[$401>>3] = $403;
  $404 = $66;
  $405 = (+($404|0));
  $406 = (+_gsl_pow_2($405));
  $407 = $51;
  $408 = +HEAPF64[$407>>3];
  $409 = $408 + $406;
  HEAPF64[$407>>3] = $409;
  $410 = $54;
  $411 = (($410) + 1)|0;
  $54 = $411;
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return;
 }
 $412 = $37;
 $413 = (+($412|0));
 $414 = $42;
 $415 = +HEAPF64[$414>>3];
 $416 = $415 / $413;
 HEAPF64[$414>>3] = $416;
 $417 = $37;
 $418 = (+($417|0));
 $419 = $43;
 $420 = +HEAPF64[$419>>3];
 $421 = $420 / $418;
 HEAPF64[$419>>3] = $421;
 $422 = $37;
 $423 = (+($422|0));
 $424 = $44;
 $425 = +HEAPF64[$424>>3];
 $426 = $425 / $423;
 HEAPF64[$424>>3] = $426;
 $427 = $37;
 $428 = (+($427|0));
 $429 = $45;
 $430 = +HEAPF64[$429>>3];
 $431 = $430 / $428;
 HEAPF64[$429>>3] = $431;
 $432 = $37;
 $433 = (+($432|0));
 $434 = $46;
 $435 = +HEAPF64[$434>>3];
 $436 = $435 / $433;
 HEAPF64[$434>>3] = $436;
 $437 = $37;
 $438 = (+($437|0));
 $439 = $47;
 $440 = +HEAPF64[$439>>3];
 $441 = $440 / $438;
 HEAPF64[$439>>3] = $441;
 $442 = $37;
 $443 = (+($442|0));
 $444 = $48;
 $445 = +HEAPF64[$444>>3];
 $446 = $445 / $443;
 HEAPF64[$444>>3] = $446;
 $447 = $37;
 $448 = (+($447|0));
 $449 = $49;
 $450 = +HEAPF64[$449>>3];
 $451 = $450 / $448;
 HEAPF64[$449>>3] = $451;
 $452 = $37;
 $453 = (+($452|0));
 $454 = $50;
 $455 = +HEAPF64[$454>>3];
 $456 = $455 / $453;
 HEAPF64[$454>>3] = $456;
 $457 = $37;
 $458 = (+($457|0));
 $459 = $51;
 $460 = +HEAPF64[$459>>3];
 $461 = $460 / $458;
 HEAPF64[$459>>3] = $461;
 $462 = $42;
 $463 = +HEAPF64[$462>>3];
 $464 = (+_gsl_pow_2($463));
 $465 = $47;
 $466 = +HEAPF64[$465>>3];
 $467 = $466 - $464;
 HEAPF64[$465>>3] = $467;
 $468 = $43;
 $469 = +HEAPF64[$468>>3];
 $470 = (+_gsl_pow_2($469));
 $471 = $48;
 $472 = +HEAPF64[$471>>3];
 $473 = $472 - $470;
 HEAPF64[$471>>3] = $473;
 $474 = $44;
 $475 = +HEAPF64[$474>>3];
 $476 = (+_gsl_pow_2($475));
 $477 = $49;
 $478 = +HEAPF64[$477>>3];
 $479 = $478 - $476;
 HEAPF64[$477>>3] = $479;
 $480 = $45;
 $481 = +HEAPF64[$480>>3];
 $482 = (+_gsl_pow_2($481));
 $483 = $50;
 $484 = +HEAPF64[$483>>3];
 $485 = $484 - $482;
 HEAPF64[$483>>3] = $485;
 $486 = $46;
 $487 = +HEAPF64[$486>>3];
 $488 = (+_gsl_pow_2($487));
 $489 = $51;
 $490 = +HEAPF64[$489>>3];
 $491 = $490 - $488;
 HEAPF64[$489>>3] = $491;
 $492 = $47;
 $493 = +HEAPF64[$492>>3];
 $494 = 0.0 > $493;
 if ($494) {
  $498 = 0.0;
 } else {
  $495 = $47;
  $496 = +HEAPF64[$495>>3];
  $498 = $496;
 }
 $497 = $47;
 HEAPF64[$497>>3] = $498;
 $499 = $48;
 $500 = +HEAPF64[$499>>3];
 $501 = 0.0 > $500;
 if ($501) {
  $505 = 0.0;
 } else {
  $502 = $48;
  $503 = +HEAPF64[$502>>3];
  $505 = $503;
 }
 $504 = $48;
 HEAPF64[$504>>3] = $505;
 $506 = $49;
 $507 = +HEAPF64[$506>>3];
 $508 = 0.0 > $507;
 if ($508) {
  $512 = 0.0;
 } else {
  $509 = $49;
  $510 = +HEAPF64[$509>>3];
  $512 = $510;
 }
 $511 = $49;
 HEAPF64[$511>>3] = $512;
 $513 = $50;
 $514 = +HEAPF64[$513>>3];
 $515 = 0.0 > $514;
 if ($515) {
  $519 = 0.0;
 } else {
  $516 = $50;
  $517 = +HEAPF64[$516>>3];
  $519 = $517;
 }
 $518 = $50;
 HEAPF64[$518>>3] = $519;
 $520 = $51;
 $521 = +HEAPF64[$520>>3];
 $522 = 0.0 > $521;
 if ($522) {
  $526 = 0.0;
 } else {
  $523 = $51;
  $524 = +HEAPF64[$523>>3];
  $526 = $524;
 }
 $525 = $51;
 HEAPF64[$525>>3] = $526;
 $527 = $37;
 $528 = ($527|0)>(1);
 if ($528) {
  $529 = $47;
  $530 = +HEAPF64[$529>>3];
  $531 = $37;
  $532 = (+($531|0));
  $533 = $532 - 1.0;
  $534 = $530 / $533;
  $535 = (+Math_sqrt((+$534)));
  $536 = $47;
  HEAPF64[$536>>3] = $535;
  $537 = $48;
  $538 = +HEAPF64[$537>>3];
  $539 = $37;
  $540 = (+($539|0));
  $541 = $540 - 1.0;
  $542 = $538 / $541;
  $543 = (+Math_sqrt((+$542)));
  $544 = $48;
  HEAPF64[$544>>3] = $543;
  $545 = $49;
  $546 = +HEAPF64[$545>>3];
  $547 = $37;
  $548 = (+($547|0));
  $549 = $548 - 1.0;
  $550 = $546 / $549;
  $551 = (+Math_sqrt((+$550)));
  $552 = $49;
  HEAPF64[$552>>3] = $551;
  $553 = $50;
  $554 = +HEAPF64[$553>>3];
  $555 = $37;
  $556 = (+($555|0));
  $557 = $556 - 1.0;
  $558 = $554 / $557;
  $559 = (+Math_sqrt((+$558)));
  $560 = $50;
  HEAPF64[$560>>3] = $559;
  $561 = $51;
  $562 = +HEAPF64[$561>>3];
  $563 = $37;
  $564 = (+($563|0));
  $565 = $564 - 1.0;
  $566 = $562 / $565;
  $567 = (+Math_sqrt((+$566)));
  $568 = $51;
  HEAPF64[$568>>3] = $567;
 }
 $569 = $64;
 _gsl_rng_free($569);
 $570 = $62;
 $571 = HEAP32[$570>>2]|0;
 _free($571);
 $572 = $62;
 _free($572);
 $573 = $63;
 $574 = HEAP32[$573>>2]|0;
 _free($574);
 $575 = $63;
 _free($575);
 $576 = $55;
 _free($576);
 $577 = $59;
 _free($577);
 $578 = $60;
 _free($578);
 $579 = $61;
 _free($579);
 STACKTOP = sp;return;
}
function _AT_GSM_multiple_local_dose_distrib($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = +$10;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0;
 var $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0;
 var $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0;
 var $200 = 0, $201 = 0, $202 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $48 = sp;
 $52 = sp + 28|0;
 $22 = $0;
 $23 = $1;
 $24 = $2;
 $25 = $3;
 $26 = $4;
 $27 = $5;
 $28 = $6;
 $29 = $7;
 $30 = $8;
 $31 = $9;
 $32 = $10;
 $33 = $11;
 $34 = $12;
 $35 = $13;
 $36 = $14;
 $37 = $15;
 $38 = $16;
 $39 = $17;
 $40 = $18;
 $41 = $19;
 $42 = $20;
 $43 = $21;
 $54 = $35;
 $55 = $36;
 $56 = $37;
 _AT_histoOld_get_bin_widths($54,$55,$56);
 $57 = $38;
 HEAPF64[$57>>3] = 0.0;
 $58 = $39;
 HEAPF64[$58>>3] = 0.0;
 $44 = 0;
 while(1) {
  $59 = $44;
  $60 = $35;
  $61 = ($59|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $42;
  $63 = $44;
  $64 = (($62) + ($63<<3)|0);
  HEAPF64[$64>>3] = 0.0;
  $65 = $43;
  $66 = $44;
  $67 = (($65) + ($66<<3)|0);
  HEAPF64[$67>>3] = 0.0;
  $68 = $44;
  $69 = (($68) + 1)|0;
  $44 = $69;
 }
 $70 = $35;
 $71 = (_calloc($70,8)|0);
 $49 = $71;
 $72 = $35;
 $73 = (_calloc($72,8)|0);
 $50 = $73;
 $74 = (_gsl_rng_alloc(67680)|0);
 $51 = $74;
 $75 = $51;
 _gsl_rng_set($75,137);
 $76 = $51;
 $77 = (_gsl_rng_get($76)|0);
 HEAP32[$52>>2] = $77;
 $44 = 0;
 while(1) {
  $78 = $44;
  $79 = $34;
  $80 = ($78|0)<($79|0);
  if (!($80)) {
   break;
  }
  $47 = 0.0;
  $45 = 0;
  while(1) {
   $81 = $45;
   $82 = $35;
   $83 = ($81|0)<($82|0);
   if (!($83)) {
    break;
   }
   $84 = $49;
   $85 = $45;
   $86 = (($84) + ($85<<3)|0);
   HEAPF64[$86>>3] = 0.0;
   $87 = $45;
   $88 = (($87) + 1)|0;
   $45 = $88;
  }
  $45 = 0;
  while(1) {
   $89 = $45;
   $90 = $33;
   $91 = ($89|0)<($90|0);
   if (!($91)) {
    break;
   }
   HEAPF64[$48>>3] = 0.0;
   $46 = 0;
   while(1) {
    $92 = $46;
    $93 = $35;
    $94 = ($92|0)<($93|0);
    if (!($94)) {
     break;
    }
    $95 = $50;
    $96 = $46;
    $97 = (($95) + ($96<<3)|0);
    HEAPF64[$97>>3] = 0.0;
    $98 = $46;
    $99 = (($98) + 1)|0;
    $46 = $99;
   }
   $100 = $22;
   $101 = $23;
   $102 = $24;
   $103 = $25;
   $104 = $26;
   $105 = $27;
   $106 = $28;
   $107 = $29;
   $108 = $30;
   $109 = $31;
   $110 = $32;
   $111 = $35;
   $112 = $36;
   $113 = $50;
   _AT_GSM_local_dose_distrib($100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$52,$48,$113);
   $114 = +HEAPF64[$48>>3];
   $115 = $47;
   $116 = $115 + $114;
   $47 = $116;
   $46 = 0;
   while(1) {
    $117 = $46;
    $118 = $35;
    $119 = ($117|0)<($118|0);
    if (!($119)) {
     break;
    }
    $120 = $50;
    $121 = $46;
    $122 = (($120) + ($121<<3)|0);
    $123 = +HEAPF64[$122>>3];
    $124 = $49;
    $125 = $46;
    $126 = (($124) + ($125<<3)|0);
    $127 = +HEAPF64[$126>>3];
    $128 = $127 + $123;
    HEAPF64[$126>>3] = $128;
    $129 = $46;
    $130 = (($129) + 1)|0;
    $46 = $130;
   }
   $131 = $45;
   $132 = (($131) + 1)|0;
   $45 = $132;
  }
  $133 = $33;
  $134 = (+($133|0));
  $135 = $47;
  $136 = $135 / $134;
  $47 = $136;
  $45 = 0;
  while(1) {
   $137 = $45;
   $138 = $35;
   $139 = ($137|0)<($138|0);
   if (!($139)) {
    break;
   }
   $140 = $33;
   $141 = (+($140|0));
   $142 = $49;
   $143 = $45;
   $144 = (($142) + ($143<<3)|0);
   $145 = +HEAPF64[$144>>3];
   $146 = $145 / $141;
   HEAPF64[$144>>3] = $146;
   $147 = $45;
   $148 = (($147) + 1)|0;
   $45 = $148;
  }
  $53 = 0.0;
  $45 = 0;
  while(1) {
   $149 = $45;
   $150 = $35;
   $151 = ($149|0)<($150|0);
   if (!($151)) {
    break;
   }
   $152 = $36;
   $153 = $45;
   $154 = (($152) + ($153<<3)|0);
   $155 = +HEAPF64[$154>>3];
   $156 = $49;
   $157 = $45;
   $158 = (($156) + ($157<<3)|0);
   $159 = +HEAPF64[$158>>3];
   $160 = $155 * $159;
   $161 = $53;
   $162 = $161;
   $163 = $162 + $160;
   $164 = $163;
   $53 = $164;
   $165 = $45;
   $166 = (($165) + 1)|0;
   $45 = $166;
  }
  $167 = $53;
  $168 = $167;
  $169 = $38;
  $170 = +HEAPF64[$169>>3];
  $171 = $170 + $168;
  HEAPF64[$169>>3] = $171;
  $172 = $53;
  $173 = $53;
  $174 = $172 * $173;
  $175 = $174;
  $176 = $39;
  $177 = +HEAPF64[$176>>3];
  $178 = $177 + $175;
  HEAPF64[$176>>3] = $178;
  $179 = $44;
  $180 = (($179) + 1)|0;
  $44 = $180;
 }
 $181 = $34;
 $182 = (+($181|0));
 $183 = $38;
 $184 = +HEAPF64[$183>>3];
 $185 = $184 / $182;
 HEAPF64[$183>>3] = $185;
 $186 = $34;
 $187 = ($186|0)>(1);
 $188 = $39;
 if ($187) {
  $189 = +HEAPF64[$188>>3];
  $190 = $34;
  $191 = (+($190|0));
  $192 = $189 / $191;
  $193 = $38;
  $194 = +HEAPF64[$193>>3];
  $195 = $38;
  $196 = +HEAPF64[$195>>3];
  $197 = $194 * $196;
  $198 = $192 - $197;
  $199 = (+Math_sqrt((+$198)));
  $200 = $39;
  HEAPF64[$200>>3] = $199;
  $201 = $49;
  _free($201);
  $202 = $50;
  _free($202);
  STACKTOP = sp;return;
 } else {
  HEAPF64[$188>>3] = 0.0;
  $201 = $49;
  _free($201);
  $202 = $50;
  _free($202);
  STACKTOP = sp;return;
 }
}
function _AT_GSM_local_dose_distrib($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = +$10;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0;
 var $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $31 = $15;
 $33 = 0.0;
 $32 = 0;
 while(1) {
  $39 = $32;
  $40 = $16;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $33;
  $43 = $17;
  $44 = $32;
  $45 = (($43) + ($44<<3)|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $20;
  $48 = $23;
  $49 = (+_AT_max_electron_range_m($46,$47,$48));
  $50 = $42 > $49;
  if ($50) {
   $51 = $33;
   $59 = $51;
  } else {
   $52 = $17;
   $53 = $32;
   $54 = (($52) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $20;
   $57 = $23;
   $58 = (+_AT_max_electron_range_m($55,$56,$57));
   $59 = $58;
  }
  $33 = $59;
  $60 = $32;
  $61 = (($60) + 1)|0;
  $32 = $61;
 }
 $62 = $26;
 $63 = $25;
 $64 = (+($63|0));
 $65 = $62 * $64;
 $66 = $33;
 $67 = 2.0099999999999998 * $66;
 $68 = $65 + $67;
 $34 = $68;
 $69 = $16;
 $70 = (_calloc($69,8)|0);
 $35 = $70;
 $71 = $16;
 $72 = (_calloc($71,4)|0);
 $36 = $72;
 $73 = $16;
 $74 = (_calloc($73,4)|0);
 $37 = $74;
 $75 = $25;
 $76 = (_calloc($75,4)|0);
 $38 = $76;
 $77 = $25;
 $78 = $25;
 $79 = Math_imul($77, $78)|0;
 $80 = (_calloc($79,8)|0);
 $81 = $38;
 HEAP32[$81>>2] = $80;
 $32 = 1;
 while(1) {
  $82 = $32;
  $83 = $25;
  $84 = ($82|0)<($83|0);
  if (!($84)) {
   break;
  }
  $85 = $38;
  $86 = HEAP32[$85>>2]|0;
  $87 = $32;
  $88 = $25;
  $89 = Math_imul($87, $88)|0;
  $90 = (($86) + ($89<<3)|0);
  $91 = $38;
  $92 = $32;
  $93 = (($91) + ($92<<2)|0);
  HEAP32[$93>>2] = $90;
  $94 = $32;
  $95 = (($94) + 1)|0;
  $32 = $95;
 }
 $96 = $16;
 $97 = $18;
 $98 = $34;
 $99 = $29;
 $100 = $35;
 $101 = $36;
 $102 = $37;
 _AT_GSM_sample_particle_positions($96,$97,$98,$99,$100,$101,$102);
 $103 = $16;
 $104 = $17;
 $105 = $19;
 $106 = $20;
 $107 = $21;
 $108 = $22;
 $109 = $23;
 $110 = $24;
 $111 = $35;
 $112 = $36;
 $113 = $37;
 $114 = $25;
 $115 = $26;
 $116 = $38;
 _AT_GSM_dose_grid_from_particles_positions($103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116);
 $117 = $25;
 $118 = $38;
 $119 = $27;
 $120 = $28;
 $121 = $30;
 $122 = $31;
 _AT_GSM_local_dose_distrib_from_dose_grid($117,$118,$119,$120,$121,$122);
 $32 = 0;
 while(1) {
  $123 = $32;
  $124 = $16;
  $125 = ($123|0)<($124|0);
  if (!($125)) {
   break;
  }
  $126 = $36;
  $127 = $32;
  $128 = (($126) + ($127<<2)|0);
  $129 = HEAP32[$128>>2]|0;
  _free($129);
  $130 = $37;
  $131 = $32;
  $132 = (($130) + ($131<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
  $134 = $32;
  $135 = (($134) + 1)|0;
  $32 = $135;
 }
 $136 = $38;
 $137 = HEAP32[$136>>2]|0;
 _free($137);
 $138 = $38;
 _free($138);
 $139 = $35;
 _free($139);
 $140 = $36;
 _free($140);
 $141 = $37;
 _free($141);
 STACKTOP = sp;return;
}
function _AT_run_IGK_method($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = +$11;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0;
 var $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0;
 var $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0;
 var $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0;
 var $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0;
 var $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0;
 var $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0;
 var $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $vararg_buffer24 = sp + 232|0;
 $vararg_buffer22 = sp + 224|0;
 $vararg_buffer20 = sp + 216|0;
 $vararg_buffer18 = sp + 208|0;
 $vararg_buffer16 = sp + 200|0;
 $vararg_buffer14 = sp + 192|0;
 $vararg_buffer12 = sp + 184|0;
 $vararg_buffer10 = sp + 176|0;
 $vararg_buffer8 = sp + 168|0;
 $vararg_buffer6 = sp + 160|0;
 $vararg_buffer = sp + 152|0;
 $24 = sp + 352|0;
 $26 = sp + 344|0;
 $28 = sp + 336|0;
 $45 = sp + 136|0;
 $50 = sp + 112|0;
 $57 = sp + 88|0;
 $62 = sp + 240|0;
 $65 = sp + 48|0;
 $70 = sp + 16|0;
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = $3;
 HEAP32[$24>>2] = $4;
 $25 = $5;
 HEAP32[$26>>2] = $6;
 $27 = $7;
 HEAP32[$28>>2] = $8;
 $29 = $9;
 $30 = $10;
 $31 = $11;
 $73 = $12&1;
 $32 = $73;
 $33 = $13;
 $34 = $14;
 $35 = $15;
 $36 = $16;
 $37 = $17;
 $38 = $18;
 $39 = $19;
 $42 = 1;
 $74 = $33;
 HEAPF64[$74>>3] = 0.0;
 $75 = $34;
 HEAPF64[$75>>3] = 0.0;
 $76 = $35;
 HEAPF64[$76>>3] = 0.0;
 $77 = $36;
 HEAPF64[$77>>3] = 0.0;
 $78 = $37;
 HEAPF64[$78>>3] = 0.0;
 $79 = $38;
 HEAPF64[$79>>3] = 0.0;
 $80 = $39;
 HEAPF64[$80>>3] = 0.0;
 $81 = $20;
 $82 = (_calloc($81,8)|0);
 $43 = $82;
 $83 = $20;
 $84 = (_calloc($83,8)|0);
 $44 = $84;
 $85 = $23;
 $86 = +HEAPF64[$85>>3];
 $87 = $86 < 0.0;
 $40 = 0;
 if ($87) {
  while(1) {
   $88 = $40;
   $89 = $20;
   $90 = ($88|0)<($89|0);
   if (!($90)) {
    break;
   }
   $91 = $23;
   $92 = $40;
   $93 = (($91) + ($92<<3)|0);
   $94 = +HEAPF64[$93>>3];
   $95 = -1.0 * $94;
   $96 = $44;
   $97 = $40;
   $98 = (($96) + ($97<<3)|0);
   HEAPF64[$98>>3] = $95;
   $99 = $40;
   $100 = (($99) + 1)|0;
   $40 = $100;
  }
  $101 = $20;
  $102 = $21;
  $103 = $22;
  $104 = $44;
  $105 = HEAP32[$24>>2]|0;
  $106 = $25;
  $107 = $43;
  _AT_fluence_cm2_from_dose_Gy($101,$102,$103,$104,$105,$106,$107);
 } else {
  while(1) {
   $108 = $40;
   $109 = $20;
   $110 = ($108|0)<($109|0);
   if (!($110)) {
    break;
   }
   $111 = $23;
   $112 = $40;
   $113 = (($111) + ($112<<3)|0);
   $114 = +HEAPF64[$113>>3];
   $115 = $43;
   $116 = $40;
   $117 = (($115) + ($116<<3)|0);
   HEAPF64[$117>>3] = $114;
   $118 = $40;
   $119 = (($118) + 1)|0;
   $40 = $119;
  }
  $120 = $20;
  $121 = $21;
  $122 = $22;
  $123 = $43;
  $124 = HEAP32[$24>>2]|0;
  $125 = $25;
  $126 = $44;
  _AT_dose_Gy_from_fluence_cm2($120,$121,$122,$123,$124,$125,$126);
 }
 HEAPF64[$45>>3] = 0.0;
 $46 = 0.0;
 $40 = 0;
 while(1) {
  $127 = $40;
  $128 = $20;
  $129 = ($127|0)<($128|0);
  $130 = $44;
  if (!($129)) {
   break;
  }
  $131 = $40;
  $132 = (($130) + ($131<<3)|0);
  $133 = +HEAPF64[$132>>3];
  $134 = +HEAPF64[$45>>3];
  $135 = $134 + $133;
  HEAPF64[$45>>3] = $135;
  $136 = $43;
  $137 = $40;
  $138 = (($136) + ($137<<3)|0);
  $139 = +HEAPF64[$138>>3];
  $140 = $46;
  $141 = $140 + $139;
  $46 = $141;
  $142 = $40;
  $143 = (($142) + 1)|0;
  $40 = $143;
 }
 _free($130);
 $144 = $20;
 $145 = (_calloc($144,8)|0);
 $48 = $145;
 $146 = $20;
 $147 = (_calloc($146,8)|0);
 $49 = $147;
 $40 = 0;
 while(1) {
  $148 = $40;
  $149 = $20;
  $150 = ($148|0)<($149|0);
  if (!($150)) {
   break;
  }
  $151 = $25;
  $152 = $21;
  $153 = $22;
  $154 = HEAP32[$24>>2]|0;
  (_AT_Mass_Stopping_Power_with_no($151,1,$152,$153,$154,$50)|0);
  $155 = $21;
  $156 = $40;
  $157 = (($155) + ($156<<3)|0);
  $158 = +HEAPF64[$157>>3];
  $159 = HEAP32[$24>>2]|0;
  $160 = HEAP32[$28>>2]|0;
  $161 = (+_AT_single_impact_fluence_cm2_single($158,$159,$160));
  $51 = $161;
  $162 = $43;
  $163 = $40;
  $164 = (($162) + ($163<<3)|0);
  $165 = +HEAPF64[$164>>3];
  $166 = $46;
  $167 = $165 / $166;
  $168 = $48;
  $169 = $40;
  $170 = (($168) + ($169<<3)|0);
  HEAPF64[$170>>3] = $167;
  $171 = $43;
  $172 = $40;
  $173 = (($171) + ($172<<3)|0);
  $174 = +HEAPF64[$173>>3];
  $175 = $51;
  $176 = $174 / $175;
  $47 = $176;
  $177 = +HEAPF64[$50>>3];
  $178 = $51;
  $179 = (+_AT_single_impact_dose_Gy_single($177,$178));
  $52 = $179;
  $180 = $47;
  $181 = $52;
  $182 = $180 * $181;
  $183 = $49;
  $184 = $40;
  $185 = (($183) + ($184<<3)|0);
  HEAPF64[$185>>3] = $182;
  $186 = $40;
  $187 = (($186) + 1)|0;
  $40 = $187;
 }
 $188 = $43;
 _free($188);
 $189 = $20;
 $190 = (_calloc($189,8)|0);
 $53 = $190;
 $191 = $48;
 $192 = +HEAPF64[$191>>3];
 $193 = $53;
 HEAPF64[$193>>3] = $192;
 $194 = $20;
 $195 = ($194|0)>(1);
 L21: do {
  if ($195) {
   $40 = 1;
   while(1) {
    $196 = $40;
    $197 = $20;
    $198 = ($196|0)<($197|0);
    if (!($198)) {
     break L21;
    }
    $199 = $53;
    $200 = $40;
    $201 = (($200) - 1)|0;
    $202 = (($199) + ($201<<3)|0);
    $203 = +HEAPF64[$202>>3];
    $204 = $48;
    $205 = $40;
    $206 = (($204) + ($205<<3)|0);
    $207 = +HEAPF64[$206>>3];
    $208 = $203 + $207;
    $209 = $53;
    $210 = $40;
    $211 = (($209) + ($210<<3)|0);
    $212 = +HEAPF64[$211>>3];
    $213 = $212 + $208;
    HEAPF64[$211>>3] = $213;
    $214 = $40;
    $215 = (($214) + 1)|0;
    $40 = $215;
   }
  }
 } while(0);
 $216 = $53;
 _free($216);
 $54 = 0;
 $217 = $32;
 $218 = $217&1;
 do {
  if ($218) {
   $219 = (_fopen(69004,77823)|0);
   $54 = $219;
   $220 = $54;
   $221 = ($220|0)==(0|0);
   if ($221) {
    STACKTOP = sp;return;
   } else {
    $222 = $54;
    (_fprintf($222,69023,$vararg_buffer)|0);
    $223 = $54;
    (_fprintf($223,69023,$vararg_buffer6)|0);
    $224 = $54;
    (_fprintf($224,69087,$vararg_buffer8)|0);
    $225 = $54;
    (_fprintf($225,69023,$vararg_buffer10)|0);
    $226 = $54;
    (_fprintf($226,69138,$vararg_buffer12)|0);
    break;
   }
  }
 } while(0);
 $227 = $29;
 $228 = ($227|0)!=(2);
 $229 = HEAP32[$26>>2]|0;
 $230 = ($229|0)==(1);
 $or$cond = $228 | $230;
 if ($or$cond) {
  $231 = $32;
  $232 = $231&1;
  if (!($232)) {
   STACKTOP = sp;return;
  }
  $233 = $54;
  (_fprintf($233,69023,$vararg_buffer14)|0);
  $234 = $54;
  (_fprintf($234,69142,$vararg_buffer16)|0);
  $235 = $54;
  (_fprintf($235,69202,$vararg_buffer18)|0);
  $236 = $54;
  (_fprintf($236,69220,$vararg_buffer20)|0);
  $237 = $54;
  (_fprintf($237,69023,$vararg_buffer22)|0);
  STACKTOP = sp;return;
 }
 $55 = 0;
 $56 = 0;
 while(1) {
  $238 = $30;
  $239 = $56;
  $240 = (($238) + ($239<<3)|0);
  $241 = +HEAPF64[$240>>3];
  $242 = $241 != 0.0;
  if (!($242)) {
   break;
  }
  $243 = $56;
  $244 = (($243) + 4)|0;
  $56 = $244;
  $245 = $55;
  $246 = (($245) + 1)|0;
  $55 = $246;
 }
 HEAPF64[$57>>3] = 0.0;
 $58 = 0.0;
 $59 = 0.0;
 $247 = $34;
 HEAPF64[$247>>3] = 0.0;
 $248 = (_calloc(1,64)|0);
 $60 = $248;
 $249 = $21;
 $250 = $60;
 HEAP32[$250>>2] = $249;
 $251 = $22;
 $252 = $60;
 $253 = ((($252)) + 4|0);
 HEAP32[$253>>2] = $251;
 $254 = $60;
 $255 = ((($254)) + 8|0);
 HEAP32[$255>>2] = $24;
 $256 = $60;
 $257 = ((($256)) + 12|0);
 HEAP32[$257>>2] = $26;
 $258 = $27;
 $259 = $60;
 $260 = ((($259)) + 16|0);
 HEAP32[$260>>2] = $258;
 $261 = $60;
 $262 = ((($261)) + 20|0);
 HEAP32[$262>>2] = $28;
 $263 = $60;
 $264 = ((($263)) + 24|0);
 HEAPF64[$264>>3] = 1.0;
 $265 = $60;
 $266 = ((($265)) + 24|0);
 $267 = ((($266)) + 32|0);
 HEAPF64[$267>>3] = 0.0;
 $40 = 0;
 while(1) {
  $268 = $40;
  $269 = $55;
  $270 = ($268|0)<($269|0);
  if (!($270)) {
   break;
  }
  $41 = 1;
  while(1) {
   $271 = $41;
   $272 = ($271|0)<(4);
   if (!($272)) {
    break;
   }
   $273 = $30;
   $274 = $40;
   $275 = $274<<2;
   $276 = $41;
   $277 = (($275) + ($276))|0;
   $278 = (($273) + ($277<<3)|0);
   $279 = +HEAPF64[$278>>3];
   $280 = $60;
   $281 = ((($280)) + 24|0);
   $282 = $41;
   $283 = (($281) + ($282<<3)|0);
   HEAPF64[$283>>3] = $279;
   $284 = $41;
   $285 = (($284) + 1)|0;
   $41 = $285;
  }
  (_gsl_set_error_handler_off()|0);
  $286 = (_gsl_integration_workspace_alloc(10000)|0);
  $61 = $286;
  HEAP32[$62>>2] = 39;
  $287 = $60;
  $288 = ((($62)) + 4|0);
  HEAP32[$288>>2] = $287;
  $63 = 0.0;
  $289 = HEAP32[$26>>2]|0;
  $290 = ($289|0)==(2);
  if ($290) {
   $291 = $27;
   $292 = +HEAPF64[$291>>3];
   $63 = $292;
  }
  $293 = $21;
  $294 = +HEAPF64[$293>>3];
  $295 = HEAP32[$24>>2]|0;
  $296 = HEAP32[$28>>2]|0;
  $297 = (+_AT_max_electron_range_m($294,$295,$296));
  $64 = $297;
  $298 = $63;
  $299 = $64;
  $300 = $61;
  $301 = (_gsl_integration_qags($62,$298,$299,9.9999999999999995E-21,9.9999999999999995E-21,10000,$300,$57,$65)|0);
  $66 = $301;
  $302 = $66;
  $303 = ($302|0)==(18);
  $304 = $66;
  $305 = ($304|0)==(21);
  $or$cond3 = $303 | $305;
  if ($or$cond3) {
   (_printf(69270,$vararg_buffer24)|0);
  }
  $306 = +HEAPF64[$57>>3];
  $307 = $306 * 6.2831853071795862;
  HEAPF64[$57>>3] = $307;
  $308 = +HEAPF64[$57>>3];
  $309 = $308 * 1.0E+4;
  $310 = $36;
  HEAPF64[$310>>3] = $309;
  $311 = $61;
  _gsl_integration_workspace_free($311);
  $67 = 0.0;
  $68 = 0.0;
  $312 = HEAP32[$26>>2]|0;
  $313 = ($312|0)==(6);
  if ($313) {
   $314 = $27;
   $315 = ((($314)) + 8|0);
   $316 = +HEAPF64[$315>>3];
   $68 = $316;
  }
  $317 = HEAP32[$26>>2]|0;
  $318 = ($317|0)==(3);
  $319 = HEAP32[$26>>2]|0;
  $320 = ($319|0)==(4);
  $or$cond5 = $318 | $320;
  if ($or$cond5) {
   $321 = $27;
   $322 = +HEAPF64[$321>>3];
   $68 = $322;
  }
  $323 = $31;
  $324 = $323 * 3.1415926535897931;
  $325 = $68;
  $326 = (+_gsl_pow_2($325));
  $327 = $324 * $326;
  $67 = $327;
  $328 = $48;
  $329 = +HEAPF64[$328>>3];
  $330 = $46;
  $331 = $329 * $330;
  $71 = $331;
  $332 = $49;
  $333 = +HEAPF64[$332>>3];
  $72 = $333;
  $334 = +HEAPF64[$57>>3];
  $335 = $67;
  $336 = $334 / $335;
  $58 = $336;
  $337 = $58;
  $338 = $337 < 1.0;
  $339 = $338&1;
  $340 = $58;
  $341 = $340 >= 0.0;
  $342 = $341&1;
  $343 = $339 & $342;
  $344 = $60;
  $345 = ((($344)) + 24|0);
  $346 = ((($345)) + 16|0);
  $347 = +HEAPF64[$346>>3];
  $348 = $347 > 1.0;
  $349 = $348&1;
  $350 = $343 & $349;
  $351 = ($350|0)!=(0);
  $352 = $36;
  $353 = +HEAPF64[$352>>3];
  $354 = -1.0 * $353;
  $355 = $71;
  $356 = $354 * $355;
  $357 = (+Math_exp((+$356)));
  if ($351) {
   $358 = $38;
   HEAPF64[$358>>3] = $357;
   $359 = $58;
   $360 = 1.0 - $359;
   $59 = $360;
   $361 = $59;
   $362 = $72;
   $363 = $361 * $362;
   HEAPF64[$70>>3] = $363;
   $364 = $42;
   $365 = $29;
   $366 = $60;
   $367 = ((($366)) + 24|0);
   $368 = $39;
   _AT_gamma_response($364,$70,$365,$367,0,$368);
   $369 = $39;
   $370 = +HEAPF64[$369>>3];
   $371 = 1.0 - $370;
   $372 = $39;
   HEAPF64[$372>>3] = $371;
   $373 = $30;
   $374 = $40;
   $375 = $374<<2;
   $376 = (($373) + ($375<<3)|0);
   $377 = +HEAPF64[$376>>3];
   $378 = $38;
   $379 = +HEAPF64[$378>>3];
   $380 = $39;
   $381 = +HEAPF64[$380>>3];
   $382 = $379 * $381;
   $383 = 1.0 - $382;
   $384 = $377 * $383;
   $69 = $384;
  } else {
   $385 = 1.0 - $357;
   $386 = $38;
   HEAPF64[$386>>3] = $385;
   $387 = $30;
   $388 = $40;
   $389 = $388<<2;
   $390 = (($387) + ($389<<3)|0);
   $391 = +HEAPF64[$390>>3];
   $392 = $38;
   $393 = +HEAPF64[$392>>3];
   $394 = $391 * $393;
   $69 = $394;
  }
  $395 = $69;
  $396 = $34;
  $397 = +HEAPF64[$396>>3];
  $398 = $397 + $395;
  HEAPF64[$396>>3] = $398;
  $399 = $40;
  $400 = (($399) + 1)|0;
  $40 = $400;
 }
 $401 = $42;
 $402 = $29;
 $403 = $30;
 $404 = $35;
 _AT_gamma_response($401,$45,$402,$403,0,$404);
 $405 = $34;
 $406 = +HEAPF64[$405>>3];
 $407 = $35;
 $408 = +HEAPF64[$407>>3];
 $409 = $406 / $408;
 $410 = $33;
 HEAPF64[$410>>3] = $409;
 $411 = $59;
 $412 = $49;
 $413 = +HEAPF64[$412>>3];
 $414 = $411 * $413;
 $415 = $37;
 HEAPF64[$415>>3] = $414;
 $416 = $48;
 _free($416);
 $417 = $49;
 _free($417);
 $418 = $60;
 _free($418);
 $419 = $32;
 $420 = $419&1;
 if (!($420)) {
  STACKTOP = sp;return;
 }
 $421 = $54;
 (_fclose($421)|0);
 STACKTOP = sp;return;
}
function _AT_material_index_from_material_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = -1;
 $3 = 1;
 $4 = $3;
 $5 = HEAP32[10076]|0;
 _find_elements_int($1,$4,(40308),$5,$2);
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _AT_material_name_from_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_AT_material_index_from_material_number($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(-1);
 $9 = $3;
 if ($8) {
  $10 = $4;
  $11 = ((41936) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  (_strcpy($9,$12)|0);
  STACKTOP = sp;return;
 } else {
  (_strcpy($9,72529)|0);
  STACKTOP = sp;return;
 }
}
function _AT_material_number_from_name($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 $4 = 1;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((69633|0),(69655|0),71,(69686|0));
  // unreachable;
 }
 $7 = HEAP32[10076]|0;
 _find_elements_char($2,1,(41936),$7,$3);
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)!=(-1);
 if ($9) {
  $10 = HEAP32[$3>>2]|0;
  $11 = ((40308) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $1 = -1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _AT_density_g_cm3_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((40536) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_I_eV_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((40736) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_alpha_g_cm2_MeV_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((40936) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_p_MeV_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((41136) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_m_g_cm2_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((41336) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_average_A_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((41536) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_average_Z_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 } else {
  $9 = $3;
  $10 = ((41736) + ($9<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return (+$12);
 }
 return +(0.0);
}
function _AT_phase_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_material_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $3;
  $10 = ((42036) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_get_material_data($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0;
 var $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $17 = $8;
 $18 = (_AT_material_index_from_material_number($17)|0);
 $16 = $18;
 $19 = $16;
 $20 = ($19|0)==(-1);
 if ($20) {
  $21 = $8;
  HEAP32[$vararg_buffer>>2] = $21;
  (_printf(69715,$vararg_buffer)|0);
  $22 = $9;
  HEAPF64[$22>>3] = 0.0;
  $23 = $10;
  HEAPF64[$23>>3] = 0.0;
  $24 = $11;
  HEAPF64[$24>>3] = 0.0;
  $25 = $12;
  HEAPF64[$25>>3] = 0.0;
  $26 = $13;
  HEAPF64[$26>>3] = 0.0;
  $27 = $14;
  HEAPF64[$27>>3] = 0.0;
  $28 = $15;
  HEAPF64[$28>>3] = 0.0;
  STACKTOP = sp;return;
 }
 $29 = $9;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $16;
  $32 = ((40536) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $9;
  HEAPF64[$34>>3] = $33;
 }
 $35 = $10;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $16;
  $38 = ((40736) + ($37<<3)|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $10;
  HEAPF64[$40>>3] = $39;
 }
 $41 = $11;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $16;
  $44 = ((40936) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $11;
  HEAPF64[$46>>3] = $45;
 }
 $47 = $12;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $16;
  $50 = ((41136) + ($49<<3)|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $12;
  HEAPF64[$52>>3] = $51;
 }
 $53 = $13;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = $16;
  $56 = ((41336) + ($55<<3)|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $13;
  HEAPF64[$58>>3] = $57;
 }
 $59 = $14;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = $16;
  $62 = ((41536) + ($61<<3)|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $14;
  HEAPF64[$64>>3] = $63;
 }
 $65 = $15;
 $66 = ($65|0)!=(0|0);
 if (!($66)) {
  STACKTOP = sp;return;
 }
 $67 = $16;
 $68 = ((41736) + ($67<<3)|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $15;
 HEAPF64[$70>>3] = $69;
 STACKTOP = sp;return;
}
function _AT_get_materials_data($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $20 = $9;
 $21 = (_calloc($20,4)|0);
 $18 = $21;
 $22 = $10;
 $23 = $9;
 $24 = HEAP32[10076]|0;
 $25 = $18;
 _find_elements_int($22,$23,(40308),$24,$25);
 $26 = $11;
 $27 = ($26|0)!=(0|0);
 L1: do {
  if ($27) {
   $19 = 0;
   while(1) {
    $28 = $19;
    $29 = $9;
    $30 = ($28|0)<($29|0);
    if (!($30)) {
     break L1;
    }
    $31 = $18;
    $32 = $19;
    $33 = (($31) + ($32<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((40536) + ($34<<3)|0);
    $36 = +HEAPF64[$35>>3];
    $37 = $11;
    $38 = $19;
    $39 = (($37) + ($38<<3)|0);
    HEAPF64[$39>>3] = $36;
    $40 = $19;
    $41 = (($40) + 1)|0;
    $19 = $41;
   }
  }
 } while(0);
 $42 = $12;
 $43 = ($42|0)!=(0|0);
 L7: do {
  if ($43) {
   $19 = 0;
   while(1) {
    $44 = $19;
    $45 = $9;
    $46 = ($44|0)<($45|0);
    if (!($46)) {
     break L7;
    }
    $47 = $18;
    $48 = $19;
    $49 = (($47) + ($48<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((40736) + ($50<<3)|0);
    $52 = +HEAPF64[$51>>3];
    $53 = $12;
    $54 = $19;
    $55 = (($53) + ($54<<3)|0);
    HEAPF64[$55>>3] = $52;
    $56 = $19;
    $57 = (($56) + 1)|0;
    $19 = $57;
   }
  }
 } while(0);
 $58 = $13;
 $59 = ($58|0)!=(0|0);
 L13: do {
  if ($59) {
   $19 = 0;
   while(1) {
    $60 = $19;
    $61 = $9;
    $62 = ($60|0)<($61|0);
    if (!($62)) {
     break L13;
    }
    $63 = $18;
    $64 = $19;
    $65 = (($63) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((40936) + ($66<<3)|0);
    $68 = +HEAPF64[$67>>3];
    $69 = $13;
    $70 = $19;
    $71 = (($69) + ($70<<3)|0);
    HEAPF64[$71>>3] = $68;
    $72 = $19;
    $73 = (($72) + 1)|0;
    $19 = $73;
   }
  }
 } while(0);
 $74 = $14;
 $75 = ($74|0)!=(0|0);
 L19: do {
  if ($75) {
   $19 = 0;
   while(1) {
    $76 = $19;
    $77 = $9;
    $78 = ($76|0)<($77|0);
    if (!($78)) {
     break L19;
    }
    $79 = $18;
    $80 = $19;
    $81 = (($79) + ($80<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((41136) + ($82<<3)|0);
    $84 = +HEAPF64[$83>>3];
    $85 = $14;
    $86 = $19;
    $87 = (($85) + ($86<<3)|0);
    HEAPF64[$87>>3] = $84;
    $88 = $19;
    $89 = (($88) + 1)|0;
    $19 = $89;
   }
  }
 } while(0);
 $90 = $15;
 $91 = ($90|0)!=(0|0);
 L25: do {
  if ($91) {
   $19 = 0;
   while(1) {
    $92 = $19;
    $93 = $9;
    $94 = ($92|0)<($93|0);
    if (!($94)) {
     break L25;
    }
    $95 = $18;
    $96 = $19;
    $97 = (($95) + ($96<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((41336) + ($98<<3)|0);
    $100 = +HEAPF64[$99>>3];
    $101 = $15;
    $102 = $19;
    $103 = (($101) + ($102<<3)|0);
    HEAPF64[$103>>3] = $100;
    $104 = $19;
    $105 = (($104) + 1)|0;
    $19 = $105;
   }
  }
 } while(0);
 $106 = $16;
 $107 = ($106|0)!=(0|0);
 L31: do {
  if ($107) {
   $19 = 0;
   while(1) {
    $108 = $19;
    $109 = $9;
    $110 = ($108|0)<($109|0);
    if (!($110)) {
     break L31;
    }
    $111 = $18;
    $112 = $19;
    $113 = (($111) + ($112<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((41536) + ($114<<3)|0);
    $116 = +HEAPF64[$115>>3];
    $117 = $16;
    $118 = $19;
    $119 = (($117) + ($118<<3)|0);
    HEAPF64[$119>>3] = $116;
    $120 = $19;
    $121 = (($120) + 1)|0;
    $19 = $121;
   }
  }
 } while(0);
 $122 = $17;
 $123 = ($122|0)!=(0|0);
 if (!($123)) {
  $138 = $18;
  _free($138);
  STACKTOP = sp;return;
 }
 $19 = 0;
 while(1) {
  $124 = $19;
  $125 = $9;
  $126 = ($124|0)<($125|0);
  if (!($126)) {
   break;
  }
  $127 = $18;
  $128 = $19;
  $129 = (($127) + ($128<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ((41736) + ($130<<3)|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $17;
  $134 = $19;
  $135 = (($133) + ($134<<3)|0);
  HEAPF64[$135>>3] = $132;
  $136 = $19;
  $137 = (($136) + 1)|0;
  $19 = $137;
 }
 $138 = $18;
 _free($138);
 STACKTOP = sp;return;
}
function _AT_plasma_energy_J_from_material_no($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $2 = $0;
 $5 = $2;
 $6 = (_AT_material_index_from_material_number($5)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(-1);
 $9 = $2;
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 } else {
  $10 = (+_AT_electron_density_m3_from_material_no_single($9));
  $4 = $10;
  $11 = $4;
  $12 = (+_AT_plasma_energy_J_single($11));
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 }
 return +(0.0);
}
function _AT_electron_density_m3_from_material_no_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 32|0;
 $2 = $0;
 $7 = $2;
 $8 = (_AT_material_index_from_material_number($7)|0);
 $3 = $8;
 $9 = $3;
 $10 = ($9|0)==(-1);
 $11 = $2;
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $11;
  (_printf(69715,$vararg_buffer)|0);
  $1 = 0.0;
  $21 = $1;
  STACKTOP = sp;return (+$21);
 } else {
  $12 = (+_AT_density_g_cm3_from_material_no($11));
  $4 = $12;
  $13 = $2;
  $14 = (+_AT_average_Z_from_material_no($13));
  $5 = $14;
  $15 = $2;
  $16 = (+_AT_average_A_from_material_no($15));
  $6 = $16;
  $17 = $4;
  $18 = $5;
  $19 = $6;
  $20 = (+_AT_electron_density_m3_single($17,$18,$19));
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return (+$21);
 }
 return +(0.0);
}
function _AT_plasma_energy_J_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = 12.566370614359172 * $2;
 $4 = $3 * 2.8179402894E-15;
 $5 = (+Math_sqrt((+$4)));
 $6 = $5 * 1.054571628E-34;
 $7 = $6 * 299792458.0;
 STACKTOP = sp;return (+$7);
}
function _AT_electron_density_m3_single($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 $6 = $10;
 $11 = $6;
 $12 = 6.0221417899999999E+23 / $11;
 $7 = $12;
 $13 = $7;
 $14 = $4;
 $15 = $13 * $14;
 $8 = $15;
 $16 = $8;
 $17 = $3;
 $18 = $16 * $17;
 $9 = $18;
 $19 = $9;
 $20 = $19 * 100.0;
 $21 = $20 * 100.0;
 $22 = $21 * 100.0;
 STACKTOP = sp;return (+$22);
}
function _AT_electron_density_m3_from_material_no_multi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (+_AT_electron_density_m3_from_material_no_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_electron_density_m3_multi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $10;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $8;
  $23 = $10;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+_AT_electron_density_m3_single($17,$21,$25));
  $27 = $9;
  $28 = $10;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $10 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_electron_density_m3_from_composition($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $6;
 $15 = (_calloc($14,8)|0);
 $12 = $15;
 $16 = $6;
 $17 = $10;
 $18 = $12;
 _AT_normalize($16,$17,$18);
 $19 = $11;
 HEAPF64[$19>>3] = 0.0;
 $13 = 0;
 while(1) {
  $20 = $13;
  $21 = $6;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $12;
  $24 = $13;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $26 * 6.0221417899999999E+23;
  $28 = $8;
  $29 = $13;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+($31|0));
  $33 = $27 * $32;
  $34 = $9;
  $35 = $13;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (+($37|0));
  $39 = $33 / $38;
  $40 = $11;
  $41 = +HEAPF64[$40>>3];
  $42 = $41 + $39;
  HEAPF64[$40>>3] = $42;
  $43 = $13;
  $44 = (($43) + 1)|0;
  $13 = $44;
 }
 $45 = $7;
 $46 = $45 * 100.0;
 $47 = $46 * 100.0;
 $48 = $47 * 100.0;
 $49 = $11;
 $50 = +HEAPF64[$49>>3];
 $51 = $50 * $48;
 HEAPF64[$49>>3] = $51;
 $52 = $12;
 _free($52);
 STACKTOP = sp;return;
}
function _AT_average_A_from_composition($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = (_calloc($10,8)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 _AT_normalize($12,$13,$14);
 $15 = $7;
 HEAPF64[$15>>3] = 0.0;
 $9 = 0;
 while(1) {
  $16 = $9;
  $17 = $4;
  $18 = ($16|0)<($17|0);
  $19 = $8;
  if (!($18)) {
   break;
  }
  $20 = $9;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $5;
  $24 = $9;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($26|0));
  $28 = $22 * $27;
  $29 = $7;
  $30 = +HEAPF64[$29>>3];
  $31 = $30 + $28;
  HEAPF64[$29>>3] = $31;
  $32 = $9;
  $33 = (($32) + 1)|0;
  $9 = $33;
 }
 _free($19);
 STACKTOP = sp;return;
}
function _AT_average_Z_from_composition($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = (_calloc($10,8)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 _AT_normalize($12,$13,$14);
 $15 = $7;
 HEAPF64[$15>>3] = 0.0;
 $9 = 0;
 while(1) {
  $16 = $9;
  $17 = $4;
  $18 = ($16|0)<($17|0);
  $19 = $8;
  if (!($18)) {
   break;
  }
  $20 = $9;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $5;
  $24 = $9;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($26|0));
  $28 = $22 * $27;
  $29 = $7;
  $30 = +HEAPF64[$29>>3];
  $31 = $30 + $28;
  HEAPF64[$29>>3] = $31;
  $32 = $9;
  $33 = (($32) + 1)|0;
  $9 = $33;
 }
 _free($19);
 STACKTOP = sp;return;
}
function _AT_effective_Z_from_composition($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $18 = $6;
 $19 = (_calloc($18,8)|0);
 $12 = $19;
 $20 = $6;
 $21 = $8;
 $22 = $12;
 _AT_normalize($20,$21,$22);
 $23 = $6;
 $24 = (_calloc($23,8)|0);
 $13 = $24;
 $14 = 0;
 $25 = $6;
 $26 = $9;
 $27 = (+_AT_sum($25,$26));
 $28 = $27 > 0.0;
 if ($28) {
  $29 = $6;
  $30 = $9;
  $31 = $13;
  _AT_normalize($29,$30,$31);
  $14 = 1;
 }
 $15 = 0.0;
 $16 = 0;
 while(1) {
  $32 = $16;
  $33 = $6;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $12;
  $36 = $16;
  $37 = (($35) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $7;
  $40 = $16;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (+($42|0));
  $44 = $10;
  $45 = (+Math_pow((+$43),(+$44)));
  $46 = $38 * $45;
  $17 = $46;
  $47 = $14;
  $48 = $47&1;
  if ($48) {
   $49 = $13;
   $50 = $16;
   $51 = (($49) + ($50<<3)|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $17;
   $54 = $53 * $52;
   $17 = $54;
  }
  $55 = $17;
  $56 = $15;
  $57 = $56 + $55;
  $15 = $57;
  $58 = $16;
  $59 = (($58) + 1)|0;
  $16 = $59;
 }
 $60 = $15;
 $61 = $10;
 $62 = 1.0 / $61;
 $63 = (+Math_pow((+$60),(+$62)));
 $64 = $11;
 HEAPF64[$64>>3] = $63;
 $65 = $13;
 _free($65);
 $66 = $12;
 _free($66);
 STACKTOP = sp;return;
}
function _AT_I_eV_from_composition($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $5;
 $17 = (_calloc($16,8)|0);
 $10 = $17;
 $18 = $5;
 $19 = $8;
 $20 = $10;
 _AT_normalize($18,$19,$20);
 $21 = $5;
 $22 = (_calloc($21,8)|0);
 $11 = $22;
 $23 = $5;
 $24 = (_calloc($23,4)|0);
 $12 = $24;
 $25 = $5;
 $26 = $7;
 $27 = $6;
 $28 = $12;
 (_AT_particle_no_from_Z_and_A($25,$26,$27,$28)|0);
 $29 = $5;
 $30 = $12;
 $31 = $11;
 (_AT_I_eV_from_particle_no($29,$30,$31)|0);
 $14 = 0.0;
 $15 = 0.0;
 $13 = 0;
 while(1) {
  $32 = $13;
  $33 = $5;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $10;
  $36 = $13;
  $37 = (($35) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $7;
  $40 = $13;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (+($42|0));
  $44 = $38 * $43;
  $45 = $6;
  $46 = $13;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (+($48|0));
  $50 = $44 / $49;
  $51 = $11;
  $52 = $13;
  $53 = (($51) + ($52<<3)|0);
  $54 = +HEAPF64[$53>>3];
  $55 = (+Math_log((+$54)));
  $56 = $50 * $55;
  $57 = $14;
  $58 = $57 + $56;
  $14 = $58;
  $59 = $10;
  $60 = $13;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $7;
  $64 = $13;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $6;
  $68 = $13;
  $69 = (($67) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($66|0) / ($70|0))&-1;
  $72 = (+($71|0));
  $73 = $62 * $72;
  $74 = $15;
  $75 = $74 + $73;
  $15 = $75;
  $76 = $14;
  $77 = $15;
  $78 = $76 / $77;
  $79 = (+Math_exp((+$78)));
  $80 = $9;
  HEAPF64[$80>>3] = $79;
  $81 = $13;
  $82 = (($81) + 1)|0;
  $13 = $82;
 }
 $83 = $11;
 _free($83);
 $84 = $10;
 _free($84);
 STACKTOP = sp;return;
}
function _AT_set_user_material($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $11 = $5;
 $12 = $10;
 $13 = ((40536) + ($12<<3)|0);
 HEAPF64[$13>>3] = $11;
 $14 = $6;
 $15 = $10;
 $16 = ((40736) + ($15<<3)|0);
 HEAPF64[$16>>3] = $14;
 $17 = $7;
 $18 = $10;
 $19 = ((41536) + ($18<<3)|0);
 HEAPF64[$19>>3] = $17;
 $20 = $8;
 $21 = $10;
 $22 = ((41736) + ($21<<3)|0);
 HEAPF64[$22>>3] = $20;
 $23 = $10;
 $24 = ((40408) + ($23)|0);
 HEAP8[$24>>0] = 1;
 $25 = $9;
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return;
}
function _AT_set_user_material_from_composition($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $16 = $6;
 $17 = (_calloc($16,8)|0);
 $12 = $17;
 $18 = $6;
 $19 = $10;
 $20 = $12;
 _AT_normalize($18,$19,$20);
 $13 = 0.0;
 $14 = 0.0;
 $15 = 0.0;
 $21 = $7;
 $22 = $13;
 $23 = $15;
 $24 = $14;
 $25 = $11;
 _AT_set_user_material($21,$22,$23,$24,$25);
 $26 = $12;
 _free($26);
 STACKTOP = sp;return;
}
function _AT_particle_no_from_Z_and_A_single($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (1)<=($4|0);
 $6 = $3;
 $7 = ($6|0)<=(300);
 $or$cond = $5 & $7;
 if (!($or$cond)) {
  ___assert_fail((69742|0),(69765|0),36,(69796|0));
  // unreachable;
 }
 $8 = $2;
 $9 = (1)<=($8|0);
 $10 = $2;
 $11 = ($10|0)<=(118);
 $or$cond3 = $9 & $11;
 if ($or$cond3) {
  $12 = $2;
  $13 = ($12*1000)|0;
  $14 = $3;
  $15 = (($13) + ($14))|0;
  STACKTOP = sp;return ($15|0);
 } else {
  ___assert_fail((69831|0),(69765|0),37,(69796|0));
  // unreachable;
 }
 return (0)|0;
}
function _AT_particle_no_from_Z_and_A($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $6;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_AT_particle_no_from_Z_and_A_single($15,$19)|0);
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 STACKTOP = sp;return 0;
}
function _AT_A_from_particle_no_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (($4|0) % 1000)&-1;
 $3 = $5;
 $6 = $3;
 $7 = (1)<=($6|0);
 $8 = $3;
 $9 = ($8|0)<=(300);
 $or$cond = $7 & $9;
 if ($or$cond) {
  $10 = $3;
  $1 = $10;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = $2;
  HEAP32[$vararg_buffer>>2] = $11;
  (_printf(69854,$vararg_buffer)|0);
  $1 = -1;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_A_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_AT_A_from_particle_no_single($14)|0);
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  HEAP32[$18>>2] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)<(0);
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_Z_from_particle_no_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (($4|0) / 1000)&-1;
 $3 = $5;
 $6 = $3;
 $7 = (1)<=($6|0);
 $8 = $3;
 $9 = ($8|0)<=(118);
 $or$cond = $7 & $9;
 if ($or$cond) {
  $10 = $3;
  $1 = $10;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = $2;
  HEAP32[$vararg_buffer>>2] = $11;
  (_printf(69854,$vararg_buffer)|0);
  $1 = -1;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_Z_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_AT_Z_from_particle_no_single($14)|0);
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  HEAP32[$18>>2] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)<(0);
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_atomic_weight_from_Z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (_calloc($8,4)|0);
 $7 = $9;
 $10 = $4;
 $11 = $3;
 $12 = HEAP32[10534]|0;
 $13 = $7;
 _find_elements_int($10,$11,(42140),$12,$13);
 $6 = 0;
 while(1) {
  $14 = $6;
  $15 = $3;
  $16 = ($14|0)<($15|0);
  $17 = $7;
  if (!($16)) {
   break;
  }
  $18 = $6;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((42528) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $5;
  $24 = $6;
  $25 = (($23) + ($24<<3)|0);
  HEAPF64[$25>>3] = $22;
  $26 = $6;
  $27 = (($26) + 1)|0;
  $6 = $27;
 }
 _free($17);
 STACKTOP = sp;return 0;
}
function _AT_atomic_weight_from_particle_no_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $2 = $0;
 $5 = $2;
 $6 = (_AT_Z_from_particle_no_single($5)|0);
 HEAP32[$3>>2] = $6;
 $7 = HEAP32[10534]|0;
 _find_elements_int($3,1,(42140),$7,$4);
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = HEAP32[$4>>2]|0;
  $11 = ((42528) + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 } else {
  $1 = -1.0;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 }
 return +(0.0);
}
function _AT_atomic_weight_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = (_calloc($9,4)|0);
 $7 = $10;
 $11 = $3;
 $12 = (_calloc($11,4)|0);
 $8 = $12;
 $13 = $3;
 $14 = $4;
 $15 = $8;
 (_AT_Z_from_particle_no($13,$14,$15)|0);
 $16 = $8;
 $17 = $3;
 $18 = HEAP32[10534]|0;
 $19 = $7;
 _find_elements_int($16,$17,(42140),$18,$19);
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = $3;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $7;
  $24 = $6;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((42528) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $5;
  $30 = $6;
  $31 = (($29) + ($30<<3)|0);
  HEAPF64[$31>>3] = $28;
  $32 = $6;
  $33 = (($32) + 1)|0;
  $6 = $33;
 }
 $34 = $8;
 _free($34);
 $35 = $7;
 _free($35);
 STACKTOP = sp;return 0;
}
function _AT_I_eV_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = (_calloc($9,4)|0);
 $7 = $10;
 $11 = $3;
 $12 = (_calloc($11,4)|0);
 $8 = $12;
 $13 = $3;
 $14 = $4;
 $15 = $8;
 (_AT_Z_from_particle_no($13,$14,$15)|0);
 $16 = $8;
 $17 = $3;
 $18 = HEAP32[10534]|0;
 $19 = $7;
 _find_elements_int($16,$17,(42140),$18,$19);
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = $3;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $7;
  $24 = $6;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((44832) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $8;
  $30 = $6;
  $31 = (($29) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (+($32|0));
  $34 = $28 * $33;
  $35 = $5;
  $36 = $6;
  $37 = (($35) + ($36<<3)|0);
  HEAPF64[$37>>3] = $34;
  $38 = $6;
  $39 = (($38) + 1)|0;
  $6 = $39;
 }
 $40 = $8;
 _free($40);
 $41 = $7;
 _free($41);
 STACKTOP = sp;return 0;
}
function _AT_nuclear_spin_from_particle_no_multi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (+_AT_nuclear_spin_from_particle_no_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_nuclear_spin_from_particle_no_single($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_AT_Z_from_particle_no_single($2)|0);
 $4 = $1;
 $5 = (_AT_A_from_particle_no_single($4)|0);
 $6 = (+_AT_nuclear_spin_from_Z_and_A($3,$5));
 STACKTOP = sp;return (+$6);
}
function _AT_nuclear_spin_from_Z_and_A($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = (($5|0) % 2)&-1;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3;
   $9 = (($8|0) % 2)&-1;
   $10 = ($9|0)==(0);
   if ($10) {
    $2 = 0.0;
    break;
   } else {
    $2 = 1.0;
    break;
   }
  } else {
   $2 = 0.5;
  }
 } while(0);
 $11 = $2;
 STACKTOP = sp;return (+$11);
}
function _AT_particle_name_from_particle_no_single($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $6 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = (_AT_Z_from_particle_no_single($8)|0);
 HEAP32[$4>>2] = $9;
 $10 = $2;
 $11 = (_AT_A_from_particle_no_single($10)|0);
 $5 = $11;
 $12 = HEAP32[10534]|0;
 _find_elements_int($4,1,(42140),$12,$6);
 $13 = $3;
 $14 = $5;
 HEAP32[$vararg_buffer>>2] = $14;
 (_sprintf($13,71072,$vararg_buffer)|0);
 $15 = HEAP32[$6>>2]|0;
 $16 = ($15|0)>=(0);
 if ($16) {
  $17 = $3;
  $18 = HEAP32[$6>>2]|0;
  $19 = ((43680) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  (_strcat($17,$20)|0);
  STACKTOP = sp;return 0;
 } else {
  $7 = 71076;
  $21 = $3;
  $22 = $7;
  (_strcat($21,$22)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _AT_particle_no_from_particle_name_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $5 = sp + 4|0;
 $2 = $0;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((71079|0),(69765|0),262,(71101|0));
  // unreachable;
 }
 HEAP32[$3>>2] = 0;
 $9 = $2;
 $10 = (_strtol($9,$3,10)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[$3>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(0);
  if ($16) {
   $1 = -1;
   $27 = $1;
   STACKTOP = sp;return ($27|0);
  }
 }
 $17 = $4;
 $18 = ($17|0)==(0);
 if ($18) {
  $1 = -1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 _find_elements_char($3,1,(43680),96,$5);
 $19 = HEAP32[$5>>2]|0;
 $20 = ($19|0)==(-1);
 if ($20) {
  $1 = -1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 } else {
  $21 = HEAP32[$5>>2]|0;
  $22 = ((42140) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $6 = $23;
  $24 = $6;
  $25 = $4;
  $26 = (_AT_particle_no_from_Z_and_A_single($24,$25)|0);
  $1 = $26;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _AT_particle_name_from_particle_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = (_calloc($11,4)|0);
 $7 = $12;
 $13 = $3;
 $14 = (_calloc($13,4)|0);
 $8 = $14;
 $15 = $3;
 $16 = (_calloc($15,4)|0);
 $9 = $16;
 $17 = $3;
 $18 = $4;
 $19 = $8;
 (_AT_Z_from_particle_no($17,$18,$19)|0);
 $20 = $3;
 $21 = $4;
 $22 = $9;
 (_AT_A_from_particle_no($20,$21,$22)|0);
 $23 = $8;
 $24 = $3;
 $25 = HEAP32[10534]|0;
 $26 = $7;
 _find_elements_int($23,$24,(42140),$25,$26);
 $6 = 0;
 while(1) {
  $27 = $6;
  $28 = $3;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $5;
  $31 = $6;
  $32 = (($30) + (($31*6)|0)|0);
  $33 = $9;
  $34 = $6;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$vararg_buffer>>2] = $36;
  (_sprintf($32,71072,$vararg_buffer)|0);
  $37 = $7;
  $38 = $6;
  $39 = (($37) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)>=(0);
  if ($41) {
   $42 = $5;
   $43 = $6;
   $44 = (($42) + (($43*6)|0)|0);
   $45 = $7;
   $46 = $6;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((43680) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   (_strcat($44,$50)|0);
  } else {
   $10 = 71076;
   $51 = $5;
   $52 = $6;
   $53 = (($51) + (($52*6)|0)|0);
   $54 = $10;
   (_strcat($53,$54)|0);
  }
  $55 = $6;
  $56 = (($55) + 1)|0;
  $6 = $56;
 }
 $57 = $9;
 _free($57);
 $58 = $8;
 _free($58);
 $59 = $7;
 _free($59);
 STACKTOP = sp;return 0;
}
function _AT_particle_no_from_particle_name($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((71079|0),(69765|0),335,(71142|0));
  // unreachable;
 }
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $5;
  $14 = $7;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_AT_particle_no_from_particle_name_single($16)|0);
  $18 = $6;
  $19 = $7;
  $20 = (($18) + ($19<<2)|0);
  HEAP32[$20>>2] = $17;
  $21 = $6;
  $22 = $7;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)<(0);
  if ($25) {
   label = 6;
   break;
  }
  $26 = $7;
  $27 = (($26) + 1)|0;
  $7 = $27;
 }
 if ((label|0) == 6) {
  $3 = 3;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 8) {
  $3 = 0;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _AT_Z_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 _find_elements_char($2,1,(43680),96,$3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (-1)==($4|0);
 if ($5) {
  $1 = -1;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((42140) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _AT_Z_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_AT_Z_from_element_acronym_single($14)|0);
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  HEAP32[$18>>2] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)<(0);
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_element_acronym_from_Z_single($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 $3 = $1;
 $5 = HEAP32[10534]|0;
 _find_elements_int($2,1,(42140),$5,$4);
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)>(-1);
 $8 = $3;
 if ($7) {
  $9 = HEAP32[$4>>2]|0;
  $10 = ((43680) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  (_strcat($8,$11)|0);
  STACKTOP = sp;return 0;
 } else {
  (_strcat($8,71176)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _AT_element_acronym_from_Z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  ;HEAP8[$7>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;HEAP8[$7+5>>0]=0|0;
  $11 = $4;
  $12 = $6;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  (_AT_element_acronym_from_Z_single($14,$7)|0);
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  (_strcat($18,$7)|0);
  $19 = $6;
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 STACKTOP = sp;return 0;
}
function _AT_atomic_weight_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 _find_elements_char($2,1,(43680),96,$3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (-1)==($4|0);
 if ($5) {
  $1 = -1.0;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((42528) + ($6<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 }
 return +(0.0);
}
function _AT_atomic_weight_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+_AT_atomic_weight_from_element_acronym_single($14));
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_density_g_cm3_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 _find_elements_char($2,1,(43680),96,$3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (-1)==($4|0);
 if ($5) {
  $1 = -1.0;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((44064) + ($6<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 }
 return +(0.0);
}
function _AT_density_g_cm3_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+_AT_density_g_cm3_from_element_acronym_single($14));
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_I_eV_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 _find_elements_char($2,1,(43680),96,$3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (-1)==($4|0);
 if ($5) {
  $1 = -1.0;
  $14 = $1;
  STACKTOP = sp;return (+$14);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((44832) + ($6<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = HEAP32[$3>>2]|0;
  $10 = ((42140) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (+($11|0));
  $13 = $8 * $12;
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return (+$14);
 }
 return +(0.0);
}
function _AT_I_eV_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+_AT_I_eV_from_element_acronym_single($14));
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_electron_density_cm3_from_element_acronym_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $6 = (_AT_Z_from_element_acronym_single($5)|0);
 $7 = (+($6|0));
 $2 = $7;
 $8 = $1;
 $9 = (+_AT_atomic_weight_from_element_acronym_single($8));
 $3 = $9;
 $10 = $1;
 $11 = (+_AT_density_g_cm3_from_element_acronym_single($10));
 $4 = $11;
 $12 = $2;
 $13 = $4;
 $14 = $12 * $13;
 $15 = $14 * 6.0221417899999999E+23;
 $16 = $3;
 $17 = $15 / $16;
 STACKTOP = sp;return (+$17);
}
function _AT_electron_density_cm3_from_element_acronym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (+_AT_electron_density_cm3_from_element_acronym_single($14));
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = $7;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 < 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 4) {
  $3 = 3;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_Stopping_Power_Mass_MeV_cm2_g_int($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 8|0;
 $5 = sp;
 HEAPF64[$2>>3] = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  HEAPF64[$5>>3] = 1.0000000000000001E-5;
  $9 = $4;
  $10 = $4;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  (_AT_Mass_Stopping_Power_with_no(2,1,$2,$9,$12,$5)|0);
  $13 = +HEAPF64[$5>>3];
  $14 = 1.0 / $13;
  STACKTOP = sp;return (+$14);
 } else {
  ___assert_fail((75204|0),(71182|0),38,(71210|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_CSDA_range_g_cm2_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $8 = sp + 24|0;
 $9 = sp + 88|0;
 $11 = sp + 72|0;
 $14 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 HEAPF64[$8>>3] = 0.0;
 $18 = $7;
 $19 = ((($9)) + 4|0);
 HEAP32[$19>>2] = $18;
 HEAP32[$9>>2] = 1001;
 (_gsl_set_error_handler_off()|0);
 $20 = (_gsl_integration_workspace_alloc(10000)|0);
 $10 = $20;
 HEAP32[$11>>2] = 40;
 $21 = ((($11)) + 4|0);
 HEAP32[$21>>2] = $9;
 $22 = $5;
 $12 = $22;
 $23 = $4;
 $13 = $23;
 $24 = $12;
 $25 = $13;
 $26 = $10;
 $27 = (_gsl_integration_qags($11,$24,$25,9.9999999999999995E-7,0.001,10000,$26,$8,$14)|0);
 $15 = $27;
 $28 = $15;
 $29 = ($28|0)==(18);
 if ($29) {
  (_printf(71247,$vararg_buffer)|0);
 }
 $30 = $15;
 $31 = ($30|0)==(21);
 if ($31) {
  (_printf(71320,$vararg_buffer1)|0);
 }
 $32 = $10;
 _gsl_integration_workspace_free($32);
 $33 = $6;
 $34 = (_AT_Z_from_particle_no_single($33)|0);
 $16 = $34;
 $35 = $6;
 $36 = (_AT_A_from_particle_no_single($35)|0);
 $17 = $36;
 $37 = +HEAPF64[$8>>3];
 $38 = $17;
 $39 = (+($38|0));
 $40 = $37 * $39;
 $41 = $16;
 $42 = $16;
 $43 = Math_imul($41, $42)|0;
 $44 = (+($43|0));
 $45 = $40 / $44;
 STACKTOP = sp;return (+$45);
}
function _AT_CSDA_range_g_cm2_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $10;
  $29 = (+_AT_CSDA_range_g_cm2_single($19,$23,$27,$28));
  $30 = $11;
  $31 = $12;
  $32 = (($30) + ($31<<3)|0);
  HEAPF64[$32>>3] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_CSDA_range_difference_solver($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $4;
  $10 = +HEAPF64[$9>>3];
  $11 = $2;
  $12 = $4;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $4;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (+_AT_CSDA_range_g_cm2_single($10,$11,$14,$17));
  $5 = $18;
  $19 = $5;
  $20 = $4;
  $21 = ((($20)) + 16|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $19 - $22;
  STACKTOP = sp;return (+$23);
 } else {
  ___assert_fail((75204|0),(71182|0),121,(71395|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_CSDA_energy_after_slab_E_MeV_u_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $7;
 $15 = $14 * 100.0;
 $16 = $6;
 $17 = (+_AT_density_g_cm3_from_material_no($16));
 $18 = $15 * $17;
 $8 = $18;
 $19 = $4;
 HEAPF64[$9>>3] = $19;
 $20 = $5;
 $21 = ((($9)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $6;
 $23 = ((($9)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $8;
 $25 = ((($9)) + 16|0);
 HEAPF64[$25>>3] = $24;
 $10 = 9.9999999999999995E-7;
 $11 = 1.0;
 $26 = $4;
 $12 = $26;
 $27 = $12;
 $28 = (+_zriddr(41,$9,1.0,$27,9.9999999999999995E-7));
 $13 = $28;
 $29 = $13;
 STACKTOP = sp;return (+$29);
}
function _AT_CSDA_energy_after_slab_E_MeV_u_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $10;
  $26 = (+_AT_CSDA_energy_after_slab_E_MeV_u_single($19,$23,$24,$25));
  $27 = $11;
  $28 = $12;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $12;
  $31 = (($30) + 1)|0;
  $12 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_WEPL_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = (+_AT_CSDA_energy_after_slab_E_MeV_u_single($12,$13,$14,$15));
 $8 = $16;
 $17 = $8;
 $18 = $5;
 $19 = (+_AT_CSDA_range_g_cm2_single($17,0.48999999999999999,$18,1));
 $9 = $19;
 $20 = $9;
 $21 = (+_AT_density_g_cm3_from_material_no(1));
 $22 = $20 / $21;
 $23 = $22 / 100.0;
 $10 = $23;
 $24 = $4;
 $25 = $5;
 $26 = (+_AT_CSDA_range_g_cm2_single($24,0.48999999999999999,$25,1));
 $27 = $26 / 100.0;
 $11 = $27;
 $28 = $11;
 $29 = $10;
 $30 = $28 - $29;
 $31 = $7;
 $32 = $30 / $31;
 STACKTOP = sp;return (+$32);
}
function _AT_WEPL_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $10;
  $26 = (+_AT_WEPL_single($19,$23,$24,$25));
  $27 = $11;
  $28 = $12;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $12;
  $31 = (($30) + 1)|0;
  $12 = $31;
 }
 STACKTOP = sp;return;
}
function _getERName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 $4 = $1;
 $6 = HEAP32[16604]|0;
 _are_elements_int($3,1,(66420),$6,$5);
 $7 = HEAP32[$5>>2]|0;
 $8 = ($7|0)!=(-1);
 $9 = $4;
 if ($8) {
  $10 = HEAP32[$5>>2]|0;
  $11 = ((66456) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  (_strcpy($9,$12)|0);
  $2 = 0;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  (_strcpy($9,72529)|0);
  $2 = -1;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _AT_ER_ButtsKatz_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 $4 = $1;
 $5 = $4 < 1.0E+6;
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = 1.0000000000000001E-5 * $6;
  STACKTOP = sp;return (+$7);
 } else {
  ___assert_fail((71726|0),(71762|0),57,(71794|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_Waligorski_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 > 0.0;
 $5 = $1;
 $6 = $5 < 1.0E+6;
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  ___assert_fail((71726|0),(71762|0),63,(71822|0));
  // unreachable;
 }
 $2 = 1.667;
 $7 = $1;
 $8 = $7 < 1.0;
 if ($8) {
  $2 = 1.079;
 }
 $9 = $1;
 $10 = $2;
 $11 = (+Math_pow((+$9),(+$10)));
 $12 = 6.0000000000000002E-6 * $11;
 STACKTOP = sp;return (+$12);
}
function _AT_ER_Edmund_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 > 0.0;
 $5 = $1;
 $6 = $5 < 1.0E+6;
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  ___assert_fail((71726|0),(71762|0),71,(71851|0));
  // unreachable;
 }
 $2 = 1.667;
 $7 = $1;
 $8 = $7 < 1.0;
 if ($8) {
  $2 = 1.079;
 }
 $9 = $1;
 $10 = $2;
 $11 = (+Math_pow((+$9),(+$10)));
 $12 = 6.1299999999999998E-6 * $11;
 STACKTOP = sp;return (+$12);
}
function _AT_ER_Geiss_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 $4 = $1;
 $5 = $4 < 1.0E+6;
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = (+Math_pow((+$6),1.5));
  $8 = 4.0000000000000003E-5 * $7;
  STACKTOP = sp;return (+$8);
 } else {
  ___assert_fail((71876|0),(71762|0),79,(71910|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_Scholz_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 $4 = $1;
 $5 = $4 < 1.0E+6;
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = (+Math_pow((+$6),1.7));
  $8 = 5.0000000000000004E-6 * $7;
  STACKTOP = sp;return (+$8);
 } else {
  ___assert_fail((71876|0),(71762|0),85,(71934|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_Scholz_new_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 $4 = $1;
 $5 = $4 < 1.0E+6;
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = $1;
  $7 = (+Math_pow((+$6),1.7));
  $8 = 6.1999999999999999E-6 * $7;
  STACKTOP = sp;return (+$8);
 } else {
  ___assert_fail((71876|0),(71762|0),90,(71959|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_Tabata_range_g_cm2($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 $14 = $13 > 0.0;
 $15 = $6;
 $16 = $15 < 1.0;
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = $6;
  $18 = (+_gsl_pow_2($17));
  $19 = 2.0 * $18;
  $20 = $6;
  $21 = (+_gsl_pow_2($20));
  $22 = 1.0 - $21;
  $23 = $19 / $22;
  $12 = $23;
  $24 = $7;
  $25 = $8;
  $26 = $12;
  $27 = $25 * $26;
  $28 = 1.0 + $27;
  $29 = (+_gsl_sf_log($28));
  $30 = $8;
  $31 = $29 / $30;
  $32 = $9;
  $33 = $12;
  $34 = $32 * $33;
  $35 = $10;
  $36 = $12;
  $37 = $11;
  $38 = (+Math_pow((+$36),(+$37)));
  $39 = $35 * $38;
  $40 = 1.0 + $39;
  $41 = $34 / $40;
  $42 = $31 - $41;
  $43 = $24 * $42;
  STACKTOP = sp;return (+$43);
 } else {
  ___assert_fail((71988|0),(71762|0),95,(72016|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_ER_PowerLaw_alpha($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = $4 > 0.0;
 $6 = $1;
 $7 = $6 < 1.0E+6;
 $or$cond = $5 & $7;
 if (!($or$cond)) {
  ___assert_fail((71876|0),(71762|0),102,(72041|0));
  // unreachable;
 }
 $8 = $1;
 $9 = (+_AT_max_E_transfer_MeV_single($8));
 $2 = $9;
 $3 = 1.667;
 $10 = $2;
 $11 = $10 <= 0.001;
 if (!($11)) {
  $12 = $3;
  STACKTOP = sp;return (+$12);
 }
 $3 = 1.079;
 $12 = $3;
 STACKTOP = sp;return (+$12);
}
function _AT_ER_Tabata_constants($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.23350000000000001;
 $15 = 1.2090000000000001;
 $16 = 1.7799999999999999E-4;
 $17 = 0.98909999999999997;
 $18 = 3.01E-4;
 $19 = 1.468;
 $20 = 0.0118;
 $21 = 1.232;
 $22 = 0.109;
 $23 = $7;
 $24 = 0.23350000000000001 * $23;
 $25 = $8;
 $26 = (+Math_pow((+$25),1.2090000000000001));
 $27 = $24 / $26;
 $28 = $9;
 HEAPF64[$28>>3] = $27;
 $29 = $7;
 $30 = 1.7799999999999999E-4 * $29;
 $31 = $10;
 HEAPF64[$31>>3] = $30;
 $32 = $8;
 $33 = 3.01E-4 * $32;
 $34 = 0.98909999999999997 - $33;
 $35 = $11;
 HEAPF64[$35>>3] = $34;
 $36 = $8;
 $37 = 0.0118 * $36;
 $38 = 1.468 - $37;
 $39 = $12;
 HEAPF64[$39>>3] = $38;
 $40 = $8;
 $41 = (+Math_pow((+$40),0.109));
 $42 = 1.232 / $41;
 $43 = $13;
 HEAPF64[$43>>3] = $42;
 STACKTOP = sp;return;
}
function _AT_ER_AM_RadDiff_range_g_cm2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+_AT_r_max_RadicalDiffusion_m($2));
 STACKTOP = sp;return (+$3);
}
function _AT_max_electron_ranges_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 72|0;
 $11 = sp + 64|0;
 $12 = sp + 56|0;
 $15 = sp + 48|0;
 $16 = sp + 40|0;
 $17 = sp + 32|0;
 $18 = sp + 24|0;
 $19 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $23 = $5;
 $24 = ($23|0)>(0);
 if (!($24)) {
  ___assert_fail((72062|0),(71762|0),142,(72086|0));
  // unreachable;
 }
 HEAPF64[$10>>3] = 0.0;
 HEAPF64[$11>>3] = 0.0;
 HEAPF64[$12>>3] = 0.0;
 $25 = $7;
 _AT_get_material_data($25,$10,0,0,0,0,$11,$12);
 $26 = +HEAPF64[$11>>3];
 $27 = $26 > 0.0;
 if (!($27)) {
  ___assert_fail((72111|0),(71762|0),155,(72086|0));
  // unreachable;
 }
 $28 = +HEAPF64[$12>>3];
 $29 = $28 > 0.0;
 if (!($29)) {
  ___assert_fail((72125|0),(71762|0),156,(72086|0));
  // unreachable;
 }
 $30 = $5;
 $31 = (_calloc($30,8)|0);
 $13 = $31;
 $32 = $5;
 $33 = (_calloc($32,8)|0);
 $14 = $33;
 $34 = $5;
 $35 = $6;
 $36 = $14;
 (_AT_max_E_transfer_MeV($34,$35,$36)|0);
 HEAPF64[$15>>3] = 0.0;
 HEAPF64[$16>>3] = 0.0;
 HEAPF64[$17>>3] = 0.0;
 HEAPF64[$18>>3] = 0.0;
 HEAPF64[$19>>3] = 0.0;
 $37 = $8;
 $38 = ($37|0)==(7);
 if ($38) {
  $39 = $5;
  $40 = $6;
  $41 = $13;
  (_AT_beta_from_E($39,$40,$41)|0);
  $42 = +HEAPF64[$11>>3];
  $43 = +HEAPF64[$12>>3];
  _AT_ER_Tabata_constants($42,$43,$15,$16,$17,$18,$19);
 }
 $20 = 0.0;
 $21 = 0;
 while(1) {
  $44 = $21;
  $45 = $5;
  $46 = ($44|0)<($45|0);
  if (!($46)) {
   label = 28;
   break;
  }
  $47 = $14;
  $48 = $21;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $50 * 1000.0;
  $22 = $51;
  $52 = $22;
  $53 = $52 > 0.0;
  if (!($53)) {
   label = 12;
   break;
  }
  $54 = $8;
  switch ($54|0) {
  case 2:  {
   $55 = $22;
   $56 = (+_AT_ER_ButtsKatz_range_g_cm2($55));
   $20 = $56;
   break;
  }
  case 3:  {
   $57 = $22;
   $58 = (+_AT_ER_Waligorski_range_g_cm2($57));
   $20 = $58;
   break;
  }
  case 6:  {
   $59 = $22;
   $60 = (+_AT_ER_Edmund_range_g_cm2($59));
   $20 = $60;
   break;
  }
  case 4:  {
   $61 = $6;
   $62 = $21;
   $63 = (($61) + ($62<<3)|0);
   $64 = +HEAPF64[$63>>3];
   $65 = (+_AT_ER_Geiss_range_g_cm2($64));
   $20 = $65;
   break;
  }
  case 5:  {
   $66 = $6;
   $67 = $21;
   $68 = (($66) + ($67<<3)|0);
   $69 = +HEAPF64[$68>>3];
   $70 = (+_AT_ER_Scholz_range_g_cm2($69));
   $20 = $70;
   break;
  }
  case 8:  {
   $71 = $6;
   $72 = $21;
   $73 = (($71) + ($72<<3)|0);
   $74 = +HEAPF64[$73>>3];
   $75 = (+_AT_ER_Scholz_new_range_g_cm2($74));
   $20 = $75;
   break;
  }
  case 7:  {
   $76 = $13;
   $77 = $21;
   $78 = (($76) + ($77<<3)|0);
   $79 = +HEAPF64[$78>>3];
   $80 = +HEAPF64[$15>>3];
   $81 = +HEAPF64[$16>>3];
   $82 = +HEAPF64[$17>>3];
   $83 = +HEAPF64[$18>>3];
   $84 = +HEAPF64[$19>>3];
   $85 = (+_AT_ER_Tabata_range_g_cm2($79,$80,$81,$82,$83,$84));
   $20 = $85;
   break;
  }
  case 9:  {
   $86 = $6;
   $87 = $21;
   $88 = (($86) + ($87<<3)|0);
   $89 = +HEAPF64[$88>>3];
   $90 = (+_AT_ER_AM_RadDiff_range_g_cm2($89));
   $20 = $90;
   break;
  }
  default: {
   $91 = $6;
   $92 = $21;
   $93 = (($91) + ($92<<3)|0);
   $94 = +HEAPF64[$93>>3];
   $20 = $94;
  }
  }
  $95 = +HEAPF64[$10>>3];
  $96 = $95 > 0.0;
  if (!($96)) {
   label = 24;
   break;
  }
  $97 = $20;
  $98 = $9;
  $99 = $21;
  $100 = (($98) + ($99<<3)|0);
  HEAPF64[$100>>3] = $97;
  $101 = $8;
  $102 = ($101|0)!=(1);
  $103 = $8;
  $104 = ($103|0)!=(9);
  $or$cond = $102 & $104;
  if ($or$cond) {
   $105 = +HEAPF64[$10>>3];
   $106 = 0.01 / $105;
   $107 = $9;
   $108 = $21;
   $109 = (($107) + ($108<<3)|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $110 * $106;
   HEAPF64[$109>>3] = $111;
  }
  $112 = $21;
  $113 = (($112) + 1)|0;
  $21 = $113;
 }
 if ((label|0) == 12) {
  ___assert_fail((72139|0),(71762|0),186,(72086|0));
  // unreachable;
 }
 else if ((label|0) == 24) {
  ___assert_fail((72154|0),(71762|0),218,(72086|0));
  // unreachable;
 }
 else if ((label|0) == 28) {
  $114 = $13;
  _free($114);
  $115 = $14;
  _free($115);
  STACKTOP = sp;return;
 }
}
function _AT_max_electron_range_m($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = sp + 88|0;
 $7 = sp + 80|0;
 $8 = sp + 72|0;
 $10 = sp + 56|0;
 $11 = sp + 48|0;
 $12 = sp + 40|0;
 $13 = sp + 32|0;
 $14 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF64[$6>>3] = 0.0;
 HEAPF64[$7>>3] = 0.0;
 HEAPF64[$8>>3] = 0.0;
 $18 = $4;
 _AT_get_material_data($18,$6,0,0,0,0,$7,$8);
 $19 = +HEAPF64[$7>>3];
 $20 = $19 > 0.0;
 if (!($20)) {
  ___assert_fail((72111|0),(71762|0),242,(72181|0));
  // unreachable;
 }
 $21 = +HEAPF64[$8>>3];
 $22 = $21 > 0.0;
 if (!($22)) {
  ___assert_fail((72125|0),(71762|0),243,(72181|0));
  // unreachable;
 }
 $23 = $3;
 $24 = (+_AT_max_E_transfer_MeV_single($23));
 $25 = $24 * 1000.0;
 $9 = $25;
 $26 = $9;
 $27 = $26 > 0.0;
 if (!($27)) {
  ___assert_fail((72205|0),(71762|0),248,(72181|0));
  // unreachable;
 }
 HEAPF64[$10>>3] = 0.0;
 HEAPF64[$11>>3] = 0.0;
 HEAPF64[$12>>3] = 0.0;
 HEAPF64[$13>>3] = 0.0;
 HEAPF64[$14>>3] = 0.0;
 $15 = 0.0;
 $28 = $5;
 $29 = ($28|0)==(7);
 if ($29) {
  $30 = $3;
  $31 = (+_AT_beta_from_E_single($30));
  $15 = $31;
  $32 = +HEAPF64[$7>>3];
  $33 = +HEAPF64[$8>>3];
  _AT_ER_Tabata_constants($32,$33,$10,$11,$12,$13,$14);
 }
 $16 = 0.0;
 $34 = $5;
 switch ($34|0) {
 case 2:  {
  $35 = $9;
  $36 = (+_AT_ER_ButtsKatz_range_g_cm2($35));
  $16 = $36;
  break;
 }
 case 3:  {
  $37 = $9;
  $38 = (+_AT_ER_Waligorski_range_g_cm2($37));
  $16 = $38;
  break;
 }
 case 6:  {
  $39 = $9;
  $40 = (+_AT_ER_Edmund_range_g_cm2($39));
  $16 = $40;
  break;
 }
 case 4:  {
  $41 = $3;
  $42 = (+_AT_ER_Geiss_range_g_cm2($41));
  $16 = $42;
  break;
 }
 case 5:  {
  $43 = $3;
  $44 = (+_AT_ER_Scholz_range_g_cm2($43));
  $16 = $44;
  break;
 }
 case 8:  {
  $45 = $3;
  $46 = (+_AT_ER_Scholz_new_range_g_cm2($45));
  $16 = $46;
  break;
 }
 case 7:  {
  $47 = $15;
  $48 = +HEAPF64[$10>>3];
  $49 = +HEAPF64[$11>>3];
  $50 = +HEAPF64[$12>>3];
  $51 = +HEAPF64[$13>>3];
  $52 = +HEAPF64[$14>>3];
  $53 = (+_AT_ER_Tabata_range_g_cm2($47,$48,$49,$50,$51,$52));
  $16 = $53;
  break;
 }
 case 9:  {
  $54 = $3;
  $55 = (+_AT_ER_AM_RadDiff_range_g_cm2($54));
  $16 = $55;
  break;
 }
 default: {
  $56 = $3;
  $16 = $56;
 }
 }
 $57 = +HEAPF64[$6>>3];
 $58 = $57 > 0.0;
 if (!($58)) {
  ___assert_fail((72154|0),(71762|0),297,(72181|0));
  // unreachable;
 }
 $59 = $16;
 $17 = $59;
 $60 = $5;
 $61 = ($60|0)!=(1);
 $62 = $5;
 $63 = ($62|0)!=(9);
 $or$cond = $61 & $63;
 if (!($or$cond)) {
  $68 = $17;
  STACKTOP = sp;return (+$68);
 }
 $64 = +HEAPF64[$6>>3];
 $65 = 0.01 / $64;
 $66 = $17;
 $67 = $66 * $65;
 $17 = $67;
 $68 = $17;
 STACKTOP = sp;return (+$68);
}
function _AT_xi_keV($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = (+_AT_average_Z_from_material_no($13));
 $8 = $14;
 $15 = $6;
 $16 = (+_AT_average_A_from_material_no($15));
 $9 = $16;
 $17 = $6;
 $18 = (+_AT_density_g_cm3_from_material_no($17));
 $10 = $18;
 $19 = $4;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $5;
 $22 = (_AT_Z_from_particle_no_single($21)|0);
 $23 = (+($22|0));
 $12 = $23;
 $24 = $8;
 $25 = $9;
 $26 = $24 / $25;
 $27 = 153.5 * $26;
 $28 = $12;
 $29 = $12;
 $30 = $28 * $29;
 $31 = $27 * $30;
 $32 = $11;
 $33 = $11;
 $34 = $32 * $33;
 $35 = $31 / $34;
 $36 = $10;
 $37 = $35 * $36;
 $38 = $7;
 $39 = $38 / 1.0E+4;
 $40 = $37 * $39;
 STACKTOP = sp;return (+$40);
}
function _AT_mean_energy_loss_keV($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 28|0;
 $8 = sp;
 HEAPF64[$4>>3] = $0;
 HEAP32[$5>>2] = $1;
 $6 = $2;
 $7 = $3;
 HEAPF64[$8>>3] = 0.0;
 $9 = $6;
 (_AT_Stopping_Power(76667,1,$4,$5,$9,$8)|0);
 $10 = +HEAPF64[$8>>3];
 $11 = $7;
 $12 = $10 * $11;
 STACKTOP = sp;return (+$12);
}
function _AT_kappa_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (+_AT_xi_keV($8,$9,$10,$11));
 $13 = $4;
 $14 = (+_AT_max_E_transfer_MeV_single($13));
 $15 = $14 * 1000.0;
 $16 = $12 / $15;
 STACKTOP = sp;return (+$16);
}
function _AT_kappa_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $10;
  $26 = $12;
  $27 = (($25) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = (+_AT_kappa_single($19,$23,$24,$28));
  $30 = $11;
  $31 = $12;
  $32 = (($30) + ($31<<3)|0);
  HEAPF64[$32>>3] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_Landau_PDF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_gsl_ran_landau_pdf($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_Landau_IDF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_CL_ranlan_idf($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_mean_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $10;
  $26 = $12;
  $27 = (($25) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = (+_AT_lambda_mean_single($19,$23,$24,$28));
  $30 = $11;
  $31 = $12;
  $32 = (($30) + ($31<<3)|0);
  HEAPF64[$32>>3] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_mean_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = (+_AT_kappa_single($10,$11,$12,$13));
 $8 = $14;
 $15 = $4;
 $16 = (+_AT_beta_from_E_single($15));
 $9 = $16;
 $17 = $9;
 $18 = $9;
 $19 = $17 * $18;
 $20 = -0.42278433509000002 - $19;
 $21 = $8;
 $22 = (+Math_log((+$21)));
 $23 = $20 - $22;
 STACKTOP = sp;return (+$23);
}
function _AT_lambda_max_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $14 = $12;
  $15 = $6;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $7;
  $18 = $12;
  $19 = (($17) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $8;
  $22 = $12;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $9;
  $26 = $10;
  $27 = $12;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = (+_AT_lambda_mean_single($20,$24,$25,$29));
  $13 = $30;
  $31 = $13;
  $32 = (+_AT_lambda_max_single($31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_max_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = 1.1934 * $2;
 $4 = 0.60714999999999997 + $3;
 $5 = $1;
 $6 = 0.052381999999999998 * $5;
 $7 = 0.67793999999999999 + $6;
 $8 = $1;
 $9 = 0.74441999999999997 * $8;
 $10 = 0.94752999999999998 + $9;
 $11 = (+Math_exp((+$10)));
 $12 = $7 * $11;
 $13 = $4 + $12;
 STACKTOP = sp;return (+$13);
}
function _AT_lambda_landau_from_energy_loss_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $5;
 $32 = $13;
 $33 = $31 - $32;
 $34 = $12;
 $35 = $33 / $34;
 $36 = $35 - 0.42278433509000002;
 $37 = $11;
 $38 = $11;
 $39 = $37 * $38;
 $40 = $36 - $39;
 $41 = $10;
 $42 = (+Math_log((+$41)));
 $43 = $40 - $42;
 STACKTOP = sp;return (+$43);
}
function _AT_lambda_landau_from_energy_loss_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $10;
  $24 = $11;
  $25 = $12;
  $26 = (+_AT_lambda_landau_from_energy_loss_single($21,$22,$23,$24,$25));
  $27 = $13;
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $14;
  $31 = (($30) + 1)|0;
  $14 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_energy_loss_from_lambda_landau_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $12;
 $32 = $5;
 $33 = $32 + 0.42278433509000002;
 $34 = $11;
 $35 = $11;
 $36 = $34 * $35;
 $37 = $33 + $36;
 $38 = $10;
 $39 = (+Math_log((+$38)));
 $40 = $37 + $39;
 $41 = $31 * $40;
 $42 = $13;
 $43 = $41 + $42;
 STACKTOP = sp;return (+$43);
}
function _AT_energy_loss_from_lambda_landau_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $11;
  $31 = $12;
  $32 = $14;
  $33 = (($31) + ($32<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+_AT_energy_loss_from_lambda_landau_single($21,$25,$29,$30,$34));
  $36 = $13;
  $37 = $14;
  $38 = (($36) + ($37<<3)|0);
  HEAPF64[$38>>3] = $35;
  $39 = $14;
  $40 = (($39) + 1)|0;
  $14 = $40;
 }
 STACKTOP = sp;return;
}
function _AT_energy_loss_from_lambda_vavilov_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $12;
 $32 = $5;
 $33 = $10;
 $34 = $32 / $33;
 $35 = $34 + 0.42278433509000002;
 $36 = $11;
 $37 = $11;
 $38 = $36 * $37;
 $39 = $35 + $38;
 $40 = $31 * $39;
 $41 = $13;
 $42 = $40 + $41;
 STACKTOP = sp;return (+$42);
}
function _AT_energy_loss_from_lambda_vavilov_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $11;
  $31 = $12;
  $32 = $14;
  $33 = (($31) + ($32<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+_AT_energy_loss_from_lambda_vavilov_single($21,$25,$29,$30,$34));
  $36 = $13;
  $37 = $14;
  $38 = (($36) + ($37<<3)|0);
  HEAPF64[$38>>3] = $35;
  $39 = $14;
  $40 = (($39) + 1)|0;
  $14 = $40;
 }
 STACKTOP = sp;return;
}
function _AT_Landau_energy_loss_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $17 = $7;
 $18 = (_calloc($17,8)|0);
 $14 = $18;
 $19 = $9;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = (+_AT_xi_keV($19,$20,$21,$22));
 $15 = $23;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = $14;
 _AT_lambda_landau_from_energy_loss_multi($24,$25,$26,$27,$28,$29,$30);
 $31 = $7;
 $32 = $14;
 $33 = $13;
 _AT_Landau_PDF($31,$32,$33);
 $16 = 0;
 while(1) {
  $34 = $16;
  $35 = $7;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $15;
  $38 = $13;
  $39 = $16;
  $40 = (($38) + ($39<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $41 / $37;
  HEAPF64[$40>>3] = $42;
  $43 = $16;
  $44 = (($43) + 1)|0;
  $16 = $44;
 }
 STACKTOP = sp;return;
}
function _AT_Vavilov_PDF($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1840|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1840|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $7;
 $13 = $8;
 $14 = $8;
 $15 = $13 * $14;
 _ROOT_vavset($10,$12,$15);
 $11 = 0;
 while(1) {
  $16 = $11;
  $17 = $5;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = $11;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (+_ROOT_vav_pdf($22,$10));
  $24 = $9;
  $25 = $11;
  $26 = (($24) + ($25<<3)|0);
  HEAPF64[$26>>3] = $23;
  $27 = $11;
  $28 = (($27) + 1)|0;
  $11 = $28;
 }
 STACKTOP = sp;return;
}
function _AT_Vavilov_IDF($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1824|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1824|0);
 $11 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $12 = $10;
  $13 = $5;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $7;
  $16 = $10;
  $17 = (($15) + ($16<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $8;
  $20 = $10;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $8;
  $24 = $10;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $22 * $26;
  _ROOT_vavset($11,$18,$27);
  $28 = $6;
  $29 = $10;
  $30 = (($28) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = (+_ROOT_val_idf($31,$11));
  $33 = $9;
  $34 = $10;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $10;
  $37 = (($36) + 1)|0;
  $10 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_vavilov_from_energy_loss_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $10;
 $32 = $5;
 $33 = $13;
 $34 = $32 - $33;
 $35 = $12;
 $36 = $34 / $35;
 $37 = $36 - 0.42278433509000002;
 $38 = $11;
 $39 = $11;
 $40 = $38 * $39;
 $41 = $37 - $40;
 $42 = $31 * $41;
 STACKTOP = sp;return (+$42);
}
function _AT_lambda_vavilov_from_energy_loss_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $10;
  $24 = $11;
  $25 = $12;
  $26 = (+_AT_lambda_vavilov_from_energy_loss_single($21,$22,$23,$24,$25));
  $27 = $13;
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $14;
  $31 = (($30) + 1)|0;
  $14 = $31;
 }
 STACKTOP = sp;return;
}
function _AT_Vavilov_energy_loss_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $9;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = (+_AT_kappa_single($19,$20,$21,$22));
 $14 = $23;
 $24 = $9;
 $25 = (+_AT_beta_from_E_single($24));
 $15 = $25;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = (+_AT_xi_keV($26,$27,$28,$29));
 $16 = $30;
 $31 = $7;
 $32 = (_calloc($31,8)|0);
 $17 = $32;
 $33 = $7;
 $34 = $8;
 $35 = $9;
 $36 = $10;
 $37 = $11;
 $38 = $12;
 $39 = $17;
 _AT_lambda_landau_from_energy_loss_multi($33,$34,$35,$36,$37,$38,$39);
 $40 = $7;
 $41 = $17;
 $42 = $14;
 $43 = $15;
 $44 = $13;
 _AT_Vavilov_PDF($40,$41,$42,$43,$44);
 $18 = 0;
 while(1) {
  $45 = $18;
  $46 = $7;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   break;
  }
  $48 = $16;
  $49 = $13;
  $50 = $18;
  $51 = (($49) + ($50<<3)|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $52 / $48;
  HEAPF64[$51>>3] = $53;
  $54 = $18;
  $55 = (($54) + 1)|0;
  $18 = $55;
 }
 STACKTOP = sp;return;
}
function _AT_energy_loss_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $9;
 $16 = $10;
 $17 = $11;
 $18 = $12;
 $19 = (+_AT_kappa_single($15,$16,$17,$18));
 $14 = $19;
 $20 = $14;
 $21 = $20 <= 0.01;
 if ($21) {
  $22 = $7;
  $23 = $8;
  $24 = $9;
  $25 = $10;
  $26 = $11;
  $27 = $12;
  $28 = $13;
  _AT_Landau_energy_loss_distribution($22,$23,$24,$25,$26,$27,$28);
  STACKTOP = sp;return;
 }
 $29 = $14;
 $30 = $29 < 10.0;
 $31 = $7;
 $32 = $8;
 $33 = $9;
 $34 = $10;
 $35 = $11;
 $36 = $12;
 $37 = $13;
 if ($30) {
  _AT_Vavilov_energy_loss_distribution($31,$32,$33,$34,$35,$36,$37);
  STACKTOP = sp;return;
 } else {
  _AT_Gauss_energy_loss_distribution($31,$32,$33,$34,$35,$36,$37);
  STACKTOP = sp;return;
 }
}
function _AT_Gauss_energy_loss_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $26 = (+_AT_mean_energy_loss_keV($22,$23,$24,$25));
 $14 = $26;
 $27 = $9;
 $28 = $10;
 $29 = $11;
 $30 = $12;
 $31 = (+_AT_kappa_single($27,$28,$29,$30));
 $15 = $31;
 $32 = $9;
 $33 = (+_AT_beta_from_E_single($32));
 $16 = $33;
 $34 = $9;
 $35 = $10;
 $36 = $11;
 $37 = $12;
 $38 = (+_AT_xi_keV($34,$35,$36,$37));
 $17 = $38;
 $39 = $17;
 $40 = $17;
 $41 = $39 * $40;
 $42 = $15;
 $43 = $41 / $42;
 $44 = $16;
 $45 = $16;
 $46 = $44 * $45;
 $47 = $46 / 2.0;
 $48 = 1.0 - $47;
 $49 = $43 * $48;
 $50 = (+Math_sqrt((+$49)));
 $18 = $50;
 $51 = $7;
 $52 = (_calloc($51,8)|0);
 $19 = $52;
 $20 = 0;
 while(1) {
  $53 = $20;
  $54 = $7;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = $8;
  $57 = $20;
  $58 = (($56) + ($57<<3)|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $14;
  $61 = $59 - $60;
  $62 = $18;
  $63 = $61 / $62;
  $64 = $19;
  $65 = $20;
  $66 = (($64) + ($65<<3)|0);
  HEAPF64[$66>>3] = $63;
  $67 = $20;
  $68 = (($67) + 1)|0;
  $20 = $68;
 }
 $69 = $7;
 $70 = $19;
 $71 = $13;
 _AT_Gauss_PDF($69,$70,$71);
 $21 = 0;
 while(1) {
  $72 = $21;
  $73 = $7;
  $74 = ($72|0)<($73|0);
  if (!($74)) {
   break;
  }
  $75 = $18;
  $76 = $13;
  $77 = $21;
  $78 = (($76) + ($77<<3)|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $79 / $75;
  HEAPF64[$78>>3] = $80;
  $81 = $21;
  $82 = (($81) + 1)|0;
  $21 = $82;
 }
 $83 = $19;
 _free($83);
 STACKTOP = sp;return;
}
function _AT_Gauss_PDF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_gsl_ran_ugaussian_pdf($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_lambda_Vavilov_Mode($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1888|0);
 $4 = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $3;
 $16 = $14 * $15;
 _ROOT_vavset($4,$13,$16);
 $17 = $2;
 $18 = (+Math_log((+$17)));
 $19 = -0.42278433509846713 - $18;
 $20 = $3;
 $21 = $3;
 $22 = $20 * $21;
 $23 = $19 - $22;
 $5 = $23;
 $24 = $5;
 $25 = $24 > -0.22317200000000001;
 if ($25) {
  $5 = -0.22317200000000001;
 }
 $6 = 0.01;
 while(1) {
  $26 = $5;
  $27 = $6;
  $28 = $26 - $27;
  $29 = (+_ROOT_vav_pdf($28,$4));
  $8 = $29;
  $30 = $5;
  $31 = (+_ROOT_vav_pdf($30,$4));
  $9 = $31;
  $32 = $5;
  $33 = $6;
  $34 = $32 + $33;
  $35 = (+_ROOT_vav_pdf($34,$4));
  $10 = $35;
  $36 = $10;
  $37 = $8;
  $38 = $36 - $37;
  $39 = 0.5 * $38;
  $40 = $6;
  $41 = $39 / $40;
  $11 = $41;
  $42 = $10;
  $43 = $9;
  $44 = 2.0 * $43;
  $45 = $42 - $44;
  $46 = $8;
  $47 = $45 + $46;
  $48 = $6;
  $49 = $6;
  $50 = $48 * $49;
  $51 = $47 / $50;
  $12 = $51;
  $52 = $12;
  $53 = $52 != 0.0;
  if ($53) {
   $54 = $11;
   $55 = - $54;
   $56 = $12;
   $57 = $55 / $56;
   $7 = $57;
  } else {
   $7 = 0.0;
  }
  $58 = $7;
  $59 = $5;
  $60 = $59 + $58;
  $5 = $60;
  $61 = $7;
  $62 = (+Math_abs((+$61)));
  $63 = $6;
  $64 = $62 < $63;
  if ($64) {
   $65 = $7;
   $66 = (+Math_abs((+$65)));
   $67 = 0.10000000000000001 * $66;
   $6 = $67;
  }
  $68 = $7;
  $69 = (+Math_abs((+$68)));
  $70 = $69 > 1.0000000000000001E-5;
  if (!($70)) {
   break;
  }
 }
 $71 = $5;
 STACKTOP = sp;return (+$71);
}
function _AT_lambda_Vavilov_FWHM_left($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1888|0);
 $5 = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $14 = $2;
 $15 = $3;
 $16 = (+_AT_lambda_Vavilov_Mode($14,$15));
 $4 = $16;
 $17 = $2;
 $18 = $3;
 $19 = $3;
 $20 = $18 * $19;
 _ROOT_vavset($5,$17,$20);
 $21 = $4;
 $22 = (+_ROOT_vav_pdf($21,$5));
 $23 = $22 * 0.5;
 $6 = $23;
 $24 = $4;
 $25 = $24 - 1.3636999999999999;
 $4 = $25;
 $7 = 0.01;
 while(1) {
  $26 = $4;
  $27 = (+_ROOT_vav_pdf($26,$5));
  $9 = $27;
  $28 = $4;
  $29 = $7;
  $30 = $28 - $29;
  $31 = (+_ROOT_vav_pdf($30,$5));
  $10 = $31;
  $32 = $4;
  $33 = $7;
  $34 = $32 + $33;
  $35 = (+_ROOT_vav_pdf($34,$5));
  $11 = $35;
  $36 = $9;
  $37 = $6;
  $38 = $36 - $37;
  $12 = $38;
  $39 = $11;
  $40 = $10;
  $41 = $39 - $40;
  $42 = 0.5 * $41;
  $43 = $7;
  $44 = $42 / $43;
  $13 = $44;
  $45 = $13;
  $46 = $45 != 0.0;
  if ($46) {
   $47 = $12;
   $48 = - $47;
   $49 = $13;
   $50 = $48 / $49;
   $8 = $50;
  } else {
   $8 = 0.0;
  }
  $51 = $8;
  $52 = $4;
  $53 = $52 + $51;
  $4 = $53;
  $54 = $8;
  $55 = (+Math_abs((+$54)));
  $56 = $7;
  $57 = $55 < $56;
  if ($57) {
   $58 = $8;
   $59 = (+Math_abs((+$58)));
   $60 = 0.10000000000000001 * $59;
   $7 = $60;
  }
  $61 = $8;
  $62 = (+Math_abs((+$61)));
  $63 = $62 > 1.0000000000000001E-5;
  if (!($63)) {
   break;
  }
 }
 $64 = $4;
 STACKTOP = sp;return (+$64);
}
function _AT_lambda_Vavilov_FWHM_right($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1888|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1888|0);
 $5 = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $14 = $2;
 $15 = $3;
 $16 = (+_AT_lambda_Vavilov_Mode($14,$15));
 $4 = $16;
 $17 = $2;
 $18 = $3;
 $19 = $3;
 $20 = $18 * $19;
 _ROOT_vavset($5,$17,$20);
 $21 = $4;
 $22 = (+_ROOT_vav_pdf($21,$5));
 $23 = $22 * 0.5;
 $6 = $23;
 $24 = $4;
 $25 = $24 + 2.6549999999999998;
 $4 = $25;
 $7 = 0.01;
 while(1) {
  $26 = $4;
  $27 = (+_ROOT_vav_pdf($26,$5));
  $9 = $27;
  $28 = $4;
  $29 = $7;
  $30 = $28 - $29;
  $31 = (+_ROOT_vav_pdf($30,$5));
  $10 = $31;
  $32 = $4;
  $33 = $7;
  $34 = $32 + $33;
  $35 = (+_ROOT_vav_pdf($34,$5));
  $11 = $35;
  $36 = $9;
  $37 = $6;
  $38 = $36 - $37;
  $12 = $38;
  $39 = $11;
  $40 = $10;
  $41 = $39 - $40;
  $42 = 0.5 * $41;
  $43 = $7;
  $44 = $42 / $43;
  $13 = $44;
  $45 = $13;
  $46 = $45 != 0.0;
  if ($46) {
   $47 = $12;
   $48 = - $47;
   $49 = $13;
   $50 = $48 / $49;
   $8 = $50;
  } else {
   $8 = 0.0;
  }
  $51 = $8;
  $52 = $4;
  $53 = $52 + $51;
  $4 = $53;
  $54 = $8;
  $55 = (+Math_abs((+$54)));
  $56 = $7;
  $57 = $55 < $56;
  if ($57) {
   $58 = $8;
   $59 = (+Math_abs((+$58)));
   $60 = 0.10000000000000001 * $59;
   $7 = $60;
  }
  $61 = $8;
  $62 = (+Math_abs((+$61)));
  $63 = $62 > 1.0000000000000001E-5;
  if (!($63)) {
   break;
  }
 }
 $64 = $4;
 STACKTOP = sp;return (+$64);
}
function _AT_lambda_Vavilov_FWHM($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (+_AT_lambda_Vavilov_FWHM_right($4,$5));
 $7 = (+_AT_lambda_Landau_FWHM_left());
 $8 = $6 - $7;
 STACKTOP = sp;return (+$8);
}
function _AT_lambda_Landau_FWHM_left() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +-1.5894999999999999;
}
function _AT_energy_loss_keV_Vavilov_FWHM($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +0;
}
function _AT_energy_loss_keV_Vavilov_Mode($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +0;
}
function _AT_lambda_Vavilov_Mean($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (+Math_log((+$4)));
 $6 = -1.42278433509 - $5;
 $7 = $3;
 $8 = $3;
 $9 = $7 * $8;
 $10 = $6 - $9;
 STACKTOP = sp;return (+$10);
}
function _AT_lambda_Vavilov_Variance($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = 0.5 * $4;
 $6 = $3;
 $7 = $5 * $6;
 $8 = 1.0 - $7;
 $9 = $2;
 $10 = $8 / $9;
 STACKTOP = sp;return (+$10);
}
function _AT_lambda_Vavilov_Skewness($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $3;
 $6 = $4 * $5;
 $7 = $6 / 3.0;
 $8 = 0.5 - $7;
 $9 = $2;
 $10 = $2;
 $11 = $9 * $10;
 $12 = $8 / $11;
 $13 = $3;
 $14 = 0.5 * $13;
 $15 = $3;
 $16 = $14 * $15;
 $17 = 1.0 - $16;
 $18 = $2;
 $19 = $17 / $18;
 $20 = (+Math_pow((+$19),-1.5));
 $21 = $12 * $20;
 STACKTOP = sp;return (+$21);
}
function _AT_lambda_Landau_Mode() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +-0.2258;
}
function _AT_energy_loss_keV_Landau_Mode($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +0;
}
function _AT_lambda_Landau_FWHM_right() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +2.4291999999999998;
}
function _AT_lambda_Landau_FWHM() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_AT_lambda_Landau_FWHM_right());
 $1 = (+_AT_lambda_Landau_FWHM_left());
 $2 = $0 - $1;
 return (+$2);
}
function _AT_energy_loss_keV_Landau_FWHM($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +0;
}
function _AT_lambda_Landau_Mean($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (+Math_log((+$4)));
 $6 = -0.42278433509000002 - $5;
 $7 = $3;
 $8 = $3;
 $9 = $7 * $8;
 $10 = $6 - $9;
 STACKTOP = sp;return (+$10);
}
function _AT_Gauss_IDF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_gsl_cdf_ugaussian_Pinv($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return;
}
function _AT_energy_loss_from_lambda_gauss_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (+_AT_kappa_single($14,$15,$16,$17));
 $10 = $18;
 $19 = $6;
 $20 = (+_AT_beta_from_E_single($19));
 $11 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = (+_AT_xi_keV($21,$22,$23,$24));
 $12 = $25;
 $26 = $6;
 $27 = $7;
 $28 = $8;
 $29 = $9;
 $30 = (+_AT_mean_energy_loss_keV($26,$27,$28,$29));
 $13 = $30;
 $31 = $5;
 $32 = $12;
 $33 = $12;
 $34 = $32 * $33;
 $35 = $10;
 $36 = $34 / $35;
 $37 = $11;
 $38 = $11;
 $39 = $37 * $38;
 $40 = $39 / 2.0;
 $41 = 1.0 - $40;
 $42 = $36 * $41;
 $43 = (+Math_sqrt((+$42)));
 $44 = $31 * $43;
 $45 = $13;
 $46 = $44 + $45;
 STACKTOP = sp;return (+$46);
}
function _AT_energy_loss_from_lambda_gauss_multi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $11;
  $31 = $12;
  $32 = $14;
  $33 = (($31) + ($32<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = (+_AT_energy_loss_from_lambda_gauss_single($21,$25,$29,$30,$34));
  $36 = $13;
  $37 = $14;
  $38 = (($36) + ($37<<3)|0);
  HEAPF64[$38>>3] = $35;
  $39 = $14;
  $40 = (($39) + 1)|0;
  $14 = $40;
 }
 STACKTOP = sp;return;
}
function _AT_Gauss_Mode() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +0;
}
function _AT_Gauss_Mean() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +0;
}
function _AT_Gauss_FWHM() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +0;
}
function _AT_energy_loss_mode($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = (+_AT_kappa_single($10,$11,$12,$13));
 $9 = $14;
 $15 = $9;
 $16 = $15 <= 0.01;
 if ($16) {
  $17 = $5;
  $18 = $6;
  $19 = $7;
  $20 = $8;
  $21 = (+_AT_energy_loss_keV_Landau_Mode($17,$18,$19,$20));
  $4 = $21;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 }
 $22 = $9;
 $23 = $22 < 10.0;
 $24 = $5;
 $25 = $6;
 $26 = $7;
 $27 = $8;
 if ($23) {
  $28 = (+_AT_energy_loss_keV_Vavilov_Mode($24,$25,$26,$27));
  $4 = $28;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 } else {
  $29 = (+_AT_mean_energy_loss_keV($24,$25,$26,$27));
  $4 = $29;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 }
 return +(0.0);
}
function _AT_energy_loss_FWHM($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = (+_AT_kappa_single($10,$11,$12,$13));
 $9 = $14;
 $15 = $9;
 $16 = $15 <= 0.01;
 if ($16) {
  $17 = $5;
  $18 = $6;
  $19 = $7;
  $20 = $8;
  $21 = (+_AT_energy_loss_keV_Landau_FWHM($17,$18,$19,$20));
  $4 = $21;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 }
 $22 = $9;
 $23 = $22 < 10.0;
 if ($23) {
  $24 = $5;
  $25 = $6;
  $26 = $7;
  $27 = $8;
  $28 = (+_AT_energy_loss_keV_Vavilov_FWHM($24,$25,$26,$27));
  $4 = $28;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 } else {
  $4 = 0.0;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 }
 return +(0.0);
}
function _AT_get_error_msg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 0;
}
function _AT_check_energy_range_single_particle($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 switch ($7|0) {
 case 0:  {
  $6 = 0.001;
  $5 = 1.0E+4;
  break;
 }
 case 1:  {
  $6 = 1.0;
  $5 = 250.0;
  break;
 }
 case 2:  {
  $6 = 0.10000000000000001;
  $5 = 1000.0;
  break;
 }
 case 3:  {
  $6 = 3.0;
  $5 = 300.0;
  break;
 }
 default: {
  $6 = 1.0;
  $5 = 250.0;
 }
 }
 $8 = $3;
 $9 = $6;
 $10 = $8 < $9;
 if (!($10)) {
  $11 = $3;
  $12 = $5;
  $13 = $11 > $12;
  if (!($13)) {
   $2 = 0;
   $14 = $2;
   STACKTOP = sp;return ($14|0);
  }
 }
 $2 = 2;
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function _AT_check_energy_range_single_field($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = (_AT_check_energy_range_single_particle($15,$16)|0);
  $7 = $17;
  $18 = $7;
  $19 = ($18|0)!=(0);
  if ($19) {
   label = 4;
   break;
  }
  $21 = $8;
  $22 = (($21) + 1)|0;
  $8 = $22;
 }
 if ((label|0) == 4) {
  $20 = $7;
  $3 = $20;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _AT_check_particle_no_single_particle($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_AT_Z_from_particle_no_single($3)|0);
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = $2;
  $7 = (_AT_A_from_particle_no_single($6)|0);
  $8 = ($7|0)<(0);
  if (!($8)) {
   $1 = 0;
   $9 = $1;
   STACKTOP = sp;return ($9|0);
  }
 }
 $1 = 3;
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _AT_check_particle_no_single_field($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   label = 6;
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_AT_check_particle_no_single_particle($13)|0);
  $5 = $14;
  $15 = $5;
  $16 = ($15|0)!=(0);
  if ($16) {
   label = 4;
   break;
  }
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 if ((label|0) == 4) {
  $17 = $5;
  $2 = $17;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _AT_Gamma_index_from_material_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = -1;
 $3 = 1;
 $4 = $3;
 $5 = HEAP32[11400]|0;
 _find_elements_int($1,$4,(45604),$5,$2);
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _AT_Gamma_name_from_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_AT_Gamma_index_from_material_number($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(-1);
 $9 = $3;
 if ($8) {
  $10 = $4;
  $11 = ((46416) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  (_strcpy($9,$12)|0);
  STACKTOP = sp;return;
 } else {
  (_strcpy($9,72529)|0);
  STACKTOP = sp;return;
 }
}
function _AT_Gamma_number_of_parameters($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_Gamma_index_from_material_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(72552,$vararg_buffer)|0);
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $3;
  $10 = ((45632) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_gamma_response($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0;
 var $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0;
 var $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0;
 var $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0;
 var $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0;
 var $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0.0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(864|0);
 $37 = sp + 320|0;
 $38 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $39 = $4&1;
 $10 = $39;
 $11 = $5;
 $40 = $6;
 $41 = ($40|0)>(0);
 if (!($41)) {
  ___assert_fail((72582|0),(72602|0),79,(72634|0));
  // unreachable;
 }
 $42 = $7;
 $43 = ($42|0)!=(0|0);
 if (!($43)) {
  ___assert_fail((72652|0),(72602|0),80,(72634|0));
  // unreachable;
 }
 $44 = $9;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  ___assert_fail((72665|0),(72602|0),81,(72634|0));
  // unreachable;
 }
 $46 = $8;
 $47 = ($46|0)==(1);
 L10: do {
  if ($47) {
   $48 = $9;
   $49 = +HEAPF64[$48>>3];
   $14 = $49;
   $50 = $9;
   $51 = ((($50)) + 8|0);
   $52 = +HEAPF64[$51>>3];
   $15 = $52;
   $12 = 0;
   while(1) {
    $53 = $12;
    $54 = $6;
    $55 = ($53|0)<($54|0);
    if (!($55)) {
     break L10;
    }
    $56 = $10;
    $57 = $56&1;
    if ($57) {
     $58 = $11;
     $59 = $12;
     $60 = (($58) + ($59<<3)|0);
     HEAPF64[$60>>3] = 0.0;
    } else {
     $61 = $14;
     $62 = $7;
     $63 = $12;
     $64 = (($62) + ($63<<3)|0);
     $65 = +HEAPF64[$64>>3];
     $66 = $61 * $65;
     $67 = $15;
     $68 = $66 + $67;
     $69 = $11;
     $70 = $12;
     $71 = (($69) + ($70<<3)|0);
     HEAPF64[$71>>3] = $68;
    }
    $72 = $12;
    $73 = (($72) + 1)|0;
    $12 = $73;
   }
  }
 } while(0);
 $74 = $8;
 $75 = ($74|0)==(2);
 L20: do {
  if ($75) {
   $16 = 0;
   while(1) {
    $76 = $9;
    $77 = $16;
    $78 = (($76) + ($77<<3)|0);
    $79 = +HEAPF64[$78>>3];
    $80 = $79 != 0.0;
    if (!($80)) {
     break;
    }
    $81 = $16;
    $82 = (($81) + 4)|0;
    $16 = $82;
   }
   $12 = 0;
   while(1) {
    $83 = $12;
    $84 = $6;
    $85 = ($83|0)<($84|0);
    if (!($85)) {
     break;
    }
    $86 = $11;
    $87 = $12;
    $88 = (($86) + ($87<<3)|0);
    HEAPF64[$88>>3] = 0.0;
    $89 = $12;
    $90 = (($89) + 1)|0;
    $12 = $90;
   }
   $13 = 0;
   L30: while(1) {
    $91 = $13;
    $92 = $16;
    $93 = (($92|0) / 4)&-1;
    $94 = ($91|0)<($93|0);
    if (!($94)) {
     label = 39;
     break;
    }
    $95 = $9;
    $96 = $13;
    $97 = $96<<2;
    $98 = (($95) + ($97<<3)|0);
    $99 = +HEAPF64[$98>>3];
    $17 = $99;
    $100 = $9;
    $101 = $13;
    $102 = $101<<2;
    $103 = (($102) + 1)|0;
    $104 = (($100) + ($103<<3)|0);
    $105 = +HEAPF64[$104>>3];
    $18 = $105;
    $106 = $9;
    $107 = $13;
    $108 = $107<<2;
    $109 = (($108) + 2)|0;
    $110 = (($106) + ($109<<3)|0);
    $111 = +HEAPF64[$110>>3];
    $19 = $111;
    $112 = $9;
    $113 = $13;
    $114 = $113<<2;
    $115 = (($114) + 3)|0;
    $116 = (($112) + ($115<<3)|0);
    $117 = +HEAPF64[$116>>3];
    $20 = $117;
    $118 = $18;
    $119 = $118 > 0.0;
    if (!($119)) {
     label = 24;
     break;
    }
    $21 = 0.0;
    $12 = 0;
    while(1) {
     $120 = $12;
     $121 = $6;
     $122 = ($120|0)<($121|0);
     if (!($122)) {
      break;
     }
     $123 = $19;
     $124 = $123 == 1.0;
     if ($124) {
      $125 = $7;
      $126 = $12;
      $127 = (($125) + ($126<<3)|0);
      $128 = +HEAPF64[$127>>3];
      $129 = -1.0 * $128;
      $130 = $18;
      $131 = $129 / $130;
      $132 = (+Math_exp((+$131)));
      $133 = 1.0 - $132;
      $21 = $133;
     } else {
      $134 = $19;
      $135 = $134 > 0.0;
      if (!($135)) {
       label = 30;
       break L30;
      }
      $136 = $7;
      $137 = $12;
      $138 = (($136) + ($137<<3)|0);
      $139 = +HEAPF64[$138>>3];
      $140 = $139 >= 0.0;
      if (!($140)) {
       label = 32;
       break L30;
      }
      $141 = $19;
      $142 = $7;
      $143 = $12;
      $144 = (($142) + ($143<<3)|0);
      $145 = +HEAPF64[$144>>3];
      $146 = $18;
      $147 = $145 / $146;
      $148 = (+_gsl_sf_gamma_inc_P($141,$147));
      $21 = $148;
     }
     $149 = $20;
     $150 = $149 == 1.0;
     $151 = $17;
     $152 = $21;
     if ($150) {
      $153 = $152 * $151;
      $21 = $153;
     } else {
      $154 = $20;
      $155 = (+Math_pow((+$152),(+$154)));
      $156 = $151 * $155;
      $21 = $156;
     }
     $157 = $21;
     $158 = $11;
     $159 = $12;
     $160 = (($158) + ($159<<3)|0);
     $161 = +HEAPF64[$160>>3];
     $162 = $161 + $157;
     HEAPF64[$160>>3] = $162;
     $163 = $12;
     $164 = (($163) + 1)|0;
     $12 = $164;
    }
    $165 = $13;
    $166 = (($165) + 1)|0;
    $13 = $166;
   }
   if ((label|0) == 24) {
    ___assert_fail((72689|0),(72602|0),127,(72634|0));
    // unreachable;
   }
   else if ((label|0) == 30) {
    ___assert_fail((72696|0),(72602|0),135,(72634|0));
    // unreachable;
   }
   else if ((label|0) == 32) {
    ___assert_fail((72702|0),(72602|0),136,(72634|0));
    // unreachable;
   }
   else if ((label|0) == 39) {
    $167 = $10;
    $168 = $167&1;
    if (!($168)) {
     break;
    }
    $12 = 0;
    while(1) {
     $169 = $12;
     $170 = $6;
     $171 = ($169|0)<($170|0);
     if (!($171)) {
      break L20;
     }
     $172 = $11;
     $173 = $12;
     $174 = (($172) + ($173<<3)|0);
     $175 = +HEAPF64[$174>>3];
     $176 = $175 < 1.0;
     if (!($176)) {
      break;
     }
     $177 = $11;
     $178 = $12;
     $179 = (($177) + ($178<<3)|0);
     $180 = +HEAPF64[$179>>3];
     $181 = 1.0 - $180;
     $182 = (+Math_log((+$181)));
     $183 = -1.0 * $182;
     $184 = $11;
     $185 = $12;
     $186 = (($184) + ($185<<3)|0);
     HEAPF64[$186>>3] = $183;
     $187 = $12;
     $188 = (($187) + 1)|0;
     $12 = $188;
    }
    ___assert_fail((72715|0),(72602|0),151,(72634|0));
    // unreachable;
   }
  }
 } while(0);
 $189 = $8;
 $190 = ($189|0)==(3);
 L60: do {
  if ($190) {
   $191 = $9;
   $192 = +HEAPF64[$191>>3];
   $22 = $192;
   $193 = $9;
   $194 = ((($193)) + 8|0);
   $195 = +HEAPF64[$194>>3];
   $23 = $195;
   $196 = $9;
   $197 = ((($196)) + 16|0);
   $198 = +HEAPF64[$197>>3];
   $24 = $198;
   $199 = $24;
   $200 = $199 > 0.0;
   if (!($200)) {
    ___assert_fail((72726|0),(72602|0),175,(72634|0));
    // unreachable;
   }
   $201 = $23;
   $202 = $201 > 0.0;
   if (!($202)) {
    ___assert_fail((72689|0),(72602|0),176,(72634|0));
    // unreachable;
   }
   $203 = $22;
   $204 = $24;
   $205 = $203 / $204;
   $25 = $205;
   $206 = $22;
   $207 = $25;
   $208 = $206 - $207;
   $209 = $23;
   $210 = $208 / $209;
   $26 = $210;
   $12 = 0;
   while(1) {
    $211 = $12;
    $212 = $6;
    $213 = ($211|0)<($212|0);
    if (!($213)) {
     break;
    }
    $214 = $7;
    $215 = $12;
    $216 = (($214) + ($215<<3)|0);
    $217 = +HEAPF64[$216>>3];
    $218 = $23;
    $219 = $217 <= $218;
    $220 = $25;
    if ($219) {
     $221 = $7;
     $222 = $12;
     $223 = (($221) + ($222<<3)|0);
     $224 = +HEAPF64[$223>>3];
     $225 = $220 * $224;
     $226 = $26;
     $227 = 0.5 * $226;
     $228 = $7;
     $229 = $12;
     $230 = (($228) + ($229<<3)|0);
     $231 = +HEAPF64[$230>>3];
     $232 = (+_gsl_pow_2($231));
     $233 = $227 * $232;
     $234 = $225 + $233;
     $235 = $11;
     $236 = $12;
     $237 = (($235) + ($236<<3)|0);
     HEAPF64[$237>>3] = $234;
    } else {
     $238 = $23;
     $239 = $220 * $238;
     $240 = $26;
     $241 = 0.5 * $240;
     $242 = $23;
     $243 = (+_gsl_pow_2($242));
     $244 = $241 * $243;
     $245 = $239 + $244;
     $246 = $22;
     $247 = $7;
     $248 = $12;
     $249 = (($247) + ($248<<3)|0);
     $250 = +HEAPF64[$249>>3];
     $251 = $23;
     $252 = $250 - $251;
     $253 = $246 * $252;
     $254 = $245 + $253;
     $255 = $11;
     $256 = $12;
     $257 = (($255) + ($256<<3)|0);
     HEAPF64[$257>>3] = $254;
    }
    $258 = $12;
    $259 = (($258) + 1)|0;
    $12 = $259;
   }
   $260 = $10;
   $261 = $260&1;
   if ($261) {
    $12 = 0;
    while(1) {
     $262 = $12;
     $263 = $6;
     $264 = ($262|0)<($263|0);
     if (!($264)) {
      break L60;
     }
     $265 = $11;
     $266 = $12;
     $267 = (($265) + ($266<<3)|0);
     $268 = +HEAPF64[$267>>3];
     $269 = $268 < 1.0;
     if (!($269)) {
      break;
     }
     $270 = $11;
     $271 = $12;
     $272 = (($270) + ($271<<3)|0);
     $273 = +HEAPF64[$272>>3];
     $274 = 1.0 - $273;
     $275 = (+Math_log((+$274)));
     $276 = -1.0 * $275;
     $277 = $11;
     $278 = $12;
     $279 = (($277) + ($278<<3)|0);
     HEAPF64[$279>>3] = $276;
     $280 = $12;
     $281 = (($280) + 1)|0;
     $12 = $281;
    }
    ___assert_fail((72715|0),(72602|0),191,(72634|0));
    // unreachable;
   }
  }
 } while(0);
 $282 = $8;
 $283 = ($282|0)==(4);
 L83: do {
  if ($283) {
   $284 = $9;
   $285 = +HEAPF64[$284>>3];
   $27 = $285;
   $286 = $9;
   $287 = ((($286)) + 8|0);
   $288 = +HEAPF64[$287>>3];
   $28 = $288;
   $289 = $28;
   $290 = $289 > 0.0;
   if (!($290)) {
    ___assert_fail((72734|0),(72602|0),207,(72634|0));
    // unreachable;
   }
   $12 = 0;
   while(1) {
    $291 = $12;
    $292 = $6;
    $293 = ($291|0)<($292|0);
    if (!($293)) {
     break L83;
    }
    $294 = $10;
    $295 = $294&1;
    if ($295) {
     $296 = $7;
     $297 = $12;
     $298 = (($296) + ($297<<3)|0);
     $299 = +HEAPF64[$298>>3];
     $300 = $28;
     $301 = $299 / $300;
     $302 = $11;
     $303 = $12;
     $304 = (($302) + ($303<<3)|0);
     HEAPF64[$304>>3] = $301;
    } else {
     $305 = $27;
     $306 = $7;
     $307 = $12;
     $308 = (($306) + ($307<<3)|0);
     $309 = +HEAPF64[$308>>3];
     $310 = -1.0 * $309;
     $311 = $28;
     $312 = $310 / $311;
     $313 = (+Math_exp((+$312)));
     $314 = 1.0 - $313;
     $315 = $305 * $314;
     $316 = $11;
     $317 = $12;
     $318 = (($316) + ($317<<3)|0);
     HEAPF64[$318>>3] = $315;
    }
    $319 = $12;
    $320 = (($319) + 1)|0;
    $12 = $320;
   }
  }
 } while(0);
 $321 = $8;
 $322 = ($321|0)==(5);
 L96: do {
  if ($322) {
   $323 = $9;
   $324 = +HEAPF64[$323>>3];
   $29 = $324;
   $325 = $9;
   $326 = ((($325)) + 8|0);
   $327 = +HEAPF64[$326>>3];
   $30 = $327;
   $328 = $9;
   $329 = ((($328)) + 16|0);
   $330 = +HEAPF64[$329>>3];
   $31 = $330;
   $331 = $29;
   $332 = $331 > 0.0;
   if (!($332)) {
    ___assert_fail((72741|0),(72602|0),231,(72634|0));
    // unreachable;
   }
   $333 = $30;
   $334 = $333 >= 0.0;
   if (!($334)) {
    ___assert_fail((72752|0),(72602|0),232,(72634|0));
    // unreachable;
   }
   $335 = $31;
   $336 = $335 > 0.0;
   if (!($336)) {
    ___assert_fail((72763|0),(72602|0),233,(72634|0));
    // unreachable;
   }
   $12 = 0;
   while(1) {
    $337 = $12;
    $338 = $6;
    $339 = ($337|0)<($338|0);
    if (!($339)) {
     break L96;
    }
    $340 = $7;
    $341 = $12;
    $342 = (($340) + ($341<<3)|0);
    $343 = +HEAPF64[$342>>3];
    $344 = $31;
    $345 = $343 < $344;
    $346 = $29;
    if ($345) {
     $347 = $7;
     $348 = $12;
     $349 = (($347) + ($348<<3)|0);
     $350 = +HEAPF64[$349>>3];
     $351 = $346 * $350;
     $352 = $30;
     $353 = $7;
     $354 = $12;
     $355 = (($353) + ($354<<3)|0);
     $356 = +HEAPF64[$355>>3];
     $357 = (+_gsl_pow_2($356));
     $358 = $352 * $357;
     $359 = $351 + $358;
     $360 = $11;
     $361 = $12;
     $362 = (($360) + ($361<<3)|0);
     HEAPF64[$362>>3] = $359;
    } else {
     $363 = $31;
     $364 = $346 * $363;
     $365 = $30;
     $366 = $31;
     $367 = (+_gsl_pow_2($366));
     $368 = $365 * $367;
     $369 = $364 + $368;
     $370 = $29;
     $371 = $30;
     $372 = 2.0 * $371;
     $373 = $31;
     $374 = $372 * $373;
     $375 = $370 + $374;
     $376 = $7;
     $377 = $12;
     $378 = (($376) + ($377<<3)|0);
     $379 = +HEAPF64[$378>>3];
     $380 = $31;
     $381 = $379 - $380;
     $382 = $375 * $381;
     $383 = $369 + $382;
     $384 = $11;
     $385 = $12;
     $386 = (($384) + ($385<<3)|0);
     HEAPF64[$386>>3] = $383;
    }
    $387 = $10;
    $388 = $387&1;
    if (!($388)) {
     $389 = $11;
     $390 = $12;
     $391 = (($389) + ($390<<3)|0);
     $392 = +HEAPF64[$391>>3];
     $393 = - $392;
     $394 = (+Math_exp((+$393)));
     $395 = $11;
     $396 = $12;
     $397 = (($395) + ($396<<3)|0);
     HEAPF64[$397>>3] = $394;
    }
    $398 = $12;
    $399 = (($398) + 1)|0;
    $12 = $399;
   }
  }
 } while(0);
 $400 = $8;
 $401 = ($400|0)==(6);
 L118: do {
  if ($401) {
   $402 = $9;
   $403 = +HEAPF64[$402>>3];
   $32 = $403;
   $404 = $9;
   $405 = ((($404)) + 8|0);
   $406 = +HEAPF64[$405>>3];
   $33 = $406;
   $407 = $9;
   $408 = ((($407)) + 16|0);
   $409 = +HEAPF64[$408>>3];
   $34 = $409;
   $410 = $9;
   $411 = ((($410)) + 24|0);
   $412 = +HEAPF64[$411>>3];
   $35 = $412;
   $413 = $9;
   $414 = ((($413)) + 32|0);
   $415 = +HEAPF64[$414>>3];
   $36 = $415;
   $12 = 0;
   while(1) {
    $416 = $12;
    $417 = $6;
    $418 = ($416|0)<($417|0);
    if (!($418)) {
     break L118;
    }
    $419 = $10;
    $420 = $419&1;
    if ($420) {
     $421 = $33;
     $422 = $34;
     $423 = - $422;
     $424 = $7;
     $425 = $12;
     $426 = (($424) + ($425<<3)|0);
     $427 = +HEAPF64[$426>>3];
     $428 = $423 * $427;
     $429 = (+Math_exp((+$428)));
     $430 = 1.0 - $429;
     $431 = $421 * $430;
     $432 = 1.0 - $431;
     $433 = $35;
     $434 = $36;
     $435 = - $434;
     $436 = $7;
     $437 = $12;
     $438 = (($436) + ($437<<3)|0);
     $439 = +HEAPF64[$438>>3];
     $440 = $435 * $439;
     $441 = $7;
     $442 = $12;
     $443 = (($441) + ($442<<3)|0);
     $444 = +HEAPF64[$443>>3];
     $445 = $440 * $444;
     $446 = (+Math_exp((+$445)));
     $447 = 1.0 - $446;
     $448 = $433 * $447;
     $449 = $432 - $448;
     $450 = $449 > 0.0;
     if (!($450)) {
      break;
     }
     $451 = $33;
     $452 = $34;
     $453 = - $452;
     $454 = $7;
     $455 = $12;
     $456 = (($454) + ($455<<3)|0);
     $457 = +HEAPF64[$456>>3];
     $458 = $453 * $457;
     $459 = (+Math_exp((+$458)));
     $460 = 1.0 - $459;
     $461 = $451 * $460;
     $462 = 1.0 - $461;
     $463 = $35;
     $464 = $36;
     $465 = - $464;
     $466 = $7;
     $467 = $12;
     $468 = (($466) + ($467<<3)|0);
     $469 = +HEAPF64[$468>>3];
     $470 = (+_gsl_pow_2($469));
     $471 = $465 * $470;
     $472 = (+Math_exp((+$471)));
     $473 = 1.0 - $472;
     $474 = $463 * $473;
     $475 = $462 - $474;
     $476 = (+Math_log((+$475)));
     $477 = - $476;
     $478 = $11;
     $479 = $12;
     $480 = (($478) + ($479<<3)|0);
     HEAPF64[$480>>3] = $477;
    } else {
     $481 = $32;
     $482 = $33;
     $483 = $34;
     $484 = - $483;
     $485 = $7;
     $486 = $12;
     $487 = (($485) + ($486<<3)|0);
     $488 = +HEAPF64[$487>>3];
     $489 = $484 * $488;
     $490 = (+Math_exp((+$489)));
     $491 = 1.0 - $490;
     $492 = $482 * $491;
     $493 = $35;
     $494 = $36;
     $495 = - $494;
     $496 = $7;
     $497 = $12;
     $498 = (($496) + ($497<<3)|0);
     $499 = +HEAPF64[$498>>3];
     $500 = (+_gsl_pow_2($499));
     $501 = $495 * $500;
     $502 = (+Math_exp((+$501)));
     $503 = 1.0 - $502;
     $504 = $493 * $503;
     $505 = $492 + $504;
     $506 = $481 * $505;
     $507 = $11;
     $508 = $12;
     $509 = (($507) + ($508<<3)|0);
     HEAPF64[$509>>3] = $506;
    }
    $510 = $12;
    $511 = (($510) + 1)|0;
    $12 = $511;
   }
   ___assert_fail((72771|0),(72602|0),269,(72634|0));
   // unreachable;
  }
 } while(0);
 $512 = $8;
 $513 = ($512|0)==(7);
 if (!($513)) {
  STACKTOP = sp;return;
 }
 _memcpy(($37|0),(16|0),320)|0;
 _memcpy(($38|0),(336|0),320)|0;
 $12 = 0;
 while(1) {
  $514 = $12;
  $515 = $6;
  $516 = ($514|0)<($515|0);
  if (!($516)) {
   break;
  }
  $517 = $7;
  $518 = $12;
  $519 = (($517) + ($518<<3)|0);
  $520 = +HEAPF64[$519>>3];
  $521 = $520 < 100.0;
  do {
   if ($521) {
    $522 = $11;
    $523 = $12;
    $524 = (($522) + ($523<<3)|0);
    HEAPF64[$524>>3] = 1.0;
   } else {
    $525 = $7;
    $526 = $12;
    $527 = (($525) + ($526<<3)|0);
    $528 = +HEAPF64[$527>>3];
    $529 = $528 > 2.0E+6;
    if ($529) {
     $530 = $11;
     $531 = $12;
     $532 = (($530) + ($531<<3)|0);
     HEAPF64[$532>>3] = -9.9999999999999997E+98;
     break;
    } else {
     $533 = $7;
     $534 = $12;
     $535 = (($533) + ($534<<3)|0);
     $536 = +HEAPF64[$535>>3];
     $537 = (+_AT_get_interpolated_y_from_input_table($37,$38,40,$536));
     $538 = $11;
     $539 = $12;
     $540 = (($538) + ($539<<3)|0);
     HEAPF64[$540>>3] = $537;
     break;
    }
   }
  } while(0);
  $541 = $12;
  $542 = (($541) + 1)|0;
  $12 = $542;
 }
 STACKTOP = sp;return;
}
function _AT_get_gamma_response_for_average_dose($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $15 = sp + 8|0;
 $16 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $17 = $6&1;
 $13 = $17;
 HEAPF64[$15>>3] = 0.0;
 $14 = 0;
 while(1) {
  $18 = $14;
  $19 = $7;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $8;
  $22 = $14;
  $23 = (($21) + ($22<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $9;
  $26 = $14;
  $27 = (($25) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $24 * $28;
  $30 = $10;
  $31 = $14;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $29 * $33;
  $35 = +HEAPF64[$15>>3];
  $36 = $35 + $34;
  HEAPF64[$15>>3] = $36;
  $37 = $14;
  $38 = (($37) + 1)|0;
  $14 = $38;
 }
 HEAPF64[$16>>3] = 0.0;
 $14 = 1;
 $39 = $14;
 $40 = $11;
 $41 = $12;
 $42 = $13;
 $43 = $42&1;
 _AT_gamma_response($39,$15,$40,$41,$43,$16);
 $44 = +HEAPF64[$16>>3];
 STACKTOP = sp;return (+$44);
}
function _AT_get_response_distribution_from_dose_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $14 = $5&1;
 $12 = $14;
 $13 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $10;
 $18 = $11;
 $19 = $12;
 $20 = $19&1;
 $21 = $13;
 _AT_gamma_response($15,$16,$17,$18,$20,$21);
 STACKTOP = sp;return;
}
function _AT_get_ion_response_from_response_distribution($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0.0;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $7;
  $14 = $8;
  $15 = (($13) + ($14<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $5;
  $18 = $8;
  $19 = (($17) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $16 * $20;
  $22 = $6;
  $23 = $8;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $21 * $25;
  $27 = $9;
  $28 = $27 + $26;
  $9 = $28;
  $29 = $8;
  $30 = (($29) + 1)|0;
  $8 = $30;
 }
 $31 = $9;
 STACKTOP = sp;return (+$31);
}
function _AT_get_ion_response_from_dose_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $6&1;
 $13 = $16;
 $17 = $7;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = $7;
  $20 = (_calloc(8,$19)|0);
  $14 = $20;
  $21 = $7;
  $22 = $8;
  $23 = $10;
  $24 = $11;
  $25 = $12;
  $26 = $13;
  $27 = $26&1;
  $28 = $14;
  _AT_get_response_distribution_from_dose_distribution($21,$22,$23,$24,$25,$27,$28);
  $29 = $7;
  $30 = $9;
  $31 = $10;
  $32 = $14;
  $33 = (+_AT_get_ion_response_from_response_distribution($29,$30,$31,$32));
  $15 = $33;
  $34 = $14;
  _free($34);
  $35 = $15;
  STACKTOP = sp;return (+$35);
 } else {
  ___assert_fail((72858|0),(72602|0),384,(72877|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_ion_efficiency_from_dose_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $6&1;
 $13 = $16;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = $13;
 $24 = $23&1;
 $25 = (+_AT_get_ion_response_from_dose_distribution($17,$18,$19,$20,$21,$22,$24));
 $14 = $25;
 $26 = $7;
 $27 = $8;
 $28 = $9;
 $29 = $10;
 $30 = $11;
 $31 = $12;
 $32 = $13;
 $33 = $32&1;
 $34 = (+_AT_get_gamma_response_for_average_dose($26,$27,$28,$29,$30,$31,$33));
 $15 = $34;
 $35 = $14;
 $36 = $35 >= 0.0;
 if (!($36)) {
  ___assert_fail((72920|0),(72602|0),430,(72938|0));
  // unreachable;
 }
 $37 = $15;
 $38 = $37 > 0.0;
 if ($38) {
  $39 = $14;
  $40 = $15;
  $41 = $39 / $40;
  STACKTOP = sp;return (+$41);
 } else {
  ___assert_fail((72983|0),(72602|0),431,(72938|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_ion_efficiency_from_response_distribution($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $18 = $7&1;
 $15 = $18;
 $19 = $8;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = (+_AT_get_ion_response_from_response_distribution($19,$20,$21,$22));
 $16 = $23;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 $28 = $13;
 $29 = $14;
 $30 = $15;
 $31 = $30&1;
 $32 = (+_AT_get_gamma_response_for_average_dose($24,$25,$26,$27,$28,$29,$31));
 $17 = $32;
 $33 = $16;
 $34 = $33 >= 0.0;
 if (!($34)) {
  ___assert_fail((72920|0),(72602|0),459,(73002|0));
  // unreachable;
 }
 $35 = $17;
 $36 = $35 > 0.0;
 if ($36) {
  $37 = $16;
  $38 = $17;
  $39 = $37 / $38;
  STACKTOP = sp;return (+$39);
 } else {
  ___assert_fail((72983|0),(72602|0),460,(73002|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_gamma_response($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $90 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $25 = sp;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $26 = $7&1;
 $19 = $26;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $27 = $12;
 $28 = $13;
 $29 = $17;
 $30 = $18;
 $31 = $19;
 $32 = $31&1;
 $33 = $20;
 _AT_gamma_response($27,$28,$29,$30,$32,$33);
 $34 = $21;
 HEAPF64[$34>>3] = 0.0;
 HEAPF64[$25>>3] = 0.0;
 $24 = 0;
 while(1) {
  $35 = $24;
  $36 = $12;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $13;
  $39 = $24;
  $40 = (($38) + ($39<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $14;
  $43 = $24;
  $44 = (($42) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $41 * $45;
  $47 = $15;
  $48 = $24;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $46 * $50;
  $52 = +HEAPF64[$25>>3];
  $53 = $52 + $51;
  HEAPF64[$25>>3] = $53;
  $54 = $20;
  $55 = $24;
  $56 = (($54) + ($55<<3)|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $14;
  $59 = $24;
  $60 = (($58) + ($59<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $57 * $61;
  $63 = $15;
  $64 = $24;
  $65 = (($63) + ($64<<3)|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $62 * $66;
  $68 = $21;
  $69 = +HEAPF64[$68>>3];
  $70 = $69 + $67;
  HEAPF64[$68>>3] = $70;
  $71 = $24;
  $72 = (($71) + 1)|0;
  $24 = $72;
 }
 $24 = 1;
 $73 = $24;
 $74 = $17;
 $75 = $18;
 $76 = $19;
 $77 = $76&1;
 $78 = $22;
 _AT_gamma_response($73,$25,$74,$75,$77,$78);
 $79 = $21;
 $80 = +HEAPF64[$79>>3];
 $81 = $80 >= 0.0;
 if (!($81)) {
  ___assert_fail((73051|0),(72602|0),504,(73063|0));
  // unreachable;
 }
 $82 = $22;
 $83 = +HEAPF64[$82>>3];
 $84 = $83 > 0.0;
 if ($84) {
  $85 = $21;
  $86 = +HEAPF64[$85>>3];
  $87 = $22;
  $88 = +HEAPF64[$87>>3];
  $89 = $86 / $88;
  $90 = $23;
  HEAPF64[$90>>3] = $89;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((73085|0),(72602|0),505,(73063|0));
  // unreachable;
 }
}
function _AT_histo_linear_left_limit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $9;
 $12 = ($11|0)>=(0);
 if ($12) {
  $13 = $9;
  $14 = $6;
  $15 = ($13|0)<=($14|0);
  if ($15) {
   $16 = $7;
   $17 = $9;
   $18 = (+($17|0));
   $19 = $8;
   $20 = $18 * $19;
   $21 = $16 + $20;
   $22 = $10;
   HEAPF64[$22>>3] = $21;
   $5 = 0;
   $23 = $5;
   STACKTOP = sp;return ($23|0);
  }
 }
 $5 = 1;
 $23 = $5;
 STACKTOP = sp;return ($23|0);
}
function _AT_histo_logarithmic_left_limit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $9;
 $12 = ($11|0)>=(0);
 if ($12) {
  $13 = $9;
  $14 = $6;
  $15 = ($13|0)<=($14|0);
  if ($15) {
   $16 = $7;
   $17 = $8;
   $18 = $9;
   $19 = (+($18|0));
   $20 = (+Math_pow((+$17),(+$19)));
   $21 = $16 * $20;
   $22 = $10;
   HEAPF64[$22>>3] = $21;
   $5 = 0;
   $23 = $5;
   STACKTOP = sp;return ($23|0);
  }
 }
 $5 = 1;
 $23 = $5;
 STACKTOP = sp;return ($23|0);
}
function _AT_histo_left_limit($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 1;
 $13 = $9;
 $14 = ($13|0)==(0);
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $10;
 $19 = $11;
 if ($14) {
  $20 = (_AT_histo_linear_left_limit($15,$16,$17,$18,$19)|0);
  $12 = $20;
  $22 = $12;
  STACKTOP = sp;return ($22|0);
 } else {
  $21 = (_AT_histo_logarithmic_left_limit($15,$16,$17,$18,$19)|0);
  $12 = $21;
  $22 = $12;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _AT_histo_left_limits($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $10 = 0;
 while(1) {
  $13 = $10;
  $14 = $5;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = $6;
  $18 = $7;
  $19 = $8;
  $20 = $10;
  $21 = $9;
  $22 = $10;
  $23 = (($21) + ($22<<3)|0);
  $24 = (_AT_histo_left_limit($16,$17,$18,$19,$20,$23)|0);
  $12 = $24;
  $25 = $12;
  $26 = ($25|0)==(1);
  if ($26) {
   $11 = 1;
  }
  $27 = $10;
  $28 = (($27) + 1)|0;
  $10 = $28;
 }
 $29 = $11;
 STACKTOP = sp;return ($29|0);
}
function _AT_histo_linear_bin_width($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 STACKTOP = sp;return (+$8);
}
function _AT_histo_logarithmic_bin_width($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 8|0;
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (_AT_histo_logarithmic_left_limit($14,$15,$16,$17,$11)|0);
 $13 = $18;
 $19 = $13;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = $13;
  $5 = $21;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = (($25) + 1)|0;
 $27 = (_AT_histo_logarithmic_left_limit($22,$23,$24,$26,$12)|0);
 $13 = $27;
 $28 = $13;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = $13;
  $5 = $30;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 } else {
  $31 = +HEAPF64[$12>>3];
  $32 = +HEAPF64[$11>>3];
  $33 = $31 - $32;
  $34 = $10;
  HEAPF64[$34>>3] = $33;
  $5 = 0;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _AT_histo_bin_width($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 1;
 $13 = $9;
 $14 = ($13|0)==(0);
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $10;
 if ($14) {
  (+_AT_histo_linear_bin_width($15,$16,$17,$18));
  $12 = 0;
  $21 = $12;
  STACKTOP = sp;return ($21|0);
 } else {
  $19 = $11;
  $20 = (_AT_histo_logarithmic_bin_width($15,$16,$17,$18,$19)|0);
  $12 = $20;
  $21 = $12;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _AT_histo_bin_widths($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $10 = 0;
 while(1) {
  $13 = $10;
  $14 = $5;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = $6;
  $18 = $7;
  $19 = $8;
  $20 = $10;
  $21 = $9;
  $22 = $10;
  $23 = (($21) + ($22<<3)|0);
  $24 = (_AT_histo_bin_width($16,$17,$18,$19,$20,$23)|0);
  $12 = $24;
  $25 = $12;
  $26 = ($25|0)==(1);
  if ($26) {
   $11 = 1;
  }
  $27 = $10;
  $28 = (($27) + 1)|0;
  $10 = $28;
 }
 $29 = $11;
 STACKTOP = sp;return ($29|0);
}
function _AT_histo_linear_midpoint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = (_AT_histo_linear_left_limit($13,$14,$15,$16,$11)|0);
 $12 = $17;
 $18 = $12;
 $19 = ($18|0)==(1);
 if ($19) {
  $20 = $12;
  $5 = $20;
  $26 = $5;
  STACKTOP = sp;return ($26|0);
 } else {
  $21 = +HEAPF64[$11>>3];
  $22 = $8;
  $23 = 0.5 * $22;
  $24 = $21 + $23;
  $25 = $10;
  HEAPF64[$25>>3] = $24;
  $5 = 0;
  $26 = $5;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _AT_histo_logarithmic_midpoint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 8|0;
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = (($17) + 1)|0;
 $19 = (_AT_histo_logarithmic_left_limit($14,$15,$16,$18,$12)|0);
 $13 = $19;
 $20 = $13;
 $21 = ($20|0)==(1);
 if ($21) {
  $22 = $13;
  $5 = $22;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = (_AT_histo_logarithmic_left_limit($23,$24,$25,$26,$11)|0);
 $13 = $27;
 $28 = $13;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = $13;
  $5 = $30;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 } else {
  $31 = +HEAPF64[$11>>3];
  $32 = +HEAPF64[$12>>3];
  $33 = $31 * $32;
  $34 = (+Math_sqrt((+$33)));
  $35 = $10;
  HEAPF64[$35>>3] = $34;
  $5 = 0;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _AT_histo_midpoint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 1;
 $13 = $9;
 $14 = ($13|0)==(0);
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $10;
 $19 = $11;
 if ($14) {
  $20 = (_AT_histo_linear_midpoint($15,$16,$17,$18,$19)|0);
  $12 = $20;
  $22 = $12;
  STACKTOP = sp;return ($22|0);
 } else {
  $21 = (_AT_histo_logarithmic_midpoint($15,$16,$17,$18,$19)|0);
  $12 = $21;
  $22 = $12;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _AT_histo_midpoints($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $10 = 0;
 while(1) {
  $13 = $10;
  $14 = $5;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = $6;
  $18 = $7;
  $19 = $8;
  $20 = $10;
  $21 = $9;
  $22 = $10;
  $23 = (($21) + ($22<<3)|0);
  $24 = (_AT_histo_midpoint($16,$17,$18,$19,$20,$23)|0);
  $12 = $24;
  $25 = $12;
  $26 = ($25|0)==(1);
  if ($26) {
   $11 = 1;
  }
  $27 = $10;
  $28 = (($27) + 1)|0;
  $10 = $28;
 }
 $29 = $11;
 STACKTOP = sp;return ($29|0);
}
function _AT_histo_linear_step($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = ($9|0)<=(0);
 if (!($10)) {
  $11 = $7;
  $12 = $6;
  $13 = $11 <= $12;
  if (!($13)) {
   $14 = $7;
   $15 = $6;
   $16 = $14 - $15;
   $17 = $5;
   $18 = (+($17|0));
   $19 = $16 / $18;
   $20 = $8;
   HEAPF64[$20>>3] = $19;
   $4 = 0;
   $21 = $4;
   STACKTOP = sp;return ($21|0);
  }
 }
 $4 = 1;
 $21 = $4;
 STACKTOP = sp;return ($21|0);
}
function _AT_histo_logarithmic_step($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = ($9|0)<=(0);
 if (!($10)) {
  $11 = $7;
  $12 = $6;
  $13 = $11 <= $12;
  $14 = $6;
  $15 = $14 <= 0.0;
  $or$cond = $13 | $15;
  $16 = $7;
  $17 = $16 <= 0.0;
  $or$cond3 = $or$cond | $17;
  if (!($or$cond3)) {
   $18 = $7;
   $19 = $6;
   $20 = $18 / $19;
   $21 = $5;
   $22 = (+($21|0));
   $23 = 1.0 / $22;
   $24 = (+Math_pow((+$20),(+$23)));
   $25 = $8;
   HEAPF64[$25>>3] = $24;
   $4 = 0;
   $26 = $4;
   STACKTOP = sp;return ($26|0);
  }
 }
 $4 = 1;
 $26 = $4;
 STACKTOP = sp;return ($26|0);
}
function _AT_histo_step($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 1;
 $11 = $8;
 $12 = ($11|0)==(0);
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $9;
 if ($12) {
  $17 = (_AT_histo_linear_step($13,$14,$15,$16)|0);
  $10 = $17;
  $19 = $10;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = (_AT_histo_logarithmic_step($13,$14,$15,$16)|0);
  $10 = $18;
  $19 = $10;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _AT_histo_linear_n_bins($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 $10 = $9 <= 0.0;
 if (!($10)) {
  $11 = $6;
  $12 = $5;
  $13 = $11 <= $12;
  if (!($13)) {
   $14 = $6;
   $15 = $5;
   $16 = $14 - $15;
   $17 = $7;
   $18 = $16 / $17;
   $19 = (~~(($18)));
   $20 = $8;
   HEAP32[$20>>2] = $19;
   $4 = 0;
   $21 = $4;
   STACKTOP = sp;return ($21|0);
  }
 }
 $4 = 1;
 $21 = $4;
 STACKTOP = sp;return ($21|0);
}
function _AT_histo_logarithmic_n_bins($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 $10 = $9 <= 1.0;
 if (!($10)) {
  $11 = $6;
  $12 = $5;
  $13 = $11 <= $12;
  $14 = $5;
  $15 = $14 <= 0.0;
  $or$cond = $13 | $15;
  $16 = $6;
  $17 = $16 <= 0.0;
  $or$cond3 = $or$cond | $17;
  if (!($or$cond3)) {
   $18 = $6;
   $19 = $5;
   $20 = $18 / $19;
   $21 = (+Math_log((+$20)));
   $22 = $7;
   $23 = (+Math_log((+$22)));
   $24 = $21 / $23;
   $25 = (+Math_floor((+$24)));
   $26 = $25 + 1.0;
   $27 = (~~(($26)));
   $28 = $8;
   HEAP32[$28>>2] = $27;
   $4 = 0;
   $29 = $4;
   STACKTOP = sp;return ($29|0);
  }
 }
 $4 = 1;
 $29 = $4;
 STACKTOP = sp;return ($29|0);
}
function _AT_histo_n_bins($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 1;
 $11 = $8;
 $12 = ($11|0)==(0);
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $9;
 if ($12) {
  $17 = (_AT_histo_linear_n_bins($13,$14,$15,$16)|0);
  $10 = $17;
  $19 = $10;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = (_AT_histo_logarithmic_n_bins($13,$14,$15,$16)|0);
  $10 = $18;
  $19 = $10;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _AT_histo_linear_bin_no($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $8;
 $12 = $6;
 $13 = $11 - $12;
 $9 = $13;
 $14 = $9;
 $15 = $14 < 0.0;
 if ($15) {
  $4 = -1;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $16 = $7;
 $17 = $16 > 0.0;
 if (!($17)) {
  ___assert_fail((73098|0),(73109|0),400,(73138|0));
  // unreachable;
 }
 $18 = $9;
 $19 = $7;
 $20 = $18 / $19;
 $21 = (+Math_floor((+$20)));
 $22 = (~~(($21)));
 $10 = $22;
 $23 = $10;
 $24 = $5;
 $25 = (($24) - 1)|0;
 $26 = ($23|0)>($25|0);
 if ($26) {
  $4 = -2;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 } else {
  $27 = $10;
  $4 = $27;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _AT_histo_logarithmic_bin_no($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $8;
 $12 = $6;
 $13 = $11 / $12;
 $9 = $13;
 $14 = $9;
 $15 = $14 < 1.0;
 if ($15) {
  $4 = -1;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $16 = $9;
 $17 = (+_llvm_log10_f64((+$16)));
 $18 = $7;
 $19 = (+_llvm_log10_f64((+$18)));
 $20 = $17 / $19;
 $21 = (+Math_floor((+$20)));
 $22 = (~~(($21)));
 $10 = $22;
 $23 = $10;
 $24 = $5;
 $25 = (($24) - 1)|0;
 $26 = ($23|0)>($25|0);
 if ($26) {
  $4 = -2;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 } else {
  $27 = $10;
  $4 = $27;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _AT_histo_bin_no($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $9;
 $12 = ($11|0)==(0);
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $10;
 if ($12) {
  $17 = (_AT_histo_linear_bin_no($13,$14,$15,$16)|0);
  $5 = $17;
  $19 = $5;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = (_AT_histo_logarithmic_bin_no($13,$14,$15,$16)|0);
  $5 = $18;
  $19 = $5;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _AT_histo_add_single($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $10;
 $16 = ($15|0)==(0);
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $11;
 if ($16) {
  $21 = (_AT_histo_linear_bin_no($17,$18,$19,$20)|0);
  $14 = $21;
 } else {
  $22 = (_AT_histo_logarithmic_bin_no($17,$18,$19,$20)|0);
  $14 = $22;
 }
 $23 = $14;
 $24 = ($23|0)>=(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $12;
 $26 = $13;
 $27 = $14;
 $28 = (($26) + ($27<<3)|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 + $25;
 HEAPF64[$28>>3] = $30;
 STACKTOP = sp;return;
}
function _AT_histo_add_multi($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0;
 while(1) {
  $17 = $16;
  $18 = $12;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $8;
  $21 = $9;
  $22 = $10;
  $23 = $11;
  $24 = $13;
  $25 = $16;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $14;
  $29 = $16;
  $30 = (($28) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $15;
  _AT_histo_add_single($20,$21,$22,$23,$27,$31,$32);
  $33 = $16;
  $34 = (($33) + 1)|0;
  $16 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_histo_sum($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp + 8|0;
 $14 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 HEAPF64[$13>>3] = 0.0;
 HEAPF64[$14>>3] = 0.0;
 $15 = $11;
 HEAPF64[$15>>3] = 0.0;
 $12 = 0;
 while(1) {
  $16 = $12;
  $17 = $6;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = $7;
  $21 = $8;
  $22 = $9;
  $23 = $12;
  (_AT_histo_midpoint($19,$20,$21,$22,$23,$13)|0);
  $24 = $6;
  $25 = $7;
  $26 = $8;
  $27 = $9;
  $28 = $12;
  (_AT_histo_bin_width($24,$25,$26,$27,$28,$14)|0);
  $29 = $10;
  $30 = $12;
  $31 = (($29) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = +HEAPF64[$13>>3];
  $34 = $32 * $33;
  $35 = +HEAPF64[$14>>3];
  $36 = $34 * $35;
  $37 = $11;
  $38 = +HEAPF64[$37>>3];
  $39 = $38 + $36;
  HEAPF64[$37>>3] = $39;
  $40 = $12;
  $41 = (($40) + 1)|0;
  $12 = $41;
 }
 STACKTOP = sp;return;
}
function _AT_histo_normalize($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 _AT_histo_sum($12,$13,$14,$15,$16,$10);
 $17 = +HEAPF64[$10>>3];
 $18 = $17 > 0.0;
 if (!($18)) {
  ___assert_fail((73161|0),(73109|0),541,(73171|0));
  // unreachable;
 }
 $11 = 0;
 while(1) {
  $19 = $11;
  $20 = $5;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = +HEAPF64[$10>>3];
  $23 = $9;
  $24 = $11;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $26 / $22;
  HEAPF64[$25>>3] = $27;
  $28 = $11;
  $29 = (($28) + 1)|0;
  $11 = $29;
 }
 STACKTOP = sp;return;
}
function _AT_N2_to_step($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = 1.0 / $2;
 $4 = (+Math_pow(2.0,(+$3)));
 STACKTOP = sp;return (+$4);
}
function _AT_step_to_N2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (+Math_log(2.0));
 $3 = $1;
 $4 = (+Math_log((+$3)));
 $5 = $2 / $4;
 STACKTOP = sp;return (+$5);
}
function _AT_histoOld_log_bin_width($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = (($5) - 1)|0;
 $7 = (($4) + ($6<<3)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_log((+$8)));
 $10 = $3;
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_log((+$11)));
 $13 = $9 - $12;
 $14 = $2;
 $15 = (+($14|0));
 $16 = $15 - 1.0;
 $17 = $13 / $16;
 STACKTOP = sp;return (+$17);
}
function _AT_histoOld_lower_bin_limit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = (($6) + ($7<<3)|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_log((+$9)));
 $11 = $3;
 $12 = $4;
 $13 = (+_AT_histoOld_log_bin_width($11,$12));
 $14 = 0.5 * $13;
 $15 = $10 - $14;
 $16 = (+Math_exp((+$15)));
 STACKTOP = sp;return (+$16);
}
function _AT_histoOld_upper_bin_limit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = (($6) + ($7<<3)|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_log((+$9)));
 $11 = $3;
 $12 = $4;
 $13 = (+_AT_histoOld_log_bin_width($11,$12));
 $14 = 0.5 * $13;
 $15 = $10 + $14;
 $16 = (+Math_exp((+$15)));
 STACKTOP = sp;return (+$16);
}
function _AT_histoOld_get_bin_width($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = (+_AT_histoOld_lower_bin_limit($8,$9,$10));
 $6 = $11;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = (+_AT_histoOld_upper_bin_limit($12,$13,$14));
 $7 = $15;
 $16 = $7;
 $17 = $6;
 $18 = $16 - $17;
 STACKTOP = sp;return (+$18);
}
function _AT_histoOld_get_bin_widths($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $4;
  $12 = $6;
  $13 = (+_AT_histoOld_get_bin_width($10,$11,$12));
  $14 = $5;
  $15 = $6;
  $16 = (($14) + ($15<<3)|0);
  HEAPF64[$16>>3] = $13;
  $17 = $6;
  $18 = (($17) + 1)|0;
  $6 = $18;
 }
 STACKTOP = sp;return;
}
function _AT_histoOld_bin_no($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (+_AT_histoOld_lower_bin_limit($8,$9,0));
 $6 = $10;
 $11 = $3;
 $12 = $4;
 $13 = (+_AT_histoOld_log_bin_width($11,$12));
 $7 = $13;
 $14 = $5;
 $15 = (+Math_log((+$14)));
 $16 = $6;
 $17 = (+Math_log((+$16)));
 $18 = $15 - $17;
 $19 = $7;
 $20 = $18 / $19;
 $21 = (+Math_floor((+$20)));
 $22 = (~~(($21)));
 STACKTOP = sp;return ($22|0);
}
function _AT_KatzModel_KatzExtTarget_inactivation_probability($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 var $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $23 = sp + 48|0;
 $25 = sp;
 $26 = sp + 40|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $28 = $12;
 $29 = $28 >= 0.0;
 if ($29) {
  $30 = $12;
  $31 = $13;
  $32 = $15;
  $33 = $31 + $32;
  $34 = $30 <= $33;
  if ($34) {
   $35 = $12;
   $36 = $13;
   $37 = $16;
   $38 = $14;
   $39 = $15;
   $40 = $17;
   $41 = $18;
   $42 = $19;
   $43 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy($35,$36,$37,$38,$39,$40,$41,$42));
   HEAPF64[$23>>3] = $43;
   $24 = 2;
   HEAPF64[$25>>3] = 1.0;
   $44 = ((($25)) + 8|0);
   $45 = $20;
   HEAPF64[$44>>3] = $45;
   $46 = ((($44)) + 8|0);
   $47 = $21;
   HEAPF64[$46>>3] = $47;
   $48 = ((($46)) + 8|0);
   $49 = $22;
   HEAPF64[$48>>3] = $49;
   $50 = ((($48)) + 8|0);
   HEAPF64[$50>>3] = 0.0;
   $27 = 1;
   _AT_gamma_response(1,$23,2,$25,0,$26);
   $51 = +HEAPF64[$26>>3];
   $11 = $51;
   $52 = $11;
   STACKTOP = sp;return (+$52);
  }
 }
 $11 = 0.0;
 $52 = $11;
 STACKTOP = sp;return (+$52);
}
function _AT_KatzModel_CucinottaExtTarget_inactivation_probability($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 var $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $23 = sp + 48|0;
 $25 = sp;
 $26 = sp + 40|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $28 = $12;
 $29 = $28 >= 0.0;
 if ($29) {
  $30 = $12;
  $31 = $13;
  $32 = $15;
  $33 = $31 + $32;
  $34 = $30 <= $33;
  if ($34) {
   $35 = $12;
   $36 = $13;
   $37 = $14;
   $38 = $15;
   $39 = $16;
   $40 = $19;
   $41 = $17;
   $42 = $18;
   $43 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy($35,$36,$37,$38,$39,$40,$41,$42));
   HEAPF64[$23>>3] = $43;
   $24 = 2;
   HEAPF64[$25>>3] = 1.0;
   $44 = ((($25)) + 8|0);
   $45 = $20;
   HEAPF64[$44>>3] = $45;
   $46 = ((($44)) + 8|0);
   $47 = $21;
   HEAPF64[$46>>3] = $47;
   $48 = ((($46)) + 8|0);
   $49 = $22;
   HEAPF64[$48>>3] = $49;
   $50 = ((($48)) + 8|0);
   HEAPF64[$50>>3] = 0.0;
   $27 = 1;
   _AT_gamma_response(1,$23,2,$25,0,$26);
   $51 = +HEAPF64[$26>>3];
   $11 = $51;
   $52 = $11;
   STACKTOP = sp;return (+$52);
  }
 }
 $11 = 0.0;
 $52 = $11;
 STACKTOP = sp;return (+$52);
}
function _AT_KatzModel_inactivation_probability($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0;
 var $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0;
 var $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0.0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $13 = sp + 136|0;
 $14 = sp + 180|0;
 $33 = sp + 48|0;
 $11 = $0;
 $12 = $1;
 HEAPF64[$13>>3] = $2;
 HEAP32[$14>>2] = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $41 = +HEAPF64[$13>>3];
 $42 = $15;
 $43 = $18;
 $44 = (+_AT_max_electron_range_m($41,$42,$43));
 $22 = $44;
 $45 = $22;
 $46 = $16;
 $47 = $17;
 $48 = (+_AT_RDD_a0_m($45,$46,$47));
 $23 = $48;
 $49 = $22;
 $50 = $16;
 $51 = $17;
 $52 = (+_AT_RDD_r_min_m($49,$50,$51));
 $24 = $52;
 $53 = +HEAPF64[$13>>3];
 $54 = HEAP32[$14>>2]|0;
 $55 = $15;
 $56 = $18;
 $57 = (+_AT_RDD_Katz_coeff_Gy_general($53,$54,$55,$56));
 $25 = $57;
 $58 = $23;
 $59 = $22;
 $60 = $58 < $59;
 $61 = $23;
 $62 = $22;
 $63 = $60 ? $61 : $62;
 $26 = $63;
 $64 = $19;
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF64[$65>>3];
 $27 = $66;
 $67 = $19;
 $68 = ((($67)) + 16|0);
 $69 = +HEAPF64[$68>>3];
 $28 = $69;
 $70 = $19;
 $71 = ((($70)) + 24|0);
 $72 = +HEAPF64[$71>>3];
 $29 = $72;
 $73 = $16;
 $74 = ($73|0)==(6);
 L1: do {
  if ($74) {
   $30 = 0.0;
   $31 = 0.0;
   $75 = $18;
   $76 = ($75|0)==(3);
   $77 = $18;
   $78 = ($77|0)==(6);
   $or$cond = $76 | $78;
   if ($or$cond) {
    $79 = +HEAPF64[$13>>3];
    $80 = (+_AT_ER_PowerLaw_alpha($79));
    $31 = $80;
    $81 = $24;
    $82 = $26;
    $83 = $22;
    $84 = $31;
    $85 = $25;
    $86 = (+_AT_RDD_Katz_PowerLawER_Daverage_Gy($81,$82,$83,$84,$85));
    $30 = $86;
   } else {
    $87 = $18;
    $88 = ($87|0)==(2);
    if ($88) {
     $89 = $24;
     $90 = $26;
     $91 = $22;
     $92 = $25;
     $93 = (+_AT_RDD_Katz_LinearER_Daverage_Gy($89,$90,$91,$92));
     $30 = $93;
    }
   }
   $32 = 0;
   while(1) {
    $94 = $32;
    $95 = $11;
    $96 = ($94|0)<($95|0);
    if (!($96)) {
     break L1;
    }
    $97 = $12;
    $98 = $32;
    $99 = (($97) + ($98<<3)|0);
    $100 = +HEAPF64[$99>>3];
    $101 = $23;
    $102 = $24;
    $103 = $22;
    $104 = $18;
    $105 = $31;
    $106 = $30;
    $107 = $25;
    $108 = $27;
    $109 = $28;
    $110 = $29;
    $111 = (+_AT_KatzModel_KatzExtTarget_inactivation_probability($100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110));
    $112 = $21;
    $113 = $32;
    $114 = (($112) + ($113<<3)|0);
    HEAPF64[$114>>3] = $111;
    $115 = $32;
    $116 = (($115) + 1)|0;
    $32 = $116;
   }
  }
 } while(0);
 $117 = $16;
 $118 = ($117|0)==(7);
 if (!($118)) {
  STACKTOP = sp;return 0;
 }
 $119 = $20;
 $120 = $15;
 (_AT_Mass_Stopping_Power_with_no($119,1,$13,$14,$120,$33)|0);
 $121 = $15;
 $122 = (+_AT_density_g_cm3_from_material_no($121));
 $34 = $122;
 $123 = $34;
 $124 = $123 * 1000.0;
 $35 = $124;
 $125 = +HEAPF64[$33>>3];
 $126 = $34;
 $127 = $125 * $126;
 $128 = $127 * 100.0;
 $129 = $128 * 1.6021764600000001E-13;
 $36 = $129;
 $130 = +HEAPF64[$13>>3];
 $131 = (+_AT_beta_from_E_single($130));
 $37 = $131;
 $132 = $24;
 $133 = $22;
 $134 = $37;
 $135 = $35;
 $136 = $36;
 $137 = $25;
 $138 = (+_AT_RDD_Cucinotta_Cnorm($132,$133,$134,$135,$136,$137));
 $38 = $138;
 $139 = $24;
 $140 = $26;
 $141 = $22;
 $142 = $37;
 $143 = $25;
 $144 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($139,$140,$141,$142,$143));
 $39 = $144;
 $145 = $38;
 $146 = $24;
 $147 = $26;
 $148 = $22;
 $149 = $37;
 $150 = $25;
 $151 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($146,$147,$148,$149,$150));
 $152 = $145 * $151;
 $153 = $39;
 $154 = $153 + $152;
 $39 = $154;
 $40 = 0;
 while(1) {
  $155 = $40;
  $156 = $11;
  $157 = ($155|0)<($156|0);
  if (!($157)) {
   break;
  }
  $158 = $12;
  $159 = $40;
  $160 = (($158) + ($159<<3)|0);
  $161 = +HEAPF64[$160>>3];
  $162 = $23;
  $163 = $24;
  $164 = $22;
  $165 = $37;
  $166 = $38;
  $167 = $39;
  $168 = $25;
  $169 = $27;
  $170 = $28;
  $171 = $29;
  $172 = (+_AT_KatzModel_CucinottaExtTarget_inactivation_probability($161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171));
  $173 = $21;
  $174 = $40;
  $175 = (($173) + ($174<<3)|0);
  HEAPF64[$175>>3] = $172;
  $176 = $40;
  $177 = (($176) + 1)|0;
  $40 = $177;
 }
 STACKTOP = sp;return 0;
}
function _AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $2;
  $10 = $4;
  $11 = +HEAPF64[$10>>3];
  $12 = $4;
  $13 = ((($12)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $4;
  $16 = ((($15)) + 16|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $4;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $4;
  $22 = ((($21)) + 32|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $4;
  $25 = ((($24)) + 40|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $4;
  $28 = ((($27)) + 48|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $4;
  $31 = ((($30)) + 56|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $4;
  $34 = ((($33)) + 64|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $4;
  $37 = ((($36)) + 72|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (+_AT_KatzModel_KatzExtTarget_inactivation_probability($9,$11,$14,$17,$20,$23,$26,$29,$32,$35,$38));
  $5 = $39;
  $40 = $5;
  $41 = $2;
  $42 = $40 * $41;
  STACKTOP = sp;return (+$42);
 } else {
  ___assert_fail((75204|0),(73190|0),198,(73218|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0;
 var $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer = sp + 224|0;
 $15 = sp + 184|0;
 $21 = sp + 136|0;
 $22 = sp + 128|0;
 $24 = sp + 272|0;
 $25 = sp + 48|0;
 $28 = sp;
 $29 = sp + 40|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 HEAPF64[$15>>3] = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $31 = $10;
 $32 = 0.01 * $31;
 $20 = $32;
 (_gsl_set_error_handler_off()|0);
 $33 = (_gsl_integration_workspace_alloc(1000)|0);
 $23 = $33;
 HEAP32[$24>>2] = 42;
 $34 = $10;
 HEAPF64[$25>>3] = $34;
 $35 = $11;
 $36 = ((($25)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = $12;
 $38 = ((($25)) + 16|0);
 HEAPF64[$38>>3] = $37;
 $39 = $13;
 $40 = ((($25)) + 24|0);
 HEAP32[$40>>2] = $39;
 $41 = $14;
 $42 = ((($25)) + 32|0);
 HEAPF64[$42>>3] = $41;
 $43 = +HEAPF64[$15>>3];
 $44 = ((($25)) + 40|0);
 HEAPF64[$44>>3] = $43;
 $45 = $16;
 $46 = ((($25)) + 48|0);
 HEAPF64[$46>>3] = $45;
 $47 = $17;
 $48 = ((($25)) + 56|0);
 HEAPF64[$48>>3] = $47;
 $49 = $18;
 $50 = ((($25)) + 64|0);
 HEAPF64[$50>>3] = $49;
 $51 = $19;
 $52 = ((($25)) + 72|0);
 HEAPF64[$52>>3] = $51;
 $53 = ((($24)) + 4|0);
 HEAP32[$53>>2] = $25;
 $54 = $20;
 $55 = $12;
 $56 = $10;
 $57 = $55 + $56;
 $58 = $23;
 $59 = (_gsl_integration_qag($24,$54,$57,0.0,1.0E-4,1000,2,$58,$21,$22)|0);
 $26 = $59;
 $60 = $26;
 $61 = ($60|0)==(18);
 $62 = $26;
 $63 = ($62|0)==(21);
 $or$cond = $61 | $63;
 if ($or$cond) {
  $64 = HEAP32[16931]|0;
  $65 = $13;
  $66 = $20;
  $67 = $12;
  $68 = $10;
  HEAP32[$vararg_buffer>>2] = $65;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $66;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr3>>3] = $67;
  $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
  HEAPF64[$vararg_ptr4>>3] = $68;
  (_fprintf($64,73284,$vararg_buffer)|0);
  HEAPF64[$21>>3] = 0.0;
 }
 $69 = $23;
 _gsl_integration_workspace_free($69);
 $27 = 2;
 HEAPF64[$28>>3] = 1.0;
 $70 = ((($28)) + 8|0);
 $71 = $17;
 HEAPF64[$70>>3] = $71;
 $72 = ((($70)) + 8|0);
 $73 = $18;
 HEAPF64[$72>>3] = $73;
 $74 = ((($72)) + 8|0);
 $75 = $19;
 HEAPF64[$74>>3] = $75;
 $76 = ((($74)) + 8|0);
 HEAPF64[$76>>3] = 0.0;
 $30 = 1;
 _AT_gamma_response(1,$15,2,$28,0,$29);
 $77 = +HEAPF64[$21>>3];
 $78 = 6.2831853071795862 * $77;
 $79 = $10;
 $80 = 0.01 * $79;
 $81 = (+_gsl_pow_2($80));
 $82 = 3.1415926535897931 * $81;
 $83 = +HEAPF64[$29>>3];
 $84 = $82 * $83;
 $85 = $78 + $84;
 STACKTOP = sp;return (+$85);
}
function _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $2;
  $10 = $4;
  $11 = +HEAPF64[$10>>3];
  $12 = $4;
  $13 = ((($12)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $4;
  $16 = ((($15)) + 16|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $4;
  $19 = ((($18)) + 24|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $4;
  $22 = ((($21)) + 32|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $4;
  $25 = ((($24)) + 40|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $4;
  $28 = ((($27)) + 48|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $4;
  $31 = ((($30)) + 56|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $4;
  $34 = ((($33)) + 64|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $4;
  $37 = ((($36)) + 72|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (+_AT_KatzModel_CucinottaExtTarget_inactivation_probability($9,$11,$14,$17,$20,$23,$26,$29,$32,$35,$38));
  $5 = $39;
  $40 = $5;
  $41 = $2;
  $42 = $40 * $41;
  STACKTOP = sp;return (+$42);
 } else {
  ___assert_fail((75204|0),(73190|0),280,(73407|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0;
 var $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer = sp + 232|0;
 $15 = sp + 184|0;
 $21 = sp + 136|0;
 $22 = sp + 128|0;
 $24 = sp + 272|0;
 $25 = sp + 48|0;
 $28 = sp;
 $29 = sp + 40|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 HEAPF64[$15>>3] = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $31 = $10;
 $32 = 0.01 * $31;
 $20 = $32;
 (_gsl_set_error_handler_off()|0);
 $33 = (_gsl_integration_workspace_alloc(1000)|0);
 $23 = $33;
 HEAP32[$24>>2] = 43;
 $34 = $10;
 HEAPF64[$25>>3] = $34;
 $35 = $11;
 $36 = ((($25)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = $12;
 $38 = ((($25)) + 16|0);
 HEAPF64[$38>>3] = $37;
 $39 = $13;
 $40 = ((($25)) + 24|0);
 HEAPF64[$40>>3] = $39;
 $41 = $14;
 $42 = ((($25)) + 32|0);
 HEAPF64[$42>>3] = $41;
 $43 = +HEAPF64[$15>>3];
 $44 = ((($25)) + 40|0);
 HEAPF64[$44>>3] = $43;
 $45 = $16;
 $46 = ((($25)) + 48|0);
 HEAPF64[$46>>3] = $45;
 $47 = $17;
 $48 = ((($25)) + 56|0);
 HEAPF64[$48>>3] = $47;
 $49 = $18;
 $50 = ((($25)) + 64|0);
 HEAPF64[$50>>3] = $49;
 $51 = $19;
 $52 = ((($25)) + 72|0);
 HEAPF64[$52>>3] = $51;
 $53 = ((($24)) + 4|0);
 HEAP32[$53>>2] = $25;
 $54 = $20;
 $55 = $12;
 $56 = $10;
 $57 = $55 + $56;
 $58 = $23;
 $59 = (_gsl_integration_qag($24,$54,$57,0.0,1.0E-4,1000,2,$58,$21,$22)|0);
 $26 = $59;
 $60 = $26;
 $61 = ($60|0)==(18);
 $62 = $26;
 $63 = ($62|0)==(21);
 $or$cond = $61 | $63;
 if ($or$cond) {
  $64 = HEAP32[16931]|0;
  $65 = $20;
  $66 = $12;
  $67 = $10;
  HEAPF64[$vararg_buffer>>3] = $65;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $66;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr3>>3] = $67;
  (_fprintf($64,73478,$vararg_buffer)|0);
  HEAPF64[$21>>3] = 0.0;
 }
 $68 = $23;
 _gsl_integration_workspace_free($68);
 $27 = 2;
 HEAPF64[$28>>3] = 1.0;
 $69 = ((($28)) + 8|0);
 $70 = $17;
 HEAPF64[$69>>3] = $70;
 $71 = ((($69)) + 8|0);
 $72 = $18;
 HEAPF64[$71>>3] = $72;
 $73 = ((($71)) + 8|0);
 $74 = $19;
 HEAPF64[$73>>3] = $74;
 $75 = ((($73)) + 8|0);
 HEAPF64[$75>>3] = 0.0;
 $30 = 1;
 _AT_gamma_response(1,$15,2,$28,0,$29);
 $76 = +HEAPF64[$21>>3];
 $77 = 6.2831853071795862 * $76;
 $78 = $10;
 $79 = 0.01 * $78;
 $80 = (+_gsl_pow_2($79));
 $81 = 3.1415926535897931 * $80;
 $82 = +HEAPF64[$29>>3];
 $83 = $81 * $82;
 $84 = $77 + $83;
 STACKTOP = sp;return (+$84);
}
function _AT_KatzModel_inactivation_cross_section_m2($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0;
 var $69 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $vararg_buffer = sp + 376|0;
 $13 = sp + 420|0;
 $40 = sp + 232|0;
 $45 = sp;
 $11 = $0;
 $12 = $1;
 HEAP32[$13>>2] = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $46 = $18;
 $47 = ((($46)) + 8|0);
 $48 = +HEAPF64[$47>>3];
 $21 = $48;
 $49 = $18;
 $50 = ((($49)) + 16|0);
 $51 = +HEAPF64[$50>>3];
 $22 = $51;
 $52 = $18;
 $53 = ((($52)) + 24|0);
 $54 = +HEAPF64[$53>>3];
 $23 = $54;
 $55 = $15;
 $56 = ($55|0)==(6);
 if (!($56)) {
  $126 = $15;
  $127 = ($126|0)==(7);
  if (!($127)) {
   $217 = $15;
   (_AT_RDD_name_from_number($217,$45)|0);
   $218 = HEAP32[16931]|0;
   $219 = $15;
   HEAP32[$vararg_buffer>>2] = $219;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = $45;
   (_fprintf($218,73590,$vararg_buffer)|0);
   $10 = 1;
   $220 = $10;
   STACKTOP = sp;return ($220|0);
  }
  $128 = $14;
  $129 = (+_AT_density_g_cm3_from_material_no($128));
  $33 = $129;
  $130 = $33;
  $131 = $130 * 1000.0;
  $34 = $131;
  $132 = $16;
  $133 = ((($132)) + 8|0);
  $134 = +HEAPF64[$133>>3];
  $35 = $134;
  $32 = 0;
  while(1) {
   $135 = $32;
   $136 = $11;
   $137 = ($135|0)<($136|0);
   if (!($137)) {
    break;
   }
   $138 = $12;
   $139 = $32;
   $140 = (($138) + ($139<<3)|0);
   $141 = +HEAPF64[$140>>3];
   $142 = $14;
   $143 = $17;
   $144 = (+_AT_max_electron_range_m($141,$142,$143));
   $36 = $144;
   $145 = $36;
   $146 = $15;
   $147 = $16;
   $148 = (+_AT_RDD_r_min_m($145,$146,$147));
   $37 = $148;
   $149 = $12;
   $150 = $32;
   $151 = (($149) + ($150<<3)|0);
   $152 = +HEAPF64[$151>>3];
   $153 = HEAP32[$13>>2]|0;
   $154 = $14;
   $155 = $17;
   $156 = (+_AT_RDD_Katz_coeff_Gy_general($152,$153,$154,$155));
   $38 = $156;
   $157 = $35;
   $158 = $36;
   $159 = $157 < $158;
   $160 = $35;
   $161 = $36;
   $162 = $159 ? $160 : $161;
   $39 = $162;
   $163 = $19;
   $164 = $12;
   $165 = $32;
   $166 = (($164) + ($165<<3)|0);
   $167 = $14;
   (_AT_Mass_Stopping_Power_with_no($163,1,$166,$13,$167,$40)|0);
   $168 = +HEAPF64[$40>>3];
   $169 = $33;
   $170 = $168 * $169;
   $171 = $170 * 100.0;
   $172 = $171 * 1.6021764600000001E-13;
   $41 = $172;
   $173 = $12;
   $174 = $32;
   $175 = (($173) + ($174<<3)|0);
   $176 = +HEAPF64[$175>>3];
   $177 = (+_AT_beta_from_E_single($176));
   $42 = $177;
   $178 = $37;
   $179 = $36;
   $180 = $42;
   $181 = $34;
   $182 = $41;
   $183 = $38;
   $184 = (+_AT_RDD_Cucinotta_Cnorm($178,$179,$180,$181,$182,$183));
   $43 = $184;
   $185 = $37;
   $186 = $39;
   $187 = $36;
   $188 = $42;
   $189 = $38;
   $190 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($185,$186,$187,$188,$189));
   $44 = $190;
   $191 = $43;
   $192 = $37;
   $193 = $39;
   $194 = $36;
   $195 = $42;
   $196 = $38;
   $197 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($192,$193,$194,$195,$196));
   $198 = $191 * $197;
   $199 = $44;
   $200 = $199 + $198;
   $44 = $200;
   $201 = $35;
   $202 = $37;
   $203 = $36;
   $204 = $42;
   $205 = $43;
   $206 = $44;
   $207 = $38;
   $208 = $21;
   $209 = $22;
   $210 = $23;
   $211 = (+_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2($201,$202,$203,$204,$205,$206,$207,$208,$209,$210));
   $212 = $20;
   $213 = $32;
   $214 = (($212) + ($213<<3)|0);
   HEAPF64[$214>>3] = $211;
   $215 = $32;
   $216 = (($215) + 1)|0;
   $32 = $216;
  }
  $10 = 0;
  $220 = $10;
  STACKTOP = sp;return ($220|0);
 }
 $57 = $16;
 $58 = ((($57)) + 8|0);
 $59 = +HEAPF64[$58>>3];
 $25 = $59;
 $24 = 0;
 while(1) {
  $60 = $24;
  $61 = $11;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $12;
  $64 = $24;
  $65 = (($63) + ($64<<3)|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $14;
  $68 = $17;
  $69 = (+_AT_max_electron_range_m($66,$67,$68));
  $26 = $69;
  $70 = $26;
  $71 = $15;
  $72 = $16;
  $73 = (+_AT_RDD_r_min_m($70,$71,$72));
  $27 = $73;
  $74 = $12;
  $75 = $24;
  $76 = (($74) + ($75<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = HEAP32[$13>>2]|0;
  $79 = $14;
  $80 = $17;
  $81 = (+_AT_RDD_Katz_coeff_Gy_general($77,$78,$79,$80));
  $28 = $81;
  $82 = $25;
  $83 = $26;
  $84 = $82 < $83;
  $85 = $25;
  $86 = $26;
  $87 = $84 ? $85 : $86;
  $29 = $87;
  $30 = 0.0;
  $31 = 0.0;
  $88 = $17;
  $89 = ($88|0)==(3);
  $90 = $17;
  $91 = ($90|0)==(6);
  $or$cond = $89 | $91;
  if ($or$cond) {
   $92 = $12;
   $93 = $24;
   $94 = (($92) + ($93<<3)|0);
   $95 = +HEAPF64[$94>>3];
   $96 = (+_AT_ER_PowerLaw_alpha($95));
   $31 = $96;
   $97 = $27;
   $98 = $29;
   $99 = $26;
   $100 = $31;
   $101 = $28;
   $102 = (+_AT_RDD_Katz_PowerLawER_Daverage_Gy($97,$98,$99,$100,$101));
   $30 = $102;
  } else {
   $103 = $17;
   $104 = ($103|0)==(2);
   if ($104) {
    $105 = $27;
    $106 = $29;
    $107 = $26;
    $108 = $28;
    $109 = (+_AT_RDD_Katz_LinearER_Daverage_Gy($105,$106,$107,$108));
    $30 = $109;
   }
  }
  $110 = $25;
  $111 = $27;
  $112 = $26;
  $113 = $17;
  $114 = $31;
  $115 = $30;
  $116 = $28;
  $117 = $21;
  $118 = $22;
  $119 = $23;
  $120 = (+_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2($110,$111,$112,$113,$114,$115,$116,$117,$118,$119));
  $121 = $20;
  $122 = $24;
  $123 = (($121) + ($122<<3)|0);
  HEAPF64[$123>>3] = $120;
  $124 = $24;
  $125 = (($124) + 1)|0;
  $24 = $125;
 }
 $10 = 0;
 $220 = $10;
 STACKTOP = sp;return ($220|0);
}
function _AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0;
 var $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $12 = $4;
 $13 = $12 < 1.5;
 $14 = $4;
 $15 = $14 > 5.0;
 $or$cond = $13 | $15;
 if ($or$cond) {
  $2 = -1.0;
  $217 = $2;
  STACKTOP = sp;return (+$217);
 }
 $5 = 1;
 while(1) {
  $16 = $4;
  $17 = $5;
  $18 = (656 + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $16 >= $19;
  $21 = $5;
  if (!($20)) {
   break;
  }
  $22 = (($21) + 1)|0;
  $5 = $22;
 }
 $23 = (($21) + -1)|0;
 $5 = $23;
 $24 = $4;
 $25 = $5;
 $26 = (656 + ($25<<3)|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $24 - $27;
 $29 = $5;
 $30 = (($29) + 1)|0;
 $31 = (656 + ($30<<3)|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $5;
 $34 = (656 + ($33<<3)|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $32 - $35;
 $37 = $28 / $36;
 $6 = $37;
 $38 = $3;
 $39 = $5;
 $40 = (($39) + 1)|0;
 $41 = (704 + ($40<<3)|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $38 < $42;
 if ($43) {
  $2 = 1.0;
  $217 = $2;
  STACKTOP = sp;return (+$217);
 }
 $44 = $3;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (752 + ($46<<3)|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $44 >= $48;
 do {
  if ($49) {
   $50 = $5;
   $51 = (800 + ($50<<3)|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $52 * 0.77686999999999995;
   $54 = $5;
   $55 = (752 + ($54<<3)|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $56 * 1.5;
   $58 = - $57;
   $59 = $3;
   $60 = $58 / $59;
   $61 = (+Math_exp((+$60)));
   $62 = 1.0 - $61;
   $63 = $53 / $62;
   $7 = $63;
   $64 = $5;
   $65 = (($64) + 1)|0;
   $66 = (800 + ($65<<3)|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $67 * 0.77686999999999995;
   $69 = $5;
   $70 = (($69) + 1)|0;
   $71 = (752 + ($70<<3)|0);
   $72 = +HEAPF64[$71>>3];
   $73 = $72 * 1.5;
   $74 = - $73;
   $75 = $3;
   $76 = $74 / $75;
   $77 = (+Math_exp((+$76)));
   $78 = 1.0 - $77;
   $79 = $68 / $78;
   $8 = $79;
  } else {
   $80 = $3;
   $81 = $5;
   $82 = (752 + ($81<<3)|0);
   $83 = +HEAPF64[$82>>3];
   $84 = $80 > $83;
   $85 = $5;
   $86 = (800 + ($85<<3)|0);
   $87 = +HEAPF64[$86>>3];
   if ($84) {
    $88 = $87 * 0.77686999999999995;
    $89 = $5;
    $90 = (752 + ($89<<3)|0);
    $91 = +HEAPF64[$90>>3];
    $92 = $91 * 1.5;
    $93 = - $92;
    $94 = $3;
    $95 = $93 / $94;
    $96 = (+Math_exp((+$95)));
    $97 = 1.0 - $96;
    $98 = $88 / $97;
    $7 = $98;
    $99 = $5;
    $100 = (($99) + 1)|0;
    $101 = (800 + ($100<<3)|0);
    $102 = +HEAPF64[$101>>3];
    $103 = $5;
    $104 = (($103) + 1)|0;
    $105 = (848 + ($104<<3)|0);
    $106 = +HEAPF64[$105>>3];
    $107 = $102 - $106;
    $108 = $5;
    $109 = (($108) + 1)|0;
    $110 = (752 + ($109<<3)|0);
    $111 = +HEAPF64[$110>>3];
    $112 = $5;
    $113 = (($112) + 1)|0;
    $114 = (704 + ($113<<3)|0);
    $115 = +HEAPF64[$114>>3];
    $116 = $111 - $115;
    $117 = $107 / $116;
    $118 = $3;
    $119 = $5;
    $120 = (($119) + 1)|0;
    $121 = (704 + ($120<<3)|0);
    $122 = +HEAPF64[$121>>3];
    $123 = $118 - $122;
    $124 = $117 * $123;
    $125 = $5;
    $126 = (($125) + 1)|0;
    $127 = (848 + ($126<<3)|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $124 + $128;
    $8 = $129;
    break;
   } else {
    $130 = $5;
    $131 = (848 + ($130<<3)|0);
    $132 = +HEAPF64[$131>>3];
    $133 = $87 - $132;
    $134 = $5;
    $135 = (752 + ($134<<3)|0);
    $136 = +HEAPF64[$135>>3];
    $137 = $5;
    $138 = (704 + ($137<<3)|0);
    $139 = +HEAPF64[$138>>3];
    $140 = $136 - $139;
    $141 = $133 / $140;
    $142 = $3;
    $143 = $5;
    $144 = (704 + ($143<<3)|0);
    $145 = +HEAPF64[$144>>3];
    $146 = $142 - $145;
    $147 = $141 * $146;
    $148 = $5;
    $149 = (848 + ($148<<3)|0);
    $150 = +HEAPF64[$149>>3];
    $151 = $147 + $150;
    $7 = $151;
    $152 = $5;
    $153 = (($152) + 1)|0;
    $154 = (800 + ($153<<3)|0);
    $155 = +HEAPF64[$154>>3];
    $156 = $5;
    $157 = (($156) + 1)|0;
    $158 = (848 + ($157<<3)|0);
    $159 = +HEAPF64[$158>>3];
    $160 = $155 - $159;
    $161 = $5;
    $162 = (($161) + 1)|0;
    $163 = (752 + ($162<<3)|0);
    $164 = +HEAPF64[$163>>3];
    $165 = $5;
    $166 = (($165) + 1)|0;
    $167 = (704 + ($166<<3)|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $164 - $168;
    $170 = $160 / $169;
    $171 = $3;
    $172 = $5;
    $173 = (($172) + 1)|0;
    $174 = (704 + ($173<<3)|0);
    $175 = +HEAPF64[$174>>3];
    $176 = $171 - $175;
    $177 = $170 * $176;
    $178 = $5;
    $179 = $5;
    $180 = (($178) + ($179))|0;
    $181 = (848 + ($180<<3)|0);
    $182 = +HEAPF64[$181>>3];
    $183 = $177 + $182;
    $8 = $183;
    break;
   }
  }
 } while(0);
 $184 = $7;
 $185 = (+Math_log((+$184)));
 $186 = $6;
 $187 = $8;
 $188 = (+Math_log((+$187)));
 $189 = $7;
 $190 = (+Math_log((+$189)));
 $191 = $188 - $190;
 $192 = $186 * $191;
 $193 = $185 + $192;
 $194 = (+Math_exp((+$193)));
 $9 = $194;
 $195 = $5;
 $196 = (848 + ($195<<3)|0);
 $197 = +HEAPF64[$196>>3];
 $198 = (+Math_log((+$197)));
 $199 = $6;
 $200 = $5;
 $201 = (($200) + 1)|0;
 $202 = (848 + ($201<<3)|0);
 $203 = +HEAPF64[$202>>3];
 $204 = (+Math_log((+$203)));
 $205 = $5;
 $206 = (848 + ($205<<3)|0);
 $207 = +HEAPF64[$206>>3];
 $208 = (+Math_log((+$207)));
 $209 = $204 - $208;
 $210 = $199 * $209;
 $211 = $198 + $210;
 $212 = (+Math_exp((+$211)));
 $10 = $212;
 $213 = $9;
 $214 = $10;
 $215 = $213 / $214;
 $11 = $215;
 $216 = $11;
 $2 = $216;
 $217 = $2;
 STACKTOP = sp;return (+$217);
}
function _AT_KatzModel_KatzExtTarget_Zhang_TrackWidth($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $11 = $4;
 $12 = 1.0 / $11;
 $13 = (+Math_pow(0.97999999999999998,(+$12)));
 $14 = 1.0 - $13;
 $15 = (+Math_log((+$14)));
 $16 = - $15;
 $5 = $16;
 $6 = 0.97999999999999998;
 $17 = $4;
 $18 = (+Math_log((+$17)));
 $7 = $18;
 $19 = +HEAPF64[112];
 $20 = +HEAPF64[(904)>>3];
 $21 = $7;
 $22 = $20 * $21;
 $23 = $19 + $22;
 $24 = +HEAPF64[(912)>>3];
 $25 = $7;
 $26 = $24 * $25;
 $27 = $7;
 $28 = $26 * $27;
 $29 = $23 + $28;
 $30 = +HEAPF64[(920)>>3];
 $31 = $7;
 $32 = (+Math_pow((+$31),3.0));
 $33 = $30 * $32;
 $34 = $29 + $33;
 $35 = +HEAPF64[(928)>>3];
 $36 = $7;
 $37 = (+Math_pow((+$36),4.0));
 $38 = $35 * $37;
 $39 = $34 + $38;
 $40 = +HEAPF64[(936)>>3];
 $41 = $7;
 $42 = (+Math_pow((+$41),5.0));
 $43 = $40 * $42;
 $44 = $39 + $43;
 $45 = (+Math_exp((+$44)));
 $8 = $45;
 $46 = +HEAPF64[118];
 $47 = +HEAPF64[(952)>>3];
 $48 = $7;
 $49 = $47 * $48;
 $50 = $46 + $49;
 $51 = +HEAPF64[(960)>>3];
 $52 = $7;
 $53 = $51 * $52;
 $54 = $7;
 $55 = $53 * $54;
 $56 = $50 + $55;
 $57 = +HEAPF64[(968)>>3];
 $58 = $7;
 $59 = (+Math_pow((+$58),3.0));
 $60 = $57 * $59;
 $61 = $56 + $60;
 $62 = +HEAPF64[(976)>>3];
 $63 = $7;
 $64 = (+Math_pow((+$63),4.0));
 $65 = $62 * $64;
 $66 = $61 + $65;
 $67 = +HEAPF64[(984)>>3];
 $68 = $7;
 $69 = (+Math_pow((+$68),5.0));
 $70 = $67 * $69;
 $71 = $66 + $70;
 $72 = (+Math_exp((+$71)));
 $9 = $72;
 $10 = -1.0;
 $73 = $4;
 $74 = $73 < 1.5;
 $75 = $4;
 $76 = $75 > 3.5;
 $or$cond = $74 | $76;
 if ($or$cond) {
  $2 = -1.0;
  $101 = $2;
  STACKTOP = sp;return (+$101);
 }
 $77 = $3;
 $78 = $8;
 $79 = $77 >= $78;
 $80 = $9;
 if ($79) {
  $81 = $80 * 0.82089999999999996;
  $82 = $8;
  $83 = - $82;
  $84 = $83 * 1.72;
  $85 = $3;
  $86 = $84 / $85;
  $87 = (+Math_exp((+$86)));
  $88 = 1.0 - $87;
  $89 = $81 / $88;
  $10 = $89;
 } else {
  $90 = 0.97999999999999998 - $80;
  $91 = $5;
  $92 = $8;
  $93 = $91 - $92;
  $94 = $90 / $93;
  $95 = $3;
  $96 = $5;
  $97 = $95 - $96;
  $98 = $94 * $97;
  $99 = $98 + 0.97999999999999998;
  $10 = $99;
 }
 $100 = $10;
 $2 = $100;
 $101 = $2;
 STACKTOP = sp;return (+$101);
}
function _AT_KatzModel_inactivation_cross_section_approximation_m2($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $8 = 0.0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = -1.0;
 $23 = $8;
 $24 = (+_AT_beta_from_E_single($23));
 $17 = $24;
 $25 = $17;
 $26 = $9;
 $27 = (_AT_Z_from_particle_no_single($26)|0);
 $28 = (+_AT_effective_charge_from_beta_single($25,$27));
 $18 = $28;
 $29 = $18;
 $30 = $17;
 $31 = $29 / $30;
 $32 = (+_gsl_pow_2($31));
 $33 = $15;
 $34 = $32 / $33;
 $19 = $34;
 $35 = $19;
 $36 = - $35;
 $37 = (+Math_exp((+$36)));
 $38 = 1.0 - $37;
 $39 = $13;
 $40 = (+Math_pow((+$38),(+$39)));
 $20 = $40;
 $41 = $11;
 $42 = ($41|0)==(6);
 $43 = $12;
 $44 = ($43|0)==(2);
 $or$cond = $42 & $44;
 if ($or$cond) {
  $21 = 1.0;
  $45 = $20;
  $46 = $45 > 0.97999999999999998;
  if ($46) {
   $47 = $19;
   $48 = $13;
   $49 = (+_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth($47,$48));
   $21 = $49;
  } else {
   $50 = $20;
   $21 = $50;
  }
  $51 = $21;
  $52 = $14;
  $53 = $51 * $52;
  $16 = $53;
 }
 $54 = $11;
 $55 = ($54|0)==(6);
 if (!($55)) {
  $69 = $16;
  STACKTOP = sp;return (+$69);
 }
 $56 = $12;
 $57 = ($56|0)==(3);
 $58 = $12;
 $59 = ($58|0)==(6);
 $or$cond3 = $57 | $59;
 if (!($or$cond3)) {
  $69 = $16;
  STACKTOP = sp;return (+$69);
 }
 $22 = 1.0;
 $60 = $20;
 $61 = $60 > 0.97999999999999998;
 if ($61) {
  $62 = $19;
  $63 = $13;
  $64 = (+_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth($62,$63));
  $22 = $64;
 } else {
  $65 = $20;
  $22 = $65;
 }
 $66 = $22;
 $67 = $14;
 $68 = $66 * $67;
 $16 = $68;
 $69 = $16;
 STACKTOP = sp;return (+$69);
}
function _AT_KatzModel_single_field_survival_from_inactivation_cross_section($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $23 = $10;
 $24 = $11;
 $25 = $9;
 $26 = $12;
 $27 = $17;
 $28 = (+_AT_dose_Gy_from_fluence_cm2_single($23,$24,$25,$26,$27));
 $18 = $28;
 $29 = $16;
 $30 = $29 > 0.0;
 if (!($30)) {
  ___assert_fail((73624|0),(73190|0),606,(73638|0));
  // unreachable;
 }
 $31 = $13;
 $32 = $31 > 0.0;
 if (!($32)) {
  ___assert_fail((73705|0),(73190|0),608,(73638|0));
  // unreachable;
 }
 $33 = $13;
 $34 = $16;
 $35 = $33 / $34;
 $19 = $35;
 $36 = $19;
 $37 = $36 > 1.0;
 if ($37) {
  $19 = 1.0;
 }
 $38 = $19;
 $39 = 1.0 - $38;
 $40 = $18;
 $41 = $39 * $40;
 $20 = $41;
 $42 = $13;
 $43 = - $42;
 $44 = $43 * 1.0E+4;
 $45 = $9;
 $46 = $44 * $45;
 $47 = (+Math_exp((+$46)));
 $22 = $47;
 $48 = $14;
 $49 = $48 > 0.0;
 if (!($49)) {
  ___assert_fail((73739|0),(73190|0),623,(73638|0));
  // unreachable;
 }
 $50 = $19;
 $51 = $50 > 0.97999999999999998;
 if ($51) {
  $21 = 1.0;
  $61 = $22;
  $62 = $21;
  $63 = $61 * $62;
  STACKTOP = sp;return (+$63);
 } else {
  $52 = $20;
  $53 = - $52;
  $54 = $14;
  $55 = $53 / $54;
  $56 = (+Math_exp((+$55)));
  $57 = 1.0 - $56;
  $58 = $15;
  $59 = (+Math_pow((+$57),(+$58)));
  $60 = 1.0 - $59;
  $21 = $60;
  $61 = $22;
  $62 = $21;
  $63 = $61 * $62;
  STACKTOP = sp;return (+$63);
 }
 return +(0.0);
}
function _AT_KatzModel_single_field_survival($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = $10|0;
 $11 = +$11;
 $12 = $12|0;
 $13 = $13|0;
 var $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0;
 var $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $75 = 0, $76 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer = sp + 96|0;
 $16 = sp + 80|0;
 $29 = sp + 40|0;
 $30 = sp;
 $15 = $0;
 HEAPF64[$16>>3] = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $32 = $10&1;
 $25 = $32;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $33 = $24;
 $34 = $33 > 0.0;
 if (!($34)) {
  ___assert_fail((73624|0),(73190|0),658,(73769|0));
  // unreachable;
 }
 HEAPF64[$29>>3] = 0.0;
 HEAPF64[$30>>3] = 1.0;
 $35 = ((($30)) + 8|0);
 $36 = $22;
 HEAPF64[$35>>3] = $36;
 $37 = ((($35)) + 8|0);
 HEAPF64[$37>>3] = 1.0;
 $38 = ((($37)) + 8|0);
 $39 = $23;
 HEAPF64[$38>>3] = $39;
 $40 = ((($38)) + 8|0);
 HEAPF64[$40>>3] = 0.0;
 $41 = $25;
 $42 = $41&1;
 $43 = $42&1;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = $17;
  $46 = $18;
  $47 = $19;
  $48 = $20;
  $49 = $21;
  $50 = $27;
  $51 = (_AT_KatzModel_inactivation_cross_section_m2(1,$16,$45,$46,$47,$48,$49,$30,$50,$29)|0);
  $31 = $51;
  $52 = $31;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = HEAP32[16931]|0;
   (_fprintf($54,73804,$vararg_buffer)|0);
   $55 = $31;
   $14 = $55;
   $76 = $14;
   STACKTOP = sp;return ($76|0);
  }
 } else {
  $56 = +HEAPF64[$16>>3];
  $57 = $17;
  $58 = $18;
  $59 = $19;
  $60 = $21;
  $61 = $23;
  $62 = $24;
  $63 = $26;
  $64 = (+_AT_KatzModel_inactivation_cross_section_approximation_m2($56,$57,$58,$59,$60,$61,$62,$63));
  HEAPF64[$29>>3] = $64;
 }
 $65 = $15;
 $66 = +HEAPF64[$16>>3];
 $67 = $17;
 $68 = $18;
 $69 = +HEAPF64[$29>>3];
 $70 = $22;
 $71 = $23;
 $72 = $24;
 $73 = $27;
 $74 = (+_AT_KatzModel_single_field_survival_from_inactivation_cross_section($65,$66,$67,$68,$69,$70,$71,$72,$73));
 $75 = $28;
 HEAPF64[$75>>3] = $74;
 $14 = 0;
 $76 = $14;
 STACKTOP = sp;return ($76|0);
}
function _AT_KatzModel_mixed_field_survival($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = $11|0;
 $12 = +$12;
 $13 = $13|0;
 $14 = $14|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0;
 var $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer = sp + 128|0;
 $31 = sp + 88|0;
 $32 = sp;
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $41 = $11&1;
 $27 = $41;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $42 = $26;
 $43 = $42 > 0.0;
 if (!($43)) {
  ___assert_fail((73624|0),(73190|0),728,(73856|0));
  // unreachable;
 }
 HEAPF64[$31>>3] = 0.0;
 HEAPF64[$32>>3] = 1.0;
 $44 = ((($32)) + 8|0);
 $45 = $24;
 HEAPF64[$44>>3] = $45;
 $46 = ((($44)) + 8|0);
 HEAPF64[$46>>3] = 1.0;
 $47 = ((($46)) + 8|0);
 $48 = $25;
 HEAPF64[$47>>3] = $48;
 $49 = ((($47)) + 8|0);
 HEAPF64[$49>>3] = 0.0;
 $33 = 0;
 $34 = 0.0;
 $35 = 0.0;
 $33 = 0;
 while(1) {
  $50 = $33;
  $51 = $16;
  $52 = ($50|0)<($51|0);
  if (!($52)) {
   label = 15;
   break;
  }
  $53 = $27;
  $54 = $53&1;
  $55 = $18;
  $56 = $33;
  $57 = (($55) + ($56<<3)|0);
  if ($54) {
   $58 = +HEAPF64[$57>>3];
   $59 = $19;
   $60 = $33;
   $61 = (($59) + ($60<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $20;
   $64 = $21;
   $65 = $23;
   $66 = $25;
   $67 = $26;
   $68 = $28;
   $69 = (+_AT_KatzModel_inactivation_cross_section_approximation_m2($58,$62,$63,$64,$65,$66,$67,$68));
   HEAPF64[$31>>3] = $69;
  } else {
   $70 = $19;
   $71 = $33;
   $72 = (($70) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $20;
   $75 = $21;
   $76 = $22;
   $77 = $23;
   $78 = $29;
   $79 = (_AT_KatzModel_inactivation_cross_section_m2(1,$57,$73,$74,$75,$76,$77,$32,$78,$31)|0);
   $36 = $79;
   $80 = $36;
   $81 = ($80|0)!=(0);
   if ($81) {
    label = 8;
    break;
   }
  }
  $37 = 1.0;
  $84 = +HEAPF64[$31>>3];
  $85 = $26;
  $86 = $84 < $85;
  if ($86) {
   $87 = +HEAPF64[$31>>3];
   $88 = $26;
   $89 = $87 / $88;
   $37 = $89;
  }
  $38 = 0.0;
  $90 = $17;
  $91 = $33;
  $92 = (($90) + ($91<<3)|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $93 > 0.0;
  if ($94) {
   $95 = $18;
   $96 = $33;
   $97 = (($95) + ($96<<3)|0);
   $98 = +HEAPF64[$97>>3];
   $99 = $98 > 0.0;
   if ($99) {
    $100 = $18;
    $101 = $33;
    $102 = (($100) + ($101<<3)|0);
    $103 = +HEAPF64[$102>>3];
    $104 = $19;
    $105 = $33;
    $106 = (($104) + ($105<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $17;
    $109 = $33;
    $110 = (($108) + ($109<<3)|0);
    $111 = +HEAPF64[$110>>3];
    $112 = $20;
    $113 = $29;
    $114 = (+_AT_dose_Gy_from_fluence_cm2_single($103,$107,$111,$112,$113));
    $38 = $114;
   }
  }
  $115 = +HEAPF64[$31>>3];
  $116 = $17;
  $117 = $33;
  $118 = (($116) + ($117<<3)|0);
  $119 = +HEAPF64[$118>>3];
  $120 = $115 * $119;
  $121 = $120 * 1.0E+4;
  $122 = $34;
  $123 = $122 + $121;
  $34 = $123;
  $124 = $37;
  $125 = 1.0 - $124;
  $126 = $38;
  $127 = $125 * $126;
  $128 = $35;
  $129 = $128 + $127;
  $35 = $129;
  $130 = $33;
  $131 = (($130) + 1)|0;
  $33 = $131;
 }
 if ((label|0) == 8) {
  $82 = HEAP32[16931]|0;
  (_fprintf($82,73804,$vararg_buffer)|0);
  $83 = $36;
  $15 = $83;
  $148 = $15;
  STACKTOP = sp;return ($148|0);
 }
 else if ((label|0) == 15) {
  $132 = $34;
  $133 = - $132;
  $134 = (+Math_exp((+$133)));
  $39 = $134;
  $135 = $35;
  $136 = - $135;
  $137 = $24;
  $138 = $136 / $137;
  $139 = (+Math_exp((+$138)));
  $140 = 1.0 - $139;
  $141 = $25;
  $142 = (+Math_pow((+$140),(+$141)));
  $143 = 1.0 - $142;
  $40 = $143;
  $144 = $39;
  $145 = $40;
  $146 = $144 * $145;
  $147 = $30;
  HEAPF64[$147>>3] = $146;
  $15 = 0;
  $148 = $15;
  STACKTOP = sp;return ($148|0);
 }
 return (0)|0;
}
function _AT_KatzModel_single_field_survival_optimized_for_fluence_vector($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 $11 = $11|0;
 $12 = +$12;
 $13 = $13|0;
 $14 = $14|0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer1 = sp + 96|0;
 $vararg_buffer = sp + 88|0;
 $18 = sp + 80|0;
 $31 = sp + 40|0;
 $32 = sp;
 $16 = $0;
 $17 = $1;
 HEAPF64[$18>>3] = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $35 = $11&1;
 $27 = $35;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $36 = $26;
 $37 = $36 > 0.0;
 if (!($37)) {
  ___assert_fail((73624|0),(73190|0),819,(73890|0));
  // unreachable;
 }
 HEAPF64[$31>>3] = 0.0;
 HEAPF64[$32>>3] = 1.0;
 $38 = ((($32)) + 8|0);
 $39 = $24;
 HEAPF64[$38>>3] = $39;
 $40 = ((($38)) + 8|0);
 HEAPF64[$40>>3] = 1.0;
 $41 = ((($40)) + 8|0);
 $42 = $25;
 HEAPF64[$41>>3] = $42;
 $43 = ((($41)) + 8|0);
 HEAPF64[$43>>3] = 0.0;
 $44 = $27;
 $45 = $44&1;
 $46 = $45&1;
 $47 = ($46|0)==(0);
 if ($47) {
  $48 = $19;
  $49 = $20;
  $50 = $21;
  $51 = $22;
  $52 = $23;
  $53 = $29;
  $54 = (_AT_KatzModel_inactivation_cross_section_m2(1,$18,$48,$49,$50,$51,$52,$32,$53,$31)|0);
  $33 = $54;
  $55 = +HEAPF64[$31>>3];
  HEAPF64[$vararg_buffer>>3] = $55;
  (_printf(73954,$vararg_buffer)|0);
  $56 = $33;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = HEAP32[16931]|0;
   (_fprintf($58,73804,$vararg_buffer1)|0);
   $59 = $33;
   $15 = $59;
   $90 = $15;
   STACKTOP = sp;return ($90|0);
  }
 } else {
  $60 = +HEAPF64[$18>>3];
  $61 = $19;
  $62 = $20;
  $63 = $21;
  $64 = $23;
  $65 = $25;
  $66 = $26;
  $67 = $28;
  $68 = (+_AT_KatzModel_inactivation_cross_section_approximation_m2($60,$61,$62,$63,$64,$65,$66,$67));
  HEAPF64[$31>>3] = $68;
 }
 $34 = 0;
 while(1) {
  $69 = $34;
  $70 = $16;
  $71 = ($69|0)<($70|0);
  if (!($71)) {
   break;
  }
  $72 = $17;
  $73 = $34;
  $74 = (($72) + ($73<<3)|0);
  $75 = +HEAPF64[$74>>3];
  $76 = +HEAPF64[$18>>3];
  $77 = $19;
  $78 = $20;
  $79 = +HEAPF64[$31>>3];
  $80 = $24;
  $81 = $25;
  $82 = $26;
  $83 = $29;
  $84 = (+_AT_KatzModel_single_field_survival_from_inactivation_cross_section($75,$76,$77,$78,$79,$80,$81,$82,$83));
  $85 = $30;
  $86 = $34;
  $87 = (($85) + ($86<<3)|0);
  HEAPF64[$87>>3] = $84;
  $88 = $34;
  $89 = (($88) + 1)|0;
  $34 = $89;
 }
 $15 = 0;
 $90 = $15;
 STACKTOP = sp;return ($90|0);
}
function _AT_D_RDD_Gy_int($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $5 = 1;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $3;
  $6 = $10;
  $11 = $2;
  HEAPF64[$7>>3] = $11;
  $12 = $5;
  $13 = $6;
  $14 = HEAP32[$13>>2]|0;
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $6;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = $6;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  (_AT_D_RDD_Gy($12,$7,$15,$19,$23,$27,$30,$34,2,$4)|0);
  $35 = $2;
  $36 = 6.2831853071795862 * $35;
  $37 = +HEAPF64[$4>>3];
  $38 = $36 * $37;
  STACKTOP = sp;return (+$38);
 } else {
  ___assert_fail((75204|0),(73190|0),882,(73987|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_sI_int($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = $3;
  $9 = (+_AT_P_RDD($7,$8));
  $4 = $9;
  $10 = $2;
  $11 = $4;
  $12 = $10 * $11;
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((75204|0),(73190|0),905,(74003|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_P_RDD($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $7 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $5 = 1;
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $3;
  $6 = $12;
  $13 = $2;
  HEAPF64[$7>>3] = $13;
  $14 = $5;
  $15 = $6;
  $16 = HEAP32[$15>>2]|0;
  $17 = +HEAPF64[$16>>3];
  $18 = $6;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = $6;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $6;
  $34 = ((($33)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  (_AT_D_RDD_Gy($14,$7,$17,$21,$25,$29,$32,$36,2,$4)|0);
  $8 = 2;
  $37 = $5;
  $38 = $8;
  $39 = $6;
  $40 = ((($39)) + 24|0);
  _AT_gamma_response($37,$4,$38,$40,0,$9);
  $41 = +HEAPF64[$9>>3];
  STACKTOP = sp;return (+$41);
 } else {
  ___assert_fail((75204|0),(73190|0),916,(74013|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_characteristic_single_scattering_angle_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $4;
 $15 = (+_AT_beta_from_E_single($14));
 $8 = $15;
 $16 = $4;
 $17 = (+_AT_gamma_from_E_single($16));
 $9 = $17;
 $18 = $8;
 $19 = $9;
 $20 = $18 * $19;
 $21 = $20 * 931.49402799999996;
 $22 = $21 * 1.6021764600000001E-13;
 $23 = $22 / 299792458.0;
 $10 = $23;
 $24 = $7;
 $25 = (_AT_Z_from_element_acronym_single($24)|0);
 $11 = $25;
 $26 = $7;
 $27 = (+_AT_electron_density_cm3_from_element_acronym_single($26));
 $12 = $27;
 $28 = $5;
 $29 = (+($28|0));
 $30 = (+_gsl_pow_2($29));
 $31 = 12.566370614359172 * $30;
 $32 = $11;
 $33 = (($32) + 1)|0;
 $34 = (+($33|0));
 $35 = $31 * $34;
 $36 = $12;
 $37 = $35 * $36;
 $38 = $6;
 $39 = $37 * $38;
 $40 = $8;
 $41 = 6.2831853071795862 * $40;
 $42 = $10;
 $43 = $41 * $42;
 $44 = 4.8352764203462883E-34 / $43;
 $45 = (+_gsl_pow_2($44));
 $46 = $39 * $45;
 $13 = $46;
 $47 = $13;
 $48 = (+Math_sqrt((+$47)));
 STACKTOP = sp;return (+$48);
}
function _AT_characteristic_single_scattering_angle($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_AT_characteristic_single_scattering_angle_single($19,$23,$27,$31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return 0;
}
function _AT_screening_angle_single($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = (+_AT_beta_from_E_single($11));
 $6 = $12;
 $13 = $3;
 $14 = (+_AT_gamma_from_E_single($13));
 $7 = $14;
 $15 = $6;
 $16 = $7;
 $17 = $15 * $16;
 $18 = $17 * 931.49402799999996;
 $8 = $18;
 $19 = $5;
 $20 = (_AT_Z_from_element_acronym_single($19)|0);
 $9 = $20;
 $21 = $9;
 $22 = (+($21|0));
 $23 = (+Math_pow((+$22),0.66666666666666663));
 $24 = 0.0037289394872640539 * $23;
 $25 = $8;
 $26 = 0.88900000000000001 * $25;
 $27 = $24 / $26;
 $10 = $27;
 $28 = $10;
 $29 = $4;
 $30 = (+($29|0));
 $31 = 0.0072973530000000003 * $30;
 $32 = $9;
 $33 = (+($32|0));
 $34 = $31 * $33;
 $35 = $6;
 $36 = $34 / $35;
 $37 = (+_gsl_pow_2($36));
 $38 = 3.7599999999999998 * $37;
 $39 = 1.1299999999999999 + $38;
 $40 = (+Math_sqrt((+$39)));
 $41 = $28 * $40;
 STACKTOP = sp;return (+$41);
}
function _AT_screening_angle($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $10;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $8;
  $23 = $10;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (+_AT_screening_angle_single($17,$21,$25));
  $27 = $9;
  $28 = $10;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $10 = $31;
 }
 STACKTOP = sp;return 0;
}
function _AT_effective_collision_number_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 48|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = (+_AT_characteristic_single_scattering_angle_single($12,$13,$14,$15));
 $9 = $16;
 $17 = $5;
 $18 = $6;
 $19 = $8;
 $20 = (+_AT_screening_angle_single($17,$18,$19));
 $10 = $20;
 $21 = $9;
 $22 = (+_gsl_pow_2($21));
 $23 = $10;
 $24 = (+_gsl_pow_2($23));
 $25 = 1.167 * $24;
 $26 = $22 / $25;
 $11 = $26;
 $27 = $11;
 $28 = $27 < 1.1399999999999999;
 if ($28) {
  (_printf(74022,$vararg_buffer)|0);
  $4 = 0.0;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 } else {
  $29 = $11;
  $4 = $29;
  $30 = $4;
  STACKTOP = sp;return (+$30);
 }
 return +(0.0);
}
function _AT_effective_collision_number($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_AT_effective_collision_number_single($19,$23,$27,$31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return 0;
}
function _AT_reduced_target_thickness_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = (+_AT_effective_collision_number_single($9,$10,$11,$12));
 $8 = $13;
 $14 = $8;
 $15 = 1.167 * $14;
 $16 = (+_llvm_log10_f64((+$15)));
 $17 = 2.3862999999999999 * $16;
 $18 = 2.6000000000000001 + $17;
 $19 = $8;
 $20 = 1.167 * $19;
 $21 = (+_llvm_log10_f64((+$20)));
 $22 = $21 + 0.99399999999999999;
 $23 = 3.234 / $22;
 $24 = $18 - $23;
 STACKTOP = sp;return (+$24);
}
function _AT_reduced_target_thickness($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_AT_reduced_target_thickness_single($19,$23,$27,$31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return 0;
}
function _AT_characteristic_multiple_scattering_angle_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = (+_AT_reduced_target_thickness_single($10,$11,$12,$13));
 $8 = $14;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = (+_AT_characteristic_single_scattering_angle_single($15,$16,$17,$18));
 $9 = $19;
 $20 = $9;
 $21 = $8;
 $22 = $21 / 2.0;
 $23 = (+Math_sqrt((+$22)));
 $24 = $20 * $23;
 STACKTOP = sp;return (+$24);
}
function _AT_characteristic_multiple_scattering_angle($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+_AT_characteristic_multiple_scattering_angle_single($19,$23,$27,$31));
  $33 = $11;
  $34 = $12;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $12;
  $37 = (($36) + 1)|0;
  $12 = $37;
 }
 STACKTOP = sp;return 0;
}
function _AT_Moliere_function_f0($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $2 = 0.0;
 $3 = 0.0;
 $4 = 1.41334;
 $5 = 3.5460500000000001;
 $7 = (+Math_sqrt(1.5707963267948966));
 $8 = 1.41334 * $7;
 $9 = 3.5460500000000001 / $8;
 $10 = $1;
 $11 = $10 - 0.0;
 $12 = $11 / 1.41334;
 $13 = (+_gsl_pow_2($12));
 $14 = -2.0 * $13;
 $15 = (+Math_exp((+$14)));
 $16 = $9 * $15;
 $17 = 0.0 + $16;
 $6 = $17;
 $18 = $6;
 STACKTOP = sp;return (+$18);
}
function _AT_Moliere_function_f1($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $1 = $0;
 $2 = 0.00363;
 $3 = 0.059130000000000002;
 $4 = 0.79315000000000002;
 $5 = 0.79610999999999998;
 $17 = (+Math_sqrt(1.5707963267948966));
 $18 = 0.79315000000000002 * $17;
 $19 = 0.79610999999999998 / $18;
 $20 = $1;
 $21 = $20 - 0.059130000000000002;
 $22 = $21 / 0.79315000000000002;
 $23 = (+_gsl_pow_2($22));
 $24 = -2.0 * $23;
 $25 = (+Math_exp((+$24)));
 $26 = $19 * $25;
 $27 = 0.00363 + $26;
 $6 = $27;
 $7 = 0.00363;
 $8 = 0.96016999999999997;
 $9 = 0.98617999999999994;
 $10 = -1.04677;
 $28 = (+Math_sqrt(1.5707963267948966));
 $29 = 0.98617999999999994 * $28;
 $30 = -1.04677 / $29;
 $31 = $1;
 $32 = $31 - 0.96016999999999997;
 $33 = $32 / 0.98617999999999994;
 $34 = (+_gsl_pow_2($33));
 $35 = -2.0 * $34;
 $36 = (+Math_exp((+$35)));
 $37 = $30 * $36;
 $38 = 0.00363 + $37;
 $11 = $38;
 $12 = 0.00363;
 $13 = 0.96016999999999997;
 $14 = 2.1501199999999998;
 $15 = 0.71399000000000001;
 $39 = (+Math_sqrt(1.5707963267948966));
 $40 = 2.1501199999999998 * $39;
 $41 = 0.71399000000000001 / $40;
 $42 = $1;
 $43 = $42 - 0.96016999999999997;
 $44 = $43 / 2.1501199999999998;
 $45 = (+_gsl_pow_2($44));
 $46 = -2.0 * $45;
 $47 = (+Math_exp((+$46)));
 $48 = $41 * $47;
 $49 = 0.00363 + $48;
 $16 = $49;
 $50 = $6;
 $51 = $11;
 $52 = $50 + $51;
 $53 = $16;
 $54 = $52 + $53;
 STACKTOP = sp;return (+$54);
}
function _AT_Moliere_function_f2($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $1 = $0;
 $2 = 6.4000000000000005E-4;
 $3 = 0.084839999999999998;
 $4 = 0.85501000000000005;
 $5 = 4.2210200000000002;
 $22 = (+Math_sqrt(1.5707963267948966));
 $23 = 0.85501000000000005 * $22;
 $24 = 4.2210200000000002 / $23;
 $25 = $1;
 $26 = $25 - 0.084839999999999998;
 $27 = $26 / 0.85501000000000005;
 $28 = (+_gsl_pow_2($27));
 $29 = -2.0 * $28;
 $30 = (+Math_exp((+$29)));
 $31 = $24 * $30;
 $32 = 6.4000000000000005E-4 + $31;
 $6 = $32;
 $7 = 6.4000000000000005E-4;
 $8 = 0.92230000000000001;
 $9 = 0.011379999999999999;
 $10 = -0.0028600000000000001;
 $33 = (+Math_sqrt(1.5707963267948966));
 $34 = 0.011379999999999999 * $33;
 $35 = -0.0028600000000000001 / $34;
 $36 = $1;
 $37 = $36 - 0.92230000000000001;
 $38 = $37 / 0.011379999999999999;
 $39 = (+_gsl_pow_2($38));
 $40 = -2.0 * $39;
 $41 = (+Math_exp((+$40)));
 $42 = $35 * $41;
 $43 = 6.4000000000000005E-4 + $42;
 $11 = $43;
 $12 = 6.4000000000000005E-4;
 $13 = 0.92230000000000001;
 $14 = 1.45644;
 $15 = -6.11463;
 $44 = (+Math_sqrt(1.5707963267948966));
 $45 = 1.45644 * $44;
 $46 = -6.11463 / $45;
 $47 = $1;
 $48 = $47 - 0.92230000000000001;
 $49 = $48 / 1.45644;
 $50 = (+_gsl_pow_2($49));
 $51 = -2.0 * $50;
 $52 = (+Math_exp((+$51)));
 $53 = $46 * $52;
 $54 = 6.4000000000000005E-4 + $53;
 $16 = $54;
 $17 = 6.3999999999999997E-5;
 $18 = 1.32168;
 $19 = 1.08239;
 $20 = 3.7194099999999999;
 $55 = (+Math_sqrt(1.5707963267948966));
 $56 = 1.08239 * $55;
 $57 = 3.7194099999999999 / $56;
 $58 = $1;
 $59 = $58 - 1.32168;
 $60 = $59 / 1.08239;
 $61 = (+_gsl_pow_2($60));
 $62 = -2.0 * $61;
 $63 = (+Math_exp((+$62)));
 $64 = $57 * $63;
 $65 = 6.3999999999999997E-5 + $64;
 $21 = $65;
 $66 = $6;
 $67 = $11;
 $68 = $66 + $67;
 $69 = $16;
 $70 = $68 + $69;
 $71 = $21;
 $72 = $70 + $71;
 STACKTOP = sp;return (+$72);
}
function _AT_scattering_angle_distribution_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = (+_AT_characteristic_multiple_scattering_angle_single($22,$23,$24,$25));
 $11 = $26;
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = (+_AT_characteristic_single_scattering_angle_single($27,$28,$29,$30));
 $12 = $31;
 $32 = $6;
 $33 = $7;
 $34 = $8;
 $35 = $9;
 $36 = (+_AT_reduced_target_thickness_single($32,$33,$34,$35));
 $13 = $36;
 $37 = $10;
 $38 = $12;
 $39 = $13;
 $40 = (+Math_sqrt((+$39)));
 $41 = $38 * $40;
 $42 = $37 / $41;
 $14 = $42;
 $43 = $14;
 $44 = (+_AT_Moliere_function_f0($43));
 $15 = $44;
 $45 = $14;
 $46 = (+_AT_Moliere_function_f1($45));
 $16 = $46;
 $47 = $14;
 $48 = (+_AT_Moliere_function_f2($47));
 $17 = $48;
 $49 = $14;
 $50 = - $49;
 $18 = $50;
 $51 = $18;
 $52 = (+_AT_Moliere_function_f0($51));
 $19 = $52;
 $53 = $18;
 $54 = (+_AT_Moliere_function_f1($53));
 $20 = $54;
 $55 = $18;
 $56 = (+_AT_Moliere_function_f2($55));
 $21 = $56;
 $57 = $10;
 $58 = $57 > 0.0;
 $59 = $11;
 $60 = (+_gsl_pow_2($59));
 $61 = 12.566370614359172 * $60;
 $62 = 1.0 / $61;
 if ($58) {
  $63 = $15;
  $64 = $16;
  $65 = $13;
  $66 = $64 / $65;
  $67 = $63 + $66;
  $68 = $17;
  $69 = $13;
  $70 = $13;
  $71 = $69 * $70;
  $72 = $68 / $71;
  $73 = $67 + $72;
  $74 = $62 * $73;
  $5 = $74;
  $87 = $5;
  STACKTOP = sp;return (+$87);
 } else {
  $75 = $19;
  $76 = $20;
  $77 = $13;
  $78 = $76 / $77;
  $79 = $75 + $78;
  $80 = $21;
  $81 = $13;
  $82 = $13;
  $83 = $81 * $82;
  $84 = $80 / $83;
  $85 = $79 + $84;
  $86 = $62 * $85;
  $5 = $86;
  $87 = $5;
  STACKTOP = sp;return (+$87);
 }
 return +(0.0);
}
function _AT_scattering_angle_distribution($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $9;
  $20 = $10;
  $21 = $11;
  $22 = $12;
  $23 = $14;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+_AT_scattering_angle_distribution_single($18,$19,$20,$21,$25));
  $27 = $13;
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $14;
  $31 = (($30) + 1)|0;
  $14 = $31;
 }
 STACKTOP = sp;return 0;
}
function _AT_Highland_angle_single($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = (+_AT_beta_from_E_single($9));
 $6 = $10;
 $11 = $3;
 $12 = (+_AT_gamma_from_E_single($11));
 $7 = $12;
 $13 = $6;
 $14 = $7;
 $15 = $13 * $14;
 $16 = $15 * 931.49402799999996;
 $8 = $16;
 $17 = $6;
 $18 = $8;
 $19 = $17 * $18;
 $20 = 14.1 / $19;
 $21 = $4;
 $22 = (+($21|0));
 $23 = $20 * $22;
 $24 = $5;
 $25 = (+Math_sqrt((+$24)));
 $26 = $23 * $25;
 $27 = $5;
 $28 = (+_llvm_log10_f64((+$27)));
 $29 = $28 / 9.0;
 $30 = 1.0 + $29;
 $31 = $26 * $30;
 STACKTOP = sp;return (+$31);
}
function _AT_Highland_angle($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $10;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $8;
  $23 = $10;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+_AT_Highland_angle_single($17,$21,$25));
  $27 = $9;
  $28 = $10;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $26;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $10 = $31;
 }
 STACKTOP = sp;return 0;
}
function _AT_range_straggling_convolution($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 32|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAPF64[$7>>3] = $3;
 $8 = 0.0;
 $12 = $5;
 $13 = $4;
 $14 = $12 - $13;
 $9 = $14;
 $15 = $6;
 $16 = $15 != 0.0;
 if (!($16)) {
  ___assert_fail((74125|0),(74138|0),40,(74174|0));
  // unreachable;
 }
 $17 = $9;
 $18 = $6;
 $19 = $17 / $18;
 $10 = $19;
 $20 = $10;
 $21 = $20 > -5.0;
 $22 = $10;
 $23 = $22 < 10.0;
 $or$cond = $21 & $23;
 if ($or$cond) {
  $24 = (+Math_sqrt(6.2831853071795862));
  $25 = $6;
  $26 = $24 * $25;
  $27 = 1.0 / $26;
  $8 = $27;
  $28 = $9;
  $29 = -1.0 * $28;
  $30 = $9;
  $31 = $29 * $30;
  $32 = $6;
  $33 = 4.0 * $32;
  $34 = $6;
  $35 = $33 * $34;
  $36 = $31 / $35;
  $37 = (+Math_exp((+$36)));
  $38 = $6;
  $39 = +HEAPF64[$7>>3];
  $40 = (+Math_pow((+$38),(+$39)));
  $41 = $37 * $40;
  $42 = $8;
  $43 = $42 * $41;
  $8 = $43;
  (_AT_gamma_($7,$11)|0);
  $44 = +HEAPF64[$11>>3];
  $45 = $8;
  $46 = $45 * $44;
  $8 = $46;
  $47 = +HEAPF64[$7>>3];
  $48 = -1.0 * $47;
  $49 = $10;
  $50 = -1.0 * $49;
  $51 = (+_AT_Dyx($48,$50));
  HEAPF64[$11>>3] = $51;
  $52 = +HEAPF64[$11>>3];
  $53 = $8;
  $54 = $53 * $52;
  $8 = $54;
 }
 $55 = $10;
 $56 = $55 >= 10.0;
 if (!($56)) {
  $61 = $8;
  STACKTOP = sp;return (+$61);
 }
 $57 = $9;
 $58 = +HEAPF64[$7>>3];
 $59 = $58 - 1.0;
 $60 = (+Math_pow((+$57),(+$59)));
 $8 = $60;
 $61 = $8;
 STACKTOP = sp;return (+$61);
}
function _AT_gamma_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0;
 var $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 HEAPF64[10606] = 3.1415926535897931;
 $5 = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = $2;
 $8 = +HEAPF64[$7>>3];
 $9 = (~~(($8)));
 $10 = (+($9|0));
 $11 = $6 == $10;
 $12 = $2;
 $13 = +HEAPF64[$12>>3];
 if ($11) {
  $14 = $13 > 0.0;
  $15 = $3;
  if (!($14)) {
   HEAPF64[$15>>3] = 1.0000000000000001E+300;
   STACKTOP = sp;return 0;
  }
  HEAPF64[$15>>3] = 1.0;
  $16 = $2;
  $17 = +HEAPF64[$16>>3];
  $18 = $17 - 1.0;
  $19 = (~~(($18)));
  HEAP32[322950] = $19;
  $20 = HEAP32[322950]|0;
  $4 = $20;
  HEAP32[322951] = 2;
  while(1) {
   $21 = HEAP32[322951]|0;
   $22 = $4;
   $23 = ($21|0)<=($22|0);
   if (!($23)) {
    break;
   }
   $24 = HEAP32[322951]|0;
   $25 = (+($24|0));
   $26 = $3;
   $27 = +HEAPF64[$26>>3];
   $28 = $27 * $25;
   HEAPF64[$26>>3] = $28;
   $29 = HEAP32[322951]|0;
   $30 = (($29) + 1)|0;
   HEAP32[322951] = $30;
  }
  STACKTOP = sp;return 0;
 }
 $31 = (+Math_abs((+$13)));
 $32 = $31 > 1.0;
 $33 = $2;
 $34 = +HEAPF64[$33>>3];
 if ($32) {
  $35 = (+Math_abs((+$34)));
  HEAPF64[10607] = $35;
  $36 = +HEAPF64[10607];
  $37 = (~~(($36)));
  HEAP32[322952] = $37;
  HEAPF64[10608] = 1.0;
  $38 = HEAP32[322952]|0;
  $4 = $38;
  HEAP32[322951] = 1;
  while(1) {
   $39 = HEAP32[322951]|0;
   $40 = $4;
   $41 = ($39|0)<=($40|0);
   if (!($41)) {
    break;
   }
   $42 = +HEAPF64[10607];
   $43 = HEAP32[322951]|0;
   $44 = (+($43|0));
   $45 = $42 - $44;
   $46 = +HEAPF64[10608];
   $47 = $46 * $45;
   HEAPF64[10608] = $47;
   $48 = HEAP32[322951]|0;
   $49 = (($48) + 1)|0;
   HEAP32[322951] = $49;
  }
  $50 = HEAP32[322952]|0;
  $51 = (+($50|0));
  $52 = +HEAPF64[10607];
  $53 = $52 - $51;
  HEAPF64[10607] = $53;
 } else {
  HEAPF64[10607] = $34;
 }
 HEAPF64[10609] = 9.9999999999999997E-17;
 HEAP32[322951] = 25;
 while(1) {
  $54 = HEAP32[322951]|0;
  $55 = ($54|0)>=(1);
  $56 = +HEAPF64[10609];
  $57 = +HEAPF64[10607];
  $58 = $56 * $57;
  if (!($55)) {
   break;
  }
  $59 = HEAP32[322951]|0;
  $60 = (($59) - 1)|0;
  $61 = (992 + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $58 + $62;
  HEAPF64[10609] = $63;
  $64 = HEAP32[322951]|0;
  $65 = (($64) + -1)|0;
  HEAP32[322951] = $65;
 }
 $66 = 1.0 / $58;
 $67 = $3;
 HEAPF64[$67>>3] = $66;
 $68 = $2;
 $69 = +HEAPF64[$68>>3];
 $70 = (+Math_abs((+$69)));
 $71 = $70 > 1.0;
 if (!($71)) {
  STACKTOP = sp;return 0;
 }
 $72 = +HEAPF64[10608];
 $73 = $3;
 $74 = +HEAPF64[$73>>3];
 $75 = $74 * $72;
 HEAPF64[$73>>3] = $75;
 $76 = $2;
 $77 = +HEAPF64[$76>>3];
 $78 = $77 < 0.0;
 if (!($78)) {
  STACKTOP = sp;return 0;
 }
 $79 = +HEAPF64[10606];
 $80 = - $79;
 $81 = $2;
 $82 = +HEAPF64[$81>>3];
 $83 = $3;
 $84 = +HEAPF64[$83>>3];
 $85 = $82 * $84;
 $86 = +HEAPF64[10606];
 $87 = $2;
 $88 = +HEAPF64[$87>>3];
 $89 = $86 * $88;
 $90 = (+Math_sin((+$89)));
 $91 = $85 * $90;
 $92 = $80 / $91;
 $93 = $3;
 HEAPF64[$93>>3] = $92;
 STACKTOP = sp;return 0;
}
function _AT_Dyx($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1664|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1664|0);
 $2 = sp + 1648|0;
 $3 = sp + 1640|0;
 $4 = sp + 1632|0;
 $5 = sp + 816|0;
 $6 = sp;
 $7 = sp + 1624|0;
 HEAPF64[$2>>3] = $0;
 HEAPF64[$3>>3] = $1;
 (_pbdv_($2,$3,$6,$5,$4,$7)|0);
 $8 = +HEAPF64[$4>>3];
 STACKTOP = sp;return (+$8);
}
function _pbdv_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $7;
 $14 = +HEAPF64[$13>>3];
 $15 = (+Math_abs((+$14)));
 HEAPF64[10562] = $15;
 $16 = $6;
 $17 = +HEAPF64[$16>>3];
 HEAPF64[10563] = $17;
 $18 = $6;
 $19 = +HEAPF64[$18>>3];
 $20 = (+_d_sign(1.0,$19));
 $21 = $6;
 $22 = +HEAPF64[$21>>3];
 $23 = $22 + $20;
 HEAPF64[$21>>3] = $23;
 $24 = $6;
 $25 = +HEAPF64[$24>>3];
 $26 = (~~(($25)));
 HEAP32[322940] = $26;
 $27 = $6;
 $28 = +HEAPF64[$27>>3];
 $29 = HEAP32[322940]|0;
 $30 = (+($29|0));
 $31 = $28 - $30;
 HEAPF64[10564] = $31;
 $32 = HEAP32[322940]|0;
 $33 = (Math_abs(($32|0))|0);
 HEAP32[322941] = $33;
 $34 = $7;
 $35 = +HEAPF64[$34>>3];
 $36 = $35 * -0.25;
 $37 = $7;
 $38 = +HEAPF64[$37>>3];
 $39 = $36 * $38;
 $40 = (+Math_exp((+$39)));
 HEAPF64[10565] = $40;
 $41 = HEAP32[322941]|0;
 $42 = ($41|0)>=(1);
 if ($42) {
  HEAP32[322942] = 1;
 }
 $43 = $6;
 $44 = +HEAPF64[$43>>3];
 $45 = $44 >= 0.0;
 L4: do {
  if ($45) {
   $46 = +HEAPF64[10564];
   $47 = $46 == 0.0;
   L6: do {
    if ($47) {
     $48 = +HEAPF64[10565];
     HEAPF64[10566] = $48;
     $49 = $7;
     $50 = +HEAPF64[$49>>3];
     $51 = +HEAPF64[10565];
     $52 = $50 * $51;
     HEAPF64[10567] = $52;
    } else {
     $53 = HEAP32[322942]|0;
     $12 = $53;
     HEAP32[322943] = 0;
     while(1) {
      $54 = HEAP32[322943]|0;
      $55 = $12;
      $56 = ($54|0)<=($55|0);
      if (!($56)) {
       break L6;
      }
      $57 = +HEAPF64[10564];
      $58 = HEAP32[322943]|0;
      $59 = (+($58|0));
      $60 = $57 + $59;
      HEAPF64[10568] = $60;
      $61 = +HEAPF64[10562];
      $62 = $61 <= 5.8000001907348633;
      if ($62) {
       $63 = $7;
       (_dvsa_(84544,$63,84536)|0);
      }
      $64 = +HEAPF64[10562];
      $65 = $64 > 5.8000001907348633;
      if ($65) {
       $66 = $7;
       (_dvla_(84544,$66,84536)|0);
      }
      $67 = HEAP32[322943]|0;
      $68 = ($67|0)==(0);
      if ($68) {
       $69 = +HEAPF64[10567];
       HEAPF64[10566] = $69;
      }
      $70 = HEAP32[322943]|0;
      $71 = (($70) + 1)|0;
      HEAP32[322943] = $71;
     }
    }
   } while(0);
   $72 = +HEAPF64[10566];
   $73 = $8;
   HEAPF64[$73>>3] = $72;
   $74 = +HEAPF64[10567];
   $75 = $8;
   $76 = ((($75)) + 8|0);
   HEAPF64[$76>>3] = $74;
   $77 = HEAP32[322941]|0;
   $12 = $77;
   HEAP32[322944] = 2;
   while(1) {
    $78 = HEAP32[322944]|0;
    $79 = $12;
    $80 = ($78|0)<=($79|0);
    if (!($80)) {
     break L4;
    }
    $81 = $7;
    $82 = +HEAPF64[$81>>3];
    $83 = +HEAPF64[10567];
    $84 = $82 * $83;
    $85 = HEAP32[322944]|0;
    $86 = (+($85|0));
    $87 = +HEAPF64[10564];
    $88 = $86 + $87;
    $89 = $88 - 1.0;
    $90 = +HEAPF64[10566];
    $91 = $89 * $90;
    $92 = $84 - $91;
    $93 = $10;
    HEAPF64[$93>>3] = $92;
    $94 = $10;
    $95 = +HEAPF64[$94>>3];
    $96 = $8;
    $97 = HEAP32[322944]|0;
    $98 = (($96) + ($97<<3)|0);
    HEAPF64[$98>>3] = $95;
    $99 = +HEAPF64[10567];
    HEAPF64[10566] = $99;
    $100 = $10;
    $101 = +HEAPF64[$100>>3];
    HEAPF64[10567] = $101;
    $102 = HEAP32[322944]|0;
    $103 = (($102) + 1)|0;
    HEAP32[322944] = $103;
   }
  } else {
   $104 = $7;
   $105 = +HEAPF64[$104>>3];
   $106 = $105 <= 0.0;
   if ($106) {
    $107 = +HEAPF64[10562];
    $108 = $107 <= 5.7999999999999998;
    $109 = $7;
    if ($108) {
     (_dvsa_(84512,$109,84528)|0);
     $110 = +HEAPF64[10564];
     $111 = $110 - 1.0;
     HEAPF64[10568] = $111;
     $112 = $7;
     (_dvsa_(84544,$112,84536)|0);
    } else {
     (_dvla_(84512,$109,84528)|0);
     $113 = +HEAPF64[10564];
     $114 = $113 - 1.0;
     HEAPF64[10568] = $114;
     $115 = $7;
     (_dvla_(84544,$115,84536)|0);
    }
    $116 = +HEAPF64[10566];
    $117 = $8;
    HEAPF64[$117>>3] = $116;
    $118 = +HEAPF64[10567];
    $119 = $8;
    $120 = ((($119)) + 8|0);
    HEAPF64[$120>>3] = $118;
    $121 = HEAP32[322941]|0;
    $12 = $121;
    HEAP32[322944] = 2;
    while(1) {
     $122 = HEAP32[322944]|0;
     $123 = $12;
     $124 = ($122|0)<=($123|0);
     if (!($124)) {
      break L4;
     }
     $125 = $7;
     $126 = +HEAPF64[$125>>3];
     $127 = - $126;
     $128 = +HEAPF64[10567];
     $129 = $127 * $128;
     $130 = +HEAPF64[10566];
     $131 = $129 + $130;
     $132 = HEAP32[322944]|0;
     $133 = (+($132|0));
     $134 = $133 - 1.0;
     $135 = +HEAPF64[10564];
     $136 = $134 - $135;
     $137 = $131 / $136;
     HEAPF64[10569] = $137;
     $138 = +HEAPF64[10569];
     $139 = $8;
     $140 = HEAP32[322944]|0;
     $141 = (($139) + ($140<<3)|0);
     HEAPF64[$141>>3] = $138;
     $142 = +HEAPF64[10567];
     HEAPF64[10566] = $142;
     $143 = +HEAPF64[10569];
     HEAPF64[10567] = $143;
     $144 = HEAP32[322944]|0;
     $145 = (($144) + 1)|0;
     HEAP32[322944] = $145;
    }
   }
   $146 = $7;
   $147 = +HEAPF64[$146>>3];
   $148 = $147 <= 2.0;
   if ($148) {
    $149 = HEAP32[322940]|0;
    $150 = (+($149|0));
    $151 = +HEAPF64[10564];
    $152 = $150 + $151;
    HEAPF64[10570] = $152;
    $153 = HEAP32[322940]|0;
    $154 = ($153|0)==(0);
    if ($154) {
     $155 = +HEAPF64[10570];
     $156 = $155 + -1.0;
     HEAPF64[10570] = $156;
    }
    $157 = +HEAPF64[10570];
    $158 = - $157;
    $159 = (~~(($158)));
    HEAP32[322945] = $159;
    $160 = $7;
    (_dvsa_(84560,$160,84568)|0);
    $161 = +HEAPF64[10570];
    $162 = $161 + 1.0;
    HEAPF64[10568] = $162;
    $163 = $7;
    (_dvsa_(84544,$163,84576)|0);
    $164 = +HEAPF64[10571];
    $165 = $8;
    $166 = HEAP32[322945]|0;
    $167 = (($165) + ($166<<3)|0);
    HEAPF64[$167>>3] = $164;
    $168 = +HEAPF64[10572];
    $169 = $8;
    $170 = HEAP32[322945]|0;
    $171 = (($170) - 1)|0;
    $172 = (($169) + ($171<<3)|0);
    HEAPF64[$172>>3] = $168;
    $173 = HEAP32[322945]|0;
    $174 = (($173) - 2)|0;
    HEAP32[322944] = $174;
    while(1) {
     $175 = HEAP32[322944]|0;
     $176 = ($175|0)>=(0);
     if (!($176)) {
      break L4;
     }
     $177 = $7;
     $178 = +HEAPF64[$177>>3];
     $179 = +HEAPF64[10572];
     $180 = $178 * $179;
     $181 = HEAP32[322944]|0;
     $182 = (+($181|0));
     $183 = +HEAPF64[10564];
     $184 = $182 - $183;
     $185 = $184 + 1.0;
     $186 = +HEAPF64[10571];
     $187 = $185 * $186;
     $188 = $180 + $187;
     HEAPF64[10573] = $188;
     $189 = +HEAPF64[10573];
     $190 = $8;
     $191 = HEAP32[322944]|0;
     $192 = (($190) + ($191<<3)|0);
     HEAPF64[$192>>3] = $189;
     $193 = +HEAPF64[10572];
     HEAPF64[10571] = $193;
     $194 = +HEAPF64[10573];
     HEAPF64[10572] = $194;
     $195 = HEAP32[322944]|0;
     $196 = (($195) + -1)|0;
     HEAP32[322944] = $196;
    }
   }
   $197 = +HEAPF64[10562];
   $198 = $197 <= 5.8000001907348633;
   if ($198) {
    $199 = $7;
    (_dvsa_(84512,$199,84528)|0);
   }
   $200 = +HEAPF64[10562];
   $201 = $200 > 5.8000001907348633;
   if ($201) {
    $202 = $7;
    (_dvla_(84512,$202,84528)|0);
   }
   $203 = +HEAPF64[10566];
   $204 = $8;
   HEAPF64[$204>>3] = $203;
   $205 = HEAP32[322941]|0;
   $206 = (($205) + 100)|0;
   HEAP32[322946] = $206;
   HEAPF64[10571] = 0.0;
   HEAPF64[10572] = 1.0000000000000001E-30;
   $207 = HEAP32[322946]|0;
   HEAP32[322944] = $207;
   while(1) {
    $208 = HEAP32[322944]|0;
    $209 = ($208|0)>=(0);
    if (!($209)) {
     break;
    }
    $210 = $7;
    $211 = +HEAPF64[$210>>3];
    $212 = +HEAPF64[10572];
    $213 = $211 * $212;
    $214 = HEAP32[322944]|0;
    $215 = (+($214|0));
    $216 = +HEAPF64[10564];
    $217 = $215 - $216;
    $218 = $217 + 1.0;
    $219 = +HEAPF64[10571];
    $220 = $218 * $219;
    $221 = $213 + $220;
    HEAPF64[10573] = $221;
    $222 = HEAP32[322944]|0;
    $223 = HEAP32[322941]|0;
    $224 = ($222|0)<=($223|0);
    if ($224) {
     $225 = +HEAPF64[10573];
     $226 = $8;
     $227 = HEAP32[322944]|0;
     $228 = (($226) + ($227<<3)|0);
     HEAPF64[$228>>3] = $225;
    }
    $229 = +HEAPF64[10572];
    HEAPF64[10571] = $229;
    $230 = +HEAPF64[10573];
    HEAPF64[10572] = $230;
    $231 = HEAP32[322944]|0;
    $232 = (($231) + -1)|0;
    HEAP32[322944] = $232;
   }
   $233 = +HEAPF64[10566];
   $234 = +HEAPF64[10573];
   $235 = $233 / $234;
   HEAPF64[10574] = $235;
   $236 = HEAP32[322941]|0;
   $12 = $236;
   HEAP32[322944] = 0;
   while(1) {
    $237 = HEAP32[322944]|0;
    $238 = $12;
    $239 = ($237|0)<=($238|0);
    if (!($239)) {
     break L4;
    }
    $240 = +HEAPF64[10574];
    $241 = $8;
    $242 = HEAP32[322944]|0;
    $243 = (($241) + ($242<<3)|0);
    $244 = +HEAPF64[$243>>3];
    $245 = $240 * $244;
    $246 = $8;
    $247 = HEAP32[322944]|0;
    $248 = (($246) + ($247<<3)|0);
    HEAPF64[$248>>3] = $245;
    $249 = HEAP32[322944]|0;
    $250 = (($249) + 1)|0;
    HEAP32[322944] = $250;
   }
  }
 } while(0);
 $251 = HEAP32[322941]|0;
 $252 = (($251) - 1)|0;
 $12 = $252;
 HEAP32[322944] = 0;
 while(1) {
  $253 = HEAP32[322944]|0;
  $254 = $12;
  $255 = ($253|0)<=($254|0);
  if (!($255)) {
   break;
  }
  $256 = +HEAPF64[10564];
  $257 = (+Math_abs((+$256)));
  $258 = HEAP32[322944]|0;
  $259 = (+($258|0));
  $260 = $257 + $259;
  HEAPF64[10568] = $260;
  $261 = $6;
  $262 = +HEAPF64[$261>>3];
  $263 = $262 >= 0.0;
  $264 = $7;
  $265 = +HEAPF64[$264>>3];
  if ($263) {
   $266 = $265 * 0.5;
   $267 = $8;
   $268 = HEAP32[322944]|0;
   $269 = (($267) + ($268<<3)|0);
   $270 = +HEAPF64[$269>>3];
   $271 = $266 * $270;
   $272 = $8;
   $273 = HEAP32[322944]|0;
   $274 = (($273) + 1)|0;
   $275 = (($272) + ($274<<3)|0);
   $276 = +HEAPF64[$275>>3];
   $277 = $271 - $276;
   $278 = $9;
   $279 = HEAP32[322944]|0;
   $280 = (($278) + ($279<<3)|0);
   HEAPF64[$280>>3] = $277;
  } else {
   $281 = $265 * -0.5;
   $282 = $8;
   $283 = HEAP32[322944]|0;
   $284 = (($282) + ($283<<3)|0);
   $285 = +HEAPF64[$284>>3];
   $286 = $281 * $285;
   $287 = +HEAPF64[10568];
   $288 = $8;
   $289 = HEAP32[322944]|0;
   $290 = (($289) + 1)|0;
   $291 = (($288) + ($290<<3)|0);
   $292 = +HEAPF64[$291>>3];
   $293 = $287 * $292;
   $294 = $286 - $293;
   $295 = $9;
   $296 = HEAP32[322944]|0;
   $297 = (($295) + ($296<<3)|0);
   HEAPF64[$297>>3] = $294;
  }
  $298 = HEAP32[322944]|0;
  $299 = (($298) + 1)|0;
  HEAP32[322944] = $299;
 }
 $300 = $8;
 $301 = HEAP32[322941]|0;
 $302 = (($301) - 1)|0;
 $303 = (($300) + ($302<<3)|0);
 $304 = +HEAPF64[$303>>3];
 $305 = $10;
 HEAPF64[$305>>3] = $304;
 $306 = $9;
 $307 = HEAP32[322941]|0;
 $308 = (($307) - 1)|0;
 $309 = (($306) + ($308<<3)|0);
 $310 = +HEAPF64[$309>>3];
 $311 = $11;
 HEAPF64[$311>>3] = $310;
 $312 = +HEAPF64[10563];
 $313 = $6;
 HEAPF64[$313>>3] = $312;
 STACKTOP = sp;return 0;
}
function _d_sign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 >= 0.0;
 $7 = $2;
 $8 = - $7;
 $9 = $6 ? $7 : $8;
 $4 = $9;
 $10 = $3;
 $11 = $10 >= 0.0;
 $12 = $4;
 $13 = - $12;
 $14 = $11 ? $12 : $13;
 STACKTOP = sp;return (+$14);
}
function _dvsa_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF64[10592] = 1.0000000000000001E-15;
 HEAPF64[10593] = 3.1415926535897931;
 $7 = (+Math_sqrt(2.0));
 HEAPF64[10594] = $7;
 $8 = $4;
 $9 = +HEAPF64[$8>>3];
 $10 = $9 * -0.25;
 $11 = $4;
 $12 = +HEAPF64[$11>>3];
 $13 = $10 * $12;
 $14 = (+Math_exp((+$13)));
 HEAPF64[10595] = $14;
 $15 = $3;
 $16 = +HEAPF64[$15>>3];
 $17 = 1.0 - $16;
 $18 = $17 * 0.5;
 HEAPF64[10596] = $18;
 $19 = $3;
 $20 = +HEAPF64[$19>>3];
 $21 = $20 == 0.0;
 if ($21) {
  $22 = +HEAPF64[10595];
  $23 = $5;
  HEAPF64[$23>>3] = $22;
  STACKTOP = sp;return 0;
 }
 $24 = $4;
 $25 = +HEAPF64[$24>>3];
 $26 = $25 == 0.0;
 if ($26) {
  $27 = +HEAPF64[10596];
  $28 = $27 <= 0.0;
  if ($28) {
   $29 = +HEAPF64[10596];
   $30 = +HEAPF64[10596];
   $31 = (~~(($30)));
   $32 = (+($31|0));
   $33 = $29 == $32;
   if ($33) {
    $34 = $5;
    HEAPF64[$34>>3] = 0.0;
    STACKTOP = sp;return 0;
   }
  }
  (_AT_gamma_(84768,84776)|0);
  $35 = $3;
  $36 = +HEAPF64[$35>>3];
  $37 = $36 * -0.5;
  HEAPF64[$6>>3] = $37;
  $38 = +HEAPF64[10593];
  $39 = (+Math_sqrt((+$38)));
  $40 = +HEAPF64[$6>>3];
  $41 = (+Math_pow(2.0,(+$40)));
  $42 = +HEAPF64[10597];
  $43 = $41 * $42;
  $44 = $39 / $43;
  $45 = $5;
  HEAPF64[$45>>3] = $44;
  STACKTOP = sp;return 0;
 } else {
  $46 = $3;
  $47 = +HEAPF64[$46>>3];
  $48 = - $47;
  HEAPF64[$6>>3] = $48;
  (_AT_gamma_($6,84784)|0);
  $49 = $3;
  $50 = +HEAPF64[$49>>3];
  $51 = $50 * -0.5;
  $52 = $51 - 1.0;
  HEAPF64[$6>>3] = $52;
  $53 = +HEAPF64[$6>>3];
  $54 = (+Math_pow(2.0,(+$53)));
  $55 = +HEAPF64[10595];
  $56 = $54 * $55;
  $57 = +HEAPF64[10598];
  $58 = $56 / $57;
  HEAPF64[10599] = $58;
  $59 = $3;
  $60 = +HEAPF64[$59>>3];
  $61 = $60 * -0.5;
  HEAPF64[10600] = $61;
  (_AT_gamma_(84800,84808)|0);
  $62 = +HEAPF64[10601];
  $63 = $5;
  HEAPF64[$63>>3] = $62;
  HEAPF64[10602] = 1.0;
  HEAP32[322949] = 1;
  while(1) {
   $64 = HEAP32[322949]|0;
   $65 = ($64|0)<=(250);
   if (!($65)) {
    break;
   }
   $66 = HEAP32[322949]|0;
   $67 = (+($66|0));
   $68 = $3;
   $69 = +HEAPF64[$68>>3];
   $70 = $67 - $69;
   $71 = $70 * 0.5;
   HEAPF64[10603] = $71;
   (_AT_gamma_(84824,84832)|0);
   $72 = +HEAPF64[10602];
   $73 = - $72;
   $74 = +HEAPF64[10594];
   $75 = $73 * $74;
   $76 = $4;
   $77 = +HEAPF64[$76>>3];
   $78 = $75 * $77;
   $79 = HEAP32[322949]|0;
   $80 = (+($79|0));
   $81 = $78 / $80;
   HEAPF64[10602] = $81;
   $82 = +HEAPF64[10604];
   $83 = +HEAPF64[10602];
   $84 = $82 * $83;
   HEAPF64[10605] = $84;
   $85 = +HEAPF64[10605];
   $86 = $5;
   $87 = +HEAPF64[$86>>3];
   $88 = $87 + $85;
   HEAPF64[$86>>3] = $88;
   $89 = +HEAPF64[10605];
   $90 = (+Math_abs((+$89)));
   $91 = $5;
   $92 = +HEAPF64[$91>>3];
   $93 = (+Math_abs((+$92)));
   $94 = +HEAPF64[10592];
   $95 = $93 * $94;
   $96 = $90 < $95;
   if ($96) {
    break;
   }
   $97 = HEAP32[322949]|0;
   $98 = (($97) + 1)|0;
   HEAP32[322949] = $98;
  }
  $99 = +HEAPF64[10599];
  $100 = $5;
  $101 = +HEAPF64[$100>>3];
  $102 = $99 * $101;
  $103 = $5;
  HEAPF64[$103>>3] = $102;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _dvla_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF64[10575] = 3.1415926535897931;
 HEAPF64[10576] = 9.9999999999999998E-13;
 $7 = $4;
 $8 = +HEAPF64[$7>>3];
 $9 = $8 * -0.25;
 $10 = $4;
 $11 = +HEAPF64[$10>>3];
 $12 = $9 * $11;
 $13 = (+Math_exp((+$12)));
 HEAPF64[10577] = $13;
 $14 = $4;
 $15 = +HEAPF64[$14>>3];
 $16 = (+Math_abs((+$15)));
 HEAPF64[$6>>3] = $16;
 $17 = +HEAPF64[$6>>3];
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = (+Math_pow((+$17),(+$19)));
 $21 = +HEAPF64[10577];
 $22 = $20 * $21;
 HEAPF64[10578] = $22;
 HEAPF64[10579] = 1.0;
 $23 = $5;
 HEAPF64[$23>>3] = 1.0;
 HEAP32[322947] = 1;
 while(1) {
  $24 = HEAP32[322947]|0;
  $25 = ($24|0)<=(16);
  if (!($25)) {
   break;
  }
  $26 = +HEAPF64[10579];
  $27 = $26 * -0.5;
  $28 = HEAP32[322947]|0;
  $29 = (+($28|0));
  $30 = $29 * 2.0;
  $31 = $30;
  $32 = $3;
  $33 = +HEAPF64[$32>>3];
  $34 = $31 - $33;
  $35 = $34 - 1.0;
  $36 = $27 * $35;
  $37 = HEAP32[322947]|0;
  $38 = (+($37|0));
  $39 = $38 * 2.0;
  $40 = $39;
  $41 = $3;
  $42 = +HEAPF64[$41>>3];
  $43 = $40 - $42;
  $44 = $43 - 2.0;
  $45 = $36 * $44;
  $46 = HEAP32[322947]|0;
  $47 = (+($46|0));
  $48 = $4;
  $49 = +HEAPF64[$48>>3];
  $50 = $47 * $49;
  $51 = $4;
  $52 = +HEAPF64[$51>>3];
  $53 = $50 * $52;
  $54 = $45 / $53;
  HEAPF64[10579] = $54;
  $55 = +HEAPF64[10579];
  $56 = $5;
  $57 = +HEAPF64[$56>>3];
  $58 = $57 + $55;
  HEAPF64[$56>>3] = $58;
  $59 = +HEAPF64[10579];
  $60 = $5;
  $61 = +HEAPF64[$60>>3];
  $62 = $59 / $61;
  HEAPF64[$6>>3] = $62;
  $63 = +HEAPF64[$6>>3];
  $64 = (+Math_abs((+$63)));
  $65 = +HEAPF64[10576];
  $66 = $64 < $65;
  if ($66) {
   break;
  }
  $67 = HEAP32[322947]|0;
  $68 = (($67) + 1)|0;
  HEAP32[322947] = $68;
 }
 $69 = +HEAPF64[10578];
 $70 = $5;
 $71 = +HEAPF64[$70>>3];
 $72 = $69 * $71;
 $73 = $5;
 HEAPF64[$73>>3] = $72;
 $74 = $4;
 $75 = +HEAPF64[$74>>3];
 $76 = $75 < 0.0;
 if (!($76)) {
  STACKTOP = sp;return 0;
 }
 $77 = $4;
 $78 = +HEAPF64[$77>>3];
 $79 = - $78;
 HEAPF64[10580] = $79;
 $80 = $3;
 (_vvla_($80,84640,84648)|0);
 $81 = $3;
 $82 = +HEAPF64[$81>>3];
 $83 = - $82;
 HEAPF64[$6>>3] = $83;
 (_AT_gamma_($6,84656)|0);
 $84 = +HEAPF64[10575];
 $85 = +HEAPF64[10581];
 $86 = $84 * $85;
 $87 = +HEAPF64[10582];
 $88 = $86 / $87;
 $89 = +HEAPF64[10575];
 $90 = $3;
 $91 = +HEAPF64[$90>>3];
 $92 = $89 * $91;
 $93 = (+Math_cos((+$92)));
 $94 = $5;
 $95 = +HEAPF64[$94>>3];
 $96 = $93 * $95;
 $97 = $88 + $96;
 $98 = $5;
 HEAPF64[$98>>3] = $97;
 STACKTOP = sp;return 0;
}
function _vvla_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF64[10583] = 3.1415926535897931;
 HEAPF64[10584] = 9.9999999999999998E-13;
 $8 = $4;
 $9 = +HEAPF64[$8>>3];
 $10 = $9 * 0.25;
 $11 = $4;
 $12 = +HEAPF64[$11>>3];
 $13 = $10 * $12;
 $14 = (+Math_exp((+$13)));
 HEAPF64[10585] = $14;
 $15 = $4;
 $16 = +HEAPF64[$15>>3];
 $17 = (+Math_abs((+$16)));
 HEAPF64[$6>>3] = $17;
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = - $19;
 $21 = $20 - 1.0;
 $7 = $21;
 $22 = +HEAPF64[$6>>3];
 $23 = $7;
 $24 = (+Math_pow((+$22),(+$23)));
 $25 = +HEAPF64[10583];
 $26 = 2.0 / $25;
 $27 = (+Math_sqrt((+$26)));
 $28 = $24 * $27;
 $29 = +HEAPF64[10585];
 $30 = $28 * $29;
 HEAPF64[10586] = $30;
 HEAPF64[10587] = 1.0;
 $31 = $5;
 HEAPF64[$31>>3] = 1.0;
 HEAP32[322948] = 1;
 while(1) {
  $32 = HEAP32[322948]|0;
  $33 = ($32|0)<=(18);
  if (!($33)) {
   break;
  }
  $34 = +HEAPF64[10587];
  $35 = $34 * 0.5;
  $36 = HEAP32[322948]|0;
  $37 = (+($36|0));
  $38 = $37 * 2.0;
  $39 = $38;
  $40 = $3;
  $41 = +HEAPF64[$40>>3];
  $42 = $39 + $41;
  $43 = $42 - 1.0;
  $44 = $35 * $43;
  $45 = HEAP32[322948]|0;
  $46 = (+($45|0));
  $47 = $46 * 2.0;
  $48 = $47;
  $49 = $3;
  $50 = +HEAPF64[$49>>3];
  $51 = $48 + $50;
  $52 = $44 * $51;
  $53 = HEAP32[322948]|0;
  $54 = (+($53|0));
  $55 = $4;
  $56 = +HEAPF64[$55>>3];
  $57 = $54 * $56;
  $58 = $4;
  $59 = +HEAPF64[$58>>3];
  $60 = $57 * $59;
  $61 = $52 / $60;
  HEAPF64[10587] = $61;
  $62 = +HEAPF64[10587];
  $63 = $5;
  $64 = +HEAPF64[$63>>3];
  $65 = $64 + $62;
  HEAPF64[$63>>3] = $65;
  $66 = +HEAPF64[10587];
  $67 = $5;
  $68 = +HEAPF64[$67>>3];
  $69 = $66 / $68;
  HEAPF64[$6>>3] = $69;
  $70 = +HEAPF64[$6>>3];
  $71 = (+Math_abs((+$70)));
  $72 = +HEAPF64[10584];
  $73 = $71 < $72;
  if ($73) {
   break;
  }
  $74 = HEAP32[322948]|0;
  $75 = (($74) + 1)|0;
  HEAP32[322948] = $75;
 }
 $76 = +HEAPF64[10586];
 $77 = $5;
 $78 = +HEAPF64[$77>>3];
 $79 = $76 * $78;
 $80 = $5;
 HEAPF64[$80>>3] = $79;
 $81 = $4;
 $82 = +HEAPF64[$81>>3];
 $83 = $82 < 0.0;
 if (!($83)) {
  STACKTOP = sp;return 0;
 }
 $84 = $4;
 $85 = +HEAPF64[$84>>3];
 $86 = - $85;
 HEAPF64[10588] = $86;
 $87 = $3;
 (_dvla_($87,84704,84712)|0);
 $88 = $3;
 $89 = +HEAPF64[$88>>3];
 $90 = - $89;
 HEAPF64[$6>>3] = $90;
 (_AT_gamma_($6,84720)|0);
 $91 = +HEAPF64[10583];
 $92 = $3;
 $93 = +HEAPF64[$92>>3];
 $94 = $91 * $93;
 $95 = (+Math_sin((+$94)));
 $96 = +HEAPF64[10583];
 $97 = $3;
 $98 = +HEAPF64[$97>>3];
 $99 = $96 * $98;
 $100 = (+Math_sin((+$99)));
 $101 = $95 * $100;
 HEAPF64[10591] = $101;
 $102 = +HEAPF64[10591];
 $103 = +HEAPF64[10590];
 $104 = $102 * $103;
 $105 = +HEAPF64[10583];
 $106 = $104 / $105;
 $107 = +HEAPF64[10589];
 $108 = $106 * $107;
 $109 = +HEAPF64[10583];
 $110 = $3;
 $111 = +HEAPF64[$110>>3];
 $112 = $109 * $111;
 $113 = (+Math_cos((+$112)));
 $114 = $5;
 $115 = +HEAPF64[$114>>3];
 $116 = $113 * $115;
 $117 = $108 - $116;
 $118 = $5;
 HEAPF64[$118>>3] = $117;
 STACKTOP = sp;return 0;
}
function _nrerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[16931]|0;
 (_fprintf($2,74206,$vararg_buffer)|0);
 $3 = HEAP32[16931]|0;
 $4 = $1;
 HEAP32[$vararg_buffer1>>2] = $4;
 (_fprintf($3,74243,$vararg_buffer1)|0);
 $5 = HEAP32[16931]|0;
 (_fprintf($5,74247,$vararg_buffer3)|0);
 _exit(1);
 // unreachable;
}
function _zriddr($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0;
 var $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0;
 var $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $6;
 $23 = $8;
 $24 = $7;
 $25 = (+FUNCTION_TABLE_ddi[$22 & 63]($23,$24));
 $14 = $25;
 $26 = $6;
 $27 = $9;
 $28 = $7;
 $29 = (+FUNCTION_TABLE_ddi[$26 & 63]($27,$28));
 $13 = $29;
 $30 = $14;
 $31 = $30 > 0.0;
 $32 = $13;
 $33 = $32 < 0.0;
 $or$cond = $31 & $33;
 do {
  if ($or$cond) {
   label = 3;
  } else {
   $34 = $14;
   $35 = $34 < 0.0;
   $36 = $13;
   $37 = $36 > 0.0;
   $or$cond3 = $35 & $37;
   if ($or$cond3) {
    label = 3;
   } else {
    $131 = $14;
    $132 = $131 == 0.0;
    if ($132) {
     $133 = $8;
     $5 = $133;
     $137 = $5;
     STACKTOP = sp;return (+$137);
    }
    $134 = $13;
    $135 = $134 == 0.0;
    if (!($135)) {
     _nrerror(74325);
     break;
    }
    $136 = $9;
    $5 = $136;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
  }
 } while(0);
 do {
  if ((label|0) == 3) {
   $38 = $8;
   $19 = $38;
   $39 = $9;
   $18 = $39;
   $12 = -1.11E+30;
   $11 = 1;
   while(1) {
    $40 = $11;
    $41 = ($40|0)<=(60);
    if (!($41)) {
     label = 21;
     break;
    }
    $42 = $19;
    $43 = $18;
    $44 = $42 + $43;
    $45 = 0.5 * $44;
    $20 = $45;
    $46 = $6;
    $47 = $20;
    $48 = $7;
    $49 = (+FUNCTION_TABLE_ddi[$46 & 63]($47,$48));
    $15 = $49;
    $50 = $15;
    $51 = $15;
    $52 = $50 * $51;
    $53 = $14;
    $54 = $13;
    $55 = $53 * $54;
    $56 = $52 - $55;
    $57 = (+Math_sqrt((+$56)));
    $17 = $57;
    $58 = $17;
    $59 = $58 == 0.0;
    if ($59) {
     label = 6;
     break;
    }
    $61 = $20;
    $62 = $20;
    $63 = $19;
    $64 = $62 - $63;
    $65 = $14;
    $66 = $13;
    $67 = $65 >= $66;
    $68 = $67 ? 1.0 : -1.0;
    $69 = $15;
    $70 = $68 * $69;
    $71 = $17;
    $72 = $70 / $71;
    $73 = $64 * $72;
    $74 = $61 + $73;
    $21 = $74;
    $75 = $21;
    $76 = $12;
    $77 = $75 - $76;
    $78 = (+Math_abs((+$77)));
    $79 = $10;
    $80 = $78 <= $79;
    if ($80) {
     label = 8;
     break;
    }
    $82 = $21;
    $12 = $82;
    $83 = $6;
    $84 = $12;
    $85 = $7;
    $86 = (+FUNCTION_TABLE_ddi[$83 & 63]($84,$85));
    $16 = $86;
    $87 = $16;
    $88 = $87 == 0.0;
    if ($88) {
     label = 10;
     break;
    }
    $90 = $16;
    $91 = $90 >= 0.0;
    $92 = $15;
    $93 = (+Math_abs((+$92)));
    $94 = - $93;
    $95 = $91 ? $93 : $94;
    $96 = $15;
    $97 = $95 != $96;
    do {
     if ($97) {
      $98 = $20;
      $19 = $98;
      $99 = $15;
      $14 = $99;
      $100 = $12;
      $18 = $100;
      $101 = $16;
      $13 = $101;
     } else {
      $102 = $16;
      $103 = $102 >= 0.0;
      $104 = $14;
      $105 = (+Math_abs((+$104)));
      $106 = - $105;
      $107 = $103 ? $105 : $106;
      $108 = $14;
      $109 = $107 != $108;
      if ($109) {
       $110 = $12;
       $18 = $110;
       $111 = $16;
       $13 = $111;
       break;
      }
      $112 = $16;
      $113 = $112 >= 0.0;
      $114 = $13;
      $115 = (+Math_abs((+$114)));
      $116 = - $115;
      $117 = $113 ? $115 : $116;
      $118 = $13;
      $119 = $117 != $118;
      if ($119) {
       $120 = $12;
       $19 = $120;
       $121 = $16;
       $14 = $121;
       break;
      } else {
       _nrerror(74276);
       break;
      }
     }
    } while(0);
    $122 = $18;
    $123 = $19;
    $124 = $122 - $123;
    $125 = (+Math_abs((+$124)));
    $126 = $10;
    $127 = $125 <= $126;
    if ($127) {
     label = 19;
     break;
    }
    $129 = $11;
    $130 = (($129) + 1)|0;
    $11 = $130;
   }
   if ((label|0) == 6) {
    $60 = $12;
    $5 = $60;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
   else if ((label|0) == 8) {
    $81 = $12;
    $5 = $81;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
   else if ((label|0) == 10) {
    $89 = $12;
    $5 = $89;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
   else if ((label|0) == 19) {
    $128 = $12;
    $5 = $128;
    $137 = $5;
    STACKTOP = sp;return (+$137);
   }
   else if ((label|0) == 21) {
    _nrerror(74292);
    break;
   }
  }
 } while(0);
 $5 = 0.0;
 $137 = $5;
 STACKTOP = sp;return (+$137);
}
function _are_elements_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $6;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $9;
  $15 = $10;
  $16 = (($14) + ($15<<2)|0);
  HEAP32[$16>>2] = 0;
  while(1) {
   $17 = $7;
   $18 = $9;
   $19 = $10;
   $20 = (($18) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($17) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $5;
   $25 = $10;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($23|0)!=($27|0);
   if ($28) {
    $29 = $9;
    $30 = $10;
    $31 = (($29) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $8;
    $34 = ($32|0)<($33|0);
    $47 = $34;
   } else {
    $47 = 0;
   }
   $35 = $9;
   $36 = $10;
   $37 = (($35) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   if (!($47)) {
    break;
   }
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
  }
  $40 = $8;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = $9;
   $43 = $10;
   $44 = (($42) + ($43<<2)|0);
   HEAP32[$44>>2] = -1;
  }
  $45 = $10;
  $46 = (($45) + 1)|0;
  $10 = $46;
 }
 STACKTOP = sp;return;
}
function _find_elements_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $6;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $9;
  $15 = $10;
  $16 = (($14) + ($15<<2)|0);
  HEAP32[$16>>2] = 0;
  while(1) {
   $17 = $7;
   $18 = $9;
   $19 = $10;
   $20 = (($18) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($17) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $5;
   $25 = $10;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($23|0)!=($27|0);
   if ($28) {
    $29 = $9;
    $30 = $10;
    $31 = (($29) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $8;
    $34 = ($32|0)<($33|0);
    $47 = $34;
   } else {
    $47 = 0;
   }
   $35 = $9;
   $36 = $10;
   $37 = (($35) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   if (!($47)) {
    break;
   }
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
  }
  $40 = $8;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = $9;
   $43 = $10;
   $44 = (($42) + ($43<<2)|0);
   HEAP32[$44>>2] = -1;
  }
  $45 = $10;
  $46 = (($45) + 1)|0;
  $10 = $46;
 }
 STACKTOP = sp;return;
}
function _find_elements_char($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $6;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $9;
  $15 = $10;
  $16 = (($14) + ($15<<2)|0);
  HEAP32[$16>>2] = 0;
  while(1) {
   $17 = $7;
   $18 = $9;
   $19 = $10;
   $20 = (($18) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($17) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $5;
   $25 = $10;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_strcmp($23,$27)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    break;
   }
   $30 = $9;
   $31 = $10;
   $32 = (($30) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[$32>>2] = $34;
   $35 = $9;
   $36 = $10;
   $37 = (($35) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $8;
   $40 = ($38|0)==($39|0);
   if ($40) {
    label = 6;
    break;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $41 = $9;
   $42 = $10;
   $43 = (($41) + ($42<<2)|0);
   HEAP32[$43>>2] = -1;
  }
  $44 = $10;
  $45 = (($44) + 1)|0;
  $10 = $45;
 }
 STACKTOP = sp;return;
}
function _is_element_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $5;
  $15 = $8;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($13|0)==($17|0);
  $19 = $7;
  $20 = $8;
  $21 = (($19) + ($20)|0);
  if ($18) {
   HEAP8[$21>>0] = 1;
   $22 = $9;
   $23 = (($22) + 1)|0;
   $9 = $23;
  } else {
   HEAP8[$21>>0] = 0;
  }
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 $26 = $9;
 STACKTOP = sp;return ($26|0);
}
function _AT_sum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = 0.0;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = $4;
  $11 = (($9) + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $5;
  $14 = $13 + $12;
  $5 = $14;
  $15 = $4;
  $16 = (($15) + 1)|0;
  $4 = $16;
 }
 $17 = $5;
 STACKTOP = sp;return (+$17);
}
function _AT_normalize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (+_AT_sum($8,$9));
 $7 = $10;
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = $3;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = $6;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $17 / $18;
  $20 = $5;
  $21 = $6;
  $22 = (($20) + ($21<<3)|0);
  HEAPF64[$22>>3] = $19;
  $23 = $6;
  $24 = (($23) + 1)|0;
  $6 = $24;
 }
 STACKTOP = sp;return;
}
function _locate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $11 = $4;
 $12 = (($11) + 1)|0;
 $6 = $12;
 $13 = $3;
 $14 = $4;
 $15 = (($14) - 1)|0;
 $16 = (($13) + ($15<<3)|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = $17 >= $19;
 $21 = $20&1;
 $10 = $21;
 while(1) {
  $22 = $6;
  $23 = $8;
  $24 = (($22) - ($23))|0;
  $25 = ($24|0)>(1);
  if (!($25)) {
   break;
  }
  $26 = $6;
  $27 = $8;
  $28 = (($26) + ($27))|0;
  $29 = $28 >> 1;
  $7 = $29;
  $30 = $5;
  $31 = $3;
  $32 = $7;
  $33 = (($32) - 1)|0;
  $34 = (($31) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $30 >= $35;
  $37 = $36&1;
  $38 = $10;
  $39 = ($37|0)==($38|0);
  $40 = $7;
  if ($39) {
   $8 = $40;
  } else {
   $6 = $40;
  }
 }
 $41 = $5;
 $42 = $3;
 $43 = +HEAPF64[$42>>3];
 $44 = $41 == $43;
 if ($44) {
  $9 = 1;
  $55 = $9;
  STACKTOP = sp;return ($55|0);
 }
 $45 = $5;
 $46 = $3;
 $47 = $4;
 $48 = (($47) - 1)|0;
 $49 = (($46) + ($48<<3)|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $45 == $50;
 if ($51) {
  $52 = $4;
  $53 = (($52) - 1)|0;
  $9 = $53;
  $55 = $9;
  STACKTOP = sp;return ($55|0);
 } else {
  $54 = $8;
  $9 = $54;
  $55 = $9;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _locate_index_in_2d_table($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $9;
 $16 = ($15|0)>=(0);
 if (!($16)) {
  ___assert_fail((74358|0),(74138|0),643,(74376|0));
  // unreachable;
 }
 $17 = $9;
 $18 = ($17|0)<=(2);
 if (!($18)) {
  ___assert_fail((74401|0),(74138|0),644,(74376|0));
  // unreachable;
 }
 $19 = $6;
 $20 = ($19|0)>=(0);
 if (!($20)) {
  ___assert_fail((74419|0),(74138|0),645,(74376|0));
  // unreachable;
 }
 $21 = $7;
 $22 = $6;
 $23 = ($21|0)>=($22|0);
 if (!($23)) {
  ___assert_fail((74437|0),(74138|0),646,(74376|0));
  // unreachable;
 }
 $24 = $6;
 $12 = $24;
 $25 = $7;
 $10 = $25;
 $26 = $5;
 $27 = $7;
 $28 = (($26) + ($27<<4)|0);
 $29 = $9;
 $30 = (($28) + ($29<<3)|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $5;
 $33 = $6;
 $34 = (($32) + ($33<<4)|0);
 $35 = $9;
 $36 = (($34) + ($35<<3)|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $31 >= $37;
 $39 = $38&1;
 $14 = $39;
 while(1) {
  $40 = $10;
  $41 = $12;
  $42 = (($40) - ($41))|0;
  $43 = ($42|0)>(1);
  if (!($43)) {
   break;
  }
  $44 = $10;
  $45 = $12;
  $46 = (($44) + ($45))|0;
  $47 = $46 >> 1;
  $11 = $47;
  $48 = $8;
  $49 = $5;
  $50 = $11;
  $51 = (($50) - 1)|0;
  $52 = (($49) + ($51<<4)|0);
  $53 = $9;
  $54 = (($52) + ($53<<3)|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $48 >= $55;
  $57 = $56&1;
  $58 = $14;
  $59 = ($57|0)==($58|0);
  $60 = $11;
  if ($59) {
   $12 = $60;
  } else {
   $10 = $60;
  }
 }
 $61 = $8;
 $62 = $5;
 $63 = $6;
 $64 = (($62) + ($63<<4)|0);
 $65 = $9;
 $66 = (($64) + ($65<<3)|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $61 == $67;
 if ($68) {
  $69 = $6;
  $70 = (($69) + 1)|0;
  $13 = $70;
  $81 = $13;
  STACKTOP = sp;return ($81|0);
 }
 $71 = $8;
 $72 = $5;
 $73 = $7;
 $74 = (($72) + ($73<<4)|0);
 $75 = $9;
 $76 = (($74) + ($75<<3)|0);
 $77 = +HEAPF64[$76>>3];
 $78 = $71 == $77;
 if ($78) {
  $79 = $7;
  $13 = $79;
  $81 = $13;
  STACKTOP = sp;return ($81|0);
 } else {
  $80 = $12;
  $13 = $80;
  $81 = $13;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _AT_get_interpolated_y_from_input_table($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $6;
 $11 = $7;
 $12 = (_locate($9,$10,$11)|0);
 $8 = $12;
 $13 = $8;
 $14 = ($13|0)>=(0);
 if (!($14)) {
  ___assert_fail((74467|0),(74138|0),672,(74474|0));
  // unreachable;
 }
 $15 = $8;
 $16 = $6;
 $17 = ($15|0)<($16|0);
 if ($17) {
  $18 = $4;
  $19 = $8;
  $20 = (($19) - 1)|0;
  $21 = (($18) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $5;
  $24 = $8;
  $25 = (($24) - 1)|0;
  $26 = (($23) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $4;
  $29 = $8;
  $30 = (($28) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $5;
  $33 = $8;
  $34 = (($32) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $7;
  $37 = (+_AT_get_interpolated_y_from_interval($22,$27,$31,$35,$36));
  STACKTOP = sp;return (+$37);
 } else {
  ___assert_fail((74513|0),(74138|0),673,(74474|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_interpolated_y_from_interval($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $8;
 $12 = $6;
 $13 = $11 > $12;
 $14 = $10;
 $15 = $6;
 do {
  if ($13) {
   $16 = $14 >= $15;
   if (!($16)) {
    ___assert_fail((74538|0),(74138|0),709,(74563|0));
    // unreachable;
   }
   $17 = $10;
   $18 = $8;
   $19 = $17 <= $18;
   if ($19) {
    break;
   } else {
    ___assert_fail((74599|0),(74138|0),710,(74563|0));
    // unreachable;
   }
  } else {
   $20 = $14 <= $15;
   if (!($20)) {
    ___assert_fail((74625|0),(74138|0),712,(74563|0));
    // unreachable;
   }
   $21 = $10;
   $22 = $8;
   $23 = $21 >= $22;
   if ($23) {
    break;
   } else {
    ___assert_fail((74650|0),(74138|0),713,(74563|0));
    // unreachable;
   }
  }
 } while(0);
 $24 = $8;
 $25 = $6;
 $26 = $24 == $25;
 $27 = $7;
 if ($26) {
  $5 = $27;
  $40 = $5;
  STACKTOP = sp;return (+$40);
 } else {
  $28 = $9;
  $29 = $7;
  $30 = $28 - $29;
  $31 = $10;
  $32 = $6;
  $33 = $31 - $32;
  $34 = $8;
  $35 = $6;
  $36 = $34 - $35;
  $37 = $33 / $36;
  $38 = $30 * $37;
  $39 = $27 + $38;
  $5 = $39;
  $40 = $5;
  STACKTOP = sp;return (+$40);
 }
 return +(0.0);
}
function _AT_get_interpolated_y_from_input_2d_table($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = $5;
 $11 = (_locate_index_in_2d_table($7,0,$9,$10,0)|0);
 $6 = $11;
 $12 = $6;
 $13 = ($12|0)>=(0);
 if (!($13)) {
  ___assert_fail((74467|0),(74138|0),682,(74676|0));
  // unreachable;
 }
 $14 = $6;
 $15 = $4;
 $16 = ($14|0)<($15|0);
 if ($16) {
  $17 = $3;
  $18 = $6;
  $19 = (($18) - 1)|0;
  $20 = (($17) + ($19<<4)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $3;
  $23 = $6;
  $24 = (($23) - 1)|0;
  $25 = (($22) + ($24<<4)|0);
  $26 = ((($25)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $3;
  $29 = $6;
  $30 = (($28) + ($29<<4)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $3;
  $33 = $6;
  $34 = (($32) + ($33<<4)|0);
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $5;
  $38 = (+_AT_get_interpolated_y_from_interval($21,$27,$31,$36,$37));
  STACKTOP = sp;return (+$38);
 } else {
  ___assert_fail((74513|0),(74138|0),683,(74676|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_get_interpolated_x_from_input_2d_table($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = (_locate_index_in_2d_table($10,$11,$12,$13,1)|0);
 $9 = $14;
 $15 = $9;
 $16 = $6;
 $17 = ($15|0)>=($16|0);
 if (!($17)) {
  ___assert_fail((74718|0),(74138|0),692,(74736|0));
  // unreachable;
 }
 $18 = $9;
 $19 = $7;
 $20 = ($18|0)<=($19|0);
 if (!($20)) {
  ___assert_fail((74778|0),(74138|0),693,(74736|0));
  // unreachable;
 }
 $21 = $5;
 $22 = $9;
 $23 = (($21) + ($22<<4)|0);
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $5;
 $27 = $9;
 $28 = (($27) - 1)|0;
 $29 = (($26) + ($28<<4)|0);
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $25 > $31;
 $33 = $5;
 $34 = $9;
 if ($32) {
  $35 = (($34) - 1)|0;
  $36 = (($33) + ($35<<4)|0);
  $37 = ((($36)) + 8|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $5;
  $40 = $9;
  $41 = (($40) - 1)|0;
  $42 = (($39) + ($41<<4)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $5;
  $45 = $9;
  $46 = (($44) + ($45<<4)|0);
  $47 = ((($46)) + 8|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $5;
  $50 = $9;
  $51 = (($49) + ($50<<4)|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $8;
  $54 = (+_AT_get_interpolated_y_from_interval($38,$43,$48,$52,$53));
  $4 = $54;
  $75 = $4;
  STACKTOP = sp;return (+$75);
 } else {
  $55 = (($33) + ($34<<4)|0);
  $56 = ((($55)) + 8|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $5;
  $59 = $9;
  $60 = (($58) + ($59<<4)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $5;
  $63 = $9;
  $64 = (($63) - 1)|0;
  $65 = (($62) + ($64<<4)|0);
  $66 = ((($65)) + 8|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $5;
  $69 = $9;
  $70 = (($69) - 1)|0;
  $71 = (($68) + ($70<<4)|0);
  $72 = +HEAPF64[$71>>3];
  $73 = $8;
  $74 = (+_AT_get_interpolated_y_from_interval($57,$61,$67,$72,$73));
  $4 = $74;
  $75 = $4;
  STACKTOP = sp;return (+$75);
 }
 return +(0.0);
}
function _AT_E_MeV_u_from_E_MeV($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (+_AT_atomic_weight_from_particle_no_single($5));
 $7 = $4 / $6;
 STACKTOP = sp;return (+$7);
}
function _AT_E_MeV_from_E_MeV_u($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (+_AT_atomic_weight_from_particle_no_single($5));
 $7 = $4 * $6;
 STACKTOP = sp;return (+$7);
}
function _AT_beta_from_E_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 >= 0.0;
 if ($4) {
  $5 = $1;
  $6 = (+_AT_gamma_from_E_single($5));
  $2 = $6;
  $7 = $2;
  $8 = (+_gsl_pow_2($7));
  $9 = 1.0 / $8;
  $10 = 1.0 - $9;
  $11 = (+Math_sqrt((+$10)));
  STACKTOP = sp;return (+$11);
 } else {
  ___assert_fail((74797|0),(74809|0),44,(74843|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_gamma_from_E_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 / 931.49402799999996;
 $5 = 1.0 + $4;
 $2 = $5;
 $6 = $2;
 $7 = $6 >= 1.0;
 if ($7) {
  $8 = $2;
  STACKTOP = sp;return (+$8);
 } else {
  ___assert_fail((74865|0),(74809|0),85,(74878|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_beta_from_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_beta_from_E_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_gamma_from_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_gamma_from_E_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_E_from_beta_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 < 1.0;
 if (!($4)) {
  ___assert_fail((74901|0),(74809|0),103,(74912|0));
  // unreachable;
 }
 $5 = $1;
 $6 = $5 >= 0.0;
 if ($6) {
  $7 = $1;
  $8 = (+_gsl_pow_2($7));
  $9 = 1.0 - $8;
  $10 = (+Math_sqrt((+$9)));
  $11 = 1.0 / $10;
  $2 = $11;
  $12 = $2;
  $13 = (+_AT_E_from_gamma_single($12));
  STACKTOP = sp;return (+$13);
 } else {
  ___assert_fail((74934|0),(74809|0),104,(74912|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_E_from_gamma_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 1.0;
 $4 = 931.49402799999996 * $3;
 STACKTOP = sp;return (+$4);
}
function _AT_E_from_beta($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_E_from_beta_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_E_from_gamma($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_E_from_gamma_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_E_MeV_u_from_momentum_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $1;
 $5 = $3 * $4;
 $6 = $5 + 894318.91234731697;
 $7 = (+Math_sqrt((+$6)));
 $2 = $7;
 $8 = $2;
 $9 = $8 - 945.68436190270006;
 STACKTOP = sp;return (+$9);
}
function _AT_E_MeV_u_from_momentum_MeV_c_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_E_MeV_u_from_momentum_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_effective_charge_from_beta_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)!=(1);
 if ($6) {
  $7 = $4;
  $8 = (+($7|0));
  $9 = $3;
  $10 = -125.0 * $9;
  $11 = $4;
  $12 = (+($11|0));
  $13 = (+Math_pow((+$12),0.66666666666666663));
  $14 = $10 / $13;
  $15 = (+Math_exp((+$14)));
  $16 = 1.0 - $15;
  $17 = $8 * $16;
  $2 = $17;
  $22 = $2;
  STACKTOP = sp;return (+$22);
 } else {
  $18 = $3;
  $19 = -125.0 * $18;
  $20 = (+Math_exp((+$19)));
  $21 = 1.0 - $20;
  $2 = $21;
  $22 = $2;
  STACKTOP = sp;return (+$22);
 }
 return +(0.0);
}
function _AT_effective_charge_from_beta($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (+_AT_effective_charge_from_beta_single($15,$19));
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22<<3)|0);
  HEAPF64[$23>>3] = $20;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 STACKTOP = sp;return 0;
}
function _AT_effective_charge_from_E_MeV_u_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (+_AT_beta_from_E_single($6));
 $4 = $7;
 $8 = $3;
 $9 = (_AT_Z_from_particle_no_single($8)|0);
 $5 = $9;
 $10 = $4;
 $11 = $5;
 $12 = (+_AT_effective_charge_from_beta_single($10,$11));
 STACKTOP = sp;return (+$12);
}
function _AT_effective_charge_from_E_MeV_u($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (+_AT_effective_charge_from_E_MeV_u_single($15,$19));
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22<<3)|0);
  HEAPF64[$23>>3] = $20;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 STACKTOP = sp;return 0;
}
function _AT_mean_excitation_energy_eV_from_Z_single($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+($2|0));
 $4 = 9.7599999999999997 * $3;
 $5 = $1;
 $6 = (+($5|0));
 $7 = (+Math_pow((+$6),0.19));
 $8 = 58.799999999999997 / $7;
 $9 = $4 + $8;
 STACKTOP = sp;return (+$9);
}
function _AT_mean_excitation_energy_eV_from_Z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (~~(($13)));
  $15 = (+_AT_mean_excitation_energy_eV_from_Z_single($14));
  $16 = $5;
  $17 = $6;
  $18 = (($16) + ($17<<3)|0);
  HEAPF64[$18>>3] = $15;
  $19 = $6;
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 STACKTOP = sp;return 0;
}
function _AT_mass_correction_terms_new($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (+_AT_gamma_from_E_single($6));
 $4 = $7;
 $8 = $3;
 $9 = (+($8|0));
 $10 = $9 * 931.49402799999996;
 $5 = $10;
 $11 = $5;
 $12 = 0.51099891799999997 / $11;
 $13 = 2.0 * $12;
 $14 = $4;
 $15 = $13 * $14;
 $16 = 1.0 + $15;
 $17 = $5;
 $18 = 0.51099891799999997 / $17;
 $19 = (+_gsl_pow_2($18));
 $20 = $16 + $19;
 STACKTOP = sp;return (+$20);
}
function _AT_max_relativistic_E_transfer_MeV_new_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (+_AT_beta_from_E_single($6));
 $4 = $7;
 $8 = $2;
 $9 = $3;
 $10 = (+_AT_mass_correction_terms_new($8,$9));
 $5 = $10;
 $11 = $4;
 $12 = (+_gsl_pow_2($11));
 $13 = 1.0219978359999999 * $12;
 $14 = $4;
 $15 = (+_gsl_pow_2($14));
 $16 = 1.0 - $15;
 $17 = $13 / $16;
 $18 = $5;
 $19 = $17 / $18;
 STACKTOP = sp;return (+$19);
}
function _AT_max_classic_E_transfer_MeV_new_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 > 0.0;
 if ($5) {
  $6 = $2;
  $7 = 0.0021943196741568373 * $6;
  STACKTOP = sp;return (+$7);
 } else {
  ___assert_fail((74946|0),(74809|0),246,(74958|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_max_E_transfer_MeV_new_single($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 >= 0.0;
 $7 = $3;
 if ($6) {
  $8 = $4;
  $9 = (+_AT_max_relativistic_E_transfer_MeV_new_single($7,$8));
  $2 = $9;
  $13 = $2;
  STACKTOP = sp;return (+$13);
 } else {
  $10 = -1.0 * $7;
  $11 = $4;
  $12 = (+_AT_max_classic_E_transfer_MeV_new_single($10,$11));
  $2 = $12;
  $13 = $2;
  STACKTOP = sp;return (+$13);
 }
 return +(0.0);
}
function _AT_max_E_transfer_MeV_new($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $8;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $6;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (+_AT_max_E_transfer_MeV_new_single($15,$19));
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22<<3)|0);
  HEAPF64[$23>>3] = $20;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 STACKTOP = sp;return 0;
}
function _AT_mass_correction_terms($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_AT_gamma_from_E_single($4));
 $2 = $5;
 $3 = 945.68436190270006;
 $6 = $3;
 $7 = 0.51099891799999997 / $6;
 $8 = 2.0 * $7;
 $9 = $2;
 $10 = $8 / $9;
 $11 = 1.0 + $10;
 $12 = $3;
 $13 = 0.51099891799999997 / $12;
 $14 = (+_gsl_pow_2($13));
 $15 = $11 + $14;
 STACKTOP = sp;return (+$15);
}
function _AT_max_relativistic_E_transfer_MeV_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_AT_beta_from_E_single($4));
 $2 = $5;
 $6 = $1;
 $7 = (+_AT_mass_correction_terms($6));
 $3 = $7;
 $8 = $2;
 $9 = (+_gsl_pow_2($8));
 $10 = 1.0219978359999999 * $9;
 $11 = $2;
 $12 = (+_gsl_pow_2($11));
 $13 = 1.0 - $12;
 $14 = $10 / $13;
 $15 = $3;
 $16 = $14 / $15;
 STACKTOP = sp;return (+$16);
}
function _AT_max_classic_E_transfer_MeV_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 > 0.0;
 if ($3) {
  $4 = $1;
  $5 = 0.0021784681240406985 * $4;
  STACKTOP = sp;return (+$5);
 } else {
  ___assert_fail((74946|0),(74809|0),293,(74999|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_max_E_transfer_MeV_single($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 >= 0.0;
 $5 = $2;
 if ($4) {
  $6 = (+_AT_max_relativistic_E_transfer_MeV_single($5));
  $1 = $6;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 } else {
  $7 = -1.0 * $5;
  $8 = (+_AT_max_classic_E_transfer_MeV_single($7));
  $1 = $8;
  $9 = $1;
  STACKTOP = sp;return (+$9);
 }
 return +(0.0);
}
function _AT_max_E_transfer_MeV($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_max_E_transfer_MeV_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_momentum_from_E_MeV_c_u_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $6 = (+_AT_beta_from_E_single($5));
 $2 = $6;
 $7 = $1;
 $8 = (+_AT_gamma_from_E_single($7));
 $3 = $8;
 $4 = 945.68436190270006;
 $9 = $3;
 $10 = $4;
 $11 = $9 * $10;
 $12 = $2;
 $13 = $11 * $12;
 $14 = $13 * 1.0;
 STACKTOP = sp;return (+$14);
}
function _AT_momentum_MeV_c_u_from_E_MeV_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = (($10) + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (+_AT_momentum_from_E_MeV_c_u_single($13));
  $15 = $5;
  $16 = $6;
  $17 = (($15) + ($16<<3)|0);
  HEAPF64[$17>>3] = $14;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 STACKTOP = sp;return 0;
}
function _AT_energy_straggling_MeV2_cm2_g($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $5;
 $14 = ($13|0)>(0);
 if (!($14)) {
  ___assert_fail((75036|0),(74809|0),349,(75042|0));
  // unreachable;
 }
 $15 = $8;
 $16 = (+_AT_electron_density_m3_from_material_no_single($15));
 $11 = $16;
 $17 = (+_gsl_pow_4(1.60217653E-19));
 $18 = $11;
 $19 = $17 * $18;
 $12 = $19;
 $20 = (+_gsl_pow_2(8.8541878176000004E-12));
 $21 = 12.566370614359172 * $20;
 $22 = $12;
 $23 = $22 / $21;
 $12 = $23;
 $24 = (+_gsl_pow_2(1.6021764600000001E-13));
 $25 = $24 * 100.0;
 $26 = $12;
 $27 = $26 / $25;
 $12 = $27;
 $10 = 0;
 while(1) {
  $28 = $10;
  $29 = $5;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $12;
  $32 = $6;
  $33 = $10;
  $34 = (($32) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $7;
  $37 = $10;
  $38 = (($36) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (+_AT_effective_charge_from_E_MeV_u_single($35,$39));
  $41 = $31 * $40;
  $42 = $9;
  $43 = $10;
  $44 = (($42) + ($43<<3)|0);
  HEAPF64[$44>>3] = $41;
  $45 = $10;
  $46 = (($45) + 1)|0;
  $10 = $46;
 }
 STACKTOP = sp;return;
}
function _AT_energy_straggling_after_slab_E_MeV_u($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $17 = $7;
 $18 = ($17|0)>(0);
 if (!($18)) {
  ___assert_fail((75036|0),(74809|0),368,(75074|0));
  // unreachable;
 }
 $19 = $7;
 $20 = (_calloc($19,8)|0);
 $14 = $20;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $14;
 _AT_energy_straggling_MeV2_cm2_g($21,$22,$23,$24,$25);
 $26 = $11;
 $27 = $26 * 100.0;
 $28 = $10;
 $29 = (+_AT_density_g_cm3_from_material_no($28));
 $30 = $27 * $29;
 $16 = $30;
 $15 = 0;
 while(1) {
  $31 = $15;
  $32 = $7;
  $33 = ($31|0)<($32|0);
  $34 = $14;
  if (!($33)) {
   break;
  }
  $35 = $15;
  $36 = (($34) + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $16;
  $39 = $37 * $38;
  $40 = $12;
  $41 = $15;
  $42 = (($40) + ($41<<3)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $12;
  $45 = $15;
  $46 = (($44) + ($45<<3)|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $43 * $47;
  $49 = $39 + $48;
  $50 = (+Math_sqrt((+$49)));
  $51 = $13;
  $52 = $15;
  $53 = (($51) + ($52<<3)|0);
  HEAPF64[$53>>3] = $50;
  $54 = $15;
  $55 = (($54) + 1)|0;
  $15 = $55;
 }
 _free($34);
 STACKTOP = sp;return;
}
function _AT_dose_Gy_from_fluence_cm2_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $6 = sp + 32|0;
 $10 = sp;
 HEAPF64[$5>>3] = $0;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $9;
 $12 = $8;
 (_AT_Mass_Stopping_Power_with_no($11,1,$5,$6,$12,$10)|0);
 $13 = +HEAPF64[$10>>3];
 $14 = $7;
 $15 = $13 * $14;
 $16 = $15 * 1.6021764599999999E-10;
 STACKTOP = sp;return (+$16);
}
function _AT_dose_Gy_from_fluence_cm2($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $11;
  $31 = $12;
  $32 = (+_AT_dose_Gy_from_fluence_cm2_single($21,$25,$29,$30,$31));
  $33 = $13;
  $34 = $14;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $14;
  $37 = (($36) + 1)|0;
  $14 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_fluence_cm2_from_dose_Gy_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $6 = sp + 32|0;
 $10 = sp;
 HEAPF64[$5>>3] = $0;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $9;
 $12 = $8;
 (_AT_Mass_Stopping_Power_with_no($11,1,$5,$6,$12,$10)|0);
 $13 = $7;
 $14 = $13 / 1.6021764599999999E-10;
 $15 = +HEAPF64[$10>>3];
 $16 = $14 / $15;
 STACKTOP = sp;return (+$16);
}
function _AT_fluence_cm2_from_dose_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = $14;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $9;
  $23 = $14;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $10;
  $27 = $14;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $11;
  $31 = $12;
  $32 = (+_AT_fluence_cm2_from_dose_Gy_single($21,$25,$29,$30,$31));
  $33 = $13;
  $34 = $14;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $14;
  $37 = (($36) + 1)|0;
  $14 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_interparticleDistance_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $6;
  $14 = $8;
  $15 = (($13) + ($14<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $16 > 0.0;
  $18 = $6;
  $19 = $8;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  if ($17) {
   $22 = 31415.926535897932 * $21;
   $23 = (+Math_sqrt((+$22)));
   $24 = 2.0 / $23;
   $25 = $7;
   $26 = $8;
   $27 = (($25) + ($26<<3)|0);
   HEAPF64[$27>>3] = $24;
  } else {
   $28 = - $21;
   $29 = $5;
   $30 = $8;
   $31 = (($29) + ($30<<3)|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $32 * 1.6021764599999999E-10;
   $34 = $28 / $33;
   $9 = $34;
   $35 = $9;
   $36 = 31415.926535897932 * $35;
   $37 = (+Math_sqrt((+$36)));
   $38 = 2.0 / $37;
   $39 = $7;
   $40 = $8;
   $41 = (($39) + ($40<<3)|0);
   HEAPF64[$41>>3] = $38;
  }
  $42 = $8;
  $43 = (($42) + 1)|0;
  $8 = $43;
 }
 STACKTOP = sp;return;
}
function _AT_beam_par_physical_to_technical($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $10;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (+_gsl_pow_2($21));
  $23 = $17 * $22;
  $24 = $23 * 2.0;
  $25 = $24 * 3.1415926535897931;
  $26 = $8;
  $27 = $10;
  $28 = (($26) + ($27<<3)|0);
  HEAPF64[$28>>3] = $25;
  $29 = $7;
  $30 = $10;
  $31 = (($29) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 * 23.54820046;
  $34 = $9;
  $35 = $10;
  $36 = (($34) + ($35<<3)|0);
  HEAPF64[$36>>3] = $33;
  $37 = $10;
  $38 = (($37) + 1)|0;
  $10 = $38;
 }
 STACKTOP = sp;return;
}
function _AT_beam_par_technical_to_physical($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 / 23.54820046;
  $19 = $9;
  $20 = $10;
  $21 = (($19) + ($20<<3)|0);
  HEAPF64[$21>>3] = $18;
  $22 = $6;
  $23 = $10;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $9;
  $27 = $10;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = (+_gsl_pow_2($29));
  $31 = $30 * 2.0;
  $32 = $31 * 3.1415926535897931;
  $33 = $25 / $32;
  $34 = $8;
  $35 = $10;
  $36 = (($34) + ($35<<3)|0);
  HEAPF64[$36>>3] = $33;
  $37 = $10;
  $38 = (($37) + 1)|0;
  $10 = $38;
 }
 STACKTOP = sp;return;
}
function _AT_inv_interparticleDistance_Gy($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $6;
  $14 = $8;
  $15 = (($13) + ($14<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = 2.0 / $16;
  $18 = (+_gsl_pow_2($17));
  $19 = $18 * 0.31830988618379069;
  $20 = $19 * 1.0E-4;
  $9 = $20;
  $21 = $9;
  $22 = $5;
  $23 = $8;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $25 * 1.6021764599999999E-10;
  $27 = $21 * $26;
  $28 = $7;
  $29 = $8;
  $30 = (($28) + ($29<<3)|0);
  HEAPF64[$30>>3] = $27;
  $31 = $8;
  $32 = (($31) + 1)|0;
  $8 = $32;
 }
 STACKTOP = sp;return;
}
function _AT_single_impact_fluence_cm2_single($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = (+_AT_max_electron_range_m($7,$8,$9));
 $6 = $10;
 $11 = $6;
 $12 = $11 * 100.0;
 $13 = (+_gsl_pow_2($12));
 $14 = 0.31830988618379069 / $13;
 STACKTOP = sp;return (+$14);
}
function _AT_single_impact_fluence_cm2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $7;
  $19 = $8;
  $20 = (+_AT_single_impact_fluence_cm2_single($17,$18,$19));
  $21 = $9;
  $22 = $10;
  $23 = (($21) + ($22<<3)|0);
  HEAPF64[$23>>3] = $20;
  $24 = $10;
  $25 = (($24) + 1)|0;
  $10 = $25;
 }
 STACKTOP = sp;return;
}
function _AT_single_impact_dose_Gy_single($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 * 1.6021764599999999E-10;
 $6 = $3;
 $7 = $5 * $6;
 STACKTOP = sp;return (+$7);
}
function _AT_single_impact_dose_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = (_llvm_stacksave()|0);
 $15 = $17;
 $$alloca_mul = $16<<3;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $19 = $12;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 (_AT_Mass_Stopping_Power_with_no($19,$20,$21,$22,$23,$18)|0);
 $14 = 0;
 while(1) {
  $24 = $14;
  $25 = $7;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $14;
  $28 = (($18) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $8;
  $31 = $14;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $10;
  $35 = $11;
  $36 = (+_AT_single_impact_fluence_cm2_single($33,$34,$35));
  $37 = (+_AT_single_impact_dose_Gy_single($29,$36));
  $38 = $13;
  $39 = $14;
  $40 = (($38) + ($39<<3)|0);
  HEAPF64[$40>>3] = $37;
  $41 = $14;
  $42 = (($41) + 1)|0;
  $14 = $42;
 }
 $43 = $15;
 _llvm_stackrestore(($43|0));
 STACKTOP = sp;return;
}
function _AT_total_D_Gy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0.0;
 $15 = $6;
 $16 = (_calloc($15,8)|0);
 $13 = $16;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $13;
 _AT_dose_Gy_from_fluence_cm2($17,$18,$19,$20,$21,$22,$23);
 $14 = 0;
 while(1) {
  $24 = $14;
  $25 = $6;
  $26 = ($24|0)<($25|0);
  $27 = $13;
  if (!($26)) {
   break;
  }
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $12;
  $32 = $31 + $30;
  $12 = $32;
  $33 = $14;
  $34 = (($33) + 1)|0;
  $14 = $34;
 }
 _free($27);
 $35 = $12;
 STACKTOP = sp;return (+$35);
}
function _AT_total_fluence_cm2($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $6;
 $16 = (_calloc($15,8)|0);
 $12 = $16;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $12;
 _AT_fluence_cm2_from_dose_Gy($17,$18,$19,$20,$21,$22,$23);
 $13 = 0.0;
 $14 = 0;
 while(1) {
  $24 = $14;
  $25 = $6;
  $26 = ($24|0)<($25|0);
  $27 = $12;
  if (!($26)) {
   break;
  }
  $28 = $14;
  $29 = (($27) + ($28<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $13;
  $32 = $31 + $30;
  $13 = $32;
  $33 = $14;
  $34 = (($33) + 1)|0;
  $14 = $34;
 }
 _free($27);
 $35 = $13;
 STACKTOP = sp;return (+$35);
}
function _AT_fluence_weighted_E_MeV_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $3;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $6;
  $14 = (($12) + ($13<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $7;
  $17 = $16 + $15;
  $7 = $17;
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 $8 = 0.0;
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = $3;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $5;
  $24 = $6;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $4;
  $28 = $6;
  $29 = (($27) + ($28<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $26 * $30;
  $32 = $8;
  $33 = $32 + $31;
  $8 = $33;
  $34 = $6;
  $35 = (($34) + 1)|0;
  $6 = $35;
 }
 $36 = $7;
 $37 = $8;
 $38 = $37 / $36;
 $8 = $38;
 $39 = $8;
 STACKTOP = sp;return (+$39);
}
function _AT_dose_weighted_E_MeV_u($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $16 = $6;
 $17 = (_calloc($16,8)|0);
 $13 = $17;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $24 = $13;
 _AT_dose_Gy_from_fluence_cm2($18,$19,$20,$21,$22,$23,$24);
 $14 = 0.0;
 $12 = 0;
 while(1) {
  $25 = $12;
  $26 = $6;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $13;
  $29 = $12;
  $30 = (($28) + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $14;
  $33 = $32 + $31;
  $14 = $33;
  $34 = $12;
  $35 = (($34) + 1)|0;
  $12 = $35;
 }
 $15 = 0.0;
 $12 = 0;
 while(1) {
  $36 = $12;
  $37 = $6;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $13;
  $40 = $12;
  $41 = (($39) + ($40<<3)|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $7;
  $44 = $12;
  $45 = (($43) + ($44<<3)|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $42 * $46;
  $48 = $15;
  $49 = $48 + $47;
  $15 = $49;
  $50 = $12;
  $51 = (($50) + 1)|0;
  $12 = $51;
 }
 $52 = $14;
 $53 = $15;
 $54 = $53 / $52;
 $15 = $54;
 $55 = $13;
 _free($55);
 $56 = $15;
 STACKTOP = sp;return (+$56);
}
function _AT_fluence_weighted_LET_MeV_cm2_g($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $16 = $6;
 $17 = (_calloc($16,8)|0);
 $13 = $17;
 $14 = 0.0;
 $12 = 0;
 while(1) {
  $18 = $12;
  $19 = $6;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $9;
  $22 = $12;
  $23 = (($21) + ($22<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $14;
  $26 = $25 + $24;
  $14 = $26;
  $27 = $12;
  $28 = (($27) + 1)|0;
  $12 = $28;
 }
 $29 = $11;
 $30 = $6;
 $31 = $7;
 $32 = $8;
 $33 = $10;
 $34 = $13;
 (_AT_Mass_Stopping_Power_with_no($29,$30,$31,$32,$33,$34)|0);
 $15 = 0.0;
 $12 = 0;
 while(1) {
  $35 = $12;
  $36 = $6;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $9;
  $39 = $12;
  $40 = (($38) + ($39<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $13;
  $43 = $12;
  $44 = (($42) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $41 * $45;
  $47 = $15;
  $48 = $47 + $46;
  $15 = $48;
  $49 = $12;
  $50 = (($49) + 1)|0;
  $12 = $50;
 }
 $51 = $14;
 $52 = $15;
 $53 = $52 / $51;
 $15 = $53;
 $54 = $13;
 _free($54);
 $55 = $15;
 STACKTOP = sp;return (+$55);
}
function _AT_dose_weighted_LET_MeV_cm2_g($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $6;
 $18 = (_calloc($17,8)|0);
 $13 = $18;
 $19 = $6;
 $20 = (_calloc($19,8)|0);
 $14 = $20;
 $21 = $11;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $10;
 $26 = $13;
 (_AT_Mass_Stopping_Power_with_no($21,$22,$23,$24,$25,$26)|0);
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = $10;
 $32 = $11;
 $33 = $14;
 _AT_dose_Gy_from_fluence_cm2($27,$28,$29,$30,$31,$32,$33);
 $15 = 0.0;
 $12 = 0;
 while(1) {
  $34 = $12;
  $35 = $6;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $14;
  $38 = $12;
  $39 = (($37) + ($38<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $15;
  $42 = $41 + $40;
  $15 = $42;
  $43 = $12;
  $44 = (($43) + 1)|0;
  $12 = $44;
 }
 $16 = 0.0;
 $12 = 0;
 while(1) {
  $45 = $12;
  $46 = $6;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   break;
  }
  $48 = $14;
  $49 = $12;
  $50 = (($48) + ($49<<3)|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $13;
  $53 = $12;
  $54 = (($52) + ($53<<3)|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $51 * $55;
  $57 = $16;
  $58 = $57 + $56;
  $16 = $58;
  $59 = $12;
  $60 = (($59) + 1)|0;
  $12 = $60;
 }
 $61 = $15;
 $62 = $16;
 $63 = $62 / $61;
 $16 = $63;
 $64 = $13;
 _free($64);
 $65 = $14;
 _free($65);
 $66 = $16;
 STACKTOP = sp;return (+$66);
}
function _AT_stopping_power_ratio($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $7;
 $20 = (_calloc($19,8)|0);
 $14 = $20;
 $21 = $7;
 $22 = (_calloc($21,8)|0);
 $15 = $22;
 $23 = $13;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $11;
 $28 = $14;
 (_AT_Mass_Stopping_Power_with_no($23,$24,$25,$26,$27,$28)|0);
 $29 = $13;
 $30 = $7;
 $31 = $8;
 $32 = $9;
 $33 = $12;
 $34 = $15;
 (_AT_Mass_Stopping_Power_with_no($29,$30,$31,$32,$33,$34)|0);
 $17 = 0.0;
 $18 = 0.0;
 $16 = 0;
 while(1) {
  $35 = $16;
  $36 = $7;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $15;
  $39 = $16;
  $40 = (($38) + ($39<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $41 != 0.0;
  if ($42) {
   $43 = $10;
   $44 = $16;
   $45 = (($43) + ($44<<3)|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $14;
   $48 = $16;
   $49 = (($47) + ($48<<3)|0);
   $50 = +HEAPF64[$49>>3];
   $51 = $46 * $50;
   $52 = $15;
   $53 = $16;
   $54 = (($52) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $51 / $55;
   $57 = $17;
   $58 = $57 + $56;
   $17 = $58;
  }
  $59 = $10;
  $60 = $16;
  $61 = (($59) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $18;
  $64 = $63 + $62;
  $18 = $64;
  $65 = $16;
  $66 = (($65) + 1)|0;
  $16 = $66;
 }
 $67 = $14;
 _free($67);
 $68 = $15;
 _free($68);
 $69 = $17;
 $70 = $18;
 $71 = $69 / $70;
 STACKTOP = sp;return (+$71);
}
function _AT_mean_number_of_tracks_contrib($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $19 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $20 = $7;
 $21 = (_calloc($20,8)|0);
 $14 = $21;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $13;
 $28 = (+_AT_total_D_Gy($22,$23,$24,$25,$26,$27));
 $15 = $28;
 $29 = $7;
 $30 = $10;
 $31 = $14;
 _AT_normalize($29,$30,$31);
 $16 = 0.0;
 $17 = 0;
 while(1) {
  $32 = $17;
  $33 = $7;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $8;
  $36 = $17;
  $37 = (($35) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $11;
  $40 = $12;
  $41 = (+_AT_single_impact_fluence_cm2_single($38,$39,$40));
  $18 = $41;
  $42 = $13;
  $43 = $8;
  $44 = $17;
  $45 = (($43) + ($44<<3)|0);
  $46 = $9;
  $47 = $17;
  $48 = (($46) + ($47<<2)|0);
  $49 = $11;
  (_AT_Mass_Stopping_Power_with_no($42,1,$45,$48,$49,$19)|0);
  $50 = $14;
  $51 = $17;
  $52 = (($50) + ($51<<3)|0);
  $53 = +HEAPF64[$52>>3];
  $54 = +HEAPF64[$19>>3];
  $55 = $18;
  $56 = (+_AT_single_impact_dose_Gy_single($54,$55));
  $57 = $53 * $56;
  $58 = $16;
  $59 = $58 + $57;
  $16 = $59;
  $60 = $17;
  $61 = (($60) + 1)|0;
  $17 = $61;
 }
 $62 = $14;
 _free($62);
 $63 = $15;
 $64 = $16;
 $65 = $63 / $64;
 STACKTOP = sp;return (+$65);
}
function _AT_kinetic_variable_single($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = $1;
 $5 = (+_AT_beta_from_E_single($4));
 $2 = $5;
 $6 = $1;
 $7 = (+_AT_gamma_from_E_single($6));
 $3 = $7;
 $8 = $2;
 $9 = $3;
 $10 = $8 * $9;
 $11 = $10 > 0.0;
 if ($11) {
  $12 = $2;
  $13 = $3;
  $14 = $12 * $13;
  $15 = (+_llvm_log10_f64((+$14)));
  STACKTOP = sp;return (+$15);
 } else {
  ___assert_fail((75114|0),(74809|0),841,(75131|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_Rutherford_SDCS($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0;
 var $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $28 = $7;
 $29 = (+_AT_nuclear_spin_from_particle_no_single($28));
 $30 = (~~(($29)));
 $12 = $30;
 $31 = $6;
 $32 = $7;
 $33 = (+_AT_effective_charge_from_E_MeV_u_single($31,$32));
 $13 = $33;
 $34 = $7;
 $35 = (_AT_Z_from_particle_no_single($34)|0);
 $14 = $35;
 $36 = $7;
 $37 = (_AT_A_from_particle_no_single($36)|0);
 $15 = $37;
 $38 = $8;
 $39 = (+_AT_average_Z_from_material_no($38));
 $16 = $39;
 $40 = $14;
 $41 = (+($40|0));
 $42 = $41 * 938.27201300000002;
 $43 = $15;
 $44 = $14;
 $45 = (($43) - ($44))|0;
 $46 = (+($45|0));
 $47 = $46 * 939.56534599999998;
 $48 = $42 + $47;
 $17 = $48;
 $49 = $17;
 $50 = $15;
 $51 = (+($50|0));
 $52 = $49 / $51;
 $53 = $6;
 $54 = $52 + $53;
 $18 = $54;
 $55 = $17;
 $56 = $17;
 $57 = $55 * $56;
 $58 = $57 / 0.51099891799999997;
 $19 = $58;
 $59 = (+Math_pow(2.8179402894E-15,2.0));
 $60 = 6.2831853071795862 * $59;
 $61 = $60 * 0.51099891799999997;
 $20 = $61;
 $62 = $6;
 $63 = (+_AT_beta_from_E_single($62));
 $21 = $63;
 $64 = $21;
 $65 = $21;
 $66 = $64 * $65;
 $22 = $66;
 $67 = $6;
 $68 = (+_AT_max_E_transfer_MeV_single($67));
 $23 = $68;
 $27 = 0;
 while(1) {
  $69 = $27;
  $70 = $9;
  $71 = ($69|0)<($70|0);
  if (!($71)) {
   break;
  }
  $72 = $10;
  $73 = $27;
  $74 = (($72) + ($73<<3)|0);
  $75 = +HEAPF64[$74>>3];
  $76 = $23;
  $77 = $75 > $76;
  if ($77) {
   $78 = $11;
   $79 = $27;
   $80 = (($78) + ($79<<3)|0);
   HEAPF64[$80>>3] = 0.0;
  } else {
   $81 = $20;
   $82 = $16;
   $83 = $81 * $82;
   $84 = $13;
   $85 = $83 * $84;
   $86 = $13;
   $87 = $85 * $86;
   $88 = $22;
   $89 = $10;
   $90 = $27;
   $91 = (($89) + ($90<<3)|0);
   $92 = +HEAPF64[$91>>3];
   $93 = $88 * $92;
   $94 = $10;
   $95 = $27;
   $96 = (($94) + ($95<<3)|0);
   $97 = +HEAPF64[$96>>3];
   $98 = $93 * $97;
   $99 = $87 / $98;
   $24 = $99;
   $100 = $22;
   $101 = $10;
   $102 = $27;
   $103 = (($101) + ($102<<3)|0);
   $104 = +HEAPF64[$103>>3];
   $105 = $100 * $104;
   $106 = $23;
   $107 = $105 / $106;
   $108 = 1.0 - $107;
   $25 = $108;
   $109 = $12;
   $110 = (+($109|0));
   $111 = $110 == 0.0;
   if ($111) {
    $112 = $24;
    $113 = $25;
    $114 = $112 * $113;
    $115 = $11;
    $116 = $27;
    $117 = (($115) + ($116<<3)|0);
    HEAPF64[$117>>3] = $114;
   }
   $118 = $12;
   $119 = (+($118|0));
   $120 = $119 == 0.5;
   if ($120) {
    $121 = $10;
    $122 = $27;
    $123 = (($121) + ($122<<3)|0);
    $124 = +HEAPF64[$123>>3];
    $125 = $10;
    $126 = $27;
    $127 = (($125) + ($126<<3)|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $124 * $128;
    $130 = $18;
    $131 = 2.0 * $130;
    $132 = $18;
    $133 = $131 * $132;
    $134 = $129 / $133;
    $26 = $134;
    $135 = $24;
    $136 = $25;
    $137 = $26;
    $138 = $136 + $137;
    $139 = $135 * $138;
    $140 = $11;
    $141 = $27;
    $142 = (($140) + ($141<<3)|0);
    HEAPF64[$142>>3] = $139;
   }
   $143 = $12;
   $144 = (+($143|0));
   $145 = $144 == 1.0;
   if ($145) {
    $146 = $10;
    $147 = $27;
    $148 = (($146) + ($147<<3)|0);
    $149 = +HEAPF64[$148>>3];
    $150 = $19;
    $151 = 2.0 * $150;
    $152 = $149 / $151;
    $153 = 1.0 + $152;
    $26 = $153;
    $154 = $10;
    $155 = $27;
    $156 = (($154) + ($155<<3)|0);
    $157 = +HEAPF64[$156>>3];
    $158 = $10;
    $159 = $27;
    $160 = (($158) + ($159<<3)|0);
    $161 = +HEAPF64[$160>>3];
    $162 = $157 * $161;
    $163 = $18;
    $164 = 3.0 * $163;
    $165 = $18;
    $166 = $164 * $165;
    $167 = $162 / $166;
    $168 = $26;
    $169 = $168 * $167;
    $26 = $169;
    $170 = $25;
    $171 = $10;
    $172 = $27;
    $173 = (($171) + ($172<<3)|0);
    $174 = +HEAPF64[$173>>3];
    $175 = $19;
    $176 = 3.0 * $175;
    $177 = $174 / $176;
    $178 = 1.0 + $177;
    $179 = $170 * $178;
    $180 = $26;
    $181 = $180 + $179;
    $26 = $181;
    $182 = $24;
    $183 = $26;
    $184 = $182 * $183;
    $185 = $11;
    $186 = $27;
    $187 = (($185) + ($186<<3)|0);
    HEAPF64[$187>>3] = $184;
   }
  }
  $188 = $27;
  $189 = (($188) + 1)|0;
  $27 = $189;
 }
 STACKTOP = sp;return 0;
}
function _AT_Rutherford_scatter_cross_section($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $8;
 $18 = (+_AT_average_Z_from_material_no($17));
 $12 = $18;
 $19 = $6;
 $20 = $7;
 $21 = (+_AT_effective_charge_from_E_MeV_u_single($19,$20));
 $13 = $21;
 $22 = $7;
 $23 = (_AT_A_from_particle_no_single($22)|0);
 $14 = $23;
 $15 = 1.4399645302667695E-15;
 $24 = $13;
 $25 = $13;
 $26 = $24 * $25;
 $27 = $12;
 $28 = $26 * $27;
 $29 = $12;
 $30 = $28 * $29;
 $31 = $15;
 $32 = $31 * $30;
 $15 = $32;
 $33 = $6;
 $34 = 4.0 * $33;
 $35 = $14;
 $36 = (+($35|0));
 $37 = $34 * $36;
 $38 = $15;
 $39 = $38 / $37;
 $15 = $39;
 $40 = $15;
 $41 = $15;
 $42 = $41 * $40;
 $15 = $42;
 $16 = 0;
 while(1) {
  $43 = $16;
  $44 = $9;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $15;
  $47 = $10;
  $48 = $16;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $50 / 2.0;
  $52 = (+Math_sin((+$51)));
  $53 = (+Math_pow((+$52),4.0));
  $54 = $46 / $53;
  $55 = $11;
  $56 = $16;
  $57 = (($55) + ($56<<3)|0);
  HEAPF64[$57>>3] = $54;
  $58 = $16;
  $59 = (($58) + 1)|0;
  $16 = $59;
 }
 STACKTOP = sp;return 0;
}
function _AT_gyroradius_m($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (+_AT_momentum_from_E_MeV_c_u_single($8));
 $10 = $9 / 1000.0;
 $11 = $4;
 $12 = (_AT_A_from_particle_no_single($11)|0);
 $13 = (+($12|0));
 $14 = $10 * $13;
 $6 = $14;
 $15 = $3;
 $16 = $4;
 $17 = (+_AT_effective_charge_from_E_MeV_u_single($15,$16));
 $7 = $17;
 $18 = $6;
 $19 = $7;
 $20 = $5;
 $21 = $19 * $20;
 $22 = $18 / $21;
 STACKTOP = sp;return (+$22);
}
function _CL_ranlan_idf($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $6 = $1;
 $7 = 1000.0 * $6;
 $2 = $7;
 $8 = $2;
 $9 = (~~(($8)));
 $5 = $9;
 $10 = $2;
 $11 = $5;
 $12 = (+($11|0));
 $13 = $10 - $12;
 $2 = $13;
 $14 = $5;
 $15 = ($14|0)>=(70);
 $16 = $5;
 $17 = ($16|0)<=(800);
 $or$cond = $15 & $17;
 $18 = $5;
 if ($or$cond) {
  $19 = (1200 + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $2;
  $22 = $5;
  $23 = (($22) + 1)|0;
  $24 = (1200 + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $5;
  $27 = (1200 + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $25 - $28;
  $30 = $21 * $29;
  $31 = $20 + $30;
  $4 = $31;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 }
 $32 = ($18|0)>=(7);
 $33 = $5;
 $34 = ($33|0)<=(980);
 $or$cond3 = $32 & $34;
 $35 = $5;
 if ($or$cond3) {
  $36 = (1200 + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $2;
  $39 = $5;
  $40 = (($39) + 1)|0;
  $41 = (1200 + ($40<<3)|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $5;
  $44 = (1200 + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $42 - $45;
  $47 = $2;
  $48 = 1.0 - $47;
  $49 = 0.25 * $48;
  $50 = $5;
  $51 = (($50) + 2)|0;
  $52 = (1200 + ($51<<3)|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $5;
  $55 = (($54) + 1)|0;
  $56 = (1200 + ($55<<3)|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $53 - $57;
  $59 = $5;
  $60 = (1200 + ($59<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $58 - $61;
  $63 = $5;
  $64 = (($63) - 1)|0;
  $65 = (1200 + ($64<<3)|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $62 + $66;
  $68 = $49 * $67;
  $69 = $46 - $68;
  $70 = $38 * $69;
  $71 = $37 + $70;
  $4 = $71;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 }
 $72 = ($35|0)<(7);
 $73 = $1;
 if ($72) {
  $74 = (+Math_log((+$73)));
  $3 = $74;
  $75 = $3;
  $76 = 1.0 / $75;
  $2 = $76;
  $77 = $2;
  $78 = 17.085452799999999 * $77;
  $79 = 34.5213058 + $78;
  $80 = $2;
  $81 = $79 * $80;
  $82 = 0.99858950000000001 + $81;
  $83 = $2;
  $84 = 4.0124458199999999 * $83;
  $85 = 34.176020200000004 + $84;
  $86 = $2;
  $87 = $85 * $86;
  $88 = 1.0 + $87;
  $89 = $82 / $88;
  $90 = $3;
  $91 = -0.91893853000000003 - $90;
  $92 = (+Math_log((+$91)));
  $93 = - $92;
  $94 = $93 - 1.0;
  $95 = $89 * $94;
  $4 = $95;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 }
 $96 = 1.0 - $73;
 $2 = $96;
 $97 = $2;
 $98 = $2;
 $99 = $97 * $98;
 $3 = $99;
 $100 = $1;
 $101 = $100 <= 0.99899999999999999;
 $102 = $2;
 if ($101) {
  $103 = 263.99115599999999 * $102;
  $104 = 1.00060006 + $103;
  $105 = $3;
  $106 = 4373.2006799999999 * $105;
  $107 = $104 + $106;
  $108 = $2;
  $109 = 257.36807499999998 * $108;
  $110 = 1.0 + $109;
  $111 = $3;
  $112 = 3414.48018 * $111;
  $113 = $110 + $112;
  $114 = $2;
  $115 = $113 * $114;
  $116 = $107 / $115;
  $4 = $116;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 } else {
  $117 = 6075.1411900000003 * $102;
  $118 = 1.00001538 + $117;
  $119 = $3;
  $120 = 734266.40899999999 * $119;
  $121 = $118 + $120;
  $122 = $2;
  $123 = 6065.1191900000003 * $122;
  $124 = 1.0 + $123;
  $125 = $3;
  $126 = 694021.04399999999 * $125;
  $127 = $124 + $126;
  $128 = $2;
  $129 = $127 * $128;
  $130 = $121 / $129;
  $4 = $130;
  $131 = $4;
  STACKTOP = sp;return (+$131);
 }
 return +(0.0);
}
function _CL_ranlan_cdf($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = $1;
 $3 = $5;
 $6 = $3;
 $7 = $6 < -5.5;
 $8 = $3;
 if ($7) {
  $9 = $8 + 1.0;
  $10 = (+Math_exp((+$9)));
  $2 = $10;
  $11 = $2;
  $12 = -1.0 / $11;
  $13 = (+Math_exp((+$12)));
  $14 = 0.39894228030000001 * $13;
  $15 = $2;
  $16 = (+Math_sqrt((+$15)));
  $17 = $14 * $16;
  $18 = $2;
  $19 = -1.6417414159999999 * $18;
  $20 = 0.66753472219999999 + $19;
  $21 = $2;
  $22 = $20 * $21;
  $23 = -0.45833333329999998 + $22;
  $24 = $2;
  $25 = $23 * $24;
  $26 = 1.0 + $25;
  $27 = $17 * $26;
  $4 = $27;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $28 = $8 < -1.0;
 $29 = $3;
 if ($28) {
  $30 = - $29;
  $31 = $30 - 1.0;
  $32 = (+Math_exp((+$31)));
  $2 = $32;
  $33 = $2;
  $34 = - $33;
  $35 = (+Math_exp((+$34)));
  $36 = $2;
  $37 = (+Math_sqrt((+$36)));
  $38 = $35 / $37;
  $39 = $3;
  $40 = 7.4112472900000003E-4 * $39;
  $41 = -0.0021088177369999999 + $40;
  $42 = $3;
  $43 = $41 * $42;
  $44 = 0.0145838123 + $43;
  $45 = $3;
  $46 = $44 * $45;
  $47 = -0.062505804440000007 + $46;
  $48 = $3;
  $49 = $47 * $48;
  $50 = 0.25140914910000001 + $49;
  $51 = $38 * $50;
  $52 = $3;
  $53 = 0.001931496439 * $52;
  $54 = -0.0031373784270000002 + $53;
  $55 = $3;
  $56 = $54 * $55;
  $57 = 0.06225310236 + $56;
  $58 = $3;
  $59 = $57 * $58;
  $60 = -0.0055711756249999999 + $59;
  $61 = $3;
  $62 = $60 * $61;
  $63 = 1.0 + $62;
  $64 = $51 / $63;
  $4 = $64;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $65 = $29 < 1.0;
 $66 = $3;
 if ($65) {
  $67 = 0.02251304883 * $66;
  $68 = 0.15235186949999999 + $67;
  $69 = $3;
  $70 = $68 * $69;
  $71 = 0.35643632310000001 + $70;
  $72 = $3;
  $73 = $71 * $72;
  $74 = 0.2868328584 + $73;
  $75 = $3;
  $76 = 0.022785947710000001 * $75;
  $77 = 0.17207214479999999 + $76;
  $78 = $3;
  $79 = $77 * $78;
  $80 = 0.61911361369999995 + $79;
  $81 = $3;
  $82 = $80 * $81;
  $83 = 1.0 + $82;
  $84 = $74 / $83;
  $4 = $84;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $85 = $66 < 4.0;
 $86 = $3;
 if ($85) {
  $87 = 0.0087338271849999992 * $86;
  $88 = 0.099509519409999996 + $87;
  $89 = $3;
  $90 = $88 * $89;
  $91 = 0.3003828436 + $90;
  $92 = $3;
  $93 = $91 * $92;
  $94 = 0.28683290659999999 + $93;
  $95 = $3;
  $96 = 0.0086938515669999997 * $95;
  $97 = 0.1095631512 + $96;
  $98 = $3;
  $99 = $97 * $98;
  $100 = 0.4237190502 + $99;
  $101 = $3;
  $102 = $100 * $101;
  $103 = 1.0 + $102;
  $104 = $94 / $103;
  $4 = $104;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $105 = $86 < 12.0;
 $106 = $3;
 if ($105) {
  $107 = 1.0 / $106;
  $2 = $107;
  $108 = $2;
  $109 = 7.5360522689999998 * $108;
  $110 = 10.858838799999999 + $109;
  $111 = $2;
  $112 = $110 * $111;
  $113 = 4.5035924979999997 + $112;
  $114 = $2;
  $115 = $113 * $114;
  $116 = 1.0003516299999999 + $115;
  $117 = $2;
  $118 = 27.213215080000001 * $117;
  $119 = 19.335811110000002 + $118;
  $120 = $2;
  $121 = $119 * $120;
  $122 = 5.5399696780000003 + $121;
  $123 = $2;
  $124 = $122 * $123;
  $125 = 1.0 + $124;
  $126 = $116 / $125;
  $4 = $126;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $127 = $106 < 50.0;
 $128 = $3;
 if ($127) {
  $129 = 1.0 / $128;
  $2 = $129;
  $130 = $2;
  $131 = 153.21534550000001 * $130;
  $132 = 85.055447529999995 + $131;
  $133 = $2;
  $134 = $132 * $133;
  $135 = 49.094141110000002 + $134;
  $136 = $2;
  $137 = $135 * $136;
  $138 = 1.0000065170000001 + $137;
  $139 = $2;
  $140 = 420.00029089999998 * $139;
  $141 = 139.9819104 + $140;
  $142 = $2;
  $143 = $141 * $142;
  $144 = 50.099288809999997 + $143;
  $145 = $2;
  $146 = $144 * $145;
  $147 = 1.0 + $146;
  $148 = $138 / $147;
  $4 = $148;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 $149 = $128 < 300.0;
 $150 = $3;
 if ($149) {
  $151 = 1.0 / $150;
  $2 = $151;
  $152 = $2;
  $153 = -960.50542740000003 * $152;
  $154 = 916.21492439999997 + $153;
  $155 = $2;
  $156 = $154 * $155;
  $157 = 132.98684560000001 + $156;
  $158 = $2;
  $159 = $157 * $158;
  $160 = 1.0000009830000001 + $159;
  $161 = $2;
  $162 = 553.22246189999998 * $161;
  $163 = 1055.990413 + $162;
  $164 = $2;
  $165 = $163 * $164;
  $166 = 133.98878429999999 + $165;
  $167 = $2;
  $168 = $166 * $167;
  $169 = 1.0 + $168;
  $170 = $160 / $169;
  $4 = $170;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 } else {
  $171 = $3;
  $172 = $3;
  $173 = (+Math_log((+$172)));
  $174 = $171 * $173;
  $175 = $3;
  $176 = $175 + 1.0;
  $177 = $174 / $176;
  $178 = $150 - $177;
  $179 = 1.0 / $178;
  $2 = $179;
  $180 = $2;
  $181 = -2.043403138 * $180;
  $182 = -0.42278433510000002 + $181;
  $183 = $2;
  $184 = $182 * $183;
  $185 = 1.0 + $184;
  $186 = $2;
  $187 = $185 * $186;
  $188 = 1.0 - $187;
  $4 = $188;
  $189 = $4;
  STACKTOP = sp;return (+$189);
 }
 return +(0.0);
}
function _ROOT_vavset($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $100 = 0, $1000 = 0.0, $1001 = 0, $1002 = 0.0, $1003 = 0.0, $1004 = 0.0, $1005 = 0.0, $1006 = 0, $1007 = 0.0, $1008 = 0.0, $1009 = 0.0, $101 = 0, $1010 = 0.0, $1011 = 0, $1012 = 0.0, $1013 = 0.0, $1014 = 0.0, $1015 = 0.0, $1016 = 0;
 var $1017 = 0, $1018 = 0.0, $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0.0, $1023 = 0.0, $1024 = 0, $1025 = 0.0, $1026 = 0.0, $1027 = 0.0, $1028 = 0.0, $1029 = 0, $103 = 0, $1030 = 0.0, $1031 = 0.0, $1032 = 0.0, $1033 = 0.0, $1034 = 0;
 var $1035 = 0.0, $1036 = 0.0, $1037 = 0.0, $1038 = 0.0, $1039 = 0, $104 = 0, $1040 = 0.0, $1041 = 0.0, $1042 = 0.0, $1043 = 0.0, $1044 = 0, $1045 = 0.0, $1046 = 0.0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0, $1050 = 0.0, $1051 = 0.0, $1052 = 0.0;
 var $1053 = 0.0, $1054 = 0, $1055 = 0.0, $1056 = 0.0, $1057 = 0.0, $1058 = 0.0, $1059 = 0, $106 = 0, $1060 = 0.0, $1061 = 0.0, $1062 = 0.0, $1063 = 0.0, $1064 = 0, $1065 = 0.0, $1066 = 0.0, $1067 = 0.0, $1068 = 0.0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0.0, $1072 = 0, $1073 = 0.0, $1074 = 0.0, $1075 = 0.0, $1076 = 0.0, $1077 = 0, $1078 = 0.0, $1079 = 0.0, $108 = 0, $1080 = 0.0, $1081 = 0.0, $1082 = 0, $1083 = 0.0, $1084 = 0.0, $1085 = 0.0, $1086 = 0.0, $1087 = 0, $1088 = 0.0, $1089 = 0.0;
 var $109 = 0, $1090 = 0.0, $1091 = 0.0, $1092 = 0, $1093 = 0.0, $1094 = 0.0, $1095 = 0.0, $1096 = 0.0, $1097 = 0, $1098 = 0.0, $1099 = 0.0, $11 = 0.0, $110 = 0, $1100 = 0.0, $1101 = 0.0, $1102 = 0, $1103 = 0.0, $1104 = 0.0, $1105 = 0.0, $1106 = 0.0;
 var $1107 = 0, $1108 = 0.0, $1109 = 0.0, $111 = 0.0, $1110 = 0.0, $1111 = 0.0, $1112 = 0, $1113 = 0.0, $1114 = 0.0, $1115 = 0.0, $1116 = 0.0, $1117 = 0, $1118 = 0.0, $1119 = 0.0, $112 = 0, $1120 = 0.0, $1121 = 0.0, $1122 = 0, $1123 = 0.0, $1124 = 0.0;
 var $1125 = 0.0, $1126 = 0.0, $1127 = 0, $1128 = 0.0, $1129 = 0.0, $113 = 0.0, $1130 = 0.0, $1131 = 0.0, $1132 = 0, $1133 = 0, $1134 = 0.0, $1135 = 0, $1136 = 0.0, $1137 = 0.0, $1138 = 0.0, $1139 = 0.0, $114 = 0, $1140 = 0, $1141 = 0.0, $1142 = 0.0;
 var $1143 = 0.0, $1144 = 0.0, $1145 = 0, $1146 = 0.0, $1147 = 0.0, $1148 = 0.0, $1149 = 0.0, $115 = 0, $1150 = 0, $1151 = 0.0, $1152 = 0.0, $1153 = 0.0, $1154 = 0.0, $1155 = 0, $1156 = 0.0, $1157 = 0.0, $1158 = 0.0, $1159 = 0.0, $116 = 0.0, $1160 = 0;
 var $1161 = 0.0, $1162 = 0.0, $1163 = 0.0, $1164 = 0.0, $1165 = 0, $1166 = 0.0, $1167 = 0.0, $1168 = 0.0, $1169 = 0.0, $117 = 0.0, $1170 = 0, $1171 = 0, $1172 = 0.0, $1173 = 0, $1174 = 0.0, $1175 = 0.0, $1176 = 0.0, $1177 = 0.0, $1178 = 0, $1179 = 0.0;
 var $118 = 0, $1180 = 0.0, $1181 = 0.0, $1182 = 0.0, $1183 = 0, $1184 = 0.0, $1185 = 0.0, $1186 = 0.0, $1187 = 0.0, $1188 = 0, $1189 = 0.0, $119 = 0.0, $1190 = 0.0, $1191 = 0.0, $1192 = 0.0, $1193 = 0, $1194 = 0.0, $1195 = 0.0, $1196 = 0.0, $1197 = 0.0;
 var $1198 = 0, $1199 = 0.0, $12 = 0.0, $120 = 0, $1200 = 0.0, $1201 = 0.0, $1202 = 0.0, $1203 = 0, $1204 = 0.0, $1205 = 0.0, $1206 = 0.0, $1207 = 0.0, $1208 = 0, $1209 = 0.0, $121 = 0.0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0.0, $1214 = 0.0;
 var $1215 = 0.0, $1216 = 0.0, $1217 = 0.0, $1218 = 0.0, $1219 = 0.0, $122 = 0, $1220 = 0.0, $1221 = 0.0, $1222 = 0.0, $1223 = 0.0, $1224 = 0.0, $1225 = 0.0, $1226 = 0.0, $1227 = 0.0, $1228 = 0.0, $1229 = 0.0, $123 = 0, $1230 = 0.0, $1231 = 0.0, $1232 = 0.0;
 var $1233 = 0.0, $1234 = 0.0, $1235 = 0.0, $1236 = 0.0, $1237 = 0.0, $1238 = 0.0, $1239 = 0.0, $124 = 0, $1240 = 0.0, $1241 = 0.0, $1242 = 0.0, $1243 = 0.0, $1244 = 0.0, $1245 = 0.0, $1246 = 0.0, $1247 = 0.0, $1248 = 0.0, $1249 = 0.0, $125 = 0.0, $1250 = 0.0;
 var $1251 = 0.0, $1252 = 0.0, $1253 = 0.0, $1254 = 0.0, $1255 = 0.0, $1256 = 0.0, $1257 = 0.0, $1258 = 0.0, $1259 = 0.0, $126 = 0.0, $1260 = 0.0, $1261 = 0.0, $1262 = 0.0, $1263 = 0.0, $1264 = 0.0, $1265 = 0.0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0.0, $1270 = 0.0, $1271 = 0, $1272 = 0.0, $1273 = 0.0, $1274 = 0.0, $1275 = 0.0, $1276 = 0, $1277 = 0.0, $1278 = 0.0, $1279 = 0.0, $128 = 0.0, $1280 = 0.0, $1281 = 0, $1282 = 0.0, $1283 = 0.0, $1284 = 0.0, $1285 = 0.0, $1286 = 0, $1287 = 0.0;
 var $1288 = 0.0, $1289 = 0.0, $129 = 0.0, $1290 = 0.0, $1291 = 0, $1292 = 0.0, $1293 = 0.0, $1294 = 0.0, $1295 = 0.0, $1296 = 0, $1297 = 0.0, $1298 = 0.0, $1299 = 0.0, $13 = 0.0, $130 = 0.0, $1300 = 0.0, $1301 = 0, $1302 = 0.0, $1303 = 0.0, $1304 = 0.0;
 var $1305 = 0.0, $1306 = 0, $1307 = 0.0, $1308 = 0.0, $1309 = 0.0, $131 = 0.0, $1310 = 0.0, $1311 = 0, $1312 = 0.0, $1313 = 0.0, $1314 = 0.0, $1315 = 0.0, $1316 = 0, $1317 = 0, $1318 = 0.0, $1319 = 0, $132 = 0.0, $1320 = 0.0, $1321 = 0.0, $1322 = 0.0;
 var $1323 = 0.0, $1324 = 0, $1325 = 0.0, $1326 = 0.0, $1327 = 0.0, $1328 = 0.0, $1329 = 0, $133 = 0.0, $1330 = 0.0, $1331 = 0.0, $1332 = 0.0, $1333 = 0.0, $1334 = 0, $1335 = 0.0, $1336 = 0.0, $1337 = 0.0, $1338 = 0.0, $1339 = 0, $134 = 0.0, $1340 = 0.0;
 var $1341 = 0.0, $1342 = 0.0, $1343 = 0.0, $1344 = 0, $1345 = 0.0, $1346 = 0.0, $1347 = 0.0, $1348 = 0.0, $1349 = 0, $135 = 0.0, $1350 = 0.0, $1351 = 0.0, $1352 = 0.0, $1353 = 0.0, $1354 = 0, $1355 = 0.0, $1356 = 0.0, $1357 = 0.0, $1358 = 0.0, $1359 = 0;
 var $136 = 0.0, $1360 = 0.0, $1361 = 0.0, $1362 = 0.0, $1363 = 0.0, $1364 = 0, $1365 = 0.0, $1366 = 0.0, $1367 = 0.0, $1368 = 0.0, $1369 = 0, $137 = 0.0, $1370 = 0, $1371 = 0.0, $1372 = 0, $1373 = 0.0, $1374 = 0.0, $1375 = 0.0, $1376 = 0.0, $1377 = 0;
 var $1378 = 0.0, $1379 = 0.0, $138 = 0.0, $1380 = 0.0, $1381 = 0.0, $1382 = 0, $1383 = 0.0, $1384 = 0.0, $1385 = 0.0, $1386 = 0.0, $1387 = 0, $1388 = 0.0, $1389 = 0.0, $139 = 0.0, $1390 = 0.0, $1391 = 0.0, $1392 = 0, $1393 = 0.0, $1394 = 0.0, $1395 = 0.0;
 var $1396 = 0.0, $1397 = 0, $1398 = 0.0, $1399 = 0.0, $14 = 0.0, $140 = 0.0, $1400 = 0.0, $1401 = 0.0, $1402 = 0, $1403 = 0.0, $1404 = 0.0, $1405 = 0.0, $1406 = 0.0, $1407 = 0, $1408 = 0.0, $1409 = 0.0, $141 = 0.0, $1410 = 0.0, $1411 = 0.0, $1412 = 0;
 var $1413 = 0.0, $1414 = 0.0, $1415 = 0.0, $1416 = 0.0, $1417 = 0, $1418 = 0.0, $1419 = 0.0, $142 = 0.0, $1420 = 0.0, $1421 = 0.0, $1422 = 0, $1423 = 0.0, $1424 = 0.0, $1425 = 0.0, $1426 = 0.0, $1427 = 0, $1428 = 0, $1429 = 0.0, $143 = 0.0, $1430 = 0;
 var $1431 = 0.0, $1432 = 0.0, $1433 = 0.0, $1434 = 0.0, $1435 = 0, $1436 = 0.0, $1437 = 0.0, $1438 = 0.0, $1439 = 0.0, $144 = 0.0, $1440 = 0, $1441 = 0.0, $1442 = 0.0, $1443 = 0.0, $1444 = 0.0, $1445 = 0, $1446 = 0.0, $1447 = 0.0, $1448 = 0.0, $1449 = 0.0;
 var $145 = 0.0, $1450 = 0, $1451 = 0.0, $1452 = 0.0, $1453 = 0.0, $1454 = 0.0, $1455 = 0, $1456 = 0.0, $1457 = 0.0, $1458 = 0.0, $1459 = 0.0, $146 = 0.0, $1460 = 0, $1461 = 0.0, $1462 = 0.0, $1463 = 0.0, $1464 = 0.0, $1465 = 0, $1466 = 0.0, $1467 = 0.0;
 var $1468 = 0.0, $1469 = 0.0, $147 = 0.0, $1470 = 0, $1471 = 0.0, $1472 = 0.0, $1473 = 0.0, $1474 = 0.0, $1475 = 0, $1476 = 0.0, $1477 = 0.0, $1478 = 0.0, $1479 = 0.0, $148 = 0.0, $1480 = 0, $1481 = 0.0, $1482 = 0.0, $1483 = 0.0, $1484 = 0.0, $1485 = 0;
 var $1486 = 0, $1487 = 0.0, $1488 = 0, $1489 = 0.0, $149 = 0.0, $1490 = 0.0, $1491 = 0.0, $1492 = 0.0, $1493 = 0, $1494 = 0.0, $1495 = 0.0, $1496 = 0.0, $1497 = 0.0, $1498 = 0, $1499 = 0.0, $15 = 0.0, $150 = 0.0, $1500 = 0.0, $1501 = 0.0, $1502 = 0.0;
 var $1503 = 0, $1504 = 0.0, $1505 = 0.0, $1506 = 0.0, $1507 = 0.0, $1508 = 0, $1509 = 0.0, $151 = 0.0, $1510 = 0.0, $1511 = 0.0, $1512 = 0.0, $1513 = 0, $1514 = 0.0, $1515 = 0.0, $1516 = 0.0, $1517 = 0.0, $1518 = 0, $1519 = 0.0, $152 = 0.0, $1520 = 0.0;
 var $1521 = 0.0, $1522 = 0.0, $1523 = 0, $1524 = 0.0, $1525 = 0.0, $1526 = 0.0, $1527 = 0.0, $1528 = 0, $1529 = 0.0, $153 = 0.0, $1530 = 0.0, $1531 = 0.0, $1532 = 0.0, $1533 = 0, $1534 = 0.0, $1535 = 0.0, $1536 = 0.0, $1537 = 0.0, $1538 = 0, $1539 = 0.0;
 var $154 = 0.0, $1540 = 0.0, $1541 = 0.0, $1542 = 0.0, $1543 = 0, $1544 = 0, $1545 = 0.0, $1546 = 0, $1547 = 0.0, $1548 = 0.0, $1549 = 0.0, $155 = 0.0, $1550 = 0.0, $1551 = 0, $1552 = 0.0, $1553 = 0.0, $1554 = 0.0, $1555 = 0.0, $1556 = 0, $1557 = 0.0;
 var $1558 = 0.0, $1559 = 0.0, $156 = 0.0, $1560 = 0.0, $1561 = 0, $1562 = 0.0, $1563 = 0.0, $1564 = 0.0, $1565 = 0.0, $1566 = 0, $1567 = 0.0, $1568 = 0.0, $1569 = 0.0, $157 = 0.0, $1570 = 0.0, $1571 = 0, $1572 = 0.0, $1573 = 0.0, $1574 = 0.0, $1575 = 0.0;
 var $1576 = 0, $1577 = 0.0, $1578 = 0.0, $1579 = 0.0, $158 = 0, $1580 = 0.0, $1581 = 0, $1582 = 0.0, $1583 = 0.0, $1584 = 0.0, $1585 = 0.0, $1586 = 0, $1587 = 0.0, $1588 = 0.0, $1589 = 0.0, $159 = 0.0, $1590 = 0.0, $1591 = 0, $1592 = 0.0, $1593 = 0.0;
 var $1594 = 0.0, $1595 = 0.0, $1596 = 0, $1597 = 0, $1598 = 0.0, $1599 = 0, $16 = 0.0, $160 = 0.0, $1600 = 0.0, $1601 = 0.0, $1602 = 0.0, $1603 = 0.0, $1604 = 0, $1605 = 0.0, $1606 = 0.0, $1607 = 0.0, $1608 = 0.0, $1609 = 0, $161 = 0.0, $1610 = 0.0;
 var $1611 = 0.0, $1612 = 0.0, $1613 = 0.0, $1614 = 0, $1615 = 0.0, $1616 = 0.0, $1617 = 0.0, $1618 = 0.0, $1619 = 0, $162 = 0, $1620 = 0.0, $1621 = 0.0, $1622 = 0.0, $1623 = 0.0, $1624 = 0, $1625 = 0.0, $1626 = 0.0, $1627 = 0.0, $1628 = 0.0, $1629 = 0;
 var $163 = 0.0, $1630 = 0, $1631 = 0.0, $1632 = 0, $1633 = 0.0, $1634 = 0.0, $1635 = 0.0, $1636 = 0.0, $1637 = 0, $1638 = 0.0, $1639 = 0.0, $164 = 0.0, $1640 = 0.0, $1641 = 0.0, $1642 = 0, $1643 = 0.0, $1644 = 0.0, $1645 = 0.0, $1646 = 0.0, $1647 = 0;
 var $1648 = 0.0, $1649 = 0.0, $165 = 0.0, $1650 = 0.0, $1651 = 0.0, $1652 = 0, $1653 = 0.0, $1654 = 0.0, $1655 = 0.0, $1656 = 0.0, $1657 = 0, $1658 = 0.0, $1659 = 0.0, $166 = 0.0, $1660 = 0.0, $1661 = 0.0, $1662 = 0, $1663 = 0.0, $1664 = 0.0, $1665 = 0.0;
 var $1666 = 0.0, $1667 = 0, $1668 = 0.0, $1669 = 0.0, $167 = 0.0, $1670 = 0.0, $1671 = 0.0, $1672 = 0, $1673 = 0.0, $1674 = 0.0, $1675 = 0.0, $1676 = 0.0, $1677 = 0, $1678 = 0.0, $1679 = 0.0, $168 = 0.0, $1680 = 0.0, $1681 = 0.0, $1682 = 0, $1683 = 0.0;
 var $1684 = 0.0, $1685 = 0.0, $1686 = 0.0, $1687 = 0, $1688 = 0, $1689 = 0.0, $169 = 0, $1690 = 0.0, $1691 = 0.0, $1692 = 0, $1693 = 0, $1694 = 0.0, $1695 = 0.0, $1696 = 0, $1697 = 0, $1698 = 0.0, $1699 = 0.0, $17 = 0.0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0.0, $1706 = 0, $1707 = 0.0, $1708 = 0.0, $1709 = 0, $171 = 0, $1710 = 0.0, $1711 = 0, $1712 = 0.0, $1713 = 0.0, $1714 = 0.0, $1715 = 0, $1716 = 0.0, $1717 = 0, $1718 = 0.0, $1719 = 0.0;
 var $172 = 0, $1720 = 0.0, $1721 = 0.0, $1722 = 0, $1723 = 0.0, $1724 = 0, $1725 = 0.0, $1726 = 0.0, $1727 = 0.0, $1728 = 0, $1729 = 0.0, $173 = 0.0, $1730 = 0, $1731 = 0.0, $1732 = 0.0, $1733 = 0, $1734 = 0.0, $1735 = 0, $1736 = 0.0, $1737 = 0.0;
 var $1738 = 0.0, $1739 = 0.0, $174 = 0, $1740 = 0.0, $1741 = 0, $1742 = 0.0, $1743 = 0, $1744 = 0.0, $1745 = 0.0, $1746 = 0, $1747 = 0.0, $1748 = 0, $1749 = 0.0, $175 = 0, $1750 = 0.0, $1751 = 0.0, $1752 = 0.0, $1753 = 0.0, $1754 = 0.0, $1755 = 0.0;
 var $1756 = 0.0, $1757 = 0.0, $1758 = 0.0, $1759 = 0.0, $176 = 0.0, $1760 = 0.0, $1761 = 0, $1762 = 0.0, $1763 = 0.0, $1764 = 0.0, $1765 = 0.0, $1766 = 0.0, $1767 = 0.0, $1768 = 0.0, $1769 = 0, $177 = 0.0, $1770 = 0.0, $1771 = 0.0, $1772 = 0.0, $1773 = 0.0;
 var $1774 = 0, $1775 = 0.0, $1776 = 0, $1777 = 0.0, $1778 = 0.0, $1779 = 0.0, $178 = 0, $1780 = 0.0, $1781 = 0.0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0.0, $1788 = 0.0, $1789 = 0.0, $179 = 0, $1790 = 0, $1791 = 0.0;
 var $1792 = 0, $1793 = 0.0, $1794 = 0.0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0.0, $180 = 0, $1800 = 0.0, $1801 = 0.0, $1802 = 0.0, $1803 = 0.0, $1804 = 0.0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0.0;
 var $181 = 0, $1810 = 0.0, $1811 = 0.0, $1812 = 0.0, $1813 = 0.0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0.0, $1818 = 0, $1819 = 0, $182 = 0.0, $1820 = 0.0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0.0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0.0, $183 = 0, $1830 = 0.0, $1831 = 0, $1832 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0;
 var $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0;
 var $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0;
 var $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0, $3 = 0.0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0;
 var $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0;
 var $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0;
 var $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0;
 var $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0;
 var $378 = 0.0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0;
 var $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0, $4 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0;
 var $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0;
 var $431 = 0.0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0.0, $449 = 0.0;
 var $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0;
 var $468 = 0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0;
 var $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0;
 var $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0;
 var $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0.0;
 var $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0;
 var $558 = 0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0, $574 = 0.0, $575 = 0.0;
 var $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0.0, $591 = 0, $592 = 0.0, $593 = 0.0;
 var $594 = 0.0, $595 = 0.0, $596 = 0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0.0, $60 = 0.0, $600 = 0.0, $601 = 0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0.0, $610 = 0.0;
 var $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0.0, $621 = 0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0;
 var $63 = 0.0, $630 = 0.0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0.0, $640 = 0.0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0, $65 = 0.0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0.0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0, $665 = 0.0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0.0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0;
 var $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0, $7 = 0.0, $70 = 0.0, $700 = 0.0;
 var $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0, $71 = 0.0, $710 = 0, $711 = 0.0, $712 = 0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0, $718 = 0.0, $719 = 0.0;
 var $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0.0, $732 = 0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0;
 var $738 = 0.0, $739 = 0.0, $74 = 0.0, $740 = 0.0, $741 = 0.0, $742 = 0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0, $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0.0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0.0;
 var $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0.0, $76 = 0.0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0.0, $77 = 0.0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0;
 var $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0.0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0.0, $790 = 0.0, $791 = 0.0;
 var $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0.0, $80 = 0.0, $800 = 0, $801 = 0.0, $802 = 0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0, $808 = 0.0, $809 = 0.0;
 var $81 = 0.0, $810 = 0.0, $811 = 0.0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0, $818 = 0.0, $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0.0, $822 = 0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0;
 var $828 = 0.0, $829 = 0.0, $83 = 0.0, $830 = 0.0, $831 = 0.0, $832 = 0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0.0, $839 = 0.0, $84 = 0.0, $840 = 0.0, $841 = 0.0, $842 = 0, $843 = 0.0, $844 = 0.0, $845 = 0.0;
 var $846 = 0.0, $847 = 0, $848 = 0, $849 = 0.0, $85 = 0.0, $850 = 0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0.0, $855 = 0, $856 = 0.0, $857 = 0.0, $858 = 0.0, $859 = 0.0, $86 = 0.0, $860 = 0, $861 = 0.0, $862 = 0.0, $863 = 0.0;
 var $864 = 0.0, $865 = 0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0.0, $87 = 0.0, $870 = 0, $871 = 0.0, $872 = 0.0, $873 = 0.0, $874 = 0.0, $875 = 0, $876 = 0.0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0.0, $880 = 0, $881 = 0.0;
 var $882 = 0.0, $883 = 0.0, $884 = 0.0, $885 = 0, $886 = 0.0, $887 = 0.0, $888 = 0.0, $889 = 0.0, $89 = 0.0, $890 = 0, $891 = 0.0, $892 = 0.0, $893 = 0.0, $894 = 0.0, $895 = 0, $896 = 0, $897 = 0.0, $898 = 0, $899 = 0.0, $9 = 0.0;
 var $90 = 0.0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0, $904 = 0.0, $905 = 0.0, $906 = 0.0, $907 = 0.0, $908 = 0, $909 = 0.0, $91 = 0.0, $910 = 0.0, $911 = 0.0, $912 = 0.0, $913 = 0, $914 = 0.0, $915 = 0.0, $916 = 0.0, $917 = 0.0;
 var $918 = 0, $919 = 0.0, $92 = 0.0, $920 = 0.0, $921 = 0.0, $922 = 0.0, $923 = 0, $924 = 0.0, $925 = 0.0, $926 = 0.0, $927 = 0.0, $928 = 0, $929 = 0.0, $93 = 0.0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0, $934 = 0.0, $935 = 0.0;
 var $936 = 0.0, $937 = 0.0, $938 = 0, $939 = 0.0, $94 = 0.0, $940 = 0.0, $941 = 0.0, $942 = 0.0, $943 = 0, $944 = 0.0, $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0, $949 = 0.0, $95 = 0.0, $950 = 0.0, $951 = 0.0, $952 = 0.0, $953 = 0;
 var $954 = 0.0, $955 = 0.0, $956 = 0.0, $957 = 0.0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0.0, $961 = 0, $962 = 0.0, $963 = 0.0, $964 = 0.0, $965 = 0.0, $966 = 0, $967 = 0.0, $968 = 0.0, $969 = 0.0, $97 = 0.0, $970 = 0.0, $971 = 0;
 var $972 = 0.0, $973 = 0.0, $974 = 0.0, $975 = 0.0, $976 = 0, $977 = 0.0, $978 = 0.0, $979 = 0.0, $98 = 0.0, $980 = 0.0, $981 = 0, $982 = 0.0, $983 = 0.0, $984 = 0.0, $985 = 0.0, $986 = 0, $987 = 0.0, $988 = 0.0, $989 = 0.0, $99 = 0;
 var $990 = 0.0, $991 = 0, $992 = 0.0, $993 = 0.0, $994 = 0.0, $995 = 0.0, $996 = 0, $997 = 0.0, $998 = 0.0, $999 = 0.0, $or$cond = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4864|0);
 $vararg_buffer = sp + 4848|0;
 $5 = sp + 3032|0;
 $26 = sp + 2688|0;
 $27 = sp + 2624|0;
 $28 = sp + 2512|0;
 $29 = sp + 2400|0;
 $30 = sp + 2288|0;
 $31 = sp + 2176|0;
 $32 = sp + 2064|0;
 $33 = sp + 1952|0;
 $34 = sp + 1872|0;
 $35 = sp + 1760|0;
 $36 = sp + 1648|0;
 $37 = sp + 1536|0;
 $38 = sp + 1424|0;
 $39 = sp + 1312|0;
 $40 = sp + 1200|0;
 $41 = sp + 1088|0;
 $42 = sp + 992|0;
 $43 = sp + 896|0;
 $44 = sp + 784|0;
 $45 = sp + 688|0;
 $46 = sp + 576|0;
 $47 = sp + 464|0;
 $48 = sp + 352|0;
 $49 = sp + 240|0;
 $50 = sp + 160|0;
 $51 = sp + 112|0;
 $52 = sp + 64|0;
 $53 = sp;
 $3 = $1;
 $4 = $2;
 $73 = $3;
 $6 = $73;
 $74 = $4;
 $7 = $74;
 $8 = 0.02;
 $9 = 0.050000000000000003;
 $10 = 0.12;
 $11 = 0.050000000000000003;
 $12 = 0.22;
 $13 = 0.050000000000000003;
 $14 = 0.10000000000000001;
 $15 = 1.0;
 $16 = 0.20000000000000001;
 $17 = 1.0;
 $18 = 0.29999999999999999;
 $19 = 1.0;
 $75 = $14;
 $76 = $8;
 $77 = $75 - $76;
 $78 = 2.0 / $77;
 $20 = $78;
 $79 = $16;
 $80 = $10;
 $81 = $79 - $80;
 $82 = 2.0 / $81;
 $21 = $82;
 $83 = $18;
 $84 = $12;
 $85 = $83 - $84;
 $86 = 2.0 / $85;
 $22 = $86;
 $87 = $15;
 $88 = $9;
 $89 = $87 - $88;
 $90 = 2.0 / $89;
 $23 = $90;
 $91 = $17;
 $92 = $11;
 $93 = $91 - $92;
 $94 = 2.0 / $93;
 $24 = $94;
 $95 = $19;
 $96 = $13;
 $97 = $95 - $96;
 $98 = 2.0 / $97;
 $25 = $98;
 dest=$26; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $99 = ((($26)) + 8|0);
 HEAPF64[$99>>3] = 1.0;
 $100 = ((($26)) + 16|0);
 HEAPF64[$100>>3] = 0.5;
 $101 = ((($26)) + 24|0);
 HEAPF64[$101>>3] = 0.33333332999999998;
 $102 = ((($26)) + 32|0);
 HEAPF64[$102>>3] = 0.25;
 $103 = ((($26)) + 40|0);
 HEAPF64[$103>>3] = 0.20000000000000001;
 dest=$27; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $104 = ((($27)) + 16|0);
 HEAPF64[$104>>3] = 0.16666666999999999;
 $105 = ((($27)) + 24|0);
 HEAPF64[$105>>3] = 0.041666666999999998;
 $106 = ((($27)) + 32|0);
 HEAPF64[$106>>3] = 0.0083333333000000005;
 $107 = ((($27)) + 40|0);
 HEAPF64[$107>>3] = 0.013888889;
 $108 = ((($27)) + 48|0);
 HEAPF64[$108>>3] = 0.0069444444000000003;
 $109 = ((($27)) + 56|0);
 HEAPF64[$109>>3] = 7.7160493000000003E-4;
 dest=$28; src=9072; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$29; src=9184; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$30; src=9296; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$31; src=9408; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$32; src=9520; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$33; src=9632; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$34; src=9744; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$35; src=9824; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$36; src=9936; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$37; src=10048; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$38; src=10160; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$39; src=10272; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$40; src=10384; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$41; src=10496; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$42; src=10608; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$43; src=10704; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$44; src=10800; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$45; src=10912; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$46; src=11008; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$47; src=11120; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$48; src=11232; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$49; src=11344; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$50; src=11456; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $110 = ((($5)) + 1792|0);
 HEAP32[$110>>2] = 0;
 $111 = $6;
 $112 = $111 < 0.0099999997764825821;
 $113 = $6;
 $114 = $113 > 12.0;
 $or$cond = $112 | $114;
 do {
  if ($or$cond) {
   $115 = HEAP32[16931]|0;
   $116 = $6;
   HEAPF64[$vararg_buffer>>3] = $116;
   (_fprintf($115,75158,$vararg_buffer)|0);
   $117 = $6;
   $118 = $117 < 0.01;
   if ($118) {
    $6 = 0.01;
    break;
   }
   $119 = $6;
   $120 = $119 > 12.0;
   if ($120) {
    $6 = 12.0;
   }
  }
 } while(0);
 $121 = $6;
 $122 = $121 >= 0.28999999165534973;
 do {
  if ($122) {
   $123 = ((($5)) + 1792|0);
   HEAP32[$123>>2] = 1;
   $124 = ((($5)) + 1796|0);
   HEAP32[$124>>2] = 100;
   $125 = $6;
   $126 = (+Math_sqrt((+$125)));
   $127 = 1.0 / $126;
   $69 = $127;
   $128 = $7;
   $129 = -0.032226999999999999 * $128;
   $130 = $129 - 0.074274999999999994;
   $131 = $6;
   $132 = $130 * $131;
   $133 = $7;
   $134 = 0.24532999999999999 * $133;
   $135 = $134 + 0.070152000000000006;
   $136 = $69;
   $137 = $135 * $136;
   $138 = $132 + $137;
   $139 = $7;
   $140 = -0.55610000000000004 * $139;
   $141 = $140 - 3.1579000000000002;
   $142 = $138 + $141;
   HEAPF64[$5>>3] = $142;
   $143 = $7;
   $144 = -0.013483 * $143;
   $145 = $144 - 0.048800999999999997;
   $146 = $6;
   $147 = $145 * $146;
   $148 = $7;
   $149 = -1.6920999999999999 * $148;
   $150 = $149 + 8.3656000000000006;
   $151 = $69;
   $152 = $150 * $151;
   $153 = $147 + $152;
   $154 = $7;
   $155 = -0.73275000000000001 * $154;
   $156 = $155 - 3.5226000000000002;
   $157 = $153 + $156;
   $158 = ((($5)) + 64|0);
   HEAPF64[$158>>3] = $157;
   $159 = $69;
   $160 = $69;
   $161 = $159 * $160;
   $162 = ((($51)) + 8|0);
   HEAPF64[$162>>3] = $161;
   $163 = $6;
   $164 = $7;
   $165 = 0.5 * $164;
   $166 = 1.0 - $165;
   $167 = $163 / $166;
   $168 = (+Math_sqrt((+$167)));
   $169 = ((($52)) + 8|0);
   HEAPF64[$169>>3] = $168;
   $54 = 1;
   while(1) {
    $170 = $54;
    $171 = ($170|0)<=(4);
    if (!($171)) {
     break;
    }
    $172 = ((($51)) + 8|0);
    $173 = +HEAPF64[$172>>3];
    $174 = $54;
    $175 = (($51) + ($174<<3)|0);
    $176 = +HEAPF64[$175>>3];
    $177 = $173 * $176;
    $178 = $54;
    $179 = (($178) + 1)|0;
    $180 = (($51) + ($179<<3)|0);
    HEAPF64[$180>>3] = $177;
    $181 = ((($52)) + 8|0);
    $182 = +HEAPF64[$181>>3];
    $183 = $54;
    $184 = (($52) + ($183<<3)|0);
    $185 = +HEAPF64[$184>>3];
    $186 = $182 * $185;
    $187 = $54;
    $188 = (($187) + 1)|0;
    $189 = (($52) + ($188<<3)|0);
    HEAPF64[$189>>3] = $186;
    $190 = $54;
    $191 = (($26) + ($190<<3)|0);
    $192 = +HEAPF64[$191>>3];
    $193 = $7;
    $194 = $54;
    $195 = (($194) + 1)|0;
    $196 = (($26) + ($195<<3)|0);
    $197 = +HEAPF64[$196>>3];
    $198 = $193 * $197;
    $199 = $192 - $198;
    $200 = $54;
    $201 = (($51) + ($200<<3)|0);
    $202 = +HEAPF64[$201>>3];
    $203 = $199 * $202;
    $204 = $54;
    $205 = (($204) + 1)|0;
    $206 = (($53) + ($205<<3)|0);
    HEAPF64[$206>>3] = $203;
    $207 = $54;
    $208 = (($207) + 1)|0;
    $54 = $208;
   }
   $209 = $6;
   $210 = (+Math_log((+$209)));
   $211 = $7;
   $212 = $210 + $211;
   $213 = $212 + 0.42278433999999998;
   $214 = ((($5)) + 112|0);
   HEAPF64[$214>>3] = $213;
   $215 = ((($52)) + 8|0);
   $216 = +HEAPF64[$215>>3];
   $217 = ((($5)) + 112|0);
   $218 = ((($217)) + 8|0);
   HEAPF64[$218>>3] = $216;
   $219 = ((($53)) + 24|0);
   $220 = +HEAPF64[$219>>3];
   $221 = ((($52)) + 24|0);
   $222 = +HEAPF64[$221>>3];
   $223 = $220 * $222;
   $224 = ((($5)) + 112|0);
   $225 = ((($224)) + 16|0);
   HEAPF64[$225>>3] = $223;
   $226 = ((($53)) + 16|0);
   $227 = +HEAPF64[$226>>3];
   $228 = 3.0 * $227;
   $229 = ((($53)) + 16|0);
   $230 = +HEAPF64[$229>>3];
   $231 = $228 * $230;
   $232 = ((($53)) + 32|0);
   $233 = +HEAPF64[$232>>3];
   $234 = $231 + $233;
   $235 = ((($52)) + 32|0);
   $236 = +HEAPF64[$235>>3];
   $237 = $234 * $236;
   $238 = $237 - 3.0;
   $239 = ((($5)) + 112|0);
   $240 = ((($239)) + 24|0);
   HEAPF64[$240>>3] = $238;
   $241 = ((($53)) + 16|0);
   $242 = +HEAPF64[$241>>3];
   $243 = 10.0 * $242;
   $244 = ((($53)) + 24|0);
   $245 = +HEAPF64[$244>>3];
   $246 = $243 * $245;
   $247 = ((($53)) + 40|0);
   $248 = +HEAPF64[$247>>3];
   $249 = $246 + $248;
   $250 = ((($52)) + 40|0);
   $251 = +HEAPF64[$250>>3];
   $252 = $249 * $251;
   $253 = ((($5)) + 112|0);
   $254 = ((($253)) + 16|0);
   $255 = +HEAPF64[$254>>3];
   $256 = 10.0 * $255;
   $257 = $252 - $256;
   $258 = ((($5)) + 112|0);
   $259 = ((($258)) + 32|0);
   HEAPF64[$259>>3] = $257;
   $260 = ((($5)) + 112|0);
   $261 = ((($260)) + 16|0);
   $262 = +HEAPF64[$261>>3];
   $263 = ((($5)) + 112|0);
   $264 = ((($263)) + 16|0);
   $265 = +HEAPF64[$264>>3];
   $266 = $262 * $265;
   $267 = ((($5)) + 112|0);
   $268 = ((($267)) + 40|0);
   HEAPF64[$268>>3] = $266;
   $269 = ((($5)) + 112|0);
   $270 = ((($269)) + 16|0);
   $271 = +HEAPF64[$270>>3];
   $272 = ((($5)) + 112|0);
   $273 = ((($272)) + 24|0);
   $274 = +HEAPF64[$273>>3];
   $275 = $271 * $274;
   $276 = ((($5)) + 112|0);
   $277 = ((($276)) + 48|0);
   HEAPF64[$277>>3] = $275;
   $278 = ((($5)) + 112|0);
   $279 = ((($278)) + 16|0);
   $280 = +HEAPF64[$279>>3];
   $281 = ((($5)) + 112|0);
   $282 = ((($281)) + 40|0);
   $283 = +HEAPF64[$282>>3];
   $284 = $280 * $283;
   $285 = ((($5)) + 112|0);
   $286 = ((($285)) + 56|0);
   HEAPF64[$286>>3] = $284;
   $54 = 2;
   while(1) {
    $287 = $54;
    $288 = ($287|0)<=(7);
    if (!($288)) {
     break;
    }
    $289 = $54;
    $290 = (($27) + ($289<<3)|0);
    $291 = +HEAPF64[$290>>3];
    $292 = ((($5)) + 112|0);
    $293 = $54;
    $294 = (($292) + ($293<<3)|0);
    $295 = +HEAPF64[$294>>3];
    $296 = $295 * $291;
    HEAPF64[$294>>3] = $296;
    $297 = $54;
    $298 = (($297) + 1)|0;
    $54 = $298;
   }
   $299 = ((($5)) + 112|0);
   $300 = ((($299)) + 8|0);
   $301 = +HEAPF64[$300>>3];
   $302 = 0.39894227999999998 * $301;
   $303 = ((($5)) + 112|0);
   $304 = ((($303)) + 64|0);
   HEAPF64[$304>>3] = $302;
  } else {
   $305 = $6;
   $306 = $305 >= 0.2199999988079071;
   if ($306) {
    $307 = ((($5)) + 1792|0);
    HEAP32[$307>>2] = 2;
    $308 = ((($5)) + 1796|0);
    HEAP32[$308>>2] = 150;
    $309 = $6;
    $310 = $18;
    $311 = $309 - $310;
    $312 = $22;
    $313 = $311 * $312;
    $314 = 1.0 + $313;
    $55 = $314;
    $315 = $7;
    $316 = (+Math_sqrt((+$315)));
    $317 = $19;
    $318 = $316 - $317;
    $319 = $25;
    $320 = $318 * $319;
    $321 = 1.0 + $320;
    $56 = $321;
    $322 = $55;
    $323 = 2.0 * $322;
    $57 = $323;
    $324 = $56;
    $325 = 2.0 * $324;
    $58 = $325;
    $326 = $57;
    $327 = $55;
    $328 = $326 * $327;
    $329 = $328 - 1.0;
    $59 = $329;
    $330 = $57;
    $331 = $59;
    $332 = $330 * $331;
    $333 = $55;
    $334 = $332 - $333;
    $60 = $334;
    $335 = $58;
    $336 = $56;
    $337 = $335 * $336;
    $338 = $337 - 1.0;
    $61 = $338;
    $339 = $58;
    $340 = $61;
    $341 = $339 * $340;
    $342 = $56;
    $343 = $341 - $342;
    $62 = $343;
    $344 = $55;
    $345 = $56;
    $346 = $344 * $345;
    $63 = $346;
    $347 = $59;
    $348 = $56;
    $349 = $347 * $348;
    $64 = $349;
    $350 = $60;
    $351 = $56;
    $352 = $350 * $351;
    $65 = $352;
    $353 = $61;
    $354 = $55;
    $355 = $353 * $354;
    $66 = $355;
    $356 = $62;
    $357 = $55;
    $358 = $356 * $357;
    $67 = $358;
    $359 = $59;
    $360 = $61;
    $361 = $359 * $360;
    $68 = $361;
    $362 = ((($44)) + 8|0);
    $363 = +HEAPF64[$362>>3];
    $364 = ((($44)) + 16|0);
    $365 = +HEAPF64[$364>>3];
    $366 = $55;
    $367 = $365 * $366;
    $368 = $363 + $367;
    $369 = ((($44)) + 32|0);
    $370 = +HEAPF64[$369>>3];
    $371 = $60;
    $372 = $370 * $371;
    $373 = $368 + $372;
    $374 = ((($44)) + 40|0);
    $375 = +HEAPF64[$374>>3];
    $376 = $56;
    $377 = $375 * $376;
    $378 = $373 + $377;
    $379 = ((($44)) + 48|0);
    $380 = +HEAPF64[$379>>3];
    $381 = $61;
    $382 = $380 * $381;
    $383 = $378 + $382;
    $384 = ((($44)) + 56|0);
    $385 = +HEAPF64[$384>>3];
    $386 = $62;
    $387 = $385 * $386;
    $388 = $383 + $387;
    $389 = ((($44)) + 64|0);
    $390 = +HEAPF64[$389>>3];
    $391 = $63;
    $392 = $390 * $391;
    $393 = $388 + $392;
    $394 = ((($44)) + 72|0);
    $395 = +HEAPF64[$394>>3];
    $396 = $64;
    $397 = $395 * $396;
    $398 = $393 + $397;
    $399 = ((($44)) + 80|0);
    $400 = +HEAPF64[$399>>3];
    $401 = $65;
    $402 = $400 * $401;
    $403 = $398 + $402;
    $404 = ((($44)) + 88|0);
    $405 = +HEAPF64[$404>>3];
    $406 = $66;
    $407 = $405 * $406;
    $408 = $403 + $407;
    $409 = ((($44)) + 96|0);
    $410 = +HEAPF64[$409>>3];
    $411 = $67;
    $412 = $410 * $411;
    $413 = $408 + $412;
    $414 = ((($44)) + 104|0);
    $415 = +HEAPF64[$414>>3];
    $416 = $68;
    $417 = $415 * $416;
    $418 = $413 + $417;
    $419 = ((($5)) + 8|0);
    HEAPF64[$419>>3] = $418;
    $420 = ((($45)) + 8|0);
    $421 = +HEAPF64[$420>>3];
    $422 = ((($45)) + 16|0);
    $423 = +HEAPF64[$422>>3];
    $424 = $55;
    $425 = $423 * $424;
    $426 = $421 + $425;
    $427 = ((($45)) + 24|0);
    $428 = +HEAPF64[$427>>3];
    $429 = $59;
    $430 = $428 * $429;
    $431 = $426 + $430;
    $432 = ((($45)) + 32|0);
    $433 = +HEAPF64[$432>>3];
    $434 = $60;
    $435 = $433 * $434;
    $436 = $431 + $435;
    $437 = ((($45)) + 40|0);
    $438 = +HEAPF64[$437>>3];
    $439 = $56;
    $440 = $438 * $439;
    $441 = $436 + $440;
    $442 = ((($45)) + 48|0);
    $443 = +HEAPF64[$442>>3];
    $444 = $61;
    $445 = $443 * $444;
    $446 = $441 + $445;
    $447 = ((($45)) + 64|0);
    $448 = +HEAPF64[$447>>3];
    $449 = $63;
    $450 = $448 * $449;
    $451 = $446 + $450;
    $452 = ((($45)) + 72|0);
    $453 = +HEAPF64[$452>>3];
    $454 = $64;
    $455 = $453 * $454;
    $456 = $451 + $455;
    $457 = ((($45)) + 80|0);
    $458 = +HEAPF64[$457>>3];
    $459 = $65;
    $460 = $458 * $459;
    $461 = $456 + $460;
    $462 = ((($45)) + 88|0);
    $463 = +HEAPF64[$462>>3];
    $464 = $66;
    $465 = $463 * $464;
    $466 = $461 + $465;
    $467 = ((($5)) + 16|0);
    HEAPF64[$467>>3] = $466;
    $468 = ((($46)) + 8|0);
    $469 = +HEAPF64[$468>>3];
    $470 = ((($46)) + 24|0);
    $471 = +HEAPF64[$470>>3];
    $472 = $59;
    $473 = $471 * $472;
    $474 = $469 + $473;
    $475 = ((($46)) + 32|0);
    $476 = +HEAPF64[$475>>3];
    $477 = $60;
    $478 = $476 * $477;
    $479 = $474 + $478;
    $480 = ((($46)) + 40|0);
    $481 = +HEAPF64[$480>>3];
    $482 = $56;
    $483 = $481 * $482;
    $484 = $479 + $483;
    $485 = ((($46)) + 48|0);
    $486 = +HEAPF64[$485>>3];
    $487 = $61;
    $488 = $486 * $487;
    $489 = $484 + $488;
    $490 = ((($46)) + 56|0);
    $491 = +HEAPF64[$490>>3];
    $492 = $62;
    $493 = $491 * $492;
    $494 = $489 + $493;
    $495 = ((($46)) + 64|0);
    $496 = +HEAPF64[$495>>3];
    $497 = $63;
    $498 = $496 * $497;
    $499 = $494 + $498;
    $500 = ((($46)) + 72|0);
    $501 = +HEAPF64[$500>>3];
    $502 = $64;
    $503 = $501 * $502;
    $504 = $499 + $503;
    $505 = ((($46)) + 80|0);
    $506 = +HEAPF64[$505>>3];
    $507 = $65;
    $508 = $506 * $507;
    $509 = $504 + $508;
    $510 = ((($46)) + 88|0);
    $511 = +HEAPF64[$510>>3];
    $512 = $66;
    $513 = $511 * $512;
    $514 = $509 + $513;
    $515 = ((($46)) + 96|0);
    $516 = +HEAPF64[$515>>3];
    $517 = $67;
    $518 = $516 * $517;
    $519 = $514 + $518;
    $520 = ((($46)) + 104|0);
    $521 = +HEAPF64[$520>>3];
    $522 = $68;
    $523 = $521 * $522;
    $524 = $519 + $523;
    $525 = ((($5)) + 24|0);
    HEAPF64[$525>>3] = $524;
    $526 = ((($47)) + 8|0);
    $527 = +HEAPF64[$526>>3];
    $528 = ((($47)) + 16|0);
    $529 = +HEAPF64[$528>>3];
    $530 = $55;
    $531 = $529 * $530;
    $532 = $527 + $531;
    $533 = ((($47)) + 24|0);
    $534 = +HEAPF64[$533>>3];
    $535 = $59;
    $536 = $534 * $535;
    $537 = $532 + $536;
    $538 = ((($47)) + 32|0);
    $539 = +HEAPF64[$538>>3];
    $540 = $60;
    $541 = $539 * $540;
    $542 = $537 + $541;
    $543 = ((($47)) + 40|0);
    $544 = +HEAPF64[$543>>3];
    $545 = $56;
    $546 = $544 * $545;
    $547 = $542 + $546;
    $548 = ((($47)) + 48|0);
    $549 = +HEAPF64[$548>>3];
    $550 = $61;
    $551 = $549 * $550;
    $552 = $547 + $551;
    $553 = ((($47)) + 56|0);
    $554 = +HEAPF64[$553>>3];
    $555 = $62;
    $556 = $554 * $555;
    $557 = $552 + $556;
    $558 = ((($47)) + 64|0);
    $559 = +HEAPF64[$558>>3];
    $560 = $63;
    $561 = $559 * $560;
    $562 = $557 + $561;
    $563 = ((($47)) + 72|0);
    $564 = +HEAPF64[$563>>3];
    $565 = $64;
    $566 = $564 * $565;
    $567 = $562 + $566;
    $568 = ((($47)) + 80|0);
    $569 = +HEAPF64[$568>>3];
    $570 = $65;
    $571 = $569 * $570;
    $572 = $567 + $571;
    $573 = ((($47)) + 88|0);
    $574 = +HEAPF64[$573>>3];
    $575 = $66;
    $576 = $574 * $575;
    $577 = $572 + $576;
    $578 = ((($47)) + 96|0);
    $579 = +HEAPF64[$578>>3];
    $580 = $67;
    $581 = $579 * $580;
    $582 = $577 + $581;
    $583 = ((($47)) + 104|0);
    $584 = +HEAPF64[$583>>3];
    $585 = $68;
    $586 = $584 * $585;
    $587 = $582 + $586;
    $588 = ((($5)) + 32|0);
    HEAPF64[$588>>3] = $587;
    $589 = ((($48)) + 8|0);
    $590 = +HEAPF64[$589>>3];
    $591 = ((($48)) + 16|0);
    $592 = +HEAPF64[$591>>3];
    $593 = $55;
    $594 = $592 * $593;
    $595 = $590 + $594;
    $596 = ((($48)) + 32|0);
    $597 = +HEAPF64[$596>>3];
    $598 = $60;
    $599 = $597 * $598;
    $600 = $595 + $599;
    $601 = ((($48)) + 40|0);
    $602 = +HEAPF64[$601>>3];
    $603 = $56;
    $604 = $602 * $603;
    $605 = $600 + $604;
    $606 = ((($48)) + 48|0);
    $607 = +HEAPF64[$606>>3];
    $608 = $61;
    $609 = $607 * $608;
    $610 = $605 + $609;
    $611 = ((($48)) + 56|0);
    $612 = +HEAPF64[$611>>3];
    $613 = $62;
    $614 = $612 * $613;
    $615 = $610 + $614;
    $616 = ((($48)) + 64|0);
    $617 = +HEAPF64[$616>>3];
    $618 = $63;
    $619 = $617 * $618;
    $620 = $615 + $619;
    $621 = ((($48)) + 72|0);
    $622 = +HEAPF64[$621>>3];
    $623 = $64;
    $624 = $622 * $623;
    $625 = $620 + $624;
    $626 = ((($48)) + 80|0);
    $627 = +HEAPF64[$626>>3];
    $628 = $65;
    $629 = $627 * $628;
    $630 = $625 + $629;
    $631 = ((($48)) + 88|0);
    $632 = +HEAPF64[$631>>3];
    $633 = $66;
    $634 = $632 * $633;
    $635 = $630 + $634;
    $636 = ((($48)) + 96|0);
    $637 = +HEAPF64[$636>>3];
    $638 = $67;
    $639 = $637 * $638;
    $640 = $635 + $639;
    $641 = ((($48)) + 104|0);
    $642 = +HEAPF64[$641>>3];
    $643 = $68;
    $644 = $642 * $643;
    $645 = $640 + $644;
    $646 = ((($5)) + 40|0);
    HEAPF64[$646>>3] = $645;
    $647 = ((($49)) + 8|0);
    $648 = +HEAPF64[$647>>3];
    $649 = ((($49)) + 16|0);
    $650 = +HEAPF64[$649>>3];
    $651 = $55;
    $652 = $650 * $651;
    $653 = $648 + $652;
    $654 = ((($49)) + 24|0);
    $655 = +HEAPF64[$654>>3];
    $656 = $59;
    $657 = $655 * $656;
    $658 = $653 + $657;
    $659 = ((($49)) + 32|0);
    $660 = +HEAPF64[$659>>3];
    $661 = $60;
    $662 = $660 * $661;
    $663 = $658 + $662;
    $664 = ((($49)) + 40|0);
    $665 = +HEAPF64[$664>>3];
    $666 = $56;
    $667 = $665 * $666;
    $668 = $663 + $667;
    $669 = ((($49)) + 48|0);
    $670 = +HEAPF64[$669>>3];
    $671 = $61;
    $672 = $670 * $671;
    $673 = $668 + $672;
    $674 = ((($49)) + 56|0);
    $675 = +HEAPF64[$674>>3];
    $676 = $62;
    $677 = $675 * $676;
    $678 = $673 + $677;
    $679 = ((($49)) + 64|0);
    $680 = +HEAPF64[$679>>3];
    $681 = $63;
    $682 = $680 * $681;
    $683 = $678 + $682;
    $684 = ((($49)) + 72|0);
    $685 = +HEAPF64[$684>>3];
    $686 = $64;
    $687 = $685 * $686;
    $688 = $683 + $687;
    $689 = ((($49)) + 80|0);
    $690 = +HEAPF64[$689>>3];
    $691 = $65;
    $692 = $690 * $691;
    $693 = $688 + $692;
    $694 = ((($49)) + 88|0);
    $695 = +HEAPF64[$694>>3];
    $696 = $66;
    $697 = $695 * $696;
    $698 = $693 + $697;
    $699 = ((($49)) + 96|0);
    $700 = +HEAPF64[$699>>3];
    $701 = $67;
    $702 = $700 * $701;
    $703 = $698 + $702;
    $704 = ((($49)) + 104|0);
    $705 = +HEAPF64[$704>>3];
    $706 = $68;
    $707 = $705 * $706;
    $708 = $703 + $707;
    $709 = ((($5)) + 48|0);
    HEAPF64[$709>>3] = $708;
    $710 = ((($50)) + 8|0);
    $711 = +HEAPF64[$710>>3];
    $712 = ((($50)) + 16|0);
    $713 = +HEAPF64[$712>>3];
    $714 = $55;
    $715 = $713 * $714;
    $716 = $711 + $715;
    $717 = ((($50)) + 24|0);
    $718 = +HEAPF64[$717>>3];
    $719 = $59;
    $720 = $718 * $719;
    $721 = $716 + $720;
    $722 = ((($50)) + 40|0);
    $723 = +HEAPF64[$722>>3];
    $724 = $56;
    $725 = $723 * $724;
    $726 = $721 + $725;
    $727 = ((($50)) + 48|0);
    $728 = +HEAPF64[$727>>3];
    $729 = $61;
    $730 = $728 * $729;
    $731 = $726 + $730;
    $732 = ((($50)) + 56|0);
    $733 = +HEAPF64[$732>>3];
    $734 = $62;
    $735 = $733 * $734;
    $736 = $731 + $735;
    $737 = ((($50)) + 64|0);
    $738 = +HEAPF64[$737>>3];
    $739 = $63;
    $740 = $738 * $739;
    $741 = $736 + $740;
    $742 = ((($5)) + 64|0);
    HEAPF64[$742>>3] = $741;
    HEAPF64[$5>>3] = -3.0499999999999998;
    break;
   }
   $743 = $6;
   $744 = $743 >= 0.11999999731779099;
   $745 = ((($5)) + 1792|0);
   if ($744) {
    HEAP32[$745>>2] = 3;
    $746 = ((($5)) + 1796|0);
    HEAP32[$746>>2] = 200;
    $747 = $6;
    $748 = $16;
    $749 = $747 - $748;
    $750 = $21;
    $751 = $749 * $750;
    $752 = 1.0 + $751;
    $55 = $752;
    $753 = $7;
    $754 = (+Math_sqrt((+$753)));
    $755 = $17;
    $756 = $754 - $755;
    $757 = $24;
    $758 = $756 * $757;
    $759 = 1.0 + $758;
    $56 = $759;
    $760 = $55;
    $761 = 2.0 * $760;
    $57 = $761;
    $762 = $56;
    $763 = 2.0 * $762;
    $58 = $763;
    $764 = $57;
    $765 = $55;
    $766 = $764 * $765;
    $767 = $766 - 1.0;
    $59 = $767;
    $768 = $57;
    $769 = $59;
    $770 = $768 * $769;
    $771 = $55;
    $772 = $770 - $771;
    $60 = $772;
    $773 = $58;
    $774 = $56;
    $775 = $773 * $774;
    $776 = $775 - 1.0;
    $61 = $776;
    $777 = $58;
    $778 = $61;
    $779 = $777 * $778;
    $780 = $56;
    $781 = $779 - $780;
    $62 = $781;
    $782 = $55;
    $783 = $56;
    $784 = $782 * $783;
    $63 = $784;
    $785 = $59;
    $786 = $56;
    $787 = $785 * $786;
    $64 = $787;
    $788 = $60;
    $789 = $56;
    $790 = $788 * $789;
    $65 = $790;
    $791 = $61;
    $792 = $55;
    $793 = $791 * $792;
    $66 = $793;
    $794 = $62;
    $795 = $55;
    $796 = $794 * $795;
    $67 = $796;
    $797 = $59;
    $798 = $61;
    $799 = $797 * $798;
    $68 = $799;
    $800 = ((($36)) + 8|0);
    $801 = +HEAPF64[$800>>3];
    $802 = ((($36)) + 16|0);
    $803 = +HEAPF64[$802>>3];
    $804 = $55;
    $805 = $803 * $804;
    $806 = $801 + $805;
    $807 = ((($36)) + 24|0);
    $808 = +HEAPF64[$807>>3];
    $809 = $59;
    $810 = $808 * $809;
    $811 = $806 + $810;
    $812 = ((($36)) + 40|0);
    $813 = +HEAPF64[$812>>3];
    $814 = $56;
    $815 = $813 * $814;
    $816 = $811 + $815;
    $817 = ((($36)) + 48|0);
    $818 = +HEAPF64[$817>>3];
    $819 = $61;
    $820 = $818 * $819;
    $821 = $816 + $820;
    $822 = ((($36)) + 56|0);
    $823 = +HEAPF64[$822>>3];
    $824 = $62;
    $825 = $823 * $824;
    $826 = $821 + $825;
    $827 = ((($36)) + 72|0);
    $828 = +HEAPF64[$827>>3];
    $829 = $64;
    $830 = $828 * $829;
    $831 = $826 + $830;
    $832 = ((($36)) + 80|0);
    $833 = +HEAPF64[$832>>3];
    $834 = $65;
    $835 = $833 * $834;
    $836 = $831 + $835;
    $837 = ((($36)) + 88|0);
    $838 = +HEAPF64[$837>>3];
    $839 = $66;
    $840 = $838 * $839;
    $841 = $836 + $840;
    $842 = ((($36)) + 96|0);
    $843 = +HEAPF64[$842>>3];
    $844 = $67;
    $845 = $843 * $844;
    $846 = $841 + $845;
    $847 = ((($5)) + 8|0);
    HEAPF64[$847>>3] = $846;
    $848 = ((($37)) + 8|0);
    $849 = +HEAPF64[$848>>3];
    $850 = ((($37)) + 16|0);
    $851 = +HEAPF64[$850>>3];
    $852 = $55;
    $853 = $851 * $852;
    $854 = $849 + $853;
    $855 = ((($37)) + 24|0);
    $856 = +HEAPF64[$855>>3];
    $857 = $59;
    $858 = $856 * $857;
    $859 = $854 + $858;
    $860 = ((($37)) + 40|0);
    $861 = +HEAPF64[$860>>3];
    $862 = $56;
    $863 = $861 * $862;
    $864 = $859 + $863;
    $865 = ((($37)) + 48|0);
    $866 = +HEAPF64[$865>>3];
    $867 = $61;
    $868 = $866 * $867;
    $869 = $864 + $868;
    $870 = ((($37)) + 56|0);
    $871 = +HEAPF64[$870>>3];
    $872 = $62;
    $873 = $871 * $872;
    $874 = $869 + $873;
    $875 = ((($37)) + 64|0);
    $876 = +HEAPF64[$875>>3];
    $877 = $63;
    $878 = $876 * $877;
    $879 = $874 + $878;
    $880 = ((($37)) + 72|0);
    $881 = +HEAPF64[$880>>3];
    $882 = $64;
    $883 = $881 * $882;
    $884 = $879 + $883;
    $885 = ((($37)) + 88|0);
    $886 = +HEAPF64[$885>>3];
    $887 = $66;
    $888 = $886 * $887;
    $889 = $884 + $888;
    $890 = ((($37)) + 96|0);
    $891 = +HEAPF64[$890>>3];
    $892 = $67;
    $893 = $891 * $892;
    $894 = $889 + $893;
    $895 = ((($5)) + 16|0);
    HEAPF64[$895>>3] = $894;
    $896 = ((($38)) + 8|0);
    $897 = +HEAPF64[$896>>3];
    $898 = ((($38)) + 16|0);
    $899 = +HEAPF64[$898>>3];
    $900 = $55;
    $901 = $899 * $900;
    $902 = $897 + $901;
    $903 = ((($38)) + 24|0);
    $904 = +HEAPF64[$903>>3];
    $905 = $59;
    $906 = $904 * $905;
    $907 = $902 + $906;
    $908 = ((($38)) + 32|0);
    $909 = +HEAPF64[$908>>3];
    $910 = $60;
    $911 = $909 * $910;
    $912 = $907 + $911;
    $913 = ((($38)) + 40|0);
    $914 = +HEAPF64[$913>>3];
    $915 = $56;
    $916 = $914 * $915;
    $917 = $912 + $916;
    $918 = ((($38)) + 48|0);
    $919 = +HEAPF64[$918>>3];
    $920 = $61;
    $921 = $919 * $920;
    $922 = $917 + $921;
    $923 = ((($38)) + 56|0);
    $924 = +HEAPF64[$923>>3];
    $925 = $62;
    $926 = $924 * $925;
    $927 = $922 + $926;
    $928 = ((($38)) + 64|0);
    $929 = +HEAPF64[$928>>3];
    $930 = $63;
    $931 = $929 * $930;
    $932 = $927 + $931;
    $933 = ((($38)) + 72|0);
    $934 = +HEAPF64[$933>>3];
    $935 = $64;
    $936 = $934 * $935;
    $937 = $932 + $936;
    $938 = ((($38)) + 80|0);
    $939 = +HEAPF64[$938>>3];
    $940 = $65;
    $941 = $939 * $940;
    $942 = $937 + $941;
    $943 = ((($38)) + 88|0);
    $944 = +HEAPF64[$943>>3];
    $945 = $66;
    $946 = $944 * $945;
    $947 = $942 + $946;
    $948 = ((($38)) + 96|0);
    $949 = +HEAPF64[$948>>3];
    $950 = $67;
    $951 = $949 * $950;
    $952 = $947 + $951;
    $953 = ((($38)) + 104|0);
    $954 = +HEAPF64[$953>>3];
    $955 = $68;
    $956 = $954 * $955;
    $957 = $952 + $956;
    $958 = ((($5)) + 24|0);
    HEAPF64[$958>>3] = $957;
    $959 = ((($39)) + 8|0);
    $960 = +HEAPF64[$959>>3];
    $961 = ((($39)) + 16|0);
    $962 = +HEAPF64[$961>>3];
    $963 = $55;
    $964 = $962 * $963;
    $965 = $960 + $964;
    $966 = ((($39)) + 24|0);
    $967 = +HEAPF64[$966>>3];
    $968 = $59;
    $969 = $967 * $968;
    $970 = $965 + $969;
    $971 = ((($39)) + 32|0);
    $972 = +HEAPF64[$971>>3];
    $973 = $60;
    $974 = $972 * $973;
    $975 = $970 + $974;
    $976 = ((($39)) + 40|0);
    $977 = +HEAPF64[$976>>3];
    $978 = $56;
    $979 = $977 * $978;
    $980 = $975 + $979;
    $981 = ((($39)) + 48|0);
    $982 = +HEAPF64[$981>>3];
    $983 = $61;
    $984 = $982 * $983;
    $985 = $980 + $984;
    $986 = ((($39)) + 56|0);
    $987 = +HEAPF64[$986>>3];
    $988 = $62;
    $989 = $987 * $988;
    $990 = $985 + $989;
    $991 = ((($39)) + 64|0);
    $992 = +HEAPF64[$991>>3];
    $993 = $63;
    $994 = $992 * $993;
    $995 = $990 + $994;
    $996 = ((($39)) + 72|0);
    $997 = +HEAPF64[$996>>3];
    $998 = $64;
    $999 = $997 * $998;
    $1000 = $995 + $999;
    $1001 = ((($39)) + 80|0);
    $1002 = +HEAPF64[$1001>>3];
    $1003 = $65;
    $1004 = $1002 * $1003;
    $1005 = $1000 + $1004;
    $1006 = ((($39)) + 88|0);
    $1007 = +HEAPF64[$1006>>3];
    $1008 = $66;
    $1009 = $1007 * $1008;
    $1010 = $1005 + $1009;
    $1011 = ((($39)) + 96|0);
    $1012 = +HEAPF64[$1011>>3];
    $1013 = $67;
    $1014 = $1012 * $1013;
    $1015 = $1010 + $1014;
    $1016 = ((($5)) + 32|0);
    HEAPF64[$1016>>3] = $1015;
    $1017 = ((($40)) + 8|0);
    $1018 = +HEAPF64[$1017>>3];
    $1019 = ((($40)) + 16|0);
    $1020 = +HEAPF64[$1019>>3];
    $1021 = $55;
    $1022 = $1020 * $1021;
    $1023 = $1018 + $1022;
    $1024 = ((($40)) + 24|0);
    $1025 = +HEAPF64[$1024>>3];
    $1026 = $59;
    $1027 = $1025 * $1026;
    $1028 = $1023 + $1027;
    $1029 = ((($40)) + 32|0);
    $1030 = +HEAPF64[$1029>>3];
    $1031 = $60;
    $1032 = $1030 * $1031;
    $1033 = $1028 + $1032;
    $1034 = ((($40)) + 40|0);
    $1035 = +HEAPF64[$1034>>3];
    $1036 = $56;
    $1037 = $1035 * $1036;
    $1038 = $1033 + $1037;
    $1039 = ((($40)) + 48|0);
    $1040 = +HEAPF64[$1039>>3];
    $1041 = $61;
    $1042 = $1040 * $1041;
    $1043 = $1038 + $1042;
    $1044 = ((($40)) + 56|0);
    $1045 = +HEAPF64[$1044>>3];
    $1046 = $62;
    $1047 = $1045 * $1046;
    $1048 = $1043 + $1047;
    $1049 = ((($40)) + 64|0);
    $1050 = +HEAPF64[$1049>>3];
    $1051 = $63;
    $1052 = $1050 * $1051;
    $1053 = $1048 + $1052;
    $1054 = ((($40)) + 88|0);
    $1055 = +HEAPF64[$1054>>3];
    $1056 = $66;
    $1057 = $1055 * $1056;
    $1058 = $1053 + $1057;
    $1059 = ((($40)) + 96|0);
    $1060 = +HEAPF64[$1059>>3];
    $1061 = $67;
    $1062 = $1060 * $1061;
    $1063 = $1058 + $1062;
    $1064 = ((($40)) + 104|0);
    $1065 = +HEAPF64[$1064>>3];
    $1066 = $68;
    $1067 = $1065 * $1066;
    $1068 = $1063 + $1067;
    $1069 = ((($5)) + 40|0);
    HEAPF64[$1069>>3] = $1068;
    $1070 = ((($41)) + 8|0);
    $1071 = +HEAPF64[$1070>>3];
    $1072 = ((($41)) + 16|0);
    $1073 = +HEAPF64[$1072>>3];
    $1074 = $55;
    $1075 = $1073 * $1074;
    $1076 = $1071 + $1075;
    $1077 = ((($41)) + 24|0);
    $1078 = +HEAPF64[$1077>>3];
    $1079 = $59;
    $1080 = $1078 * $1079;
    $1081 = $1076 + $1080;
    $1082 = ((($41)) + 32|0);
    $1083 = +HEAPF64[$1082>>3];
    $1084 = $60;
    $1085 = $1083 * $1084;
    $1086 = $1081 + $1085;
    $1087 = ((($41)) + 40|0);
    $1088 = +HEAPF64[$1087>>3];
    $1089 = $56;
    $1090 = $1088 * $1089;
    $1091 = $1086 + $1090;
    $1092 = ((($41)) + 48|0);
    $1093 = +HEAPF64[$1092>>3];
    $1094 = $61;
    $1095 = $1093 * $1094;
    $1096 = $1091 + $1095;
    $1097 = ((($41)) + 56|0);
    $1098 = +HEAPF64[$1097>>3];
    $1099 = $62;
    $1100 = $1098 * $1099;
    $1101 = $1096 + $1100;
    $1102 = ((($41)) + 64|0);
    $1103 = +HEAPF64[$1102>>3];
    $1104 = $63;
    $1105 = $1103 * $1104;
    $1106 = $1101 + $1105;
    $1107 = ((($41)) + 72|0);
    $1108 = +HEAPF64[$1107>>3];
    $1109 = $64;
    $1110 = $1108 * $1109;
    $1111 = $1106 + $1110;
    $1112 = ((($41)) + 80|0);
    $1113 = +HEAPF64[$1112>>3];
    $1114 = $65;
    $1115 = $1113 * $1114;
    $1116 = $1111 + $1115;
    $1117 = ((($41)) + 88|0);
    $1118 = +HEAPF64[$1117>>3];
    $1119 = $66;
    $1120 = $1118 * $1119;
    $1121 = $1116 + $1120;
    $1122 = ((($41)) + 96|0);
    $1123 = +HEAPF64[$1122>>3];
    $1124 = $67;
    $1125 = $1123 * $1124;
    $1126 = $1121 + $1125;
    $1127 = ((($41)) + 104|0);
    $1128 = +HEAPF64[$1127>>3];
    $1129 = $68;
    $1130 = $1128 * $1129;
    $1131 = $1126 + $1130;
    $1132 = ((($5)) + 48|0);
    HEAPF64[$1132>>3] = $1131;
    $1133 = ((($42)) + 8|0);
    $1134 = +HEAPF64[$1133>>3];
    $1135 = ((($42)) + 16|0);
    $1136 = +HEAPF64[$1135>>3];
    $1137 = $55;
    $1138 = $1136 * $1137;
    $1139 = $1134 + $1138;
    $1140 = ((($42)) + 24|0);
    $1141 = +HEAPF64[$1140>>3];
    $1142 = $59;
    $1143 = $1141 * $1142;
    $1144 = $1139 + $1143;
    $1145 = ((($42)) + 40|0);
    $1146 = +HEAPF64[$1145>>3];
    $1147 = $56;
    $1148 = $1146 * $1147;
    $1149 = $1144 + $1148;
    $1150 = ((($42)) + 48|0);
    $1151 = +HEAPF64[$1150>>3];
    $1152 = $61;
    $1153 = $1151 * $1152;
    $1154 = $1149 + $1153;
    $1155 = ((($42)) + 56|0);
    $1156 = +HEAPF64[$1155>>3];
    $1157 = $62;
    $1158 = $1156 * $1157;
    $1159 = $1154 + $1158;
    $1160 = ((($42)) + 64|0);
    $1161 = +HEAPF64[$1160>>3];
    $1162 = $63;
    $1163 = $1161 * $1162;
    $1164 = $1159 + $1163;
    $1165 = ((($42)) + 88|0);
    $1166 = +HEAPF64[$1165>>3];
    $1167 = $66;
    $1168 = $1166 * $1167;
    $1169 = $1164 + $1168;
    $1170 = ((($5)) + 56|0);
    HEAPF64[$1170>>3] = $1169;
    $1171 = ((($43)) + 8|0);
    $1172 = +HEAPF64[$1171>>3];
    $1173 = ((($43)) + 16|0);
    $1174 = +HEAPF64[$1173>>3];
    $1175 = $55;
    $1176 = $1174 * $1175;
    $1177 = $1172 + $1176;
    $1178 = ((($43)) + 24|0);
    $1179 = +HEAPF64[$1178>>3];
    $1180 = $59;
    $1181 = $1179 * $1180;
    $1182 = $1177 + $1181;
    $1183 = ((($43)) + 40|0);
    $1184 = +HEAPF64[$1183>>3];
    $1185 = $56;
    $1186 = $1184 * $1185;
    $1187 = $1182 + $1186;
    $1188 = ((($43)) + 48|0);
    $1189 = +HEAPF64[$1188>>3];
    $1190 = $61;
    $1191 = $1189 * $1190;
    $1192 = $1187 + $1191;
    $1193 = ((($43)) + 56|0);
    $1194 = +HEAPF64[$1193>>3];
    $1195 = $62;
    $1196 = $1194 * $1195;
    $1197 = $1192 + $1196;
    $1198 = ((($43)) + 64|0);
    $1199 = +HEAPF64[$1198>>3];
    $1200 = $63;
    $1201 = $1199 * $1200;
    $1202 = $1197 + $1201;
    $1203 = ((($43)) + 88|0);
    $1204 = +HEAPF64[$1203>>3];
    $1205 = $66;
    $1206 = $1204 * $1205;
    $1207 = $1202 + $1206;
    $1208 = ((($5)) + 64|0);
    HEAPF64[$1208>>3] = $1207;
    HEAPF64[$5>>3] = -3.04;
    break;
   }
   HEAP32[$745>>2] = 4;
   $1209 = $6;
   $1210 = $1209 >= 0.019999999552965164;
   if ($1210) {
    $1211 = ((($5)) + 1792|0);
    HEAP32[$1211>>2] = 3;
   }
   $1212 = ((($5)) + 1796|0);
   HEAP32[$1212>>2] = 200;
   $1213 = $6;
   $1214 = $14;
   $1215 = $1213 - $1214;
   $1216 = $20;
   $1217 = $1215 * $1216;
   $1218 = 1.0 + $1217;
   $55 = $1218;
   $1219 = $7;
   $1220 = (+Math_sqrt((+$1219)));
   $1221 = $15;
   $1222 = $1220 - $1221;
   $1223 = $23;
   $1224 = $1222 * $1223;
   $1225 = 1.0 + $1224;
   $56 = $1225;
   $1226 = $55;
   $1227 = 2.0 * $1226;
   $57 = $1227;
   $1228 = $56;
   $1229 = 2.0 * $1228;
   $58 = $1229;
   $1230 = $57;
   $1231 = $55;
   $1232 = $1230 * $1231;
   $1233 = $1232 - 1.0;
   $59 = $1233;
   $1234 = $57;
   $1235 = $59;
   $1236 = $1234 * $1235;
   $1237 = $55;
   $1238 = $1236 - $1237;
   $60 = $1238;
   $1239 = $58;
   $1240 = $56;
   $1241 = $1239 * $1240;
   $1242 = $1241 - 1.0;
   $61 = $1242;
   $1243 = $58;
   $1244 = $61;
   $1245 = $1243 * $1244;
   $1246 = $56;
   $1247 = $1245 - $1246;
   $62 = $1247;
   $1248 = $55;
   $1249 = $56;
   $1250 = $1248 * $1249;
   $63 = $1250;
   $1251 = $59;
   $1252 = $56;
   $1253 = $1251 * $1252;
   $64 = $1253;
   $1254 = $60;
   $1255 = $56;
   $1256 = $1254 * $1255;
   $65 = $1256;
   $1257 = $61;
   $1258 = $55;
   $1259 = $1257 * $1258;
   $66 = $1259;
   $1260 = $62;
   $1261 = $55;
   $1262 = $1260 * $1261;
   $67 = $1262;
   $1263 = $59;
   $1264 = $61;
   $1265 = $1263 * $1264;
   $68 = $1265;
   $1266 = ((($5)) + 1792|0);
   $1267 = HEAP32[$1266>>2]|0;
   $1268 = ($1267|0)==(3);
   if ($1268) {
    $1269 = ((($28)) + 8|0);
    $1270 = +HEAPF64[$1269>>3];
    $1271 = ((($28)) + 16|0);
    $1272 = +HEAPF64[$1271>>3];
    $1273 = $55;
    $1274 = $1272 * $1273;
    $1275 = $1270 + $1274;
    $1276 = ((($28)) + 24|0);
    $1277 = +HEAPF64[$1276>>3];
    $1278 = $59;
    $1279 = $1277 * $1278;
    $1280 = $1275 + $1279;
    $1281 = ((($28)) + 40|0);
    $1282 = +HEAPF64[$1281>>3];
    $1283 = $56;
    $1284 = $1282 * $1283;
    $1285 = $1280 + $1284;
    $1286 = ((($28)) + 48|0);
    $1287 = +HEAPF64[$1286>>3];
    $1288 = $61;
    $1289 = $1287 * $1288;
    $1290 = $1285 + $1289;
    $1291 = ((($28)) + 56|0);
    $1292 = +HEAPF64[$1291>>3];
    $1293 = $62;
    $1294 = $1292 * $1293;
    $1295 = $1290 + $1294;
    $1296 = ((($28)) + 64|0);
    $1297 = +HEAPF64[$1296>>3];
    $1298 = $63;
    $1299 = $1297 * $1298;
    $1300 = $1295 + $1299;
    $1301 = ((($28)) + 80|0);
    $1302 = +HEAPF64[$1301>>3];
    $1303 = $65;
    $1304 = $1302 * $1303;
    $1305 = $1300 + $1304;
    $1306 = ((($28)) + 96|0);
    $1307 = +HEAPF64[$1306>>3];
    $1308 = $67;
    $1309 = $1307 * $1308;
    $1310 = $1305 + $1309;
    $1311 = ((($28)) + 104|0);
    $1312 = +HEAPF64[$1311>>3];
    $1313 = $68;
    $1314 = $1312 * $1313;
    $1315 = $1310 + $1314;
    $1316 = ((($5)) + 8|0);
    HEAPF64[$1316>>3] = $1315;
    $1317 = ((($29)) + 8|0);
    $1318 = +HEAPF64[$1317>>3];
    $1319 = ((($29)) + 16|0);
    $1320 = +HEAPF64[$1319>>3];
    $1321 = $55;
    $1322 = $1320 * $1321;
    $1323 = $1318 + $1322;
    $1324 = ((($29)) + 24|0);
    $1325 = +HEAPF64[$1324>>3];
    $1326 = $59;
    $1327 = $1325 * $1326;
    $1328 = $1323 + $1327;
    $1329 = ((($29)) + 40|0);
    $1330 = +HEAPF64[$1329>>3];
    $1331 = $56;
    $1332 = $1330 * $1331;
    $1333 = $1328 + $1332;
    $1334 = ((($29)) + 48|0);
    $1335 = +HEAPF64[$1334>>3];
    $1336 = $61;
    $1337 = $1335 * $1336;
    $1338 = $1333 + $1337;
    $1339 = ((($29)) + 56|0);
    $1340 = +HEAPF64[$1339>>3];
    $1341 = $62;
    $1342 = $1340 * $1341;
    $1343 = $1338 + $1342;
    $1344 = ((($29)) + 64|0);
    $1345 = +HEAPF64[$1344>>3];
    $1346 = $63;
    $1347 = $1345 * $1346;
    $1348 = $1343 + $1347;
    $1349 = ((($29)) + 72|0);
    $1350 = +HEAPF64[$1349>>3];
    $1351 = $64;
    $1352 = $1350 * $1351;
    $1353 = $1348 + $1352;
    $1354 = ((($29)) + 80|0);
    $1355 = +HEAPF64[$1354>>3];
    $1356 = $65;
    $1357 = $1355 * $1356;
    $1358 = $1353 + $1357;
    $1359 = ((($29)) + 96|0);
    $1360 = +HEAPF64[$1359>>3];
    $1361 = $67;
    $1362 = $1360 * $1361;
    $1363 = $1358 + $1362;
    $1364 = ((($29)) + 104|0);
    $1365 = +HEAPF64[$1364>>3];
    $1366 = $68;
    $1367 = $1365 * $1366;
    $1368 = $1363 + $1367;
    $1369 = ((($5)) + 16|0);
    HEAPF64[$1369>>3] = $1368;
    $1370 = ((($30)) + 8|0);
    $1371 = +HEAPF64[$1370>>3];
    $1372 = ((($30)) + 16|0);
    $1373 = +HEAPF64[$1372>>3];
    $1374 = $55;
    $1375 = $1373 * $1374;
    $1376 = $1371 + $1375;
    $1377 = ((($30)) + 24|0);
    $1378 = +HEAPF64[$1377>>3];
    $1379 = $59;
    $1380 = $1378 * $1379;
    $1381 = $1376 + $1380;
    $1382 = ((($30)) + 40|0);
    $1383 = +HEAPF64[$1382>>3];
    $1384 = $56;
    $1385 = $1383 * $1384;
    $1386 = $1381 + $1385;
    $1387 = ((($30)) + 48|0);
    $1388 = +HEAPF64[$1387>>3];
    $1389 = $61;
    $1390 = $1388 * $1389;
    $1391 = $1386 + $1390;
    $1392 = ((($30)) + 56|0);
    $1393 = +HEAPF64[$1392>>3];
    $1394 = $62;
    $1395 = $1393 * $1394;
    $1396 = $1391 + $1395;
    $1397 = ((($30)) + 64|0);
    $1398 = +HEAPF64[$1397>>3];
    $1399 = $63;
    $1400 = $1398 * $1399;
    $1401 = $1396 + $1400;
    $1402 = ((($30)) + 72|0);
    $1403 = +HEAPF64[$1402>>3];
    $1404 = $64;
    $1405 = $1403 * $1404;
    $1406 = $1401 + $1405;
    $1407 = ((($30)) + 80|0);
    $1408 = +HEAPF64[$1407>>3];
    $1409 = $65;
    $1410 = $1408 * $1409;
    $1411 = $1406 + $1410;
    $1412 = ((($30)) + 88|0);
    $1413 = +HEAPF64[$1412>>3];
    $1414 = $66;
    $1415 = $1413 * $1414;
    $1416 = $1411 + $1415;
    $1417 = ((($30)) + 96|0);
    $1418 = +HEAPF64[$1417>>3];
    $1419 = $67;
    $1420 = $1418 * $1419;
    $1421 = $1416 + $1420;
    $1422 = ((($30)) + 104|0);
    $1423 = +HEAPF64[$1422>>3];
    $1424 = $68;
    $1425 = $1423 * $1424;
    $1426 = $1421 + $1425;
    $1427 = ((($5)) + 24|0);
    HEAPF64[$1427>>3] = $1426;
    $1428 = ((($31)) + 8|0);
    $1429 = +HEAPF64[$1428>>3];
    $1430 = ((($31)) + 16|0);
    $1431 = +HEAPF64[$1430>>3];
    $1432 = $55;
    $1433 = $1431 * $1432;
    $1434 = $1429 + $1433;
    $1435 = ((($31)) + 24|0);
    $1436 = +HEAPF64[$1435>>3];
    $1437 = $59;
    $1438 = $1436 * $1437;
    $1439 = $1434 + $1438;
    $1440 = ((($31)) + 32|0);
    $1441 = +HEAPF64[$1440>>3];
    $1442 = $60;
    $1443 = $1441 * $1442;
    $1444 = $1439 + $1443;
    $1445 = ((($31)) + 40|0);
    $1446 = +HEAPF64[$1445>>3];
    $1447 = $56;
    $1448 = $1446 * $1447;
    $1449 = $1444 + $1448;
    $1450 = ((($31)) + 48|0);
    $1451 = +HEAPF64[$1450>>3];
    $1452 = $61;
    $1453 = $1451 * $1452;
    $1454 = $1449 + $1453;
    $1455 = ((($31)) + 56|0);
    $1456 = +HEAPF64[$1455>>3];
    $1457 = $62;
    $1458 = $1456 * $1457;
    $1459 = $1454 + $1458;
    $1460 = ((($31)) + 64|0);
    $1461 = +HEAPF64[$1460>>3];
    $1462 = $63;
    $1463 = $1461 * $1462;
    $1464 = $1459 + $1463;
    $1465 = ((($31)) + 72|0);
    $1466 = +HEAPF64[$1465>>3];
    $1467 = $64;
    $1468 = $1466 * $1467;
    $1469 = $1464 + $1468;
    $1470 = ((($31)) + 80|0);
    $1471 = +HEAPF64[$1470>>3];
    $1472 = $65;
    $1473 = $1471 * $1472;
    $1474 = $1469 + $1473;
    $1475 = ((($31)) + 88|0);
    $1476 = +HEAPF64[$1475>>3];
    $1477 = $66;
    $1478 = $1476 * $1477;
    $1479 = $1474 + $1478;
    $1480 = ((($31)) + 96|0);
    $1481 = +HEAPF64[$1480>>3];
    $1482 = $67;
    $1483 = $1481 * $1482;
    $1484 = $1479 + $1483;
    $1485 = ((($5)) + 32|0);
    HEAPF64[$1485>>3] = $1484;
    $1486 = ((($32)) + 8|0);
    $1487 = +HEAPF64[$1486>>3];
    $1488 = ((($32)) + 16|0);
    $1489 = +HEAPF64[$1488>>3];
    $1490 = $55;
    $1491 = $1489 * $1490;
    $1492 = $1487 + $1491;
    $1493 = ((($32)) + 24|0);
    $1494 = +HEAPF64[$1493>>3];
    $1495 = $59;
    $1496 = $1494 * $1495;
    $1497 = $1492 + $1496;
    $1498 = ((($32)) + 32|0);
    $1499 = +HEAPF64[$1498>>3];
    $1500 = $60;
    $1501 = $1499 * $1500;
    $1502 = $1497 + $1501;
    $1503 = ((($32)) + 40|0);
    $1504 = +HEAPF64[$1503>>3];
    $1505 = $56;
    $1506 = $1504 * $1505;
    $1507 = $1502 + $1506;
    $1508 = ((($32)) + 48|0);
    $1509 = +HEAPF64[$1508>>3];
    $1510 = $61;
    $1511 = $1509 * $1510;
    $1512 = $1507 + $1511;
    $1513 = ((($32)) + 56|0);
    $1514 = +HEAPF64[$1513>>3];
    $1515 = $62;
    $1516 = $1514 * $1515;
    $1517 = $1512 + $1516;
    $1518 = ((($32)) + 64|0);
    $1519 = +HEAPF64[$1518>>3];
    $1520 = $63;
    $1521 = $1519 * $1520;
    $1522 = $1517 + $1521;
    $1523 = ((($32)) + 80|0);
    $1524 = +HEAPF64[$1523>>3];
    $1525 = $65;
    $1526 = $1524 * $1525;
    $1527 = $1522 + $1526;
    $1528 = ((($32)) + 88|0);
    $1529 = +HEAPF64[$1528>>3];
    $1530 = $66;
    $1531 = $1529 * $1530;
    $1532 = $1527 + $1531;
    $1533 = ((($32)) + 96|0);
    $1534 = +HEAPF64[$1533>>3];
    $1535 = $67;
    $1536 = $1534 * $1535;
    $1537 = $1532 + $1536;
    $1538 = ((($32)) + 104|0);
    $1539 = +HEAPF64[$1538>>3];
    $1540 = $68;
    $1541 = $1539 * $1540;
    $1542 = $1537 + $1541;
    $1543 = ((($5)) + 40|0);
    HEAPF64[$1543>>3] = $1542;
    $1544 = ((($33)) + 8|0);
    $1545 = +HEAPF64[$1544>>3];
    $1546 = ((($33)) + 16|0);
    $1547 = +HEAPF64[$1546>>3];
    $1548 = $55;
    $1549 = $1547 * $1548;
    $1550 = $1545 + $1549;
    $1551 = ((($33)) + 24|0);
    $1552 = +HEAPF64[$1551>>3];
    $1553 = $59;
    $1554 = $1552 * $1553;
    $1555 = $1550 + $1554;
    $1556 = ((($33)) + 32|0);
    $1557 = +HEAPF64[$1556>>3];
    $1558 = $60;
    $1559 = $1557 * $1558;
    $1560 = $1555 + $1559;
    $1561 = ((($33)) + 40|0);
    $1562 = +HEAPF64[$1561>>3];
    $1563 = $56;
    $1564 = $1562 * $1563;
    $1565 = $1560 + $1564;
    $1566 = ((($33)) + 56|0);
    $1567 = +HEAPF64[$1566>>3];
    $1568 = $62;
    $1569 = $1567 * $1568;
    $1570 = $1565 + $1569;
    $1571 = ((($33)) + 64|0);
    $1572 = +HEAPF64[$1571>>3];
    $1573 = $63;
    $1574 = $1572 * $1573;
    $1575 = $1570 + $1574;
    $1576 = ((($33)) + 72|0);
    $1577 = +HEAPF64[$1576>>3];
    $1578 = $64;
    $1579 = $1577 * $1578;
    $1580 = $1575 + $1579;
    $1581 = ((($33)) + 80|0);
    $1582 = +HEAPF64[$1581>>3];
    $1583 = $65;
    $1584 = $1582 * $1583;
    $1585 = $1580 + $1584;
    $1586 = ((($33)) + 96|0);
    $1587 = +HEAPF64[$1586>>3];
    $1588 = $67;
    $1589 = $1587 * $1588;
    $1590 = $1585 + $1589;
    $1591 = ((($33)) + 104|0);
    $1592 = +HEAPF64[$1591>>3];
    $1593 = $68;
    $1594 = $1592 * $1593;
    $1595 = $1590 + $1594;
    $1596 = ((($5)) + 48|0);
    HEAPF64[$1596>>3] = $1595;
    $1597 = ((($34)) + 8|0);
    $1598 = +HEAPF64[$1597>>3];
    $1599 = ((($34)) + 16|0);
    $1600 = +HEAPF64[$1599>>3];
    $1601 = $55;
    $1602 = $1600 * $1601;
    $1603 = $1598 + $1602;
    $1604 = ((($34)) + 24|0);
    $1605 = +HEAPF64[$1604>>3];
    $1606 = $59;
    $1607 = $1605 * $1606;
    $1608 = $1603 + $1607;
    $1609 = ((($34)) + 32|0);
    $1610 = +HEAPF64[$1609>>3];
    $1611 = $60;
    $1612 = $1610 * $1611;
    $1613 = $1608 + $1612;
    $1614 = ((($34)) + 40|0);
    $1615 = +HEAPF64[$1614>>3];
    $1616 = $56;
    $1617 = $1615 * $1616;
    $1618 = $1613 + $1617;
    $1619 = ((($34)) + 48|0);
    $1620 = +HEAPF64[$1619>>3];
    $1621 = $61;
    $1622 = $1620 * $1621;
    $1623 = $1618 + $1622;
    $1624 = ((($34)) + 64|0);
    $1625 = +HEAPF64[$1624>>3];
    $1626 = $63;
    $1627 = $1625 * $1626;
    $1628 = $1623 + $1627;
    $1629 = ((($5)) + 56|0);
    HEAPF64[$1629>>3] = $1628;
   }
   $1630 = ((($35)) + 8|0);
   $1631 = +HEAPF64[$1630>>3];
   $1632 = ((($35)) + 16|0);
   $1633 = +HEAPF64[$1632>>3];
   $1634 = $55;
   $1635 = $1633 * $1634;
   $1636 = $1631 + $1635;
   $1637 = ((($35)) + 24|0);
   $1638 = +HEAPF64[$1637>>3];
   $1639 = $59;
   $1640 = $1638 * $1639;
   $1641 = $1636 + $1640;
   $1642 = ((($35)) + 32|0);
   $1643 = +HEAPF64[$1642>>3];
   $1644 = $60;
   $1645 = $1643 * $1644;
   $1646 = $1641 + $1645;
   $1647 = ((($35)) + 40|0);
   $1648 = +HEAPF64[$1647>>3];
   $1649 = $56;
   $1650 = $1648 * $1649;
   $1651 = $1646 + $1650;
   $1652 = ((($35)) + 48|0);
   $1653 = +HEAPF64[$1652>>3];
   $1654 = $61;
   $1655 = $1653 * $1654;
   $1656 = $1651 + $1655;
   $1657 = ((($35)) + 56|0);
   $1658 = +HEAPF64[$1657>>3];
   $1659 = $62;
   $1660 = $1658 * $1659;
   $1661 = $1656 + $1660;
   $1662 = ((($35)) + 64|0);
   $1663 = +HEAPF64[$1662>>3];
   $1664 = $63;
   $1665 = $1663 * $1664;
   $1666 = $1661 + $1665;
   $1667 = ((($35)) + 72|0);
   $1668 = +HEAPF64[$1667>>3];
   $1669 = $64;
   $1670 = $1668 * $1669;
   $1671 = $1666 + $1670;
   $1672 = ((($35)) + 80|0);
   $1673 = +HEAPF64[$1672>>3];
   $1674 = $65;
   $1675 = $1673 * $1674;
   $1676 = $1671 + $1675;
   $1677 = ((($35)) + 88|0);
   $1678 = +HEAPF64[$1677>>3];
   $1679 = $66;
   $1680 = $1678 * $1679;
   $1681 = $1676 + $1680;
   $1682 = ((($35)) + 104|0);
   $1683 = +HEAPF64[$1682>>3];
   $1684 = $68;
   $1685 = $1683 * $1684;
   $1686 = $1681 + $1685;
   $1687 = ((($5)) + 64|0);
   HEAPF64[$1687>>3] = $1686;
   HEAPF64[$5>>3] = -3.0299999999999998;
  }
 } while(0);
 $1688 = ((($5)) + 64|0);
 $1689 = +HEAPF64[$1688>>3];
 $1690 = +HEAPF64[$5>>3];
 $1691 = $1689 - $1690;
 $1692 = ((($5)) + 1796|0);
 $1693 = HEAP32[$1692>>2]|0;
 $1694 = (+($1693|0));
 $1695 = $1691 / $1694;
 $1696 = ((($5)) + 72|0);
 HEAPF64[$1696>>3] = $1695;
 $1697 = ((($5)) + 72|0);
 $1698 = +HEAPF64[$1697>>3];
 $1699 = 1.0 / $1698;
 $1700 = ((($5)) + 80|0);
 HEAPF64[$1700>>3] = $1699;
 $1701 = ((($5)) + 1792|0);
 $1702 = HEAP32[$1701>>2]|0;
 $1703 = ($1702|0)==(3);
 if ($1703) {
  $1704 = ((($5)) + 56|0);
  $1705 = +HEAPF64[$1704>>3];
  $1706 = ((($5)) + 64|0);
  $1707 = +HEAPF64[$1706>>3];
  $1708 = $1705 - $1707;
  $1709 = ((($5)) + 56|0);
  $1710 = +HEAPF64[$1709>>3];
  $1711 = ((($5)) + 64|0);
  $1712 = +HEAPF64[$1711>>3];
  $1713 = $1710 * $1712;
  $1714 = $1708 / $1713;
  $55 = $1714;
  $1715 = ((($5)) + 64|0);
  $1716 = +HEAPF64[$1715>>3];
  $1717 = ((($5)) + 56|0);
  $1718 = +HEAPF64[$1717>>3];
  $1719 = $1716 / $1718;
  $1720 = (+Math_log((+$1719)));
  $1721 = 1.0 / $1720;
  $56 = $1721;
  $1722 = ((($5)) + 56|0);
  $1723 = +HEAPF64[$1722>>3];
  $1724 = ((($5)) + 56|0);
  $1725 = +HEAPF64[$1724>>3];
  $1726 = $1723 * $1725;
  $64 = $1726;
  $1727 = $64;
  $1728 = ((($5)) + 8|0);
  $1729 = +HEAPF64[$1728>>3];
  $1730 = ((($5)) + 16|0);
  $1731 = +HEAPF64[$1730>>3];
  $1732 = - $1731;
  $1733 = ((($5)) + 56|0);
  $1734 = +HEAPF64[$1733>>3];
  $1735 = ((($5)) + 40|0);
  $1736 = +HEAPF64[$1735>>3];
  $1737 = $64;
  $1738 = $1736 * $1737;
  $1739 = $1734 + $1738;
  $1740 = $1732 * $1739;
  $1741 = ((($5)) + 24|0);
  $1742 = +HEAPF64[$1741>>3];
  $1743 = ((($5)) + 32|0);
  $1744 = +HEAPF64[$1743>>3];
  $1745 = - $1744;
  $1746 = ((($5)) + 56|0);
  $1747 = +HEAPF64[$1746>>3];
  $1748 = ((($5)) + 48|0);
  $1749 = +HEAPF64[$1748>>3];
  $1750 = $64;
  $1751 = $1749 * $1750;
  $1752 = $1747 + $1751;
  $1753 = $1745 * $1752;
  $1754 = (+Math_exp((+$1753)));
  $1755 = $1742 * $1754;
  $1756 = $1740 - $1755;
  $1757 = (+Math_exp((+$1756)));
  $1758 = $1729 * $1757;
  $1759 = $56;
  $1760 = 0.044999999999999998 * $1759;
  $1761 = ((($5)) + 56|0);
  $1762 = +HEAPF64[$1761>>3];
  $1763 = $1760 / $1762;
  $1764 = $1758 - $1763;
  $1765 = $1727 * $1764;
  $1766 = $55;
  $1767 = $56;
  $1768 = $1766 * $1767;
  $1769 = ((($5)) + 56|0);
  $1770 = +HEAPF64[$1769>>3];
  $1771 = $1768 * $1770;
  $1772 = 1.0 + $1771;
  $1773 = $1765 / $1772;
  $1774 = ((($5)) + 88|0);
  HEAPF64[$1774>>3] = $1773;
  $1775 = $55;
  $1776 = ((($5)) + 88|0);
  $1777 = +HEAPF64[$1776>>3];
  $1778 = $1775 * $1777;
  $1779 = 0.044999999999999998 + $1778;
  $1780 = $56;
  $1781 = $1779 * $1780;
  $1782 = ((($5)) + 96|0);
  HEAPF64[$1782>>3] = $1781;
 }
 $1783 = ((($5)) + 1792|0);
 $1784 = HEAP32[$1783>>2]|0;
 $1785 = ($1784|0)==(4);
 if ($1785) {
  $1786 = ((($5)) + 64|0);
  $1787 = +HEAPF64[$1786>>3];
  $1788 = (+_CL_ranlan_cdf($1787));
  $1789 = 0.99499999999999999 / $1788;
  $1790 = ((($5)) + 104|0);
  HEAPF64[$1790>>3] = $1789;
 }
 $1791 = +HEAPF64[$5>>3];
 $55 = $1791;
 $1792 = ((($5)) + 184|0);
 HEAPF64[$1792>>3] = 0.0;
 $1793 = $55;
 $1794 = (+_ROOT_vav_pdf($1793,$5));
 $70 = $1794;
 $72 = 1;
 while(1) {
  $1795 = $72;
  $1796 = ((($5)) + 1796|0);
  $1797 = HEAP32[$1796>>2]|0;
  $1798 = ($1795|0)<=($1797|0);
  $1799 = ((($5)) + 72|0);
  $1800 = +HEAPF64[$1799>>3];
  if (!($1798)) {
   break;
  }
  $1801 = $55;
  $1802 = $1801 + $1800;
  $55 = $1802;
  $1803 = $55;
  $1804 = (+_ROOT_vav_pdf($1803,$5));
  $71 = $1804;
  $1805 = ((($5)) + 184|0);
  $1806 = $72;
  $1807 = (($1806) - 1)|0;
  $1808 = (($1805) + ($1807<<3)|0);
  $1809 = +HEAPF64[$1808>>3];
  $1810 = $70;
  $1811 = $1809 + $1810;
  $1812 = $71;
  $1813 = $1811 + $1812;
  $1814 = ((($5)) + 184|0);
  $1815 = $72;
  $1816 = (($1814) + ($1815<<3)|0);
  HEAPF64[$1816>>3] = $1813;
  $1817 = $71;
  $70 = $1817;
  $1818 = $72;
  $1819 = (($1818) + 1)|0;
  $72 = $1819;
 }
 $1820 = 0.5 * $1800;
 $55 = $1820;
 $72 = 1;
 while(1) {
  $1821 = $72;
  $1822 = ((($5)) + 1796|0);
  $1823 = HEAP32[$1822>>2]|0;
  $1824 = ($1821|0)<=($1823|0);
  if (!($1824)) {
   break;
  }
  $1825 = $55;
  $1826 = ((($5)) + 184|0);
  $1827 = $72;
  $1828 = (($1826) + ($1827<<3)|0);
  $1829 = +HEAPF64[$1828>>3];
  $1830 = $1829 * $1825;
  HEAPF64[$1828>>3] = $1830;
  $1831 = $72;
  $1832 = (($1831) + 1)|0;
  $72 = $1832;
 }
 _memcpy(($0|0),($5|0),1800)|0;
 STACKTOP = sp;return;
}
function _ROOT_vav_pdf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0.0;
 $14 = $3;
 $15 = $4;
 $16 = +HEAPF64[$15>>3];
 $17 = $14 < $16;
 if (!($17)) {
  $18 = $3;
  $19 = $4;
  $20 = ((($19)) + 64|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $18 > $21;
  if (!($22)) {
   $23 = $4;
   $24 = ((($23)) + 1792|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   do {
    if ($26) {
     $8 = 1.0;
     $27 = $3;
     $28 = $4;
     $29 = ((($28)) + 112|0);
     $30 = +HEAPF64[$29>>3];
     $31 = $27 + $30;
     $32 = $4;
     $33 = ((($32)) + 112|0);
     $34 = ((($33)) + 8|0);
     $35 = +HEAPF64[$34>>3];
     $36 = $31 * $35;
     $9 = $36;
     $37 = $9;
     $38 = ((($7)) + 8|0);
     HEAPF64[$38>>3] = $37;
     $39 = $9;
     $40 = $9;
     $41 = $39 * $40;
     $42 = $41 - 1.0;
     $43 = ((($7)) + 16|0);
     HEAPF64[$43>>3] = $42;
     $6 = 2;
     while(1) {
      $44 = $6;
      $45 = ($44|0)<=(8);
      if (!($45)) {
       break;
      }
      $46 = $8;
      $47 = $46 + 1.0;
      $8 = $47;
      $48 = $9;
      $49 = $6;
      $50 = (($7) + ($49<<3)|0);
      $51 = +HEAPF64[$50>>3];
      $52 = $48 * $51;
      $53 = $8;
      $54 = $6;
      $55 = (($54) - 1)|0;
      $56 = (($7) + ($55<<3)|0);
      $57 = +HEAPF64[$56>>3];
      $58 = $53 * $57;
      $59 = $52 - $58;
      $60 = $6;
      $61 = (($60) + 1)|0;
      $62 = (($7) + ($61<<3)|0);
      HEAPF64[$62>>3] = $59;
      $63 = $6;
      $64 = (($63) + 1)|0;
      $6 = $64;
     }
     $65 = $4;
     $66 = ((($65)) + 112|0);
     $67 = ((($66)) + 56|0);
     $68 = +HEAPF64[$67>>3];
     $69 = ((($7)) + 72|0);
     $70 = +HEAPF64[$69>>3];
     $71 = $68 * $70;
     $72 = 1.0 + $71;
     $10 = $72;
     $6 = 2;
     while(1) {
      $73 = $6;
      $74 = ($73|0)<=(6);
      if (!($74)) {
       break;
      }
      $75 = $4;
      $76 = ((($75)) + 112|0);
      $77 = $6;
      $78 = (($76) + ($77<<3)|0);
      $79 = +HEAPF64[$78>>3];
      $80 = $6;
      $81 = (($80) + 1)|0;
      $82 = (($7) + ($81<<3)|0);
      $83 = +HEAPF64[$82>>3];
      $84 = $79 * $83;
      $85 = $10;
      $86 = $85 + $84;
      $10 = $86;
      $87 = $6;
      $88 = (($87) + 1)|0;
      $6 = $88;
     }
     $89 = $10;
     $90 = $89 > 0.0;
     if ($90) {
      $91 = $4;
      $92 = ((($91)) + 112|0);
      $93 = ((($92)) + 64|0);
      $94 = +HEAPF64[$93>>3];
      $95 = $9;
      $96 = -0.5 * $95;
      $97 = $9;
      $98 = $96 * $97;
      $99 = (+Math_exp((+$98)));
      $100 = $94 * $99;
      $101 = $10;
      $102 = $100 * $101;
      $5 = $102;
     }
    } else {
     $103 = $4;
     $104 = ((($103)) + 1792|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)==(2);
     if ($106) {
      $107 = $3;
      $108 = $3;
      $109 = $107 * $108;
      $11 = $109;
      $110 = $4;
      $111 = ((($110)) + 8|0);
      $112 = +HEAPF64[$111>>3];
      $113 = $4;
      $114 = ((($113)) + 16|0);
      $115 = +HEAPF64[$114>>3];
      $116 = - $115;
      $117 = $3;
      $118 = $4;
      $119 = ((($118)) + 40|0);
      $120 = +HEAPF64[$119>>3];
      $121 = $11;
      $122 = $120 * $121;
      $123 = $117 + $122;
      $124 = $116 * $123;
      $125 = $4;
      $126 = ((($125)) + 24|0);
      $127 = +HEAPF64[$126>>3];
      $128 = $4;
      $129 = ((($128)) + 32|0);
      $130 = +HEAPF64[$129>>3];
      $131 = - $130;
      $132 = $3;
      $133 = $4;
      $134 = ((($133)) + 48|0);
      $135 = +HEAPF64[$134>>3];
      $136 = $11;
      $137 = $135 * $136;
      $138 = $132 + $137;
      $139 = $131 * $138;
      $140 = (+Math_exp((+$139)));
      $141 = $127 * $140;
      $142 = $124 - $141;
      $143 = (+Math_exp((+$142)));
      $144 = $112 * $143;
      $5 = $144;
      break;
     }
     $145 = $4;
     $146 = ((($145)) + 1792|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($147|0)==(3);
     if (!($148)) {
      $204 = $4;
      $205 = ((($204)) + 1792|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = ($206|0)==(4);
      if (!($207)) {
       break;
      }
      $208 = $4;
      $209 = ((($208)) + 104|0);
      $210 = +HEAPF64[$209>>3];
      $211 = $3;
      $212 = (+_gsl_ran_landau_pdf($211));
      $213 = $210 * $212;
      $5 = $213;
      break;
     }
     $149 = $3;
     $150 = $4;
     $151 = ((($150)) + 56|0);
     $152 = +HEAPF64[$151>>3];
     $153 = $149 < $152;
     $154 = $3;
     if ($153) {
      $155 = $3;
      $156 = $154 * $155;
      $12 = $156;
      $157 = $4;
      $158 = ((($157)) + 8|0);
      $159 = +HEAPF64[$158>>3];
      $160 = $4;
      $161 = ((($160)) + 16|0);
      $162 = +HEAPF64[$161>>3];
      $163 = - $162;
      $164 = $3;
      $165 = $4;
      $166 = ((($165)) + 40|0);
      $167 = +HEAPF64[$166>>3];
      $168 = $12;
      $169 = $167 * $168;
      $170 = $164 + $169;
      $171 = $163 * $170;
      $172 = $4;
      $173 = ((($172)) + 24|0);
      $174 = +HEAPF64[$173>>3];
      $175 = $4;
      $176 = ((($175)) + 32|0);
      $177 = +HEAPF64[$176>>3];
      $178 = - $177;
      $179 = $3;
      $180 = $4;
      $181 = ((($180)) + 48|0);
      $182 = +HEAPF64[$181>>3];
      $183 = $12;
      $184 = $182 * $183;
      $185 = $179 + $184;
      $186 = $178 * $185;
      $187 = (+Math_exp((+$186)));
      $188 = $174 * $187;
      $189 = $171 - $188;
      $190 = (+Math_exp((+$189)));
      $191 = $159 * $190;
      $5 = $191;
      break;
     } else {
      $192 = 1.0 / $154;
      $13 = $192;
      $193 = $4;
      $194 = ((($193)) + 88|0);
      $195 = +HEAPF64[$194>>3];
      $196 = $13;
      $197 = $195 * $196;
      $198 = $4;
      $199 = ((($198)) + 96|0);
      $200 = +HEAPF64[$199>>3];
      $201 = $197 + $200;
      $202 = $13;
      $203 = $201 * $202;
      $5 = $203;
      break;
     }
    }
   } while(0);
   $214 = $5;
   $2 = $214;
   $215 = $2;
   STACKTOP = sp;return (+$215);
  }
 }
 $2 = 0.0;
 $215 = $2;
 STACKTOP = sp;return (+$215);
}
function _ROOT_val_idf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0;
 var $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0;
 var $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0;
 var $262 = 0.0, $263 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $21 = $2;
 $22 = 2.0 * $21;
 $23 = $3;
 $24 = ((($23)) + 72|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $22 / $25;
 $4 = $26;
 $27 = $3;
 $28 = +HEAPF64[$27>>3];
 $5 = $28;
 $6 = 0.0;
 $7 = 0.0;
 $8 = 0.0;
 $10 = 1;
 while(1) {
  $29 = $10;
  $30 = $3;
  $31 = ((($30)) + 1796|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<=($32|0);
  if (!($33)) {
   break;
  }
  $34 = $3;
  $35 = ((($34)) + 72|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $5;
  $38 = $37 + $36;
  $5 = $38;
  $39 = $3;
  $40 = ((($39)) + 1792|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(1);
  do {
   if ($42) {
    $11 = 1.0;
    $43 = $5;
    $44 = $3;
    $45 = ((($44)) + 112|0);
    $46 = +HEAPF64[$45>>3];
    $47 = $43 + $46;
    $48 = $3;
    $49 = ((($48)) + 112|0);
    $50 = ((($49)) + 8|0);
    $51 = +HEAPF64[$50>>3];
    $52 = $47 * $51;
    $12 = $52;
    $53 = $12;
    $54 = ((($9)) + 8|0);
    HEAPF64[$54>>3] = $53;
    $55 = $12;
    $56 = $12;
    $57 = $55 * $56;
    $58 = $57 - 1.0;
    $59 = ((($9)) + 16|0);
    HEAPF64[$59>>3] = $58;
    $13 = 2;
    while(1) {
     $60 = $13;
     $61 = ($60|0)<=(8);
     if (!($61)) {
      break;
     }
     $62 = $11;
     $63 = $62 + 1.0;
     $11 = $63;
     $64 = $12;
     $65 = $13;
     $66 = (($9) + ($65<<3)|0);
     $67 = +HEAPF64[$66>>3];
     $68 = $64 * $67;
     $69 = $11;
     $70 = $13;
     $71 = (($70) - 1)|0;
     $72 = (($9) + ($71<<3)|0);
     $73 = +HEAPF64[$72>>3];
     $74 = $69 * $73;
     $75 = $68 - $74;
     $76 = $13;
     $77 = (($76) + 1)|0;
     $78 = (($9) + ($77<<3)|0);
     HEAPF64[$78>>3] = $75;
     $79 = $13;
     $80 = (($79) + 1)|0;
     $13 = $80;
    }
    $81 = $3;
    $82 = ((($81)) + 112|0);
    $83 = ((($82)) + 56|0);
    $84 = +HEAPF64[$83>>3];
    $85 = ((($9)) + 72|0);
    $86 = +HEAPF64[$85>>3];
    $87 = $84 * $86;
    $88 = 1.0 + $87;
    $14 = $88;
    $15 = 2;
    while(1) {
     $89 = $15;
     $90 = ($89|0)<=(6);
     if (!($90)) {
      break;
     }
     $91 = $3;
     $92 = ((($91)) + 112|0);
     $93 = $15;
     $94 = (($92) + ($93<<3)|0);
     $95 = +HEAPF64[$94>>3];
     $96 = $15;
     $97 = (($96) + 1)|0;
     $98 = (($9) + ($97<<3)|0);
     $99 = +HEAPF64[$98>>3];
     $100 = $95 * $99;
     $101 = $14;
     $102 = $101 + $100;
     $14 = $102;
     $103 = $15;
     $104 = (($103) + 1)|0;
     $15 = $104;
    }
    $105 = $14;
    $106 = $105 > 0.0;
    if ($106) {
     $107 = $3;
     $108 = ((($107)) + 112|0);
     $109 = ((($108)) + 64|0);
     $110 = +HEAPF64[$109>>3];
     $111 = $12;
     $112 = -0.5 * $111;
     $113 = $12;
     $114 = $112 * $113;
     $115 = (+Math_exp((+$114)));
     $116 = $110 * $115;
     $117 = $14;
     $118 = $116 * $117;
     $7 = $118;
    }
   } else {
    $119 = $3;
    $120 = ((($119)) + 1792|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(2);
    if ($122) {
     $123 = $5;
     $124 = $5;
     $125 = $123 * $124;
     $16 = $125;
     $126 = $3;
     $127 = ((($126)) + 8|0);
     $128 = +HEAPF64[$127>>3];
     $129 = $3;
     $130 = ((($129)) + 16|0);
     $131 = +HEAPF64[$130>>3];
     $132 = - $131;
     $133 = $5;
     $134 = $3;
     $135 = ((($134)) + 40|0);
     $136 = +HEAPF64[$135>>3];
     $137 = $16;
     $138 = $136 * $137;
     $139 = $133 + $138;
     $140 = $132 * $139;
     $141 = $3;
     $142 = ((($141)) + 24|0);
     $143 = +HEAPF64[$142>>3];
     $144 = $3;
     $145 = ((($144)) + 32|0);
     $146 = +HEAPF64[$145>>3];
     $147 = - $146;
     $148 = $5;
     $149 = $3;
     $150 = ((($149)) + 48|0);
     $151 = +HEAPF64[$150>>3];
     $152 = $16;
     $153 = $151 * $152;
     $154 = $148 + $153;
     $155 = $147 * $154;
     $156 = (+Math_exp((+$155)));
     $157 = $143 * $156;
     $158 = $140 - $157;
     $159 = (+Math_exp((+$158)));
     $160 = $128 * $159;
     $7 = $160;
     break;
    }
    $161 = $3;
    $162 = ((($161)) + 1792|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==(3);
    if (!($164)) {
     $220 = $3;
     $221 = ((($220)) + 104|0);
     $222 = +HEAPF64[$221>>3];
     $223 = $5;
     $224 = (+_gsl_ran_landau_pdf($223));
     $225 = $222 * $224;
     $7 = $225;
     break;
    }
    $165 = $5;
    $166 = $3;
    $167 = ((($166)) + 56|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $165 < $168;
    $170 = $5;
    if ($169) {
     $171 = $5;
     $172 = $170 * $171;
     $17 = $172;
     $173 = $3;
     $174 = ((($173)) + 8|0);
     $175 = +HEAPF64[$174>>3];
     $176 = $3;
     $177 = ((($176)) + 16|0);
     $178 = +HEAPF64[$177>>3];
     $179 = - $178;
     $180 = $5;
     $181 = $3;
     $182 = ((($181)) + 40|0);
     $183 = +HEAPF64[$182>>3];
     $184 = $17;
     $185 = $183 * $184;
     $186 = $180 + $185;
     $187 = $179 * $186;
     $188 = $3;
     $189 = ((($188)) + 24|0);
     $190 = +HEAPF64[$189>>3];
     $191 = $3;
     $192 = ((($191)) + 32|0);
     $193 = +HEAPF64[$192>>3];
     $194 = - $193;
     $195 = $5;
     $196 = $3;
     $197 = ((($196)) + 48|0);
     $198 = +HEAPF64[$197>>3];
     $199 = $17;
     $200 = $198 * $199;
     $201 = $195 + $200;
     $202 = $194 * $201;
     $203 = (+Math_exp((+$202)));
     $204 = $190 * $203;
     $205 = $187 - $204;
     $206 = (+Math_exp((+$205)));
     $207 = $175 * $206;
     $7 = $207;
     break;
    } else {
     $208 = 1.0 / $170;
     $18 = $208;
     $209 = $3;
     $210 = ((($209)) + 88|0);
     $211 = +HEAPF64[$210>>3];
     $212 = $18;
     $213 = $211 * $212;
     $214 = $3;
     $215 = ((($214)) + 96|0);
     $216 = +HEAPF64[$215>>3];
     $217 = $213 + $216;
     $218 = $18;
     $219 = $217 * $218;
     $7 = $219;
     break;
    }
   }
  } while(0);
  $226 = $6;
  $227 = $7;
  $228 = $226 + $227;
  $229 = $8;
  $230 = $229 + $228;
  $8 = $230;
  $231 = $8;
  $232 = $4;
  $233 = $231 > $232;
  if ($233) {
   break;
  }
  $234 = $7;
  $6 = $234;
  $235 = $10;
  $236 = (($235) + 1)|0;
  $10 = $236;
 }
 $237 = $8;
 $238 = $6;
 $239 = $237 - $238;
 $240 = $7;
 $241 = $239 - $240;
 $19 = $241;
 $242 = $5;
 $243 = $3;
 $244 = ((($243)) + 72|0);
 $245 = +HEAPF64[$244>>3];
 $246 = $242 - $245;
 $20 = $246;
 $247 = $8;
 $248 = $19;
 $249 = $247 > $248;
 if (!($249)) {
  $263 = $20;
  STACKTOP = sp;return (+$263);
 }
 $250 = $3;
 $251 = ((($250)) + 72|0);
 $252 = +HEAPF64[$251>>3];
 $253 = $4;
 $254 = $19;
 $255 = $253 - $254;
 $256 = $252 * $255;
 $257 = $8;
 $258 = $19;
 $259 = $257 - $258;
 $260 = $256 / $259;
 $261 = $20;
 $262 = $261 + $260;
 $20 = $262;
 $263 = $20;
 STACKTOP = sp;return (+$263);
}
function __AT_dose_Bortfeld_Gy_negative($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $2;
  $10 = $4;
  $11 = +HEAPF64[$10>>3];
  $12 = $4;
  $13 = ((($12)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $4;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = ((($18)) + 24|0);
  $20 = +HEAPF64[$19>>3];
  $21 = (+_AT_dose_Bortfeld_Gy_single($9,1.0E+9,$11,$14,$17,$20));
  $22 = - $21;
  $5 = $22;
  $23 = $5;
  STACKTOP = sp;return (+$23);
 } else {
  ___assert_fail((75204|0),(75219|0),42,(75268|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_max_location_Bortfeld_cm($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $11 = sp + 24|0;
 $20 = sp + 104|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $21 = $6;
 $22 = (+_AT_p_MeV_from_material_no($21));
 $8 = $22;
 $23 = $6;
 $24 = (+_AT_alpha_g_cm2_MeV_from_material_no($23));
 $9 = $24;
 $25 = $9;
 $26 = $4;
 $27 = $8;
 $28 = (+Math_pow((+$26),(+$27)));
 $29 = $25 * $28;
 $10 = $29;
 $30 = $4;
 HEAPF64[$11>>3] = $30;
 $31 = $5;
 $32 = ((($11)) + 8|0);
 HEAPF64[$32>>3] = $31;
 $33 = $6;
 $34 = ((($11)) + 16|0);
 HEAP32[$34>>2] = $33;
 $35 = $7;
 $36 = ((($11)) + 24|0);
 HEAPF64[$36>>3] = $35;
 $13 = 0;
 $14 = 100;
 $37 = $10;
 $17 = $37;
 $18 = 0.0;
 $38 = $10;
 $39 = 2.0 * $38;
 $19 = $39;
 HEAP32[$20>>2] = 44;
 $40 = ((($20)) + 4|0);
 HEAP32[$40>>2] = $11;
 $15 = 67528;
 $41 = $15;
 $42 = (_gsl_min_fminimizer_alloc($41)|0);
 $16 = $42;
 $43 = $16;
 $44 = $17;
 $45 = $18;
 $46 = $19;
 (_gsl_min_fminimizer_set($43,$20,$44,$45,$46)|0);
 while(1) {
  $47 = $13;
  $48 = (($47) + 1)|0;
  $13 = $48;
  $49 = $16;
  $50 = (_gsl_min_fminimizer_iterate($49)|0);
  $12 = $50;
  $51 = $16;
  $52 = (+_gsl_min_fminimizer_x_minimum($51));
  $17 = $52;
  $53 = $16;
  $54 = (+_gsl_min_fminimizer_x_lower($53));
  $18 = $54;
  $55 = $16;
  $56 = (+_gsl_min_fminimizer_x_upper($55));
  $19 = $56;
  $57 = $18;
  $58 = $19;
  $59 = (_gsl_min_test_interval($57,$58,9.9999999999999995E-7,0.0)|0);
  $12 = $59;
  $60 = $12;
  $61 = ($60|0)==(-2);
  if (!($61)) {
   label = 4;
   break;
  }
  $62 = $13;
  $63 = $14;
  $64 = ($62|0)<($63|0);
  if (!($64)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $65 = $16;
  _gsl_min_fminimizer_free($65);
  $66 = $17;
  STACKTOP = sp;return (+$66);
 }
 return +(0.0);
}
function __AT_dose_Bortfeld_Gy_root($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $2;
  $10 = - $9;
  $11 = $4;
  $12 = +HEAPF64[$11>>3];
  $13 = $4;
  $14 = ((($13)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $4;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $4;
  $20 = ((($19)) + 32|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (+_AT_dose_Bortfeld_Gy_single($10,1.0E+9,$12,$15,$18,$21));
  $5 = $22;
  $23 = $4;
  $24 = ((($23)) + 24|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $5;
  $27 = $26 - $25;
  $5 = $27;
  $28 = $5;
  STACKTOP = sp;return (+$28);
 } else {
  ___assert_fail((75204|0),(75219|0),119,(75298|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_range_Bortfeld_cm($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0;
 var $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $17 = sp + 32|0;
 $24 = sp + 144|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $28 = $9;
 $29 = (+_AT_p_MeV_from_material_no($28));
 $13 = $29;
 $30 = $9;
 $31 = (+_AT_alpha_g_cm2_MeV_from_material_no($30));
 $14 = $31;
 $32 = $14;
 $33 = $7;
 $34 = $13;
 $35 = (+Math_pow((+$33),(+$34)));
 $36 = $32 * $35;
 $15 = $36;
 $37 = $11;
 $16 = $37;
 $38 = $16;
 $39 = $38 < 0.0;
 if ($39) {
  $16 = 0.80000000000000004;
 }
 $40 = $7;
 HEAPF64[$17>>3] = $40;
 $41 = $8;
 $42 = ((($17)) + 8|0);
 HEAPF64[$42>>3] = $41;
 $43 = $9;
 $44 = ((($17)) + 16|0);
 HEAP32[$44>>2] = $43;
 $45 = $10;
 $46 = ((($17)) + 32|0);
 HEAPF64[$46>>3] = $45;
 $47 = ((($17)) + 24|0);
 HEAPF64[$47>>3] = 0.0;
 $48 = $7;
 $49 = $8;
 $50 = $9;
 $51 = $10;
 $52 = (+_AT_max_location_Bortfeld_cm($48,$49,$50,$51));
 $18 = $52;
 $53 = $16;
 $54 = $18;
 $55 = - $54;
 $56 = (+__AT_dose_Bortfeld_Gy_root($55,$17));
 $57 = $53 * $56;
 $58 = ((($17)) + 24|0);
 HEAPF64[$58>>3] = $57;
 $20 = 0;
 $21 = 100;
 HEAP32[$24>>2] = 45;
 $59 = ((($24)) + 4|0);
 HEAP32[$59>>2] = $17;
 $60 = $15;
 $61 = - $60;
 $25 = $61;
 $62 = $15;
 $63 = -2.0 * $62;
 $26 = $63;
 $64 = $18;
 $65 = - $64;
 $27 = $65;
 $66 = $12;
 $67 = $66 << 16 >> 16;
 $68 = ($67|0)<(0);
 if ($68) {
  $69 = $18;
  $70 = - $69;
  $26 = $70;
  $27 = 0.0;
  $71 = $26;
  $72 = $27;
  $73 = $71 + $72;
  $74 = 0.5 * $73;
  $25 = $74;
  $75 = HEAP32[$24>>2]|0;
  $76 = $26;
  $77 = ((($24)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (+FUNCTION_TABLE_ddi[$75 & 63]($76,$78));
  $80 = HEAP32[$24>>2]|0;
  $81 = $27;
  $82 = ((($24)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (+FUNCTION_TABLE_ddi[$80 & 63]($81,$83));
  $85 = $79 * $84;
  $86 = $85 > 0.0;
  if ($86) {
   $6 = 0.0;
   $113 = $6;
   STACKTOP = sp;return (+$113);
  }
 }
 $22 = 67708;
 $87 = $22;
 $88 = (_gsl_root_fsolver_alloc($87)|0);
 $23 = $88;
 $89 = $23;
 $90 = $26;
 $91 = $27;
 (_gsl_root_fsolver_set($89,$24,$90,$91)|0);
 while(1) {
  $92 = $20;
  $93 = (($92) + 1)|0;
  $20 = $93;
  $94 = $23;
  $95 = (_gsl_root_fsolver_iterate($94)|0);
  $19 = $95;
  $96 = $23;
  $97 = (+_gsl_root_fsolver_root($96));
  $25 = $97;
  $98 = $23;
  $99 = (+_gsl_root_fsolver_x_lower($98));
  $26 = $99;
  $100 = $23;
  $101 = (+_gsl_root_fsolver_x_upper($100));
  $27 = $101;
  $102 = $26;
  $103 = $27;
  $104 = (_gsl_root_test_interval($102,$103,0.0,9.9999999999999995E-7)|0);
  $19 = $104;
  $105 = $19;
  $106 = ($105|0)==(-2);
  if (!($106)) {
   break;
  }
  $107 = $20;
  $108 = $21;
  $109 = ($107|0)<($108|0);
  if (!($109)) {
   break;
  }
 }
 $110 = $23;
 _gsl_root_fsolver_free($110);
 $111 = $25;
 $112 = - $111;
 $6 = $112;
 $113 = $6;
 STACKTOP = sp;return (+$113);
}
function _AT_fwhm_Bortfeld_cm($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = (+_AT_range_Bortfeld_cm($11,$12,$13,$14,0.5,1));
 $8 = $15;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = (+_AT_range_Bortfeld_cm($16,$17,$18,$19,0.5,-1));
 $9 = $20;
 $21 = $9;
 $22 = $21 == 0.0;
 if ($22) {
  $10 = inf;
  $26 = $10;
  STACKTOP = sp;return (+$26);
 } else {
  $23 = $8;
  $24 = $9;
  $25 = $23 - $24;
  $10 = $25;
  $26 = $10;
  STACKTOP = sp;return (+$26);
 }
 return +(0.0);
}
function _AT_max_plateau_Bortfeld($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = (+_AT_dose_Bortfeld_Gy_single(0.0,1.0E+8,$11,$12,$13,$14));
 $8 = $15;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = (+_AT_max_location_Bortfeld_cm($16,$17,$18,$19));
 $9 = $20;
 $21 = $9;
 $22 = $4;
 $23 = $5;
 $24 = $6;
 $25 = $7;
 $26 = (+_AT_dose_Bortfeld_Gy_single($21,1.0E+8,$22,$23,$24,$25));
 $10 = $26;
 $27 = $10;
 $28 = $8;
 $29 = $27 / $28;
 STACKTOP = sp;return (+$29);
}
function __AT_range_Bortfeld_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $4 = $8;
  $9 = $2;
  $10 = $4;
  $11 = ((($10)) + 8|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $4;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $4;
  $17 = ((($16)) + 32|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $4;
  $20 = ((($19)) + 24|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (+_AT_range_Bortfeld_cm($9,$12,$15,$18,$21,1));
  $5 = $22;
  $23 = $4;
  $24 = +HEAPF64[$23>>3];
  $25 = $5;
  $26 = $25 - $24;
  $5 = $26;
  $27 = $5;
  STACKTOP = sp;return (+$27);
 } else {
  ___assert_fail((75204|0),(75219|0),284,(75324|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_energy_Bortfeld_MeV_u($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0;
 var $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $15 = sp + 24|0;
 $24 = sp + 136|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $25 = $6;
 $26 = $25 == 0.0;
 if ($26) {
  $5 = 0.0;
  $80 = $5;
  STACKTOP = sp;return (+$80);
 }
 $27 = $8;
 $28 = (+_AT_p_MeV_from_material_no($27));
 $11 = $28;
 $29 = $8;
 $30 = (+_AT_alpha_g_cm2_MeV_from_material_no($29));
 $12 = $30;
 $31 = $6;
 $32 = $12;
 $33 = $31 / $32;
 $34 = $11;
 $35 = 1.0 / $34;
 $36 = (+Math_pow((+$33),(+$35)));
 $13 = $36;
 $37 = $10;
 $14 = $37;
 $38 = $14;
 $39 = $38 < 0.0;
 if ($39) {
  $14 = 0.80000000000000004;
 }
 $40 = $6;
 HEAPF64[$15>>3] = $40;
 $41 = $7;
 $42 = ((($15)) + 8|0);
 HEAPF64[$42>>3] = $41;
 $43 = $8;
 $44 = ((($15)) + 16|0);
 HEAP32[$44>>2] = $43;
 $45 = $9;
 $46 = ((($15)) + 32|0);
 HEAPF64[$46>>3] = $45;
 $47 = $10;
 $48 = ((($15)) + 24|0);
 HEAPF64[$48>>3] = $47;
 $17 = 0;
 $18 = 100;
 $49 = $13;
 $21 = $49;
 $50 = $13;
 $51 = 0.5 * $50;
 $22 = $51;
 $52 = $13;
 $53 = 2.0 * $52;
 $23 = $53;
 HEAP32[$24>>2] = 46;
 $54 = ((($24)) + 4|0);
 HEAP32[$54>>2] = $15;
 $19 = 67708;
 $55 = $19;
 $56 = (_gsl_root_fsolver_alloc($55)|0);
 $20 = $56;
 $57 = $20;
 $58 = $22;
 $59 = $23;
 (_gsl_root_fsolver_set($57,$24,$58,$59)|0);
 while(1) {
  $60 = $17;
  $61 = (($60) + 1)|0;
  $17 = $61;
  $62 = $20;
  $63 = (_gsl_root_fsolver_iterate($62)|0);
  $16 = $63;
  $64 = $20;
  $65 = (+_gsl_root_fsolver_root($64));
  $21 = $65;
  $66 = $20;
  $67 = (+_gsl_root_fsolver_x_lower($66));
  $22 = $67;
  $68 = $20;
  $69 = (+_gsl_root_fsolver_x_upper($68));
  $23 = $69;
  $70 = $22;
  $71 = $23;
  $72 = (_gsl_root_test_interval($70,$71,0.0,9.9999999999999995E-7)|0);
  $16 = $72;
  $73 = $16;
  $74 = ($73|0)==(-2);
  if (!($74)) {
   break;
  }
  $75 = $17;
  $76 = $18;
  $77 = ($75|0)<($76|0);
  if (!($77)) {
   break;
  }
 }
 $78 = $20;
 _gsl_root_fsolver_free($78);
 $79 = $21;
 $5 = $79;
 $80 = $5;
 STACKTOP = sp;return (+$80);
}
function __AT_real2interval($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 > 10.0;
 if ($4) {
  $5 = (+Math_atan(10.0));
  $6 = 0.31830988618379069 * $5;
  $7 = $6 + 0.5;
  $8 = 0.20000000000000001 * $7;
  $1 = $8;
  $14 = $1;
  STACKTOP = sp;return (+$14);
 } else {
  $9 = $2;
  $10 = (+Math_atan((+$9)));
  $11 = 0.31830988618379069 * $10;
  $12 = $11 + 0.5;
  $13 = 0.20000000000000001 * $12;
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return (+$14);
 }
 return +(0.0);
}
function __AT_interval2real($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 / 0.20000000000000001;
 $4 = $3 - 0.5;
 $5 = 3.1415926535897931 * $4;
 $6 = (+Math_tan((+$5)));
 STACKTOP = sp;return (+$6);
}
function __AT_chi2_range_fwhm_maxplat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = $3;
 $14 = (+_gsl_vector_get($13,0));
 $6 = $14;
 $15 = $3;
 $16 = (+_gsl_vector_get($15,1));
 $7 = $16;
 $17 = $3;
 $18 = (+_gsl_vector_get($17,2));
 $19 = (+__AT_real2interval($18));
 $8 = $19;
 $20 = $4;
 $9 = $20;
 $21 = $6;
 $22 = $7;
 $23 = $9;
 $24 = ((($23)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $8;
 $27 = $9;
 $28 = ((($27)) + 40|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+_AT_range_Bortfeld_cm($21,$22,$25,$26,$29,1));
 $10 = $30;
 $31 = $6;
 $32 = $7;
 $33 = $9;
 $34 = ((($33)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $8;
 $37 = (+_AT_fwhm_Bortfeld_cm($31,$32,$35,$36));
 $11 = $37;
 $38 = $6;
 $39 = $7;
 $40 = $9;
 $41 = ((($40)) + 24|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $8;
 $44 = (+_AT_max_plateau_Bortfeld($38,$39,$42,$43));
 $12 = $44;
 $45 = $5;
 $46 = $10;
 $47 = $9;
 $48 = +HEAPF64[$47>>3];
 $49 = $46 - $48;
 $50 = 10.0 * $49;
 $51 = $9;
 $52 = +HEAPF64[$51>>3];
 $53 = $50 / $52;
 _gsl_vector_set($45,0,$53);
 $54 = $5;
 $55 = $11;
 $56 = $9;
 $57 = ((($56)) + 8|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $55 - $58;
 $60 = 1.0 * $59;
 $61 = $9;
 $62 = ((($61)) + 8|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $60 / $63;
 _gsl_vector_set($54,1,$64);
 $65 = $5;
 $66 = $12;
 $67 = $9;
 $68 = ((($67)) + 16|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $66 - $69;
 $71 = 1.0 * $70;
 $72 = $9;
 $73 = ((($72)) + 16|0);
 $74 = +HEAPF64[$73>>3];
 $75 = $71 / $74;
 _gsl_vector_set($65,2,$75);
 STACKTOP = sp;return 0;
}
function _callback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return;
}
function _AT_fit_Bortfeld($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0;
 var $70 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $23 = sp + 56|0;
 $24 = sp + 172|0;
 $25 = sp + 168|0;
 $26 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 3;
 $17 = 3;
 $18 = 500;
 $19 = 1.0E-8;
 $20 = 1.0E-8;
 $21 = 1.0E-8;
 $29 = (_gsl_vector_alloc(3)|0);
 $22 = $29;
 $30 = $22;
 _gsl_vector_set($30,0,100.0);
 $31 = $22;
 _gsl_vector_set($31,1,1.5);
 $32 = $22;
 $33 = (+__AT_interval2real(0.02));
 _gsl_vector_set($32,2,$33);
 $34 = $8;
 HEAPF64[$23>>3] = $34;
 $35 = $9;
 $36 = ((($23)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = $10;
 $38 = ((($23)) + 16|0);
 HEAPF64[$38>>3] = $37;
 $39 = $11;
 $40 = ((($23)) + 24|0);
 HEAP32[$40>>2] = $39;
 $41 = ((($23)) + 32|0);
 HEAPF64[$41>>3] = -1.0;
 $42 = $12;
 $43 = ((($23)) + 40|0);
 HEAPF64[$43>>3] = $42;
 HEAP32[$24>>2] = 47;
 $44 = ((($24)) + 4|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($24)) + 8|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($24)) + 12|0);
 HEAP32[$46>>2] = 3;
 $47 = ((($24)) + 16|0);
 HEAP32[$47>>2] = 3;
 $48 = ((($24)) + 20|0);
 HEAP32[$48>>2] = $23;
 _gsl_multifit_nlinear_default_parameters($26);
 HEAP32[$26>>2] = 67576;
 $27 = 67652;
 $49 = $27;
 $50 = (_gsl_multifit_nlinear_alloc($49,$26,3,3)|0);
 $28 = $50;
 $51 = $22;
 $52 = $28;
 (_gsl_multifit_nlinear_init($51,$24,$52)|0);
 $53 = $28;
 (_gsl_multifit_nlinear_driver(500,1.0E-8,1.0E-8,1.0E-8,48,$23,$25,$53)|0);
 $54 = $28;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (+_gsl_vector_get($56,0));
 $58 = $13;
 HEAPF64[$58>>3] = $57;
 $59 = $28;
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (+_gsl_vector_get($61,1));
 $63 = $14;
 HEAPF64[$63>>3] = $62;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (+_gsl_vector_get($66,2));
 $68 = (+__AT_real2interval($67));
 $69 = $15;
 HEAPF64[$69>>3] = $68;
 $70 = $28;
 _gsl_multifit_nlinear_free($70);
 STACKTOP = sp;return;
}
function _AT_dose_Bortfeld_Gy_single($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $17 = sp + 80|0;
 $18 = sp + 72|0;
 $26 = sp + 8|0;
 $27 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0.012;
 $13 = 0.59999999999999998;
 $28 = $10;
 $29 = (+_AT_p_MeV_from_material_no($28));
 $14 = $29;
 $30 = $10;
 $31 = (+_AT_alpha_g_cm2_MeV_from_material_no($30));
 $15 = $31;
 $32 = $15;
 $33 = $8;
 $34 = $14;
 $35 = (+Math_pow((+$33),(+$34)));
 $36 = $32 * $35;
 $16 = $36;
 $37 = $14;
 $38 = 1.0 / $37;
 HEAPF64[$17>>3] = $38;
 $39 = $14;
 $40 = 1.0 / $39;
 $41 = 1.0 + $40;
 HEAPF64[$18>>3] = $41;
 $42 = $9;
 $19 = $42;
 $43 = $9;
 $44 = $43 < 0.0;
 if ($44) {
  $45 = $8;
  $46 = 0.01 * $45;
  $19 = $46;
 }
 $47 = $11;
 $20 = $47;
 $48 = $11;
 $49 = $48 < 0.0;
 if ($49) {
  $20 = 0.029999999999999999;
 }
 $50 = $16;
 $51 = (+Math_pow((+$50),0.93500000000000005));
 $52 = 0.012 * $51;
 $21 = $52;
 $53 = $21;
 $54 = $21;
 $55 = $53 * $54;
 $56 = $19;
 $57 = $15;
 $58 = $56 * $57;
 $59 = $14;
 $60 = $58 * $59;
 $61 = $8;
 $62 = $14;
 $63 = $62 - 1.0;
 $64 = (+Math_pow((+$61),(+$63)));
 $65 = $60 * $64;
 $66 = (+Math_pow((+$65),2.0));
 $67 = $55 + $66;
 $68 = (+Math_sqrt((+$67)));
 $22 = $68;
 $69 = $7;
 $23 = $69;
 $70 = $6;
 $71 = $16;
 $72 = $22;
 $73 = +HEAPF64[$17>>3];
 $74 = (+_AT_range_straggling_convolution($70,$71,$72,$73));
 $24 = $74;
 $75 = $6;
 $76 = $16;
 $77 = $22;
 $78 = +HEAPF64[$18>>3];
 $79 = (+_AT_range_straggling_convolution($75,$76,$77,$78));
 $25 = $79;
 $80 = $14;
 $81 = 0.012 / $80;
 $82 = $81 + 0.0071999999999999998;
 $83 = $20;
 $84 = $16;
 $85 = $83 / $84;
 $86 = $82 + $85;
 $87 = $25;
 $88 = $87 * $86;
 $25 = $88;
 $89 = $22;
 $90 = $25;
 $91 = $90 * $89;
 $25 = $91;
 (_AT_gamma_($17,$26)|0);
 $92 = +HEAPF64[$26>>3];
 $93 = $25;
 $94 = $93 * $92;
 $25 = $94;
 (_AT_gamma_($18,$27)|0);
 $95 = +HEAPF64[$27>>3];
 $96 = $25;
 $97 = $96 / $95;
 $25 = $97;
 $98 = $10;
 $99 = (+_AT_density_g_cm3_from_material_no($98));
 $100 = $23;
 $101 = $100 / $99;
 $23 = $101;
 $102 = $14;
 $103 = $15;
 $104 = +HEAPF64[$17>>3];
 $105 = (+Math_pow((+$103),(+$104)));
 $106 = $102 * $105;
 $107 = $23;
 $108 = $107 / $106;
 $23 = $108;
 $109 = $16;
 $110 = 0.012 * $109;
 $111 = 1.0 + $110;
 $112 = $23;
 $113 = $112 / $111;
 $23 = $113;
 $114 = $24;
 $115 = $25;
 $116 = $114 + $115;
 $117 = $23;
 $118 = $117 * $116;
 $23 = $118;
 $119 = $23;
 $120 = $119 * 1.6021766000000001E-10;
 $23 = $120;
 $121 = $23;
 STACKTOP = sp;return (+$121);
}
function _AT_dose_Bortfeld_Gy_multi($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = +$6;
 $7 = $7|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0;
 while(1) {
  $17 = $16;
  $18 = $8;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $9;
  $21 = $16;
  $22 = (($20) + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $10;
  $25 = $11;
  $26 = $12;
  $27 = $13;
  $28 = $14;
  $29 = (+_AT_dose_Bortfeld_Gy_single($23,$24,$25,$26,$27,$28));
  $30 = $15;
  $31 = $16;
  $32 = (($30) + ($31<<3)|0);
  HEAPF64[$32>>3] = $29;
  $33 = $16;
  $34 = (($33) + 1)|0;
  $16 = $34;
 }
 STACKTOP = sp;return;
}
function _AT_LET_t_Wilkens_keV_um_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $14 = 0.0, $15 = 0.0;
 var $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $21 = $7;
 $22 = (+_AT_p_MeV_from_material_no($21));
 $8 = $22;
 $23 = $7;
 $24 = (+_AT_alpha_g_cm2_MeV_from_material_no($23));
 $9 = $24;
 $25 = $9;
 $26 = $5;
 $27 = $8;
 $28 = (+Math_pow((+$26),(+$27)));
 $29 = $25 * $28;
 $10 = $29;
 $11 = 2.0000000000000001E-4;
 $30 = $8;
 $31 = 1.0 / $30;
 $32 = 1.0 + $31;
 $12 = $32;
 $33 = $6;
 $13 = $33;
 $34 = $6;
 $35 = $34 < 0.0;
 if ($35) {
  $36 = $5;
  $37 = 0.01 * $36;
  $13 = $37;
 }
 $38 = $10;
 $39 = (+Math_pow((+$38),0.93500000000000005));
 $40 = 0.012 * $39;
 $14 = $40;
 $41 = $14;
 $42 = $14;
 $43 = $41 * $42;
 $44 = $13;
 $45 = $9;
 $46 = $44 * $45;
 $47 = $8;
 $48 = $46 * $47;
 $49 = $5;
 $50 = $8;
 $51 = $50 - 1.0;
 $52 = (+Math_pow((+$49),(+$51)));
 $53 = $48 * $52;
 $54 = (+Math_pow((+$53),2.0));
 $55 = $43 + $54;
 $56 = (+Math_sqrt((+$55)));
 $15 = $56;
 $57 = $4;
 $58 = $10;
 $59 = $57 - $58;
 $60 = $15;
 $61 = $59 / $60;
 $16 = $61;
 $62 = $4;
 $63 = $10;
 $64 = $62 - $63;
 $65 = $11;
 $66 = $64 - $65;
 $67 = $15;
 $68 = $66 / $67;
 $17 = $68;
 $18 = 1.0;
 $69 = $15;
 $70 = $11;
 $71 = $69 * $70;
 $72 = $9;
 $73 = $8;
 $74 = 1.0 / $73;
 $75 = (+Math_pow((+$72),(+$74)));
 $76 = $71 * $75;
 $77 = $18;
 $78 = $77 / $76;
 $18 = $78;
 $79 = $15;
 $80 = 2.5066282746310007 * $79;
 $19 = $80;
 $81 = $4;
 $82 = $10;
 $83 = $11;
 $84 = $82 + $83;
 $85 = $15;
 $86 = $12;
 $87 = (+_AT_range_straggling_convolution($81,$84,$85,$86));
 $88 = $4;
 $89 = $10;
 $90 = $15;
 $91 = $12;
 $92 = (+_AT_range_straggling_convolution($88,$89,$90,$91));
 $93 = $87 - $92;
 $94 = $19;
 $95 = $94 * $93;
 $19 = $95;
 $96 = $11;
 $97 = $11;
 $98 = $97 / 2.0;
 $99 = $8;
 $100 = 1.0 / $99;
 $101 = (+Math_pow((+$98),(+$100)));
 $102 = $96 * $101;
 $103 = $16;
 $104 = $17;
 $105 = $103 + $104;
 $106 = - $105;
 $107 = $16;
 $108 = $17;
 $109 = $107 + $108;
 $110 = $106 * $109;
 $111 = $110 / 8.0;
 $112 = (+Math_exp((+$111)));
 $113 = $102 * $112;
 $114 = $19;
 $115 = $114 - $113;
 $19 = $115;
 $116 = $19;
 $117 = $116 < 0.0;
 if ($117) {
  $19 = 0.0;
 }
 $118 = $4;
 $119 = $10;
 $120 = $15;
 $121 = (+_AT_range_straggling_convolution($118,$119,$120,1.0));
 $122 = 2.5066282746310007 * $121;
 $20 = $122;
 $123 = $20;
 $124 = $123 < 0.0;
 if (!($124)) {
  $125 = $19;
  $126 = $18;
  $127 = $126 * $125;
  $18 = $127;
  $128 = $20;
  $129 = $18;
  $130 = $129 / $128;
  $18 = $130;
  $131 = $18;
  $132 = $131 * 0.10000000000000001;
  $18 = $132;
  $133 = $18;
  STACKTOP = sp;return (+$133);
 }
 $20 = 0.0;
 $125 = $19;
 $126 = $18;
 $127 = $126 * $125;
 $18 = $127;
 $128 = $20;
 $129 = $18;
 $130 = $129 / $128;
 $18 = $130;
 $131 = $18;
 $132 = $131 * 0.10000000000000001;
 $18 = $132;
 $133 = $18;
 STACKTOP = sp;return (+$133);
}
function _AT_LET_t_Wilkens_keV_um_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $9;
  $22 = $10;
  $23 = (+_AT_LET_t_Wilkens_keV_um_single($19,$20,$21,$22));
  $24 = $11;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  HEAPF64[$26>>3] = $23;
  $27 = $12;
  $28 = (($27) + 1)|0;
  $12 = $28;
 }
 STACKTOP = sp;return;
}
function _AT_LET_d_Wilkens_keV_um_single($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0;
 var $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $22 = $7;
 $23 = (+_AT_p_MeV_from_material_no($22));
 $8 = $23;
 $24 = $7;
 $25 = (+_AT_alpha_g_cm2_MeV_from_material_no($24));
 $9 = $25;
 $26 = $9;
 $27 = $5;
 $28 = $8;
 $29 = (+Math_pow((+$27),(+$28)));
 $30 = $26 * $29;
 $10 = $30;
 $11 = 2.0000000000000001E-4;
 $31 = $8;
 $32 = 1.0 / $31;
 $33 = 1.0 + $32;
 $12 = $33;
 $34 = $8;
 $35 = 2.0 / $34;
 $13 = $35;
 $36 = $6;
 $14 = $36;
 $37 = $6;
 $38 = $37 < 0.0;
 if ($38) {
  $39 = $5;
  $40 = 0.01 * $39;
  $14 = $40;
 }
 $41 = $10;
 $42 = (+Math_pow((+$41),0.93500000000000005));
 $43 = 0.012 * $42;
 $15 = $43;
 $44 = $15;
 $45 = $15;
 $46 = $44 * $45;
 $47 = $14;
 $48 = $9;
 $49 = $47 * $48;
 $50 = $8;
 $51 = $49 * $50;
 $52 = $5;
 $53 = $8;
 $54 = $53 - 1.0;
 $55 = (+Math_pow((+$52),(+$54)));
 $56 = $51 * $55;
 $57 = (+Math_pow((+$56),2.0));
 $58 = $46 + $57;
 $59 = (+Math_sqrt((+$58)));
 $16 = $59;
 $60 = $4;
 $61 = $10;
 $62 = $60 - $61;
 $63 = $16;
 $64 = $62 / $63;
 $17 = $64;
 $65 = $4;
 $66 = $10;
 $67 = $65 - $66;
 $68 = $11;
 $69 = $67 - $68;
 $70 = $16;
 $71 = $69 / $70;
 $18 = $71;
 $19 = 1.0;
 $72 = $9;
 $73 = $8;
 $74 = 1.0 / $73;
 $75 = (+Math_pow((+$72),(+$74)));
 $76 = $8;
 $77 = $75 * $76;
 $78 = $8;
 $79 = 2.0 - $78;
 $80 = $77 * $79;
 $81 = $19;
 $82 = $81 / $80;
 $19 = $82;
 $83 = $16;
 $84 = 2.5066282746310007 * $83;
 $20 = $84;
 $85 = $4;
 $86 = $10;
 $87 = $11;
 $88 = $86 + $87;
 $89 = $16;
 $90 = $13;
 $91 = (+_AT_range_straggling_convolution($85,$88,$89,$90));
 $92 = $4;
 $93 = $10;
 $94 = $16;
 $95 = $13;
 $96 = (+_AT_range_straggling_convolution($92,$93,$94,$95));
 $97 = $91 - $96;
 $98 = $20;
 $99 = $98 * $97;
 $20 = $99;
 $100 = $11;
 $101 = 2.0 * $100;
 $102 = $11;
 $103 = $102 / 2.0;
 $104 = $13;
 $105 = (+Math_pow((+$103),(+$104)));
 $106 = $101 * $105;
 $107 = $17;
 $108 = $18;
 $109 = $107 + $108;
 $110 = - $109;
 $111 = $17;
 $112 = $18;
 $113 = $111 + $112;
 $114 = $110 * $113;
 $115 = $114 / 8.0;
 $116 = (+Math_exp((+$115)));
 $117 = $106 * $116;
 $118 = $20;
 $119 = $118 - $117;
 $20 = $119;
 $120 = $20;
 $121 = $120 < 0.0;
 if ($121) {
  $20 = 0.0;
 }
 $122 = $16;
 $123 = 2.5066282746310007 * $122;
 $21 = $123;
 $124 = $4;
 $125 = $10;
 $126 = $11;
 $127 = $125 + $126;
 $128 = $16;
 $129 = $12;
 $130 = (+_AT_range_straggling_convolution($124,$127,$128,$129));
 $131 = $4;
 $132 = $10;
 $133 = $16;
 $134 = $12;
 $135 = (+_AT_range_straggling_convolution($131,$132,$133,$134));
 $136 = $130 - $135;
 $137 = $21;
 $138 = $137 * $136;
 $21 = $138;
 $139 = $11;
 $140 = $11;
 $141 = $140 / 2.0;
 $142 = $8;
 $143 = 1.0 / $142;
 $144 = (+Math_pow((+$141),(+$143)));
 $145 = $139 * $144;
 $146 = $17;
 $147 = $18;
 $148 = $146 + $147;
 $149 = - $148;
 $150 = $17;
 $151 = $18;
 $152 = $150 + $151;
 $153 = $149 * $152;
 $154 = $153 / 8.0;
 $155 = (+Math_exp((+$154)));
 $156 = $145 * $155;
 $157 = $21;
 $158 = $157 - $156;
 $21 = $158;
 $159 = $21;
 $160 = $159 < 0.0;
 if (!($160)) {
  $161 = $20;
  $162 = $19;
  $163 = $162 * $161;
  $19 = $163;
  $164 = $21;
  $165 = $19;
  $166 = $165 / $164;
  $19 = $166;
  $167 = $19;
  $168 = $167 * 0.10000000000000001;
  $19 = $168;
  $169 = $19;
  STACKTOP = sp;return (+$169);
 }
 $21 = 0.0;
 $161 = $20;
 $162 = $19;
 $163 = $162 * $161;
 $19 = $163;
 $164 = $21;
 $165 = $19;
 $166 = $165 / $164;
 $19 = $166;
 $167 = $19;
 $168 = $167 * 0.10000000000000001;
 $19 = $168;
 $169 = $19;
 STACKTOP = sp;return (+$169);
}
function _AT_LET_d_Wilkens_keV_um_multi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = $12;
  $14 = $6;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $8;
  $21 = $9;
  $22 = $10;
  $23 = (+_AT_LET_d_Wilkens_keV_um_single($19,$20,$21,$22));
  $24 = $11;
  $25 = $12;
  $26 = (($24) + ($25<<3)|0);
  HEAPF64[$26>>3] = $23;
  $27 = $12;
  $28 = (($27) + 1)|0;
  $12 = $28;
 }
 STACKTOP = sp;return;
}
function _AT_proton_RBE_single($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $15 = 0.0;
 $16 = 0.0;
 $17 = 1.0;
 $18 = 0.0;
 $19 = 0.0;
 $20 = $13;
 $21 = ($20|0)==(1);
 if ($21) {
  $14 = 1.0;
  $96 = $14;
  STACKTOP = sp;return (+$96);
 }
 $22 = $13;
 $23 = ($22|0)==(2);
 if ($23) {
  $14 = 1.1000000000000001;
  $96 = $14;
  STACKTOP = sp;return (+$96);
 }
 $24 = $8;
 $17 = $24;
 $25 = $7;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = (+_AT_dose_Bortfeld_Gy_single($25,1.0,$26,$27,1,$28));
 $30 = $17;
 $31 = $30 / $29;
 $17 = $31;
 $32 = $7;
 $33 = $17;
 $34 = $9;
 $35 = $10;
 $36 = $11;
 $37 = (+_AT_dose_Bortfeld_Gy_single($32,$33,$34,$35,1,$36));
 $16 = $37;
 $38 = $7;
 $39 = $9;
 $40 = $10;
 $41 = (+_AT_LET_d_Wilkens_keV_um_single($38,$39,$40,1));
 $15 = $41;
 $42 = $13;
 switch ($42|0) {
 case 3:  {
  $43 = $15;
  $44 = 0.41364400000000001 * $43;
  $45 = $12;
  $46 = $44 / $45;
  $47 = 0.84299999999999997 + $46;
  $18 = $47;
  $48 = $15;
  $49 = 0.016115999999999998 * $48;
  $50 = $12;
  $51 = $49 / $50;
  $52 = 1.0900000000000001 + $51;
  $19 = $52;
  break;
 }
 case 4:  {
  $53 = $15;
  $54 = 0.434 * $53;
  $55 = $12;
  $56 = $54 / $55;
  $57 = 1.0 + $56;
  $18 = $57;
  $19 = 1.0;
  break;
 }
 case 5:  {
  $58 = $15;
  $59 = 0.35604999999999998 * $58;
  $60 = $12;
  $61 = $59 / $60;
  $62 = 0.99063999999999996 + $61;
  $18 = $62;
  $63 = $12;
  $64 = (+Math_sqrt((+$63)));
  $65 = 0.0038703000000000001 * $64;
  $66 = $15;
  $67 = $65 * $66;
  $68 = 1.1012 - $67;
  $19 = $68;
  break;
 }
 default: {
 }
 }
 $69 = $16;
 $70 = 2.0 * $69;
 $71 = 1.0 / $70;
 $14 = $71;
 $72 = $12;
 $73 = $12;
 $74 = $72 * $73;
 $75 = $12;
 $76 = 4.0 * $75;
 $77 = $18;
 $78 = $76 * $77;
 $79 = $16;
 $80 = $78 * $79;
 $81 = $74 + $80;
 $82 = $19;
 $83 = 4.0 * $82;
 $84 = $19;
 $85 = $83 * $84;
 $86 = $16;
 $87 = $85 * $86;
 $88 = $16;
 $89 = $87 * $88;
 $90 = $81 + $89;
 $91 = (+Math_sqrt((+$90)));
 $92 = $12;
 $93 = $91 - $92;
 $94 = $14;
 $95 = $94 * $93;
 $14 = $95;
 $96 = $14;
 STACKTOP = sp;return (+$96);
}
function _AT_proton_RBE_multi($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = 0;
 while(1) {
  $19 = $18;
  $20 = $9;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $10;
  $23 = $18;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $11;
  $27 = $12;
  $28 = $13;
  $29 = $14;
  $30 = $15;
  $31 = $16;
  $32 = (+_AT_proton_RBE_single($25,$26,$27,$28,$29,$30,$31));
  $33 = $17;
  $34 = $18;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $18;
  $37 = (($36) + 1)|0;
  $18 = $37;
 }
 STACKTOP = sp;return;
}
function _AT_RDD_index_from_RDD_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = -1;
 $3 = 1;
 $4 = $3;
 $5 = HEAP32[11612]|0;
 _find_elements_int($1,$4,(46452),$5,$2);
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _AT_RDD_name_from_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_AT_RDD_index_from_RDD_number($6)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)!=(-1);
 $10 = $4;
 if ($9) {
  $11 = $5;
  $12 = ((46808) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  (_strcpy($10,$13)|0);
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  (_strcpy($10,75673)|0);
  $2 = -1;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _AT_RDD_number_from_name($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 $4 = 1;
 $5 = HEAP32[11612]|0;
 _find_elements_char($2,1,(46808),$5,$3);
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)!=(-1);
 if ($7) {
  $8 = HEAP32[$3>>2]|0;
  $9 = ((46452) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = -1;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _AT_RDD_number_of_parameters($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_AT_RDD_index_from_RDD_number($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf(75703,$vararg_buffer)|0);
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $3;
  $10 = ((46484) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _AT_RDD_r_min_m($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0.0;
 $7 = $4;
 $8 = ($7|0)==(2);
 $9 = $4;
 $10 = ($9|0)==(5);
 $or$cond = $8 | $10;
 $11 = $4;
 $12 = ($11|0)==(6);
 $or$cond3 = $or$cond | $12;
 $13 = $4;
 $14 = ($13|0)==(7);
 $or$cond5 = $or$cond3 | $14;
 if ($or$cond5) {
  $15 = $5;
  $16 = +HEAPF64[$15>>3];
  $6 = $16;
  $17 = $3;
  $18 = $6;
  $19 = $17 <= $18;
  if ($19) {
   $20 = $3;
   $6 = $20;
  }
 }
 $21 = $6;
 STACKTOP = sp;return (+$21);
}
function _AT_RDD_a0_m($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0.0;
 $7 = $4;
 $8 = ($7|0)==(3);
 $9 = $4;
 $10 = ($9|0)==(4);
 $or$cond = $8 | $10;
 do {
  if ($or$cond) {
   $11 = $5;
   $12 = +HEAPF64[$11>>3];
   $6 = $12;
  } else {
   $13 = $4;
   $14 = ($13|0)==(6);
   $15 = $4;
   $16 = ($15|0)==(7);
   $or$cond3 = $14 | $16;
   if ($or$cond3) {
    $17 = $5;
    $18 = ((($17)) + 8|0);
    $19 = +HEAPF64[$18>>3];
    $6 = $19;
    break;
   } else {
    $6 = 0.0;
    break;
   }
  }
 } while(0);
 $20 = $3;
 $21 = $6;
 $22 = $20 <= $21;
 if (!($22)) {
  $24 = $6;
  STACKTOP = sp;return (+$24);
 }
 $23 = $3;
 $6 = $23;
 $24 = $6;
 STACKTOP = sp;return (+$24);
}
function _AT_RDD_precalculated_constant_Gy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0, $71 = 0;
 var $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer = sp + 192|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0.0;
 $37 = $12;
 $38 = (+_AT_density_g_cm3_from_material_no($37));
 $17 = $38;
 $39 = $17;
 $40 = $39 * 1000.0;
 $18 = $40;
 $19 = 0.0;
 $41 = $13;
 $42 = ($41|0)==(2);
 $43 = $13;
 $44 = ($43|0)==(4);
 $or$cond = $42 | $44;
 $45 = $13;
 $46 = ($45|0)==(5);
 $or$cond3 = $or$cond | $46;
 $47 = $13;
 $48 = ($47|0)==(6);
 $or$cond5 = $or$cond3 | $48;
 $49 = $13;
 $50 = ($49|0)==(7);
 $or$cond7 = $or$cond5 | $50;
 if ($or$cond7) {
  $51 = $10;
  $52 = $11;
  $53 = $12;
  $54 = $15;
  $55 = (+_AT_RDD_Katz_coeff_Gy_general($51,$52,$53,$54));
  $19 = $55;
 }
 $56 = $13;
 $57 = ($56|0)==(1);
 if ($57) {
  $58 = $10;
  $59 = $12;
  $60 = $15;
  $61 = (+_AT_single_impact_fluence_cm2_single($58,$59,$60));
  $20 = $61;
  $62 = $9;
  $63 = $20;
  $64 = $62 * $63;
  $65 = $64 * 1.6021764600000001E-13;
  $66 = $65 * 1000.0;
  $16 = $66;
 }
 $67 = $13;
 $68 = ($67|0)==(2);
 if ($68) {
  $69 = $19;
  $16 = $69;
 }
 $70 = $13;
 $71 = ($70|0)==(4);
 if ($71) {
  $21 = 0.0;
  $72 = $8;
  $73 = $13;
  $74 = $14;
  $75 = (+_AT_RDD_a0_m($72,$73,$74));
  $22 = $75;
  $76 = $15;
  $77 = ($76|0)==(3);
  $78 = $15;
  $79 = ($78|0)==(6);
  $or$cond9 = $77 | $79;
  do {
   if ($or$cond9) {
    $80 = $10;
    $81 = (+_AT_ER_PowerLaw_alpha($80));
    $23 = $81;
    $82 = $22;
    $83 = $8;
    $84 = $18;
    $85 = $23;
    $86 = $19;
    $87 = (+_AT_RDD_Katz_PowerLawER_dEdx_J_m($82,$83,$84,$85,$86));
    $21 = $87;
   } else {
    $88 = $15;
    $89 = ($88|0)==(2);
    if ($89) {
     $90 = $22;
     $91 = $8;
     $92 = $18;
     $93 = $19;
     $94 = (+_AT_RDD_Katz_LinearER_dEdx_J_m($90,$91,$92,$93));
     $21 = $94;
     break;
    } else {
     $21 = 0.0;
     break;
    }
   }
  } while(0);
  $95 = $21;
  $16 = $95;
 }
 $96 = $13;
 $97 = ($96|0)==(3);
 if ($97) {
  $98 = $8;
  $99 = $13;
  $100 = $14;
  $101 = (+_AT_RDD_a0_m($98,$99,$100));
  $24 = $101;
  $102 = $8;
  $103 = $24;
  $104 = $102 / $103;
  $105 = (+Math_log((+$104)));
  $106 = 0.5 + $105;
  $25 = $106;
  $107 = $24;
  $108 = $107 * 100.0;
  $109 = (+_gsl_pow_2($108));
  $110 = 6.2831853071795862 * $109;
  $111 = $25;
  $112 = $111 * $110;
  $25 = $112;
  $113 = $9;
  $114 = $113 * 1.6021764599999999E-10;
  $115 = $25;
  $116 = $114 / $115;
  $16 = $116;
 }
 $117 = $13;
 $118 = ($117|0)==(5);
 if ($118) {
  $119 = $8;
  $120 = $13;
  $121 = $14;
  $122 = (+_AT_RDD_r_min_m($119,$120,$121));
  $26 = $122;
  $123 = $10;
  $124 = (+_AT_beta_from_E_single($123));
  $27 = $124;
  $125 = $9;
  $126 = $17;
  $127 = $125 * $126;
  $128 = $127 * 100.0;
  $129 = $128 * 1.6021764600000001E-13;
  $28 = $129;
  $130 = $26;
  $131 = $8;
  $132 = $27;
  $133 = $18;
  $134 = $28;
  $135 = $19;
  $136 = (+_AT_RDD_Cucinotta_Cnorm($130,$131,$132,$133,$134,$135));
  $16 = $136;
  $137 = $16;
  $138 = $137 == 0.0;
  if ($138) {
   (_printf(75725,$vararg_buffer)|0);
  }
 }
 $139 = $13;
 $140 = ($139|0)==(6);
 if ($140) {
  $29 = 0.0;
  $141 = $8;
  $142 = $13;
  $143 = $14;
  $144 = (+_AT_RDD_r_min_m($141,$142,$143));
  $30 = $144;
  $145 = $8;
  $146 = $13;
  $147 = $14;
  $148 = (+_AT_RDD_a0_m($145,$146,$147));
  $31 = $148;
  $149 = $31;
  $150 = $8;
  $151 = $149 < $150;
  $152 = $31;
  $153 = $8;
  $154 = $151 ? $152 : $153;
  $32 = $154;
  $155 = $15;
  $156 = ($155|0)==(3);
  $157 = $15;
  $158 = ($157|0)==(6);
  $or$cond11 = $156 | $158;
  if ($or$cond11) {
   $159 = $10;
   $160 = (+_AT_ER_PowerLaw_alpha($159));
   $33 = $160;
   $161 = $30;
   $162 = $32;
   $163 = $8;
   $164 = $33;
   $165 = $19;
   $166 = (+_AT_RDD_Katz_PowerLawER_Daverage_Gy($161,$162,$163,$164,$165));
   $29 = $166;
  } else {
   $167 = $15;
   $168 = ($167|0)==(2);
   if ($168) {
    $169 = $30;
    $170 = $32;
    $171 = $8;
    $172 = $19;
    $173 = (+_AT_RDD_Katz_LinearER_Daverage_Gy($169,$170,$171,$172));
    $29 = $173;
   }
  }
  $174 = $29;
  $16 = $174;
 }
 $175 = $13;
 $176 = ($175|0)==(7);
 if ($176) {
  $177 = $8;
  $178 = $13;
  $179 = $14;
  $180 = (+_AT_RDD_r_min_m($177,$178,$179));
  $34 = $180;
  $181 = $10;
  $182 = (+_AT_beta_from_E_single($181));
  $35 = $182;
  $183 = $9;
  $184 = $17;
  $185 = $183 * $184;
  $186 = $185 * 100.0;
  $187 = $186 * 1.6021764600000001E-13;
  $36 = $187;
  $188 = $34;
  $189 = $8;
  $190 = $35;
  $191 = $18;
  $192 = $36;
  $193 = $19;
  $194 = (+_AT_RDD_Cucinotta_Cnorm($188,$189,$190,$191,$192,$193));
  $16 = $194;
 }
 $195 = $13;
 $196 = ($195|0)==(8);
 if (!($196)) {
  $197 = $16;
  STACKTOP = sp;return (+$197);
 }
 $16 = 0.0;
 $197 = $16;
 STACKTOP = sp;return (+$197);
}
function _AT_RDD_d_min_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $17 = $10;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = $13;
  $14 = $19;
 }
 $20 = $10;
 $21 = ($20|0)==(2);
 if ($21) {
  $22 = $11;
  $23 = ((($22)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $14 = $24;
 }
 $25 = $10;
 $26 = ($25|0)==(4);
 $27 = $10;
 $28 = ($27|0)==(5);
 $or$cond = $26 | $28;
 if ($or$cond) {
  $29 = $11;
  $30 = ((($29)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $14 = $31;
 }
 $32 = $10;
 $33 = ($32|0)==(3);
 if ($33) {
  $34 = $7;
  $35 = $9;
  $36 = $12;
  $37 = (+_AT_max_electron_range_m($34,$35,$36));
  $15 = $37;
  $38 = $15;
  $39 = $10;
  $40 = $11;
  $41 = (+_AT_RDD_a0_m($38,$39,$40));
  $16 = $41;
  $42 = $15;
  $43 = $15;
  $44 = $16;
  $45 = $13;
  $46 = (+_AT_RDD_Geiss_Gy($42,0.0,$43,$44,$45));
  $14 = $46;
 }
 $47 = $10;
 $48 = ($47|0)==(6);
 $49 = $10;
 $50 = ($49|0)==(7);
 $or$cond3 = $48 | $50;
 if ($or$cond3) {
  $51 = $11;
  $52 = ((($51)) + 16|0);
  $53 = +HEAPF64[$52>>3];
  $14 = $53;
 }
 $54 = $10;
 $55 = ($54|0)==(8);
 if (!($55)) {
  $60 = $14;
  STACKTOP = sp;return (+$60);
 }
 $56 = $7;
 $57 = $8;
 $58 = $9;
 $59 = (+_AT_d_min_RadicalDiffusion_Gy($56,$57,$58));
 $14 = $59;
 $60 = $14;
 STACKTOP = sp;return (+$60);
}
function _AT_RDD_d_max_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 208|0;
 $8 = sp + 236|0;
 $15 = sp + 192|0;
 HEAPF64[$7>>3] = $0;
 HEAP32[$8>>2] = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $40 = $13;
 $41 = $9;
 (_AT_Mass_Stopping_Power_with_no($40,1,$7,$8,$41,$15)|0);
 $42 = +HEAPF64[$7>>3];
 $43 = $9;
 $44 = $12;
 $45 = (+_AT_max_electron_range_m($42,$43,$44));
 $16 = $45;
 $46 = $16;
 $47 = +HEAPF64[$15>>3];
 $48 = +HEAPF64[$7>>3];
 $49 = HEAP32[$8>>2]|0;
 $50 = $9;
 $51 = $10;
 $52 = $11;
 $53 = $12;
 $54 = (+_AT_RDD_precalculated_constant_Gy($46,$47,$48,$49,$50,$51,$52,$53));
 $17 = $54;
 $55 = $9;
 $56 = (+_AT_density_g_cm3_from_material_no($55));
 $18 = $56;
 $57 = $18;
 $58 = $57 * 1000.0;
 $19 = $58;
 $20 = 0.0;
 $59 = $10;
 $60 = ($59|0)==(4);
 $61 = $10;
 $62 = ($61|0)==(5);
 $or$cond = $60 | $62;
 $63 = $10;
 $64 = ($63|0)==(6);
 $or$cond3 = $or$cond | $64;
 $65 = $10;
 $66 = ($65|0)==(7);
 $or$cond5 = $or$cond3 | $66;
 if ($or$cond5) {
  $67 = +HEAPF64[$7>>3];
  $68 = HEAP32[$8>>2]|0;
  $69 = $9;
  $70 = $12;
  $71 = (+_AT_RDD_Katz_coeff_Gy_general($67,$68,$69,$70));
  $20 = $71;
 }
 $72 = $10;
 $73 = ($72|0)==(1);
 if ($73) {
  $74 = $17;
  $14 = $74;
 }
 $75 = $10;
 $76 = ($75|0)==(2);
 if ($76) {
  $77 = $17;
  $21 = $77;
  $78 = +HEAPF64[$7>>3];
  $79 = (+_AT_ER_PowerLaw_alpha($78));
  $22 = $79;
  $80 = $16;
  $81 = $10;
  $82 = $11;
  $83 = (+_AT_RDD_r_min_m($80,$81,$82));
  $23 = $83;
  $84 = $23;
  $85 = $23;
  $86 = $16;
  $87 = $12;
  $88 = $22;
  $89 = $21;
  $90 = (+_AT_RDD_KatzPoint_Gy($84,$85,$86,$87,$88,$89));
  $14 = $90;
 }
 $91 = $10;
 $92 = ($91|0)==(4);
 if ($92) {
  $93 = $16;
  $94 = $10;
  $95 = $11;
  $96 = (+_AT_RDD_a0_m($93,$94,$95));
  $24 = $96;
  $97 = +HEAPF64[$15>>3];
  $98 = $18;
  $99 = $97 * $98;
  $100 = $99 * 100.0;
  $101 = $100 * 1.6021764600000001E-13;
  $25 = $101;
  $102 = $17;
  $26 = $102;
  $103 = +HEAPF64[$7>>3];
  $104 = (+_AT_ER_PowerLaw_alpha($103));
  $27 = $104;
  $105 = $16;
  $106 = $24;
  $107 = $12;
  $108 = $27;
  $109 = $19;
  $110 = $25;
  $111 = $26;
  $112 = $20;
  $113 = (+_AT_RDD_KatzSite_Gy(0.0,0.0,$105,$106,$107,$108,$109,$110,$111,$112));
  $14 = $113;
 }
 $114 = $10;
 $115 = ($114|0)==(3);
 if ($115) {
  $116 = $17;
  $14 = $116;
 }
 $117 = $10;
 $118 = ($117|0)==(5);
 if ($118) {
  $119 = +HEAPF64[$7>>3];
  $120 = (+_AT_beta_from_E_single($119));
  $28 = $120;
  $121 = $16;
  $122 = $10;
  $123 = $11;
  $124 = (+_AT_RDD_r_min_m($121,$122,$123));
  $29 = $124;
  $125 = $29;
  $126 = $29;
  $127 = $16;
  $128 = $28;
  $129 = $17;
  $130 = $20;
  $131 = (+_AT_RDD_CucinottaPoint_Gy($125,$126,$127,$128,$129,$130));
  $14 = $131;
 }
 $132 = $10;
 $133 = ($132|0)==(6);
 if ($133) {
  $134 = $16;
  $135 = $10;
  $136 = $11;
  $137 = (+_AT_RDD_a0_m($134,$135,$136));
  $30 = $137;
  $138 = $17;
  $31 = $138;
  $139 = $16;
  $140 = $10;
  $141 = $11;
  $142 = (+_AT_RDD_r_min_m($139,$140,$141));
  $32 = $142;
  $143 = +HEAPF64[$7>>3];
  $144 = (+_AT_ER_PowerLaw_alpha($143));
  $33 = $144;
  $145 = $30;
  $146 = $12;
  $147 = $32;
  $148 = $16;
  $149 = $33;
  $150 = $31;
  $151 = $20;
  $152 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy(0.0,$145,$146,$147,$148,$149,$150,$151));
  $14 = $152;
 }
 $153 = $10;
 $154 = ($153|0)==(7);
 if ($154) {
  $155 = +HEAPF64[$7>>3];
  $156 = (+_AT_beta_from_E_single($155));
  $34 = $156;
  $157 = $16;
  $158 = $10;
  $159 = $11;
  $160 = (+_AT_RDD_a0_m($157,$158,$159));
  $35 = $160;
  $161 = $17;
  $36 = $161;
  $162 = $16;
  $163 = $10;
  $164 = $11;
  $165 = (+_AT_RDD_r_min_m($162,$163,$164));
  $37 = $165;
  $166 = $35;
  $167 = $16;
  $168 = $166 < $167;
  $169 = $35;
  $170 = $16;
  $171 = $168 ? $169 : $170;
  $38 = $171;
  $172 = $37;
  $173 = $38;
  $174 = $16;
  $175 = $34;
  $176 = $20;
  $177 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($172,$173,$174,$175,$176));
  $39 = $177;
  $178 = $36;
  $179 = $37;
  $180 = $38;
  $181 = $16;
  $182 = $34;
  $183 = $20;
  $184 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($179,$180,$181,$182,$183));
  $185 = $178 * $184;
  $186 = $39;
  $187 = $186 + $185;
  $39 = $187;
  $188 = $35;
  $189 = $37;
  $190 = $16;
  $191 = $34;
  $192 = $20;
  $193 = $36;
  $194 = $39;
  $195 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy(0.0,$188,$189,$190,$191,$192,$193,$194));
  $14 = $195;
 }
 $196 = $10;
 $197 = ($196|0)==(8);
 if (!($197)) {
  $202 = $14;
  STACKTOP = sp;return (+$202);
 }
 $198 = +HEAPF64[$7>>3];
 $199 = HEAP32[$8>>2]|0;
 $200 = $9;
 $201 = (+_AT_d_max_RadicalDiffusion_Gy($198,$199,$200));
 $14 = $201;
 $202 = $14;
 STACKTOP = sp;return (+$202);
}
function _AT_RDD_f1_parameters_single_field($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = sp + 64|0;
 $9 = sp + 96|0;
 $16 = sp + 56|0;
 HEAPF64[$8>>3] = $0;
 HEAP32[$9>>2] = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 HEAPF64[$16>>3] = 0.0;
 $17 = 0.0;
 $18 = 0.0;
 $19 = 0.0;
 $20 = 0.0;
 $21 = 0.0;
 $22 = 0.0;
 $23 = 0.0;
 $24 = $14;
 $25 = $10;
 (_AT_Mass_Stopping_Power_with_no($24,1,$8,$9,$25,$16)|0);
 $26 = +HEAPF64[$8>>3];
 $27 = $10;
 $28 = $13;
 $29 = (+_AT_max_electron_range_m($26,$27,$28));
 $17 = $29;
 $30 = +HEAPF64[$8>>3];
 $31 = (+_AT_r_min_RadicalDiffusion_m($30));
 $18 = $31;
 $32 = +HEAPF64[$8>>3];
 $33 = $10;
 $34 = $13;
 $35 = (+_AT_single_impact_fluence_cm2_single($32,$33,$34));
 $19 = $35;
 $36 = +HEAPF64[$16>>3];
 $37 = $19;
 $38 = (+_AT_single_impact_dose_Gy_single($36,$37));
 $20 = $38;
 $39 = $17;
 $40 = +HEAPF64[$16>>3];
 $41 = +HEAPF64[$8>>3];
 $42 = HEAP32[$9>>2]|0;
 $43 = $10;
 $44 = $11;
 $45 = $12;
 $46 = $13;
 $47 = (+_AT_RDD_precalculated_constant_Gy($39,$40,$41,$42,$43,$44,$45,$46));
 $21 = $47;
 $48 = +HEAPF64[$8>>3];
 $49 = HEAP32[$9>>2]|0;
 $50 = $10;
 $51 = $11;
 $52 = $12;
 $53 = $13;
 $54 = $21;
 $55 = (+_AT_RDD_d_min_Gy($48,$49,$50,$51,$52,$53,$54));
 $22 = $55;
 $56 = +HEAPF64[$8>>3];
 $57 = HEAP32[$9>>2]|0;
 $58 = $10;
 $59 = $11;
 $60 = $12;
 $61 = $13;
 $62 = $14;
 $63 = (+_AT_RDD_d_max_Gy($56,$57,$58,$59,$60,$61,$62));
 $23 = $63;
 $64 = +HEAPF64[$16>>3];
 $65 = $15;
 HEAPF64[$65>>3] = $64;
 $66 = $18;
 $67 = $15;
 $68 = ((($67)) + 8|0);
 HEAPF64[$68>>3] = $66;
 $69 = $17;
 $70 = $15;
 $71 = ((($70)) + 16|0);
 HEAPF64[$71>>3] = $69;
 $72 = $22;
 $73 = $15;
 $74 = ((($73)) + 24|0);
 HEAPF64[$74>>3] = $72;
 $75 = $23;
 $76 = $15;
 $77 = ((($76)) + 32|0);
 HEAPF64[$77>>3] = $75;
 $78 = $21;
 $79 = $15;
 $80 = ((($79)) + 40|0);
 HEAPF64[$80>>3] = $78;
 $81 = $19;
 $82 = $15;
 $83 = ((($82)) + 48|0);
 HEAPF64[$83>>3] = $81;
 $84 = $20;
 $85 = $15;
 $86 = ((($85)) + 56|0);
 HEAPF64[$86>>3] = $84;
 STACKTOP = sp;return;
}
function _AT_RDD_f1_parameters_mixed_field($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = 0;
 while(1) {
  $19 = $18;
  $20 = $9;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $10;
  $23 = $18;
  $24 = (($22) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $11;
  $27 = $18;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $12;
  $31 = $13;
  $32 = $14;
  $33 = $15;
  $34 = $16;
  $35 = $17;
  $36 = $18;
  $37 = $36<<3;
  $38 = (($35) + ($37<<3)|0);
  _AT_RDD_f1_parameters_single_field($25,$29,$30,$31,$32,$33,$34,$38);
  $39 = $18;
  $40 = (($39) + 1)|0;
  $18 = $40;
 }
 STACKTOP = sp;return;
}
function _AT_D_RDD_Gy($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0.0;
 var $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0.0;
 var $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0.0;
 var $463 = 0, $464 = 0, $465 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $13 = sp + 216|0;
 $14 = sp + 256|0;
 $23 = sp + 208|0;
 $11 = $0;
 $12 = $1;
 HEAPF64[$13>>3] = $2;
 HEAP32[$14>>2] = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $50 = $16;
 $51 = ($50|0)==(8);
 if ($51) {
  $22 = 0;
  while(1) {
   $52 = $22;
   $53 = $11;
   $54 = ($52|0)<($53|0);
   if (!($54)) {
    break;
   }
   $55 = $12;
   $56 = $22;
   $57 = (($55) + ($56<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = +HEAPF64[$13>>3];
   $60 = HEAP32[$14>>2]|0;
   $61 = $15;
   $62 = (+_AT_RDD_RadicalDiffusion_Gy($58,$59,$60,$61));
   $63 = $20;
   $64 = $22;
   $65 = (($63) + ($64<<3)|0);
   HEAPF64[$65>>3] = $62;
   $66 = $22;
   $67 = (($66) + 1)|0;
   $22 = $67;
  }
  $10 = 1;
  $465 = $10;
  STACKTOP = sp;return ($465|0);
 }
 $68 = $19;
 $69 = $15;
 (_AT_Mass_Stopping_Power_with_no($68,1,$13,$14,$69,$23)|0);
 $70 = +HEAPF64[$13>>3];
 $71 = $15;
 $72 = $18;
 $73 = (+_AT_max_electron_range_m($70,$71,$72));
 $24 = $73;
 $74 = $24;
 $75 = +HEAPF64[$23>>3];
 $76 = +HEAPF64[$13>>3];
 $77 = HEAP32[$14>>2]|0;
 $78 = $15;
 $79 = $16;
 $80 = $17;
 $81 = $18;
 $82 = (+_AT_RDD_precalculated_constant_Gy($74,$75,$76,$77,$78,$79,$80,$81));
 $25 = $82;
 $83 = +HEAPF64[$13>>3];
 $84 = HEAP32[$14>>2]|0;
 $85 = $15;
 $86 = $16;
 $87 = $17;
 $88 = $18;
 $89 = $25;
 $90 = (+_AT_RDD_d_min_Gy($83,$84,$85,$86,$87,$88,$89));
 $26 = $90;
 $91 = $15;
 $92 = (+_AT_density_g_cm3_from_material_no($91));
 $27 = $92;
 $93 = $27;
 $94 = $93 * 1000.0;
 $28 = $94;
 $29 = 0.0;
 $95 = $16;
 $96 = ($95|0)==(4);
 $97 = $16;
 $98 = ($97|0)==(5);
 $or$cond = $96 | $98;
 $99 = $16;
 $100 = ($99|0)==(6);
 $or$cond3 = $or$cond | $100;
 $101 = $16;
 $102 = ($101|0)==(7);
 $or$cond5 = $or$cond3 | $102;
 if ($or$cond5) {
  $103 = +HEAPF64[$13>>3];
  $104 = HEAP32[$14>>2]|0;
  $105 = $15;
  $106 = $18;
  $107 = (+_AT_RDD_Katz_coeff_Gy_general($103,$104,$105,$106));
  $29 = $107;
 }
 $108 = $16;
 $109 = ($108|0)==(1);
 L12: do {
  if ($109) {
   $21 = 0;
   while(1) {
    $110 = $21;
    $111 = $11;
    $112 = ($110|0)<($111|0);
    if (!($112)) {
     break L12;
    }
    $113 = $12;
    $114 = $21;
    $115 = (($113) + ($114<<3)|0);
    $116 = +HEAPF64[$115>>3];
    $117 = $24;
    $118 = $25;
    $119 = (+_AT_RDD_Test_Gy($116,0.0,$117,$118));
    $120 = $20;
    $121 = $21;
    $122 = (($120) + ($121<<3)|0);
    HEAPF64[$122>>3] = $119;
    $123 = $21;
    $124 = (($123) + 1)|0;
    $21 = $124;
   }
  }
 } while(0);
 $125 = $16;
 $126 = ($125|0)==(2);
 L18: do {
  if ($126) {
   $127 = $25;
   $30 = $127;
   $128 = $18;
   $129 = ($128|0)==(3);
   $130 = $18;
   $131 = ($130|0)==(6);
   $or$cond7 = $129 | $131;
   $132 = $18;
   $133 = ($132|0)==(2);
   $or$cond9 = $or$cond7 | $133;
   if (!($or$cond9)) {
    $21 = 0;
    while(1) {
     $178 = $21;
     $179 = $11;
     $180 = ($178|0)<($179|0);
     if (!($180)) {
      break;
     }
     $181 = $20;
     $182 = $21;
     $183 = (($181) + ($182<<3)|0);
     HEAPF64[$183>>3] = 0.0;
     $184 = $21;
     $185 = (($184) + 1)|0;
     $21 = $185;
    }
    $10 = 1;
    $465 = $10;
    STACKTOP = sp;return ($465|0);
   }
   $134 = +HEAPF64[$13>>3];
   $135 = (+_AT_ER_PowerLaw_alpha($134));
   $31 = $135;
   $136 = $24;
   $137 = $16;
   $138 = $17;
   $139 = (+_AT_RDD_r_min_m($136,$137,$138));
   $32 = $139;
   $21 = 0;
   while(1) {
    $140 = $21;
    $141 = $11;
    $142 = ($140|0)<($141|0);
    if (!($142)) {
     break L18;
    }
    $143 = $12;
    $144 = $21;
    $145 = (($143) + ($144<<3)|0);
    $146 = +HEAPF64[$145>>3];
    $147 = $32;
    $148 = $24;
    $149 = $18;
    $150 = $31;
    $151 = $30;
    $152 = (+_AT_RDD_KatzPoint_Gy($146,$147,$148,$149,$150,$151));
    $153 = $20;
    $154 = $21;
    $155 = (($153) + ($154<<3)|0);
    HEAPF64[$155>>3] = $152;
    $156 = $20;
    $157 = $21;
    $158 = (($156) + ($157<<3)|0);
    $159 = +HEAPF64[$158>>3];
    $160 = $159 > 0.0;
    if ($160) {
     $161 = $20;
     $162 = $21;
     $163 = (($161) + ($162<<3)|0);
     $164 = +HEAPF64[$163>>3];
     $165 = $26;
     $166 = $164 > $165;
     if ($166) {
      $167 = $20;
      $168 = $21;
      $169 = (($167) + ($168<<3)|0);
      $170 = +HEAPF64[$169>>3];
      $175 = $170;
     } else {
      $171 = $26;
      $175 = $171;
     }
     $172 = $20;
     $173 = $21;
     $174 = (($172) + ($173<<3)|0);
     HEAPF64[$174>>3] = $175;
    }
    $176 = $21;
    $177 = (($176) + 1)|0;
    $21 = $177;
   }
  }
 } while(0);
 $186 = $16;
 $187 = ($186|0)==(4);
 L39: do {
  if ($187) {
   $188 = $18;
   $189 = ($188|0)==(3);
   $190 = $18;
   $191 = ($190|0)==(6);
   $or$cond11 = $189 | $191;
   $192 = $18;
   $193 = ($192|0)==(2);
   $or$cond13 = $or$cond11 | $193;
   if (!($or$cond13)) {
    $21 = 0;
    while(1) {
     $247 = $21;
     $248 = $11;
     $249 = ($247|0)<($248|0);
     if (!($249)) {
      break;
     }
     $250 = $20;
     $251 = $21;
     $252 = (($250) + ($251<<3)|0);
     HEAPF64[$252>>3] = 0.0;
     $253 = $21;
     $254 = (($253) + 1)|0;
     $21 = $254;
    }
    $10 = 1;
    $465 = $10;
    STACKTOP = sp;return ($465|0);
   }
   $194 = +HEAPF64[$23>>3];
   $195 = $27;
   $196 = $194 * $195;
   $197 = $196 * 100.0;
   $198 = $197 * 1.6021764600000001E-13;
   $33 = $198;
   $199 = $25;
   $34 = $199;
   $200 = +HEAPF64[$13>>3];
   $201 = (+_AT_ER_PowerLaw_alpha($200));
   $35 = $201;
   $202 = $24;
   $203 = $16;
   $204 = $17;
   $205 = (+_AT_RDD_a0_m($202,$203,$204));
   $36 = $205;
   $21 = 0;
   while(1) {
    $206 = $21;
    $207 = $11;
    $208 = ($206|0)<($207|0);
    if (!($208)) {
     break L39;
    }
    $209 = $12;
    $210 = $21;
    $211 = (($209) + ($210<<3)|0);
    $212 = +HEAPF64[$211>>3];
    $213 = $24;
    $214 = $36;
    $215 = $18;
    $216 = $35;
    $217 = $28;
    $218 = $33;
    $219 = $34;
    $220 = $29;
    $221 = (+_AT_RDD_KatzSite_Gy($212,0.0,$213,$214,$215,$216,$217,$218,$219,$220));
    $222 = $20;
    $223 = $21;
    $224 = (($222) + ($223<<3)|0);
    HEAPF64[$224>>3] = $221;
    $225 = $20;
    $226 = $21;
    $227 = (($225) + ($226<<3)|0);
    $228 = +HEAPF64[$227>>3];
    $229 = $228 > 0.0;
    if ($229) {
     $230 = $20;
     $231 = $21;
     $232 = (($230) + ($231<<3)|0);
     $233 = +HEAPF64[$232>>3];
     $234 = $26;
     $235 = $233 > $234;
     if ($235) {
      $236 = $20;
      $237 = $21;
      $238 = (($236) + ($237<<3)|0);
      $239 = +HEAPF64[$238>>3];
      $244 = $239;
     } else {
      $240 = $26;
      $244 = $240;
     }
     $241 = $20;
     $242 = $21;
     $243 = (($241) + ($242<<3)|0);
     HEAPF64[$243>>3] = $244;
    }
    $245 = $21;
    $246 = (($245) + 1)|0;
    $21 = $246;
   }
  }
 } while(0);
 $255 = $16;
 $256 = ($255|0)==(3);
 L60: do {
  if ($256) {
   $257 = $24;
   $258 = $16;
   $259 = $17;
   $260 = (+_AT_RDD_a0_m($257,$258,$259));
   $37 = $260;
   $21 = 0;
   while(1) {
    $261 = $21;
    $262 = $11;
    $263 = ($261|0)<($262|0);
    if (!($263)) {
     break L60;
    }
    $264 = $12;
    $265 = $21;
    $266 = (($264) + ($265<<3)|0);
    $267 = +HEAPF64[$266>>3];
    $268 = $24;
    $269 = $37;
    $270 = $25;
    $271 = (+_AT_RDD_Geiss_Gy($267,0.0,$268,$269,$270));
    $272 = $20;
    $273 = $21;
    $274 = (($272) + ($273<<3)|0);
    HEAPF64[$274>>3] = $271;
    $275 = $21;
    $276 = (($275) + 1)|0;
    $21 = $276;
   }
  }
 } while(0);
 $277 = $16;
 $278 = ($277|0)==(5);
 L66: do {
  if ($278) {
   $279 = +HEAPF64[$13>>3];
   $280 = (+_AT_beta_from_E_single($279));
   $38 = $280;
   $281 = $24;
   $282 = $16;
   $283 = $17;
   $284 = (+_AT_RDD_r_min_m($281,$282,$283));
   $39 = $284;
   $21 = 0;
   while(1) {
    $285 = $21;
    $286 = $11;
    $287 = ($285|0)<($286|0);
    if (!($287)) {
     break L66;
    }
    $288 = $12;
    $289 = $21;
    $290 = (($288) + ($289<<3)|0);
    $291 = +HEAPF64[$290>>3];
    $292 = $39;
    $293 = $24;
    $294 = $38;
    $295 = $25;
    $296 = $29;
    $297 = (+_AT_RDD_CucinottaPoint_Gy($291,$292,$293,$294,$295,$296));
    $298 = $20;
    $299 = $21;
    $300 = (($298) + ($299<<3)|0);
    HEAPF64[$300>>3] = $297;
    $301 = $20;
    $302 = $21;
    $303 = (($301) + ($302<<3)|0);
    $304 = +HEAPF64[$303>>3];
    $305 = $304 > 0.0;
    if ($305) {
     $306 = $20;
     $307 = $21;
     $308 = (($306) + ($307<<3)|0);
     $309 = +HEAPF64[$308>>3];
     $310 = $26;
     $311 = $309 > $310;
     if ($311) {
      $312 = $20;
      $313 = $21;
      $314 = (($312) + ($313<<3)|0);
      $315 = +HEAPF64[$314>>3];
      $320 = $315;
     } else {
      $316 = $26;
      $320 = $316;
     }
     $317 = $20;
     $318 = $21;
     $319 = (($317) + ($318<<3)|0);
     HEAPF64[$319>>3] = $320;
    }
    $321 = $21;
    $322 = (($321) + 1)|0;
    $21 = $322;
   }
  }
 } while(0);
 $323 = $16;
 $324 = ($323|0)==(6);
 L79: do {
  if ($324) {
   $325 = $18;
   $326 = ($325|0)==(3);
   $327 = $18;
   $328 = ($327|0)==(6);
   $or$cond15 = $326 | $328;
   $329 = $18;
   $330 = ($329|0)==(2);
   $or$cond17 = $or$cond15 | $330;
   if (!($or$cond17)) {
    $21 = 0;
    while(1) {
     $382 = $21;
     $383 = $11;
     $384 = ($382|0)<($383|0);
     if (!($384)) {
      break;
     }
     $385 = $20;
     $386 = $21;
     $387 = (($385) + ($386<<3)|0);
     HEAPF64[$387>>3] = 0.0;
     $388 = $21;
     $389 = (($388) + 1)|0;
     $21 = $389;
    }
    $10 = 1;
    $465 = $10;
    STACKTOP = sp;return ($465|0);
   }
   $331 = $25;
   $40 = $331;
   $332 = $24;
   $333 = $16;
   $334 = $17;
   $335 = (+_AT_RDD_r_min_m($332,$333,$334));
   $41 = $335;
   $336 = +HEAPF64[$13>>3];
   $337 = (+_AT_ER_PowerLaw_alpha($336));
   $42 = $337;
   $338 = $24;
   $339 = $16;
   $340 = $17;
   $341 = (+_AT_RDD_a0_m($338,$339,$340));
   $43 = $341;
   $21 = 0;
   while(1) {
    $342 = $21;
    $343 = $11;
    $344 = ($342|0)<($343|0);
    if (!($344)) {
     break L79;
    }
    $345 = $12;
    $346 = $21;
    $347 = (($345) + ($346<<3)|0);
    $348 = +HEAPF64[$347>>3];
    $349 = $43;
    $350 = $18;
    $351 = $41;
    $352 = $24;
    $353 = $42;
    $354 = $40;
    $355 = $29;
    $356 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy($348,$349,$350,$351,$352,$353,$354,$355));
    $357 = $20;
    $358 = $21;
    $359 = (($357) + ($358<<3)|0);
    HEAPF64[$359>>3] = $356;
    $360 = $20;
    $361 = $21;
    $362 = (($360) + ($361<<3)|0);
    $363 = +HEAPF64[$362>>3];
    $364 = $363 > 0.0;
    if ($364) {
     $365 = $20;
     $366 = $21;
     $367 = (($365) + ($366<<3)|0);
     $368 = +HEAPF64[$367>>3];
     $369 = $26;
     $370 = $368 > $369;
     if ($370) {
      $371 = $20;
      $372 = $21;
      $373 = (($371) + ($372<<3)|0);
      $374 = +HEAPF64[$373>>3];
      $379 = $374;
     } else {
      $375 = $26;
      $379 = $375;
     }
     $376 = $20;
     $377 = $21;
     $378 = (($376) + ($377<<3)|0);
     HEAPF64[$378>>3] = $379;
    }
    $380 = $21;
    $381 = (($380) + 1)|0;
    $21 = $381;
   }
  }
 } while(0);
 $390 = $16;
 $391 = ($390|0)==(7);
 L100: do {
  if ($391) {
   $392 = $24;
   $393 = $16;
   $394 = $17;
   $395 = (+_AT_RDD_a0_m($392,$393,$394));
   $44 = $395;
   $396 = +HEAPF64[$13>>3];
   $397 = (+_AT_beta_from_E_single($396));
   $45 = $397;
   $398 = $25;
   $46 = $398;
   $399 = $24;
   $400 = $16;
   $401 = $17;
   $402 = (+_AT_RDD_r_min_m($399,$400,$401));
   $47 = $402;
   $403 = $44;
   $404 = $24;
   $405 = $403 < $404;
   $406 = $44;
   $407 = $24;
   $408 = $405 ? $406 : $407;
   $48 = $408;
   $409 = $47;
   $410 = $48;
   $411 = $24;
   $412 = $45;
   $413 = $29;
   $414 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($409,$410,$411,$412,$413));
   $49 = $414;
   $415 = $46;
   $416 = $47;
   $417 = $48;
   $418 = $24;
   $419 = $45;
   $420 = $29;
   $421 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($416,$417,$418,$419,$420));
   $422 = $415 * $421;
   $423 = $49;
   $424 = $423 + $422;
   $49 = $424;
   $21 = 0;
   while(1) {
    $425 = $21;
    $426 = $11;
    $427 = ($425|0)<($426|0);
    if (!($427)) {
     break L100;
    }
    $428 = $12;
    $429 = $21;
    $430 = (($428) + ($429<<3)|0);
    $431 = +HEAPF64[$430>>3];
    $432 = $44;
    $433 = $47;
    $434 = $24;
    $435 = $45;
    $436 = $29;
    $437 = $46;
    $438 = $49;
    $439 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy($431,$432,$433,$434,$435,$436,$437,$438));
    $440 = $20;
    $441 = $21;
    $442 = (($440) + ($441<<3)|0);
    HEAPF64[$442>>3] = $439;
    $443 = $20;
    $444 = $21;
    $445 = (($443) + ($444<<3)|0);
    $446 = +HEAPF64[$445>>3];
    $447 = $446 > 0.0;
    if ($447) {
     $448 = $20;
     $449 = $21;
     $450 = (($448) + ($449<<3)|0);
     $451 = +HEAPF64[$450>>3];
     $452 = $26;
     $453 = $451 > $452;
     if ($453) {
      $454 = $20;
      $455 = $21;
      $456 = (($454) + ($455<<3)|0);
      $457 = +HEAPF64[$456>>3];
      $462 = $457;
     } else {
      $458 = $26;
      $462 = $458;
     }
     $459 = $20;
     $460 = $21;
     $461 = (($459) + ($460<<3)|0);
     HEAPF64[$461>>3] = $462;
    }
    $463 = $21;
    $464 = (($463) + 1)|0;
    $21 = $464;
   }
  }
 } while(0);
 $10 = 0;
 $465 = $10;
 STACKTOP = sp;return ($465|0);
}
function _AT_r_RDD_m($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0;
 var $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0;
 var $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0;
 var $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $13 = sp + 200|0;
 $14 = sp + 236|0;
 $22 = sp + 192|0;
 $11 = $0;
 $12 = $1;
 HEAPF64[$13>>3] = $2;
 HEAP32[$14>>2] = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $47 = $16;
 $48 = ($47|0)==(8);
 if ($48) {
  $21 = 0;
  while(1) {
   $49 = $21;
   $50 = $11;
   $51 = ($49|0)<($50|0);
   if (!($51)) {
    break;
   }
   $52 = $12;
   $53 = $21;
   $54 = (($52) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = +HEAPF64[$13>>3];
   $57 = HEAP32[$14>>2]|0;
   $58 = $15;
   $59 = (+_AT_inverse_RadicalDiffusion_m($55,$56,$57,$58));
   $60 = $20;
   $61 = $21;
   $62 = (($60) + ($61<<3)|0);
   HEAPF64[$62>>3] = $59;
   $63 = $21;
   $64 = (($63) + 1)|0;
   $21 = $64;
  }
  $10 = 0;
  $432 = $10;
  STACKTOP = sp;return ($432|0);
 }
 $65 = $19;
 $66 = $15;
 (_AT_Mass_Stopping_Power_with_no($65,1,$13,$14,$66,$22)|0);
 $67 = +HEAPF64[$13>>3];
 $68 = $15;
 $69 = $18;
 $70 = (+_AT_max_electron_range_m($67,$68,$69));
 $23 = $70;
 $71 = $23;
 $72 = $16;
 $73 = $17;
 $74 = (+_AT_RDD_r_min_m($71,$72,$73));
 $24 = $74;
 $75 = $23;
 $76 = +HEAPF64[$22>>3];
 $77 = +HEAPF64[$13>>3];
 $78 = HEAP32[$14>>2]|0;
 $79 = $15;
 $80 = $16;
 $81 = $17;
 $82 = $18;
 $83 = (+_AT_RDD_precalculated_constant_Gy($75,$76,$77,$78,$79,$80,$81,$82));
 $25 = $83;
 $84 = +HEAPF64[$13>>3];
 $85 = HEAP32[$14>>2]|0;
 $86 = $15;
 $87 = $16;
 $88 = $17;
 $89 = $18;
 $90 = $25;
 $91 = (+_AT_RDD_d_min_Gy($84,$85,$86,$87,$88,$89,$90));
 $26 = $91;
 $92 = +HEAPF64[$13>>3];
 $93 = HEAP32[$14>>2]|0;
 $94 = $15;
 $95 = $16;
 $96 = $17;
 $97 = $18;
 $98 = $19;
 $99 = (+_AT_RDD_d_max_Gy($92,$93,$94,$95,$96,$97,$98));
 $27 = $99;
 $100 = $16;
 $101 = ($100|0)==(1);
 L9: do {
  if ($101) {
   $21 = 0;
   while(1) {
    $102 = $21;
    $103 = $11;
    $104 = ($102|0)<($103|0);
    if (!($104)) {
     break L9;
    }
    $105 = $12;
    $106 = $21;
    $107 = (($105) + ($106<<3)|0);
    $108 = +HEAPF64[$107>>3];
    $109 = $23;
    $110 = (+_AT_inverse_RDD_Test_m($108,$109));
    $111 = $20;
    $112 = $21;
    $113 = (($111) + ($112<<3)|0);
    HEAPF64[$113>>3] = $110;
    $114 = $21;
    $115 = (($114) + 1)|0;
    $21 = $115;
   }
  }
 } while(0);
 $116 = $16;
 $117 = ($116|0)==(2);
 L15: do {
  if ($117) {
   $118 = $18;
   $119 = ($118|0)==(3);
   $120 = $18;
   $121 = ($120|0)==(6);
   $or$cond = $119 | $121;
   $122 = $18;
   $123 = ($122|0)==(2);
   $or$cond3 = $or$cond | $123;
   if (!($or$cond3)) {
    $21 = 0;
    while(1) {
     $160 = $21;
     $161 = $11;
     $162 = ($160|0)<($161|0);
     if (!($162)) {
      break;
     }
     $163 = $20;
     $164 = $21;
     $165 = (($163) + ($164<<3)|0);
     HEAPF64[$165>>3] = 0.0;
     $166 = $21;
     $167 = (($166) + 1)|0;
     $21 = $167;
    }
    $10 = 1;
    $432 = $10;
    STACKTOP = sp;return ($432|0);
   }
   $124 = $25;
   $28 = $124;
   $125 = +HEAPF64[$13>>3];
   $126 = (+_AT_ER_PowerLaw_alpha($125));
   $29 = $126;
   $21 = 0;
   while(1) {
    $127 = $21;
    $128 = $11;
    $129 = ($127|0)<($128|0);
    if (!($129)) {
     break L15;
    }
    $130 = $12;
    $131 = $21;
    $132 = (($130) + ($131<<3)|0);
    $133 = +HEAPF64[$132>>3];
    $134 = $26;
    $135 = $133 >= $134;
    if ($135) {
     $136 = $12;
     $137 = $21;
     $138 = (($136) + ($137<<3)|0);
     $139 = +HEAPF64[$138>>3];
     $140 = $27;
     $141 = $139 <= $140;
     if ($141) {
      $142 = $12;
      $143 = $21;
      $144 = (($142) + ($143<<3)|0);
      $145 = +HEAPF64[$144>>3];
      $146 = $24;
      $147 = $23;
      $148 = $18;
      $149 = $29;
      $150 = $28;
      $151 = (+_AT_inverse_RDD_KatzPoint_m($145,$146,$147,$148,$149,$150));
      $152 = $20;
      $153 = $21;
      $154 = (($152) + ($153<<3)|0);
      HEAPF64[$154>>3] = $151;
     } else {
      label = 17;
     }
    } else {
     label = 17;
    }
    if ((label|0) == 17) {
     label = 0;
     $155 = $20;
     $156 = $21;
     $157 = (($155) + ($156<<3)|0);
     HEAPF64[$157>>3] = 0.0;
    }
    $158 = $21;
    $159 = (($158) + 1)|0;
    $21 = $159;
   }
  }
 } while(0);
 $168 = $16;
 $169 = ($168|0)==(3);
 L35: do {
  if ($169) {
   $170 = $23;
   $171 = $16;
   $172 = $17;
   $173 = (+_AT_RDD_a0_m($170,$171,$172));
   $30 = $173;
   $21 = 0;
   while(1) {
    $174 = $21;
    $175 = $11;
    $176 = ($174|0)<($175|0);
    if (!($176)) {
     break L35;
    }
    $177 = $12;
    $178 = $21;
    $179 = (($177) + ($178<<3)|0);
    $180 = +HEAPF64[$179>>3];
    $181 = $26;
    $182 = $27;
    $183 = $30;
    $184 = $25;
    $185 = (+_AT_inverse_RDD_Geiss_m($180,$181,$182,$183,$184));
    $186 = $20;
    $187 = $21;
    $188 = (($186) + ($187<<3)|0);
    HEAPF64[$188>>3] = $185;
    $189 = $21;
    $190 = (($189) + 1)|0;
    $21 = $190;
   }
  }
 } while(0);
 $191 = $16;
 $192 = ($191|0)==(4);
 L41: do {
  if ($192) {
   $193 = $18;
   $194 = ($193|0)==(3);
   $195 = $18;
   $196 = ($195|0)==(6);
   $or$cond5 = $194 | $196;
   $197 = $18;
   $198 = ($197|0)==(2);
   $or$cond7 = $or$cond5 | $198;
   if (!($or$cond7)) {
    $21 = 0;
    while(1) {
     $245 = $21;
     $246 = $11;
     $247 = ($245|0)<($246|0);
     if (!($247)) {
      break;
     }
     $248 = $20;
     $249 = $21;
     $250 = (($248) + ($249<<3)|0);
     HEAPF64[$250>>3] = 0.0;
     $251 = $21;
     $252 = (($251) + 1)|0;
     $21 = $252;
    }
    $10 = 1;
    $432 = $10;
    STACKTOP = sp;return ($432|0);
   }
   $199 = +HEAPF64[$13>>3];
   $200 = HEAP32[$14>>2]|0;
   $201 = $15;
   $202 = $18;
   $203 = (+_AT_RDD_Katz_coeff_Gy_general($199,$200,$201,$202));
   $31 = $203;
   $204 = +HEAPF64[$13>>3];
   $205 = (+_AT_ER_PowerLaw_alpha($204));
   $32 = $205;
   $206 = $23;
   $207 = $16;
   $208 = $17;
   $209 = (+_AT_RDD_a0_m($206,$207,$208));
   $33 = $209;
   $21 = 0;
   while(1) {
    $210 = $21;
    $211 = $11;
    $212 = ($210|0)<($211|0);
    if (!($212)) {
     break L41;
    }
    $213 = $12;
    $214 = $21;
    $215 = (($213) + ($214<<3)|0);
    $216 = +HEAPF64[$215>>3];
    $217 = $26;
    $218 = $216 >= $217;
    if ($218) {
     $219 = $12;
     $220 = $21;
     $221 = (($219) + ($220<<3)|0);
     $222 = +HEAPF64[$221>>3];
     $223 = $27;
     $224 = $222 <= $223;
     if ($224) {
      $225 = $12;
      $226 = $21;
      $227 = (($225) + ($226<<3)|0);
      $228 = +HEAPF64[$227>>3];
      $229 = $24;
      $230 = $23;
      $231 = $33;
      $232 = $18;
      $233 = $32;
      $234 = $27;
      $235 = $31;
      $236 = (+_AT_inverse_RDD_KatzSite_m($228,$229,$230,$231,$232,$233,$234,$235));
      $237 = $20;
      $238 = $21;
      $239 = (($237) + ($238<<3)|0);
      HEAPF64[$239>>3] = $236;
     } else {
      label = 34;
     }
    } else {
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $240 = $20;
     $241 = $21;
     $242 = (($240) + ($241<<3)|0);
     HEAPF64[$242>>3] = 0.0;
    }
    $243 = $21;
    $244 = (($243) + 1)|0;
    $21 = $244;
   }
  }
 } while(0);
 $253 = $16;
 $254 = ($253|0)==(5);
 L61: do {
  if ($254) {
   $255 = +HEAPF64[$13>>3];
   $256 = HEAP32[$14>>2]|0;
   $257 = $15;
   $258 = $18;
   $259 = (+_AT_RDD_Katz_coeff_Gy_general($255,$256,$257,$258));
   $34 = $259;
   $260 = $25;
   $35 = $260;
   $261 = +HEAPF64[$13>>3];
   $262 = (+_AT_beta_from_E_single($261));
   $36 = $262;
   $21 = 0;
   while(1) {
    $263 = $21;
    $264 = $11;
    $265 = ($263|0)<($264|0);
    if (!($265)) {
     break L61;
    }
    $266 = $12;
    $267 = $21;
    $268 = (($266) + ($267<<3)|0);
    $269 = +HEAPF64[$268>>3];
    $270 = $26;
    $271 = $269 >= $270;
    if ($271) {
     $272 = $12;
     $273 = $21;
     $274 = (($272) + ($273<<3)|0);
     $275 = +HEAPF64[$274>>3];
     $276 = $27;
     $277 = $275 <= $276;
     if ($277) {
      $278 = $12;
      $279 = $21;
      $280 = (($278) + ($279<<3)|0);
      $281 = +HEAPF64[$280>>3];
      $282 = $24;
      $283 = $23;
      $284 = $18;
      $285 = $36;
      $286 = $35;
      $287 = $34;
      $288 = (+_AT_inverse_RDD_Cucinotta_m($281,$282,$283,$284,$285,$286,$287));
      $289 = $20;
      $290 = $21;
      $291 = (($289) + ($290<<3)|0);
      HEAPF64[$291>>3] = $288;
     } else {
      label = 46;
     }
    } else {
     label = 46;
    }
    if ((label|0) == 46) {
     label = 0;
     $292 = $20;
     $293 = $21;
     $294 = (($292) + ($293<<3)|0);
     HEAPF64[$294>>3] = 0.0;
    }
    $295 = $21;
    $296 = (($295) + 1)|0;
    $21 = $296;
   }
  }
 } while(0);
 $297 = $16;
 $298 = ($297|0)==(6);
 L73: do {
  if ($298) {
   $299 = $18;
   $300 = ($299|0)==(3);
   $301 = $18;
   $302 = ($301|0)==(6);
   $or$cond9 = $300 | $302;
   $303 = $18;
   $304 = ($303|0)==(2);
   $or$cond11 = $or$cond9 | $304;
   if (!($or$cond11)) {
    $21 = 0;
    while(1) {
     $352 = $21;
     $353 = $11;
     $354 = ($352|0)<($353|0);
     if (!($354)) {
      break;
     }
     $355 = $20;
     $356 = $21;
     $357 = (($355) + ($356<<3)|0);
     HEAPF64[$357>>3] = 0.0;
     $358 = $21;
     $359 = (($358) + 1)|0;
     $21 = $359;
    }
    $10 = 1;
    $432 = $10;
    STACKTOP = sp;return ($432|0);
   }
   $305 = +HEAPF64[$13>>3];
   $306 = HEAP32[$14>>2]|0;
   $307 = $15;
   $308 = $18;
   $309 = (+_AT_RDD_Katz_coeff_Gy_general($305,$306,$307,$308));
   $37 = $309;
   $310 = $25;
   $38 = $310;
   $311 = +HEAPF64[$13>>3];
   $312 = (+_AT_ER_PowerLaw_alpha($311));
   $39 = $312;
   $313 = $23;
   $314 = $16;
   $315 = $17;
   $316 = (+_AT_RDD_a0_m($313,$314,$315));
   $40 = $316;
   $21 = 0;
   while(1) {
    $317 = $21;
    $318 = $11;
    $319 = ($317|0)<($318|0);
    if (!($319)) {
     break L73;
    }
    $320 = $12;
    $321 = $21;
    $322 = (($320) + ($321<<3)|0);
    $323 = +HEAPF64[$322>>3];
    $324 = $26;
    $325 = $323 >= $324;
    if ($325) {
     $326 = $12;
     $327 = $21;
     $328 = (($326) + ($327<<3)|0);
     $329 = +HEAPF64[$328>>3];
     $330 = $27;
     $331 = $329 <= $330;
     if ($331) {
      $332 = $12;
      $333 = $21;
      $334 = (($332) + ($333<<3)|0);
      $335 = +HEAPF64[$334>>3];
      $336 = $24;
      $337 = $23;
      $338 = $40;
      $339 = $18;
      $340 = $39;
      $341 = $38;
      $342 = $37;
      $343 = (+_AT_inverse_RDD_ExtendedTarget_KatzPoint_m($335,$336,$337,$338,$339,$340,$341,$342));
      $344 = $20;
      $345 = $21;
      $346 = (($344) + ($345<<3)|0);
      HEAPF64[$346>>3] = $343;
     } else {
      label = 55;
     }
    } else {
     label = 55;
    }
    if ((label|0) == 55) {
     label = 0;
     $347 = $20;
     $348 = $21;
     $349 = (($347) + ($348<<3)|0);
     HEAPF64[$349>>3] = 0.0;
    }
    $350 = $21;
    $351 = (($350) + 1)|0;
    $21 = $351;
   }
  }
 } while(0);
 $360 = $16;
 $361 = ($360|0)==(7);
 L93: do {
  if ($361) {
   $362 = +HEAPF64[$13>>3];
   $363 = HEAP32[$14>>2]|0;
   $364 = $15;
   $365 = $18;
   $366 = (+_AT_RDD_Katz_coeff_Gy_general($362,$363,$364,$365));
   $41 = $366;
   $367 = +HEAPF64[$13>>3];
   $368 = (+_AT_beta_from_E_single($367));
   $42 = $368;
   $369 = $25;
   $43 = $369;
   $370 = $23;
   $371 = $16;
   $372 = $17;
   $373 = (+_AT_RDD_a0_m($370,$371,$372));
   $44 = $373;
   $374 = $44;
   $375 = $23;
   $376 = $374 < $375;
   $377 = $44;
   $378 = $23;
   $379 = $376 ? $377 : $378;
   $45 = $379;
   $380 = $24;
   $381 = $45;
   $382 = $23;
   $383 = $42;
   $384 = $41;
   $385 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($380,$381,$382,$383,$384));
   $46 = $385;
   $386 = $43;
   $387 = $24;
   $388 = $45;
   $389 = $23;
   $390 = $42;
   $391 = $41;
   $392 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($387,$388,$389,$390,$391));
   $393 = $386 * $392;
   $394 = $46;
   $395 = $394 + $393;
   $46 = $395;
   $21 = 0;
   while(1) {
    $396 = $21;
    $397 = $11;
    $398 = ($396|0)<($397|0);
    if (!($398)) {
     break L93;
    }
    $399 = $12;
    $400 = $21;
    $401 = (($399) + ($400<<3)|0);
    $402 = +HEAPF64[$401>>3];
    $403 = $26;
    $404 = $402 >= $403;
    if ($404) {
     $405 = $12;
     $406 = $21;
     $407 = (($405) + ($406<<3)|0);
     $408 = +HEAPF64[$407>>3];
     $409 = $27;
     $410 = 0.99999000000000004 * $409;
     $411 = $408 < $410;
     if ($411) {
      $412 = $12;
      $413 = $21;
      $414 = (($412) + ($413<<3)|0);
      $415 = +HEAPF64[$414>>3];
      $416 = $44;
      $417 = $24;
      $418 = $23;
      $419 = $42;
      $420 = $41;
      $421 = $43;
      $422 = $46;
      $423 = (+_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m($415,$416,$417,$418,$419,$420,$421,$422));
      $424 = $20;
      $425 = $21;
      $426 = (($424) + ($425<<3)|0);
      HEAPF64[$426>>3] = $423;
     } else {
      label = 67;
     }
    } else {
     label = 67;
    }
    if ((label|0) == 67) {
     label = 0;
     $427 = $20;
     $428 = $21;
     $429 = (($427) + ($428<<3)|0);
     HEAPF64[$429>>3] = 0.0;
    }
    $430 = $21;
    $431 = (($430) + 1)|0;
    $21 = $431;
   }
  }
 } while(0);
 $10 = 0;
 $432 = $10;
 STACKTOP = sp;return ($432|0);
}
function _geometryFunctionPhi($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 88|0;
 $8 = sp + 32|0;
 $9 = sp + 16|0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0.0;
 $7 = 0.0;
 $11 = $5;
 $12 = $3;
 $13 = $4;
 $14 = $12 - $13;
 $15 = (+Math_abs((+$14)));
 $16 = $11 <= $15;
 if (!($16)) {
  $20 = $4;
  $21 = (+_gsl_pow_2($20));
  $22 = $3;
  $23 = $5;
  $24 = $22 - $23;
  $25 = (+_gsl_pow_2($24));
  $26 = $21 - $25;
  $7 = $26;
  $27 = $5;
  $28 = $3;
  $29 = $27 + $28;
  $30 = (+_gsl_pow_2($29));
  $31 = $4;
  $32 = (+_gsl_pow_2($31));
  $33 = $30 - $32;
  $34 = $7;
  $35 = $34 / $33;
  $7 = $35;
  $36 = $7;
  $37 = (+Math_sqrt((+$36)));
  HEAPF64[$8>>3] = $37;
  $38 = ((($8)) + 8|0);
  HEAPF64[$38>>3] = 0.0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$8+12>>2]|0;
  _gsl_complex_arctan($10,$$byval_copy);
  ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$10+12>>2]|0;
  $39 = +HEAPF64[$9>>3];
  $40 = 2.0 * $39;
  $6 = $40;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 }
 $17 = $3;
 $18 = $4;
 $19 = $17 >= $18;
 if ($19) {
  $6 = 0.0;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 } else {
  $6 = 3.1415926535897931;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 }
 return +(0.0);
}
function _AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $4 = $8;
 $9 = $4;
 $10 = +HEAPF64[$9>>3];
 $5 = $10;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $6 = $13;
 $14 = $2;
 $15 = $4;
 $16 = ((($15)) + 40|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $4;
 $19 = ((($18)) + 16|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $4;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = ((($24)) + 32|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $4;
 $28 = ((($27)) + 48|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+_AT_RDD_KatzPoint_Gy($14,$17,$20,$23,$26,$29));
 $7 = $30;
 $31 = $2;
 $32 = 2.0 * $31;
 $33 = $7;
 $34 = $32 * $33;
 $35 = $5;
 $36 = $6;
 $37 = $2;
 $38 = (+_geometryFunctionPhi($35,$36,$37));
 $39 = $34 * $38;
 STACKTOP = sp;return (+$39);
}
function _AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp + 128|0;
 $15 = sp + 64|0;
 $16 = sp + 56|0;
 $18 = sp + 136|0;
 $19 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $21 = $7;
 $22 = $8;
 $23 = $21 > $22;
 if ($23) {
  $24 = $7;
  $25 = $8;
  $26 = $24 - $25;
  $27 = $26 > 0.0;
  if ($27) {
   $28 = $7;
   $29 = $8;
   $30 = $28 - $29;
   $31 = $30;
  } else {
   $31 = 0.0;
  }
  $14 = $31;
 }
 (_gsl_set_error_handler_off()|0);
 $32 = (_gsl_integration_workspace_alloc(1000)|0);
 $17 = $32;
 HEAP32[$18>>2] = 49;
 $33 = $7;
 HEAPF64[$19>>3] = $33;
 $34 = $8;
 $35 = ((($19)) + 8|0);
 HEAPF64[$35>>3] = $34;
 $36 = $9;
 $37 = ((($19)) + 24|0);
 HEAP32[$37>>2] = $36;
 $38 = $11;
 $39 = ((($19)) + 16|0);
 HEAPF64[$39>>3] = $38;
 $40 = $12;
 $41 = ((($19)) + 32|0);
 HEAPF64[$41>>3] = $40;
 $42 = $10;
 $43 = ((($19)) + 40|0);
 HEAPF64[$43>>3] = $42;
 $44 = $13;
 $45 = ((($19)) + 48|0);
 HEAPF64[$45>>3] = $44;
 $46 = ((($18)) + 4|0);
 HEAP32[$46>>2] = $19;
 $47 = $14;
 $48 = $7;
 $49 = $8;
 $50 = $48 + $49;
 $51 = $17;
 $52 = (_gsl_integration_qags($18,$47,$50,0.0,1.0000000000000001E-5,1000,$51,$15,$16)|0);
 $20 = $52;
 $53 = $20;
 $54 = ($53|0)==(18);
 $55 = $20;
 $56 = ($55|0)==(21);
 $or$cond = $54 | $56;
 if (!($or$cond)) {
  $57 = $17;
  _gsl_integration_workspace_free($57);
  $58 = $8;
  $59 = (+_gsl_pow_2($58));
  $60 = 0.31830988618379069 / $59;
  $61 = +HEAPF64[$15>>3];
  $62 = $61 * $60;
  HEAPF64[$15>>3] = $62;
  $63 = +HEAPF64[$15>>3];
  STACKTOP = sp;return (+$63);
 }
 (_printf(75770,$vararg_buffer)|0);
 HEAPF64[$15>>3] = -1.0;
 $57 = $17;
 _gsl_integration_workspace_free($57);
 $58 = $8;
 $59 = (+_gsl_pow_2($58));
 $60 = 0.31830988618379069 / $59;
 $61 = +HEAPF64[$15>>3];
 $62 = $61 * $60;
 HEAPF64[$15>>3] = $62;
 $63 = +HEAPF64[$15>>3];
 STACKTOP = sp;return (+$63);
}
function _AT_RDD_ExtendedTarget_KatzPoint_Gy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0.0;
 $18 = $9;
 $19 = $12;
 $20 = $18 < $19;
 $21 = $9;
 $22 = $12;
 $23 = $20 ? $21 : $22;
 $17 = $23;
 $24 = $8;
 $25 = $9;
 $26 = 0.01 * $25;
 $27 = $24 <= $26;
 $28 = $8;
 $29 = $28 >= 0.0;
 $or$cond = $27 & $29;
 if ($or$cond) {
  $30 = $14;
  $16 = $30;
  $31 = $12;
  $32 = $9;
  $33 = $31 < $32;
  if ($33) {
   $34 = $17;
   $35 = $9;
   $36 = $34 / $35;
   $37 = (+_gsl_pow_2($36));
   $38 = $16;
   $39 = $38 * $37;
   $16 = $39;
  }
 }
 $40 = $8;
 $41 = $9;
 $42 = 100.0 * $41;
 $43 = $40 < $42;
 if ($43) {
  $44 = $8;
  $45 = $9;
  $46 = 0.01 * $45;
  $47 = $44 > $46;
  if ($47) {
   $48 = $8;
   $49 = $9;
   $50 = $10;
   $51 = $11;
   $52 = $12;
   $53 = $13;
   $54 = $15;
   $55 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration($48,$49,$50,$51,$52,$53,$54));
   $16 = $55;
  }
 }
 $56 = $8;
 $57 = $9;
 $58 = 100.0 * $57;
 $59 = $56 >= $58;
 if (!($59)) {
  $78 = $16;
  STACKTOP = sp;return (+$78);
 }
 $60 = $8;
 $61 = $12;
 $62 = $60 <= $61;
 if (!($62)) {
  $78 = $16;
  STACKTOP = sp;return (+$78);
 }
 $63 = $10;
 $64 = ($63|0)==(3);
 $65 = $10;
 $66 = ($65|0)==(6);
 $or$cond3 = $64 | $66;
 if ($or$cond3) {
  $67 = $8;
  $68 = $13;
  $69 = $12;
  $70 = $15;
  $71 = (+_AT_RDD_Katz_PowerLawER_Dpoint_Gy($67,$68,$69,$70));
  $16 = $71;
  $78 = $16;
  STACKTOP = sp;return (+$78);
 }
 $72 = $10;
 $73 = ($72|0)==(2);
 if (!($73)) {
  $78 = $16;
  STACKTOP = sp;return (+$78);
 }
 $74 = $8;
 $75 = $12;
 $76 = $15;
 $77 = (+_AT_RDD_Katz_LinearER_Dpoint_Gy($74,$75,$76));
 $16 = $77;
 $78 = $16;
 STACKTOP = sp;return (+$78);
}
function _AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $4;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = ((($13)) + 48|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $4;
 $17 = ((($16)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $4;
 $20 = ((($19)) + 32|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $4;
 $23 = ((($22)) + 40|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $4;
 $26 = ((($25)) + 56|0);
 $27 = +HEAPF64[$26>>3];
 $28 = (+_AT_RDD_ExtendedTarget_KatzPoint_Gy($6,$9,$12,$15,$18,$21,$24,$27));
 $29 = $4;
 $30 = +HEAPF64[$29>>3];
 $31 = $28 - $30;
 STACKTOP = sp;return (+$31);
}
function _AT_inverse_RDD_ExtendedTarget_KatzPoint_m($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $17 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 1.0E-13;
 $19 = $8;
 HEAPF64[$17>>3] = $19;
 $20 = $11;
 $21 = ((($17)) + 8|0);
 HEAPF64[$21>>3] = $20;
 $22 = $12;
 $23 = ((($17)) + 24|0);
 HEAP32[$23>>2] = $22;
 $24 = $10;
 $25 = ((($17)) + 16|0);
 HEAPF64[$25>>3] = $24;
 $26 = $13;
 $27 = ((($17)) + 32|0);
 HEAPF64[$27>>3] = $26;
 $28 = $14;
 $29 = ((($17)) + 40|0);
 HEAPF64[$29>>3] = $28;
 $30 = $9;
 $31 = ((($17)) + 48|0);
 HEAPF64[$31>>3] = $30;
 $32 = $15;
 $33 = ((($17)) + 56|0);
 HEAPF64[$33>>3] = $32;
 $34 = $10;
 $35 = $11;
 $36 = $34 + $35;
 $37 = (+_zriddr(50,$17,0.0,$36,1.0E-13));
 $18 = $37;
 $38 = $18;
 STACKTOP = sp;return (+$38);
}
function _AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $4 = $8;
 $9 = $4;
 $10 = +HEAPF64[$9>>3];
 $5 = $10;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $6 = $13;
 $14 = $2;
 $15 = $4;
 $16 = ((($15)) + 16|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $4;
 $19 = ((($18)) + 24|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $4;
 $22 = ((($21)) + 32|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $4;
 $25 = ((($24)) + 48|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $4;
 $28 = ((($27)) + 40|0);
 $29 = +HEAPF64[$28>>3];
 $30 = (+_AT_RDD_CucinottaPoint_Gy($14,$17,$20,$23,$26,$29));
 $7 = $30;
 $31 = $2;
 $32 = 2.0 * $31;
 $33 = $7;
 $34 = $32 * $33;
 $35 = $5;
 $36 = $6;
 $37 = $2;
 $38 = (+_geometryFunctionPhi($35,$36,$37));
 $39 = $34 * $38;
 STACKTOP = sp;return (+$39);
}
function _AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp + 136|0;
 $15 = sp + 64|0;
 $16 = sp + 56|0;
 $18 = sp + 144|0;
 $19 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0.0;
 $21 = $7;
 $22 = $8;
 $23 = $21 > $22;
 if ($23) {
  $24 = $7;
  $25 = $8;
  $26 = $24 - $25;
  $27 = $26 > 0.0;
  if ($27) {
   $28 = $7;
   $29 = $8;
   $30 = $28 - $29;
   $31 = $30;
  } else {
   $31 = 0.0;
  }
  $14 = $31;
 }
 (_gsl_set_error_handler_off()|0);
 $32 = (_gsl_integration_workspace_alloc(1000)|0);
 $17 = $32;
 HEAP32[$18>>2] = 51;
 $33 = $7;
 HEAPF64[$19>>3] = $33;
 $34 = $8;
 $35 = ((($19)) + 8|0);
 HEAPF64[$35>>3] = $34;
 $36 = $9;
 $37 = ((($19)) + 16|0);
 HEAPF64[$37>>3] = $36;
 $38 = $10;
 $39 = ((($19)) + 24|0);
 HEAPF64[$39>>3] = $38;
 $40 = $11;
 $41 = ((($19)) + 32|0);
 HEAPF64[$41>>3] = $40;
 $42 = $12;
 $43 = ((($19)) + 40|0);
 HEAPF64[$43>>3] = $42;
 $44 = $13;
 $45 = ((($19)) + 48|0);
 HEAPF64[$45>>3] = $44;
 $46 = ((($18)) + 4|0);
 HEAP32[$46>>2] = $19;
 $47 = $14;
 $48 = $7;
 $49 = $8;
 $50 = $48 + $49;
 $51 = $17;
 $52 = (_gsl_integration_qags($18,$47,$50,0.0,1.0000000000000001E-5,1000,$51,$15,$16)|0);
 $20 = $52;
 $53 = $20;
 $54 = ($53|0)==(18);
 $55 = $20;
 $56 = ($55|0)==(21);
 $or$cond = $54 | $56;
 if (!($or$cond)) {
  $57 = $17;
  _gsl_integration_workspace_free($57);
  $58 = $8;
  $59 = (+_gsl_pow_2($58));
  $60 = 0.31830988618379069 / $59;
  $61 = +HEAPF64[$15>>3];
  $62 = $61 * $60;
  HEAPF64[$15>>3] = $62;
  $63 = +HEAPF64[$15>>3];
  STACKTOP = sp;return (+$63);
 }
 (_printf(75830,$vararg_buffer)|0);
 HEAPF64[$15>>3] = -1.0;
 $57 = $17;
 _gsl_integration_workspace_free($57);
 $58 = $8;
 $59 = (+_gsl_pow_2($58));
 $60 = 0.31830988618379069 / $59;
 $61 = +HEAPF64[$15>>3];
 $62 = $61 * $60;
 HEAPF64[$15>>3] = $62;
 $63 = +HEAPF64[$15>>3];
 STACKTOP = sp;return (+$63);
}
function _AT_RDD_ExtendedTarget_CucinottaPoint_Gy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $70 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0.0;
 $18 = $9;
 $19 = $11;
 $20 = $18 < $19;
 $21 = $9;
 $22 = $11;
 $23 = $20 ? $21 : $22;
 $17 = $23;
 $24 = $8;
 $25 = $9;
 $26 = 0.01 * $25;
 $27 = $24 <= $26;
 $28 = $8;
 $29 = $28 >= 0.0;
 $or$cond = $27 & $29;
 if ($or$cond) {
  $30 = $15;
  $16 = $30;
  $31 = $11;
  $32 = $9;
  $33 = $31 < $32;
  if ($33) {
   $34 = $17;
   $35 = $9;
   $36 = $34 / $35;
   $37 = (+_gsl_pow_2($36));
   $38 = $16;
   $39 = $38 * $37;
   $16 = $39;
  }
 }
 $40 = $8;
 $41 = $9;
 $42 = 100.0 * $41;
 $43 = $40 < $42;
 if ($43) {
  $44 = $8;
  $45 = $9;
  $46 = 0.01 * $45;
  $47 = $44 > $46;
  if ($47) {
   $48 = $8;
   $49 = $9;
   $50 = $10;
   $51 = $11;
   $52 = $12;
   $53 = $13;
   $54 = $14;
   $55 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration($48,$49,$50,$51,$52,$53,$54));
   $16 = $55;
  }
 }
 $56 = $8;
 $57 = $9;
 $58 = 100.0 * $57;
 $59 = $56 >= $58;
 if (!($59)) {
  $70 = $16;
  STACKTOP = sp;return (+$70);
 }
 $60 = $8;
 $61 = $11;
 $62 = $60 <= $61;
 if (!($62)) {
  $70 = $16;
  STACKTOP = sp;return (+$70);
 }
 $63 = $8;
 $64 = $10;
 $65 = $11;
 $66 = $12;
 $67 = $14;
 $68 = $13;
 $69 = (+_AT_RDD_CucinottaPoint_Gy($63,$64,$65,$66,$67,$68));
 $16 = $69;
 $70 = $16;
 STACKTOP = sp;return (+$70);
}
function _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $4;
 $11 = ((($10)) + 16|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $4;
 $14 = ((($13)) + 24|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $4;
 $17 = ((($16)) + 32|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $4;
 $20 = ((($19)) + 40|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $4;
 $23 = ((($22)) + 48|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $4;
 $26 = ((($25)) + 56|0);
 $27 = +HEAPF64[$26>>3];
 $28 = (+_AT_RDD_ExtendedTarget_CucinottaPoint_Gy($6,$9,$12,$15,$18,$21,$24,$27));
 $29 = $4;
 $30 = +HEAPF64[$29>>3];
 $31 = $28 - $30;
 STACKTOP = sp;return (+$31);
}
function _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $17 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 1.0E-13;
 $19 = $8;
 HEAPF64[$17>>3] = $19;
 $20 = $9;
 $21 = ((($17)) + 8|0);
 HEAPF64[$21>>3] = $20;
 $22 = $10;
 $23 = ((($17)) + 16|0);
 HEAPF64[$23>>3] = $22;
 $24 = $11;
 $25 = ((($17)) + 24|0);
 HEAPF64[$25>>3] = $24;
 $26 = $12;
 $27 = ((($17)) + 32|0);
 HEAPF64[$27>>3] = $26;
 $28 = $13;
 $29 = ((($17)) + 40|0);
 HEAPF64[$29>>3] = $28;
 $30 = $14;
 $31 = ((($17)) + 48|0);
 HEAPF64[$31>>3] = $30;
 $32 = $15;
 $33 = ((($17)) + 56|0);
 HEAPF64[$33>>3] = $32;
 $34 = $11;
 $35 = $9;
 $36 = $34 + $35;
 $37 = (+_zriddr(52,$17,0.0,$36,1.0E-13));
 $18 = $37;
 $38 = $18;
 STACKTOP = sp;return (+$38);
}
function _AT_RDD_Katz_LinearER_Daverage_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = 2.0 * $8;
 $10 = $5;
 $11 = $4;
 $12 = $10 / $11;
 $13 = (+Math_log((+$12)));
 $14 = $5;
 $15 = $4;
 $16 = $14 - $15;
 $17 = $6;
 $18 = $16 / $17;
 $19 = $13 - $18;
 $20 = $9 * $19;
 $21 = $5;
 $22 = $6;
 $23 = $21 / $22;
 $24 = (+_gsl_pow_2($23));
 $25 = $4;
 $26 = $6;
 $27 = $25 / $26;
 $28 = (+_gsl_pow_2($27));
 $29 = $24 - $28;
 $30 = $20 / $29;
 STACKTOP = sp;return (+$30);
}
function _AT_RDD_Katz_PowerLawER_DaverageKernel($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $5;
 $12 = 1.0 / $11;
 $6 = $12;
 $13 = $3;
 $14 = 1.0 - $13;
 $15 = $6;
 $16 = (+Math_pow((+$14),(+$15)));
 $17 = $3;
 $18 = $17 - 1.0;
 $19 = $3;
 $20 = $18 / $19;
 $21 = $6;
 $22 = - $21;
 $23 = (+Math_pow((+$20),(+$22)));
 $24 = $16 * $23;
 $7 = $24;
 $25 = $6;
 $26 = - $25;
 $27 = $6;
 $28 = - $27;
 $29 = $6;
 $30 = 1.0 - $29;
 $31 = $3;
 $32 = 1.0 / $31;
 $33 = (+_gsl_sf_hyperg_2F1($26,$28,$30,$32));
 $8 = $33;
 $34 = $4;
 $35 = 1.0 - $34;
 $36 = $6;
 $37 = (+Math_pow((+$35),(+$36)));
 $38 = $4;
 $39 = $38 - 1.0;
 $40 = $4;
 $41 = $39 / $40;
 $42 = $6;
 $43 = - $42;
 $44 = (+Math_pow((+$41),(+$43)));
 $45 = $37 * $44;
 $9 = $45;
 $46 = $6;
 $47 = - $46;
 $48 = $6;
 $49 = - $48;
 $50 = $6;
 $51 = 1.0 - $50;
 $52 = $4;
 $53 = 1.0 / $52;
 $54 = (+_gsl_sf_hyperg_2F1($47,$49,$51,$53));
 $10 = $54;
 $55 = $9;
 $56 = $10;
 $57 = $55 * $56;
 $58 = $7;
 $59 = $8;
 $60 = $58 * $59;
 $61 = $57 - $60;
 $62 = 2.0 * $61;
 $63 = $4;
 $64 = (+_gsl_pow_2($63));
 $65 = $3;
 $66 = (+_gsl_pow_2($65));
 $67 = $64 - $66;
 $68 = $62 / $67;
 STACKTOP = sp;return (+$68);
}
function _AT_RDD_Katz_PowerLawER_DaverageKernel_approx($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $5;
 $10 = (+_gsl_pow_2($9));
 $11 = $8 / $10;
 $12 = $3;
 $13 = $5;
 $14 = 4.0 * $13;
 $15 = $12 / $14;
 $16 = $5;
 $17 = 1.0 / $16;
 $18 = $17 - 1.0;
 $19 = $15 * $18;
 $20 = $19 - 1.0;
 $21 = $11 * $20;
 $22 = $3;
 $23 = (+Math_log((+$22)));
 $24 = $21 + $23;
 $6 = $24;
 $25 = $4;
 $26 = $5;
 $27 = (+_gsl_pow_2($26));
 $28 = $25 / $27;
 $29 = $4;
 $30 = $5;
 $31 = 4.0 * $30;
 $32 = $29 / $31;
 $33 = $5;
 $34 = 1.0 / $33;
 $35 = $34 - 1.0;
 $36 = $32 * $35;
 $37 = $36 - 1.0;
 $38 = $28 * $37;
 $39 = $4;
 $40 = (+Math_log((+$39)));
 $41 = $38 + $40;
 $7 = $41;
 $42 = $7;
 $43 = $6;
 $44 = $42 - $43;
 $45 = 2.0 * $44;
 $46 = $4;
 $47 = (+_gsl_pow_2($46));
 $48 = $3;
 $49 = (+_gsl_pow_2($48));
 $50 = $47 - $49;
 $51 = $45 / $50;
 STACKTOP = sp;return (+$51);
}
function _AT_RDD_Katz_PowerLawER_Daverage_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 $13 = $7;
 $14 = $12 / $13;
 $10 = $14;
 $15 = $6;
 $16 = $7;
 $17 = $15 / $16;
 $11 = $17;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $8;
 $22 = (+_AT_RDD_Katz_PowerLawER_DaverageKernel_approx($19,$20,$21));
 $23 = $18 * $22;
 STACKTOP = sp;return (+$23);
}
function _AT_RDD_Cucinotta_Ddelta_average_integrand_m($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $4 = $8;
 $9 = $4;
 $10 = +HEAPF64[$9>>3];
 $5 = $10;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $6 = $13;
 $14 = $2;
 $15 = 1.0 / $14;
 $7 = $15;
 $16 = $2;
 $17 = $6;
 $18 = (+_AT_RDD_Cucinotta_f_shortRange($16,$17));
 $19 = $7;
 $20 = $19 * $18;
 $7 = $20;
 $21 = $2;
 $22 = $5;
 $23 = (+_AT_RDD_Cucinotta_f_longRange($21,$22));
 $24 = $7;
 $25 = $24 * $23;
 $7 = $25;
 $26 = $7;
 STACKTOP = sp;return (+$26);
}
function _AT_RDD_Cucinotta_Ddelta_average_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 88|0;
 $vararg_buffer = sp + 80|0;
 $11 = sp + 24|0;
 $12 = sp + 16|0;
 $14 = sp + 96|0;
 $15 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $7;
 $18 = $8;
 $19 = $17 > $18;
 if (!($19)) {
  $20 = $6;
  $21 = $8;
  $22 = $20 > $21;
  if (!($22)) {
   $23 = $6;
   $24 = $7;
   $25 = $23 > $24;
   if (!($25)) {
    (_gsl_set_error_handler_off()|0);
    $26 = (_gsl_integration_workspace_alloc(10000)|0);
    $13 = $26;
    HEAP32[$14>>2] = 53;
    $27 = $8;
    HEAPF64[$15>>3] = $27;
    $28 = $9;
    $29 = ((($15)) + 8|0);
    HEAPF64[$29>>3] = $28;
    $30 = ((($14)) + 4|0);
    HEAP32[$30>>2] = $15;
    $31 = $6;
    $32 = $7;
    $33 = $13;
    $34 = (_gsl_integration_qags($14,$31,$32,9.9999999999999993E-12,9.9999999999999995E-8,10000,$33,$11,$12)|0);
    $16 = $34;
    $35 = $16;
    $36 = ($35|0)>(0);
    if ($36) {
     $37 = $16;
     HEAP32[$vararg_buffer1>>2] = $37;
     (_printf(75957,$vararg_buffer1)|0);
     HEAPF64[$11>>3] = -1.0;
    }
    $38 = $13;
    _gsl_integration_workspace_free($38);
    $39 = $10;
    $40 = 2.0 * $39;
    $41 = $7;
    $42 = $8;
    $43 = $41 / $42;
    $44 = (+_gsl_pow_2($43));
    $45 = $6;
    $46 = $8;
    $47 = $45 / $46;
    $48 = (+_gsl_pow_2($47));
    $49 = $44 - $48;
    $50 = $40 / $49;
    $51 = +HEAPF64[$11>>3];
    $52 = $50 * $51;
    $5 = $52;
    $53 = $5;
    STACKTOP = sp;return (+$53);
   }
  }
 }
 (_printf(75895,$vararg_buffer)|0);
 $5 = 0.0;
 $53 = $5;
 STACKTOP = sp;return (+$53);
}
function _AT_RDD_Cucinotta_Dexc_average_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp + 72|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $7;
 $15 = $8;
 $16 = $14 > $15;
 if (!($16)) {
  $17 = $6;
  $18 = $8;
  $19 = $17 > $18;
  if (!($19)) {
   $20 = $6;
   $21 = $7;
   $22 = $20 > $21;
   $23 = $6;
   $24 = $23 < 0.0;
   $or$cond = $22 | $24;
   if (!($or$cond)) {
    $25 = $9;
    $26 = $25 * 7.5894985817340996E-9;
    $11 = $26;
    $27 = $6;
    $28 = -0.5 * $27;
    $29 = $11;
    $30 = $28 / $29;
    $31 = (+_gsl_sf_expint_Ei($30));
    $12 = $31;
    $13 = 0.0;
    $32 = $7;
    $33 = $11;
    $34 = $32 / $33;
    $35 = $34 < 100.0;
    if ($35) {
     $36 = $7;
     $37 = -0.5 * $36;
     $38 = $11;
     $39 = $37 / $38;
     $40 = (+_gsl_sf_expint_Ei($39));
     $13 = $40;
    }
    $41 = $10;
    $42 = 2.0 * $41;
    $43 = $7;
    $44 = $8;
    $45 = $43 / $44;
    $46 = (+_gsl_pow_2($45));
    $47 = $6;
    $48 = $8;
    $49 = $47 / $48;
    $50 = (+_gsl_pow_2($49));
    $51 = $46 - $50;
    $52 = $42 / $51;
    $53 = $13;
    $54 = $12;
    $55 = $53 - $54;
    $56 = $52 * $55;
    $5 = $56;
    $57 = $5;
    STACKTOP = sp;return (+$57);
   }
  }
 }
 (_printf(76017,$vararg_buffer)|0);
 $5 = 0.0;
 $57 = $5;
 STACKTOP = sp;return (+$57);
}
function _AT_RDD_Cucinotta_Cnorm($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 80|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $11;
 $17 = $16 * 0.31830988618379069;
 $18 = $10;
 $19 = $8;
 $20 = (+_gsl_pow_2($19));
 $21 = $7;
 $22 = (+_gsl_pow_2($21));
 $23 = $20 - $22;
 $24 = $18 * $23;
 $25 = $17 / $24;
 $13 = $25;
 $26 = $7;
 $27 = $8;
 $28 = $8;
 $29 = $9;
 $30 = $12;
 $31 = (+_AT_RDD_Cucinotta_Ddelta_average_Gy($26,$27,$28,$29,$30));
 $14 = $31;
 $32 = $7;
 $33 = $8;
 $34 = $8;
 $35 = $9;
 $36 = $12;
 $37 = (+_AT_RDD_Cucinotta_Dexc_average_Gy($32,$33,$34,$35,$36));
 $15 = $37;
 $38 = $13;
 $39 = $38 > 0.0;
 $40 = $14;
 $41 = $40 > 0.0;
 $or$cond = $39 & $41;
 $42 = $15;
 $43 = $42 > 0.0;
 $or$cond3 = $or$cond & $43;
 if ($or$cond3) {
  $44 = $13;
  $45 = $14;
  $46 = $44 - $45;
  $47 = $15;
  $48 = $46 / $47;
  $6 = $48;
  $49 = $6;
  STACKTOP = sp;return (+$49);
 } else {
  (_printf(76077,$vararg_buffer)|0);
  $6 = 0.0;
  $49 = $6;
  STACKTOP = sp;return (+$49);
 }
 return +(0.0);
}
function _AT_RDD_Geiss_average_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 48|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = $9;
 $13 = $11 > $12;
 if (!($13)) {
  $14 = $6;
  $15 = $9;
  $16 = $14 > $15;
  if (!($16)) {
   $17 = $6;
   $18 = $7;
   $19 = $17 > $18;
   $20 = $6;
   $21 = $20 < 0.0;
   $or$cond = $19 | $21;
   if (!($or$cond)) {
    $22 = $7;
    $23 = $8;
    $24 = $22 <= $23;
    if ($24) {
     $25 = $10;
     $5 = $25;
     $73 = $5;
     STACKTOP = sp;return (+$73);
    }
    $26 = $6;
    $27 = $8;
    $28 = $26 < $27;
    if ($28) {
     $29 = $7;
     $30 = $8;
     $31 = $29 > $30;
     if ($31) {
      $32 = $10;
      $33 = $7;
      $34 = (+_gsl_pow_2($33));
      $35 = $6;
      $36 = (+_gsl_pow_2($35));
      $37 = $34 - $36;
      $38 = $32 / $37;
      $39 = $8;
      $40 = (+_gsl_pow_2($39));
      $41 = $6;
      $42 = (+_gsl_pow_2($41));
      $43 = $40 - $42;
      $44 = $8;
      $45 = (+_gsl_pow_2($44));
      $46 = 2.0 * $45;
      $47 = $7;
      $48 = $8;
      $49 = $47 / $48;
      $50 = (+Math_log((+$49)));
      $51 = $46 * $50;
      $52 = $43 + $51;
      $53 = $38 * $52;
      $5 = $53;
      $73 = $5;
      STACKTOP = sp;return (+$73);
     }
    }
    $54 = $6;
    $55 = $8;
    $56 = $54 >= $55;
    if ($56) {
     $57 = $10;
     $58 = $7;
     $59 = (+_gsl_pow_2($58));
     $60 = $6;
     $61 = (+_gsl_pow_2($60));
     $62 = $59 - $61;
     $63 = $57 / $62;
     $64 = $63 * 2.0;
     $65 = $8;
     $66 = (+_gsl_pow_2($65));
     $67 = $64 * $66;
     $68 = $7;
     $69 = $6;
     $70 = $68 / $69;
     $71 = (+Math_log((+$70)));
     $72 = $67 * $71;
     $5 = $72;
     $73 = $5;
     STACKTOP = sp;return (+$73);
    } else {
     $5 = 0.0;
     $73 = $5;
     STACKTOP = sp;return (+$73);
    }
   }
  }
 }
 (_printf(76112,$vararg_buffer)|0);
 $5 = 0.0;
 $73 = $5;
 STACKTOP = sp;return (+$73);
}
function _AT_RDD_Katz_LinearER_dEdx_J_m($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = $8 * 3.1415926535897931;
 $10 = $5;
 $11 = (+_gsl_pow_2($10));
 $12 = $4;
 $13 = (+_gsl_pow_2($12));
 $14 = $11 - $13;
 $15 = $9 * $14;
 $16 = $4;
 $17 = $5;
 $18 = $5;
 $19 = $7;
 $20 = (+_AT_RDD_Katz_LinearER_Daverage_Gy($16,$17,$18,$19));
 $21 = $15 * $20;
 STACKTOP = sp;return (+$21);
}
function _AT_RDD_Katz_PowerLawER_dEdx_J_m($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $7;
 $11 = $10 * 3.1415926535897931;
 $12 = $6;
 $13 = (+_gsl_pow_2($12));
 $14 = $5;
 $15 = (+_gsl_pow_2($14));
 $16 = $13 - $15;
 $17 = $11 * $16;
 $18 = $5;
 $19 = $6;
 $20 = $6;
 $21 = $8;
 $22 = $9;
 $23 = (+_AT_RDD_Katz_PowerLawER_Daverage_Gy($18,$19,$20,$21,$22));
 $24 = $17 * $23;
 STACKTOP = sp;return (+$24);
}
function _AT_RDD_Katz_LinearER_DSite_Gy($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $8;
 $16 = $9;
 $17 = $15 < $16;
 if ($17) {
  $18 = $12;
  $19 = $13;
  $20 = $18 - $19;
  $21 = 0.31830988618379069 * $20;
  $22 = $11;
  $23 = $9;
  $24 = (+_gsl_pow_2($23));
  $25 = $22 * $24;
  $26 = $21 / $25;
  $7 = $26;
  $31 = $7;
  STACKTOP = sp;return (+$31);
 } else {
  $27 = $8;
  $28 = $10;
  $29 = $14;
  $30 = (+_AT_RDD_Katz_LinearER_Dpoint_Gy($27,$28,$29));
  $7 = $30;
  $31 = $7;
  STACKTOP = sp;return (+$31);
 }
 return +(0.0);
}
function _AT_RDD_Katz_PowerLawER_DSite_Gy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $9;
 $18 = $10;
 $19 = $17 <= $18;
 if ($19) {
  $20 = $14;
  $21 = $15;
  $22 = $20 - $21;
  $23 = 0.31830988618379069 * $22;
  $24 = $12;
  $25 = $10;
  $26 = (+_gsl_pow_2($25));
  $27 = $24 * $26;
  $28 = $23 / $27;
  $8 = $28;
  $34 = $8;
  STACKTOP = sp;return (+$34);
 } else {
  $29 = $9;
  $30 = $13;
  $31 = $11;
  $32 = $16;
  $33 = (+_AT_RDD_Katz_PowerLawER_Dpoint_Gy($29,$30,$31,$32));
  $8 = $33;
  $34 = $8;
  STACKTOP = sp;return (+$34);
 }
 return +(0.0);
}
function _AT_RDD_KatzSite_Gy($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $11;
 $22 = $12;
 $23 = $21 >= $22;
 if ($23) {
  $24 = $11;
  $25 = $13;
  $26 = $24 <= $25;
  if ($26) {
   $27 = $15;
   $28 = ($27|0)==(3);
   $29 = $15;
   $30 = ($29|0)==(6);
   $or$cond = $28 | $30;
   if ($or$cond) {
    $31 = $11;
    $32 = $14;
    $33 = $13;
    $34 = $17;
    $35 = $16;
    $36 = $18;
    $37 = $19;
    $38 = $20;
    $39 = (+_AT_RDD_Katz_PowerLawER_DSite_Gy($31,$32,$33,$34,$35,$36,$37,$38));
    $10 = $39;
    $50 = $10;
    STACKTOP = sp;return (+$50);
   }
   $40 = $15;
   $41 = ($40|0)==(2);
   if ($41) {
    $42 = $11;
    $43 = $14;
    $44 = $13;
    $45 = $17;
    $46 = $18;
    $47 = $19;
    $48 = $20;
    $49 = (+_AT_RDD_Katz_LinearER_DSite_Gy($42,$43,$44,$45,$46,$47,$48));
    $10 = $49;
    $50 = $10;
    STACKTOP = sp;return (+$50);
   }
  }
 }
 $10 = 0.0;
 $50 = $10;
 STACKTOP = sp;return (+$50);
}
function _AT_inverse_RDD_KatzSite_m($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $18 = $12;
 $19 = $10;
 $20 = $11;
 $21 = $13;
 $22 = $14;
 $23 = $16;
 $24 = (+_AT_RDD_KatzPoint_Gy($18,$19,$20,$21,$22,$23));
 $17 = $24;
 $25 = $9;
 $26 = $15;
 $27 = $25 > $26;
 if ($27) {
  $8 = 0.0;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 }
 $28 = $9;
 $29 = $17;
 $30 = $28 <= $29;
 if ($30) {
  $31 = $9;
  $32 = $10;
  $33 = $11;
  $34 = $13;
  $35 = $14;
  $36 = $16;
  $37 = (+_AT_inverse_RDD_KatzPoint_m($31,$32,$33,$34,$35,$36));
  $8 = $37;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 } else {
  $38 = $12;
  $8 = $38;
  $39 = $8;
  STACKTOP = sp;return (+$39);
 }
 return +(0.0);
}
function _AT_RDD_Test_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = $6;
 $11 = $9 >= $10;
 if ($11) {
  $12 = $5;
  $13 = $7;
  $14 = $12 <= $13;
  if ($14) {
   $15 = $8;
   $4 = $15;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = 0.0;
 }
 $16 = $4;
 STACKTOP = sp;return (+$16);
}
function _AT_inverse_RDD_Test_m($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 > 0.0;
 if ($6) {
  $7 = $4;
  $2 = $7;
 } else {
  $2 = 0.0;
 }
 $8 = $2;
 STACKTOP = sp;return (+$8);
}
function _AT_RDD_Geiss_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = $6;
 $13 = $11 <= $12;
 if ($13) {
  $14 = $6;
  $15 = $9;
  $16 = $14 <= $15;
  if ($16) {
   $17 = $10;
   $5 = $17;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $18 = $9;
   $19 = $6;
   $20 = $18 < $19;
   if ($20) {
    $21 = $6;
    $22 = $8;
    $23 = $21 <= $22;
    if ($23) {
     $24 = $10;
     $25 = $9;
     $26 = $6;
     $27 = $25 / $26;
     $28 = (+_gsl_pow_2($27));
     $29 = $24 * $28;
     $5 = $29;
     break;
    }
   }
   $5 = 0.0;
  }
 } while(0);
 $30 = $5;
 STACKTOP = sp;return (+$30);
}
function _AT_inverse_RDD_Geiss_m($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = $6;
 $13 = $11 <= $12;
 if ($13) {
  $14 = $6;
  $15 = $8;
  $16 = $14 <= $15;
  if ($16) {
   $17 = $9;
   $18 = $10;
   $19 = $6;
   $20 = $18 / $19;
   $21 = (+Math_sqrt((+$20)));
   $22 = $17 * $21;
   $5 = $22;
   $32 = $5;
   STACKTOP = sp;return (+$32);
  }
 }
 $23 = $6;
 $24 = $7;
 $25 = $23 < $24;
 if ($25) {
  $26 = $9;
  $27 = $10;
  $28 = $7;
  $29 = $27 / $28;
  $30 = (+Math_sqrt((+$29)));
  $31 = $26 * $30;
  $5 = $31;
  $32 = $5;
  STACKTOP = sp;return (+$32);
 } else {
  $5 = 0.0;
  $32 = $5;
  STACKTOP = sp;return (+$32);
 }
 return +(0.0);
}
function _AT_RDD_Katz_coeff_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $8;
 $12 = $11 * 4.0848280625059705E-42;
 $10 = $12;
 $13 = $10;
 $14 = $13 * 0.5;
 $15 = $14 * 0.31830988618379069;
 $16 = $5;
 $17 = $6;
 $18 = $16 / $17;
 $19 = (+_gsl_pow_2($18));
 $20 = $15 * $19;
 $21 = $7;
 $22 = $9;
 $23 = (+_gsl_pow_2($22));
 $24 = $21 * $23;
 $25 = $20 / $24;
 STACKTOP = sp;return (+$25);
}
function _AT_RDD_Katz_coeff_Gy_general($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $4;
 $17 = (+_AT_beta_from_E_single($16));
 $8 = $17;
 $18 = $6;
 _AT_get_material_data($18,$9,0,0,0,0,0,0);
 $19 = +HEAPF64[$9>>3];
 $20 = $19 * 1000.0;
 $11 = $20;
 $21 = $6;
 $22 = (+_AT_electron_density_m3_from_material_no_single($21));
 $10 = $22;
 $23 = $4;
 $24 = $6;
 $25 = $7;
 $26 = (+_AT_max_electron_range_m($23,$24,$25));
 $12 = $26;
 $27 = $5;
 $28 = (_AT_Z_from_particle_no_single($27)|0);
 $13 = $28;
 $29 = $8;
 $30 = $13;
 $31 = (+_AT_effective_charge_from_beta_single($29,$30));
 $14 = $31;
 $32 = $14;
 $33 = $8;
 $34 = $11;
 $35 = $10;
 $36 = $12;
 $37 = (+_AT_RDD_Katz_coeff_Gy($32,$33,$34,$35,$36));
 $15 = $37;
 $38 = $15;
 STACKTOP = sp;return (+$38);
}
function _AT_RDD_Katz_LinearER_Dpoint_Gy($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = $4;
 $8 = $6 * $7;
 $9 = $3;
 $10 = $8 / $9;
 $11 = $4;
 $12 = $3;
 $13 = $11 / $12;
 $14 = $13 - 1.0;
 $15 = $10 * $14;
 STACKTOP = sp;return (+$15);
}
function _AT_RDD_Katz_PowerLawER_Dpoint_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = $7;
 $11 = $9 > $10;
 if ($11) {
  $4 = 0.0;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 } else {
  $12 = $8;
  $13 = $6;
  $14 = 1.0 / $13;
  $15 = $12 * $14;
  $16 = $7;
  $17 = $5;
  $18 = $16 / $17;
  $19 = (+_gsl_pow_2($18));
  $20 = $15 * $19;
  $21 = $5;
  $22 = $7;
  $23 = $21 / $22;
  $24 = 1.0 - $23;
  $25 = $6;
  $26 = 1.0 / $25;
  $27 = (+Math_pow((+$24),(+$26)));
  $28 = $20 * $27;
  $4 = $28;
  $29 = $4;
  STACKTOP = sp;return (+$29);
 }
 return +(0.0);
}
function _AT_RDD_KatzPoint_Gy($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $7;
 $14 = $8;
 $15 = $13 >= $14;
 if ($15) {
  $16 = $7;
  $17 = $9;
  $18 = $16 <= $17;
  if ($18) {
   $19 = $10;
   $20 = ($19|0)==(3);
   $21 = $10;
   $22 = ($21|0)==(6);
   $or$cond = $20 | $22;
   if ($or$cond) {
    $23 = $7;
    $24 = $11;
    $25 = $9;
    $26 = $12;
    $27 = (+_AT_RDD_Katz_PowerLawER_Dpoint_Gy($23,$24,$25,$26));
    $6 = $27;
    $34 = $6;
    STACKTOP = sp;return (+$34);
   }
   $28 = $10;
   $29 = ($28|0)==(2);
   if ($29) {
    $30 = $7;
    $31 = $9;
    $32 = $12;
    $33 = (+_AT_RDD_Katz_LinearER_Dpoint_Gy($30,$31,$32));
    $6 = $33;
    $34 = $6;
    STACKTOP = sp;return (+$34);
   }
  }
 }
 $6 = 0.0;
 $34 = $6;
 STACKTOP = sp;return (+$34);
}
function _AT_inverse_RDD_KatzPoint_LinearER_m($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = 4.0 * $9;
 $11 = $7;
 $12 = $10 / $11;
 $13 = 1.0 + $12;
 $14 = (+Math_sqrt((+$13)));
 $15 = 1.0 + $14;
 $16 = 0.5 * $15;
 $8 = $16;
 $17 = $6;
 $18 = $8;
 $19 = $17 / $18;
 STACKTOP = sp;return (+$19);
}
function _AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 16|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 < $10;
 if ($11) {
  $12 = $5;
  $13 = +HEAPF64[$12>>3];
  $14 = - $13;
  $2 = $14;
  $29 = $2;
  STACKTOP = sp;return (+$29);
 } else {
  $15 = $3;
  $16 = $5;
  $17 = ((($16)) + 32|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $5;
  $20 = ((($19)) + 24|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $5;
  $23 = ((($22)) + 40|0);
  $24 = +HEAPF64[$23>>3];
  $25 = (+_AT_RDD_Katz_PowerLawER_Dpoint_Gy($15,$18,$21,$24));
  $26 = $5;
  $27 = +HEAPF64[$26>>3];
  $28 = $25 - $27;
  $2 = $28;
  $29 = $2;
  STACKTOP = sp;return (+$29);
 }
 return +(0.0);
}
function _AT_inverse_RDD_KatzPoint_m($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $14 = sp + 8|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $10;
 $17 = ($16|0)==(3);
 $18 = $10;
 $19 = ($18|0)==(6);
 $or$cond = $17 | $19;
 if ($or$cond) {
  $13 = 1.0E-13;
  $20 = $7;
  HEAPF64[$14>>3] = $20;
  $21 = $8;
  $22 = ((($14)) + 16|0);
  HEAPF64[$22>>3] = $21;
  $23 = $9;
  $24 = ((($14)) + 24|0);
  HEAPF64[$24>>3] = $23;
  $25 = $11;
  $26 = ((($14)) + 32|0);
  HEAPF64[$26>>3] = $25;
  $27 = $12;
  $28 = ((($14)) + 40|0);
  HEAPF64[$28>>3] = $27;
  $29 = $8;
  $30 = $9;
  $31 = $13;
  $32 = (+_zriddr(54,$14,$29,$30,$31));
  $15 = $32;
  $33 = $15;
  $6 = $33;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 }
 $34 = $10;
 $35 = ($34|0)==(2);
 if ($35) {
  $36 = $7;
  $37 = $8;
  $38 = $9;
  $39 = $12;
  $40 = (+_AT_inverse_RDD_KatzPoint_LinearER_m($36,$37,$38,$39));
  $6 = $40;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 } else {
  $6 = 0.0;
  $41 = $6;
  STACKTOP = sp;return (+$41);
 }
 return +(0.0);
}
function _AT_RDD_Cucinotta_f_shortRange($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = 1.0000000000000001E-9 / $4;
 $6 = $5 + 0.59999999999999998;
 $7 = $3;
 $8 = 1.7 * $7;
 $9 = $6 + $8;
 $10 = $3;
 $11 = (+_gsl_pow_2($10));
 $12 = 1.1000000000000001 * $11;
 $13 = $9 + $12;
 $14 = 1.0 / $13;
 STACKTOP = sp;return (+$14);
}
function _AT_RDD_Cucinotta_f_longRange($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = 0.37 * $5;
 $7 = $4 / $6;
 $8 = (+_gsl_pow_2($7));
 $9 = - $8;
 $10 = (+Math_exp((+$9)));
 STACKTOP = sp;return (+$10);
}
function _AT_RDD_Cucinotta_Ddelta_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $4;
 $10 = $5;
 $11 = (+_AT_RDD_Cucinotta_f_longRange($9,$10));
 $12 = $8 * $11;
 $13 = $4;
 $14 = $6;
 $15 = (+_AT_RDD_Cucinotta_f_shortRange($13,$14));
 $16 = $12 * $15;
 $17 = $5;
 $18 = $4;
 $19 = $17 / $18;
 $20 = (+_gsl_pow_2($19));
 $21 = $16 * $20;
 STACKTOP = sp;return (+$21);
}
function _AT_RDD_Cucinotta_Dexc_Gy($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = $11 * 7.5894985817340996E-9;
 $10 = $12;
 $13 = $8;
 $14 = $9;
 $15 = $13 * $14;
 $16 = $5;
 $17 = -0.5 * $16;
 $18 = $10;
 $19 = $17 / $18;
 $20 = (+Math_exp((+$19)));
 $21 = $15 * $20;
 $22 = $6;
 $23 = $5;
 $24 = $22 / $23;
 $25 = (+_gsl_pow_2($24));
 $26 = $21 * $25;
 STACKTOP = sp;return (+$26);
}
function _AT_RDD_CucinottaPoint_Gy($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $7;
 $14 = $8;
 $15 = $13 >= $14;
 if ($15) {
  $16 = $7;
  $17 = $9;
  $18 = $16 <= $17;
  if ($18) {
   $19 = $7;
   $20 = $9;
   $21 = $10;
   $22 = $11;
   $23 = $12;
   $24 = (+_AT_RDD_Cucinotta_Dexc_Gy($19,$20,$21,$22,$23));
   $25 = $7;
   $26 = $9;
   $27 = $10;
   $28 = $12;
   $29 = (+_AT_RDD_Cucinotta_Ddelta_Gy($25,$26,$27,$28));
   $30 = $24 + $29;
   $6 = $30;
   $31 = $6;
   STACKTOP = sp;return (+$31);
  }
 }
 $6 = 0.0;
 $31 = $6;
 STACKTOP = sp;return (+$31);
}
function _AT_inverse_RDD_Cucinotta_solver_function_Gy($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 16|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 < $10;
 if ($11) {
  $12 = $5;
  $13 = +HEAPF64[$12>>3];
  $14 = - $13;
  $2 = $14;
  $35 = $2;
  STACKTOP = sp;return (+$35);
 } else {
  $15 = $3;
  $16 = $5;
  $17 = ((($16)) + 16|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $5;
  $20 = ((($19)) + 24|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $5;
  $23 = ((($22)) + 32|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $5;
  $26 = ((($25)) + 40|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $5;
  $29 = ((($28)) + 48|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (+_AT_RDD_CucinottaPoint_Gy($15,$18,$21,$24,$27,$30));
  $32 = $5;
  $33 = +HEAPF64[$32>>3];
  $34 = $31 - $33;
  $2 = $34;
  $35 = $2;
  STACKTOP = sp;return (+$35);
 }
 return +(0.0);
}
function _AT_inverse_RDD_Cucinotta_m($0,$1,$2,$3,$4,$5,$6) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $16 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $18 = $11;
 $19 = ($18|0)==(7);
 if ($19) {
  $15 = 1.0E-13;
  $20 = $8;
  HEAPF64[$16>>3] = $20;
  $21 = $9;
  $22 = ((($16)) + 16|0);
  HEAPF64[$22>>3] = $21;
  $23 = $10;
  $24 = ((($16)) + 24|0);
  HEAPF64[$24>>3] = $23;
  $25 = $12;
  $26 = ((($16)) + 32|0);
  HEAPF64[$26>>3] = $25;
  $27 = $13;
  $28 = ((($16)) + 40|0);
  HEAPF64[$28>>3] = $27;
  $29 = $14;
  $30 = ((($16)) + 48|0);
  HEAPF64[$30>>3] = $29;
  $31 = $9;
  $32 = $10;
  $33 = $15;
  $34 = (+_zriddr(55,$16,$31,$32,$33));
  $17 = $34;
  $35 = $17;
  $7 = $35;
  $36 = $7;
  STACKTOP = sp;return (+$36);
 } else {
  $7 = 0.0;
  $36 = $7;
  STACKTOP = sp;return (+$36);
 }
 return +(0.0);
}
function _AT_RDD_RadicalDiffusion_get_energy_idx($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_locate(84880,40,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _AT_RDD_RadicalDiffusion_Gy($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $7 = sp + 40|0;
 $10 = sp;
 $5 = $0;
 HEAPF64[$6>>3] = $1;
 HEAP32[$7>>2] = $2;
 $8 = $3;
 $11 = +HEAPF64[$6>>3];
 $12 = (_AT_RDD_RadicalDiffusion_get_energy_idx($11)|0);
 $9 = $12;
 $13 = $9;
 $14 = ($13|0)>=(1);
 if (!($14)) {
  ___assert_fail((76163|0),(76174|0),48,(76206|0));
  // unreachable;
 }
 $15 = $9;
 $16 = ($15|0)<=(40);
 if (!($16)) {
  ___assert_fail((76233|0),(76174|0),49,(76206|0));
  // unreachable;
 }
 $17 = $5;
 $18 = $17 >= 0.0;
 if (!($18)) {
  ___assert_fail((76251|0),(76174|0),50,(76206|0));
  // unreachable;
 }
 $19 = $5;
 $20 = $9;
 $21 = (+($20|0));
 $22 = (+_AT_r_min_RadicalDiffusion_m($21));
 $23 = $19 <= $22;
 if ($23) {
  $24 = +HEAPF64[$6>>3];
  $25 = HEAP32[$7>>2]|0;
  $26 = $8;
  $27 = (+_AT_d_max_RadicalDiffusion_Gy($24,$25,$26));
  $4 = $27;
  $46 = $4;
  STACKTOP = sp;return (+$46);
 }
 $28 = $5;
 $29 = +HEAPF64[$6>>3];
 $30 = (+_AT_r_max_RadicalDiffusion_m($29));
 $31 = $28 > $30;
 if ($31) {
  $4 = 0.0;
  $46 = $4;
  STACKTOP = sp;return (+$46);
 } else {
  $32 = $8;
  (_AT_Stopping_Power_with_no(2,1,$6,$7,$32,$10)|0);
  $33 = +HEAPF64[$10>>3];
  $34 = 0.160219 * $33;
  $35 = $9;
  $36 = (($35) - 1)|0;
  $37 = ((86640) + (($36*15064)|0)|0);
  $38 = $9;
  $39 = (($38) - 1)|0;
  $40 = ((689200) + (($39*15064)|0)|0);
  $41 = +HEAPF64[$6>>3];
  $42 = (_AT_n_bins_RadicalDiffusion($41)|0);
  $43 = $5;
  $44 = (+_AT_get_interpolated_y_from_input_table($37,$40,$42,$43));
  $45 = $34 * $44;
  $4 = $45;
  $46 = $4;
  STACKTOP = sp;return (+$46);
 }
 return +(0.0);
}
function _AT_r_min_RadicalDiffusion_m($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_AT_RDD_RadicalDiffusion_get_energy_idx($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)>=(1);
 if (!($6)) {
  ___assert_fail((76163|0),(76174|0),128,(76358|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)<=(40);
 if ($8) {
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = ((85200) + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((76289|0),(76174|0),129,(76358|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_d_max_RadicalDiffusion_Gy($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp + 24|0;
 $7 = sp;
 HEAPF64[$3>>3] = $0;
 HEAP32[$4>>2] = $1;
 $5 = $2;
 $8 = +HEAPF64[$3>>3];
 $9 = (_AT_RDD_RadicalDiffusion_get_energy_idx($8)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)>=(1);
 if (!($11)) {
  ___assert_fail((76163|0),(76174|0),167,(76329|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)<=(40);
 if ($13) {
  $14 = $5;
  (_AT_Stopping_Power_with_no(2,1,$3,$4,$14,$7)|0);
  $15 = +HEAPF64[$7>>3];
  $16 = 0.160219 * $15;
  $17 = $6;
  $18 = (($17) - 1)|0;
  $19 = ((86160) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $16 * $20;
  STACKTOP = sp;return (+$21);
 } else {
  ___assert_fail((76289|0),(76174|0),168,(76329|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_r_max_RadicalDiffusion_m($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_AT_RDD_RadicalDiffusion_get_energy_idx($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)>=(1);
 if (!($6)) {
  ___assert_fail((76163|0),(76174|0),137,(76301|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)<=(40);
 if ($8) {
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = ((85520) + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((76289|0),(76174|0),138,(76301|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_n_bins_RadicalDiffusion($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_AT_RDD_RadicalDiffusion_get_energy_idx($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)>=(1);
 if (!($6)) {
  ___assert_fail((76163|0),(76174|0),184,(76262|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)<=(40);
 if ($8) {
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = ((86480) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  STACKTOP = sp;return ($12|0);
 } else {
  ___assert_fail((76289|0),(76174|0),185,(76262|0));
  // unreachable;
 }
 return (0)|0;
}
function _AT_inverse_RadicalDiffusion_m($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $5 = 0.0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $7 = sp + 40|0;
 $10 = sp;
 $5 = $0;
 HEAPF64[$6>>3] = $1;
 HEAP32[$7>>2] = $2;
 $8 = $3;
 $11 = +HEAPF64[$6>>3];
 $12 = (_AT_RDD_RadicalDiffusion_get_energy_idx($11)|0);
 $9 = $12;
 $13 = $9;
 $14 = ($13|0)>=(1);
 if (!($14)) {
  ___assert_fail((76163|0),(76174|0),87,(76386|0));
  // unreachable;
 }
 $15 = $9;
 $16 = ($15|0)<=(40);
 if (!($16)) {
  ___assert_fail((76289|0),(76174|0),88,(76386|0));
  // unreachable;
 }
 $17 = $5;
 $18 = $17 >= 0.0;
 if (!($18)) {
  ___assert_fail((76416|0),(76174|0),89,(76386|0));
  // unreachable;
 }
 $19 = $5;
 $20 = +HEAPF64[$6>>3];
 $21 = HEAP32[$7>>2]|0;
 $22 = $8;
 $23 = (+_AT_d_min_RadicalDiffusion_Gy($20,$21,$22));
 $24 = $19 < $23;
 if (!($24)) {
  $25 = $5;
  $26 = +HEAPF64[$6>>3];
  $27 = HEAP32[$7>>2]|0;
  $28 = $8;
  $29 = (+_AT_d_max_RadicalDiffusion_Gy($26,$27,$28));
  $30 = $25 > $29;
  if (!($30)) {
   $31 = $8;
   (_AT_Stopping_Power_with_no(2,1,$6,$7,$31,$10)|0);
   $32 = +HEAPF64[$10>>3];
   $33 = $32 == 0.0;
   if ($33) {
    $4 = 0.0;
    $47 = $4;
    STACKTOP = sp;return (+$47);
   } else {
    $34 = $9;
    $35 = (($34) - 1)|0;
    $36 = ((689200) + (($35*15064)|0)|0);
    $37 = $9;
    $38 = (($37) - 1)|0;
    $39 = ((86640) + (($38*15064)|0)|0);
    $40 = +HEAPF64[$6>>3];
    $41 = (_AT_n_bins_RadicalDiffusion($40)|0);
    $42 = $5;
    $43 = +HEAPF64[$10>>3];
    $44 = 0.160219 * $43;
    $45 = $42 / $44;
    $46 = (+_AT_get_interpolated_y_from_input_table($36,$39,$41,$45));
    $4 = $46;
    $47 = $4;
    STACKTOP = sp;return (+$47);
   }
  }
 }
 $4 = 0.0;
 $47 = $4;
 STACKTOP = sp;return (+$47);
}
function _AT_d_min_RadicalDiffusion_Gy($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp + 24|0;
 $7 = sp;
 HEAPF64[$3>>3] = $0;
 HEAP32[$4>>2] = $1;
 $5 = $2;
 $8 = +HEAPF64[$3>>3];
 $9 = (_AT_RDD_RadicalDiffusion_get_energy_idx($8)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)>=(1);
 if (!($11)) {
  ___assert_fail((76163|0),(76174|0),148,(76428|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)<=(40);
 if ($13) {
  $14 = $5;
  (_AT_Stopping_Power_with_no(2,1,$3,$4,$14,$7)|0);
  $15 = +HEAPF64[$7>>3];
  $16 = 0.160219 * $15;
  $17 = $6;
  $18 = (($17) - 1)|0;
  $19 = ((85840) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $16 * $20;
  STACKTOP = sp;return (+$21);
 } else {
  ___assert_fail((76289|0),(76174|0),149,(76428|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_E_RadicalDiffusion_MeV_u($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_AT_RDD_RadicalDiffusion_get_energy_idx($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)>=(1);
 if (!($6)) {
  ___assert_fail((76163|0),(76174|0),119,(76457|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)<=(40);
 if ($8) {
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = (84880 + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  STACKTOP = sp;return (+$12);
 } else {
  ___assert_fail((76289|0),(76174|0),120,(76457|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_SPC_get_number_of_bytes_in_file($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp + 88|0;
 $4 = sp;
 $2 = $0;
 $6 = $2;
 $7 = (_open($6,0,$vararg_buffer)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)==(-1);
 if ($9) {
  $1 = -1;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 $10 = $3;
 $11 = (_fstat($10,$4)|0);
 $12 = ($11|0)==(-1);
 if ($12) {
  $13 = $3;
  (_close($13)|0);
  $1 = -2;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 } else {
  $14 = ((($4)) + 40|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $5 = $17;
  $21 = $3;
  (_close($21)|0);
  $22 = $5;
  $1 = $22;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _AT_SPC_fast_read_buffer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer7 = sp + 120|0;
 $vararg_buffer5 = sp + 112|0;
 $vararg_buffer3 = sp + 104|0;
 $vararg_buffer1 = sp + 96|0;
 $vararg_buffer = sp + 88|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = (_open($13,0,$vararg_buffer)|0);
 $7 = $14;
 $15 = $7;
 $16 = ($15|0)==(-1);
 if ($16) {
  (_printf(76485,$vararg_buffer1)|0);
  $3 = 1;
  $48 = $3;
  STACKTOP = sp;return ($48|0);
 }
 $17 = $7;
 $18 = (_fstat($17,$8)|0);
 $19 = ($18|0)==(-1);
 if ($19) {
  (_printf(76490,$vararg_buffer3)|0);
  $20 = $7;
  (_close($20)|0);
  $3 = 1;
  $48 = $3;
  STACKTOP = sp;return ($48|0);
 }
 $21 = ((($8)) + 40|0);
 $22 = $21;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $9 = $24;
 $28 = $9;
 $29 = $5;
 $30 = $29<<2;
 $31 = ($28|0)!=($30|0);
 if ($31) {
  (_printf(76496,$vararg_buffer5)|0);
  $32 = $7;
  (_close($32)|0);
  $3 = 1;
  $48 = $3;
  STACKTOP = sp;return ($48|0);
 }
 $33 = $7;
 (_close($33)|0);
 $10 = 77269;
 $34 = $4;
 $35 = $10;
 $36 = (_fopen($34,$35)|0);
 $11 = $36;
 $37 = $6;
 $38 = $5;
 $39 = $11;
 $40 = (_fread($37,4,$38,$39)|0);
 $12 = $40;
 $41 = $12;
 $42 = $5;
 $43 = ($41|0)!=($42|0);
 if ($43) {
  $44 = $4;
  $45 = $12;
  $46 = $5;
  HEAP32[$vararg_buffer7>>2] = $44;
  $vararg_ptr9 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $45;
  $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $46;
  (_printf(76520,$vararg_buffer7)|0);
 }
 $47 = $11;
 (_fclose($47)|0);
 $3 = 0;
 $48 = $3;
 STACKTOP = sp;return ($48|0);
}
function _decomposeStructIntoString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 HEAP32[$9>>2] = $8;
 $10 = $5;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_calloc(1,$11)|0);
 $4 = $12;
 $13 = $4;
 $14 = $3;
 $15 = ((($14)) + 8|0);
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 _memcpy(($13|0),($15|0),($17|0))|0;
 STACKTOP = sp;return;
}
function _decomposeStructIntoDouble($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 HEAP32[$9>>2] = $8;
 $10 = $4;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 _memcpy(($10|0),($12|0),($14|0))|0;
 STACKTOP = sp;return;
}
function _decomposeStructIntoInteger($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 HEAP32[$9>>2] = $8;
 $10 = $4;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 _memcpy(($10|0),($12|0),($14|0))|0;
 STACKTOP = sp;return;
}
function _skipStruct($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = (($7>>>0) / 4)&-1;
 $9 = (($8) + 2)|0;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 HEAP32[$10>>2] = $12;
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _decomposeTag($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _decomposeLength($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _AT_SPC_decompose_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 44|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 HEAP32[$5>>2] = 0;
 $12 = $3;
 HEAP32[$6>>2] = $12;
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 (_skipStruct($6)|0);
 $13 = $7;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$6>>2]|0;
 _decomposeStructIntoInteger($17,$7,$5);
 (_skipStruct($6)|0);
 $18 = $8;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = $8;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 while(1) {
  $26 = $8;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $7;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($31>>>0)<($37>>>0);
  $39 = ($28>>>0)<($34>>>0);
  $40 = ($31|0)==($37|0);
  $41 = $40 & $39;
  $42 = $38 | $41;
  if (!($42)) {
   break;
  }
  (_skipStruct($6)|0);
  (_skipStruct($6)|0);
  $43 = HEAP32[$6>>2]|0;
  _decomposeStructIntoInteger($43,$9,$5);
  (_skipStruct($6)|0);
  $44 = $10;
  $45 = $44;
  HEAP32[$45>>2] = 0;
  $46 = (($44) + 4)|0;
  $47 = $46;
  HEAP32[$47>>2] = 0;
  $48 = $10;
  $49 = $48;
  HEAP32[$49>>2] = 0;
  $50 = (($48) + 4)|0;
  $51 = $50;
  HEAP32[$51>>2] = 0;
  while(1) {
   $52 = $10;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = $9;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = ($57>>>0)<($63>>>0);
   $65 = ($54>>>0)<($60>>>0);
   $66 = ($57|0)==($63|0);
   $67 = $66 & $65;
   $68 = $64 | $67;
   if (!($68)) {
    break;
   }
   (_skipStruct($6)|0);
   (_skipStruct($6)|0);
   (_skipStruct($6)|0);
   $69 = HEAP32[$6>>2]|0;
   _decomposeStructIntoInteger($69,$11,$5);
   (_skipStruct($6)|0);
   $70 = $11;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = $4;
   $77 = ($76|0)<(0);
   $78 = $77 << 31 >> 31;
   $79 = (_i64Add(($76|0),($78|0),($72|0),($75|0))|0);
   $80 = (getTempRet0() | 0);
   $4 = $79;
   (_skipStruct($6)|0);
   (_skipStruct($6)|0);
   (_skipStruct($6)|0);
   $81 = $10;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = (_i64Add(($83|0),($86|0),1,0)|0);
   $88 = (getTempRet0() | 0);
   $89 = $10;
   $90 = $89;
   HEAP32[$90>>2] = $87;
   $91 = (($89) + 4)|0;
   $92 = $91;
   HEAP32[$92>>2] = $88;
  }
  $93 = $8;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = (_i64Add(($95|0),($98|0),1,0)|0);
  $100 = (getTempRet0() | 0);
  $101 = $8;
  $102 = $101;
  HEAP32[$102>>2] = $99;
  $103 = (($101) + 4)|0;
  $104 = $103;
  HEAP32[$104>>2] = $100;
 }
 $105 = $4;
 STACKTOP = sp;return ($105|0);
}
function _AT_SPC_decompose_header($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $16 = sp + 20|0;
 $17 = sp + 16|0;
 $20 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 HEAP32[$16>>2] = 0;
 $21 = $9;
 HEAP32[$17>>2] = $21;
 (_skipStruct($17)|0);
 (_skipStruct($17)|0);
 (_skipStruct($17)|0);
 $18 = 0;
 $22 = HEAP32[$17>>2]|0;
 $23 = $18;
 _decomposeStructIntoString($22,$23,$16);
 (_skipStruct($17)|0);
 $24 = $13;
 HEAP32[$24>>2] = 1;
 $19 = 0;
 $25 = HEAP32[$17>>2]|0;
 $26 = $19;
 _decomposeStructIntoString($25,$26,$16);
 (_skipStruct($17)|0);
 $27 = $12;
 HEAP32[$27>>2] = 6012;
 $28 = HEAP32[$17>>2]|0;
 $29 = $10;
 _decomposeStructIntoDouble($28,$29,$16);
 (_skipStruct($17)|0);
 $30 = HEAP32[$17>>2]|0;
 $31 = $11;
 _decomposeStructIntoDouble($30,$31,$16);
 (_skipStruct($17)|0);
 $32 = HEAP32[$17>>2]|0;
 $33 = $14;
 _decomposeStructIntoDouble($32,$33,$16);
 (_skipStruct($17)|0);
 $34 = $20;
 $35 = $34;
 HEAP32[$35>>2] = 0;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$17>>2]|0;
 _decomposeStructIntoInteger($38,$20,$16);
 (_skipStruct($17)|0);
 $39 = $20;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $15;
 HEAP32[$45>>2] = $41;
 STACKTOP = sp;return 0;
}
function _AT_SPC_decompose_data($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer = sp + 120|0;
 $17 = sp + 180|0;
 $18 = sp + 176|0;
 $24 = sp + 112|0;
 $25 = sp + 104|0;
 $26 = sp + 96|0;
 $27 = sp + 88|0;
 $28 = sp + 80|0;
 $29 = sp + 72|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $35 = sp;
 $37 = sp + 40|0;
 $38 = sp + 32|0;
 $39 = sp + 24|0;
 $42 = sp + 16|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0;
 HEAP32[$17>>2] = 0;
 $43 = $9;
 HEAP32[$18>>2] = $43;
 $19 = 0;
 $44 = HEAP32[$18>>2]|0;
 $45 = $19;
 _decomposeStructIntoString($44,$45,$17);
 $46 = $19;
 _free($46);
 (_skipStruct($18)|0);
 $20 = 0;
 $47 = HEAP32[$18>>2]|0;
 $48 = $20;
 _decomposeStructIntoString($47,$48,$17);
 $49 = $20;
 _free($49);
 (_skipStruct($18)|0);
 $21 = 0;
 $50 = HEAP32[$18>>2]|0;
 $51 = $21;
 _decomposeStructIntoString($50,$51,$17);
 $52 = $21;
 _free($52);
 (_skipStruct($18)|0);
 $22 = 0;
 $53 = HEAP32[$18>>2]|0;
 $54 = $22;
 _decomposeStructIntoString($53,$54,$17);
 $55 = $22;
 _free($55);
 (_skipStruct($18)|0);
 $23 = 0;
 $56 = HEAP32[$18>>2]|0;
 $57 = $23;
 _decomposeStructIntoString($56,$57,$17);
 $58 = $23;
 _free($58);
 (_skipStruct($18)|0);
 HEAPF64[$24>>3] = 0.0;
 $59 = HEAP32[$18>>2]|0;
 _decomposeStructIntoDouble($59,$24,$17);
 (_skipStruct($18)|0);
 HEAPF64[$25>>3] = 0.0;
 $60 = HEAP32[$18>>2]|0;
 _decomposeStructIntoDouble($60,$25,$17);
 (_skipStruct($18)|0);
 HEAPF64[$26>>3] = 0.0;
 $61 = HEAP32[$18>>2]|0;
 _decomposeStructIntoDouble($61,$26,$17);
 (_skipStruct($18)|0);
 $62 = $27;
 $63 = $62;
 HEAP32[$63>>2] = 0;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = 0;
 $66 = HEAP32[$18>>2]|0;
 _decomposeStructIntoInteger($66,$27,$17);
 (_skipStruct($18)|0);
 $67 = $28;
 $68 = $67;
 HEAP32[$68>>2] = 0;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = 0;
 $71 = $28;
 $72 = $71;
 HEAP32[$72>>2] = 0;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = 0;
 while(1) {
  $75 = $28;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = $27;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($81) + 4)|0;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = ($80>>>0)<($86>>>0);
  $88 = ($77>>>0)<($83>>>0);
  $89 = ($80|0)==($86|0);
  $90 = $89 & $88;
  $91 = $87 | $90;
  if (!($91)) {
   break;
  }
  HEAPF64[$29>>3] = 0.0;
  $92 = HEAP32[$18>>2]|0;
  _decomposeStructIntoDouble($92,$29,$17);
  (_skipStruct($18)|0);
  HEAPF64[$30>>3] = 0.0;
  $93 = HEAP32[$18>>2]|0;
  _decomposeStructIntoDouble($93,$30,$17);
  (_skipStruct($18)|0);
  $94 = $31;
  $95 = $94;
  HEAP32[$95>>2] = 0;
  $96 = (($94) + 4)|0;
  $97 = $96;
  HEAP32[$97>>2] = 0;
  $98 = HEAP32[$18>>2]|0;
  _decomposeStructIntoInteger($98,$31,$17);
  (_skipStruct($18)|0);
  $99 = $32;
  $100 = $99;
  HEAP32[$100>>2] = 0;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = 0;
  $103 = $31;
  $104 = $103;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($103) + 4)|0;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (_calloc(4,$105)|0);
  $33 = $109;
  $110 = $31;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = (_calloc(4,$112)|0);
  $34 = $116;
  $117 = $32;
  $118 = $117;
  HEAP32[$118>>2] = 0;
  $119 = (($117) + 4)|0;
  $120 = $119;
  HEAP32[$120>>2] = 0;
  while(1) {
   $121 = $32;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 4)|0;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = $31;
   $128 = $127;
   $129 = HEAP32[$128>>2]|0;
   $130 = (($127) + 4)|0;
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = ($126>>>0)<($132>>>0);
   $134 = ($123>>>0)<($129>>>0);
   $135 = ($126|0)==($132|0);
   $136 = $135 & $134;
   $137 = $133 | $136;
   if (!($137)) {
    break;
   }
   $138 = $12;
   $139 = HEAP32[$138>>2]|0;
   $140 = $16;
   $141 = (($139) + ($140<<3)|0);
   $142 = $33;
   $143 = $32;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = (($143) + 4)|0;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   $149 = (($142) + ($145<<2)|0);
   HEAP32[$149>>2] = $141;
   $150 = $13;
   $151 = HEAP32[$150>>2]|0;
   $152 = $16;
   $153 = (($151) + ($152<<3)|0);
   $154 = $34;
   $155 = $32;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   $158 = (($155) + 4)|0;
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $161 = (($154) + ($157<<2)|0);
   HEAP32[$161>>2] = $153;
   $162 = HEAP32[$18>>2]|0;
   _decomposeStructIntoDouble($162,$35,$17);
   (_skipStruct($18)|0);
   $163 = +HEAPF64[$35>>3];
   $164 = (~~(($163)));
   $165 = ((($35)) + 8|0);
   $166 = +HEAPF64[$165>>3];
   $167 = (~~(($166)));
   $168 = (_AT_particle_no_from_Z_and_A_single($164,$167)|0);
   $36 = $168;
   HEAPF64[$37>>3] = 0.0;
   $169 = HEAP32[$18>>2]|0;
   _decomposeStructIntoDouble($169,$37,$17);
   (_skipStruct($18)|0);
   $170 = $38;
   $171 = $170;
   HEAP32[$171>>2] = 0;
   $172 = (($170) + 4)|0;
   $173 = $172;
   HEAP32[$173>>2] = 0;
   $174 = HEAP32[$18>>2]|0;
   _decomposeStructIntoInteger($174,$38,$17);
   (_skipStruct($18)|0);
   $175 = $39;
   $176 = $175;
   HEAP32[$176>>2] = 0;
   $177 = (($175) + 4)|0;
   $178 = $177;
   HEAP32[$178>>2] = 0;
   $179 = HEAP32[$18>>2]|0;
   _decomposeStructIntoInteger($179,$39,$17);
   (_skipStruct($18)|0);
   $40 = 0;
   $180 = $16;
   $40 = $180;
   while(1) {
    $181 = $40;
    $182 = ($181|0)<(0);
    $183 = $182 << 31 >> 31;
    $184 = $16;
    $185 = ($184|0)<(0);
    $186 = $185 << 31 >> 31;
    $187 = $39;
    $188 = $187;
    $189 = HEAP32[$188>>2]|0;
    $190 = (($187) + 4)|0;
    $191 = $190;
    $192 = HEAP32[$191>>2]|0;
    $193 = (_i64Add(($184|0),($186|0),($189|0),($192|0))|0);
    $194 = (getTempRet0() | 0);
    $195 = ($183>>>0)<($194>>>0);
    $196 = ($181>>>0)<($193>>>0);
    $197 = ($183|0)==($194|0);
    $198 = $197 & $196;
    $199 = $195 | $198;
    if (!($199)) {
     break;
    }
    $200 = $28;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $203 = (($200) + 4)|0;
    $204 = $203;
    $205 = HEAP32[$204>>2]|0;
    $206 = $10;
    $207 = HEAP32[$206>>2]|0;
    $208 = $40;
    $209 = (($207) + ($208<<2)|0);
    HEAP32[$209>>2] = $202;
    $210 = +HEAPF64[$29>>3];
    $211 = $11;
    $212 = HEAP32[$211>>2]|0;
    $213 = $40;
    $214 = (($212) + ($213<<3)|0);
    HEAPF64[$214>>3] = $210;
    $215 = $36;
    $216 = $14;
    $217 = HEAP32[$216>>2]|0;
    $218 = $40;
    $219 = (($217) + ($218<<2)|0);
    HEAP32[$219>>2] = $215;
    $220 = $40;
    $221 = (($220) + 1)|0;
    $40 = $221;
   }
   $222 = HEAP32[$18>>2]|0;
   $223 = (_decomposeTag($222)|0);
   $224 = ($223|0)==(17);
   do {
    if ($224) {
     $225 = HEAP32[$18>>2]|0;
     $226 = (_decomposeLength($225)|0);
     HEAP32[$17>>2] = $226;
     $227 = HEAP32[$17>>2]|0;
     $228 = ($227|0)<(0);
     $229 = $228 << 31 >> 31;
     $230 = $39;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = (_i64Add(($232|0),($235|0),1,0)|0);
     $237 = (getTempRet0() | 0);
     $238 = (___muldi3(($236|0),($237|0),8,0)|0);
     $239 = (getTempRet0() | 0);
     $240 = ($227|0)!=($238|0);
     $241 = ($229|0)!=($239|0);
     $242 = $240 | $241;
     $243 = $39;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = (($243) + 4)|0;
     $247 = $246;
     $248 = HEAP32[$247>>2]|0;
     if ($242) {
      $249 = HEAP32[$17>>2]|0;
      $250 = $vararg_buffer;
      $251 = $250;
      HEAP32[$251>>2] = $245;
      $252 = (($250) + 4)|0;
      $253 = $252;
      HEAP32[$253>>2] = $248;
      $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr1>>2] = $249;
      (_printf(76593,$vararg_buffer)|0);
      break;
     }
     $254 = (_i64Add(($245|0),($248|0),1,0)|0);
     $255 = (getTempRet0() | 0);
     $256 = (_calloc(8,$254)|0);
     $41 = $256;
     $257 = HEAP32[$18>>2]|0;
     $258 = $41;
     _decomposeStructIntoDouble($257,$258,$17);
     $259 = $16;
     $40 = $259;
     while(1) {
      $260 = $40;
      $261 = ($260|0)<(0);
      $262 = $261 << 31 >> 31;
      $263 = $16;
      $264 = ($263|0)<(0);
      $265 = $264 << 31 >> 31;
      $266 = $39;
      $267 = $266;
      $268 = HEAP32[$267>>2]|0;
      $269 = (($266) + 4)|0;
      $270 = $269;
      $271 = HEAP32[$270>>2]|0;
      $272 = (_i64Add(($263|0),($265|0),($268|0),($271|0))|0);
      $273 = (getTempRet0() | 0);
      $274 = ($262>>>0)<($273>>>0);
      $275 = ($260>>>0)<($272>>>0);
      $276 = ($262|0)==($273|0);
      $277 = $276 & $275;
      $278 = $274 | $277;
      $279 = $41;
      if (!($278)) {
       break;
      }
      $280 = $40;
      $281 = (($280) + 1)|0;
      $282 = $16;
      $283 = (($281) - ($282))|0;
      $284 = (($279) + ($283<<3)|0);
      $285 = +HEAPF64[$284>>3];
      $286 = $41;
      $287 = $40;
      $288 = $16;
      $289 = (($287) - ($288))|0;
      $290 = (($286) + ($289<<3)|0);
      $291 = +HEAPF64[$290>>3];
      $292 = $285 + $291;
      $293 = 0.5 * $292;
      $294 = $12;
      $295 = HEAP32[$294>>2]|0;
      $296 = $40;
      $297 = (($295) + ($296<<3)|0);
      HEAPF64[$297>>3] = $293;
      $298 = $41;
      $299 = $40;
      $300 = (($299) + 1)|0;
      $301 = $16;
      $302 = (($300) - ($301))|0;
      $303 = (($298) + ($302<<3)|0);
      $304 = +HEAPF64[$303>>3];
      $305 = $41;
      $306 = $40;
      $307 = $16;
      $308 = (($306) - ($307))|0;
      $309 = (($305) + ($308<<3)|0);
      $310 = +HEAPF64[$309>>3];
      $311 = $304 - $310;
      $312 = $13;
      $313 = HEAP32[$312>>2]|0;
      $314 = $40;
      $315 = (($313) + ($314<<3)|0);
      HEAPF64[$315>>3] = $311;
      $316 = $40;
      $317 = (($316) + 1)|0;
      $40 = $317;
     }
     _free($279);
    }
   } while(0);
   $318 = HEAP32[$18>>2]|0;
   $319 = (_decomposeTag($318)|0);
   $320 = ($319|0)==(18);
   if ($320) {
    $321 = HEAP32[$18>>2]|0;
    _decomposeStructIntoInteger($321,$42,$17);
    $322 = $12;
    $323 = HEAP32[$322>>2]|0;
    $324 = $16;
    $325 = (($323) + ($324<<3)|0);
    $326 = $33;
    $327 = $42;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    $333 = (($326) + ($329<<2)|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = $39;
    $336 = $335;
    $337 = HEAP32[$336>>2]|0;
    $338 = (($335) + 4)|0;
    $339 = $338;
    $340 = HEAP32[$339>>2]|0;
    $341 = (___muldi3(($337|0),($340|0),8,0)|0);
    $342 = (getTempRet0() | 0);
    _memcpy(($325|0),($334|0),($341|0))|0;
    $343 = $13;
    $344 = HEAP32[$343>>2]|0;
    $345 = $16;
    $346 = (($344) + ($345<<3)|0);
    $347 = $34;
    $348 = $42;
    $349 = $348;
    $350 = HEAP32[$349>>2]|0;
    $351 = (($348) + 4)|0;
    $352 = $351;
    $353 = HEAP32[$352>>2]|0;
    $354 = (($347) + ($350<<2)|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = $39;
    $357 = $356;
    $358 = HEAP32[$357>>2]|0;
    $359 = (($356) + 4)|0;
    $360 = $359;
    $361 = HEAP32[$360>>2]|0;
    $362 = (___muldi3(($358|0),($361|0),8,0)|0);
    $363 = (getTempRet0() | 0);
    _memcpy(($346|0),($355|0),($362|0))|0;
   }
   (_skipStruct($18)|0);
   $364 = HEAP32[$18>>2]|0;
   $365 = $15;
   $366 = HEAP32[$365>>2]|0;
   $367 = $16;
   $368 = (($366) + ($367<<3)|0);
   _decomposeStructIntoDouble($364,$368,$17);
   (_skipStruct($18)|0);
   (_skipStruct($18)|0);
   $369 = $39;
   $370 = $369;
   $371 = HEAP32[$370>>2]|0;
   $372 = (($369) + 4)|0;
   $373 = $372;
   $374 = HEAP32[$373>>2]|0;
   $375 = $16;
   $376 = ($375|0)<(0);
   $377 = $376 << 31 >> 31;
   $378 = (_i64Add(($375|0),($377|0),($371|0),($374|0))|0);
   $379 = (getTempRet0() | 0);
   $16 = $378;
   $380 = $32;
   $381 = $380;
   $382 = HEAP32[$381>>2]|0;
   $383 = (($380) + 4)|0;
   $384 = $383;
   $385 = HEAP32[$384>>2]|0;
   $386 = (_i64Add(($382|0),($385|0),1,0)|0);
   $387 = (getTempRet0() | 0);
   $388 = $32;
   $389 = $388;
   HEAP32[$389>>2] = $386;
   $390 = (($388) + 4)|0;
   $391 = $390;
   HEAP32[$391>>2] = $387;
  }
  $392 = $33;
  _free($392);
  $393 = $34;
  _free($393);
  $394 = $28;
  $395 = $394;
  $396 = HEAP32[$395>>2]|0;
  $397 = (($394) + 4)|0;
  $398 = $397;
  $399 = HEAP32[$398>>2]|0;
  $400 = (_i64Add(($396|0),($399|0),1,0)|0);
  $401 = (getTempRet0() | 0);
  $402 = $28;
  $403 = $402;
  HEAP32[$403>>2] = $400;
  $404 = (($402) + 4)|0;
  $405 = $404;
  HEAP32[$405>>2] = $401;
 }
 STACKTOP = sp;return 0;
}
function _AT_SPC_get_number_of_bins_from_filename_fast($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $8 = $2;
 $9 = (_AT_SPC_get_number_of_bytes_in_file($8)|0);
 $3 = $9;
 $10 = $3;
 $11 = ($10|0)<=(0);
 $12 = $3;
 if ($11) {
  $13 = (($12) - 1)|0;
  $1 = $13;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 }
 $14 = (($12>>>0) / 4)&-1;
 $4 = $14;
 $15 = $4;
 $16 = (_calloc(4,$15)|0);
 $5 = $16;
 $17 = $2;
 $18 = $4;
 $19 = $5;
 $20 = (_AT_SPC_fast_read_buffer($17,$18,$19)|0);
 $6 = $20;
 $21 = $6;
 $22 = ($21|0)==(1);
 if ($22) {
  $7 = -1;
 } else {
  $23 = $4;
  $24 = $5;
  $25 = (_AT_SPC_decompose_size($23,$24)|0);
  $7 = $25;
 }
 $26 = $5;
 _free($26);
 $27 = $7;
 $1 = $27;
 $28 = $1;
 STACKTOP = sp;return ($28|0);
}
function _AT_SPC_read_header_from_filename_fast($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $20 = $8;
 $21 = (_AT_SPC_get_number_of_bytes_in_file($20)|0);
 $15 = $21;
 $22 = $15;
 $23 = ($22|0)<=(0);
 $24 = $15;
 if ($23) {
  $25 = (($24) - 1)|0;
  $7 = $25;
  $46 = $7;
  STACKTOP = sp;return ($46|0);
 }
 $26 = (($24>>>0) / 4)&-1;
 $16 = $26;
 $27 = $16;
 $28 = (_calloc(4,$27)|0);
 $17 = $28;
 $29 = $8;
 $30 = $16;
 $31 = $17;
 $32 = (_AT_SPC_fast_read_buffer($29,$30,$31)|0);
 $18 = $32;
 $33 = $18;
 $34 = ($33|0)==(1);
 if ($34) {
  $19 = -1;
 } else {
  $35 = $16;
  $36 = $17;
  $37 = $9;
  $38 = $10;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $42 = $14;
  $43 = (_AT_SPC_decompose_header($35,$36,$37,$38,$39,$40,$41,$42)|0);
  $19 = $43;
 }
 $44 = $17;
 _free($44);
 $45 = $19;
 $7 = $45;
 $46 = $7;
 STACKTOP = sp;return ($46|0);
}
function _AT_SPC_read_data_from_filename_fast($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 40|0;
 $12 = sp + 36|0;
 $13 = sp + 32|0;
 $14 = sp + 28|0;
 $15 = sp + 24|0;
 $16 = sp + 20|0;
 $9 = $0;
 $10 = $1;
 HEAP32[$11>>2] = $2;
 HEAP32[$12>>2] = $3;
 HEAP32[$13>>2] = $4;
 HEAP32[$14>>2] = $5;
 HEAP32[$15>>2] = $6;
 HEAP32[$16>>2] = $7;
 $22 = $9;
 $23 = (_AT_SPC_get_number_of_bytes_in_file($22)|0);
 $17 = $23;
 $24 = $17;
 $25 = ($24|0)<=(0);
 $26 = $17;
 if ($25) {
  $27 = (($26) - 1)|0;
  $8 = $27;
  $42 = $8;
  STACKTOP = sp;return ($42|0);
 }
 $28 = (($26>>>0) / 4)&-1;
 $18 = $28;
 $29 = $18;
 $30 = (_calloc(4,$29)|0);
 $19 = $30;
 $31 = $9;
 $32 = $18;
 $33 = $19;
 $34 = (_AT_SPC_fast_read_buffer($31,$32,$33)|0);
 $20 = $34;
 $35 = $20;
 $36 = ($35|0)==(1);
 if ($36) {
  $21 = -1;
 } else {
  $37 = $18;
  $38 = $19;
  $39 = (_AT_SPC_decompose_data($37,$38,$11,$12,$13,$14,$15,$16)|0);
  $21 = $39;
 }
 $40 = $19;
 _free($40);
 $41 = $21;
 $8 = $41;
 $42 = $8;
 STACKTOP = sp;return ($42|0);
}
function _AT_SPC_read_from_filename_fast($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $28 = $14;
 $29 = $16;
 $30 = $17;
 $31 = $18;
 $32 = $19;
 $33 = $20;
 $34 = $21;
 (_AT_SPC_read_header_from_filename_fast($28,$29,$30,$31,$32,$33,$34)|0);
 $35 = $14;
 $36 = $15;
 $37 = $22;
 $38 = $23;
 $39 = $24;
 $40 = $25;
 $41 = $26;
 $42 = $27;
 $43 = (_AT_SPC_read_data_from_filename_fast($35,$36,$37,$38,$39,$40,$41,$42)|0);
 STACKTOP = sp;return ($43|0);
}
function _compare_SPC_Pairs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $4 = $6;
 $7 = $3;
 $5 = $7;
 $8 = $4;
 $9 = +HEAPF64[$8>>3];
 $10 = $5;
 $11 = +HEAPF64[$10>>3];
 $12 = $9 > $11;
 $13 = $12&1;
 $14 = $4;
 $15 = +HEAPF64[$14>>3];
 $16 = $5;
 $17 = +HEAPF64[$16>>3];
 $18 = $15 < $17;
 $19 = $18&1;
 $20 = (($13) - ($19))|0;
 STACKTOP = sp;return ($20|0);
}
function _AT_SPC_number_of_bins_at_range($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4192|0);
 $10 = sp;
 $11 = sp + 4120|0;
 $12 = sp + 4112|0;
 $13 = sp + 4156|0;
 $14 = sp + 4152|0;
 $15 = sp + 4104|0;
 $16 = sp + 4148|0;
 $18 = sp + 2048|0;
 $3 = $0;
 $4 = $1;
 $21 = (_calloc(1000,2056)|0);
 $7 = $21;
 $8 = 0;
 $22 = $3;
 $23 = (_opendir($22)|0);
 $5 = $23;
 $24 = $5;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  _perror(76636);
  $2 = -1;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 while(1) {
  $26 = $5;
  $27 = (_readdir($26)|0);
  $6 = $27;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $6;
  $30 = ((($29)) + 19|0);
  $31 = (_strcmp($30,83410)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   continue;
  }
  $33 = $6;
  $34 = ((($33)) + 19|0);
  $35 = (_strcmp($34,76626)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   continue;
  }
  $37 = $6;
  $38 = ((($37)) + 19|0);
  $39 = (_strlen($38)|0);
  $40 = ($39>>>0)>(4);
  if ($40) {
   $41 = $6;
   $42 = ((($41)) + 19|0);
   $43 = $6;
   $44 = ((($43)) + 19|0);
   $45 = (_strlen($44)|0);
   $46 = (($42) + ($45)|0);
   $47 = ((($46)) + -4|0);
   $9 = $47;
   $48 = $9;
   $49 = (_strcmp($48,76629)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = $3;
    (_strcpy($10,$51)|0);
    (_strcat($10,76634)|0);
    $52 = $6;
    $53 = ((($52)) + 19|0);
    (_strcat($10,$53)|0);
    $54 = (_AT_SPC_read_header_from_filename_fast($10,$11,$12,$13,$14,$15,$16)|0);
    $17 = $54;
    $55 = $17;
    $56 = ($55|0)==(0);
    if ($56) {
     $57 = ((($18)) + 8|0);
     (_strcpy($57,$10)|0);
     $58 = +HEAPF64[$12>>3];
     HEAPF64[$18>>3] = $58;
     $59 = $7;
     $60 = $8;
     $61 = (($59) + (($60*2056)|0)|0);
     _memcpy(($61|0),($18|0),2056)|0;
     $62 = $8;
     $63 = (($62) + 1)|0;
     $8 = $63;
    }
   }
  }
 }
 $64 = $5;
 (_closedir($64)|0);
 $19 = -1;
 $65 = $7;
 $66 = $8;
 _qsort($65,$66,2056,56);
 $20 = 0;
 while(1) {
  $67 = $20;
  $68 = $8;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $4;
  $71 = $7;
  $72 = $20;
  $73 = (($71) + (($72*2056)|0)|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $70 <= $74;
  if ($75) {
   label = 17;
   break;
  }
  $81 = $20;
  $82 = (($81) + 1)|0;
  $20 = $82;
 }
 if ((label|0) == 17) {
  $76 = $7;
  $77 = $20;
  $78 = (($76) + (($77*2056)|0)|0);
  $79 = ((($78)) + 8|0);
  $80 = (_AT_SPC_get_number_of_bins_from_filename_fast($79)|0);
  $19 = $80;
 }
 $83 = $19;
 $2 = $83;
 $84 = $2;
 STACKTOP = sp;return ($84|0);
}
function _AT_SPC_spectrum_at_range($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8368|0);
 $24 = sp + 4096|0;
 $25 = sp + 8224|0;
 $26 = sp + 8216|0;
 $27 = sp + 8308|0;
 $28 = sp + 8304|0;
 $29 = sp + 8208|0;
 $30 = sp + 8300|0;
 $32 = sp + 6152|0;
 $34 = sp + 2048|0;
 $35 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $50 = (_calloc(1000,2056)|0);
 $21 = $50;
 $22 = 0;
 $51 = $10;
 $52 = (_opendir($51)|0);
 $19 = $52;
 $53 = $19;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  _perror(76636);
  $9 = -1;
  $264 = $9;
  STACKTOP = sp;return ($264|0);
 }
 while(1) {
  $55 = $19;
  $56 = (_readdir($55)|0);
  $20 = $56;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   break;
  }
  $58 = $20;
  $59 = ((($58)) + 19|0);
  $60 = (_strcmp($59,83410)|0);
  $61 = ($60|0)==(0);
  if ($61) {
   continue;
  }
  $62 = $20;
  $63 = ((($62)) + 19|0);
  $64 = (_strcmp($63,76626)|0);
  $65 = ($64|0)==(0);
  if ($65) {
   continue;
  }
  $66 = $20;
  $67 = ((($66)) + 19|0);
  $68 = (_strlen($67)|0);
  $69 = ($68>>>0)>(4);
  if ($69) {
   $70 = $20;
   $71 = ((($70)) + 19|0);
   $72 = $20;
   $73 = ((($72)) + 19|0);
   $74 = (_strlen($73)|0);
   $75 = (($71) + ($74)|0);
   $76 = ((($75)) + -4|0);
   $23 = $76;
   $77 = $23;
   $78 = (_strcmp($77,76629)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $80 = $10;
    (_strcpy($24,$80)|0);
    (_strcat($24,76634)|0);
    $81 = $20;
    $82 = ((($81)) + 19|0);
    (_strcat($24,$82)|0);
    $83 = (_AT_SPC_read_header_from_filename_fast($24,$25,$26,$27,$28,$29,$30)|0);
    $31 = $83;
    $84 = $31;
    $85 = ($84|0)==(0);
    if ($85) {
     $86 = ((($32)) + 8|0);
     (_strcpy($86,$24)|0);
     $87 = +HEAPF64[$26>>3];
     HEAPF64[$32>>3] = $87;
     $88 = $21;
     $89 = $22;
     $90 = (($88) + (($89*2056)|0)|0);
     _memcpy(($90|0),($32|0),2056)|0;
     $91 = $22;
     $92 = (($91) + 1)|0;
     $22 = $92;
    }
   }
  }
 }
 $93 = $19;
 (_closedir($93)|0);
 $94 = $21;
 $95 = $22;
 _qsort($94,$95,2056,56);
 $33 = 0.0;
 $36 = 0;
 while(1) {
  $96 = $36;
  $97 = $22;
  $98 = ($96|0)<($97|0);
  if (!($98)) {
   break;
  }
  $99 = $11;
  $100 = $21;
  $101 = $36;
  $102 = (($100) + (($101*2056)|0)|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $99 <= $103;
  if ($104) {
   label = 17;
   break;
  }
  $132 = $36;
  $133 = (($132) + 1)|0;
  $36 = $133;
 }
 if ((label|0) == 17) {
  $105 = $11;
  $106 = $21;
  $107 = $36;
  $108 = (($107) - 1)|0;
  $109 = (($106) + (($108*2056)|0)|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $105 - $110;
  $112 = $21;
  $113 = $36;
  $114 = (($112) + (($113*2056)|0)|0);
  $115 = +HEAPF64[$114>>3];
  $116 = $21;
  $117 = $36;
  $118 = (($117) - 1)|0;
  $119 = (($116) + (($118*2056)|0)|0);
  $120 = +HEAPF64[$119>>3];
  $121 = $115 - $120;
  $122 = $111 / $121;
  $33 = $122;
  $123 = $21;
  $124 = $36;
  $125 = (($124) - 1)|0;
  $126 = (($123) + (($125*2056)|0)|0);
  $127 = ((($126)) + 8|0);
  (_strcpy($34,$127)|0);
  $128 = $21;
  $129 = $36;
  $130 = (($128) + (($129*2056)|0)|0);
  $131 = ((($130)) + 8|0);
  (_strcpy($35,$131)|0);
 }
 $134 = $12;
 $135 = (_calloc($134,4)|0);
 $37 = $135;
 $136 = $12;
 $137 = (_calloc($136,8)|0);
 $38 = $137;
 $138 = $12;
 $139 = (_calloc($138,8)|0);
 $39 = $139;
 $140 = $12;
 $141 = (_calloc($140,8)|0);
 $40 = $141;
 $142 = $12;
 $143 = (_calloc($142,4)|0);
 $41 = $143;
 $144 = $12;
 $145 = (_calloc($144,8)|0);
 $42 = $145;
 $146 = $12;
 $147 = $37;
 $148 = $38;
 $149 = $39;
 $150 = $40;
 $151 = $41;
 $152 = $42;
 $153 = (_AT_SPC_read_data_from_filename_fast($34,$146,$147,$148,$149,$150,$151,$152)|0);
 $43 = $153;
 $154 = $43;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $37;
  _free($156);
  $157 = $38;
  _free($157);
  $158 = $39;
  _free($158);
  $159 = $40;
  _free($159);
  $160 = $41;
  _free($160);
  $161 = $42;
  _free($161);
  $9 = 1;
  $264 = $9;
  STACKTOP = sp;return ($264|0);
 }
 $162 = $12;
 $163 = (_calloc($162,4)|0);
 $44 = $163;
 $164 = $12;
 $165 = (_calloc($164,8)|0);
 $45 = $165;
 $166 = $12;
 $167 = (_calloc($166,8)|0);
 $46 = $167;
 $168 = $12;
 $169 = (_calloc($168,8)|0);
 $47 = $169;
 $170 = $12;
 $171 = (_calloc($170,4)|0);
 $48 = $171;
 $172 = $12;
 $173 = (_calloc($172,8)|0);
 $49 = $173;
 $174 = $12;
 $175 = $44;
 $176 = $45;
 $177 = $46;
 $178 = $47;
 $179 = $48;
 $180 = $49;
 $181 = (_AT_SPC_read_data_from_filename_fast($35,$174,$175,$176,$177,$178,$179,$180)|0);
 $43 = $181;
 $182 = $43;
 $183 = ($182|0)!=(0);
 if ($183) {
  $184 = $37;
  _free($184);
  $185 = $38;
  _free($185);
  $186 = $39;
  _free($186);
  $187 = $40;
  _free($187);
  $188 = $41;
  _free($188);
  $189 = $42;
  _free($189);
  $190 = $44;
  _free($190);
  $191 = $45;
  _free($191);
  $192 = $46;
  _free($192);
  $193 = $47;
  _free($193);
  $194 = $48;
  _free($194);
  $195 = $49;
  _free($195);
  $9 = 1;
  $264 = $9;
  STACKTOP = sp;return ($264|0);
 }
 $36 = 0;
 while(1) {
  $196 = $36;
  $197 = $12;
  $198 = ($196|0)<($197|0);
  $199 = $37;
  if (!($198)) {
   break;
  }
  $200 = $36;
  $201 = (($199) + ($200<<2)|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $13;
  $204 = $36;
  $205 = (($203) + ($204<<2)|0);
  HEAP32[$205>>2] = $202;
  $206 = $38;
  $207 = $36;
  $208 = (($206) + ($207<<3)|0);
  $209 = +HEAPF64[$208>>3];
  $210 = $14;
  $211 = $36;
  $212 = (($210) + ($211<<3)|0);
  HEAPF64[$212>>3] = $209;
  $213 = $39;
  $214 = $36;
  $215 = (($213) + ($214<<3)|0);
  $216 = +HEAPF64[$215>>3];
  $217 = $15;
  $218 = $36;
  $219 = (($217) + ($218<<3)|0);
  HEAPF64[$219>>3] = $216;
  $220 = $40;
  $221 = $36;
  $222 = (($220) + ($221<<3)|0);
  $223 = +HEAPF64[$222>>3];
  $224 = $16;
  $225 = $36;
  $226 = (($224) + ($225<<3)|0);
  HEAPF64[$226>>3] = $223;
  $227 = $41;
  $228 = $36;
  $229 = (($227) + ($228<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $17;
  $232 = $36;
  $233 = (($231) + ($232<<2)|0);
  HEAP32[$233>>2] = $230;
  $234 = $33;
  $235 = 1.0 - $234;
  $236 = $42;
  $237 = $36;
  $238 = (($236) + ($237<<3)|0);
  $239 = +HEAPF64[$238>>3];
  $240 = $235 * $239;
  $241 = $33;
  $242 = $49;
  $243 = $36;
  $244 = (($242) + ($243<<3)|0);
  $245 = +HEAPF64[$244>>3];
  $246 = $241 * $245;
  $247 = $240 + $246;
  $248 = $18;
  $249 = $36;
  $250 = (($248) + ($249<<3)|0);
  HEAPF64[$250>>3] = $247;
  $251 = $36;
  $252 = (($251) + 1)|0;
  $36 = $252;
 }
 _free($199);
 $253 = $38;
 _free($253);
 $254 = $39;
 _free($254);
 $255 = $40;
 _free($255);
 $256 = $41;
 _free($256);
 $257 = $42;
 _free($257);
 $258 = $44;
 _free($258);
 $259 = $45;
 _free($259);
 $260 = $46;
 _free($260);
 $261 = $47;
 _free($261);
 $262 = $48;
 _free($262);
 $263 = $49;
 _free($263);
 $9 = 0;
 $264 = $9;
 STACKTOP = sp;return ($264|0);
}
function _AT_Mass_Stopping_Power($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $7;
 $15 = (_strcmp($14,76661)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $8;
  $18 = $9;
  $19 = $10;
  $20 = $11;
  $21 = $12;
  (_AT_Mass_Stopping_Power_with_no(1,$17,$18,$19,$20,$21)|0);
  $6 = 0;
  $47 = $6;
  STACKTOP = sp;return ($47|0);
 }
 $22 = $7;
 $23 = (_strcmp($22,76667)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = $8;
  $26 = $9;
  $27 = $10;
  $28 = $11;
  $29 = $12;
  (_AT_Mass_Stopping_Power_with_no(2,$25,$26,$27,$28,$29)|0);
  $6 = 0;
  $47 = $6;
  STACKTOP = sp;return ($47|0);
 }
 $30 = $7;
 $31 = (_strcmp($30,76673)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $33 = $8;
  $34 = $9;
  $35 = $10;
  $36 = $11;
  $37 = $12;
  (_AT_Mass_Stopping_Power_with_no(3,$33,$34,$35,$36,$37)|0);
  $6 = 0;
  $47 = $6;
  STACKTOP = sp;return ($47|0);
 } else {
  $38 = HEAP32[(67512)>>2]|0;
  $39 = $8;
  $40 = $9;
  $41 = $10;
  $42 = $11;
  $43 = $7;
  $44 = $12;
  $45 = (FUNCTION_TABLE_iiiiiii[$38 & 7]($39,$40,$41,$42,$43,$44)|0);
  $13 = $45;
  $46 = $13;
  $6 = $46;
  $47 = $6;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _AT_Mass_Stopping_Power_with_no($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 $14 = ($13|0)<(4);
 if (!($14)) {
  ___assert_fail((76678|0),(76729|0),115,(76761|0));
  // unreachable;
 }
 $15 = $6;
 $16 = ($15|0)>=(0);
 if ($16) {
  $17 = $6;
  $18 = ((67512) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $7;
  $21 = $8;
  $22 = $9;
  $23 = $10;
  $24 = $11;
  $25 = (FUNCTION_TABLE_iiiiiii[$19 & 7]($20,$21,$22,$23,0,$24)|0);
  $12 = $25;
  $26 = $12;
  STACKTOP = sp;return ($26|0);
 } else {
  ___assert_fail((76792|0),(76729|0),116,(76761|0));
  // unreachable;
 }
 return (0)|0;
}
function _AT_Stopping_Power($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = (_AT_Mass_Stopping_Power($15,$16,$17,$18,$19,$20)|0);
 $12 = $21;
 $22 = $10;
 $23 = (+_AT_density_g_cm3_from_material_no($22));
 $14 = $23;
 $13 = 0;
 while(1) {
  $24 = $13;
  $25 = $7;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $14;
  $28 = $27 / 10.0;
  $29 = $11;
  $30 = $13;
  $31 = (($29) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 * $28;
  HEAPF64[$31>>3] = $33;
  $34 = $13;
  $35 = (($34) + 1)|0;
  $13 = $35;
 }
 $36 = $12;
 STACKTOP = sp;return ($36|0);
}
function _AT_Stopping_Power_with_no($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = (_AT_Mass_Stopping_Power_with_no($15,$16,$17,$18,$19,$20)|0);
 $12 = $21;
 $22 = $10;
 $23 = (+_AT_density_g_cm3_from_material_no($22));
 $14 = $23;
 $13 = 0;
 while(1) {
  $24 = $13;
  $25 = $7;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $14;
  $28 = $27 / 10.0;
  $29 = $11;
  $30 = $13;
  $31 = (($29) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 * $28;
  HEAPF64[$31>>3] = $33;
  $34 = $13;
  $35 = (($34) + 1)|0;
  $13 = $35;
 }
 $36 = $12;
 STACKTOP = sp;return ($36|0);
}
function _AT_Energy_MeV_u_from_Stopping_Power_single($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;return +-1;
}
function _AT_stopping_power_source_model_name_from_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)>=(0);
 if (!($6)) {
  ___assert_fail((76822|0),(76837|0),13,(76873|0));
  // unreachable;
 }
 $7 = $3;
 $8 = ($7|0)<=(4);
 if (!($8)) {
  ___assert_fail((76921|0),(76837|0),14,(76873|0));
  // unreachable;
 }
 $9 = $3;
 $10 = ($9|0)<(0);
 if ($10) {
  $2 = -1;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 }
 $11 = $3;
 $12 = ($11|0)>(4);
 if ($12) {
  $2 = -1;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 } else {
  $13 = $4;
  $14 = $3;
  $15 = (66492 + (($14*255)|0)|0);
  (_strcpy($13,$15)|0);
  $2 = 0;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _AT_stopping_power_source_model_number_from_name($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 0;
}
function _AT_Bethe_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 $15 = $9;
 $16 = $11;
 _AT_Bethe_energy_loss_MeV_cm2_g($12,$13,$14,$15,-1.0,1,$16);
 STACKTOP = sp;return 0;
}
function _AT_Bethe_energy_loss_MeV_cm2_g($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $15 = $5&1;
 $12 = $15;
 $13 = $6;
 $14 = 0;
 while(1) {
  $16 = $14;
  $17 = $7;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $8;
  $20 = $14;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $9;
  $24 = $14;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $10;
  $28 = $11;
  $29 = $12;
  $30 = $29&1;
  $31 = (+_AT_Bethe_energy_loss_MeV_cm2_g_single($22,$26,$27,$28,$30));
  $32 = $13;
  $33 = $14;
  $34 = (($32) + ($33<<3)|0);
  HEAPF64[$34>>3] = $31;
  $35 = $14;
  $36 = (($35) + 1)|0;
  $14 = $36;
 }
 STACKTOP = sp;return;
}
function _AT_Bethe_energy_loss_MeV_cm2_g_single($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $4&1;
 $9 = $11;
 $10 = 0.0;
 $12 = $5;
 $13 = $12 >= 0.48999999999999999;
 if (!($13)) {
  $26 = $10;
  STACKTOP = sp;return (+$26);
 }
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $9;
 $18 = $17&1;
 $19 = (+_AT_el_energy_loss_leading_term_MeV_cm2_g($14,$15,$16,$18));
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = (+_AT_Bethe_Stopping_Number($20,$21,$22,$23));
 $25 = $19 * $24;
 $10 = $25;
 $26 = $10;
 STACKTOP = sp;return (+$26);
}
function _AT_el_energy_loss_leading_term_MeV_cm2_g($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $3&1;
 $7 = $12;
 $13 = $6;
 $14 = (+_AT_average_Z_from_material_no($13));
 $8 = $14;
 $15 = $6;
 $16 = (+_AT_average_A_from_material_no($15));
 $9 = $16;
 $17 = $9;
 $18 = $17 > 0.0;
 if (!($18)) {
  ___assert_fail((77055|0),(76969|0),56,(77061|0));
  // unreachable;
 }
 $19 = $4;
 $20 = (+_AT_beta_from_E_single($19));
 $21 = (+_gsl_pow_2($20));
 $10 = $21;
 $22 = $10;
 $23 = $22 > 0.0;
 if (!($23)) {
  ___assert_fail((77102|0),(76969|0),59,(77061|0));
  // unreachable;
 }
 $24 = $7;
 $25 = $24&1;
 if ($25) {
  $26 = $4;
  $27 = $5;
  $28 = (+_AT_effective_charge_from_E_MeV_u_single($26,$27));
  $11 = $28;
 } else {
  $29 = $5;
  $30 = (_AT_Z_from_particle_no_single($29)|0);
  $31 = (+($30|0));
  $11 = $31;
 }
 $32 = $8;
 $33 = $9;
 $34 = $32 / $33;
 $35 = 0.30707499999999999 * $34;
 $36 = $11;
 $37 = $11;
 $38 = $36 * $37;
 $39 = $35 * $38;
 $40 = $10;
 $41 = $39 / $40;
 STACKTOP = sp;return (+$41);
}
function _AT_Bethe_Stopping_Number($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $28 = $4;
 $29 = (+_AT_beta_from_E_single($28));
 $30 = (+_gsl_pow_2($29));
 $8 = $30;
 $31 = $6;
 $32 = (+_AT_I_eV_from_material_no($31));
 $9 = $32;
 $33 = $9;
 $34 = $33 * 9.9999999999999995E-7;
 $10 = $34;
 $35 = $4;
 $36 = (+_AT_max_relativistic_E_transfer_MeV_single($35));
 $11 = $36;
 $12 = 0;
 $37 = $7;
 $38 = $37 > 0.0;
 if ($38) {
  $39 = $7;
  $40 = $39 / 1000.0;
  $41 = $11;
  $42 = $40 < $41;
  if ($42) {
   $12 = 1;
  }
 }
 $43 = $8;
 $44 = 1.0219978359999999 * $43;
 $45 = $8;
 $46 = 1.0 - $45;
 $47 = $44 / $46;
 $13 = $47;
 $48 = $10;
 $49 = $48 > 0.0;
 if (!($49)) {
  ___assert_fail((76958|0),(76969|0),90,(77010|0));
  // unreachable;
 }
 $50 = $10;
 $51 = $13;
 $52 = $51 / $50;
 $13 = $52;
 $53 = $12;
 $54 = $53&1;
 if ($54) {
  $55 = $7;
  $56 = $55 * 0.001;
  $11 = $56;
 }
 $57 = $11;
 $58 = $10;
 $59 = $57 / $58;
 $14 = $59;
 $60 = $8;
 $15 = $60;
 $61 = $12;
 $62 = $61&1;
 if ($62) {
  $63 = $15;
  $64 = $63 / 2.0;
  $15 = $64;
  $65 = $8;
  $66 = 1.0 - $65;
  $67 = $11;
  $68 = $66 * $67;
  $69 = $68 / 2.0439956719999999;
  $70 = $15;
  $71 = $70 + $69;
  $15 = $71;
 }
 $16 = 0.0;
 $72 = $6;
 $73 = (_AT_phase_from_material_no($72)|0);
 $17 = $73;
 $17 = 1;
 $74 = $4;
 $75 = (+_AT_kinetic_variable_single($74));
 $18 = $75;
 $76 = $6;
 $77 = (+_AT_plasma_energy_J_from_material_no($76));
 $19 = $77;
 $78 = $10;
 $79 = $78 * 1.6021764600000001E-13;
 $20 = $79;
 $80 = $20;
 $81 = $19;
 $82 = $80 / $81;
 $83 = (+Math_log((+$82)));
 $84 = 2.0 * $83;
 $85 = 1.0 + $84;
 $21 = $85;
 $22 = 0.0;
 $23 = 0.0;
 $86 = $17;
 $87 = ($86|0)==(1);
 do {
  if ($87) {
   $88 = $9;
   $89 = $88 < 100.0;
   if ($89) {
    $23 = 2.0;
    $90 = $21;
    $91 = $90 <= 3.681;
    if ($91) {
     $22 = 0.20000000000000001;
     break;
    } else {
     $92 = $21;
     $93 = 0.32600000000000001 * $92;
     $94 = $93 - 1.0;
     $22 = $94;
     break;
    }
   } else {
    $23 = 3.0;
    $95 = $21;
    $96 = $95 <= 5.2149999999999999;
    if ($96) {
     $22 = 0.20000000000000001;
     break;
    } else {
     $97 = $21;
     $98 = 0.32600000000000001 * $97;
     $99 = $98 - 1.5;
     $22 = $99;
     break;
    }
   }
  } else {
   $100 = $21;
   $101 = 0.32600000000000001 * $100;
   $102 = $101 - 2.5;
   $22 = $102;
   $23 = 5.0;
   $103 = $21;
   $104 = $103 < 10.0;
   if ($104) {
    $22 = 1.6000000000000001;
    $23 = 4.0;
   }
   $105 = $21;
   $106 = $105 >= 10.0;
   $107 = $21;
   $108 = $107 < 10.5;
   $or$cond = $106 & $108;
   if ($or$cond) {
    $22 = 1.7;
    $23 = 4.0;
   }
   $109 = $21;
   $110 = $109 >= 10.5;
   $111 = $21;
   $112 = $111 < 11.0;
   $or$cond3 = $110 & $112;
   if ($or$cond3) {
    $22 = 1.8;
    $23 = 4.0;
   }
   $113 = $21;
   $114 = $113 >= 11.0;
   $115 = $21;
   $116 = $115 < 11.5;
   $or$cond5 = $114 & $116;
   if ($or$cond5) {
    $22 = 1.8999999999999999;
    $23 = 4.0;
   }
   $117 = $21;
   $118 = $117 >= 11.5;
   $119 = $21;
   $120 = $119 < 12.25;
   $or$cond7 = $118 & $120;
   if ($or$cond7) {
    $22 = 2.0;
    $23 = 4.0;
   }
   $121 = $21;
   $122 = $121 >= 12.25;
   $123 = $21;
   $124 = $123 < 13.804;
   $or$cond9 = $122 & $124;
   if ($or$cond9) {
    $22 = 2.0;
    $23 = 5.0;
   }
  }
 } while(0);
 $125 = $21;
 $126 = $125 / 4.6059999999999999;
 $24 = $126;
 $25 = 3.0;
 $127 = $24;
 $128 = $22;
 $129 = $127 - $128;
 $130 = 4.6059999999999999 * $129;
 $131 = $23;
 $132 = $22;
 $133 = $131 - $132;
 $134 = $25;
 $135 = (+Math_pow((+$133),(+$134)));
 $136 = $130 / $135;
 $26 = $136;
 $137 = $18;
 $138 = $22;
 $139 = $137 >= $138;
 if ($139) {
  $140 = $18;
  $141 = $23;
  $142 = $140 <= $141;
  if ($142) {
   $143 = $18;
   $144 = 4.6059999999999999 * $143;
   $145 = $21;
   $146 = $144 - $145;
   $147 = $26;
   $148 = $23;
   $149 = $18;
   $150 = $148 - $149;
   $151 = $25;
   $152 = (+Math_pow((+$150),(+$151)));
   $153 = $147 * $152;
   $154 = $146 + $153;
   $16 = $154;
  }
 }
 $155 = $18;
 $156 = $23;
 $157 = $155 > $156;
 if ($157) {
  $158 = $18;
  $159 = 4.6059999999999999 * $158;
  $160 = $21;
  $161 = $159 - $160;
  $16 = $161;
 }
 $162 = $16;
 $27 = $162;
 $163 = $13;
 $164 = $163 > 0.0;
 if (!($164)) {
  ___assert_fail((77035|0),(76969|0),179,(77010|0));
  // unreachable;
 }
 $165 = $14;
 $166 = $165 > 0.0;
 if ($166) {
  $167 = $13;
  $168 = $14;
  $169 = $167 * $168;
  $170 = (+Math_log((+$169)));
  $171 = 0.5 * $170;
  $172 = $15;
  $173 = $171 - $172;
  $174 = $27;
  $175 = $173 - $174;
  STACKTOP = sp;return (+$175);
 } else {
  ___assert_fail((77045|0),(76969|0),180,(77010|0));
  // unreachable;
 }
 return +(0.0);
}
function _AT_FromFile_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(672|0);
 $vararg_buffer10 = sp + 568|0;
 $vararg_buffer5 = sp + 552|0;
 $vararg_buffer3 = sp + 544|0;
 $vararg_buffer1 = sp + 536|0;
 $vararg_buffer = sp + 528|0;
 $14 = sp + 256|0;
 $15 = sp;
 $17 = sp + 620|0;
 $18 = sp + 520|0;
 $19 = sp + 512|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $32 = $11;
 $33 = (0|0)==($32|0);
 if ($33) {
  $34 = (_getenv((77112|0))|0);
  $11 = $34;
 }
 $35 = $11;
 $36 = (0|0)==($35|0);
 if ($36) {
  (_printf(77137,$vararg_buffer)|0);
  $6 = 1;
  $150 = $6;
  STACKTOP = sp;return ($150|0);
 }
 $37 = $11;
 $38 = (_fopen($37,77269)|0);
 $13 = $38;
 $39 = $13;
 $40 = (0|0)==($39|0);
 if ($40) {
  (_printf(77271,$vararg_buffer1)|0);
  $6 = 1;
  $150 = $6;
  STACKTOP = sp;return ($150|0);
 }
 $16 = 0;
 $41 = (_calloc(10000,4)|0);
 $20 = $41;
 $42 = (_calloc(10000,8)|0);
 $21 = $42;
 $43 = (_calloc(10000,8)|0);
 $22 = $43;
 while(1) {
  $44 = $13;
  $45 = (_fgets($14,255,$44)|0);
  $46 = ($45|0)!=(0|0);
  if (!($46)) {
   break;
  }
  $47 = HEAP8[$14>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)==(-1);
  if ($49) {
   break;
  }
  $50 = HEAP8[$14>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = (_isdigit($51)|0);
  $53 = ($52|0)!=(0);
  if (!($53)) {
   continue;
  }
  HEAP32[$vararg_buffer3>>2] = $15;
  (_sscanf($14,77315,$vararg_buffer3)|0);
  HEAP32[$vararg_buffer5>>2] = $17;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $18;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $19;
  $54 = (_sscanf($14,77318,$vararg_buffer5)|0);
  $55 = ($54|0)!=(3);
  if ($55) {
   $56 = (_strlen($15)|0);
   $57 = ($56|0)!=(0);
   if ($57) {
    $58 = (_strlen($15)|0);
    $59 = ($58|0)!=(1);
    if ($59) {
     label = 15;
     break;
    }
   }
  }
  $60 = HEAP32[$17>>2]|0;
  $61 = $20;
  $62 = $16;
  $63 = (($61) + ($62<<2)|0);
  HEAP32[$63>>2] = $60;
  $64 = +HEAPF64[$18>>3];
  $65 = $21;
  $66 = $16;
  $67 = (($65) + ($66<<3)|0);
  HEAPF64[$67>>3] = $64;
  $68 = +HEAPF64[$19>>3];
  $69 = $22;
  $70 = $16;
  $71 = (($70) + 1)|0;
  $16 = $71;
  $72 = (($69) + ($70<<3)|0);
  HEAPF64[$72>>3] = $68;
 }
 if ((label|0) == 15) {
  (_printf(77330,$vararg_buffer10)|0);
  $6 = 1;
  $150 = $6;
  STACKTOP = sp;return ($150|0);
 }
 $73 = $16;
 $74 = (($73) + -1)|0;
 $16 = $74;
 $75 = $13;
 (_fclose($75)|0);
 $13 = 0;
 $26 = 0;
 $27 = 0;
 $28 = -1;
 $76 = (_calloc(1,8)|0);
 $29 = $76;
 $77 = (_calloc(1,8)|0);
 $30 = $77;
 $78 = $16;
 $79 = (_llvm_stacksave()|0);
 $31 = $79;
 $$alloca_mul = $78;
 $80 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $23 = 0;
 while(1) {
  $81 = $23;
  $82 = $7;
  $83 = ($81|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $28;
  $85 = ($84|0)==(-1);
  if ($85) {
   label = 21;
  } else {
   $86 = $28;
   $87 = $27;
   $88 = ($86|0)==($87|0);
   if ($88) {
    label = 21;
   }
  }
  L32: do {
   if ((label|0) == 21) {
    label = 0;
    $89 = $9;
    $90 = $23;
    $91 = (($89) + ($90<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (_AT_Z_from_particle_no_single($92)|0);
    $27 = $93;
    $94 = $27;
    $28 = $94;
    $95 = $27;
    $96 = $20;
    $97 = $16;
    $98 = (_is_element_int($95,$96,$97,$80)|0);
    $26 = $98;
    $99 = $29;
    _free($99);
    $100 = $30;
    _free($100);
    $101 = $26;
    $102 = (_calloc($101,8)|0);
    $29 = $102;
    $103 = $26;
    $104 = (_calloc($103,8)|0);
    $30 = $104;
    $25 = 0;
    $24 = 0;
    while(1) {
     $105 = $24;
     $106 = $16;
     $107 = ($105|0)<($106|0);
     if (!($107)) {
      break L32;
     }
     $108 = $24;
     $109 = (($80) + ($108)|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&1;
     $112 = $111&1;
     $113 = ($112|0)==(1);
     if ($113) {
      $114 = $21;
      $115 = $24;
      $116 = (($114) + ($115<<3)|0);
      $117 = +HEAPF64[$116>>3];
      $118 = $29;
      $119 = $25;
      $120 = (($118) + ($119<<3)|0);
      HEAPF64[$120>>3] = $117;
      $121 = $22;
      $122 = $24;
      $123 = (($121) + ($122<<3)|0);
      $124 = +HEAPF64[$123>>3];
      $125 = $30;
      $126 = $25;
      $127 = (($126) + 1)|0;
      $25 = $127;
      $128 = (($125) + ($126<<3)|0);
      HEAPF64[$128>>3] = $124;
     }
     $129 = $24;
     $130 = (($129) + 1)|0;
     $24 = $130;
    }
   }
  } while(0);
  $131 = $29;
  $132 = $30;
  $133 = $26;
  $134 = $8;
  $135 = $23;
  $136 = (($134) + ($135<<3)|0);
  $137 = +HEAPF64[$136>>3];
  $138 = (+_AT_get_interpolated_y_from_input_table($131,$132,$133,$137));
  $139 = $12;
  $140 = $23;
  $141 = (($139) + ($140<<3)|0);
  HEAPF64[$141>>3] = $138;
  $142 = $23;
  $143 = (($142) + 1)|0;
  $23 = $143;
 }
 $144 = $29;
 _free($144);
 $145 = $30;
 _free($145);
 $146 = $20;
 _free($146);
 $147 = $21;
 _free($147);
 $148 = $22;
 _free($148);
 $6 = 0;
 $149 = $31;
 _llvm_stackrestore(($149|0));
 $150 = $6;
 STACKTOP = sp;return ($150|0);
}
function _AT_ICRU_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $15 = $10;
 $16 = ($15|0)!=(1);
 $17 = $10;
 $18 = ($17|0)!=(2);
 $or$cond = $16 & $18;
 if ($or$cond) {
  $13 = 0;
  while(1) {
   $19 = $13;
   $20 = $7;
   $21 = ($19|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $12;
   $23 = $13;
   $24 = (($22) + ($23<<3)|0);
   HEAPF64[$24>>3] = -1.0;
   $25 = $13;
   $26 = (($25) + 1)|0;
   $13 = $26;
  }
  $6 = 5;
  $102 = $6;
  STACKTOP = sp;return ($102|0);
 }
 $27 = $7;
 $28 = (_llvm_stacksave()|0);
 $14 = $28;
 $$alloca_mul = $27<<2;
 $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $30 = $7;
 $31 = $9;
 (_AT_Z_from_particle_no($30,$31,$29)|0);
 $13 = 0;
 while(1) {
  $32 = $13;
  $33 = $7;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $13;
  $36 = (($29) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)>(18);
  do {
   if ($38) {
    $39 = $12;
    $40 = $13;
    $41 = (($39) + ($40<<3)|0);
    HEAPF64[$41>>3] = -1.0;
   } else {
    $42 = $8;
    $43 = $13;
    $44 = (($42) + ($43<<3)|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $45 < 0.025000000000000001;
    if (!($46)) {
     $47 = $8;
     $48 = $13;
     $49 = (($47) + ($48<<3)|0);
     $50 = +HEAPF64[$49>>3];
     $51 = $50 > 1000.0;
     if (!($51)) {
      $55 = $13;
      $56 = (($29) + ($55<<2)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(2);
      if ($58) {
       $59 = $8;
       $60 = $13;
       $61 = (($59) + ($60<<3)|0);
       $62 = +HEAPF64[$61>>3];
       $63 = $62 > 250.0;
       if ($63) {
        $64 = $12;
        $65 = $13;
        $66 = (($64) + ($65<<3)|0);
        HEAPF64[$66>>3] = -1.0;
        break;
       }
      }
      $67 = $10;
      $68 = (($67) - 1)|0;
      $69 = (11536 + (($68*8064)|0)|0);
      $70 = ((($69)) + 8|0);
      $71 = $10;
      $72 = (($71) - 1)|0;
      $73 = (11536 + (($72*8064)|0)|0);
      $74 = ((($73)) + 8|0);
      $75 = $13;
      $76 = (($29) + ($75<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($74) + (($77*424)|0)|0);
      $79 = $10;
      $80 = (($79) - 1)|0;
      $81 = (11536 + (($80*8064)|0)|0);
      $82 = ((($81)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $8;
      $85 = $13;
      $86 = (($84) + ($85<<3)|0);
      $87 = +HEAPF64[$86>>3];
      $88 = (+_AT_get_interpolated_y_from_input_table($70,$78,$83,$87));
      $89 = $12;
      $90 = $13;
      $91 = (($89) + ($90<<3)|0);
      HEAPF64[$91>>3] = $88;
      $92 = $10;
      $93 = ($92|0)==(1);
      if (!($93)) {
       break;
      }
      $94 = $12;
      $95 = $13;
      $96 = (($94) + ($95<<3)|0);
      $97 = +HEAPF64[$96>>3];
      $98 = $97 * 1000.0;
      HEAPF64[$96>>3] = $98;
      break;
     }
    }
    $52 = $12;
    $53 = $13;
    $54 = (($52) + ($53<<3)|0);
    HEAPF64[$54>>3] = -1.0;
   }
  } while(0);
  $99 = $13;
  $100 = (($99) + 1)|0;
  $13 = $100;
 }
 $6 = 0;
 $101 = $14;
 _llvm_stackrestore(($101|0));
 $102 = $6;
 STACKTOP = sp;return ($102|0);
}
function _AT_PSTAR_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp + 272|0;
 $14 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $19 = $10;
 $20 = (67988 + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $13 = $21;
 $22 = $13;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = $10;
  _AT_material_name_from_number($24,$14);
  HEAP32[$vararg_buffer>>2] = $14;
  (_printf(77385,$vararg_buffer)|0);
  $6 = 4;
  $71 = $6;
  STACKTOP = sp;return ($71|0);
 }
 $25 = $13;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((77432|0),(77466|0),1310,(77507|0));
  // unreachable;
 }
 $15 = 132;
 $16 = 0;
 while(1) {
  $27 = $16;
  $28 = $7;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $13;
  $31 = ((($30)) + 8|0);
  $32 = $8;
  $33 = $16;
  $34 = (($32) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = (+_AT_E_MeV_from_E_MeV_u($35,1001));
  $37 = (+_AT_get_interpolated_y_from_input_2d_table($31,132,$36));
  $38 = $12;
  $39 = $16;
  $40 = (($38) + ($39<<3)|0);
  HEAPF64[$40>>3] = $37;
  $41 = $9;
  $42 = $16;
  $43 = (($41) + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(1001);
  if ($45) {
   $46 = $8;
   $47 = $16;
   $48 = (($46) + ($47<<3)|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $9;
   $51 = $16;
   $52 = (($50) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (+_AT_effective_charge_from_E_MeV_u_single($49,$53));
   $17 = $54;
   $55 = $8;
   $56 = $16;
   $57 = (($55) + ($56<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = (+_AT_effective_charge_from_E_MeV_u_single($58,1001));
   $18 = $59;
   $60 = $17;
   $61 = $18;
   $62 = $60 / $61;
   $63 = (+_gsl_pow_2($62));
   $64 = $12;
   $65 = $16;
   $66 = (($64) + ($65<<3)|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $67 * $63;
   HEAPF64[$66>>3] = $68;
  }
  $69 = $16;
  $70 = (($69) + 1)|0;
  $16 = $70;
 }
 $6 = 0;
 $71 = $6;
 STACKTOP = sp;return ($71|0);
}
function _AT_n_bins_for_single_impact_local_dose_distrib($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer = sp + 56|0;
 $22 = sp + 24|0;
 $26 = sp + 72|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = 0.0;
 $19 = 0.0;
 $20 = 0;
 while(1) {
  $27 = $20;
  $28 = $9;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $10;
  $31 = $20;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $12;
  $35 = $15;
  $36 = (+_AT_max_electron_range_m($33,$34,$35));
  $21 = $36;
  $37 = $17;
  $38 = $10;
  $39 = $20;
  $40 = (($38) + ($39<<3)|0);
  $41 = $11;
  $42 = $20;
  $43 = (($41) + ($42<<2)|0);
  $44 = $12;
  (_AT_Mass_Stopping_Power_with_no($37,1,$40,$43,$44,$22)|0);
  $45 = $21;
  $46 = +HEAPF64[$22>>3];
  $47 = $10;
  $48 = $20;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $11;
  $52 = $20;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $12;
  $56 = $13;
  $57 = $14;
  $58 = $15;
  $59 = (+_AT_RDD_precalculated_constant_Gy($45,$46,$50,$54,$55,$56,$57,$58));
  $23 = $59;
  $60 = $10;
  $61 = $20;
  $62 = (($60) + ($61<<3)|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $11;
  $65 = $20;
  $66 = (($64) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $12;
  $69 = $13;
  $70 = $14;
  $71 = $15;
  $72 = $23;
  $73 = (+_AT_RDD_d_min_Gy($63,$67,$68,$69,$70,$71,$72));
  $24 = $73;
  $74 = $10;
  $75 = $20;
  $76 = (($74) + ($75<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $11;
  $79 = $20;
  $80 = (($78) + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $12;
  $83 = $13;
  $84 = $14;
  $85 = $15;
  $86 = $17;
  $87 = (+_AT_RDD_d_max_Gy($77,$81,$82,$83,$84,$85,$86));
  $25 = $87;
  $88 = $20;
  $89 = ($88|0)==(0);
  if ($89) {
   $90 = $24;
   $19 = $90;
   $91 = $25;
   $18 = $91;
  } else {
   $92 = $19;
   $93 = $24;
   $94 = $92 < $93;
   $95 = $19;
   $96 = $24;
   $97 = $94 ? $95 : $96;
   $19 = $97;
   $98 = $18;
   $99 = $25;
   $100 = $98 > $99;
   $101 = $18;
   $102 = $25;
   $103 = $100 ? $101 : $102;
   $18 = $103;
  }
  $104 = $20;
  $105 = (($104) + 1)|0;
  $20 = $105;
 }
 HEAP32[$26>>2] = 0;
 $106 = $19;
 $107 = $106 > 0.0;
 $108 = $18;
 $109 = $108 > 0.0;
 $or$cond = $107 & $109;
 $110 = $19;
 $111 = $18;
 if ($or$cond) {
  $112 = $16;
  $113 = (+($112|0));
  $114 = (+_AT_N2_to_step($113));
  (_AT_histo_n_bins($110,$111,$114,1,$26)|0);
  $115 = HEAP32[$26>>2]|0;
  $116 = (($115) + 1)|0;
  STACKTOP = sp;return ($116|0);
 } else {
  HEAPF64[$vararg_buffer>>3] = $110;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $111;
  (_printf(77524,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 return (0)|0;
}
function _AT_single_impact_local_dose_distrib($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0;
 var $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0;
 var $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer16 = sp + 368|0;
 $vararg_buffer14 = sp + 360|0;
 $vararg_buffer8 = sp + 328|0;
 $vararg_buffer6 = sp + 320|0;
 $vararg_buffer1 = sp + 304|0;
 $vararg_buffer = sp + 296|0;
 $49 = sp + 240|0;
 $51 = sp + 112|0;
 $52 = sp;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $29 = $14;
 $59 = $15;
 $60 = (_calloc($59,8)|0);
 $32 = $60;
 $61 = $18;
 $62 = +HEAPF64[$61>>3];
 $63 = $62 < 0.0;
 L1: do {
  if ($63) {
   $64 = $15;
   $65 = (_calloc($64,8)|0);
   $33 = $65;
   $30 = 0;
   while(1) {
    $66 = $30;
    $67 = $15;
    $68 = ($66|0)<($67|0);
    if (!($68)) {
     break;
    }
    $69 = $18;
    $70 = $30;
    $71 = (($69) + ($70<<3)|0);
    $72 = +HEAPF64[$71>>3];
    $73 = -1.0 * $72;
    $74 = $33;
    $75 = $30;
    $76 = (($74) + ($75<<3)|0);
    HEAPF64[$76>>3] = $73;
    $77 = $30;
    $78 = (($77) + 1)|0;
    $30 = $78;
   }
   $79 = $15;
   $80 = $16;
   $81 = $17;
   $82 = $33;
   $83 = $19;
   $84 = $26;
   $85 = $32;
   _AT_fluence_cm2_from_dose_Gy($79,$80,$81,$82,$83,$84,$85);
   $86 = $33;
   _free($86);
  } else {
   $30 = 0;
   while(1) {
    $87 = $30;
    $88 = $15;
    $89 = ($87|0)<($88|0);
    if (!($89)) {
     break L1;
    }
    $90 = $18;
    $91 = $30;
    $92 = (($90) + ($91<<3)|0);
    $93 = +HEAPF64[$92>>3];
    $94 = $32;
    $95 = $30;
    $96 = (($94) + ($95<<3)|0);
    HEAPF64[$96>>3] = $93;
    $97 = $30;
    $98 = (($97) + 1)|0;
    $30 = $98;
   }
  }
 } while(0);
 $99 = $15;
 $100 = (_calloc($99,8)|0);
 $34 = $100;
 $101 = $15;
 $102 = $32;
 $103 = $34;
 _AT_normalize($101,$102,$103);
 $104 = $32;
 _free($104);
 $105 = $24;
 $106 = ($105|0)>(0);
 L12: do {
  if ($106) {
   $107 = $23;
   $108 = (+($107|0));
   $109 = (+_AT_N2_to_step($108));
   $35 = $109;
   $36 = 1;
   $110 = $25;
   $111 = ((($110)) + 24|0);
   $112 = +HEAPF64[$111>>3];
   $37 = $112;
   $113 = $25;
   $114 = ((($113)) + 32|0);
   $115 = +HEAPF64[$114>>3];
   $38 = $115;
   $30 = 1;
   while(1) {
    $116 = $30;
    $117 = $15;
    $118 = ($116|0)<($117|0);
    if (!($118)) {
     break;
    }
    $119 = $25;
    $120 = $30;
    $121 = $120<<3;
    $122 = (($121) + 3)|0;
    $123 = (($119) + ($122<<3)|0);
    $124 = +HEAPF64[$123>>3];
    $125 = $37;
    $126 = $124 < $125;
    if ($126) {
     $127 = $25;
     $128 = $30;
     $129 = $128<<3;
     $130 = (($129) + 3)|0;
     $131 = (($127) + ($130<<3)|0);
     $132 = +HEAPF64[$131>>3];
     $134 = $132;
    } else {
     $133 = $37;
     $134 = $133;
    }
    $37 = $134;
    $135 = $25;
    $136 = $30;
    $137 = $136<<3;
    $138 = (($137) + 4)|0;
    $139 = (($135) + ($138<<3)|0);
    $140 = +HEAPF64[$139>>3];
    $141 = $38;
    $142 = $140 > $141;
    if ($142) {
     $143 = $25;
     $144 = $30;
     $145 = $144<<3;
     $146 = (($145) + 4)|0;
     $147 = (($143) + ($146<<3)|0);
     $148 = +HEAPF64[$147>>3];
     $150 = $148;
    } else {
     $149 = $38;
     $150 = $149;
    }
    $38 = $150;
    $151 = $30;
    $152 = (($151) + 1)|0;
    $30 = $152;
   }
   $153 = $37;
   $39 = $153;
   $154 = $24;
   $155 = $39;
   $156 = $35;
   $157 = $27;
   (_AT_histo_midpoints($154,$155,$156,1,$157)|0);
   $158 = $24;
   $159 = $39;
   $160 = $35;
   $161 = $28;
   (_AT_histo_bin_widths($158,$159,$160,1,$161)|0);
   $30 = 0;
   while(1) {
    $162 = $30;
    $163 = $24;
    $164 = ($162|0)<($163|0);
    if (!($164)) {
     break;
    }
    $165 = $29;
    $166 = $30;
    $167 = (($165) + ($166<<3)|0);
    HEAPF64[$167>>3] = 0.0;
    $168 = $30;
    $169 = (($168) + 1)|0;
    $30 = $169;
   }
   $40 = 1;
   $30 = 0;
   while(1) {
    $170 = $30;
    $171 = $15;
    $172 = ($170|0)<($171|0);
    if (!($172)) {
     break;
    }
    $173 = $25;
    $174 = $30;
    $175 = $174<<3;
    $176 = (($175) + 3)|0;
    $177 = (($173) + ($176<<3)|0);
    $178 = +HEAPF64[$177>>3];
    $41 = $178;
    $179 = $25;
    $180 = $30;
    $181 = $180<<3;
    $182 = (($181) + 4)|0;
    $183 = (($179) + ($182<<3)|0);
    $184 = +HEAPF64[$183>>3];
    $42 = $184;
    $185 = $24;
    $186 = $39;
    $187 = $35;
    $188 = $41;
    $189 = (_AT_histo_bin_no($185,$186,$187,1,$188)|0);
    $43 = $189;
    $190 = $24;
    $191 = $39;
    $192 = $35;
    $193 = $42;
    $194 = (_AT_histo_bin_no($190,$191,$192,1,$193)|0);
    $44 = $194;
    $195 = $44;
    $196 = $43;
    $197 = (($195) - ($196))|0;
    $198 = (($197) + 1)|0;
    $45 = $198;
    $199 = $45;
    $200 = ($199|0)>(1);
    if ($200) {
     $201 = $45;
     $202 = (($201) + 1)|0;
     $203 = (_calloc($202,8)|0);
     $46 = $203;
     $204 = $45;
     $205 = (($204) + 1)|0;
     $206 = (_calloc($205,8)|0);
     $47 = $206;
     $207 = $45;
     $208 = (($207) + 1)|0;
     $209 = (_calloc($208,8)|0);
     $48 = $209;
     HEAPF64[$49>>3] = 0.0;
     $210 = $24;
     $211 = $39;
     $212 = $35;
     $213 = $43;
     (_AT_histo_left_limit($210,$211,$212,1,$213,$49)|0);
     $214 = $45;
     $215 = (($214) + 1)|0;
     $216 = +HEAPF64[$49>>3];
     $217 = $35;
     $218 = $46;
     (_AT_histo_left_limits($215,$216,$217,1,$218)|0);
     $219 = $45;
     $220 = (($219) - 1)|0;
     $221 = $46;
     $222 = ((($221)) + 8|0);
     $223 = $16;
     $224 = $30;
     $225 = (($223) + ($224<<3)|0);
     $226 = +HEAPF64[$225>>3];
     $227 = $17;
     $228 = $30;
     $229 = (($227) + ($228<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $19;
     $232 = $20;
     $233 = $21;
     $234 = $22;
     $235 = $26;
     $236 = $47;
     $237 = ((($236)) + 8|0);
     $238 = (_AT_r_RDD_m($220,$222,$226,$230,$231,$232,$233,$234,$235,$237)|0);
     $50 = $238;
     $239 = $50;
     $240 = ($239|0)!=(0);
     if ($240) {
      label = 26;
      break;
     }
     $245 = $25;
     $246 = $30;
     $247 = $246<<3;
     $248 = (($247) + 2)|0;
     $249 = (($245) + ($248<<3)|0);
     $250 = +HEAPF64[$249>>3];
     $53 = $250;
     $31 = 1;
     while(1) {
      $251 = $31;
      $252 = $45;
      $253 = ($251|0)<($252|0);
      if (!($253)) {
       break;
      }
      $254 = $47;
      $255 = $31;
      $256 = (($254) + ($255<<3)|0);
      $257 = +HEAPF64[$256>>3];
      $258 = $53;
      $259 = $257 / $258;
      $260 = (+_gsl_pow_2($259));
      $261 = $48;
      $262 = $31;
      $263 = (($261) + ($262<<3)|0);
      HEAPF64[$263>>3] = $260;
      $264 = $31;
      $265 = (($264) + 1)|0;
      $31 = $265;
     }
     $266 = $48;
     HEAPF64[$266>>3] = 1.0;
     $267 = $48;
     $268 = $45;
     $269 = (($267) + ($268<<3)|0);
     HEAPF64[$269>>3] = 0.0;
     $270 = (_fopen(77809,77823)|0);
     $54 = $270;
     $271 = $54;
     (_fprintf($271,77825,$vararg_buffer6)|0);
     $31 = 0;
     while(1) {
      $272 = $31;
      $273 = $45;
      $274 = (($273) + 1)|0;
      $275 = ($272|0)<($274|0);
      $276 = $54;
      if (!($275)) {
       break;
      }
      $277 = $31;
      $278 = $47;
      $279 = $31;
      $280 = (($278) + ($279<<3)|0);
      $281 = +HEAPF64[$280>>3];
      $282 = $46;
      $283 = $31;
      $284 = (($282) + ($283<<3)|0);
      $285 = +HEAPF64[$284>>3];
      $286 = $48;
      $287 = $31;
      $288 = (($286) + ($287<<3)|0);
      $289 = +HEAPF64[$288>>3];
      HEAP32[$vararg_buffer8>>2] = $277;
      $vararg_ptr11 = ((($vararg_buffer8)) + 8|0);
      HEAPF64[$vararg_ptr11>>3] = $281;
      $vararg_ptr12 = ((($vararg_buffer8)) + 16|0);
      HEAPF64[$vararg_ptr12>>3] = $285;
      $vararg_ptr13 = ((($vararg_buffer8)) + 24|0);
      HEAPF64[$vararg_ptr13>>3] = $289;
      (_fprintf($276,77845,$vararg_buffer8)|0);
      $290 = $31;
      $291 = (($290) + 1)|0;
      $31 = $291;
     }
     (_fclose($276)|0);
     $31 = 0;
     while(1) {
      $292 = $31;
      $293 = $45;
      $294 = ($292|0)<($293|0);
      if (!($294)) {
       break;
      }
      $295 = $48;
      $296 = $31;
      $297 = (($295) + ($296<<3)|0);
      $298 = +HEAPF64[$297>>3];
      $299 = $48;
      $300 = $31;
      $301 = (($300) + 1)|0;
      $302 = (($299) + ($301<<3)|0);
      $303 = +HEAPF64[$302>>3];
      $304 = $298 - $303;
      $305 = $46;
      $306 = $31;
      $307 = (($306) + 1)|0;
      $308 = (($305) + ($307<<3)|0);
      $309 = +HEAPF64[$308>>3];
      $310 = $46;
      $311 = $31;
      $312 = (($310) + ($311<<3)|0);
      $313 = +HEAPF64[$312>>3];
      $314 = $309 - $313;
      $315 = $304 / $314;
      $55 = $315;
      $316 = $34;
      $317 = $30;
      $318 = (($316) + ($317<<3)|0);
      $319 = +HEAPF64[$318>>3];
      $320 = $55;
      $321 = $319 * $320;
      $322 = $29;
      $323 = $43;
      $324 = $31;
      $325 = (($323) + ($324))|0;
      $326 = (($322) + ($325<<3)|0);
      $327 = +HEAPF64[$326>>3];
      $328 = $327 + $321;
      HEAPF64[$326>>3] = $328;
      $329 = $31;
      $330 = (($329) + 1)|0;
      $31 = $330;
     }
     $331 = $46;
     _free($331);
     $332 = $47;
     _free($332);
     $333 = $48;
     _free($333);
    } else {
     $334 = $34;
     $335 = $30;
     $336 = (($334) + ($335<<3)|0);
     $337 = +HEAPF64[$336>>3];
     $338 = $337 * 1.0;
     $339 = $28;
     $340 = $43;
     $341 = (($339) + ($340<<3)|0);
     $342 = +HEAPF64[$341>>3];
     $343 = $338 / $342;
     $344 = $29;
     $345 = $43;
     $346 = (($344) + ($345<<3)|0);
     $347 = +HEAPF64[$346>>3];
     $348 = $347 + $343;
     HEAPF64[$346>>3] = $348;
    }
    $349 = $40;
    $350 = $44;
    $351 = ($349|0)>($350|0);
    $352 = $40;
    $353 = $44;
    $354 = $351 ? $352 : $353;
    $40 = $354;
    $355 = $30;
    $356 = (($355) + 1)|0;
    $30 = $356;
   }
   if ((label|0) == 26) {
    (_printf(77670,$vararg_buffer)|0);
    $241 = $20;
    (_AT_RDD_name_from_number($241,$51)|0);
    $242 = $22;
    (_getERName($242,$52)|0);
    $243 = $20;
    $244 = $22;
    HEAP32[$vararg_buffer1>>2] = $243;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $51;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = $244;
    $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
    HEAP32[$vararg_ptr5>>2] = $52;
    (_printf(77768,$vararg_buffer1)|0);
    _exit(1);
    // unreachable;
   }
   $56 = 0.0;
   $30 = 0;
   while(1) {
    $357 = $30;
    $358 = $24;
    $359 = ($357|0)<($358|0);
    if (!($359)) {
     break;
    }
    $360 = $29;
    $361 = $30;
    $362 = (($360) + ($361<<3)|0);
    $363 = +HEAPF64[$362>>3];
    $364 = $28;
    $365 = $30;
    $366 = (($364) + ($365<<3)|0);
    $367 = +HEAPF64[$366>>3];
    $368 = $363 * $367;
    $369 = $56;
    $370 = $369 + $368;
    $56 = $370;
    $371 = $30;
    $372 = (($371) + 1)|0;
    $30 = $372;
   }
   $30 = 0;
   while(1) {
    $373 = $30;
    $374 = $24;
    $375 = ($373|0)<($374|0);
    if (!($375)) {
     break L12;
    }
    $376 = $56;
    $377 = $29;
    $378 = $30;
    $379 = (($377) + ($378<<3)|0);
    $380 = +HEAPF64[$379>>3];
    $381 = $380 / $376;
    HEAPF64[$379>>3] = $381;
    $382 = $30;
    $383 = (($382) + 1)|0;
    $30 = $383;
   }
  }
 } while(0);
 $384 = (_fopen(77868,77823)|0);
 $57 = $384;
 $385 = $57;
 (_fprintf($385,77882,$vararg_buffer14)|0);
 $58 = 0;
 while(1) {
  $386 = $58;
  $387 = $24;
  $388 = ($386|0)<($387|0);
  $389 = $57;
  if (!($388)) {
   break;
  }
  $390 = $58;
  $391 = $27;
  $392 = $58;
  $393 = (($391) + ($392<<3)|0);
  $394 = +HEAPF64[$393>>3];
  $395 = $28;
  $396 = $58;
  $397 = (($395) + ($396<<3)|0);
  $398 = +HEAPF64[$397>>3];
  $399 = $29;
  $400 = $58;
  $401 = (($399) + ($400<<3)|0);
  $402 = +HEAPF64[$401>>3];
  HEAP32[$vararg_buffer16>>2] = $390;
  $vararg_ptr19 = ((($vararg_buffer16)) + 8|0);
  HEAPF64[$vararg_ptr19>>3] = $394;
  $vararg_ptr20 = ((($vararg_buffer16)) + 16|0);
  HEAPF64[$vararg_ptr20>>3] = $398;
  $vararg_ptr21 = ((($vararg_buffer16)) + 24|0);
  HEAPF64[$vararg_ptr21>>3] = $402;
  (_fprintf($389,77904,$vararg_buffer16)|0);
  $403 = $58;
  $404 = (($403) + 1)|0;
  $58 = $404;
 }
 (_fclose($389)|0);
 $405 = $34;
 _free($405);
 STACKTOP = sp;return;
}
function _AT_n_bins_for_low_fluence_local_dose_distribution($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = 0.0;
 $21 = 0;
 while(1) {
  $23 = $21;
  $24 = $13;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $14;
  $27 = $21;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $15;
  $31 = $21;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $29 * $33;
  $35 = $16;
  $36 = $21;
  $37 = (($35) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $34 * $38;
  $40 = $20;
  $41 = $40 + $39;
  $20 = $41;
  $42 = $21;
  $43 = (($42) + 1)|0;
  $21 = $43;
 }
 $44 = $10;
 $45 = $11;
 $46 = $44 * $45;
 $47 = $20;
 $48 = $46 * $47;
 $22 = $48;
 $49 = $19;
 HEAP32[$49>>2] = 0;
 $50 = $22;
 $51 = $20;
 $52 = $50 / $51;
 $53 = $18;
 HEAPF64[$53>>3] = $52;
 while(1) {
  $54 = $18;
  $55 = +HEAPF64[$54>>3];
  $56 = $55 > 0.002;
  if (!($56)) {
   break;
  }
  $57 = $18;
  $58 = +HEAPF64[$57>>3];
  $59 = 0.5 * $58;
  $60 = $18;
  HEAPF64[$60>>3] = $59;
  $61 = $19;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$61>>2] = $63;
 }
 $64 = $19;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + 1)|0;
 $67 = $12;
 $68 = Math_imul($66, $67)|0;
 $69 = $17;
 HEAP32[$69>>2] = $68;
 $70 = $13;
 $71 = $17;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + ($70))|0;
 HEAP32[$71>>2] = $73;
 STACKTOP = sp;return;
}
function _AT_low_fluence_local_dose_distribution($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $22 = $14;
 $23 = (_calloc($22,8)|0);
 $18 = $23;
 $24 = $14;
 $25 = (_calloc($24,8)|0);
 $19 = $25;
 $26 = (+Math_log(2.0));
 $27 = $10;
 $28 = (+($27|0));
 $29 = $26 / $28;
 $20 = $29;
 $21 = 0;
 while(1) {
  $30 = $21;
  $31 = $14;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $11;
  $34 = +HEAPF64[$33>>3];
  $35 = $21;
  $36 = (+($35|0));
  $37 = $36 - 0.5;
  $38 = $20;
  $39 = $37 * $38;
  $40 = (+Math_exp((+$39)));
  $41 = $34 * $40;
  $42 = $18;
  $43 = $21;
  $44 = (($42) + ($43<<3)|0);
  HEAPF64[$44>>3] = $41;
  $45 = $11;
  $46 = +HEAPF64[$45>>3];
  $47 = $21;
  $48 = (+($47|0));
  $49 = $48 + 0.5;
  $50 = $20;
  $51 = $49 * $50;
  $52 = (+Math_exp((+$51)));
  $53 = $46 * $52;
  $54 = $19;
  $55 = $21;
  $56 = (($54) + ($55<<3)|0);
  HEAPF64[$56>>3] = $53;
  $57 = $21;
  $58 = $9;
  $59 = ($57|0)<($58|0);
  if ($59) {
   $60 = $11;
   $61 = $21;
   $62 = (($60) + ($61<<3)|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $15;
   $65 = $21;
   $66 = (($64) + ($65<<3)|0);
   HEAPF64[$66>>3] = $63;
   $67 = $12;
   $68 = $21;
   $69 = (($67) + ($68<<3)|0);
   $70 = +HEAPF64[$69>>3];
   $71 = $16;
   $72 = $21;
   $73 = (($71) + ($72<<3)|0);
   HEAPF64[$73>>3] = $70;
   $74 = $13;
   $75 = $21;
   $76 = (($74) + ($75<<3)|0);
   $77 = +HEAPF64[$76>>3];
   $78 = $17;
   $79 = $21;
   $80 = (($78) + ($79<<3)|0);
   HEAPF64[$80>>3] = $77;
  } else {
   $81 = $18;
   $82 = $21;
   $83 = (($81) + ($82<<3)|0);
   $84 = +HEAPF64[$83>>3];
   $85 = $19;
   $86 = $21;
   $87 = (($85) + ($86<<3)|0);
   $88 = +HEAPF64[$87>>3];
   $89 = $84 * $88;
   $90 = (+Math_sqrt((+$89)));
   $91 = $15;
   $92 = $21;
   $93 = (($91) + ($92<<3)|0);
   HEAPF64[$93>>3] = $90;
   $94 = $19;
   $95 = $21;
   $96 = (($94) + ($95<<3)|0);
   $97 = +HEAPF64[$96>>3];
   $98 = $18;
   $99 = $21;
   $100 = (($98) + ($99<<3)|0);
   $101 = +HEAPF64[$100>>3];
   $102 = $97 - $101;
   $103 = $16;
   $104 = $21;
   $105 = (($103) + ($104<<3)|0);
   HEAPF64[$105>>3] = $102;
   $106 = $17;
   $107 = $21;
   $108 = (($106) + ($107<<3)|0);
   HEAPF64[$108>>3] = 0.0;
  }
  $109 = $21;
  $110 = (($109) + 1)|0;
  $21 = $110;
 }
 $111 = $18;
 _free($111);
 $112 = $19;
 _free($112);
 STACKTOP = sp;return;
}
function _AT_Kellerer_normalize($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $12;
 $20 = $7;
 $21 = (($19) - ($20))|0;
 $16 = $21;
 $22 = $11;
 $17 = $22;
 $14 = 0;
 while(1) {
  $23 = $14;
  $24 = $10;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $14;
  $27 = $16;
  $28 = (($26) + ($27))|0;
  $15 = $28;
  $29 = $17;
  $30 = $13;
  $31 = $14;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $9;
  $35 = $15;
  $36 = (($34) + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $33 * $37;
  $39 = $29 + $38;
  $17 = $39;
  $40 = $14;
  $41 = (($40) + 1)|0;
  $14 = $41;
 }
 $42 = $11;
 $43 = 1.0 - $42;
 $44 = $17;
 $45 = $11;
 $46 = $44 - $45;
 $47 = $43 / $46;
 $18 = $47;
 $14 = 0;
 while(1) {
  $48 = $14;
  $49 = $10;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $18;
  $52 = $13;
  $53 = $14;
  $54 = (($52) + ($53<<3)|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $55 * $51;
  HEAPF64[$54>>3] = $56;
  $57 = $14;
  $58 = (($57) + 1)|0;
  $14 = $58;
 }
 STACKTOP = sp;return;
}
function _AT_Kellerer_interpolation($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $9;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $9;
 $19 = +HEAPF64[$18>>3];
 $20 = $17 - $19;
 $21 = $10;
 HEAPF64[$21>>3] = $20;
 $22 = $11;
 HEAPF64[$22>>3] = 0.0;
 $23 = $7;
 $24 = $8;
 $25 = ($23|0)<($24|0);
 if (!($25)) {
  ___assert_fail((77926|0),(77943|0),456,(77984|0));
  // unreachable;
 }
 $26 = $9;
 $27 = $7;
 $28 = (($26) + ($27<<3)|0);
 HEAPF64[$28>>3] = 0.0;
 $29 = $6;
 $30 = $8;
 $31 = ($29|0)<($30|0);
 if (!($31)) {
  ___assert_fail((78010|0),(77943|0),460,(77984|0));
  // unreachable;
 }
 $12 = 1;
 while(1) {
  $32 = $12;
  $33 = $6;
  $34 = ($32|0)<=($33|0);
  if (!($34)) {
   break;
  }
  $35 = $7;
  $36 = $12;
  $37 = (($35) + ($36))|0;
  $13 = $37;
  $38 = $10;
  $39 = $13;
  $40 = (($39) - 1)|0;
  $41 = (($38) + ($40<<3)|0);
  HEAPF64[$41>>3] = 0.0;
  $42 = $11;
  $43 = $13;
  $44 = (($43) - 1)|0;
  $45 = (($42) + ($44<<3)|0);
  HEAPF64[$45>>3] = 0.0;
  $46 = $12;
  $47 = (($46) + 1)|0;
  $12 = $47;
 }
 $14 = 2;
 while(1) {
  $48 = $14;
  $49 = $7;
  $50 = ($48|0)<=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $9;
  $52 = $14;
  $53 = (($51) + ($52<<3)|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $9;
  $56 = $14;
  $57 = (($56) - 1)|0;
  $58 = (($57) - 1)|0;
  $59 = (($55) + ($58<<3)|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $54 - $60;
  $62 = 0.5 * $61;
  $63 = $10;
  $64 = $14;
  $65 = (($64) - 1)|0;
  $66 = (($63) + ($65<<3)|0);
  HEAPF64[$66>>3] = $62;
  $67 = $10;
  $68 = $14;
  $69 = (($68) - 1)|0;
  $70 = (($67) + ($69<<3)|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $9;
  $73 = $14;
  $74 = (($73) - 1)|0;
  $75 = (($74) - 1)|0;
  $76 = (($72) + ($75<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $71 + $77;
  $79 = $9;
  $80 = $14;
  $81 = (($80) - 1)|0;
  $82 = (($79) + ($81<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $78 - $83;
  $85 = $11;
  $86 = $14;
  $87 = (($86) - 1)|0;
  $88 = (($85) + ($87<<3)|0);
  HEAPF64[$88>>3] = $84;
  $89 = $14;
  $90 = (($89) + 1)|0;
  $14 = $90;
 }
 STACKTOP = sp;return;
}
function _AT_Kellerer_reset($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $36 = 0, $37 = 0, $38 = 0.0;
 var $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $40 = (+Math_log(2.0));
 $41 = $10;
 $42 = HEAP32[$41>>2]|0;
 $43 = (+($42|0));
 $44 = $40 / $43;
 $20 = $44;
 $45 = $10;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<=(256);
 if (!($47)) {
  $294 = $14;
  $295 = HEAP32[$294>>2]|0;
  $296 = $13;
  HEAP32[$296>>2] = $295;
  $37 = 1;
  while(1) {
   $297 = $37;
   $298 = $11;
   $299 = ($297|0)<=($298|0);
   if (!($299)) {
    break;
   }
   $300 = $37;
   $301 = $13;
   $302 = HEAP32[$301>>2]|0;
   $303 = (($300) + ($302))|0;
   $304 = (+($303|0));
   $38 = $304;
   $305 = $38;
   $306 = $20;
   $307 = $305 * $306;
   $308 = (+Math_exp((+$307)));
   $309 = $15;
   $310 = $308 * $309;
   $311 = $16;
   $312 = $37;
   $313 = (($312) - 1)|0;
   $314 = (($311) + ($313<<3)|0);
   HEAPF64[$314>>3] = $310;
   $315 = $11;
   $316 = (_calloc($315,8)|0);
   $39 = $316;
   $317 = $37;
   $318 = $13;
   $319 = HEAP32[$318>>2]|0;
   $320 = (($317) + ($319))|0;
   $321 = (($320) + 1)|0;
   $322 = (+($321|0));
   $38 = $322;
   $323 = $38;
   $324 = $20;
   $325 = $323 * $324;
   $326 = (+Math_exp((+$325)));
   $327 = $15;
   $328 = $326 * $327;
   $329 = $39;
   $330 = $37;
   $331 = (($330) - 1)|0;
   $332 = (($329) + ($331<<3)|0);
   HEAPF64[$332>>3] = $328;
   $333 = $39;
   $334 = $37;
   $335 = (($334) - 1)|0;
   $336 = (($333) + ($335<<3)|0);
   $337 = +HEAPF64[$336>>3];
   $338 = $16;
   $339 = $37;
   $340 = (($339) - 1)|0;
   $341 = (($338) + ($340<<3)|0);
   $342 = +HEAPF64[$341>>3];
   $343 = $337 - $342;
   $344 = $17;
   $345 = $37;
   $346 = (($345) - 1)|0;
   $347 = (($344) + ($346<<3)|0);
   HEAPF64[$347>>3] = $343;
   $348 = $39;
   _free($348);
   $349 = $37;
   $350 = (($349) + 1)|0;
   $37 = $350;
  }
  STACKTOP = sp;return;
 }
 $48 = $12;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)<=(64);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = (+Math_log(2.0));
 $21 = $51;
 $52 = $10;
 $53 = HEAP32[$52>>2]|0;
 $54 = (+($53|0));
 $22 = $54;
 $55 = $22;
 $56 = (+Math_log((+$55)));
 $57 = $21;
 $58 = $56 / $57;
 $59 = $58 - 0.98999999999999999;
 $60 = (~~(($59)));
 $61 = (+($60|0));
 $62 = $21;
 $63 = $61 * $62;
 $64 = (+Math_exp((+$63)));
 $65 = 0.10000000000000001 + $64;
 $66 = (~~(($65)));
 $67 = $10;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + ($66))|0;
 HEAP32[$67>>2] = $69;
 $70 = $22;
 $71 = $10;
 $72 = HEAP32[$71>>2]|0;
 $73 = (+($72|0));
 $74 = $70 / $73;
 $22 = $74;
 $75 = $21;
 $76 = $10;
 $77 = HEAP32[$76>>2]|0;
 $78 = (+($77|0));
 $79 = $75 / $78;
 $20 = $79;
 $80 = $11;
 $81 = (_calloc($80,8)|0);
 $23 = $81;
 $82 = $11;
 $83 = (_calloc($82,8)|0);
 $24 = $83;
 $84 = $10;
 $85 = HEAP32[$84>>2]|0;
 $86 = $12;
 $87 = HEAP32[$86>>2]|0;
 $88 = $11;
 $89 = $18;
 $90 = $23;
 $91 = $24;
 _AT_Kellerer_interpolation($85,$87,$88,$89,$90,$91);
 $92 = $18;
 $93 = $12;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + ($94<<3)|0);
 HEAPF64[$95>>3] = 0.0;
 $96 = $14;
 $97 = HEAP32[$96>>2]|0;
 $25 = $97;
 $98 = $14;
 $99 = HEAP32[$98>>2]|0;
 $100 = (+($99|0));
 $101 = $22;
 $102 = $100 / $101;
 $103 = (~~(($102)));
 $104 = (($103) + 1)|0;
 $105 = $14;
 HEAP32[$105>>2] = $104;
 $106 = $12;
 $107 = HEAP32[$106>>2]|0;
 $108 = (+($107|0));
 $109 = $22;
 $110 = $108 / $109;
 $111 = (~~(($110)));
 $112 = (($111) - 1)|0;
 $113 = $12;
 HEAP32[$113>>2] = $112;
 $26 = 1;
 while(1) {
  $114 = $26;
  $115 = $12;
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)<=($116|0);
  if (!($117)) {
   break;
  }
  $118 = $12;
  $119 = HEAP32[$118>>2]|0;
  $120 = $26;
  $121 = (($119) - ($120))|0;
  $122 = (($121) + 1)|0;
  $27 = $122;
  $123 = $27;
  $124 = $14;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + ($125))|0;
  $127 = (+($126|0));
  $128 = $22;
  $129 = $127 * $128;
  $130 = $25;
  $131 = (+($130|0));
  $132 = $129 - $131;
  $28 = $132;
  $133 = $28;
  $134 = $133 + 0.5;
  $135 = (~~(($134)));
  $29 = $135;
  $136 = $28;
  $137 = $29;
  $138 = (+($137|0));
  $139 = $136 - $138;
  $30 = $139;
  $140 = $18;
  $141 = $29;
  $142 = (($141) - 1)|0;
  $143 = (($140) + ($142<<3)|0);
  $144 = +HEAPF64[$143>>3];
  $145 = $18;
  $146 = $27;
  $147 = (($146) - 1)|0;
  $148 = (($145) + ($147<<3)|0);
  HEAPF64[$148>>3] = $144;
  $149 = $30;
  $150 = $149 < 0.0;
  $151 = $29;
  $152 = ($151|0)>=(2);
  $or$cond = $150 & $152;
  if ($or$cond) {
   $153 = $18;
   $154 = $29;
   $155 = (($154) - 1)|0;
   $156 = (($155) - 1)|0;
   $157 = (($153) + ($156<<3)|0);
   $158 = +HEAPF64[$157>>3];
   $159 = $30;
   $160 = -1.0 * $159;
   $161 = (+Math_pow((+$158),(+$160)));
   $162 = $18;
   $163 = $29;
   $164 = (($163) - 1)|0;
   $165 = (($162) + ($164<<3)|0);
   $166 = +HEAPF64[$165>>3];
   $167 = $30;
   $168 = 1.0 + $167;
   $169 = (+Math_pow((+$166),(+$168)));
   $170 = $161 * $169;
   $171 = $18;
   $172 = $27;
   $173 = (($172) - 1)|0;
   $174 = (($171) + ($173<<3)|0);
   HEAPF64[$174>>3] = $170;
  }
  $175 = $30;
  $176 = $175 > 0.0;
  if ($176) {
   $177 = $29;
   $178 = $12;
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) - 1)|0;
   $181 = ($177|0)<=($180|0);
   if ($181) {
    $182 = $18;
    $183 = $29;
    $184 = (($183) - 1)|0;
    $185 = (($182) + ($184<<3)|0);
    $186 = +HEAPF64[$185>>3];
    $187 = $30;
    $188 = 1.0 - $187;
    $189 = (+Math_pow((+$186),(+$188)));
    $190 = $18;
    $191 = $29;
    $192 = (($190) + ($191<<3)|0);
    $193 = +HEAPF64[$192>>3];
    $194 = $30;
    $195 = (+Math_pow((+$193),(+$194)));
    $196 = $189 * $195;
    $197 = $18;
    $198 = $27;
    $199 = (($198) - 1)|0;
    $200 = (($197) + ($199<<3)|0);
    HEAPF64[$200>>3] = $196;
   }
  }
  $201 = $26;
  $202 = (($201) + 1)|0;
  $26 = $202;
 }
 $203 = $10;
 $204 = HEAP32[$203>>2]|0;
 $31 = $204;
 while(1) {
  $205 = $31;
  $206 = $11;
  $207 = ($205|0)<=($206|0);
  if (!($207)) {
   break;
  }
  $208 = $31;
  $209 = $10;
  $210 = HEAP32[$209>>2]|0;
  $211 = (($208) - ($210))|0;
  $212 = (+($211|0));
  $213 = $20;
  $214 = $212 * $213;
  $32 = $214;
  $215 = $32;
  $216 = - $215;
  $217 = (+Math_exp((+$216)));
  $218 = 0.5 * $217;
  $219 = 1.0 - $218;
  $220 = (+Math_log((+$219)));
  $221 = -1.0 * $220;
  $222 = $20;
  $223 = $221 / $222;
  $33 = $223;
  $224 = $33;
  $225 = $10;
  $226 = HEAP32[$225>>2]|0;
  $227 = (+($226|0));
  $228 = $224 - $227;
  $229 = $19;
  $230 = $31;
  $231 = (($230) - 1)|0;
  $232 = (($229) + ($231<<3)|0);
  HEAPF64[$232>>3] = $228;
  $233 = $31;
  $234 = (($233) + 1)|0;
  $31 = $234;
 }
 $235 = $14;
 $236 = HEAP32[$235>>2]|0;
 $237 = $13;
 HEAP32[$237>>2] = $236;
 $34 = 1;
 while(1) {
  $238 = $34;
  $239 = $11;
  $240 = ($238|0)<=($239|0);
  if (!($240)) {
   break;
  }
  $241 = $34;
  $242 = $13;
  $243 = HEAP32[$242>>2]|0;
  $244 = (($241) + ($243))|0;
  $245 = (+($244|0));
  $35 = $245;
  $246 = $35;
  $247 = $20;
  $248 = $246 * $247;
  $249 = (+Math_exp((+$248)));
  $250 = $15;
  $251 = $249 * $250;
  $252 = $16;
  $253 = $34;
  $254 = (($253) - 1)|0;
  $255 = (($252) + ($254<<3)|0);
  HEAPF64[$255>>3] = $251;
  $256 = $11;
  $257 = (_calloc($256,8)|0);
  $36 = $257;
  $258 = $34;
  $259 = $13;
  $260 = HEAP32[$259>>2]|0;
  $261 = (($258) + ($260))|0;
  $262 = (($261) + 1)|0;
  $263 = (+($262|0));
  $35 = $263;
  $264 = $35;
  $265 = $20;
  $266 = $264 * $265;
  $267 = (+Math_exp((+$266)));
  $268 = $15;
  $269 = $267 * $268;
  $270 = $36;
  $271 = $34;
  $272 = (($271) - 1)|0;
  $273 = (($270) + ($272<<3)|0);
  HEAPF64[$273>>3] = $269;
  $274 = $36;
  $275 = $34;
  $276 = (($275) - 1)|0;
  $277 = (($274) + ($276<<3)|0);
  $278 = +HEAPF64[$277>>3];
  $279 = $16;
  $280 = $34;
  $281 = (($280) - 1)|0;
  $282 = (($279) + ($281<<3)|0);
  $283 = +HEAPF64[$282>>3];
  $284 = $278 - $283;
  $285 = $17;
  $286 = $34;
  $287 = (($286) - 1)|0;
  $288 = (($285) + ($287<<3)|0);
  HEAPF64[$288>>3] = $284;
  $289 = $36;
  _free($289);
  $290 = $34;
  $291 = (($290) + 1)|0;
  $34 = $291;
 }
 $292 = $23;
 _free($292);
 $293 = $24;
 _free($293);
 STACKTOP = sp;return;
}
function _AT_Kellerer_zero($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = 0.0;
 $28 = $17;
 $29 = HEAP32[$28>>2]|0;
 $30 = $12;
 $31 = (($29) - ($30))|0;
 $21 = $31;
 $22 = 1;
 while(1) {
  $32 = $22;
  $33 = $18;
  $34 = HEAP32[$33>>2]|0;
  $35 = ($32|0)<=($34|0);
  if (!($35)) {
   break;
  }
  $36 = $22;
  $37 = $21;
  $38 = (($36) + ($37))|0;
  $23 = $38;
  $39 = $19;
  $40 = $22;
  $41 = (($40) - 1)|0;
  $42 = (($39) + ($41<<3)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $16;
  $45 = $23;
  $46 = (($45) - 1)|0;
  $47 = (($44) + ($46<<3)|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $43 * $48;
  $50 = $20;
  $51 = $50 + $49;
  $20 = $51;
  $52 = $22;
  $53 = (($52) + 1)|0;
  $22 = $53;
 }
 $54 = $14;
 $55 = 1.0 - $54;
 $56 = $14;
 $57 = 1.0 - $56;
 $58 = $55 * $57;
 $59 = $20;
 $60 = $58 / $59;
 $24 = $60;
 $61 = $24;
 $62 = 2.0 / $61;
 $20 = $62;
 $22 = 1;
 while(1) {
  $63 = $22;
  $64 = $18;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($63|0)<=($65|0);
  if (!($66)) {
   break;
  }
  $67 = $19;
  $68 = $22;
  $69 = (($68) - 1)|0;
  $70 = (($67) + ($69<<3)|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $24;
  $73 = $71 * $72;
  $74 = $19;
  $75 = $22;
  $76 = (($75) - 1)|0;
  $77 = (($74) + ($76<<3)|0);
  HEAPF64[$77>>3] = $73;
  $78 = $22;
  $79 = (($78) + 1)|0;
  $22 = $79;
 }
 $80 = $17;
 $81 = HEAP32[$80>>2]|0;
 $82 = $10;
 $83 = (($81) - ($82))|0;
 $21 = $83;
 $84 = $10;
 $85 = $17;
 HEAP32[$85>>2] = $84;
 $86 = $21;
 $87 = $18;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + ($86))|0;
 HEAP32[$87>>2] = $89;
 $25 = 1;
 while(1) {
  $90 = $25;
  $91 = $18;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)<=($92|0);
  if (!($93)) {
   break;
  }
  $94 = $18;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + 1)|0;
  $97 = $25;
  $98 = (($96) - ($97))|0;
  $26 = $98;
  $99 = $26;
  $100 = $21;
  $101 = (($99) + ($100))|0;
  $27 = $101;
  $102 = $19;
  $103 = $26;
  $104 = (($103) - 1)|0;
  $105 = (($102) + ($104<<3)|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $19;
  $108 = $27;
  $109 = (($108) - 1)|0;
  $110 = (($107) + ($109<<3)|0);
  HEAPF64[$110>>3] = $106;
  $111 = $25;
  $112 = (($111) + 1)|0;
  $25 = $112;
 }
 $22 = 1;
 while(1) {
  $113 = $22;
  $114 = $21;
  $115 = ($113|0)<=($114|0);
  if (!($115)) {
   break;
  }
  $116 = $19;
  $117 = $22;
  $118 = (($117) - 1)|0;
  $119 = (($116) + ($118<<3)|0);
  HEAPF64[$119>>3] = 0.0;
  $120 = $22;
  $121 = (($120) + 1)|0;
  $22 = $121;
 }
 $122 = $14;
 $123 = $122 * 2.0;
 $24 = $123;
 $22 = 1;
 while(1) {
  $124 = $22;
  $125 = $13;
  $126 = ($124|0)<=($125|0);
  if (!($126)) {
   break;
  }
  $127 = $19;
  $128 = $22;
  $129 = (($128) - 1)|0;
  $130 = (($127) + ($129<<3)|0);
  $131 = +HEAPF64[$130>>3];
  $132 = $15;
  $133 = $22;
  $134 = (($133) - 1)|0;
  $135 = (($132) + ($134<<3)|0);
  $136 = +HEAPF64[$135>>3];
  $137 = $24;
  $138 = $136 * $137;
  $139 = $131 + $138;
  $140 = $19;
  $141 = $22;
  $142 = (($141) - 1)|0;
  $143 = (($140) + ($142<<3)|0);
  HEAPF64[$143>>3] = $139;
  $144 = $22;
  $145 = (($144) + 1)|0;
  $22 = $145;
 }
 STACKTOP = sp;return;
}
function _AT_Kellerer_shrink($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $23 = $9;
 $14 = $23;
 $15 = 0.0;
 $24 = $11;
 $25 = HEAP32[$24>>2]|0;
 $26 = $8;
 $27 = (($25) - ($26))|0;
 $16 = $27;
 $17 = 1;
 while(1) {
  $28 = $17;
  $29 = $12;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)<=($30|0);
  if (!($31)) {
   break;
  }
  $32 = $17;
  $33 = $16;
  $34 = (($32) + ($33))|0;
  $18 = $34;
  $35 = $15;
  $36 = $13;
  $37 = $17;
  $38 = (($37) - 1)|0;
  $39 = (($36) + ($38<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $10;
  $42 = $18;
  $43 = (($42) - 1)|0;
  $44 = (($41) + ($43<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $40 * $45;
  $47 = $35 + $46;
  $15 = $47;
  $48 = $15;
  $49 = $14;
  $50 = 1000.0 * $49;
  $51 = $48 > $50;
  if ($51) {
   label = 4;
   break;
  }
  $58 = $17;
  $59 = (($58) + 1)|0;
  $17 = $59;
 }
 if ((label|0) == 4) {
  $52 = $11;
  $53 = HEAP32[$52>>2]|0;
  $54 = $17;
  $55 = (($53) + ($54))|0;
  $56 = (($55) - 1)|0;
  $57 = $11;
  HEAP32[$57>>2] = $56;
 }
 $60 = $17;
 $61 = (($60) - 1)|0;
 $19 = $61;
 $15 = 0.0;
 $20 = 1;
 while(1) {
  $62 = $20;
  $63 = $12;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($62|0)<=($64|0);
  if (!($65)) {
   break;
  }
  $66 = $12;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 1)|0;
  $69 = $20;
  $70 = (($68) - ($69))|0;
  $17 = $70;
  $71 = $17;
  $72 = $16;
  $73 = (($71) + ($72))|0;
  $21 = $73;
  $74 = $15;
  $75 = $13;
  $76 = $17;
  $77 = (($76) - 1)|0;
  $78 = (($75) + ($77<<3)|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $10;
  $81 = $21;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<3)|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $79 * $84;
  $86 = $74 + $85;
  $15 = $86;
  $87 = $15;
  $88 = $14;
  $89 = $87 > $88;
  if ($89) {
   break;
  }
  $90 = $20;
  $91 = (($90) + 1)|0;
  $20 = $91;
 }
 $92 = $17;
 $93 = $19;
 $94 = (($92) - ($93))|0;
 $95 = $12;
 HEAP32[$95>>2] = $94;
 $17 = 1;
 while(1) {
  $96 = $17;
  $97 = $12;
  $98 = HEAP32[$97>>2]|0;
  $99 = ($96|0)<=($98|0);
  if (!($99)) {
   break;
  }
  $100 = $17;
  $101 = $19;
  $102 = (($100) + ($101))|0;
  $20 = $102;
  $103 = $13;
  $104 = $20;
  $105 = (($104) - 1)|0;
  $106 = (($103) + ($105<<3)|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $13;
  $109 = $17;
  $110 = (($109) - 1)|0;
  $111 = (($108) + ($110<<3)|0);
  HEAPF64[$111>>3] = $107;
  $112 = $17;
  $113 = (($112) + 1)|0;
  $17 = $113;
 }
 $114 = $12;
 $115 = HEAP32[$114>>2]|0;
 $116 = (($115) + 1)|0;
 $20 = $116;
 $117 = $12;
 $118 = HEAP32[$117>>2]|0;
 $119 = $19;
 $120 = (($118) + ($119))|0;
 $22 = $120;
 $121 = $20;
 $17 = $121;
 while(1) {
  $122 = $17;
  $123 = $22;
  $124 = ($122|0)<=($123|0);
  if (!($124)) {
   break;
  }
  $125 = $13;
  $126 = $17;
  $127 = (($126) - 1)|0;
  $128 = (($125) + ($127<<3)|0);
  HEAPF64[$128>>3] = 0.0;
  $129 = $17;
  $130 = (($129) + 1)|0;
  $17 = $130;
 }
 STACKTOP = sp;return;
}
function _AT_Kellerer_folding($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0;
 var $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $18 = 0, $19 = 0, $20 = 0.0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $38 = $19;
 $39 = $14;
 $40 = (($38) + ($39))|0;
 $41 = $23;
 HEAP32[$41>>2] = $40;
 $42 = $18;
 $43 = $22;
 HEAP32[$43>>2] = $42;
 $44 = $18;
 $26 = $44;
 while(1) {
  $45 = $26;
  $46 = $18;
  $47 = $14;
  $48 = (($46) + ($47))|0;
  $49 = ($45|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $21;
  $51 = $26;
  $52 = (($50) + ($51<<3)|0);
  HEAPF64[$52>>3] = 0.0;
  $53 = $26;
  $54 = (($53) + 1)|0;
  $26 = $54;
 }
 $55 = $13;
 $56 = (_calloc($55,8)|0);
 $31 = $56;
 $57 = $13;
 $58 = (_calloc($57,8)|0);
 $32 = $58;
 $59 = $14;
 $60 = $18;
 $61 = $13;
 $62 = $21;
 $63 = $31;
 $64 = $32;
 _AT_Kellerer_interpolation($59,$60,$61,$62,$63,$64);
 $65 = $19;
 $66 = $16;
 $67 = (($65) - ($66))|0;
 $33 = $67;
 $68 = $13;
 $69 = (_calloc($68,8)|0);
 $34 = $69;
 $26 = 0;
 while(1) {
  $70 = $26;
  $71 = $22;
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = $26;
  $75 = $33;
  $76 = (($74) + ($75))|0;
  $27 = $76;
  $77 = $21;
  $78 = $26;
  $79 = (($77) + ($78<<3)|0);
  $80 = +HEAPF64[$79>>3];
  $81 = $17;
  $82 = $27;
  $83 = (($81) + ($82<<3)|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $80 * $84;
  $86 = $34;
  $87 = $26;
  $88 = (($86) + ($87<<3)|0);
  HEAPF64[$88>>3] = $85;
  $89 = $26;
  $90 = (($89) + 1)|0;
  $26 = $90;
 }
 $26 = 0;
 while(1) {
  $91 = $26;
  $92 = $22;
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)<($93|0);
  if (!($94)) {
   break;
  }
  $36 = 0.0;
  $95 = $26;
  $96 = $14;
  $97 = (($95) + ($96))|0;
  $37 = $97;
  $27 = 0;
  while(1) {
   $98 = $27;
   $99 = $26;
   $100 = ($98|0)<=($99|0);
   if (!($100)) {
    break;
   }
   $101 = $26;
   $102 = (+($101|0));
   $103 = $15;
   $104 = $37;
   $105 = $27;
   $106 = (($104) - ($105))|0;
   $107 = (($106) - 1)|0;
   $108 = (($103) + ($107<<3)|0);
   $109 = +HEAPF64[$108>>3];
   $110 = $102 - $109;
   $29 = $110;
   $111 = $29;
   $112 = $111 + 0.5;
   $113 = (~~(($112)));
   $28 = $113;
   $114 = $29;
   $115 = $28;
   $116 = (+($115|0));
   $117 = $114 - $116;
   $30 = $117;
   $118 = $21;
   $119 = $28;
   $120 = (($118) + ($119<<3)|0);
   $121 = +HEAPF64[$120>>3];
   $122 = $30;
   $123 = $31;
   $124 = $28;
   $125 = (($123) + ($124<<3)|0);
   $126 = +HEAPF64[$125>>3];
   $127 = $30;
   $128 = $32;
   $129 = $28;
   $130 = (($128) + ($129<<3)|0);
   $131 = +HEAPF64[$130>>3];
   $132 = $127 * $131;
   $133 = $126 + $132;
   $134 = $122 * $133;
   $135 = $121 + $134;
   $35 = $135;
   $136 = $35;
   $137 = $136 < 0.0;
   if ($137) {
    $35 = 0.0;
   }
   $138 = $34;
   $139 = $27;
   $140 = (($138) + ($139<<3)|0);
   $141 = +HEAPF64[$140>>3];
   $142 = $35;
   $143 = $141 * $142;
   $144 = $36;
   $145 = $144 + $143;
   $36 = $145;
   $146 = $27;
   $147 = (($146) + 1)|0;
   $27 = $147;
  }
  $148 = $36;
  $149 = $34;
  $150 = $26;
  $151 = (($149) + ($150<<3)|0);
  $152 = +HEAPF64[$151>>3];
  $153 = $21;
  $154 = $26;
  $155 = (($153) + ($154<<3)|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $152 * $156;
  $158 = $157 * 0.5;
  $159 = $148 - $158;
  $160 = $25;
  $161 = $26;
  $162 = (($160) + ($161<<3)|0);
  HEAPF64[$162>>3] = $159;
  $163 = $26;
  $164 = (($163) + 1)|0;
  $26 = $164;
 }
 $165 = $34;
 _free($165);
 $166 = $31;
 _free($166);
 $167 = $32;
 _free($167);
 $168 = $20;
 $169 = $20;
 $170 = $168 * $169;
 $171 = $24;
 HEAPF64[$171>>3] = $170;
 STACKTOP = sp;return;
}
function _AT_SuccessiveConvolutions($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = +$13;
 $14 = $14|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0;
 var $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0;
 var $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0;
 var $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0;
 var $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer18 = sp + 160|0;
 $vararg_buffer12 = sp + 128|0;
 $vararg_buffer6 = sp + 96|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 56|0;
 $35 = sp + 244|0;
 $36 = sp + 240|0;
 $38 = sp + 24|0;
 $39 = sp + 232|0;
 $48 = sp + 208|0;
 $49 = sp + 204|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $53 = $11&1;
 $26 = $53;
 $54 = $12&1;
 $27 = $54;
 $28 = $13;
 $55 = $14&1;
 $29 = $55;
 $32 = 0;
 $56 = $26;
 $57 = $56&1;
 do {
  if ($57) {
   $58 = (_fopen(78026,77823)|0);
   $32 = $58;
   $59 = $32;
   $60 = ($59|0)==(0|0);
   if ($60) {
    STACKTOP = sp;return;
   } else {
    $61 = $32;
    (_fprintf($61,78045,$vararg_buffer)|0);
    break;
   }
  }
 } while(0);
 $33 = 0;
 $62 = $15;
 $34 = $62;
 while(1) {
  $63 = $34;
  $64 = $63 > 0.002;
  if (!($64)) {
   break;
  }
  $65 = $34;
  $66 = $65 / 2.0;
  $34 = $66;
  $67 = $33;
  $68 = (($67) + 1)|0;
  $33 = $68;
 }
 HEAP32[$35>>2] = 0;
 $69 = $18;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$36>>2] = $70;
 $71 = $16;
 $72 = (_calloc($71,8)|0);
 $37 = $72;
 HEAPF64[$38>>3] = 0.0;
 $73 = $37;
 $74 = $21;
 $75 = HEAP32[$36>>2]|0;
 $76 = $75<<3;
 _memcpy(($73|0),($74|0),($76|0))|0;
 HEAP32[$39>>2] = 0;
 $77 = $16;
 $40 = $77;
 $78 = $19;
 $79 = +HEAPF64[$78>>3];
 $80 = (+Math_log(2.0));
 $81 = -1.0 * $80;
 $82 = $17;
 $83 = HEAP32[$82>>2]|0;
 $84 = (+($83|0));
 $85 = $81 / $84;
 $86 = (+Math_exp((+$85)));
 $87 = $79 * $86;
 $41 = $87;
 $88 = $16;
 $89 = (_calloc($88,8)|0);
 $42 = $89;
 $90 = $16;
 $91 = (_calloc($90,8)|0);
 $43 = $91;
 $92 = $42;
 $93 = $19;
 $94 = $40;
 $95 = $94<<3;
 _memcpy(($92|0),($93|0),($95|0))|0;
 $96 = $43;
 $97 = $20;
 $98 = $40;
 $99 = $98<<3;
 _memcpy(($96|0),($97|0),($99|0))|0;
 $100 = HEAP32[$39>>2]|0;
 $101 = $42;
 $102 = $43;
 $103 = HEAP32[$36>>2]|0;
 $104 = +HEAPF64[$38>>3];
 $105 = HEAP32[$35>>2]|0;
 $106 = $37;
 _AT_Kellerer_normalize($100,$101,$102,$103,$104,$105,$106);
 $107 = $27;
 $108 = $107&1;
 if ($108) {
  $109 = $16;
  $110 = HEAP32[$39>>2]|0;
  $111 = $28;
  $112 = $43;
  $113 = $37;
  _AT_Kellerer_shrink($109,$110,$111,$112,$35,$36,$113);
 }
 $114 = $34;
 $115 = 1.0 - $114;
 HEAPF64[$38>>3] = $115;
 $30 = 0;
 while(1) {
  $116 = $30;
  $117 = HEAP32[$36>>2]|0;
  $118 = ($116|0)<($117|0);
  if (!($118)) {
   break;
  }
  $119 = $34;
  $120 = $37;
  $121 = $30;
  $122 = (($120) + ($121<<3)|0);
  $123 = +HEAPF64[$122>>3];
  $124 = $123 * $119;
  HEAPF64[$122>>3] = $124;
  $125 = $30;
  $126 = (($125) + 1)|0;
  $30 = $126;
 }
 $127 = $16;
 $128 = (_calloc($127,8)|0);
 $44 = $128;
 $129 = $17;
 $130 = HEAP32[$129>>2]|0;
 $30 = $130;
 while(1) {
  $131 = $30;
  $132 = $16;
  $133 = ($131|0)<=($132|0);
  if (!($133)) {
   break;
  }
  $134 = $30;
  $135 = $17;
  $136 = HEAP32[$135>>2]|0;
  $137 = (($134) - ($136))|0;
  $138 = (+($137|0));
  $139 = (+Math_log(2.0));
  $140 = $138 * $139;
  $141 = $17;
  $142 = HEAP32[$141>>2]|0;
  $143 = (+($142|0));
  $144 = $140 / $143;
  $45 = $144;
  $145 = $45;
  $146 = - $145;
  $147 = (+Math_exp((+$146)));
  $148 = 0.5 * $147;
  $149 = 1.0 - $148;
  $150 = (+Math_log((+$149)));
  $151 = -1.0 * $150;
  $152 = (+Math_log(2.0));
  $153 = $17;
  $154 = HEAP32[$153>>2]|0;
  $155 = (+($154|0));
  $156 = $152 / $155;
  $157 = $151 / $156;
  $45 = $157;
  $158 = $45;
  $159 = $17;
  $160 = HEAP32[$159>>2]|0;
  $161 = (+($160|0));
  $162 = $158 - $161;
  $163 = $44;
  $164 = $30;
  $165 = (($164) - 1)|0;
  $166 = (($163) + ($165<<3)|0);
  HEAPF64[$166>>3] = $162;
  $167 = $30;
  $168 = (($167) + 1)|0;
  $30 = $168;
 }
 $169 = $26;
 $170 = $169&1;
 L22: do {
  if ($170) {
   $171 = $32;
   $172 = +HEAPF64[$38>>3];
   HEAP32[$vararg_buffer1>>2] = 0;
   $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
   HEAPF64[$vararg_ptr3>>3] = 0.0;
   $vararg_ptr4 = ((($vararg_buffer1)) + 16|0);
   HEAPF64[$vararg_ptr4>>3] = 0.0;
   $vararg_ptr5 = ((($vararg_buffer1)) + 24|0);
   HEAPF64[$vararg_ptr5>>3] = $172;
   (_fprintf($171,78076,$vararg_buffer1)|0);
   $31 = 0;
   while(1) {
    $173 = $31;
    $174 = HEAP32[$36>>2]|0;
    $175 = ($173|0)<($174|0);
    if (!($175)) {
     break L22;
    }
    $176 = $32;
    $177 = $42;
    $178 = $31;
    $179 = (($177) + ($178<<3)|0);
    $180 = +HEAPF64[$179>>3];
    $181 = $43;
    $182 = $31;
    $183 = (($181) + ($182<<3)|0);
    $184 = +HEAPF64[$183>>3];
    $185 = $37;
    $186 = $31;
    $187 = (($185) + ($186<<3)|0);
    $188 = +HEAPF64[$187>>3];
    HEAP32[$vararg_buffer6>>2] = 0;
    $vararg_ptr9 = ((($vararg_buffer6)) + 8|0);
    HEAPF64[$vararg_ptr9>>3] = $180;
    $vararg_ptr10 = ((($vararg_buffer6)) + 16|0);
    HEAPF64[$vararg_ptr10>>3] = $184;
    $vararg_ptr11 = ((($vararg_buffer6)) + 24|0);
    HEAPF64[$vararg_ptr11>>3] = $188;
    (_fprintf($176,78076,$vararg_buffer6)|0);
    $189 = $31;
    $190 = (($189) + 1)|0;
    $31 = $190;
   }
  }
 } while(0);
 $191 = $16;
 $192 = (_calloc($191,8)|0);
 $46 = $192;
 $47 = 0.0;
 HEAP32[$48>>2] = 0;
 HEAP32[$49>>2] = 0;
 $30 = 0;
 while(1) {
  $193 = $30;
  $194 = $33;
  $195 = ($193|0)<($194|0);
  if (!($195)) {
   break;
  }
  $196 = $34;
  $197 = $196 * 2.0;
  $34 = $197;
  $198 = +HEAPF64[$38>>3];
  $47 = $198;
  $199 = HEAP32[$36>>2]|0;
  HEAP32[$49>>2] = $199;
  $200 = HEAP32[$35>>2]|0;
  HEAP32[$48>>2] = $200;
  $201 = $46;
  $202 = $37;
  $203 = HEAP32[$36>>2]|0;
  $204 = $203<<3;
  _memcpy(($201|0),($202|0),($204|0))|0;
  $205 = $34;
  $206 = $205 >= 10.0;
  if ($206) {
   $207 = $29;
   $208 = $207&1;
   $209 = $208&1;
   $210 = ($209|0)==(1);
   if ($210) {
    $211 = $17;
    $212 = $16;
    $213 = $41;
    $214 = $42;
    $215 = $43;
    $216 = $46;
    $217 = $44;
    _AT_Kellerer_reset($211,$212,$49,$39,$48,$213,$214,$215,$216,$217);
   }
  }
  $218 = $16;
  $219 = $17;
  $220 = HEAP32[$219>>2]|0;
  $221 = $44;
  $222 = HEAP32[$39>>2]|0;
  $223 = $43;
  $224 = HEAP32[$49>>2]|0;
  $225 = HEAP32[$48>>2]|0;
  $226 = $47;
  $227 = $46;
  $228 = $37;
  _AT_Kellerer_folding($218,$220,$221,$222,$223,$224,$225,$226,$227,$36,$35,$38,$228);
  $229 = $47;
  $230 = $229 >= 1.0E-10;
  if ($230) {
   $231 = HEAP32[$48>>2]|0;
   $232 = $16;
   $233 = HEAP32[$39>>2]|0;
   $234 = HEAP32[$49>>2]|0;
   $235 = $47;
   $236 = $46;
   $237 = $43;
   $238 = $37;
   _AT_Kellerer_zero($231,$232,$233,$234,$235,$236,$237,$35,$36,$238);
  }
  $239 = $27;
  $240 = $239&1;
  if ($240) {
   $241 = $16;
   $242 = HEAP32[$39>>2]|0;
   $243 = $28;
   $244 = $43;
   $245 = $37;
   _AT_Kellerer_shrink($241,$242,$243,$244,$35,$36,$245);
  }
  $246 = HEAP32[$39>>2]|0;
  $247 = $42;
  $248 = $43;
  $249 = HEAP32[$36>>2]|0;
  $250 = +HEAPF64[$38>>3];
  $251 = HEAP32[$35>>2]|0;
  $252 = $37;
  _AT_Kellerer_normalize($246,$247,$248,$249,$250,$251,$252);
  $253 = $26;
  $254 = $253&1;
  L41: do {
   if ($254) {
    $255 = $32;
    $256 = $30;
    $257 = (($256) + 1)|0;
    $258 = +HEAPF64[$38>>3];
    HEAP32[$vararg_buffer12>>2] = $257;
    $vararg_ptr15 = ((($vararg_buffer12)) + 8|0);
    HEAPF64[$vararg_ptr15>>3] = 0.0;
    $vararg_ptr16 = ((($vararg_buffer12)) + 16|0);
    HEAPF64[$vararg_ptr16>>3] = 1.0;
    $vararg_ptr17 = ((($vararg_buffer12)) + 24|0);
    HEAPF64[$vararg_ptr17>>3] = $258;
    (_fprintf($255,78092,$vararg_buffer12)|0);
    $31 = 0;
    while(1) {
     $259 = $31;
     $260 = HEAP32[$36>>2]|0;
     $261 = ($259|0)<($260|0);
     if (!($261)) {
      break L41;
     }
     $262 = HEAP32[$35>>2]|0;
     $263 = HEAP32[$39>>2]|0;
     $264 = (($262) - ($263))|0;
     $50 = $264;
     $265 = $32;
     $266 = $30;
     $267 = (($266) + 1)|0;
     $268 = $42;
     $269 = $31;
     $270 = $50;
     $271 = (($269) + ($270))|0;
     $272 = (($268) + ($271<<3)|0);
     $273 = +HEAPF64[$272>>3];
     $274 = $43;
     $275 = $31;
     $276 = $50;
     $277 = (($275) + ($276))|0;
     $278 = (($274) + ($277<<3)|0);
     $279 = +HEAPF64[$278>>3];
     $280 = $37;
     $281 = $31;
     $282 = (($280) + ($281<<3)|0);
     $283 = +HEAPF64[$282>>3];
     HEAP32[$vararg_buffer18>>2] = $267;
     $vararg_ptr21 = ((($vararg_buffer18)) + 8|0);
     HEAPF64[$vararg_ptr21>>3] = $273;
     $vararg_ptr22 = ((($vararg_buffer18)) + 16|0);
     HEAPF64[$vararg_ptr22>>3] = $279;
     $vararg_ptr23 = ((($vararg_buffer18)) + 24|0);
     HEAPF64[$vararg_ptr23>>3] = $283;
     (_fprintf($265,78092,$vararg_buffer18)|0);
     $284 = $31;
     $285 = (($284) + 1)|0;
     $31 = $285;
    }
   }
  } while(0);
  $286 = $30;
  $287 = (($286) + 1)|0;
  $30 = $287;
 }
 $288 = $25;
 HEAPF64[$288>>3] = 0.0;
 $30 = 0;
 while(1) {
  $289 = $30;
  $290 = $16;
  $291 = ($289|0)<($290|0);
  if (!($291)) {
   break;
  }
  $292 = $19;
  $293 = $30;
  $294 = (($292) + ($293<<3)|0);
  HEAPF64[$294>>3] = 0.0;
  $295 = $20;
  $296 = $30;
  $297 = (($295) + ($296<<3)|0);
  HEAPF64[$297>>3] = 0.0;
  $298 = $21;
  $299 = $30;
  $300 = (($298) + ($299<<3)|0);
  HEAPF64[$300>>3] = 0.0;
  $301 = $23;
  $302 = $30;
  $303 = (($301) + ($302<<3)|0);
  HEAPF64[$303>>3] = 0.0;
  $304 = $24;
  $305 = $30;
  $306 = (($304) + ($305<<3)|0);
  HEAPF64[$306>>3] = 0.0;
  $307 = $30;
  $308 = (($307) + 1)|0;
  $30 = $308;
 }
 $309 = HEAP32[$35>>2]|0;
 $310 = HEAP32[$39>>2]|0;
 $311 = (($309) - ($310))|0;
 $51 = $311;
 $30 = 0;
 while(1) {
  $312 = $30;
  $313 = HEAP32[$36>>2]|0;
  $314 = ($312|0)<($313|0);
  if (!($314)) {
   break;
  }
  $315 = $30;
  $316 = $51;
  $317 = (($315) + ($316))|0;
  $52 = $317;
  $318 = $42;
  $319 = $52;
  $320 = (($318) + ($319<<3)|0);
  $321 = +HEAPF64[$320>>3];
  $322 = $19;
  $323 = $30;
  $324 = (($322) + ($323<<3)|0);
  HEAPF64[$324>>3] = $321;
  $325 = $43;
  $326 = $52;
  $327 = (($325) + ($326<<3)|0);
  $328 = +HEAPF64[$327>>3];
  $329 = $20;
  $330 = $30;
  $331 = (($329) + ($330<<3)|0);
  HEAPF64[$331>>3] = $328;
  $332 = $37;
  $333 = $30;
  $334 = (($332) + ($333<<3)|0);
  $335 = +HEAPF64[$334>>3];
  $336 = $21;
  $337 = $30;
  $338 = (($336) + ($337<<3)|0);
  HEAPF64[$338>>3] = $335;
  $339 = $21;
  $340 = $30;
  $341 = (($339) + ($340<<3)|0);
  $342 = +HEAPF64[$341>>3];
  $343 = $20;
  $344 = $30;
  $345 = (($343) + ($344<<3)|0);
  $346 = +HEAPF64[$345>>3];
  $347 = $342 * $346;
  $348 = $23;
  $349 = $30;
  $350 = (($348) + ($349<<3)|0);
  HEAPF64[$350>>3] = $347;
  $351 = $23;
  $352 = $30;
  $353 = (($351) + ($352<<3)|0);
  $354 = +HEAPF64[$353>>3];
  $355 = $19;
  $356 = $30;
  $357 = (($355) + ($356<<3)|0);
  $358 = +HEAPF64[$357>>3];
  $359 = $354 * $358;
  $360 = $24;
  $361 = $30;
  $362 = (($360) + ($361<<3)|0);
  HEAPF64[$362>>3] = $359;
  $363 = $24;
  $364 = $30;
  $365 = (($363) + ($364<<3)|0);
  $366 = +HEAPF64[$365>>3];
  $367 = $25;
  $368 = +HEAPF64[$367>>3];
  $369 = $368 + $366;
  HEAPF64[$367>>3] = $369;
  $370 = $30;
  $371 = (($370) + 1)|0;
  $30 = $371;
 }
 $372 = HEAP32[$36>>2]|0;
 $373 = $18;
 HEAP32[$373>>2] = $372;
 $374 = +HEAPF64[$38>>3];
 $375 = $22;
 HEAPF64[$375>>3] = $374;
 $376 = $46;
 _free($376);
 $377 = $37;
 _free($377);
 $378 = $42;
 _free($378);
 $379 = $43;
 _free($379);
 $380 = $44;
 _free($380);
 $381 = $26;
 $382 = $381&1;
 if (!($382)) {
  STACKTOP = sp;return;
 }
 $383 = $32;
 (_fclose($383)|0);
 STACKTOP = sp;return;
}
function _AT_n_bins_for_DSB_distribution($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0.0;
 $14 = 0;
 while(1) {
  $15 = $14;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  $18 = $13;
  if (!($17)) {
   break;
  }
  $19 = $8;
  $20 = $14;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $11;
  $24 = $14;
  $25 = (($23) + ($24<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $22 * $26;
  $28 = $12;
  $29 = $27 * $28;
  $30 = $18 > $29;
  if ($30) {
   $31 = $13;
   $43 = $31;
  } else {
   $32 = $8;
   $33 = $14;
   $34 = (($32) + ($33<<3)|0);
   $35 = +HEAPF64[$34>>3];
   $36 = $11;
   $37 = $14;
   $38 = (($36) + ($37<<3)|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $35 * $39;
   $41 = $12;
   $42 = $40 * $41;
   $43 = $42;
  }
  $13 = $43;
  $44 = $14;
  $45 = (($44) + 1)|0;
  $14 = $45;
 }
 $46 = (___DOUBLE_BITS($18)|0);
 $47 = (getTempRet0() | 0);
 $48 = $47 & 2147483647;
 $49 = ($48>>>0)>(2146435072);
 $50 = ($46>>>0)>(0);
 $51 = ($48|0)==(2146435072);
 $52 = $51 & $50;
 $53 = $49 | $52;
 if ($53) {
  $6 = 0;
  $67 = $6;
  STACKTOP = sp;return ($67|0);
 } else {
  $54 = $13;
  $55 = (+Math_floor((+$54)));
  $56 = $55 + 1.0;
  $13 = $56;
  $57 = $13;
  $58 = (+Math_sqrt((+$57)));
  $59 = 5.0 * $58;
  $60 = (+Math_floor((+$59)));
  $61 = $60 + 1.0;
  $62 = $13;
  $63 = $62 + $61;
  $13 = $63;
  $64 = $13;
  $65 = (~~(($64)));
  $66 = (($65) + 1)|0;
  $6 = $66;
  $67 = $6;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAPF64[$2>>3] = $3;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 setTempRet0(($9) | 0);
 STACKTOP = sp;return ($6|0);
}
function _AT_get_DSB_distribution($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0;
 var $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0;
 var $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $32 = $14;
 $33 = (_calloc($32,8)|0);
 $28 = $33;
 $29 = 0;
 while(1) {
  $34 = $29;
  $35 = $14;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $15;
  $38 = $29;
  $39 = (($37) + ($38<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $18;
  $42 = $29;
  $43 = (($41) + ($42<<3)|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $40 * $44;
  $46 = $19;
  $47 = $45 * $46;
  $48 = $28;
  $49 = $29;
  $50 = (($48) + ($49<<3)|0);
  HEAPF64[$50>>3] = $47;
  $51 = $29;
  $52 = (($51) + 1)|0;
  $29 = $52;
 }
 $53 = $23;
 HEAPF64[$53>>3] = 0.0;
 $54 = $24;
 HEAPF64[$54>>3] = 0.0;
 $55 = $25;
 HEAPF64[$55>>3] = 0.0;
 $56 = $26;
 HEAPF64[$56>>3] = 0.0;
 $57 = $27;
 HEAPF64[$57>>3] = 0.0;
 $30 = 0;
 while(1) {
  $58 = $30;
  $59 = $21;
  $60 = ($58|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = $22;
  $62 = $30;
  $63 = (($61) + ($62<<3)|0);
  HEAPF64[$63>>3] = 0.0;
  $31 = 0;
  while(1) {
   $64 = $31;
   $65 = $14;
   $66 = ($64|0)<($65|0);
   if (!($66)) {
    break;
   }
   $67 = $18;
   $68 = $31;
   $69 = (($67) + ($68<<3)|0);
   $70 = +HEAPF64[$69>>3];
   $71 = (___DOUBLE_BITS($70)|0);
   $72 = (getTempRet0() | 0);
   $73 = $72 & 2147483647;
   $74 = ($73>>>0)>(2146435072);
   $75 = ($71>>>0)>(0);
   $76 = ($73|0)==(2146435072);
   $77 = $76 & $75;
   $78 = $74 | $77;
   if ($78) {
    label = 9;
    break;
   }
   $82 = $28;
   $83 = $31;
   $84 = (($82) + ($83<<3)|0);
   $85 = +HEAPF64[$84>>3];
   $86 = $85 > 0.0;
   $87 = $30;
   if ($86) {
    $88 = $28;
    $89 = $31;
    $90 = (($88) + ($89<<3)|0);
    $91 = +HEAPF64[$90>>3];
    $92 = (+_gsl_ran_poisson_pdf($87,$91));
    $93 = $17;
    $94 = $31;
    $95 = (($93) + ($94<<3)|0);
    $96 = +HEAPF64[$95>>3];
    $97 = $92 * $96;
    $98 = $16;
    $99 = $31;
    $100 = (($98) + ($99<<3)|0);
    $101 = +HEAPF64[$100>>3];
    $102 = $97 * $101;
    $103 = $22;
    $104 = $30;
    $105 = (($103) + ($104<<3)|0);
    $106 = +HEAPF64[$105>>3];
    $107 = $106 + $102;
    HEAPF64[$105>>3] = $107;
   } else {
    $108 = ($87|0)==(0);
    if ($108) {
     $109 = $17;
     $110 = $31;
     $111 = (($109) + ($110<<3)|0);
     $112 = +HEAPF64[$111>>3];
     $113 = $16;
     $114 = $31;
     $115 = (($113) + ($114<<3)|0);
     $116 = +HEAPF64[$115>>3];
     $117 = $112 * $116;
     $118 = $22;
     $119 = $30;
     $120 = (($118) + ($119<<3)|0);
     $121 = +HEAPF64[$120>>3];
     $122 = $121 + $117;
     HEAPF64[$120>>3] = $122;
    }
   }
   $123 = $31;
   $124 = (($123) + 1)|0;
   $31 = $124;
  }
  if ((label|0) == 9) {
   label = 0;
   $79 = $22;
   $80 = $30;
   $81 = (($79) + ($80<<3)|0);
   HEAPF64[$81>>3] = nan;
  }
  $125 = $22;
  $126 = $30;
  $127 = (($125) + ($126<<3)|0);
  $128 = +HEAPF64[$127>>3];
  $129 = (___DOUBLE_BITS($128)|0);
  $130 = (getTempRet0() | 0);
  $131 = $130 & 2147483647;
  $132 = ($131>>>0)>(2146435072);
  $133 = ($129>>>0)>(0);
  $134 = ($131|0)==(2146435072);
  $135 = $134 & $133;
  $136 = $132 | $135;
  if (!($136)) {
   $137 = $22;
   $138 = $30;
   $139 = (($137) + ($138<<3)|0);
   $140 = +HEAPF64[$139>>3];
   $141 = $23;
   $142 = +HEAPF64[$141>>3];
   $143 = $142 + $140;
   HEAPF64[$141>>3] = $143;
   $144 = $30;
   $145 = (+($144|0));
   $146 = $22;
   $147 = $30;
   $148 = (($146) + ($147<<3)|0);
   $149 = +HEAPF64[$148>>3];
   $150 = $145 * $149;
   $151 = $24;
   $152 = +HEAPF64[$151>>3];
   $153 = $152 + $150;
   HEAPF64[$151>>3] = $153;
   $154 = $30;
   $155 = ($154|0)==(1);
   if ($155) {
    $156 = $22;
    $157 = $30;
    $158 = (($156) + ($157<<3)|0);
    $159 = +HEAPF64[$158>>3];
    $160 = $25;
    $161 = +HEAPF64[$160>>3];
    $162 = $161 + $159;
    HEAPF64[$160>>3] = $162;
   }
   $163 = $30;
   $164 = ($163|0)>(1);
   if ($164) {
    $165 = $22;
    $166 = $30;
    $167 = (($165) + ($166<<3)|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $26;
    $170 = +HEAPF64[$169>>3];
    $171 = $170 + $168;
    HEAPF64[$169>>3] = $171;
    $172 = $22;
    $173 = $30;
    $174 = (($172) + ($173<<3)|0);
    $175 = +HEAPF64[$174>>3];
    $176 = $30;
    $177 = (+($176|0));
    $178 = $175 * $177;
    $179 = $27;
    $180 = +HEAPF64[$179>>3];
    $181 = $180 + $178;
    HEAPF64[$179>>3] = $181;
   }
  }
  $182 = $30;
  $183 = (($182) + 1)|0;
  $30 = $183;
 }
 $184 = $20;
 $185 = (+($184|0));
 $186 = $24;
 $187 = +HEAPF64[$186>>3];
 $188 = $187 * $185;
 HEAPF64[$186>>3] = $188;
 $189 = $20;
 $190 = (+($189|0));
 $191 = $25;
 $192 = +HEAPF64[$191>>3];
 $193 = $192 * $190;
 HEAPF64[$191>>3] = $193;
 $194 = $20;
 $195 = (+($194|0));
 $196 = $26;
 $197 = +HEAPF64[$196>>3];
 $198 = $197 * $195;
 HEAPF64[$196>>3] = $198;
 $199 = $20;
 $200 = (+($199|0));
 $201 = $26;
 $202 = +HEAPF64[$201>>3];
 $203 = $200 / $202;
 $204 = $27;
 $205 = +HEAPF64[$204>>3];
 $206 = $205 * $203;
 HEAPF64[$204>>3] = $206;
 STACKTOP = sp;return;
}
function _AT_translate_dose_into_DSB_distribution($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $70 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $30 = $7&1;
 $20 = $30;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $31 = $13;
 $32 = $14;
 $33 = $15;
 $34 = $16;
 $35 = $17;
 $36 = $18;
 $37 = (_AT_n_bins_for_DSB_distribution($31,$32,$33,$34,$35,$36)|0);
 $26 = $37;
 $38 = $26;
 $39 = (_calloc($38,8)|0);
 $27 = $39;
 $40 = $13;
 $41 = $14;
 $42 = $15;
 $43 = $16;
 $44 = $17;
 $45 = $18;
 $46 = $19;
 $47 = $26;
 $48 = $27;
 $49 = $21;
 $50 = $22;
 $51 = $23;
 $52 = $24;
 $53 = $25;
 _AT_get_DSB_distribution($40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53);
 $28 = 0;
 $54 = $20;
 $55 = $54&1;
 if (!($55)) {
  STACKTOP = sp;return;
 }
 $56 = (_fopen(78109,77823)|0);
 $28 = $56;
 $57 = $28;
 $58 = ($57|0)==(0|0);
 if ($58) {
  STACKTOP = sp;return;
 }
 $59 = $28;
 (_fprintf($59,78126,$vararg_buffer)|0);
 $29 = 0;
 while(1) {
  $60 = $29;
  $61 = $26;
  $62 = ($60|0)<($61|0);
  $63 = $28;
  if (!($62)) {
   break;
  }
  $64 = $29;
  $65 = $27;
  $66 = $29;
  $67 = (($65) + ($66<<3)|0);
  $68 = +HEAPF64[$67>>3];
  HEAP32[$vararg_buffer1>>2] = $64;
  $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
  HEAPF64[$vararg_ptr3>>3] = $68;
  (_fprintf($63,78141,$vararg_buffer1)|0);
  $69 = $29;
  $70 = (($69) + 1)|0;
  $29 = $70;
 }
 (_fclose($63)|0);
 STACKTOP = sp;return;
}
function _gsl_block_alloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(8)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _gsl_error(78150,82978,30,8);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = $0 << 3;
 $4 = (_malloc($3)|0);
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 $7 = ($0|0)!=(0);
 $or$cond = $7 & $6;
 if ($or$cond) {
  _free($1);
  _gsl_error(78192,82978,40,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$1>>2] = $0;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_block_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 _free($0);
 return;
}
function _gsl_blas_ddot($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (+_cblas_ddot($3,$7,$9,$11,$13));
  HEAPF64[$2>>3] = $14;
  $$0 = 0;
  return ($$0|0);
 } else {
  _gsl_error(78232,78247,107,19);
  $$0 = 19;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_blas_dnrm2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (+_cblas_dnrm2($1,$3,$5));
 return (+$6);
}
function _gsl_blas_dasum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (+_cblas_dasum($1,$3,$5));
 return (+$6);
}
function _gsl_blas_idamax($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_cblas_idamax($1,$3,$5)|0);
 return ($6|0);
}
function _gsl_blas_dcopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($1)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($1)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  _cblas_dcopy($2,$6,$8,$10,$12);
  $$0 = 0;
  return ($$0|0);
 } else {
  _gsl_error(78232,78247,349,19);
  $$0 = 19;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_blas_daxpy($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = ((($1)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($2)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($2)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  _cblas_daxpy($3,$0,$7,$9,$11,$13);
  $$0 = 0;
  return ($$0|0);
 } else {
  _gsl_error(78232,78247,413,19);
  $$0 = 19;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_blas_dscal($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _cblas_dscal($2,$0,$4,$6);
 return;
}
function _gsl_blas_dgemv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($0|0) {
 case 111:  {
  $9 = HEAP32[$3>>2]|0;
  $10 = ($8|0)==($9|0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   $12 = ($6|0)==($11|0);
   if ($12) {
    label = 6;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  break;
 }
 case 112:  {
  $13 = HEAP32[$3>>2]|0;
  $14 = ($6|0)==($13|0);
  if ($14) {
   $15 = HEAP32[$5>>2]|0;
   $16 = ($8|0)==($15|0);
   if ($16) {
    label = 6;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  break;
 }
 default: {
  label = 7;
 }
 }
 if ((label|0) == 6) {
  $17 = ((($2)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($2)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($3)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($3)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($5)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($5)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  _cblas_dgemv(101,$0,$6,$8,$1,$18,$20,$22,$24,$4,$26,$28);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 7) {
  _gsl_error(78232,78247,636,19);
  $$0 = 19;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_blas_dtrsv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  _gsl_error(79330,78247,915,20);
  $$0 = 20;
  return ($$0|0);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = ($5|0)==($9|0);
 if ($10) {
  $11 = ((($3)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($3)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($4)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($4)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  _cblas_dtrsv(101,$0,$1,$2,$5,$12,$14,$16,$18);
  $$0 = 0;
  return ($$0|0);
 } else {
  _gsl_error(78232,78247,919,19);
  $$0 = 19;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_complex_arctan($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0.0, $$0 = 0.0, $$sroa$0$1 = 0.0, $$sroa$8$0$$sroa_idx23 = 0, $$sroa$8$1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 == 0.0;
 do {
  if ($5) {
   $6 = (+Math_atan((+$2)));
   $$sroa$0$1 = $6;$$sroa$8$1 = 0.0;
  } else {
   $7 = (+_hypot($2,$4));
   $8 = $4 * 2.0;
   $9 = $7 * $7;
   $10 = $9 + 1.0;
   $11 = $8 / $10;
   $12 = (+Math_abs((+$11)));
   $13 = $12 < 0.10000000000000001;
   if ($13) {
    $14 = (+_log1p($11));
    $15 = - $11;
    $16 = (+_log1p($15));
    $17 = $14 - $16;
    $18 = $17 * 0.25;
    $$0 = $18;
   } else {
    $19 = $4 + 1.0;
    $20 = (+_hypot($2,$19));
    $21 = $4 + -1.0;
    $22 = (+_hypot($2,$21));
    $23 = $20 / $22;
    $24 = (+Math_log((+$23)));
    $25 = $24 * 0.5;
    $$0 = $25;
   }
   $26 = $2 == 0.0;
   if (!($26)) {
    $29 = $2 * 2.0;
    $30 = $7 + 1.0;
    $31 = 1.0 - $7;
    $32 = $30 * $31;
    $33 = (+Math_atan2((+$29),(+$32)));
    $34 = $33 * 0.5;
    $$sroa$0$1 = $34;$$sroa$8$1 = $$0;
    break;
   }
   $27 = $4 > 1.0;
   if ($27) {
    $$sroa$0$1 = 1.5707963267948966;$$sroa$8$1 = $$0;
   } else {
    $28 = $4 < -1.0;
    $$ = $28 ? -1.5707963267948966 : 0.0;
    $$sroa$0$1 = $$;$$sroa$8$1 = $$0;
   }
  }
 } while(0);
 HEAPF64[$0>>3] = $$sroa$0$1;
 $$sroa$8$0$$sroa_idx23 = ((($0)) + 8|0);
 HEAPF64[$$sroa$8$0$$sroa_idx23>>3] = $$sroa$8$1;
 return;
}
function _gsl_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[322953]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _gsl_stream_printf(78254,$1,$2,$0);
  $6 = HEAP32[16932]|0;
  (_fflush($6)|0);
  $7 = HEAP32[16931]|0;
  (_fwrite(78260,35,1,$7)|0);
  (_fflush($7)|0);
  _abort();
  // unreachable;
 } else {
  return;
 }
}
function _gsl_set_error_handler_off() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[322953]|0;
 HEAP32[322953] = 57;
 return ($0|0);
}
function _no_error_handler($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gsl_stream_printf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = HEAP32[322954]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[16931]|0;
  HEAP32[322954] = $6;
  $7 = $6;
  $8 = $7;
 } else {
  $8 = $4;
 }
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 (_fprintf($8,78296,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _gsl_integration_qag($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i$i = 0.0, $$0$lcssa$i$i$i = 0, $$0104$i$i$i = 0, $$0119$i = 0.0, $$0120$i = 0.0, $$0121$i = 0, $$0122$i = 0, $$0126$i = 0, $$0151$i$i = 0, $$017 = 0, $$02$i$i = 0.0, $$089$i$i$i = 0, $$090$i$i$i = 0, $$090$in$lcssa$i$i$i = 0, $$090$in93$i$i$i = 0, $$090$in93$i$i$i$phi = 0, $$09092$i$i$i = 0;
 var $$09094$i$i$i = 0, $$091$i$i$i = 0, $$091$in$lcssa$i$i$i = 0, $$091$in98$i$i$i = 0, $$091$in98$i$i$i$phi = 0, $$09197$i$i$i = 0, $$09199$i$i$i = 0, $$1$i = 0, $$1127$i = 0, $$2$i = 0, $$2125$i = 0, $$2128$i = 0, $$32 = 0.0, $$33 = 0.0, $$34 = 0.0, $$35 = 0.0, $$36 = 0.0, $$37 = 0.0, $$idx$val$i = 0, $$idx137$val$i = 0;
 var $$not$i = 0, $$old2$i = 0, $$pre$i = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $brmerge$i = 0, $exitcond$i$i = 0, $not$or$cond133$i = 0, $or$cond$i = 0;
 var $or$cond129$i = 0, $or$cond131$i = 0, $or$cond135$i = 0, $or$cond3$i = 0, $or$cond6$i = 0, $or$cond9$i = 0, $spec$select = 0, $spec$select$i = 0, $spec$select136$i = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = sp + 88|0;
 $11 = sp + 80|0;
 $12 = sp + 72|0;
 $13 = sp + 64|0;
 $14 = sp + 56|0;
 $15 = sp + 48|0;
 $16 = sp + 40|0;
 $17 = sp + 32|0;
 $18 = sp + 24|0;
 $19 = sp + 16|0;
 $20 = sp + 8|0;
 $21 = sp;
 $22 = ($6|0)<(6);
 $spec$select = $22 ? $6 : 6;
 $23 = ($spec$select|0)>(1);
 $trunc = $23 ? $spec$select : 1;
 $trunc$clear = $trunc & 2147483647;
 switch ($trunc$clear|0) {
 case 1:  {
  $$0 = 58;
  break;
 }
 case 2:  {
  $$0 = 59;
  break;
 }
 case 3:  {
  $$0 = 60;
  break;
 }
 case 4:  {
  $$0 = 61;
  break;
 }
 case 5:  {
  $$0 = 62;
  break;
 }
 case 6:  {
  $$0 = 63;
  break;
 }
 default: {
  _gsl_error(78316,78367,82,4);
  $$017 = 4;
  STACKTOP = sp;return ($$017|0);
 }
 }
 $24 = ((($7)) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($7)) + 8|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($7)) + 12|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($7)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 HEAPF64[$28>>3] = $1;
 $29 = ((($7)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 HEAPF64[$30>>3] = $2;
 $31 = ((($7)) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 HEAPF64[$32>>3] = 0.0;
 $33 = ((($7)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 HEAPF64[$34>>3] = 0.0;
 $35 = ((($7)) + 36|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$36>>2] = 0;
 $37 = ((($7)) + 40|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$38>>2] = 0;
 $39 = ((($7)) + 16|0);
 HEAP32[$39>>2] = 0;
 HEAPF64[$8>>3] = 0.0;
 HEAPF64[$9>>3] = 0.0;
 $40 = HEAP32[$7>>2]|0;
 $41 = ($40>>>0)<($5>>>0);
 L10: do {
  if ($41) {
   _gsl_error(78532,78367,119,4);
   $$0$i = 4;
  } else {
   $42 = !($3 <= 0.0);
   if (!($42)) {
    $43 = $4 < 1.1102230246251565E-14;
    $44 = $4 < 4.9999999999999999E-29;
    $or$cond$i = $43 | $44;
    if ($or$cond$i) {
     _gsl_error(78583,78367,125,13);
     $$0$i = 13;
     break;
    }
   }
   FUNCTION_TABLE_viddiiii[$$0 & 63]($0,$1,$2,$10,$11,$12,$13);
   $45 = +HEAPF64[$10>>3];
   $46 = +HEAPF64[$11>>3];
   HEAP32[$24>>2] = 1;
   $47 = HEAP32[$31>>2]|0;
   HEAPF64[$47>>3] = $45;
   $48 = HEAP32[$33>>2]|0;
   HEAPF64[$48>>3] = $46;
   $49 = +HEAPF64[$10>>3];
   $50 = (+Math_abs((+$49)));
   $51 = $50 * $4;
   $52 = $51 < $3;
   $53 = $52 ? $3 : $51;
   $54 = +HEAPF64[$12>>3];
   $55 = $54 * 1.1102230246251565E-14;
   $56 = (+_gsl_coerce_double($55));
   $57 = +HEAPF64[$11>>3];
   $58 = $57 <= $56;
   $59 = $57 > $53;
   $or$cond129$i = $58 & $59;
   if ($or$cond129$i) {
    $60 = +HEAPF64[$10>>3];
    HEAPF64[$8>>3] = $60;
    HEAPF64[$9>>3] = $57;
    _gsl_error(78373,78367,148,18);
    $$0$i = 18;
    break;
   }
   $61 = !($57 <= $53);
   if ($61) {
    $$old2$i = $57 == 0.0;
    if ($$old2$i) {
     label = 18;
    }
   } else {
    $62 = +HEAPF64[$13>>3];
    $63 = $57 != $62;
    $64 = $57 == 0.0;
    $or$cond3$i = $64 | $63;
    if ($or$cond3$i) {
     label = 18;
    }
   }
   if ((label|0) == 18) {
    $65 = +HEAPF64[$10>>3];
    HEAPF64[$8>>3] = $65;
    HEAPF64[$9>>3] = $57;
    $$0$i = 0;
    break;
   }
   $66 = ($5|0)==(1);
   $67 = +HEAPF64[$10>>3];
   if ($66) {
    HEAPF64[$8>>3] = $67;
    HEAPF64[$9>>3] = $57;
    _gsl_error(78706,78367,162,11);
    $$0$i = 11;
    break;
   }
   $$pre$i = HEAP32[$26>>2]|0;
   $$0119$i = $67;$$0120$i = $57;$$0121$i = 1;$$0122$i = 0;$$0126$i = 0;$73 = $$pre$i;
   while(1) {
    HEAPF64[$14>>3] = 0.0;
    HEAPF64[$15>>3] = 0.0;
    HEAPF64[$16>>3] = 0.0;
    HEAPF64[$17>>3] = 0.0;
    $68 = HEAP32[$27>>2]|0;
    $69 = HEAP32[$29>>2]|0;
    $70 = HEAP32[$31>>2]|0;
    $71 = HEAP32[$33>>2]|0;
    $72 = (($68) + ($73<<3)|0);
    $74 = +HEAPF64[$72>>3];
    $75 = (($69) + ($73<<3)|0);
    $76 = +HEAPF64[$75>>3];
    $77 = (($70) + ($73<<3)|0);
    $78 = +HEAPF64[$77>>3];
    $79 = (($71) + ($73<<3)|0);
    $80 = +HEAPF64[$79>>3];
    $81 = $74 + $76;
    $82 = $81 * 0.5;
    FUNCTION_TABLE_viddiiii[$$0 & 63]($0,$74,$82,$14,$16,$20,$18);
    FUNCTION_TABLE_viddiiii[$$0 & 63]($0,$82,$76,$15,$17,$21,$19);
    $83 = +HEAPF64[$14>>3];
    $84 = +HEAPF64[$15>>3];
    $85 = $83 + $84;
    $86 = +HEAPF64[$16>>3];
    $87 = +HEAPF64[$17>>3];
    $88 = $86 + $87;
    $89 = $88 - $80;
    $90 = $$0120$i + $89;
    $91 = $85 - $78;
    $92 = $$0119$i + $91;
    $93 = +HEAPF64[$18>>3];
    $94 = $93 != $86;
    $95 = +HEAPF64[$19>>3];
    $96 = $95 != $87;
    $or$cond131$i = $94 & $96;
    if ($or$cond131$i) {
     $97 = $78 - $85;
     $98 = (+Math_abs((+$97)));
     $99 = (+Math_abs((+$85)));
     $100 = $99 * 1.0000000000000001E-5;
     $101 = $98 <= $100;
     $102 = $80 * 0.98999999999999999;
     $103 = $88 >= $102;
     $not$or$cond133$i = $103 & $101;
     $104 = $not$or$cond133$i&1;
     $$1$i = (($$0122$i) + ($104))|0;
     $105 = ($$0121$i>>>0)>(9);
     $106 = $88 > $80;
     $or$cond135$i = $105 & $106;
     $107 = $or$cond135$i&1;
     $$1127$i = (($$0126$i) + ($107))|0;
     $$2$i = $$1$i;$$2128$i = $$1127$i;
    } else {
     $$2$i = $$0122$i;$$2128$i = $$0126$i;
    }
    $108 = (+Math_abs((+$92)));
    $109 = $108 * $4;
    $110 = $109 < $3;
    $111 = $110 ? $3 : $109;
    $112 = $90 > $111;
    if ($112) {
     $113 = ($$2$i|0)>(5);
     $114 = ($$2128$i|0)>(19);
     $or$cond6$i = $114 | $113;
     $spec$select$i = $or$cond6$i ? 2 : 0;
     $115 = (+Math_abs((+$82)));
     $116 = $115 + 2.2250738585072014E-305;
     $117 = $116 * 1.0000000000000222;
     $118 = (+Math_abs((+$74)));
     $119 = !($118 <= $117);
     $120 = (+Math_abs((+$76)));
     $121 = !($120 <= $117);
     $122 = $119 | $121;
     $spec$select136$i = $122 ? $spec$select$i : 3;
     $$2125$i = $spec$select136$i;
    } else {
     $$2125$i = 0;
    }
    $123 = HEAP32[$27>>2]|0;
    $124 = HEAP32[$29>>2]|0;
    $125 = HEAP32[$31>>2]|0;
    $126 = HEAP32[$33>>2]|0;
    $127 = HEAP32[$37>>2]|0;
    $128 = HEAP32[$26>>2]|0;
    $129 = HEAP32[$24>>2]|0;
    $130 = (($127) + ($128<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + 1)|0;
    $133 = $87 > $86;
    $$ = $133 ? $123 : $124;
    $$32 = $133 ? $84 : $83;
    $$33 = $133 ? $87 : $86;
    $$34 = $133 ? $74 : $82;
    $$35 = $133 ? $82 : $76;
    $$36 = $133 ? $83 : $84;
    $$37 = $133 ? $86 : $87;
    $134 = (($$) + ($128<<3)|0);
    HEAPF64[$134>>3] = $82;
    $135 = (($125) + ($128<<3)|0);
    HEAPF64[$135>>3] = $$32;
    $136 = (($126) + ($128<<3)|0);
    HEAPF64[$136>>3] = $$33;
    HEAP32[$130>>2] = $132;
    $137 = (($123) + ($129<<3)|0);
    HEAPF64[$137>>3] = $$34;
    $138 = (($124) + ($129<<3)|0);
    HEAPF64[$138>>3] = $$35;
    $139 = (($125) + ($129<<3)|0);
    HEAPF64[$139>>3] = $$36;
    $140 = (($126) + ($129<<3)|0);
    HEAPF64[$140>>3] = $$37;
    $141 = (($127) + ($129<<2)|0);
    HEAP32[$141>>2] = $132;
    $142 = HEAP32[$24>>2]|0;
    $143 = (($142) + 1)|0;
    HEAP32[$24>>2] = $143;
    $144 = HEAP32[$39>>2]|0;
    $145 = ($132>>>0)>($144>>>0);
    if ($145) {
     HEAP32[$39>>2] = $132;
    }
    $146 = HEAP32[$7>>2]|0;
    $147 = HEAP32[$35>>2]|0;
    $148 = HEAP32[$25>>2]|0;
    $149 = (($147) + ($148<<2)|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ($142>>>0)<(2);
    if ($151) {
     HEAP32[$147>>2] = 0;
     $152 = ((($147)) + 4|0);
     HEAP32[$152>>2] = 1;
     HEAP32[$26>>2] = $150;
     $202 = $150;
    } else {
     $153 = (($126) + ($150<<3)|0);
     $154 = +HEAPF64[$153>>3];
     $155 = ($148|0)==(0);
     L43: do {
      if ($155) {
       $$0$lcssa$i$i$i = 0;
      } else {
       $$0104$i$i$i = $148;
       while(1) {
        $156 = (($$0104$i$i$i) + -1)|0;
        $157 = (($147) + ($156<<2)|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = (($126) + ($158<<3)|0);
        $160 = +HEAPF64[$159>>3];
        $161 = $154 > $160;
        if (!($161)) {
         $$0$lcssa$i$i$i = $$0104$i$i$i;
         break L43;
        }
        $162 = (($147) + ($$0104$i$i$i<<2)|0);
        HEAP32[$162>>2] = $158;
        $163 = ($156|0)==(0);
        if ($163) {
         $$0$lcssa$i$i$i = 0;
         break;
        } else {
         $$0104$i$i$i = $156;
        }
       }
      }
     } while(0);
     $164 = $146 >>> 1;
     $165 = (($164) + 2)|0;
     $166 = ($142>>>0)<($165>>>0);
     $167 = (1 - ($142))|0;
     $168 = (($167) + ($146))|0;
     $$089$i$i$i = $166 ? $142 : $168;
     $$09197$i$i$i = (($$0$lcssa$i$i$i) + 1)|0;
     $169 = ($$09197$i$i$i|0)<($$089$i$i$i|0);
     L49: do {
      if ($169) {
       $$091$in98$i$i$i = $$0$lcssa$i$i$i;$$09199$i$i$i = $$09197$i$i$i;
       while(1) {
        $170 = (($147) + ($$09199$i$i$i<<2)|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = (($126) + ($171<<3)|0);
        $173 = +HEAPF64[$172>>3];
        $174 = $154 < $173;
        if (!($174)) {
         $$091$in$lcssa$i$i$i = $$091$in98$i$i$i;
         break L49;
        }
        $175 = (($147) + ($$091$in98$i$i$i<<2)|0);
        HEAP32[$175>>2] = $171;
        $$091$i$i$i = (($$09199$i$i$i) + 1)|0;
        $176 = ($$091$i$i$i|0)<($$089$i$i$i|0);
        if ($176) {
         $$091$in98$i$i$i$phi = $$09199$i$i$i;$$09199$i$i$i = $$091$i$i$i;$$091$in98$i$i$i = $$091$in98$i$i$i$phi;
        } else {
         $$091$in$lcssa$i$i$i = $$09199$i$i$i;
         break;
        }
       }
      } else {
       $$091$in$lcssa$i$i$i = $$0$lcssa$i$i$i;
      }
     } while(0);
     $177 = (($147) + ($$091$in$lcssa$i$i$i<<2)|0);
     HEAP32[$177>>2] = $150;
     $178 = (($126) + ($142<<3)|0);
     $179 = +HEAPF64[$178>>3];
     $$09092$i$i$i = (($$089$i$i$i) + -1)|0;
     $180 = (($$091$in$lcssa$i$i$i) + -1)|0;
     $181 = ($$09092$i$i$i|0)>($180|0);
     L55: do {
      if ($181) {
       $$090$in93$i$i$i = $$089$i$i$i;$$09094$i$i$i = $$09092$i$i$i;
       while(1) {
        $182 = (($147) + ($$09094$i$i$i<<2)|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (($126) + ($183<<3)|0);
        $185 = +HEAPF64[$184>>3];
        $186 = !($179 >= $185);
        if ($186) {
         $$090$in$lcssa$i$i$i = $$090$in93$i$i$i;
         break L55;
        }
        $187 = (($147) + ($$090$in93$i$i$i<<2)|0);
        HEAP32[$187>>2] = $183;
        $$090$i$i$i = (($$09094$i$i$i) + -1)|0;
        $188 = ($$090$i$i$i|0)>($180|0);
        if ($188) {
         $$090$in93$i$i$i$phi = $$09094$i$i$i;$$09094$i$i$i = $$090$i$i$i;$$090$in93$i$i$i = $$090$in93$i$i$i$phi;
        } else {
         $$090$in$lcssa$i$i$i = $$09094$i$i$i;
         break;
        }
       }
      } else {
       $$090$in$lcssa$i$i$i = $$089$i$i$i;
      }
     } while(0);
     $189 = (($147) + ($$090$in$lcssa$i$i$i<<2)|0);
     HEAP32[$189>>2] = $142;
     $190 = (($147) + ($$0$lcssa$i$i$i<<2)|0);
     $191 = HEAP32[$190>>2]|0;
     HEAP32[$26>>2] = $191;
     HEAP32[$25>>2] = $$0$lcssa$i$i$i;
     $202 = $191;
    }
    $192 = (($$0121$i) + 1)|0;
    $193 = ($192>>>0)>=($5>>>0);
    $194 = ($$2125$i|0)!=(0);
    $or$cond9$i = $193 | $194;
    $$not$i = $112 ^ 1;
    $brmerge$i = $or$cond9$i | $$not$i;
    if ($brmerge$i) {
     break;
    } else {
     $$0119$i = $92;$$0120$i = $90;$$0121$i = $192;$$0122$i = $$2$i;$$0126$i = $$2128$i;$73 = $202;
    }
   }
   $$idx$val$i = HEAP32[$24>>2]|0;
   $$idx137$val$i = HEAP32[$31>>2]|0;
   $195 = ($$idx$val$i|0)==(0);
   if ($195) {
    $$0$lcssa$i$i = 0.0;
   } else {
    $$0151$i$i = 0;$$02$i$i = 0.0;
    while(1) {
     $196 = (($$idx137$val$i) + ($$0151$i$i<<3)|0);
     $197 = +HEAPF64[$196>>3];
     $198 = $$02$i$i + $197;
     $199 = (($$0151$i$i) + 1)|0;
     $exitcond$i$i = ($199|0)==($$idx$val$i|0);
     if ($exitcond$i$i) {
      $$0$lcssa$i$i = $198;
      break;
     } else {
      $$0151$i$i = $199;$$02$i$i = $198;
     }
    }
   }
   HEAPF64[$8>>3] = $$0$lcssa$i$i;
   HEAPF64[$9>>3] = $90;
   $200 = !($90 <= $111);
   if ($200) {
    switch ($$2125$i|0) {
    case 2:  {
     _gsl_error(78439,78367,248,18);
     $$0$i = 18;
     break L10;
     break;
    }
    case 3:  {
     _gsl_error(78837,78367,253,21);
     $$0$i = 21;
     break L10;
     break;
    }
    default: {
     $201 = ($192|0)==($5|0);
     if ($201) {
      _gsl_error(78493,78367,257,11);
      $$0$i = 11;
      break L10;
     } else {
      _gsl_error(78989,78367,261,5);
      $$0$i = 5;
      break L10;
     }
    }
    }
   } else {
    $$0$i = 0;
   }
  }
 } while(0);
 $$017 = $$0$i;
 STACKTOP = sp;return ($$017|0);
}
function _gsl_integration_qags($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $9 = (_qags($0,$1,$2,$3,$4,$5,$6,$7,$8,59)|0);
 return ($9|0);
}
function _qags($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$ = 0, $$0 = 0, $$0$lcssa$i = 0.0, $$0$lcssa$i$i = 0, $$0104$i$i = 0, $$0151$i = 0, $$02$i = 0.0, $$0209227$i = 0, $$0222 = 0.0, $$0223 = 0.0, $$0224 = 0.0, $$0225 = 0.0, $$0228 = 0.0, $$0231 = 0.0, $$0234 = 0.0, $$0237 = 0, $$0237$clear = 0, $$0239 = 0, $$0242 = 0, $$0245 = 0;
 var $$0246 = 0, $$0248 = 0, $$0252 = 0, $$0255 = 0, $$0258 = 0, $$0261 = 0, $$0308 = 0.0, $$0311 = 0.0, $$040$i = 0, $$089$i$i = 0, $$090$i$i = 0, $$090$in$lcssa$i$i = 0, $$090$in93$i$i = 0, $$090$in93$i$i$phi = 0, $$09092$i$i = 0, $$09094$i$i = 0, $$091$i$i = 0, $$091$in$lcssa$i$i = 0, $$091$in98$i$i = 0, $$091$in98$i$i$phi = 0;
 var $$09197$i$i = 0, $$09199$i$i = 0, $$1 = 0.0, $$1210226$i = 0, $$1226 = 0.0, $$1229 = 0.0, $$1235 = 0.0, $$1243 = 0, $$1247 = 0, $$1253 = 0, $$1256 = 0, $$1259 = 0, $$1262 = 0, $$1309 = 0.0, $$1312 = 0.0, $$2 = 0.0, $$2$i = 0, $$2211225$i = 0, $$2227 = 0.0, $$2230 = 0.0;
 var $$2233 = 0.0, $$2236 = 0.0, $$2241 = 0, $$2244 = 0, $$2254 = 0, $$2257 = 0, $$2260 = 0, $$2263 = 0, $$2310 = 0.0, $$2313 = 0.0, $$3 = 0.0, $$3212224$i = 0, $$3251 = 0, $$4 = 0, $$442 = 0.0, $$443 = 0.0, $$444 = 0.0, $$445 = 0.0, $$446 = 0.0, $$447 = 0.0;
 var $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$idx$val = 0, $$idx277$val = 0, $$idx278$val = 0, $$idx279$val = 0, $$not$i = 0, $$old2 = 0, $$pre = 0, $$pre377 = 0, $$pre378 = 0, $$sink441 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0;
 var $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0;
 var $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0;
 var $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0.0;
 var $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0;
 var $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0.0;
 var $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0;
 var $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $brmerge$i = 0, $brmerge$not$i = 0, $exitcond$i = 0, $exitcond$i281 = 0, $exitcond240$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond12 = 0, $or$cond15 = 0, $or$cond215$i = 0, $or$cond264 = 0, $or$cond266 = 0, $or$cond269 = 0, $or$cond271 = 0, $or$cond274 = 0, $or$cond3 = 0;
 var $or$cond315 = 0, $or$cond317 = 0, $or$cond6 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select267 = 0, $spec$select268 = 0.0, $spec$select272 = 0, $spec$select273 = 0.0, $spec$select275 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $10 = sp + 544|0;
 $11 = sp + 536|0;
 $12 = sp + 528|0;
 $13 = sp + 520|0;
 $14 = sp + 64|0;
 $15 = sp + 56|0;
 $16 = sp + 48|0;
 $17 = sp + 40|0;
 $18 = sp + 32|0;
 $19 = sp + 24|0;
 $20 = sp + 16|0;
 $21 = sp + 8|0;
 $22 = sp;
 $23 = ((($6)) + 4|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($6)) + 8|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($6)) + 12|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($6)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 HEAPF64[$27>>3] = $1;
 $28 = ((($6)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 HEAPF64[$29>>3] = $2;
 $30 = ((($6)) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 HEAPF64[$31>>3] = 0.0;
 $32 = ((($6)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 HEAPF64[$33>>3] = 0.0;
 $34 = ((($6)) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$35>>2] = 0;
 $36 = ((($6)) + 40|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$37>>2] = 0;
 $38 = ((($6)) + 16|0);
 HEAP32[$38>>2] = 0;
 HEAPF64[$7>>3] = 0.0;
 HEAPF64[$8>>3] = 0.0;
 $39 = HEAP32[$6>>2]|0;
 $40 = ($39>>>0)<($5>>>0);
 if ($40) {
  _gsl_error(78532,78576,232,4);
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = !($3 <= 0.0);
 if (!($41)) {
  $42 = $4 < 1.1102230246251565E-14;
  $43 = $4 < 4.9999999999999999E-29;
  $or$cond = $42 | $43;
  if ($or$cond) {
   _gsl_error(78583,78576,240,13);
   $$0 = 13;
   STACKTOP = sp;return ($$0|0);
  }
 }
 FUNCTION_TABLE_viddiiii[$9 & 63]($0,$1,$2,$10,$11,$12,$13);
 $44 = +HEAPF64[$10>>3];
 $45 = +HEAPF64[$11>>3];
 HEAP32[$23>>2] = 1;
 $46 = HEAP32[$30>>2]|0;
 HEAPF64[$46>>3] = $44;
 $47 = HEAP32[$32>>2]|0;
 HEAPF64[$47>>3] = $45;
 $48 = +HEAPF64[$10>>3];
 $49 = (+Math_abs((+$48)));
 $50 = $49 * $4;
 $51 = $50 < $3;
 $52 = $51 ? $3 : $50;
 $53 = +HEAPF64[$11>>3];
 $54 = +HEAPF64[$12>>3];
 $55 = $54 * 2.2204460492503131E-14;
 $56 = $53 <= $55;
 $57 = $53 > $52;
 $or$cond264 = $56 & $57;
 if ($or$cond264) {
  HEAPF64[$7>>3] = $48;
  HEAPF64[$8>>3] = $53;
  _gsl_error(78641,78576,257,18);
  $$0 = 18;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = !($53 <= $52);
 if ($58) {
  $$old2 = $53 == 0.0;
  if ($$old2) {
   label = 11;
  }
 } else {
  $59 = +HEAPF64[$13>>3];
  $60 = $53 != $59;
  $61 = $53 == 0.0;
  $or$cond3 = $61 | $60;
  if ($or$cond3) {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  HEAPF64[$7>>3] = $48;
  HEAPF64[$8>>3] = $53;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $62 = ($5|0)==(1);
 if ($62) {
  HEAPF64[$7>>3] = $48;
  HEAPF64[$8>>3] = $53;
  _gsl_error(78706,78576,271,11);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = ((($14)) + 424|0);
 HEAP32[$63>>2] = 0;
 $64 = ((($14)) + 8|0);
 HEAPF64[$64>>3] = $48;
 HEAP32[$14>>2] = 1;
 $65 = $54 * 0.99999999999998889;
 $66 = !($49 >= $65);
 $67 = (($5) + -1)|0;
 $68 = ((($14)) + 432|0);
 $69 = ((($14)) + 448|0);
 $70 = ((($14)) + 440|0);
 $$pre = HEAP32[$25>>2]|0;
 $$0222 = $48;$$0223 = $53;$$0224 = $48;$$0225 = 1.7976931348623157E+308;$$0228 = 0.0;$$0231 = 0.0;$$0234 = 0.0;$$0239 = 0;$$0242 = 0;$$0245 = 1;$$0246 = 0;$$0248 = 0;$$0252 = 0;$$0255 = 0;$$0258 = 0;$$0261 = 0;$74 = $$pre;$79 = $46;$82 = $47;
 L25: while(1) {
  HEAPF64[$15>>3] = 0.0;
  HEAPF64[$16>>3] = 0.0;
  HEAPF64[$17>>3] = 0.0;
  HEAPF64[$18>>3] = 0.0;
  $71 = HEAP32[$26>>2]|0;
  $72 = HEAP32[$28>>2]|0;
  $73 = (($71) + ($74<<3)|0);
  $75 = +HEAPF64[$73>>3];
  $76 = (($72) + ($74<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = (($79) + ($74<<3)|0);
  $80 = +HEAPF64[$78>>3];
  $81 = (($82) + ($74<<3)|0);
  $83 = +HEAPF64[$81>>3];
  $84 = HEAP32[$36>>2]|0;
  $85 = (($84) + ($74<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 1)|0;
  $88 = $75 + $77;
  $89 = $88 * 0.5;
  $90 = (($$0245) + 1)|0;
  FUNCTION_TABLE_viddiiii[$9 & 63]($0,$75,$89,$15,$17,$21,$19);
  FUNCTION_TABLE_viddiiii[$9 & 63]($0,$89,$77,$16,$18,$22,$20);
  $91 = +HEAPF64[$15>>3];
  $92 = +HEAPF64[$16>>3];
  $93 = $91 + $92;
  $94 = +HEAPF64[$17>>3];
  $95 = +HEAPF64[$18>>3];
  $96 = $94 + $95;
  $97 = $$0223 + $96;
  $98 = $97 - $83;
  $99 = $$0222 + $93;
  $100 = $99 - $80;
  $101 = (+Math_abs((+$100)));
  $102 = $101 * $4;
  $103 = $102 < $3;
  $104 = $103 ? $3 : $102;
  $105 = +HEAPF64[$19>>3];
  $106 = $105 != $94;
  $107 = +HEAPF64[$20>>3];
  $108 = $107 != $95;
  $or$cond315 = $106 & $108;
  if ($or$cond315) {
   $109 = $80 - $93;
   $110 = (+Math_abs((+$109)));
   $111 = (+Math_abs((+$93)));
   $112 = $111 * 1.0000000000000001E-5;
   $113 = !($110 <= $112);
   $114 = $83 * 0.98999999999999999;
   $115 = !($96 >= $114);
   $or$cond317 = $113 | $115;
   do {
    if ($or$cond317) {
     $$1256 = $$0255;$$1259 = $$0258;
    } else {
     $116 = ($$0242|0)==(0);
     if ($116) {
      $117 = (($$0258) + 1)|0;
      $$1256 = $$0255;$$1259 = $117;
      break;
     } else {
      $118 = (($$0255) + 1)|0;
      $$1256 = $118;$$1259 = $$0258;
      break;
     }
    }
   } while(0);
   $119 = ($$0245>>>0)>(9);
   $120 = $96 > $83;
   $or$cond266 = $119 & $120;
   $121 = $or$cond266&1;
   $$1253 = (($$0252) + ($121))|0;
   $$2254 = $$1253;$$2257 = $$1256;$$2260 = $$1259;
  } else {
   $$2254 = $$0252;$$2257 = $$0255;$$2260 = $$0258;
  }
  $122 = (($$2257) + ($$2260))|0;
  $123 = ($122|0)>(9);
  $124 = ($$2254|0)>(19);
  $or$cond6 = $123 | $124;
  $spec$select = $or$cond6 ? 2 : $$0248;
  $125 = ($$2257|0)>(4);
  $$1247 = $125 ? 1 : $$0246;
  $126 = (+Math_abs((+$89)));
  $127 = $126 + 2.2250738585072014E-305;
  $128 = $127 * 1.0000000000000222;
  $129 = (+Math_abs((+$75)));
  $130 = !($129 <= $128);
  $131 = (+Math_abs((+$77)));
  $132 = !($131 <= $128);
  $133 = $130 | $132;
  $spec$select267 = $133 ? $spec$select : 4;
  $134 = HEAP32[$26>>2]|0;
  $135 = HEAP32[$28>>2]|0;
  $136 = HEAP32[$30>>2]|0;
  $137 = HEAP32[$32>>2]|0;
  $138 = HEAP32[$36>>2]|0;
  $139 = HEAP32[$25>>2]|0;
  $140 = HEAP32[$23>>2]|0;
  $141 = (($138) + ($139<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (($142) + 1)|0;
  $144 = $95 > $94;
  $$ = $144 ? $134 : $135;
  $$442 = $144 ? $92 : $91;
  $$443 = $144 ? $95 : $94;
  $$444 = $144 ? $75 : $89;
  $$445 = $144 ? $89 : $77;
  $$446 = $144 ? $91 : $92;
  $$447 = $144 ? $94 : $95;
  $145 = (($$) + ($139<<3)|0);
  HEAPF64[$145>>3] = $89;
  $146 = (($136) + ($139<<3)|0);
  HEAPF64[$146>>3] = $$442;
  $147 = (($137) + ($139<<3)|0);
  HEAPF64[$147>>3] = $$443;
  HEAP32[$141>>2] = $143;
  $148 = (($134) + ($140<<3)|0);
  HEAPF64[$148>>3] = $$444;
  $149 = (($135) + ($140<<3)|0);
  HEAPF64[$149>>3] = $$445;
  $150 = (($136) + ($140<<3)|0);
  HEAPF64[$150>>3] = $$446;
  $151 = (($137) + ($140<<3)|0);
  HEAPF64[$151>>3] = $$447;
  $152 = (($138) + ($140<<2)|0);
  HEAP32[$152>>2] = $143;
  $153 = HEAP32[$23>>2]|0;
  $154 = (($153) + 1)|0;
  HEAP32[$23>>2] = $154;
  $155 = HEAP32[$38>>2]|0;
  $156 = ($143>>>0)>($155>>>0);
  if ($156) {
   HEAP32[$38>>2] = $143;
  }
  $157 = HEAP32[$6>>2]|0;
  $158 = HEAP32[$34>>2]|0;
  $159 = HEAP32[$24>>2]|0;
  $160 = (($158) + ($159<<2)|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($153>>>0)<(2);
  if ($162) {
   HEAP32[$158>>2] = 0;
   $163 = ((($158)) + 4|0);
   HEAP32[$163>>2] = 1;
   HEAP32[$25>>2] = $161;
   $$idx$val = $161;
  } else {
   $164 = (($137) + ($161<<3)|0);
   $165 = +HEAPF64[$164>>3];
   $166 = ($159|0)==(0);
   L42: do {
    if ($166) {
     $$0$lcssa$i$i = 0;
    } else {
     $$0104$i$i = $159;
     while(1) {
      $167 = (($$0104$i$i) + -1)|0;
      $168 = (($158) + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (($137) + ($169<<3)|0);
      $171 = +HEAPF64[$170>>3];
      $172 = $165 > $171;
      if (!($172)) {
       $$0$lcssa$i$i = $$0104$i$i;
       break L42;
      }
      $173 = (($158) + ($$0104$i$i<<2)|0);
      HEAP32[$173>>2] = $169;
      $174 = ($167|0)==(0);
      if ($174) {
       $$0$lcssa$i$i = 0;
       break;
      } else {
       $$0104$i$i = $167;
      }
     }
    }
   } while(0);
   $175 = $157 >>> 1;
   $176 = (($175) + 2)|0;
   $177 = ($153>>>0)<($176>>>0);
   $178 = (1 - ($153))|0;
   $179 = (($178) + ($157))|0;
   $$089$i$i = $177 ? $153 : $179;
   $$09197$i$i = (($$0$lcssa$i$i) + 1)|0;
   $180 = ($$09197$i$i|0)<($$089$i$i|0);
   L48: do {
    if ($180) {
     $$091$in98$i$i = $$0$lcssa$i$i;$$09199$i$i = $$09197$i$i;
     while(1) {
      $181 = (($158) + ($$09199$i$i<<2)|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = (($137) + ($182<<3)|0);
      $184 = +HEAPF64[$183>>3];
      $185 = $165 < $184;
      if (!($185)) {
       $$091$in$lcssa$i$i = $$091$in98$i$i;
       break L48;
      }
      $186 = (($158) + ($$091$in98$i$i<<2)|0);
      HEAP32[$186>>2] = $182;
      $$091$i$i = (($$09199$i$i) + 1)|0;
      $187 = ($$091$i$i|0)<($$089$i$i|0);
      if ($187) {
       $$091$in98$i$i$phi = $$09199$i$i;$$09199$i$i = $$091$i$i;$$091$in98$i$i = $$091$in98$i$i$phi;
      } else {
       $$091$in$lcssa$i$i = $$09199$i$i;
       break;
      }
     }
    } else {
     $$091$in$lcssa$i$i = $$0$lcssa$i$i;
    }
   } while(0);
   $188 = (($158) + ($$091$in$lcssa$i$i<<2)|0);
   HEAP32[$188>>2] = $161;
   $189 = (($137) + ($153<<3)|0);
   $190 = +HEAPF64[$189>>3];
   $$09092$i$i = (($$089$i$i) + -1)|0;
   $191 = (($$091$in$lcssa$i$i) + -1)|0;
   $192 = ($$09092$i$i|0)>($191|0);
   L54: do {
    if ($192) {
     $$090$in93$i$i = $$089$i$i;$$09094$i$i = $$09092$i$i;
     while(1) {
      $193 = (($158) + ($$09094$i$i<<2)|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = (($137) + ($194<<3)|0);
      $196 = +HEAPF64[$195>>3];
      $197 = !($190 >= $196);
      if ($197) {
       $$090$in$lcssa$i$i = $$090$in93$i$i;
       break L54;
      }
      $198 = (($158) + ($$090$in93$i$i<<2)|0);
      HEAP32[$198>>2] = $194;
      $$090$i$i = (($$09094$i$i) + -1)|0;
      $199 = ($$090$i$i|0)>($191|0);
      if ($199) {
       $$090$in93$i$i$phi = $$09094$i$i;$$09094$i$i = $$090$i$i;$$090$in93$i$i = $$090$in93$i$i$phi;
      } else {
       $$090$in$lcssa$i$i = $$09094$i$i;
       break;
      }
     }
    } else {
     $$090$in$lcssa$i$i = $$089$i$i;
    }
   } while(0);
   $200 = (($158) + ($$090$in$lcssa$i$i<<2)|0);
   HEAP32[$200>>2] = $153;
   $201 = (($158) + ($$0$lcssa$i$i<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   HEAP32[$25>>2] = $202;
   HEAP32[$24>>2] = $$0$lcssa$i$i;
   $$idx$val = $202;
  }
  $203 = !($98 <= $104);
  L61: do {
   if ($203) {
    $204 = ($spec$select267|0)==(0);
    if ($204) {
     $205 = ($90>>>0)<($67>>>0);
     if ($205) {
      $206 = ($90|0)==(2);
      if ($206) {
       $207 = HEAP32[$14>>2]|0;
       $208 = (((($14)) + 8|0) + ($207<<3)|0);
       HEAPF64[$208>>3] = $100;
       $209 = (($207) + 1)|0;
       HEAP32[$14>>2] = $209;
       $$0237 = 11;$$2 = $$0224;$$2227 = $$0225;$$2230 = $104;$$2233 = $98;$$2236 = $$0234;$$2241 = $$0239;$$2244 = $$0242;$$2263 = $$0261;$$4 = 0;$397 = $$idx$val;
       break;
      }
      $210 = ($$0239|0)==(0);
      if ($210) {
       $211 = $$0231 - $83;
       $212 = HEAP32[$38>>2]|0;
       $213 = ($87>>>0)<($212>>>0);
       $214 = $211 + $96;
       $spec$select268 = $213 ? $214 : $211;
       $215 = ($$0242|0)==(0);
       if ($215) {
        $$idx277$val = HEAP32[$36>>2]|0;
        $216 = (($$idx277$val) + ($$idx$val<<2)|0);
        $217 = HEAP32[$216>>2]|0;
        $218 = ($217>>>0)<($212>>>0);
        if ($218) {
         $$0237 = 11;$$2 = $$0224;$$2227 = $$0225;$$2230 = $$0228;$$2233 = $spec$select268;$$2236 = $$0234;$$2241 = 0;$$2244 = 0;$$2263 = $$0261;$$4 = 0;$397 = $$idx$val;
         break;
        }
        HEAP32[$24>>2] = 1;
        $$1243 = 1;
       } else {
        $$1243 = $$0242;
       }
       $219 = ($$1247|0)==(0);
       $220 = $spec$select268 > $$0228;
       $or$cond269 = $219 & $220;
       if ($or$cond269) {
        $221 = HEAP32[$24>>2]|0;
        $222 = HEAP32[$36>>2]|0;
        $223 = HEAP32[$6>>2]|0;
        $224 = HEAP32[$23>>2]|0;
        $225 = (($224) + -1)|0;
        $226 = $223 >>> 1;
        $227 = (($226) + 1)|0;
        $228 = ($225>>>0)>($227>>>0);
        $229 = (($223) + 2)|0;
        $230 = (($229) - ($224))|0;
        $$040$i = $228 ? $230 : $225;
        $231 = ($221|0)>($$040$i|0);
        if ($231) {
         $398 = $$idx$val;
        } else {
         $233 = $221;
         while(1) {
          $232 = (($158) + ($233<<2)|0);
          $234 = HEAP32[$232>>2]|0;
          HEAP32[$25>>2] = $234;
          $235 = (($222) + ($234<<2)|0);
          $236 = HEAP32[$235>>2]|0;
          $237 = ($236>>>0)<($212>>>0);
          if ($237) {
           $$0237 = 11;$$2 = $$0224;$$2227 = $$0225;$$2230 = $$0228;$$2233 = $spec$select268;$$2236 = $$0234;$$2241 = 0;$$2244 = $$1243;$$2263 = $$0261;$$4 = 0;$397 = $234;
           break L61;
          }
          $238 = (($233) + 1)|0;
          HEAP32[$24>>2] = $238;
          $239 = ($233|0)<($$040$i|0);
          if ($239) {
           $233 = $238;
          } else {
           $398 = $234;
           break;
          }
         }
        }
       } else {
        $398 = $$idx$val;
       }
       $240 = HEAP32[$14>>2]|0;
       $241 = (((($14)) + 8|0) + ($240<<3)|0);
       HEAPF64[$241>>3] = $100;
       $242 = (($240) + 1)|0;
       HEAP32[$14>>2] = $242;
       $243 = $240 >>> 1;
       $244 = HEAP32[$63>>2]|0;
       $245 = ($240>>>0)<(2);
       L80: do {
        if ($245) {
         $246 = $101 * 1.1102230246251565E-15;
         $247 = $246 < 1.7976931348623157E+308;
         $248 = $247 ? 1.7976931348623157E+308 : $246;
         $$2313 = $248;$$3 = $100;$363 = $242;
        } else {
         $249 = (($240) + 2)|0;
         $250 = (((($14)) + 8|0) + ($249<<3)|0);
         HEAPF64[$250>>3] = $100;
         HEAPF64[$241>>3] = 1.7976931348623157E+308;
         $251 = ($243|0)==(0);
         L83: do {
          if ($251) {
           $$2$i = $240;$$2310 = $100;
          } else {
           $$0209227$i = 0;$$0308 = $100;$$0311 = 1.7976931348623157E+308;
           while(1) {
            $252 = $$0209227$i << 1;
            $253 = (($240) - ($252))|0;
            $254 = (($253) + 2)|0;
            $255 = (((($14)) + 8|0) + ($254<<3)|0);
            $256 = +HEAPF64[$255>>3];
            $257 = (($253) + -2)|0;
            $258 = (((($14)) + 8|0) + ($257<<3)|0);
            $259 = +HEAPF64[$258>>3];
            $260 = (($253) + -1)|0;
            $261 = (((($14)) + 8|0) + ($260<<3)|0);
            $262 = +HEAPF64[$261>>3];
            $263 = (+Math_abs((+$262)));
            $264 = $256 - $262;
            $265 = (+Math_abs((+$264)));
            $266 = (+Math_abs((+$256)));
            $267 = $266 > $263;
            $268 = $267 ? $266 : $263;
            $269 = $268 * 2.2204460492503131E-16;
            $270 = $262 - $259;
            $271 = (+Math_abs((+$270)));
            $272 = (+Math_abs((+$259)));
            $273 = $263 > $272;
            $274 = $273 ? $263 : $272;
            $275 = $274 * 2.2204460492503131E-16;
            $276 = $265 <= $269;
            $$not$i = $276 ^ 1;
            $277 = !($271 <= $275);
            $or$cond$i = $277 | $$not$i;
            if (!($or$cond$i)) {
             break;
            }
            $278 = (((($14)) + 8|0) + ($253<<3)|0);
            $279 = +HEAPF64[$278>>3];
            HEAPF64[$278>>3] = $262;
            $280 = $262 - $279;
            $281 = (+Math_abs((+$280)));
            $282 = (+Math_abs((+$279)));
            $283 = $263 > $282;
            $284 = $283 ? $263 : $282;
            $285 = $284 * 2.2204460492503131E-16;
            $286 = $281 <= $285;
            $brmerge$i = $276 | $286;
            $brmerge$not$i = $brmerge$i ^ 1;
            $or$cond215$i = $277 & $brmerge$not$i;
            if (!($or$cond215$i)) {
             $$2$i = $252;$$2310 = $$0308;
             break L83;
            }
            $287 = 1.0 / $280;
            $288 = 1.0 / $264;
            $289 = $288 + $287;
            $290 = 1.0 / $270;
            $291 = $289 - $290;
            $292 = $262 * $291;
            $293 = (+Math_abs((+$292)));
            $294 = !($293 <= 1.0E-4);
            if (!($294)) {
             $$2$i = $252;$$2310 = $$0308;
             break L83;
            }
            $295 = 1.0 / $291;
            $296 = $262 + $295;
            HEAPF64[$278>>3] = $296;
            $297 = $296 - $256;
            $298 = (+Math_abs((+$297)));
            $299 = $265 + $298;
            $300 = $271 + $299;
            $301 = !($300 <= $$0311);
            $$1312 = $301 ? $$0311 : $300;
            $$1309 = $301 ? $$0308 : $296;
            $302 = (($$0209227$i) + 1)|0;
            $303 = ($302>>>0)<($243>>>0);
            if ($303) {
             $$0209227$i = $302;$$0308 = $$1309;$$0311 = $$1312;
            } else {
             $$2$i = $240;$$2310 = $$1309;
             break L83;
            }
           }
           $304 = $265 + $271;
           $305 = $266 * 1.1102230246251565E-15;
           $306 = $304 > $305;
           $307 = $306 ? $304 : $305;
           $$2313 = $307;$$3 = $256;$363 = $242;
           break L80;
          }
         } while(0);
         $308 = ($$2$i|0)==(49);
         $spec$select$i = $308 ? 48 : $$2$i;
         $309 = $240 & 1;
         $310 = ($309|0)==(0);
         if ($310) {
          $$2211225$i = 0;
          while(1) {
           $318 = $$2211225$i << 1;
           $319 = (($318) + 2)|0;
           $320 = (((($14)) + 8|0) + ($319<<3)|0);
           $321 = +HEAPF64[$320>>3];
           $322 = (((($14)) + 8|0) + ($318<<3)|0);
           HEAPF64[$322>>3] = $321;
           $323 = (($$2211225$i) + 1)|0;
           $exitcond$i281 = ($$2211225$i|0)==($243|0);
           if ($exitcond$i281) {
            break;
           } else {
            $$2211225$i = $323;
           }
          }
         } else {
          $$1210226$i = 0;
          while(1) {
           $311 = $$1210226$i << 1;
           $312 = (($311) + 3)|0;
           $313 = (((($14)) + 8|0) + ($312<<3)|0);
           $314 = +HEAPF64[$313>>3];
           $315 = $311 | 1;
           $316 = (((($14)) + 8|0) + ($315<<3)|0);
           HEAPF64[$316>>3] = $314;
           $317 = (($$1210226$i) + 1)|0;
           $exitcond240$i = ($$1210226$i|0)==($243|0);
           if ($exitcond240$i) {
            break;
           } else {
            $$1210226$i = $317;
           }
          }
         }
         $324 = ($240|0)==($spec$select$i|0);
         if (!($324)) {
          $325 = (($240) - ($spec$select$i))|0;
          $$3212224$i = 0;
          while(1) {
           $326 = (($325) + ($$3212224$i))|0;
           $327 = (((($14)) + 8|0) + ($326<<3)|0);
           $328 = +HEAPF64[$327>>3];
           $329 = (((($14)) + 8|0) + ($$3212224$i<<3)|0);
           HEAPF64[$329>>3] = $328;
           $330 = (($$3212224$i) + 1)|0;
           $331 = ($330>>>0)>($spec$select$i>>>0);
           if ($331) {
            break;
           } else {
            $$3212224$i = $330;
           }
          }
         }
         $332 = (($spec$select$i) + 1)|0;
         HEAP32[$14>>2] = $332;
         $333 = ($244>>>0)<(3);
         if ($333) {
          $334 = (((($14)) + 432|0) + ($244<<3)|0);
          $$sink441 = $334;$350 = 1.7976931348623157E+308;
         } else {
          $335 = +HEAPF64[$69>>3];
          $336 = $$2310 - $335;
          $337 = (+Math_abs((+$336)));
          $338 = +HEAPF64[$70>>3];
          $339 = $$2310 - $338;
          $340 = (+Math_abs((+$339)));
          $341 = $337 + $340;
          $342 = +HEAPF64[$68>>3];
          $343 = $$2310 - $342;
          $344 = (+Math_abs((+$343)));
          $345 = $341 + $344;
          HEAPF64[$68>>3] = $338;
          HEAPF64[$70>>3] = $335;
          $$sink441 = $69;$350 = $345;
         }
         HEAPF64[$$sink441>>3] = $$2310;
         $346 = (($244) + 1)|0;
         HEAP32[$63>>2] = $346;
         $347 = (+Math_abs((+$$2310)));
         $348 = $347 * 1.1102230246251565E-15;
         $349 = $350 > $348;
         $351 = $349 ? $350 : $348;
         $$2313 = $351;$$3 = $$2310;$363 = $332;
        }
       } while(0);
       $352 = (($$0261) + 1)|0;
       $353 = ($352>>>0)>(5);
       $354 = $98 * 0.001;
       $355 = $$0225 < $354;
       $or$cond271 = $353 & $355;
       $356 = $$2313 < $$0225;
       if ($356) {
        $$3251 = $or$cond271 ? 5 : 0;
        $357 = (+Math_abs((+$$3)));
        $358 = $357 * $4;
        $359 = $358 < $3;
        $360 = $359 ? $3 : $358;
        $361 = !($$2313 <= $360);
        if ($361) {
         $$1 = $$3;$$1226 = $$2313;$$1229 = $360;$$1235 = $spec$select268;$$1262 = 0;
        } else {
         $$0237 = 10;$$2 = $$3;$$2227 = $$2313;$$2230 = $360;$$2233 = $spec$select268;$$2236 = $spec$select268;$$2241 = 0;$$2244 = $$1243;$$2263 = 0;$$4 = $$3251;$397 = $398;
         break;
        }
       } else {
        $$1 = $$0224;$$1226 = $$0225;$$1229 = $$0228;$$1235 = $$0234;$$1262 = $352;
       }
       $362 = ($363|0)==(1);
       $spec$select272 = $362&1;
       if ($or$cond271) {
        $$0237 = 10;$$2 = $$1;$$2227 = $$1226;$$2230 = $$1229;$$2233 = $spec$select268;$$2236 = $$1235;$$2241 = $spec$select272;$$2244 = $$1243;$$2263 = $$1262;$$4 = 5;$397 = $398;
       } else {
        HEAP32[$24>>2] = 0;
        $364 = HEAP32[$158>>2]|0;
        HEAP32[$25>>2] = $364;
        $$0237 = 0;$$2 = $$1;$$2227 = $$1226;$$2230 = $$1229;$$2233 = $98;$$2236 = $$1235;$$2241 = $spec$select272;$$2244 = 0;$$2263 = $$1262;$$4 = 0;$397 = $364;
       }
      } else {
       $$0237 = 11;$$2 = $$0224;$$2227 = $$0225;$$2230 = $$0228;$$2233 = $$0231;$$2236 = $$0234;$$2241 = $$0239;$$2244 = $$0242;$$2263 = $$0261;$$4 = 0;$397 = $$idx$val;
      }
     } else {
      $$0237 = 10;$$2 = $$0224;$$2227 = $$0225;$$2230 = $$0228;$$2233 = $$0231;$$2236 = $$0234;$$2241 = $$0239;$$2244 = $$0242;$$2263 = $$0261;$$4 = 1;$397 = $$idx$val;
     }
    } else {
     $$0237 = 10;$$2 = $$0224;$$2227 = $$0225;$$2230 = $$0228;$$2233 = $$0231;$$2236 = $$0234;$$2241 = $$0239;$$2244 = $$0242;$$2263 = $$0261;$$4 = $spec$select267;$397 = $$idx$val;
    }
   } else {
    $$0237 = 12;$$2 = $$0224;$$2227 = $$0225;$$2230 = $$0228;$$2233 = $$0231;$$2236 = $$0234;$$2241 = $$0239;$$2244 = $$0242;$$2263 = $$0261;$$4 = $spec$select267;$397 = $$idx$val;
   }
  } while(0);
  $$0237$clear = $$0237 & 15;
  switch ($$0237$clear<<24>>24) {
  case 10:  {
   label = 80;
   break L25;
   break;
  }
  case 12:  {
   $$8 = $$4;
   label = 89;
   break L25;
   break;
  }
  case 11: case 0:  {
   break;
  }
  default: {
   $$0 = 0;
   label = 100;
   break L25;
  }
  }
  $365 = ($90>>>0)<($5>>>0);
  if (!($365)) {
   label = 80;
   break;
  }
  $$pre377 = HEAP32[$30>>2]|0;
  $$pre378 = HEAP32[$32>>2]|0;
  $$0222 = $100;$$0223 = $98;$$0224 = $$2;$$0225 = $$2227;$$0228 = $$2230;$$0231 = $$2233;$$0234 = $$2236;$$0239 = $$2241;$$0242 = $$2244;$$0245 = $90;$$0246 = $$1247;$$0248 = $$4;$$0252 = $$2254;$$0255 = $$2257;$$0258 = $$2260;$$0261 = $$2263;$74 = $397;$79 = $$pre377;$82 = $$pre378;
 }
 if ((label|0) == 100) {
  STACKTOP = sp;return ($$0|0);
 }
 L119: do {
  if ((label|0) == 80) {
   HEAPF64[$7>>3] = $$2;
   HEAPF64[$8>>3] = $$2227;
   $366 = $$2227 == 1.7976931348623157E+308;
   if ($366) {
    $$8 = $$4;
    label = 89;
   } else {
    $367 = $$4 | $$1247;
    $368 = ($367|0)==(0);
    do {
     if ($368) {
      $$6 = $$4;
     } else {
      $369 = ($$1247|0)==(0);
      $370 = $$2236 + $$2227;
      $spec$select273 = $369 ? $$2227 : $370;
      $371 = ($$4|0)==(0);
      $$5 = $371 ? 3 : $$4;
      $372 = $$2 != 0.0;
      $373 = $100 != 0.0;
      $or$cond12 = $373 & $372;
      if ($or$cond12) {
       $374 = (+Math_abs((+$$2)));
       $375 = $spec$select273 / $374;
       $376 = $98 / $101;
       $377 = $375 > $376;
       if ($377) {
        $$8 = $$5;
        label = 89;
        break L119;
       } else {
        $$6 = $$5;
        break;
       }
      }
      $378 = $spec$select273 > $98;
      if ($378) {
       $$8 = $$5;
       label = 89;
       break L119;
      }
      $379 = $100 == 0.0;
      if ($379) {
       $$9 = $$5;
       break L119;
      } else {
       $$6 = $$5;
      }
     }
    } while(0);
    $380 = (+Math_abs((+$$2)));
    if ($66) {
     $381 = $380 > $101;
     $382 = $381 ? $380 : $101;
     $383 = +HEAPF64[$12>>3];
     $384 = $383 * 0.01;
     $385 = $382 < $384;
     if ($385) {
      $$9 = $$6;
      break;
     }
    }
    $386 = $$2 / $100;
    $387 = $386 < 0.01;
    $388 = $386 > 100.0;
    $or$cond15 = $387 | $388;
    $389 = $98 > $101;
    $or$cond274 = $389 | $or$cond15;
    $$7 = $or$cond274 ? 6 : $$6;
    $$9 = $$7;
   }
  }
 } while(0);
 if ((label|0) == 89) {
  $$idx278$val = HEAP32[$23>>2]|0;
  $$idx279$val = HEAP32[$30>>2]|0;
  $390 = ($$idx278$val|0)==(0);
  if ($390) {
   $$0$lcssa$i = 0.0;
  } else {
   $$0151$i = 0;$$02$i = 0.0;
   while(1) {
    $391 = (($$idx279$val) + ($$0151$i<<3)|0);
    $392 = +HEAPF64[$391>>3];
    $393 = $$02$i + $392;
    $394 = (($$0151$i) + 1)|0;
    $exitcond$i = ($394|0)==($$idx278$val|0);
    if ($exitcond$i) {
     $$0$lcssa$i = $393;
     break;
    } else {
     $$0151$i = $394;$$02$i = $393;
    }
   }
  }
  HEAPF64[$7>>3] = $$0$lcssa$i;
  HEAPF64[$8>>3] = $98;
  $$9 = $$8;
 }
 $395 = ($$9|0)>(2);
 $396 = $395 << 31 >> 31;
 $spec$select275 = (($$9) + ($396))|0;
 switch ($spec$select275|0) {
 case 1:  {
  _gsl_error(78750,78576,543,11);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  _gsl_error(78788,78576,548,18);
  $$0 = 18;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  _gsl_error(78837,78576,553,21);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  _gsl_error(78894,78576,558,18);
  $$0 = 18;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 5:  {
  _gsl_error(78945,78576,563,22);
  $$0 = 22;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 0:  {
  $$0 = $spec$select275;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  _gsl_error(78989,78576,567,5);
  $$0 = 5;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _gsl_integration_qk15($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $7 = sp + 64|0;
 $8 = sp;
 _gsl_integration_qk(8,27664,27728,27760,$7,$8,$0,$1,$2,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function _gsl_integration_qk21($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $7 = sp + 96|0;
 $8 = sp;
 _gsl_integration_qk(11,27824,27920,27968,$7,$8,$0,$1,$2,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function _gsl_integration_qk31($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $7 = sp + 128|0;
 $8 = sp;
 _gsl_integration_qk(16,28064,28192,28256,$7,$8,$0,$1,$2,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function _gsl_integration_qk41($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $7 = sp + 176|0;
 $8 = sp;
 _gsl_integration_qk(21,28384,28560,28640,$7,$8,$0,$1,$2,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function _gsl_integration_qk51($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $7 = sp + 208|0;
 $8 = sp;
 _gsl_integration_qk(26,28816,29024,29136,$7,$8,$0,$1,$2,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function _gsl_integration_qk61($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $7 = sp + 256|0;
 $8 = sp;
 _gsl_integration_qk(31,29344,29600,29728,$7,$8,$0,$1,$2,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function _gsl_integration_qk($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = +$8;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$0 = 0.0, $$0$i = 0.0, $$0157$lcssa = 0.0, $$0157176 = 0.0, $$0159$lcssa = 0.0, $$0159175 = 0.0, $$0161$lcssa = 0.0, $$0161165 = 0.0, $$0162174 = 0, $$1$i = 0.0, $$1$lcssa = 0.0, $$1158$lcssa191 = 0.0, $$1158168 = 0.0, $$1160$lcssa190 = 0.0, $$1160167 = 0.0, $$1163166 = 0, $$1177 = 0.0, $$2164 = 0, $$3$i = 0.0, $100 = 0.0;
 var $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $120 = 0.0;
 var $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0;
 var $79 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0;
 var $99 = 0.0, $exitcond = 0, $exitcond189 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $13 = $7 + $8;
 $14 = $13 * 0.5;
 $15 = $8 - $7;
 $16 = $15 * 0.5;
 $17 = (+Math_abs((+$16)));
 $18 = HEAP32[$6>>2]|0;
 $19 = ((($6)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (+FUNCTION_TABLE_ddi[$18 & 63]($14,$20));
 $22 = (($0) + -1)|0;
 $23 = (($3) + ($22<<3)|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $21 * $24;
 $26 = (+Math_abs((+$25)));
 $27 = $0 & 1;
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = (($0|0) / 2)&-1;
  $30 = (($29) + -1)|0;
  $31 = (($2) + ($30<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $21 * $32;
  $$0 = $33;
 } else {
  $$0 = 0.0;
 }
 $34 = (($22|0) / 2)&-1;
 $35 = ($0|0)>(2);
 if ($35) {
  $$0157176 = $25;$$0159175 = $26;$$0162174 = 0;$$1177 = $$0;
  while(1) {
   $36 = $$0162174 << 1;
   $37 = $36 | 1;
   $38 = (($1) + ($37<<3)|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $16 * $39;
   $41 = HEAP32[$6>>2]|0;
   $42 = $14 - $40;
   $43 = HEAP32[$19>>2]|0;
   $44 = (+FUNCTION_TABLE_ddi[$41 & 63]($42,$43));
   $45 = HEAP32[$6>>2]|0;
   $46 = $14 + $40;
   $47 = HEAP32[$19>>2]|0;
   $48 = (+FUNCTION_TABLE_ddi[$45 & 63]($46,$47));
   $49 = $44 + $48;
   $50 = (($4) + ($37<<3)|0);
   HEAPF64[$50>>3] = $44;
   $51 = (($5) + ($37<<3)|0);
   HEAPF64[$51>>3] = $48;
   $52 = (($2) + ($$0162174<<3)|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $49 * $53;
   $55 = $$1177 + $54;
   $56 = (($3) + ($37<<3)|0);
   $57 = +HEAPF64[$56>>3];
   $58 = $49 * $57;
   $59 = $$0157176 + $58;
   $60 = (+Math_abs((+$44)));
   $61 = (+Math_abs((+$48)));
   $62 = $60 + $61;
   $63 = $62 * $57;
   $64 = $$0159175 + $63;
   $65 = (($$0162174) + 1)|0;
   $66 = ($65|0)<($34|0);
   if ($66) {
    $$0157176 = $59;$$0159175 = $64;$$0162174 = $65;$$1177 = $55;
   } else {
    $$0157$lcssa = $59;$$0159$lcssa = $64;$$1$lcssa = $55;
    break;
   }
  }
 } else {
  $$0157$lcssa = $25;$$0159$lcssa = $26;$$1$lcssa = $$0;
 }
 $67 = (($0|0) / 2)&-1;
 $68 = ($0|0)>(1);
 if ($68) {
  $$1158168 = $$0157$lcssa;$$1160167 = $$0159$lcssa;$$1163166 = 0;
  while(1) {
   $74 = $$1163166 << 1;
   $75 = (($1) + ($74<<3)|0);
   $76 = +HEAPF64[$75>>3];
   $77 = $16 * $76;
   $78 = HEAP32[$6>>2]|0;
   $79 = $14 - $77;
   $80 = HEAP32[$19>>2]|0;
   $81 = (+FUNCTION_TABLE_ddi[$78 & 63]($79,$80));
   $82 = HEAP32[$6>>2]|0;
   $83 = $14 + $77;
   $84 = HEAP32[$19>>2]|0;
   $85 = (+FUNCTION_TABLE_ddi[$82 & 63]($83,$84));
   $86 = (($4) + ($74<<3)|0);
   HEAPF64[$86>>3] = $81;
   $87 = (($5) + ($74<<3)|0);
   HEAPF64[$87>>3] = $85;
   $88 = (($3) + ($74<<3)|0);
   $89 = +HEAPF64[$88>>3];
   $90 = $81 + $85;
   $91 = $90 * $89;
   $92 = $$1158168 + $91;
   $93 = (+Math_abs((+$81)));
   $94 = (+Math_abs((+$85)));
   $95 = $93 + $94;
   $96 = $95 * $89;
   $97 = $$1160167 + $96;
   $98 = (($$1163166) + 1)|0;
   $exitcond189 = ($98|0)==($67|0);
   if ($exitcond189) {
    break;
   } else {
    $$1158168 = $92;$$1160167 = $97;$$1163166 = $98;
   }
  }
  $99 = $92 * 0.5;
  $100 = +HEAPF64[$23>>3];
  $101 = $21 - $99;
  $102 = (+Math_abs((+$101)));
  $103 = $102 * $100;
  if ($68) {
   $$0161165 = $103;$$2164 = 0;
   while(1) {
    $104 = (($3) + ($$2164<<3)|0);
    $105 = +HEAPF64[$104>>3];
    $106 = (($4) + ($$2164<<3)|0);
    $107 = +HEAPF64[$106>>3];
    $108 = $107 - $99;
    $109 = (+Math_abs((+$108)));
    $110 = (($5) + ($$2164<<3)|0);
    $111 = +HEAPF64[$110>>3];
    $112 = $111 - $99;
    $113 = (+Math_abs((+$112)));
    $114 = $109 + $113;
    $115 = $105 * $114;
    $116 = $$0161165 + $115;
    $117 = (($$2164) + 1)|0;
    $exitcond = ($117|0)==($22|0);
    if ($exitcond) {
     $$0161$lcssa = $116;$$1158$lcssa191 = $92;$$1160$lcssa190 = $97;
     break;
    } else {
     $$0161165 = $116;$$2164 = $117;
    }
   }
  } else {
   $$0161$lcssa = $103;$$1158$lcssa191 = $92;$$1160$lcssa190 = $97;
  }
 } else {
  $69 = $$0157$lcssa * 0.5;
  $70 = +HEAPF64[$23>>3];
  $71 = $21 - $69;
  $72 = (+Math_abs((+$71)));
  $73 = $72 * $70;
  $$0161$lcssa = $73;$$1158$lcssa191 = $$0157$lcssa;$$1160$lcssa190 = $$0159$lcssa;
 }
 $118 = $$1158$lcssa191 - $$1$lcssa;
 $119 = $16 * $118;
 $120 = $16 * $$1158$lcssa191;
 $121 = $17 * $$1160$lcssa190;
 $122 = $17 * $$0161$lcssa;
 HEAPF64[$9>>3] = $120;
 HEAPF64[$11>>3] = $121;
 HEAPF64[$12>>3] = $122;
 $123 = (+Math_abs((+$119)));
 $124 = $122 != 0.0;
 $125 = $119 != 0.0;
 $or$cond$i = $125 & $124;
 if (!($or$cond$i)) {
  $$1$i = $123;
  $131 = $121 > 2.0041683600089728E-294;
  $132 = $121 * 1.1102230246251565E-14;
  $133 = $132 > $$1$i;
  $134 = $131 & $133;
  $$3$i = $134 ? $132 : $$1$i;
  HEAPF64[$10>>3] = $$3$i;
  return;
 }
 $126 = $123 * 200.0;
 $127 = $126 / $122;
 $128 = (+Math_pow((+$127),1.5));
 $129 = $128 < 1.0;
 $130 = $122 * $128;
 $$0$i = $129 ? $130 : $122;
 $$1$i = $$0$i;
 $131 = $121 > 2.0041683600089728E-294;
 $132 = $121 * 1.1102230246251565E-14;
 $133 = $132 > $$1$i;
 $134 = $131 & $133;
 $$3$i = $134 ? $132 : $$1$i;
 HEAPF64[$10>>3] = $$3$i;
 return;
}
function _gsl_integration_workspace_alloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  _gsl_error(79018,79062,33,1);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_malloc(44)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _gsl_error(79074,79062,42,8);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $0 << 3;
 $5 = (_malloc($4)|0);
 $6 = ((($2)) + 20|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _free($2);
  _gsl_error(79120,79062,52,8);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_malloc($4)|0);
 $9 = ((($2)) + 24|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if ($10) {
  _free($5);
  _free($2);
  _gsl_error(79162,79062,63,8);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (_malloc($4)|0);
 $12 = ((($2)) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)==(0|0);
 if ($13) {
  _free($8);
  _free($5);
  _free($2);
  _gsl_error(79204,79062,75,8);
  $$0 = 0;
  return ($$0|0);
 }
 $14 = (_malloc($4)|0);
 $15 = ((($2)) + 32|0);
 HEAP32[$15>>2] = $14;
 $16 = ($14|0)==(0|0);
 if ($16) {
  _free($11);
  _free($8);
  _free($5);
  _free($2);
  _gsl_error(79246,79062,89,8);
  $$0 = 0;
  return ($$0|0);
 }
 $17 = $0 << 2;
 $18 = (_malloc($17)|0);
 $19 = ((($2)) + 36|0);
 HEAP32[$19>>2] = $18;
 $20 = ($18|0)==(0|0);
 if ($20) {
  _free($14);
  _free($11);
  _free($8);
  _free($5);
  _free($2);
  _gsl_error(79288,79062,103,8);
  $$0 = 0;
  return ($$0|0);
 }
 $21 = (_malloc($17)|0);
 $22 = ((($2)) + 40|0);
 HEAP32[$22>>2] = $21;
 $23 = ($21|0)==(0|0);
 if ($23) {
  _free($18);
  _free($14);
  _free($11);
  _free($8);
  _free($5);
  _free($2);
  _gsl_error(79288,79062,118,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  $24 = ((($2)) + 4|0);
  HEAP32[$24>>2] = 0;
  HEAP32[$2>>2] = $0;
  $25 = ((($2)) + 16|0);
  HEAP32[$25>>2] = 0;
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_integration_workspace_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = ((($0)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 $12 = ((($0)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 _free($0);
 return;
}
function _gsl_linalg_tri_rcond($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_condest_tri_rcond($0,$1,$2,$3)|0);
 return ($4|0);
}
function _condest_tri_rcond($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$04860$i = 0.0, $$04956$i = 0, $$05155$i = 0.0, $$05257$i = 0, $$058$i = 0.0, $$1 = 0, $$15059$i = 0, $$15363$i = 0, $$165$i = 0.0, $$2$i = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $condest_invtril$sink = 0, $exitcond$i = 0, $exitcond73$i = 0;
 var $exitcond74$i = 0, $exitcond75$i = 0, $indvars$iv$i = 0, $indvars$iv$next$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  _gsl_error(79330,79352,163,20);
  $$1 = 20;
  STACKTOP = sp;return ($$1|0);
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ($5*3)|0;
 $11 = ($9|0)==($10|0);
 if (!($11)) {
  _gsl_error(79640,79352,167,19);
  $$1 = 19;
  STACKTOP = sp;return ($$1|0);
 }
 $12 = ($0|0)==(121);
 $13 = ($5|0)!=(0);
 if ($12) {
  if ($13) {
   $14 = ((($1)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($1)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $$05257$i = 0;$$058$i = 0.0;$indvars$iv$i = 1;
   while(1) {
    $$04956$i = 0;$$05155$i = 0.0;
    while(1) {
     $18 = Math_imul($$04956$i, $17)|0;
     $19 = (($18) + ($$05257$i))|0;
     $20 = (($15) + ($19<<3)|0);
     $21 = +HEAPF64[$20>>3];
     $22 = (+Math_abs((+$21)));
     $23 = $$05155$i + $22;
     $24 = (($$04956$i) + 1)|0;
     $exitcond$i = ($24|0)==($indvars$iv$i|0);
     if ($exitcond$i) {
      break;
     } else {
      $$04956$i = $24;$$05155$i = $23;
     }
    }
    $25 = $$058$i > $23;
    $26 = $25 ? $$058$i : $23;
    $27 = (($$05257$i) + 1)|0;
    $indvars$iv$next$i = (($indvars$iv$i) + 1)|0;
    $exitcond73$i = ($27|0)==($5|0);
    if ($exitcond73$i) {
     $$2$i = $26;
     label = 17;
     break;
    } else {
     $$05257$i = $27;$$058$i = $26;$indvars$iv$i = $indvars$iv$next$i;
    }
   }
  } else {
   label = 16;
  }
 } else {
  if ($13) {
   $28 = ((($1)) + 12|0);
   $29 = ((($1)) + 8|0);
   $30 = HEAP32[$28>>2]|0;
   $31 = HEAP32[$29>>2]|0;
   $$15363$i = 0;$$165$i = 0.0;
   while(1) {
    $$04860$i = 0.0;$$15059$i = $$15363$i;
    while(1) {
     $32 = Math_imul($$15059$i, $31)|0;
     $33 = (($32) + ($$15363$i))|0;
     $34 = (($30) + ($33<<3)|0);
     $35 = +HEAPF64[$34>>3];
     $36 = (+Math_abs((+$35)));
     $37 = $$04860$i + $36;
     $38 = (($$15059$i) + 1)|0;
     $exitcond74$i = ($38|0)==($5|0);
     if ($exitcond74$i) {
      break;
     } else {
      $$04860$i = $37;$$15059$i = $38;
     }
    }
    $39 = $$165$i > $37;
    $40 = $39 ? $$165$i : $37;
    $41 = (($$15363$i) + 1)|0;
    $exitcond75$i = ($41|0)==($5|0);
    if ($exitcond75$i) {
     $$2$i = $40;
     label = 17;
     break;
    } else {
     $$15363$i = $41;$$165$i = $40;
    }
   }
  } else {
   label = 16;
  }
 }
 if ((label|0) == 16) {
  HEAPF64[$2>>3] = 0.0;
  $$0 = 0;$49 = $4;
 }
 else if ((label|0) == 17) {
  HEAPF64[$2>>3] = 0.0;
  $42 = $$2$i == 0.0;
  if ($42) {
   $$0 = 0;$49 = $4;
  } else {
   $condest_invtril$sink = $12 ? 64 : 65;
   $43 = (_gsl_linalg_invnorm1($5,$condest_invtril$sink,$1,$4,$3)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = +HEAPF64[$4>>3];
    $46 = $45 != 0.0;
    if ($46) {
     $47 = 1.0 / $$2$i;
     $48 = $47 / $45;
     HEAPF64[$2>>3] = $48;
     $$0 = 0;$49 = $4;
    } else {
     $$0 = 0;$49 = $4;
    }
   } else {
    $$0 = $43;$49 = $4;
   }
  }
 }
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _condest_invtriu($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_gsl_blas_dtrsv(121,$0,131,$2,$1)|0);
 return ($3|0);
}
function _condest_invtril($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_gsl_blas_dtrsv(122,$0,131,$2,$1)|0);
 return ($3|0);
}
function _gsl_linalg_invnorm1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0193$i = 0, $$0193$i$1 = 0, $$0193$i$2 = 0, $$0193$i$3 = 0, $$0193$i$4 = 0, $$0193$i$us = 0, $$07897$us = 0.0, $$08092 = 0.0, $$081102 = 0, $$08496$us = 0, $$1 = 0.0, $$1129 = 0.0, $$1130 = 0.0, $$18298 = 0, $$2 = 0.0, $$28393$us = 0, $$391 = 0, $$idx$val = 0, $$idx$val$1 = 0;
 var $$idx$val$2 = 0, $$idx$val$3 = 0, $$idx$val$4 = 0, $$idx$val$us = 0, $$idx85$val = 0, $$idx85$val$1 = 0, $$idx85$val$2 = 0, $$idx85$val$3 = 0, $$idx85$val$4 = 0, $$idx85$val$us = 0, $$idx86$val = 0, $$idx86$val$1 = 0, $$idx86$val$2 = 0, $$idx86$val$3 = 0, $$idx86$val$4 = 0, $$idx86$val$us = 0, $$idx87$pre$phiZZ2D = 0, $$idx87$val = 0, $$idx87$val$1 = 0, $$idx87$val$2 = 0;
 var $$idx87$val$3 = 0, $$idx87$val$4 = 0, $$idx87$val$us = 0, $$idx88$pre$phiZZ2D = 0, $$idx88$val = 0, $$idx88$val$1 = 0, $$idx88$val$2 = 0, $$idx88$val$3 = 0, $$idx88$val$4 = 0, $$idx88$val$us = 0, $$pre = 0, $$pre$phi124Z2D = 0, $$pre$phi128Z2D = 0.0, $$pre123 = 0, $$pre125 = 0, $$pre126 = 0, $$pre127 = 0.0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $exitcond = 0, $exitcond112 = 0, $exitcond121 = 0, $exitcond122 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 40|0;
 $6 = sp + 20|0;
 $7 = sp;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($0*3)|0;
 $10 = ($8|0)==($9|0);
 if (!($10)) {
  _gsl_error(79640,79352,71,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 _gsl_vector_subvector($5,$4,0,$0);
 _gsl_vector_subvector($6,$4,$0,$0);
 $11 = $0 << 1;
 _gsl_vector_subvector($7,$4,$11,$0);
 $12 = ($0|0)==(0);
 if (!($12)) {
  $13 = (+($0>>>0));
  $14 = 1.0 / $13;
  $15 = ((($5)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($5)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $$081102 = 0;
  while(1) {
   $19 = Math_imul($18, $$081102)|0;
   $20 = (($16) + ($19<<3)|0);
   HEAPF64[$20>>3] = $14;
   $21 = (($$081102) + 1)|0;
   $exitcond122 = ($21|0)==($0|0);
   if ($exitcond122) {
    break;
   } else {
    $$081102 = $21;
   }
  }
 }
 (_gsl_vector_memcpy($6,$5)|0);
 (FUNCTION_TABLE_iiii[$1 & 127](111,$6,$2)|0);
 $22 = (+_gsl_blas_dasum($6));
 $$pre = ((($6)) + 8|0);
 if ($12) {
  $$pre123 = ((($6)) + 4|0);
  $$pre125 = ((($7)) + 4|0);
  $$pre126 = ((($7)) + 8|0);
  $$idx87$pre$phiZZ2D = $$pre125;$$idx88$pre$phiZZ2D = $$pre126;$$pre$phi124Z2D = $$pre123;
 } else {
  $23 = HEAP32[$$pre>>2]|0;
  $24 = ((($6)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($7)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($7)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $$18298 = 0;
  while(1) {
   $30 = Math_imul($25, $$18298)|0;
   $31 = (($23) + ($30<<3)|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $32 >= 0.0;
   $34 = $33 ? 1.0 : -1.0;
   $35 = Math_imul($29, $$18298)|0;
   $36 = (($27) + ($35<<3)|0);
   HEAPF64[$36>>3] = $34;
   $37 = (($$18298) + 1)|0;
   $exitcond121 = ($37|0)==($0|0);
   if ($exitcond121) {
    $$idx87$pre$phiZZ2D = $28;$$idx88$pre$phiZZ2D = $26;$$pre$phi124Z2D = $24;
    break;
   } else {
    $$18298 = $37;
   }
  }
 }
 (_gsl_vector_memcpy($5,$7)|0);
 (FUNCTION_TABLE_iiii[$1 & 127](112,$5,$2)|0);
 L16: do {
  if ($12) {
   $69 = (_gsl_blas_idamax($5)|0);
   _gsl_vector_set_zero($6);
   $70 = HEAP32[$$pre>>2]|0;
   $71 = HEAP32[$$pre$phi124Z2D>>2]|0;
   $72 = Math_imul($71, $69)|0;
   $73 = (($70) + ($72<<3)|0);
   HEAPF64[$73>>3] = 1.0;
   (FUNCTION_TABLE_iiii[$1 & 127](111,$6,$2)|0);
   $74 = (+_gsl_blas_dasum($6));
   $$idx$val = HEAP32[$6>>2]|0;
   $$idx85$val = HEAP32[$$pre$phi124Z2D>>2]|0;
   $$idx86$val = HEAP32[$$pre>>2]|0;
   $$idx87$val = HEAP32[$$idx87$pre$phiZZ2D>>2]|0;
   $$idx88$val = HEAP32[$$idx88$pre$phiZZ2D>>2]|0;
   $75 = ($$idx$val|0)==(0);
   if ($75) {
    $$1130 = $74;
    label = 28;
   } else {
    $$0193$i = 0;
    while(1) {
     $78 = Math_imul($$0193$i, $$idx85$val)|0;
     $79 = (($$idx86$val) + ($78<<3)|0);
     $80 = +HEAPF64[$79>>3];
     $81 = Math_imul($$0193$i, $$idx87$val)|0;
     $82 = (($$idx88$val) + ($81<<3)|0);
     $83 = +HEAPF64[$82>>3];
     $84 = $80 >= 0.0;
     $85 = $84 ? 1 : -1;
     $86 = $83 >= 0.0;
     $87 = $86 ? 1 : -1;
     $88 = ($85|0)==($87|0);
     $77 = (($$0193$i) + 1)|0;
     if (!($88)) {
      break;
     }
     $76 = ($77>>>0)<($$idx$val>>>0);
     if ($76) {
      $$0193$i = $77;
     } else {
      $$1 = $74;
      label = 27;
      break L16;
     }
    }
    $89 = $74 < $22;
    if ($89) {
     $$1 = $74;
     label = 27;
    } else {
     (_gsl_vector_memcpy($5,$7)|0);
     (FUNCTION_TABLE_iiii[$1 & 127](112,$5,$2)|0);
     $90 = (_gsl_blas_idamax($5)|0);
     _gsl_vector_set_zero($6);
     $91 = HEAP32[$$pre>>2]|0;
     $92 = HEAP32[$$pre$phi124Z2D>>2]|0;
     $93 = Math_imul($92, $90)|0;
     $94 = (($91) + ($93<<3)|0);
     HEAPF64[$94>>3] = 1.0;
     (FUNCTION_TABLE_iiii[$1 & 127](111,$6,$2)|0);
     $95 = (+_gsl_blas_dasum($6));
     $$idx$val$1 = HEAP32[$6>>2]|0;
     $$idx85$val$1 = HEAP32[$$pre$phi124Z2D>>2]|0;
     $$idx86$val$1 = HEAP32[$$pre>>2]|0;
     $$idx87$val$1 = HEAP32[$$idx87$pre$phiZZ2D>>2]|0;
     $$idx88$val$1 = HEAP32[$$idx88$pre$phiZZ2D>>2]|0;
     $96 = ($$idx$val$1|0)==(0);
     if ($96) {
      $$1 = $95;
      label = 27;
     } else {
      $$0193$i$1 = 0;
      while(1) {
       $116 = Math_imul($$0193$i$1, $$idx85$val$1)|0;
       $117 = (($$idx86$val$1) + ($116<<3)|0);
       $118 = +HEAPF64[$117>>3];
       $119 = Math_imul($$0193$i$1, $$idx87$val$1)|0;
       $120 = (($$idx88$val$1) + ($119<<3)|0);
       $121 = +HEAPF64[$120>>3];
       $122 = $118 >= 0.0;
       $123 = $122 ? 1 : -1;
       $124 = $121 >= 0.0;
       $125 = $124 ? 1 : -1;
       $126 = ($123|0)==($125|0);
       $127 = (($$0193$i$1) + 1)|0;
       if (!($126)) {
        break;
       }
       $136 = ($127>>>0)<($$idx$val$1>>>0);
       if ($136) {
        $$0193$i$1 = $127;
       } else {
        $$1 = $95;
        label = 27;
        break L16;
       }
      }
      $128 = $95 < $74;
      if ($128) {
       $$1 = $95;
       label = 27;
      } else {
       (_gsl_vector_memcpy($5,$7)|0);
       (FUNCTION_TABLE_iiii[$1 & 127](112,$5,$2)|0);
       $129 = (_gsl_blas_idamax($5)|0);
       _gsl_vector_set_zero($6);
       $130 = HEAP32[$$pre>>2]|0;
       $131 = HEAP32[$$pre$phi124Z2D>>2]|0;
       $132 = Math_imul($131, $129)|0;
       $133 = (($130) + ($132<<3)|0);
       HEAPF64[$133>>3] = 1.0;
       (FUNCTION_TABLE_iiii[$1 & 127](111,$6,$2)|0);
       $134 = (+_gsl_blas_dasum($6));
       $$idx$val$2 = HEAP32[$6>>2]|0;
       $$idx85$val$2 = HEAP32[$$pre$phi124Z2D>>2]|0;
       $$idx86$val$2 = HEAP32[$$pre>>2]|0;
       $$idx87$val$2 = HEAP32[$$idx87$pre$phiZZ2D>>2]|0;
       $$idx88$val$2 = HEAP32[$$idx88$pre$phiZZ2D>>2]|0;
       $135 = ($$idx$val$2|0)==(0);
       if ($135) {
        $$1 = $134;
        label = 27;
       } else {
        $$0193$i$2 = 0;
        while(1) {
         $137 = Math_imul($$0193$i$2, $$idx85$val$2)|0;
         $138 = (($$idx86$val$2) + ($137<<3)|0);
         $139 = +HEAPF64[$138>>3];
         $140 = Math_imul($$0193$i$2, $$idx87$val$2)|0;
         $141 = (($$idx88$val$2) + ($140<<3)|0);
         $142 = +HEAPF64[$141>>3];
         $143 = $139 >= 0.0;
         $144 = $143 ? 1 : -1;
         $145 = $142 >= 0.0;
         $146 = $145 ? 1 : -1;
         $147 = ($144|0)==($146|0);
         $148 = (($$0193$i$2) + 1)|0;
         if (!($147)) {
          break;
         }
         $157 = ($148>>>0)<($$idx$val$2>>>0);
         if ($157) {
          $$0193$i$2 = $148;
         } else {
          $$1 = $134;
          label = 27;
          break L16;
         }
        }
        $149 = $134 < $95;
        if ($149) {
         $$1 = $134;
         label = 27;
        } else {
         (_gsl_vector_memcpy($5,$7)|0);
         (FUNCTION_TABLE_iiii[$1 & 127](112,$5,$2)|0);
         $150 = (_gsl_blas_idamax($5)|0);
         _gsl_vector_set_zero($6);
         $151 = HEAP32[$$pre>>2]|0;
         $152 = HEAP32[$$pre$phi124Z2D>>2]|0;
         $153 = Math_imul($152, $150)|0;
         $154 = (($151) + ($153<<3)|0);
         HEAPF64[$154>>3] = 1.0;
         (FUNCTION_TABLE_iiii[$1 & 127](111,$6,$2)|0);
         $155 = (+_gsl_blas_dasum($6));
         $$idx$val$3 = HEAP32[$6>>2]|0;
         $$idx85$val$3 = HEAP32[$$pre$phi124Z2D>>2]|0;
         $$idx86$val$3 = HEAP32[$$pre>>2]|0;
         $$idx87$val$3 = HEAP32[$$idx87$pre$phiZZ2D>>2]|0;
         $$idx88$val$3 = HEAP32[$$idx88$pre$phiZZ2D>>2]|0;
         $156 = ($$idx$val$3|0)==(0);
         if ($156) {
          $$1 = $155;
          label = 27;
         } else {
          $$0193$i$3 = 0;
          while(1) {
           $158 = Math_imul($$0193$i$3, $$idx85$val$3)|0;
           $159 = (($$idx86$val$3) + ($158<<3)|0);
           $160 = +HEAPF64[$159>>3];
           $161 = Math_imul($$0193$i$3, $$idx87$val$3)|0;
           $162 = (($$idx88$val$3) + ($161<<3)|0);
           $163 = +HEAPF64[$162>>3];
           $164 = $160 >= 0.0;
           $165 = $164 ? 1 : -1;
           $166 = $163 >= 0.0;
           $167 = $166 ? 1 : -1;
           $168 = ($165|0)==($167|0);
           $169 = (($$0193$i$3) + 1)|0;
           if (!($168)) {
            break;
           }
           $178 = ($169>>>0)<($$idx$val$3>>>0);
           if ($178) {
            $$0193$i$3 = $169;
           } else {
            $$1 = $155;
            label = 27;
            break L16;
           }
          }
          $170 = $155 < $134;
          if ($170) {
           $$1 = $155;
           label = 27;
          } else {
           (_gsl_vector_memcpy($5,$7)|0);
           (FUNCTION_TABLE_iiii[$1 & 127](112,$5,$2)|0);
           $171 = (_gsl_blas_idamax($5)|0);
           _gsl_vector_set_zero($6);
           $172 = HEAP32[$$pre>>2]|0;
           $173 = HEAP32[$$pre$phi124Z2D>>2]|0;
           $174 = Math_imul($173, $171)|0;
           $175 = (($172) + ($174<<3)|0);
           HEAPF64[$175>>3] = 1.0;
           (FUNCTION_TABLE_iiii[$1 & 127](111,$6,$2)|0);
           $176 = (+_gsl_blas_dasum($6));
           $$idx$val$4 = HEAP32[$6>>2]|0;
           $$idx85$val$4 = HEAP32[$$pre$phi124Z2D>>2]|0;
           $$idx86$val$4 = HEAP32[$$pre>>2]|0;
           $$idx87$val$4 = HEAP32[$$idx87$pre$phiZZ2D>>2]|0;
           $$idx88$val$4 = HEAP32[$$idx88$pre$phiZZ2D>>2]|0;
           $177 = ($$idx$val$4|0)==(0);
           if ($177) {
            $$1 = $176;
            label = 27;
           } else {
            $$0193$i$4 = 0;
            while(1) {
             $179 = Math_imul($$0193$i$4, $$idx85$val$4)|0;
             $180 = (($$idx86$val$4) + ($179<<3)|0);
             $181 = +HEAPF64[$180>>3];
             $182 = Math_imul($$0193$i$4, $$idx87$val$4)|0;
             $183 = (($$idx88$val$4) + ($182<<3)|0);
             $184 = +HEAPF64[$183>>3];
             $185 = $181 >= 0.0;
             $186 = $185 ? 1 : -1;
             $187 = $184 >= 0.0;
             $188 = $187 ? 1 : -1;
             $189 = ($186|0)==($188|0);
             $190 = (($$0193$i$4) + 1)|0;
             if (!($189)) {
              break;
             }
             $192 = ($190>>>0)<($$idx$val$4>>>0);
             if ($192) {
              $$0193$i$4 = $190;
             } else {
              $$1 = $176;
              label = 27;
              break L16;
             }
            }
            $191 = $176 < $155;
            if ($191) {
             $$1 = $176;
             label = 27;
            } else {
             (_gsl_vector_memcpy($5,$7)|0);
             (FUNCTION_TABLE_iiii[$1 & 127](112,$5,$2)|0);
             $$1 = $176;
             label = 27;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else {
   $$07897$us = $22;$$08496$us = 0;
   while(1) {
    $38 = (_gsl_blas_idamax($5)|0);
    _gsl_vector_set_zero($6);
    $39 = HEAP32[$$pre>>2]|0;
    $40 = HEAP32[$$pre$phi124Z2D>>2]|0;
    $41 = Math_imul($40, $38)|0;
    $42 = (($39) + ($41<<3)|0);
    HEAPF64[$42>>3] = 1.0;
    (FUNCTION_TABLE_iiii[$1 & 127](111,$6,$2)|0);
    $43 = (+_gsl_blas_dasum($6));
    $$idx$val$us = HEAP32[$6>>2]|0;
    $$idx85$val$us = HEAP32[$$pre$phi124Z2D>>2]|0;
    $$idx86$val$us = HEAP32[$$pre>>2]|0;
    $$idx87$val$us = HEAP32[$$idx87$pre$phiZZ2D>>2]|0;
    $$idx88$val$us = HEAP32[$$idx88$pre$phiZZ2D>>2]|0;
    $44 = ($$idx$val$us|0)==(0);
    if ($44) {
     $$1 = $43;
     label = 27;
     break L16;
    }
    $$0193$i$us = 0;
    while(1) {
     $45 = Math_imul($$0193$i$us, $$idx85$val$us)|0;
     $46 = (($$idx86$val$us) + ($45<<3)|0);
     $47 = +HEAPF64[$46>>3];
     $48 = Math_imul($$0193$i$us, $$idx87$val$us)|0;
     $49 = (($$idx88$val$us) + ($48<<3)|0);
     $50 = +HEAPF64[$49>>3];
     $51 = $47 >= 0.0;
     $52 = $51 ? 1 : -1;
     $53 = $50 >= 0.0;
     $54 = $53 ? 1 : -1;
     $55 = ($52|0)==($54|0);
     $56 = (($$0193$i$us) + 1)|0;
     if (!($55)) {
      break;
     }
     $66 = ($56>>>0)<($$idx$val$us>>>0);
     if ($66) {
      $$0193$i$us = $56;
     } else {
      $$1 = $43;
      label = 27;
      break L16;
     }
    }
    $57 = $43 < $$07897$us;
    if ($57) {
     $$1 = $43;
     label = 27;
     break L16;
    }
    $$28393$us = 0;
    while(1) {
     $58 = Math_imul($$idx85$val$us, $$28393$us)|0;
     $59 = (($$idx86$val$us) + ($58<<3)|0);
     $60 = +HEAPF64[$59>>3];
     $61 = $60 >= 0.0;
     $62 = $61 ? 1.0 : -1.0;
     $63 = Math_imul($$idx87$val$us, $$28393$us)|0;
     $64 = (($$idx88$val$us) + ($63<<3)|0);
     HEAPF64[$64>>3] = $62;
     $65 = (($$28393$us) + 1)|0;
     $exitcond112 = ($65|0)==($0|0);
     if ($exitcond112) {
      break;
     } else {
      $$28393$us = $65;
     }
    }
    (_gsl_vector_memcpy($5,$7)|0);
    (FUNCTION_TABLE_iiii[$1 & 127](112,$5,$2)|0);
    $67 = (($$08496$us) + 1)|0;
    $68 = ($67>>>0)<(5);
    if ($68) {
     $$07897$us = $43;$$08496$us = $67;
    } else {
     $$1 = $43;
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 27) {
  if ($12) {
   $$1130 = $$1;
   label = 28;
  } else {
   $97 = (+($0>>>0));
   $98 = $97 + -1.0;
   $99 = ((($5)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $$08092 = 1.0;$$391 = 0;
   while(1) {
    $103 = (+($$391>>>0));
    $104 = $103 / $98;
    $105 = $104 + 1.0;
    $106 = $$08092 * $105;
    $107 = Math_imul($102, $$391)|0;
    $108 = (($100) + ($107<<3)|0);
    HEAPF64[$108>>3] = $106;
    $109 = - $$08092;
    $110 = (($$391) + 1)|0;
    $exitcond = ($110|0)==($0|0);
    if ($exitcond) {
     $$1129 = $$1;$$pre$phi128Z2D = $97;
     break;
    } else {
     $$08092 = $109;$$391 = $110;
    }
   }
  }
 }
 if ((label|0) == 28) {
  $$pre127 = (+($0>>>0));
  $$1129 = $$1130;$$pre$phi128Z2D = $$pre127;
 }
 (FUNCTION_TABLE_iiii[$1 & 127](111,$5,$2)|0);
 $111 = (+_gsl_blas_dasum($5));
 $112 = $111 * 2.0;
 $113 = $$pre$phi128Z2D * 3.0;
 $114 = $112 / $113;
 $115 = $114 > $$1129;
 if ($115) {
  (_gsl_vector_memcpy($6,$5)|0);
  $$2 = $114;
 } else {
  $$2 = $$1129;
 }
 HEAPF64[$3>>3] = $$2;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _gsl_linalg_householder_transform($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $$1 = 0.0;
  STACKTOP = sp;return (+$$1);
 }
 $4 = (($2) + -1)|0;
 _gsl_vector_subvector($1,$0,1,$4);
 $5 = (+_gsl_blas_dnrm2($1));
 $6 = $5 == 0.0;
 if ($6) {
  $$0 = 0.0;
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = +HEAPF64[$8>>3];
  $10 = $9 >= 0.0;
  $11 = $10 ? -1.0 : 1.0;
  $12 = (+_hypot($9,$5));
  $13 = $12 * $11;
  $14 = $13 - $9;
  $15 = $14 / $13;
  $16 = $9 - $13;
  $17 = (+Math_abs((+$16)));
  $18 = $17 > 2.2250738585072014E-308;
  if ($18) {
   $19 = 1.0 / $16;
   _gsl_blas_dscal($19,$1);
  } else {
   $20 = 2.2204460492503131E-16 / $16;
   _gsl_blas_dscal($20,$1);
   _gsl_blas_dscal(4503599627370496.0,$1);
  }
  $21 = HEAP32[$7>>2]|0;
  HEAPF64[$21>>3] = $13;
  $$0 = $15;
 }
 $$1 = $$0;
 STACKTOP = sp;return (+$$1);
}
function _gsl_linalg_householder_hm($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $$04852$us = 0, $$04958 = 0, $$04958$us = 0, $$05051$us = 0.0, $$154$us = 0, $$pre = 0, $$pre65 = 0, $$pre66 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 == 0.0;
 if ($3) {
  return 0;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  return 0;
 }
 $7 = ((($2)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = ($9>>>0)>(1);
 if (!($10)) {
  $$04958 = 0;
  while(1) {
   $42 = (($8) + ($$04958<<3)|0);
   $43 = +HEAPF64[$42>>3];
   $44 = $43 * $0;
   $45 = $43 - $44;
   HEAPF64[$42>>3] = $45;
   $46 = (($$04958) + 1)|0;
   $47 = ($46>>>0)<($5>>>0);
   if ($47) {
    $$04958 = $46;
   } else {
    break;
   }
  }
  return 0;
 }
 $11 = ((($1)) + 4|0);
 $12 = ((($1)) + 8|0);
 $13 = ((($2)) + 8|0);
 $$pre = HEAP32[$13>>2]|0;
 $$pre65 = HEAP32[$12>>2]|0;
 $$pre66 = HEAP32[$11>>2]|0;
 $$04958$us = 0;
 while(1) {
  $14 = (($8) + ($$04958$us<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $$04852$us = 1;$$05051$us = $15;
  while(1) {
   $30 = Math_imul($$pre, $$04852$us)|0;
   $31 = (($30) + ($$04958$us))|0;
   $32 = (($8) + ($31<<3)|0);
   $33 = +HEAPF64[$32>>3];
   $34 = Math_imul($$pre66, $$04852$us)|0;
   $35 = (($$pre65) + ($34<<3)|0);
   $36 = +HEAPF64[$35>>3];
   $37 = $33 * $36;
   $27 = $$05051$us + $37;
   $38 = (($$04852$us) + 1)|0;
   $39 = ($38>>>0)<($9>>>0);
   if ($39) {
    $$04852$us = $38;$$05051$us = $27;
   } else {
    break;
   }
  }
  $40 = $27 * $0;
  $41 = $15 - $40;
  HEAPF64[$14>>3] = $41;
  $$154$us = 1;
  while(1) {
   $18 = Math_imul($$pre, $$154$us)|0;
   $19 = (($18) + ($$04958$us))|0;
   $20 = (($8) + ($19<<3)|0);
   $21 = +HEAPF64[$20>>3];
   $22 = Math_imul($$pre66, $$154$us)|0;
   $23 = (($$pre65) + ($22<<3)|0);
   $24 = +HEAPF64[$23>>3];
   $25 = $24 * $0;
   $26 = $27 * $25;
   $28 = $21 - $26;
   HEAPF64[$20>>3] = $28;
   $29 = (($$154$us) + 1)|0;
   $exitcond = ($29|0)==($9|0);
   if ($exitcond) {
    break;
   } else {
    $$154$us = $29;
   }
  }
  $16 = (($$04958$us) + 1)|0;
  $17 = ($16>>>0)<($5>>>0);
  if ($17) {
   $$04958$us = $16;
  } else {
   break;
  }
 }
 return 0;
}
function _gsl_linalg_householder_hv($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $4 = sp + 28|0;
 $5 = sp + 8|0;
 $6 = $0 == 0.0;
 if ($6) {
  STACKTOP = sp;return 0;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($2)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = +HEAPF64[$9>>3];
 $11 = (($7) + -1)|0;
 _gsl_vector_const_subvector($4,$1,1,$11);
 _gsl_vector_subvector($5,$2,1,$11);
 (_gsl_blas_ddot($4,$5,$3)|0);
 $12 = +HEAPF64[$3>>3];
 $13 = $10 + $12;
 $14 = $13 * $0;
 $15 = $10 - $14;
 $16 = HEAP32[$8>>2]|0;
 HEAPF64[$16>>3] = $15;
 $17 = - $14;
 (_gsl_blas_daxpy($17,$4,$5)|0);
 STACKTOP = sp;return 0;
}
function _gsl_linalg_QR_QTvec($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$03435 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 20|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ($6>>>0)<($8>>>0);
 $11 = $10 ? $6 : $8;
 $12 = ($9|0)==($11|0);
 if (!($12)) {
  _gsl_error(79384,80919,325,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$2>>2]|0;
 $14 = ($13|0)==($6|0);
 if (!($14)) {
  _gsl_error(79362,80919,329,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($9|0)==(0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ((($1)) + 8|0);
 $17 = ((($1)) + 4|0);
 $$03435 = 0;
 while(1) {
  _gsl_matrix_const_column($3,$0,$$03435);
  $18 = (($6) - ($$03435))|0;
  _gsl_vector_const_subvector($4,$3,$$03435,$18);
  _gsl_vector_subvector($5,$2,$$03435,$18);
  $19 = HEAP32[$16>>2]|0;
  $20 = HEAP32[$17>>2]|0;
  $21 = Math_imul($20, $$03435)|0;
  $22 = (($19) + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  (_gsl_linalg_householder_hv($23,$4,$5)|0);
  $24 = (($$03435) + 1)|0;
  $25 = ($24>>>0)<($9>>>0);
  if ($25) {
   $$03435 = $24;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _gsl_linalg_QR_Qvec($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 20|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ($6>>>0)<($8>>>0);
 $11 = $10 ? $6 : $8;
 $12 = ($9|0)==($11|0);
 if (!($12)) {
  _gsl_error(79384,80919,358,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$2>>2]|0;
 $14 = ($13|0)==($6|0);
 if (!($14)) {
  _gsl_error(79362,80919,362,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($9|0)==(0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ((($1)) + 8|0);
 $17 = ((($1)) + 4|0);
 $$in = $9;
 while(1) {
  $18 = (($$in) + -1)|0;
  _gsl_matrix_const_column($3,$0,$18);
  $19 = (($6) - ($18))|0;
  _gsl_vector_const_subvector($4,$3,$18,$19);
  _gsl_vector_subvector($5,$2,$18,$19);
  $20 = HEAP32[$16>>2]|0;
  $21 = HEAP32[$17>>2]|0;
  $22 = Math_imul($21, $18)|0;
  $23 = (($20) + ($22<<3)|0);
  $24 = +HEAPF64[$23>>3];
  (_gsl_linalg_householder_hv($24,$4,$5)|0);
  $25 = ($18|0)==(0);
  if ($25) {
   $$0 = 0;
   break;
  } else {
   $$in = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _gsl_linalg_QRPT_decomp($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0121 = 0.0, $$0122141 = 0, $$0124133 = 0.0, $$0126132 = 0, $$0128131 = 0, $$1 = 0.0, $$1123138 = 0, $$1125 = 0.0, $$1127 = 0, $$1129134 = 0, $$pre = 0, $$pre$phi152Z2D = 0, $$pre147 = 0, $$pre148 = 0, $$pre149 = 0, $$pre150 = 0, $$pre151 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $exitcond = 0, $exitcond145 = 0, $exitcond146 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp + 104|0;
 $6 = sp + 84|0;
 $7 = sp + 64|0;
 $8 = sp + 40|0;
 $9 = sp + 20|0;
 $10 = sp;
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$1>>2]|0;
 $15 = ($11>>>0)<($13>>>0);
 $16 = $15 ? $11 : $13;
 $17 = ($14|0)==($16|0);
 if (!($17)) {
  _gsl_error(79384,79413,75,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==($13|0);
 if (!($19)) {
  _gsl_error(79420,79413,79,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = HEAP32[$4>>2]|0;
 $21 = ($20|0)==($13|0);
 if (!($21)) {
  _gsl_error(79447,79413,83,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$3>>2] = 1;
 _gsl_permutation_init($2);
 $22 = ($13|0)==(0);
 if (!($22)) {
  $23 = ((($4)) + 8|0);
  $24 = ((($4)) + 4|0);
  $$0122141 = 0;
  while(1) {
   _gsl_matrix_column($5,$0,$$0122141);
   $25 = (+_gsl_blas_dnrm2($5));
   $26 = HEAP32[$23>>2]|0;
   $27 = HEAP32[$24>>2]|0;
   $28 = Math_imul($27, $$0122141)|0;
   $29 = (($26) + ($28<<3)|0);
   HEAPF64[$29>>3] = $25;
   $30 = (($$0122141) + 1)|0;
   $exitcond146 = ($30|0)==($13|0);
   if ($exitcond146) {
    break;
   } else {
    $$0122141 = $30;
   }
  }
 }
 $31 = ($14|0)==(0);
 if ($31) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = ((($4)) + 8|0);
 $33 = ((($4)) + 4|0);
 $34 = ((($1)) + 8|0);
 $35 = ((($1)) + 4|0);
 $36 = ((($0)) + 12|0);
 $37 = ((($0)) + 8|0);
 $$1123138 = 0;
 while(1) {
  $38 = HEAP32[$32>>2]|0;
  $39 = HEAP32[$33>>2]|0;
  $40 = (($$1123138) + 1)|0;
  $41 = ($13>>>0)>($40>>>0);
  if ($41) {
   $42 = Math_imul($39, $$1123138)|0;
   $43 = (($38) + ($42<<3)|0);
   $44 = +HEAPF64[$43>>3];
   $$0124133 = $44;$$0126132 = $$1123138;$$0128131 = $40;
   while(1) {
    $45 = Math_imul($$0128131, $39)|0;
    $46 = (($38) + ($45<<3)|0);
    $47 = +HEAPF64[$46>>3];
    $48 = $47 > $$0124133;
    $$1127 = $48 ? $$0128131 : $$0126132;
    $$1125 = $48 ? $47 : $$0124133;
    $49 = (($$0128131) + 1)|0;
    $exitcond = ($49|0)==($13|0);
    if ($exitcond) {
     break;
    } else {
     $$0124133 = $$1125;$$0126132 = $$1127;$$0128131 = $49;
    }
   }
   $50 = ($$1127|0)==($$1123138|0);
   if (!($50)) {
    (_gsl_matrix_swap_columns($0,$$1123138,$$1127)|0);
    (_gsl_permutation_swap($2,$$1123138,$$1127)|0);
    (_gsl_vector_swap_elements($4,$$1123138,$$1127)|0);
    $51 = HEAP32[$3>>2]|0;
    $52 = (0 - ($51))|0;
    HEAP32[$3>>2] = $52;
   }
  }
  _gsl_matrix_column($6,$0,$$1123138);
  $53 = (($11) - ($$1123138))|0;
  _gsl_vector_subvector($7,$6,$$1123138,$53);
  $54 = (+_gsl_linalg_householder_transform($7));
  $55 = HEAP32[$34>>2]|0;
  $56 = HEAP32[$35>>2]|0;
  $57 = Math_imul($56, $$1123138)|0;
  $58 = (($55) + ($57<<3)|0);
  HEAPF64[$58>>3] = $54;
  if ($41) {
   $59 = (($13) - ($40))|0;
   _gsl_matrix_submatrix($8,$0,$$1123138,$40,$53,$59);
   (_gsl_linalg_householder_hm($54,$7,$8)|0);
   $60 = ($11>>>0)>($40>>>0);
   $or$cond = $60 & $41;
   if ($or$cond) {
    $61 = (($11) - ($40))|0;
    $$pre = HEAP32[$32>>2]|0;
    $$pre147 = HEAP32[$33>>2]|0;
    $$1129134 = $40;$63 = $$pre147;$65 = $$pre;
    while(1) {
     $62 = Math_imul($63, $$1129134)|0;
     $64 = (($65) + ($62<<3)|0);
     $66 = +HEAPF64[$64>>3];
     $67 = $66 > 0.0;
     if ($67) {
      $68 = HEAP32[$36>>2]|0;
      $69 = HEAP32[$37>>2]|0;
      $70 = Math_imul($69, $$1123138)|0;
      $71 = (($70) + ($$1129134))|0;
      $72 = (($68) + ($71<<3)|0);
      $73 = +HEAPF64[$72>>3];
      $74 = $73 / $66;
      $75 = (+Math_abs((+$74)));
      $76 = !($75 >= 1.0);
      $77 = $74 * $74;
      $78 = 1.0 - $77;
      $79 = (+Math_sqrt((+$78)));
      $80 = $66 * $79;
      $$0121 = $76 ? $80 : 0.0;
      $81 = $$0121 / $66;
      $82 = (+Math_abs((+$81)));
      $83 = $82 < 6.6640018746250564E-8;
      if ($83) {
       _gsl_matrix_column($9,$0,$$1129134);
       _gsl_vector_subvector($10,$9,$40,$61);
       $84 = (+_gsl_blas_dnrm2($10));
       $$pre148 = HEAP32[$32>>2]|0;
       $$pre149 = HEAP32[$33>>2]|0;
       $$pre150 = Math_imul($$pre149, $$1129134)|0;
       $$pre151 = (($$pre148) + ($$pre150<<3)|0);
       $$1 = $84;$$pre$phi152Z2D = $$pre151;$89 = $$pre149;$90 = $$pre148;
      } else {
       $$1 = $$0121;$$pre$phi152Z2D = $64;$89 = $63;$90 = $65;
      }
      HEAPF64[$$pre$phi152Z2D>>3] = $$1;
      $87 = $89;$88 = $90;
     } else {
      $87 = $63;$88 = $65;
     }
     $85 = (($$1129134) + 1)|0;
     $exitcond145 = ($85|0)==($13|0);
     if ($exitcond145) {
      break;
     } else {
      $$1129134 = $85;$63 = $87;$65 = $88;
     }
    }
   }
  } else {
  }
  $86 = ($40>>>0)<($14>>>0);
  if ($86) {
   $$1123138 = $40;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _gsl_linalg_QRPT_lssolve2($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$041 = 0, $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 40|0;
 $8 = sp + 20|0;
 $9 = sp;
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)<($12>>>0);
 if ($13) {
  _gsl_error(79534,79413,337,19);
  $$041 = 19;
  STACKTOP = sp;return ($$041|0);
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = ($10|0)==($14|0);
 if (!($15)) {
  _gsl_error(79467,79413,341,19);
  $$041 = 19;
  STACKTOP = sp;return ($$041|0);
 }
 $16 = (($4) + -1)|0;
 $17 = ($16>>>0)<($12>>>0);
 if (!($17)) {
  _gsl_error(79559,79413,345,19);
  $$041 = 19;
  STACKTOP = sp;return ($$041|0);
 }
 $18 = HEAP32[$5>>2]|0;
 $19 = ($12|0)==($18|0);
 if (!($19)) {
  _gsl_error(79497,79413,349,19);
  $$041 = 19;
  STACKTOP = sp;return ($$041|0);
 }
 $20 = HEAP32[$6>>2]|0;
 $21 = ($10|0)==($20|0);
 if (!($21)) {
  _gsl_error(79588,79413,353,19);
  $$041 = 19;
  STACKTOP = sp;return ($$041|0);
 }
 _gsl_matrix_const_submatrix($7,$0,0,0,$4,$4);
 _gsl_vector_subvector($8,$6,0,$4);
 _gsl_vector_subvector($9,$5,0,$4);
 (_gsl_vector_memcpy($6,$3)|0);
 (_gsl_linalg_QR_QTvec($0,$1,$6)|0);
 (_gsl_vector_memcpy($9,$8)|0);
 (_gsl_blas_dtrsv(121,111,131,$7,$9)|0);
 $22 = ($12>>>0)>($4>>>0);
 if ($22) {
  $23 = ((($5)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($5)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $$042 = $4;
  while(1) {
   $27 = Math_imul($26, $$042)|0;
   $28 = (($24) + ($27<<3)|0);
   HEAPF64[$28>>3] = 0.0;
   $29 = (($$042) + 1)|0;
   $exitcond = ($29|0)==($12|0);
   if ($exitcond) {
    break;
   } else {
    $$042 = $29;
   }
  }
 }
 (_gsl_permute_vector_inverse($2,$5)|0);
 _gsl_vector_set_zero($8);
 (_gsl_linalg_QR_Qvec($0,$1,$6)|0);
 $$041 = 0;
 STACKTOP = sp;return ($$041|0);
}
function _gsl_linalg_QRPT_rank($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $$03437 = 0, $$035$lcssa = 0, $$03536 = 0, $$1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _gsl_matrix_const_diagonal($2,$0);
 $8 = $1 < 0.0;
 if ($8) {
  _gsl_vector_minmax($2,$3,$4);
  $9 = +HEAPF64[$3>>3];
  $10 = (+Math_abs((+$9)));
  $11 = +HEAPF64[$4>>3];
  $12 = (+Math_abs((+$11)));
  $13 = $10 > $12;
  $14 = $13 ? $10 : $12;
  $15 = (+Math_log((+$14)));
  $16 = $15 / 0.69314718055994529;
  $17 = (~~(($16)));
  $18 = (($7) + ($5))|0;
  $19 = (+($18>>>0));
  $20 = $19 * 20.0;
  $21 = (+_ldexp(1.0,$17));
  $22 = $20 * $21;
  $23 = $22 * 2.2204460492503131E-16;
  $$0 = $23;
 } else {
  $$0 = $1;
 }
 $24 = ($5>>>0)<($7>>>0);
 $25 = $24 ? $5 : $7;
 $26 = ($25|0)==(0);
 if ($26) {
  $$035$lcssa = 0;
  STACKTOP = sp;return ($$035$lcssa|0);
 }
 $27 = ((($2)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $$03437 = 0;$$03536 = 0;
 while(1) {
  $31 = Math_imul($30, $$03437)|0;
  $32 = (($28) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = (+Math_abs((+$33)));
  $35 = $34 > $$0;
  $36 = $35&1;
  $$1 = (($$03536) + ($36))|0;
  $37 = (($$03437) + 1)|0;
  $38 = ($37>>>0)<($25>>>0);
  if ($38) {
   $$03437 = $37;$$03536 = $$1;
  } else {
   $$035$lcssa = $$1;
   break;
  }
 }
 STACKTOP = sp;return ($$035$lcssa|0);
}
function _gsl_linalg_QRPT_rcond($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<($6>>>0);
 if ($7) {
  _gsl_error(79625,79413,628,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ($6*3)|0;
 $10 = ($8|0)==($9|0);
 if ($10) {
  _gsl_matrix_const_submatrix($3,$0,0,0,$6,$6);
  $11 = (_gsl_linalg_tri_rcond(121,$3,$1,$2)|0);
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 } else {
  _gsl_error(79640,79413,632,19);
  $$0 = 19;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _gsl_matrix_memcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$024 = 0, $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 20|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($1)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==($8|0);
  if ($11) {
   $12 = ($4|0)==(0);
   if ($12) {
    $$024 = 0;
    STACKTOP = sp;return ($$024|0);
   }
   $$025 = 0;
   while(1) {
    _gsl_matrix_const_row($2,$1,$$025);
    _gsl_matrix_row($3,$0,$$025);
    (_gsl_blas_dcopy($2,$3)|0);
    $13 = (($$025) + 1)|0;
    $exitcond = ($13|0)==($4|0);
    if ($exitcond) {
     $$024 = 0;
     break;
    } else {
     $$025 = $13;
    }
   }
   STACKTOP = sp;return ($$024|0);
  }
 }
 _gsl_error(79673,79700,33,19);
 $$024 = 19;
 STACKTOP = sp;return ($$024|0);
}
function _gsl_matrix_alloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_malloc(24)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _gsl_error(79716,82978,31,8);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = Math_imul($1, $0)|0;
 $5 = (_gsl_block_alloc($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _gsl_error(82994,82978,41,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  $7 = ((($5)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($2)) + 12|0);
  HEAP32[$9>>2] = $8;
  HEAP32[$2>>2] = $0;
  $10 = ((($2)) + 4|0);
  HEAP32[$10>>2] = $1;
  $11 = ((($2)) + 8|0);
  HEAP32[$11>>2] = $1;
  $12 = ((($2)) + 16|0);
  HEAP32[$12>>2] = $5;
  $13 = ((($2)) + 20|0);
  HEAP32[$13>>2] = 1;
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_matrix_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  _gsl_block_free($6);
 }
 _free($0);
 return;
}
function _gsl_matrix_row($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink38 = 0, $$sink39 = 0, $$sroa$824$0$$sroa_idx25 = 0, $$sroa$824$0$$sroa_idx26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3>>>0)>($2>>>0);
 if ($4) {
  $5 = ((($1)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = Math_imul($8, $2)|0;
  $10 = (($6) + ($9<<3)|0);
  $11 = ((($1)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($1)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $$sroa$824$0$$sroa_idx26 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx26>>2] = $14;
  $$sink = $10;$$sink38 = 1;$$sink39 = $12;
 } else {
  _gsl_error(79777,79759,27,4);
  $$sroa$824$0$$sroa_idx25 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx25>>2] = 0;
  $$sink = 0;$$sink38 = 0;$$sink39 = 0;
 }
 HEAP32[$0>>2] = $$sink39;
 $15 = ((($0)) + 4|0);
 HEAP32[$15>>2] = $$sink38;
 $16 = ((($0)) + 8|0);
 HEAP32[$16>>2] = $$sink;
 $17 = ((($0)) + 16|0);
 HEAP32[$17>>2] = 0;
 return;
}
function _gsl_matrix_column($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink38 = 0, $$sink39 = 0, $$sroa$824$0$$sroa_idx25 = 0, $$sroa$824$0$$sroa_idx26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>($2>>>0);
 if ($5) {
  $6 = ((($1)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($2<<3)|0);
  $9 = HEAP32[$1>>2]|0;
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $$sroa$824$0$$sroa_idx26 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx26>>2] = $13;
  $$sink = $8;$$sink38 = $11;$$sink39 = $9;
 } else {
  _gsl_error(79824,79759,51,4);
  $$sroa$824$0$$sroa_idx25 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx25>>2] = 0;
  $$sink = 0;$$sink38 = 0;$$sink39 = 0;
 }
 HEAP32[$0>>2] = $$sink39;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $$sink38;
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $$sink;
 $16 = ((($0)) + 16|0);
 HEAP32[$16>>2] = 0;
 return;
}
function _gsl_matrix_const_row($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink38 = 0, $$sink39 = 0, $$sroa$824$0$$sroa_idx25 = 0, $$sroa$824$0$$sroa_idx26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3>>>0)>($2>>>0);
 if ($4) {
  $5 = ((($1)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = Math_imul($8, $2)|0;
  $10 = (($6) + ($9<<3)|0);
  $11 = ((($1)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($1)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $$sroa$824$0$$sroa_idx26 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx26>>2] = $14;
  $$sink = $10;$$sink38 = 1;$$sink39 = $12;
 } else {
  _gsl_error(79777,79759,27,4);
  $$sroa$824$0$$sroa_idx25 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx25>>2] = 0;
  $$sink = 0;$$sink38 = 0;$$sink39 = 0;
 }
 HEAP32[$0>>2] = $$sink39;
 $15 = ((($0)) + 4|0);
 HEAP32[$15>>2] = $$sink38;
 $16 = ((($0)) + 8|0);
 HEAP32[$16>>2] = $$sink;
 $17 = ((($0)) + 16|0);
 HEAP32[$17>>2] = 0;
 return;
}
function _gsl_matrix_const_column($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink38 = 0, $$sink39 = 0, $$sroa$824$0$$sroa_idx25 = 0, $$sroa$824$0$$sroa_idx26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>($2>>>0);
 if ($5) {
  $6 = ((($1)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($2<<3)|0);
  $9 = HEAP32[$1>>2]|0;
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $$sroa$824$0$$sroa_idx26 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx26>>2] = $13;
  $$sink = $8;$$sink38 = $11;$$sink39 = $9;
 } else {
  _gsl_error(79824,79759,51,4);
  $$sroa$824$0$$sroa_idx25 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx25>>2] = 0;
  $$sink = 0;$$sink38 = 0;$$sink39 = 0;
 }
 HEAP32[$0>>2] = $$sink39;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $$sink38;
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $$sink;
 $16 = ((($0)) + 16|0);
 HEAP32[$16>>2] = 0;
 return;
}
function _gsl_matrix_const_diagonal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sroa$512$0$$sroa_idx13 = 0, $$sroa$615$0$$sroa_idx16 = 0, $$sroa$718$0$$sroa_idx19 = 0, $$sroa$821$0$$sroa_idx22 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<($6>>>0);
 $$ = $7 ? $4 : $6;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = ((($1)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$0>>2] = $$;
 $$sroa$512$0$$sroa_idx13 = ((($0)) + 4|0);
 HEAP32[$$sroa$512$0$$sroa_idx13>>2] = $10;
 $$sroa$615$0$$sroa_idx16 = ((($0)) + 8|0);
 HEAP32[$$sroa$615$0$$sroa_idx16>>2] = $3;
 $$sroa$718$0$$sroa_idx19 = ((($0)) + 12|0);
 HEAP32[$$sroa$718$0$$sroa_idx19>>2] = $12;
 $$sroa$821$0$$sroa_idx22 = ((($0)) + 16|0);
 HEAP32[$$sroa$821$0$$sroa_idx22>>2] = 0;
 return;
}
function _gsl_matrix_submatrix($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sroa$10$0$$sroa_idx40 = 0, $$sroa$11$0$$sroa_idx50 = 0, $$sroa$12$0$$sroa_idx60 = 0, $$sroa$13$0$$sroa_idx70 = 0, $$sroa$922$0$$sroa_idx30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6>>>0)>($2>>>0);
 if (!($7)) {
  _gsl_error(79777,79803,29,4);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  return;
 }
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>($3>>>0);
 if (!($10)) {
  _gsl_error(79824,79803,33,4);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  return;
 }
 $11 = (($4) + ($2))|0;
 $12 = ($11>>>0)>($6>>>0);
 if ($12) {
  _gsl_error(79853,79803,37,4);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  return;
 }
 $13 = (($5) + ($3))|0;
 $14 = ($13>>>0)>($9>>>0);
 if ($14) {
  _gsl_error(79886,79803,41,4);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  return;
 } else {
  $15 = ((($1)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($1)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = Math_imul($18, $2)|0;
  $20 = (($19) + ($3))|0;
  $21 = (($16) + ($20<<3)|0);
  $22 = ((($1)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$0>>2] = $4;
  $$sroa$922$0$$sroa_idx30 = ((($0)) + 4|0);
  HEAP32[$$sroa$922$0$$sroa_idx30>>2] = $5;
  $$sroa$10$0$$sroa_idx40 = ((($0)) + 8|0);
  HEAP32[$$sroa$10$0$$sroa_idx40>>2] = $18;
  $$sroa$11$0$$sroa_idx50 = ((($0)) + 12|0);
  HEAP32[$$sroa$11$0$$sroa_idx50>>2] = $21;
  $$sroa$12$0$$sroa_idx60 = ((($0)) + 16|0);
  HEAP32[$$sroa$12$0$$sroa_idx60>>2] = $23;
  $$sroa$13$0$$sroa_idx70 = ((($0)) + 20|0);
  HEAP32[$$sroa$13$0$$sroa_idx70>>2] = 0;
  return;
 }
}
function _gsl_matrix_const_submatrix($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sroa$10$0$$sroa_idx40 = 0, $$sroa$11$0$$sroa_idx50 = 0, $$sroa$12$0$$sroa_idx60 = 0, $$sroa$13$0$$sroa_idx70 = 0, $$sroa$922$0$$sroa_idx30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6>>>0)>($2>>>0);
 if (!($7)) {
  _gsl_error(79777,79803,29,4);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  return;
 }
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>($3>>>0);
 if (!($10)) {
  _gsl_error(79824,79803,33,4);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  return;
 }
 $11 = (($4) + ($2))|0;
 $12 = ($11>>>0)>($6>>>0);
 if ($12) {
  _gsl_error(79853,79803,37,4);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  return;
 }
 $13 = (($5) + ($3))|0;
 $14 = ($13>>>0)>($9>>>0);
 if ($14) {
  _gsl_error(79886,79803,41,4);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  return;
 } else {
  $15 = ((($1)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($1)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = Math_imul($18, $2)|0;
  $20 = (($19) + ($3))|0;
  $21 = (($16) + ($20<<3)|0);
  $22 = ((($1)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$0>>2] = $4;
  $$sroa$922$0$$sroa_idx30 = ((($0)) + 4|0);
  HEAP32[$$sroa$922$0$$sroa_idx30>>2] = $5;
  $$sroa$10$0$$sroa_idx40 = ((($0)) + 8|0);
  HEAP32[$$sroa$10$0$$sroa_idx40>>2] = $18;
  $$sroa$11$0$$sroa_idx50 = ((($0)) + 12|0);
  HEAP32[$$sroa$11$0$$sroa_idx50>>2] = $21;
  $$sroa$12$0$$sroa_idx60 = ((($0)) + 16|0);
  HEAP32[$$sroa$12$0$$sroa_idx60>>2] = $23;
  $$sroa$13$0$$sroa_idx70 = ((($0)) + 20|0);
  HEAP32[$$sroa$13$0$$sroa_idx70>>2] = 0;
  return;
 }
}
function _gsl_matrix_swap_columns($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04850 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)>($1>>>0);
 if (!($6)) {
  _gsl_error(79920,83133,64,4);
  $$0 = 4;
  return ($$0|0);
 }
 $7 = ($5>>>0)>($2>>>0);
 if (!($7)) {
  _gsl_error(79955,83133,69,4);
  $$0 = 4;
  return ($$0|0);
 }
 $8 = ($1|0)==($2|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($1<<3)|0);
 $12 = (($10) + ($2<<3)|0);
 $13 = ($3|0)==(0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $$04850 = 0;
 while(1) {
  $16 = Math_imul($15, $$04850)|0;
  $17 = (($11) + ($16<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = (($12) + ($16<<3)|0);
  $20 = +HEAPF64[$19>>3];
  HEAPF64[$17>>3] = $20;
  HEAPF64[$19>>3] = $18;
  $21 = (($$04850) + 1)|0;
  $exitcond = ($21|0)==($3|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  } else {
   $$04850 = $21;
  }
 }
 return ($$0|0);
}
function _brent_init($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = $6 - $4;
 $9 = $8 * 0.38196600000000003;
 $10 = $9 + $4;
 $11 = ((($0)) + 16|0);
 HEAPF64[$11>>3] = $10;
 $12 = ((($0)) + 24|0);
 HEAPF64[$12>>3] = $10;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (+FUNCTION_TABLE_ddi[$13 & 63]($10,$15));
 $17 = (_gsl_finite($16)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  _gsl_error(80027,81828,69,9);
  $$0 = 9;
  return ($$0|0);
 } else {
  $19 = ((($0)) + 32|0);
  HEAPF64[$19>>3] = $16;
  $20 = ((($0)) + 40|0);
  HEAPF64[$20>>3] = $16;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _brent_iterate($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0180 = 0.0, $$0181 = 0.0, $$0183 = 0.0, $$0185 = 0.0, $$0187 = 0.0, $$1 = 0.0, $$1$pn = 0.0, $$1182 = 0.0, $$1184 = 0.0, $$1186 = 0.0, $$pre = 0.0, $$pre$phiZ2D = 0.0, $$sink = 0, $$sink196 = 0, $$sink197 = 0, $$sink198 = 0, $10 = 0.0, $11 = 0, $12 = 0.0;
 var $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0.0;
 var $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $70 = 0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0.0, $or$cond = 0, $or$cond190 = 0, $or$cond192 = 0, $or$cond193 = 0, $or$cond194 = 0, $or$cond195 = 0;
 var $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = +HEAPF64[$4>>3];
 $9 = +HEAPF64[$6>>3];
 $10 = +HEAPF64[$2>>3];
 $11 = ((($0)) + 8|0);
 $12 = +HEAPF64[$0>>3];
 $13 = ((($0)) + 16|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($0)) + 24|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($0)) + 32|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($0)) + 40|0);
 $20 = +HEAPF64[$19>>3];
 $21 = +HEAPF64[$3>>3];
 $22 = $10 - $8;
 $23 = $9 - $10;
 $24 = (+Math_abs((+$10)));
 $25 = $24 * 1.4901161193847656E-8;
 $26 = $8 + $9;
 $27 = $26 * 0.5;
 $28 = (+Math_abs((+$12)));
 $29 = $28 > $25;
 if ($29) {
  $30 = +HEAPF64[$11>>3];
  $31 = $10 - $16;
  $32 = $21 - $18;
  $33 = $31 * $32;
  $34 = $10 - $14;
  $35 = $21 - $20;
  $36 = $34 * $35;
  $37 = $34 * $36;
  $38 = $31 * $33;
  $39 = $37 - $38;
  $40 = $36 - $33;
  $41 = $40 * 2.0;
  $42 = $41 > 0.0;
  $43 = - $39;
  $44 = - $41;
  $$0183 = $42 ? $43 : $39;
  $$0181 = $42 ? $41 : $44;
  $$0180 = $12;$$0185 = $30;$$1182 = $$0181;$$1184 = $$0183;
 } else {
  $$0180 = 0.0;$$0185 = $12;$$1182 = 0.0;$$1184 = 0.0;
 }
 $45 = (+Math_abs((+$$1184)));
 $46 = $$1182 * 0.5;
 $47 = $46 * $$0180;
 $48 = (+Math_abs((+$47)));
 $49 = $45 < $48;
 $50 = $22 * $$1182;
 $51 = $$1184 < $50;
 $or$cond = $51 & $49;
 $52 = $23 * $$1182;
 $53 = $$1184 < $52;
 $or$cond190 = $53 & $or$cond;
 if ($or$cond190) {
  $54 = $25 * 2.0;
  $55 = $$1184 / $$1182;
  $56 = $10 + $55;
  $57 = $56 - $8;
  $58 = $57 < $54;
  $59 = $9 - $56;
  $60 = $59 < $54;
  $or$cond192 = $58 | $60;
  $61 = $10 < $27;
  $62 = - $25;
  $63 = $61 ? $25 : $62;
  $spec$select = $or$cond192 ? $63 : $55;
  $$1 = $spec$select;$$1186 = $$0185;$$pre$phiZ2D = $62;
 } else {
  $64 = $10 < $27;
  $65 = - $22;
  $66 = $64 ? $23 : $65;
  $67 = $66 * 0.38196600000000003;
  $$pre = - $25;
  $$1 = $67;$$1186 = $66;$$pre$phiZ2D = $$pre;
 }
 $68 = (+Math_abs((+$$1)));
 $69 = !($68 >= $25);
 $70 = $$1 > 0.0;
 $71 = $70 ? $25 : $$pre$phiZ2D;
 $$1$pn = $69 ? $71 : $$1;
 $$0187 = $10 + $$1$pn;
 HEAPF64[$11>>3] = $$1186;
 HEAPF64[$0>>3] = $$1;
 $72 = HEAP32[$1>>2]|0;
 $73 = ((($1)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (+FUNCTION_TABLE_ddi[$72 & 63]($$0187,$74));
 $76 = (_gsl_finite($75)|0);
 $77 = ($76|0)==(0);
 if ($77) {
  _gsl_error(80027,81828,159,9);
  $$0 = 9;
  return ($$0|0);
 }
 $78 = !($75 <= $21);
 $79 = $$0187 < $10;
 if (!($78)) {
  $$sink196 = $79 ? $6 : $4;
  $$sink = $79 ? $7 : $5;
  HEAPF64[$$sink196>>3] = $10;
  HEAPF64[$$sink>>3] = $21;
  HEAPF64[$13>>3] = $16;
  HEAPF64[$17>>3] = $20;
  HEAPF64[$15>>3] = $10;
  HEAPF64[$19>>3] = $21;
  HEAPF64[$2>>3] = $$0187;
  HEAPF64[$3>>3] = $75;
  $$0 = 0;
  return ($$0|0);
 }
 $$sink198 = $79 ? $4 : $6;
 $$sink197 = $79 ? $5 : $7;
 HEAPF64[$$sink198>>3] = $$0187;
 HEAPF64[$$sink197>>3] = $75;
 $80 = $75 <= $20;
 $81 = $16 == $10;
 $or$cond193 = $81 | $80;
 if ($or$cond193) {
  HEAPF64[$13>>3] = $16;
  HEAPF64[$17>>3] = $20;
  HEAPF64[$15>>3] = $$0187;
  HEAPF64[$19>>3] = $75;
  $$0 = 0;
  return ($$0|0);
 }
 $82 = $75 <= $18;
 $83 = $14 == $10;
 $or$cond194 = $83 | $82;
 $84 = $14 == $16;
 $or$cond195 = $84 | $or$cond194;
 if (!($or$cond195)) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAPF64[$13>>3] = $$0187;
 HEAPF64[$17>>3] = $75;
 $$0 = 0;
 return ($$0|0);
}
function _gsl_min_test_interval($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$ = 0, $$0 = 0, $$034 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (+Math_abs((+$0)));
 $5 = (+Math_abs((+$1)));
 $6 = $3 < 0.0;
 if ($6) {
  _gsl_error(81866,81897,37,13);
  $$0 = 13;
  return ($$0|0);
 }
 $7 = $2 < 0.0;
 if ($7) {
  _gsl_error(81911,81897,40,13);
  $$0 = 13;
  return ($$0|0);
 }
 $8 = $0 > $1;
 if ($8) {
  _gsl_error(79991,81897,43,4);
  $$0 = 4;
  return ($$0|0);
 }
 $9 = $0 > 0.0;
 $10 = $1 > 0.0;
 $or$cond = $9 & $10;
 if ($or$cond) {
  label = 9;
 } else {
  $11 = $0 < 0.0;
  $12 = $1 < 0.0;
  $or$cond3 = $11 & $12;
  if ($or$cond3) {
   label = 9;
  } else {
   $$034 = 0.0;
  }
 }
 if ((label|0) == 9) {
  $13 = $4 < $5;
  $14 = $13 ? $4 : $5;
  $$034 = $14;
 }
 $15 = $$034 * $3;
 $16 = $15 + $2;
 $17 = $1 - $0;
 $18 = (+Math_abs((+$17)));
 $19 = $18 < $16;
 $$ = $19 ? 0 : -2;
 $$0 = $$;
 return ($$0|0);
}
function _gsl_min_fminimizer_set($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $or$cond$i = 0, $or$cond33$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+FUNCTION_TABLE_ddi[$5 & 63]($3,$7));
 $9 = (_gsl_finite($8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  _gsl_error(80027,82026,39,9);
  $$0 = 9;
  return ($$0|0);
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$6>>2]|0;
 $13 = (+FUNCTION_TABLE_ddi[$11 & 63]($4,$12));
 $14 = (_gsl_finite($13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  _gsl_error(80027,82026,40,9);
  $$0 = 9;
  return ($$0|0);
 }
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$6>>2]|0;
 $18 = (+FUNCTION_TABLE_ddi[$16 & 63]($2,$17));
 $19 = (_gsl_finite($18)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  _gsl_error(80027,82026,41,9);
  $$0 = 9;
  return ($$0|0);
 }
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $1;
 $22 = ((($0)) + 8|0);
 HEAPF64[$22>>3] = $2;
 $23 = ((($0)) + 16|0);
 HEAPF64[$23>>3] = $3;
 $24 = ((($0)) + 24|0);
 HEAPF64[$24>>3] = $4;
 $25 = $3 > $4;
 if ($25) {
  _gsl_error(82083,82026,111,4);
  $$0 = 4;
  return ($$0|0);
 }
 $26 = !($2 >= $4);
 $27 = !($2 <= $3);
 $or$cond$i = $27 & $26;
 if (!($or$cond$i)) {
  _gsl_error(80070,82026,117,4);
  $$0 = 4;
  return ($$0|0);
 }
 $28 = ((($0)) + 40|0);
 HEAPF64[$28>>3] = $8;
 $29 = ((($0)) + 48|0);
 HEAPF64[$29>>3] = $13;
 $30 = ((($0)) + 32|0);
 HEAPF64[$30>>3] = $18;
 $31 = !($18 >= $8);
 $32 = !($18 >= $13);
 $or$cond33$i = $31 & $32;
 if ($or$cond33$i) {
  $33 = HEAP32[$0>>2]|0;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($0)) + 56|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iiidddddd[$35 & 7]($37,$1,$2,$18,$3,$8,$4,$13)|0);
  $$0 = $38;
  return ($$0|0);
 } else {
  _gsl_error(80125,82026,126,4);
  $$0 = 4;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_min_fminimizer_alloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(64)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _gsl_error(80160,82026,79,8);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_malloc($4)|0);
 $6 = ((($1)) + 56|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _free($1);
  _gsl_error(80206,82026,89,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$1>>2] = $0;
  $8 = ((($1)) + 4|0);
  HEAP32[$8>>2] = 0;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_min_fminimizer_iterate($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = ((($0)) + 32|0);
 $10 = ((($0)) + 16|0);
 $11 = ((($0)) + 40|0);
 $12 = ((($0)) + 24|0);
 $13 = ((($0)) + 48|0);
 $14 = (FUNCTION_TABLE_iiiiiiiii[$3 & 31]($5,$7,$8,$9,$10,$11,$12,$13)|0);
 return ($14|0);
}
function _gsl_min_fminimizer_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 _free($0);
 return;
}
function _gsl_min_fminimizer_x_minimum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _gsl_min_fminimizer_x_lower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _gsl_min_fminimizer_x_upper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _gsl_multifit_nlinear_test($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$026$lcssa$i = 0.0, $$02627$i = 0.0, $$02732$i = 0, $$028$i = 0, $$1$i = 0.0, $$in = 0, $$pre = 0, $$pre27 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$3>>2] = 0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0 * $0;
 $10 = HEAP32[$8>>2]|0;
 $11 = $0 < 0.0;
 L1: do {
  if ($11) {
   _gsl_error(81866,81897,102,13);
   $$pre = HEAP32[$7>>2]|0;
   $$pre27 = HEAP32[$$pre>>2]|0;
   $34 = ($$pre27|0)==(0);
   if ($34) {
    $$026$lcssa$i = 0.0;
    label = 9;
   } else {
    $37 = $$pre;$57 = $$pre27;
    label = 7;
   }
  } else {
   $12 = ($10|0)==(0);
   if ($12) {
    $$sink = 1;
   } else {
    $13 = ((($8)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($8)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($6)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($6)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $$02732$i = 0;
    while(1) {
     $23 = Math_imul($$02732$i, $16)|0;
     $24 = (($14) + ($23<<3)|0);
     $25 = +HEAPF64[$24>>3];
     $26 = Math_imul($$02732$i, $20)|0;
     $27 = (($18) + ($26<<3)|0);
     $28 = +HEAPF64[$27>>3];
     $29 = (+Math_abs((+$25)));
     $30 = $29 * $0;
     $31 = $9 + $30;
     $32 = (+Math_abs((+$28)));
     $33 = $32 < $31;
     $22 = (($$02732$i) + 1)|0;
     if (!($33)) {
      $37 = $8;$57 = $10;
      label = 7;
      break L1;
     }
     $21 = ($22>>>0)<($10>>>0);
     if ($21) {
      $$02732$i = $22;
     } else {
      $$sink = 1;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $$in = ((($4)) + 20|0);
  $35 = HEAP32[$$in>>2]|0;
  $36 = ((($37)) + 8|0);
  $38 = HEAP32[$36>>2]|0;
  $39 = ((($37)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($35)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($35)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $$02627$i = 0.0;$$028$i = 0;
  while(1) {
   $45 = Math_imul($$028$i, $40)|0;
   $46 = (($38) + ($45<<3)|0);
   $47 = +HEAPF64[$46>>3];
   $48 = $47 > 1.0;
   $49 = $48 ? $47 : 1.0;
   $50 = Math_imul($$028$i, $44)|0;
   $51 = (($42) + ($50<<3)|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $52 * $49;
   $54 = (+Math_abs((+$53)));
   $55 = $54 > $$02627$i;
   $$1$i = $55 ? $54 : $$02627$i;
   $56 = (($$028$i) + 1)|0;
   $exitcond$i = ($56|0)==($57|0);
   if ($exitcond$i) {
    $$026$lcssa$i = $$1$i;
    label = 9;
    break;
   } else {
    $$02627$i = $$1$i;$$028$i = $56;
   }
  }
 }
 if ((label|0) == 9) {
  $58 = ((($4)) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (+_gsl_blas_dnrm2($59));
  $61 = $60 * 0.5;
  $62 = $60 * $61;
  $63 = $62 > 1.0;
  $64 = $63 ? $62 : 1.0;
  $65 = $64 * $1;
  $66 = !($$026$lcssa$i <= $65);
  if ($66) {
   $$0 = -2;
   return ($$0|0);
  } else {
   $$sink = 2;
  }
 }
 HEAP32[$3>>2] = $$sink;
 $$0 = 0;
 return ($$0|0);
}
function _gsl_multifit_nlinear_alloc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _gsl_error(80251,80283,37,4);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_calloc(1,104)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _gsl_error(80289,80283,44,8);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_gsl_vector_calloc($3)|0);
 $8 = ((($5)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ($7|0)==(0|0);
 if ($9) {
  _gsl_multifit_nlinear_free($5);
  _gsl_error(80337,80283,51,8);
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (_gsl_vector_calloc($2)|0);
 $11 = ((($5)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = ($10|0)==(0|0);
 if ($12) {
  _gsl_multifit_nlinear_free($5);
  _gsl_error(80368,80283,58,8);
  $$0 = 0;
  return ($$0|0);
 }
 $13 = (_gsl_vector_calloc($3)|0);
 $14 = ((($5)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ($13|0)==(0|0);
 if ($15) {
  _gsl_multifit_nlinear_free($5);
  _gsl_error(80399,80283,65,8);
  $$0 = 0;
  return ($$0|0);
 }
 $16 = (_gsl_vector_alloc($3)|0);
 $17 = ((($5)) + 20|0);
 HEAP32[$17>>2] = $16;
 $18 = ($16|0)==(0|0);
 if ($18) {
  _gsl_multifit_nlinear_free($5);
  _gsl_error(80431,80283,72,8);
  $$0 = 0;
  return ($$0|0);
 }
 $19 = (_gsl_matrix_alloc($2,$3)|0);
 $20 = ((($5)) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = ($19|0)==(0|0);
 if ($21) {
  _gsl_multifit_nlinear_free($5);
  _gsl_error(80462,80283,79,8);
  $$0 = 0;
  return ($$0|0);
 }
 $22 = (_gsl_vector_calloc($2)|0);
 $23 = ((($5)) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = ($22|0)==(0|0);
 if ($24) {
  _gsl_multifit_nlinear_free($5);
  _gsl_error(80500,80283,86,8);
  $$0 = 0;
  return ($$0|0);
 }
 $25 = ((($0)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (FUNCTION_TABLE_iiii[$26 & 127]($1,$2,$3)|0);
 $28 = ((($5)) + 96|0);
 HEAP32[$28>>2] = $27;
 $29 = ($27|0)==(0|0);
 if ($29) {
  _gsl_multifit_nlinear_free($5);
  _gsl_error(80537,80283,93,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$5>>2] = $0;
  $30 = ((($5)) + 4|0);
  HEAP32[$30>>2] = 0;
  $31 = ((($5)) + 36|0);
  HEAP32[$31>>2] = 0;
  $32 = ((($5)) + 40|0);
  dest=$32; src=$1; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $$0 = $5;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_multifit_nlinear_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 31]($3);
 }
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _gsl_vector_free($9);
 }
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  _gsl_vector_free($12);
 }
 $14 = ((($0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  _gsl_vector_free($15);
 }
 $17 = ((($0)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  _gsl_vector_free($18);
 }
 $20 = ((($0)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _gsl_vector_free($21);
 }
 $23 = ((($0)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _gsl_matrix_free($24);
 }
 _free($0);
 return;
}
function _gsl_multifit_nlinear_default_parameters($0) {
 $0 = $0|0;
 var $$sroa$10$0$$sroa_idx14 = 0, $$sroa$11$0$$sroa_idx16 = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_idx4 = 0, $$sroa$6$0$$sroa_idx6 = 0, $$sroa$7$0$$sroa_idx8 = 0, $$sroa$8$0$$sroa_idx10 = 0, $$sroa$9$0$$sroa_idx12 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[16886]|0;
 $2 = HEAP32[16909]|0;
 $3 = HEAP32[16901]|0;
 HEAP32[$0>>2] = $1;
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAP32[$$sroa$4$0$$sroa_idx2>>2] = $2;
 $$sroa$5$0$$sroa_idx4 = ((($0)) + 8|0);
 HEAP32[$$sroa$5$0$$sroa_idx4>>2] = $3;
 $$sroa$6$0$$sroa_idx6 = ((($0)) + 12|0);
 HEAP32[$$sroa$6$0$$sroa_idx6>>2] = 0;
 $$sroa$7$0$$sroa_idx8 = ((($0)) + 16|0);
 HEAPF64[$$sroa$7$0$$sroa_idx8>>3] = 3.0;
 $$sroa$8$0$$sroa_idx10 = ((($0)) + 24|0);
 HEAPF64[$$sroa$8$0$$sroa_idx10>>3] = 2.0;
 $$sroa$9$0$$sroa_idx12 = ((($0)) + 32|0);
 HEAPF64[$$sroa$9$0$$sroa_idx12>>3] = 0.75;
 $$sroa$10$0$$sroa_idx14 = ((($0)) + 40|0);
 HEAPF64[$$sroa$10$0$$sroa_idx14>>3] = 1.4901161193847656E-8;
 $$sroa$11$0$$sroa_idx16 = ((($0)) + 48|0);
 HEAPF64[$$sroa$11$0$$sroa_idx16>>3] = 0.02;
 return;
}
function _gsl_multifit_nlinear_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_gsl_multifit_nlinear_winit($0,0,$1,$2)|0);
 return ($3|0);
}
function _gsl_multifit_nlinear_winit($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$04041 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if (!($9)) {
  _gsl_error(80581,80283,169,19);
  $$0 = 19;
  return ($$0|0);
 }
 $10 = ((($3)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = ($12|0)==($13|0);
 if (!($14)) {
  _gsl_error(80620,80283,173,19);
  $$0 = 19;
  return ($$0|0);
 }
 $15 = ($1|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[$1>>2]|0;
  $17 = ($6|0)==($16|0);
  if (!($17)) {
   _gsl_error(80659,80283,177,19);
   $$0 = 19;
   return ($$0|0);
  }
 }
 $18 = ((($2)) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($2)) + 28|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($2)) + 32|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($3)) + 4|0);
 HEAP32[$21>>2] = $2;
 (_gsl_vector_memcpy($11,$0)|0);
 $22 = ((($3)) + 36|0);
 HEAP32[$22>>2] = 0;
 if ($15) {
  $23 = ((($3)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($3)) + 32|0);
  HEAP32[$25>>2] = $24;
  $26 = ($6|0)==(0);
  $27 = $24;
  if ($26) {
   $56 = $27;
  } else {
   $28 = ((($1)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($1)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($27)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($27)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $$04041 = 0;
   while(1) {
    $36 = Math_imul($31, $$04041)|0;
    $37 = (($29) + ($36<<3)|0);
    $38 = +HEAPF64[$37>>3];
    $39 = (+Math_sqrt((+$38)));
    $40 = Math_imul($35, $$04041)|0;
    $41 = (($33) + ($40<<3)|0);
    HEAPF64[$41>>3] = $39;
    $42 = (($$04041) + 1)|0;
    $exitcond = ($42|0)==($6|0);
    if ($exitcond) {
     $56 = $27;
     break;
    } else {
     $$04041 = $42;
    }
   }
  }
 } else {
  $43 = ((($3)) + 32|0);
  HEAP32[$43>>2] = 0;
  $56 = 0;
 }
 $44 = HEAP32[$3>>2]|0;
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($3)) + 96|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$21>>2]|0;
 $50 = HEAP32[$10>>2]|0;
 $51 = HEAP32[$4>>2]|0;
 $52 = ((($3)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($3)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $57 = (FUNCTION_TABLE_iiiiiiii[$46 & 31]($48,$56,$49,$50,$51,$53,$55)|0);
 $$0 = $57;
 return ($$0|0);
}
function _gsl_multifit_nlinear_driver($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0$us = 0, $$043 = 0, $$044 = 0, $$lcssa47 = 0, $$lcssa48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond$us = 0, $or$cond45 = 0, $or$cond45$us = 0, $or$cond7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = ($4|0)!=(0|0);
 if ($8) {
  FUNCTION_TABLE_viii[$4 & 63](0,$5,$7);
 }
 $9 = ((($7)) + 96|0);
 $10 = ((($7)) + 32|0);
 $11 = ((($7)) + 4|0);
 $12 = ((($7)) + 8|0);
 $13 = ((($7)) + 12|0);
 $14 = ((($7)) + 24|0);
 $15 = ((($7)) + 20|0);
 $16 = ((($7)) + 16|0);
 $17 = ((($7)) + 36|0);
 L4: do {
  if ($8) {
   $$0$us = 0;
   while(1) {
    $18 = HEAP32[$7>>2]|0;
    $19 = ((($18)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$9>>2]|0;
    $22 = HEAP32[$10>>2]|0;
    $23 = HEAP32[$11>>2]|0;
    $24 = HEAP32[$12>>2]|0;
    $25 = HEAP32[$13>>2]|0;
    $26 = HEAP32[$14>>2]|0;
    $27 = HEAP32[$15>>2]|0;
    $28 = HEAP32[$16>>2]|0;
    $29 = (FUNCTION_TABLE_iiiiiiiii[$20 & 31]($21,$22,$23,$24,$25,$26,$27,$28)|0);
    $30 = HEAP32[$17>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$17>>2] = $31;
    $32 = ($29|0)==(27);
    $33 = ($$0$us|0)==(0);
    $or$cond$us = $33 & $32;
    if ($or$cond$us) {
     label = 9;
     break L4;
    }
    $34 = (($$0$us) + 1)|0;
    FUNCTION_TABLE_viii[$4 & 63]($34,$5,$7);
    $35 = (_gsl_multifit_nlinear_test($1,$2,$3,$6,$7)|0);
    $36 = ($35|0)==(-2);
    $37 = ($34>>>0)<($0>>>0);
    $or$cond45$us = $37 & $36;
    if ($or$cond45$us) {
     $$0$us = $34;
    } else {
     $$lcssa47 = $34;$$lcssa48 = $35;
     break;
    }
   }
  } else {
   $$0 = 0;
   while(1) {
    $38 = HEAP32[$7>>2]|0;
    $39 = ((($38)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$9>>2]|0;
    $42 = HEAP32[$10>>2]|0;
    $43 = HEAP32[$11>>2]|0;
    $44 = HEAP32[$12>>2]|0;
    $45 = HEAP32[$13>>2]|0;
    $46 = HEAP32[$14>>2]|0;
    $47 = HEAP32[$15>>2]|0;
    $48 = HEAP32[$16>>2]|0;
    $49 = (FUNCTION_TABLE_iiiiiiiii[$40 & 31]($41,$42,$43,$44,$45,$46,$47,$48)|0);
    $50 = HEAP32[$17>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$17>>2] = $51;
    $52 = ($49|0)==(27);
    $53 = ($$0|0)==(0);
    $or$cond = $53 & $52;
    if ($or$cond) {
     label = 9;
     break L4;
    }
    $54 = (($$0) + 1)|0;
    $55 = (_gsl_multifit_nlinear_test($1,$2,$3,$6,$7)|0);
    $56 = ($55|0)==(-2);
    $57 = ($54>>>0)<($0>>>0);
    $or$cond45 = $57 & $56;
    if ($or$cond45) {
     $$0 = $54;
    } else {
     $$lcssa47 = $54;$$lcssa48 = $55;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  HEAP32[$6>>2] = 27;
  $$044 = 11;
  return ($$044|0);
 }
 $58 = (($$lcssa48) + -29)|0;
 $59 = ($58>>>0)<(3);
 if ($59) {
  HEAP32[$6>>2] = $$lcssa48;
  $$043 = 0;
 } else {
  $$043 = $$lcssa48;
 }
 $60 = ($$lcssa47>>>0)>=($0>>>0);
 $61 = ($$043|0)!=(0);
 $or$cond7 = $60 & $61;
 $spec$select = $or$cond7 ? 11 : $$043;
 $$044 = $spec$select;
 return ($$044|0);
}
function _gsl_multifit_nlinear_eval_f($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$4 & 127]($1,$6,$3)|0);
 $8 = ((($0)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = ($2|0)==(0|0);
 if ($11) {
  return ($7|0);
 }
 (_gsl_vector_mul($3,$2)|0);
 return ($7|0);
}
function _gsl_multifit_nlinear_eval_df($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$03132 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $29 = (_gsl_multifit_nlinear_df($3,$4,$0,$2,$5,$1,$6,$7)|0);
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ((($5)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$10 & 127]($0,$13,$6)|0);
 $15 = ((($5)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 $18 = ($2|0)==(0|0);
 if ($18) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($2)) + 8|0);
 $22 = ((($2)) + 4|0);
 $$03132 = 0;
 while(1) {
  $23 = HEAP32[$21>>2]|0;
  $24 = HEAP32[$22>>2]|0;
  $25 = Math_imul($24, $$03132)|0;
  $26 = (($23) + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  _gsl_matrix_row($8,$6,$$03132);
  (_gsl_vector_scale($8,$27)|0);
  $28 = (($$03132) + 1)|0;
  $exitcond = ($28|0)==($19|0);
  if ($exitcond) {
   $$0 = $14;
   break;
  } else {
   $$03132 = $28;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _gsl_multifit_nlinear_eval_fvv($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $19 = (_gsl_multifit_nlinear_fdfvv($0,$1,$2,$3,$4,$5,$6,$7,$8)|0);
  $$0 = $19;
  return ($$0|0);
 }
 $12 = ((($6)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiiii[$10 & 63]($1,$2,$13,$7)|0);
 $15 = ((($6)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 $18 = ($5|0)==(0|0);
 if ($18) {
  $$0 = $14;
  return ($$0|0);
 }
 (_gsl_vector_mul($7,$5)|0);
 $$0 = $14;
 return ($$0|0);
}
function _gsl_multifit_nlinear_fdfvv($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$05860$i = 0, $$159$i = 0, $$pre$i = 0, $$pre63$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $9 = 0, $exitcond$i = 0, $exitcond62$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp + 8|0;
 $10 = sp;
 $11 = ((($6)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($6)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = 1.0 / $0;
 $16 = ($14|0)==(0);
 if (!($16)) {
  $17 = ((($1)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($1)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($2)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($8)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($8)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $$05860$i = 0;
  while(1) {
   $29 = Math_imul($$05860$i, $20)|0;
   $30 = (($18) + ($29<<3)|0);
   $31 = +HEAPF64[$30>>3];
   $32 = Math_imul($$05860$i, $24)|0;
   $33 = (($22) + ($32<<3)|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $34 * $0;
   $36 = $31 + $35;
   $37 = Math_imul($$05860$i, $28)|0;
   $38 = (($26) + ($37<<3)|0);
   HEAPF64[$38>>3] = $36;
   $39 = (($$05860$i) + 1)|0;
   $exitcond62$i = ($39|0)==($14|0);
   if ($exitcond62$i) {
    break;
   } else {
    $$05860$i = $39;
   }
  }
 }
 $40 = (_gsl_multifit_nlinear_eval_f($6,$8,$5,$7)|0);
 $41 = ($40|0)==(0);
 $42 = ($12|0)!=(0);
 $or$cond$i = $42 & $41;
 if (!($or$cond$i)) {
  STACKTOP = sp;return ($40|0);
 }
 $43 = ((($3)) + 8|0);
 $44 = ((($3)) + 4|0);
 $45 = ((($7)) + 8|0);
 $46 = ((($7)) + 4|0);
 $47 = $15 * 2.0;
 $$pre$i = HEAP32[$45>>2]|0;
 $$pre63$i = HEAP32[$46>>2]|0;
 $$159$i = 0;$54 = $$pre63$i;$56 = $$pre$i;
 while(1) {
  $48 = HEAP32[$43>>2]|0;
  $49 = HEAP32[$44>>2]|0;
  $50 = Math_imul($49, $$159$i)|0;
  $51 = (($48) + ($50<<3)|0);
  $52 = +HEAPF64[$51>>3];
  $53 = Math_imul($$159$i, $54)|0;
  $55 = (($56) + ($53<<3)|0);
  $57 = +HEAPF64[$55>>3];
  _gsl_matrix_const_row($9,$4,$$159$i);
  (_gsl_blas_ddot($9,$2,$10)|0);
  $58 = $57 - $52;
  $59 = $15 * $58;
  $60 = +HEAPF64[$10>>3];
  $61 = $59 - $60;
  $62 = $47 * $61;
  $63 = HEAP32[$45>>2]|0;
  $64 = HEAP32[$46>>2]|0;
  $65 = Math_imul($64, $$159$i)|0;
  $66 = (($63) + ($65<<3)|0);
  HEAPF64[$66>>3] = $62;
  $67 = (($$159$i) + 1)|0;
  $exitcond$i = ($67|0)==($12|0);
  if ($exitcond$i) {
   break;
  } else {
   $$159$i = $67;$54 = $64;$56 = $63;
  }
 }
 STACKTOP = sp;return ($40|0);
}
function _gsl_multifit_nlinear_df($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$016 = 0, $$05460$i = 0, $$055$i = 0.0, $$05661$i = 0, $$06670$i = 0, $$067$i = 0.0, $$06871$i = 0, $$164$ph$i = 0, $$pre$i = 0, $$pre$i17 = 0, $$pre67$i = 0, $$pre76$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 20|0;
 $9 = sp;
 switch ($1|0) {
 case 0:  {
  $10 = ((($4)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$016 = 0;
   STACKTOP = sp;return ($$016|0);
  }
  $13 = ((($2)) + 8|0);
  $14 = ((($2)) + 4|0);
  $15 = ((($4)) + 12|0);
  $16 = ((($9)) + 8|0);
  $17 = ((($9)) + 4|0);
  $18 = ((($5)) + 8|0);
  $19 = ((($5)) + 4|0);
  $20 = ((($6)) + 12|0);
  $21 = ((($6)) + 8|0);
  $$pre$i = HEAP32[$13>>2]|0;
  $$pre67$i = HEAP32[$14>>2]|0;
  $$05661$i = 0;$23 = $$pre67$i;$25 = $$pre$i;
  while(1) {
   $22 = Math_imul($$05661$i, $23)|0;
   $24 = (($25) + ($22<<3)|0);
   $26 = +HEAPF64[$24>>3];
   _gsl_matrix_column($9,$6,$$05661$i);
   $27 = (+Math_abs((+$26)));
   $28 = $27 * $0;
   $29 = $28 == 0.0;
   $$055$i = $29 ? $0 : $28;
   $30 = $26 + $$055$i;
   $31 = HEAP32[$13>>2]|0;
   $32 = HEAP32[$14>>2]|0;
   $33 = Math_imul($32, $$05661$i)|0;
   $34 = (($31) + ($33<<3)|0);
   HEAPF64[$34>>3] = $30;
   $35 = (_gsl_multifit_nlinear_eval_f($4,$2,$3,$9)|0);
   $36 = ($35|0)==(0);
   if (!($36)) {
    break;
   }
   $37 = HEAP32[$13>>2]|0;
   $38 = HEAP32[$14>>2]|0;
   $39 = Math_imul($38, $$05661$i)|0;
   $40 = (($37) + ($39<<3)|0);
   HEAPF64[$40>>3] = $26;
   $41 = 1.0 / $$055$i;
   $42 = HEAP32[$15>>2]|0;
   $43 = ($42|0)==(0);
   if (!($43)) {
    $44 = HEAP32[$16>>2]|0;
    $45 = HEAP32[$17>>2]|0;
    $46 = HEAP32[$18>>2]|0;
    $47 = HEAP32[$19>>2]|0;
    $48 = HEAP32[$20>>2]|0;
    $49 = HEAP32[$21>>2]|0;
    $$05460$i = 0;
    while(1) {
     $50 = Math_imul($$05460$i, $45)|0;
     $51 = (($44) + ($50<<3)|0);
     $52 = +HEAPF64[$51>>3];
     $53 = Math_imul($$05460$i, $47)|0;
     $54 = (($46) + ($53<<3)|0);
     $55 = +HEAPF64[$54>>3];
     $56 = $52 - $55;
     $57 = $41 * $56;
     $58 = Math_imul($$05460$i, $49)|0;
     $59 = (($58) + ($$05661$i))|0;
     $60 = (($48) + ($59<<3)|0);
     HEAPF64[$60>>3] = $57;
     $61 = (($$05460$i) + 1)|0;
     $exitcond = ($61|0)==($42|0);
     if ($exitcond) {
      break;
     } else {
      $$05460$i = $61;
     }
    }
   }
   $62 = (($$05661$i) + 1)|0;
   $63 = HEAP32[$10>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $$05661$i = $62;$23 = $38;$25 = $37;
   } else {
    $$016 = 0;
    label = 20;
    break;
   }
  }
  if ((label|0) == 20) {
   STACKTOP = sp;return ($$016|0);
  }
  $$016 = $35;
  STACKTOP = sp;return ($$016|0);
  break;
 }
 case 1:  {
  $65 = ((($4)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0);
  if ($67) {
   $$016 = 0;
   STACKTOP = sp;return ($$016|0);
  }
  $68 = ((($2)) + 8|0);
  $69 = ((($2)) + 4|0);
  $70 = ((($4)) + 12|0);
  $71 = ((($8)) + 8|0);
  $72 = ((($8)) + 4|0);
  $73 = ((($7)) + 8|0);
  $74 = ((($7)) + 4|0);
  $75 = ((($6)) + 12|0);
  $76 = ((($6)) + 8|0);
  $$pre$i17 = HEAP32[$68>>2]|0;
  $$pre76$i = HEAP32[$69>>2]|0;
  $$06871$i = 0;$78 = $$pre76$i;$80 = $$pre$i17;
  while(1) {
   $77 = Math_imul($$06871$i, $78)|0;
   $79 = (($80) + ($77<<3)|0);
   $81 = +HEAPF64[$79>>3];
   _gsl_matrix_column($8,$6,$$06871$i);
   $82 = (+Math_abs((+$81)));
   $83 = $82 * $0;
   $84 = $83 == 0.0;
   $$067$i = $84 ? $0 : $83;
   $85 = $$067$i * 0.5;
   $86 = $81 + $85;
   $87 = HEAP32[$68>>2]|0;
   $88 = HEAP32[$69>>2]|0;
   $89 = Math_imul($88, $$06871$i)|0;
   $90 = (($87) + ($89<<3)|0);
   HEAPF64[$90>>3] = $86;
   $91 = (_gsl_multifit_nlinear_eval_f($4,$2,$3,$8)|0);
   $92 = ($91|0)==(0);
   if (!($92)) {
    $$164$ph$i = $91;
    break;
   }
   $93 = $81 - $85;
   $94 = HEAP32[$68>>2]|0;
   $95 = HEAP32[$69>>2]|0;
   $96 = Math_imul($95, $$06871$i)|0;
   $97 = (($94) + ($96<<3)|0);
   HEAPF64[$97>>3] = $93;
   $98 = (_gsl_multifit_nlinear_eval_f($4,$2,$3,$7)|0);
   $99 = ($98|0)==(0);
   if (!($99)) {
    $$164$ph$i = $98;
    break;
   }
   $100 = HEAP32[$68>>2]|0;
   $101 = HEAP32[$69>>2]|0;
   $102 = Math_imul($101, $$06871$i)|0;
   $103 = (($100) + ($102<<3)|0);
   HEAPF64[$103>>3] = $81;
   $104 = 1.0 / $$067$i;
   $105 = HEAP32[$70>>2]|0;
   $106 = ($105|0)==(0);
   if (!($106)) {
    $107 = HEAP32[$71>>2]|0;
    $108 = HEAP32[$72>>2]|0;
    $109 = HEAP32[$73>>2]|0;
    $110 = HEAP32[$74>>2]|0;
    $111 = HEAP32[$75>>2]|0;
    $112 = HEAP32[$76>>2]|0;
    $$06670$i = 0;
    while(1) {
     $113 = Math_imul($$06670$i, $108)|0;
     $114 = (($107) + ($113<<3)|0);
     $115 = +HEAPF64[$114>>3];
     $116 = Math_imul($$06670$i, $110)|0;
     $117 = (($109) + ($116<<3)|0);
     $118 = +HEAPF64[$117>>3];
     $119 = $115 - $118;
     $120 = $104 * $119;
     $121 = Math_imul($$06670$i, $112)|0;
     $122 = (($121) + ($$06871$i))|0;
     $123 = (($111) + ($122<<3)|0);
     HEAPF64[$123>>3] = $120;
     $124 = (($$06670$i) + 1)|0;
     $exitcond25 = ($124|0)==($105|0);
     if ($exitcond25) {
      break;
     } else {
      $$06670$i = $124;
     }
    }
   }
   $125 = (($$06871$i) + 1)|0;
   $126 = HEAP32[$65>>2]|0;
   $127 = ($125>>>0)<($126>>>0);
   if ($127) {
    $$06871$i = $125;$78 = $101;$80 = $100;
   } else {
    $$016 = 0;
    label = 20;
    break;
   }
  }
  if ((label|0) == 20) {
   STACKTOP = sp;return ($$016|0);
  }
  $$016 = $$164$ph$i;
  STACKTOP = sp;return ($$016|0);
  break;
 }
 default: {
  _gsl_error(80705,80730,190,4);
  $$016 = 4;
  STACKTOP = sp;return ($$016|0);
 }
 }
 return (0)|0;
}
function _lm_alloc_noaccel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lm_alloc(0,$0,$1,$2)|0);
 return ($3|0);
}
function _lm_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 _gsl_vector_set_zero($3);
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _gsl_vector_set_zero($5);
 $6 = ((($0)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 HEAPF64[$7>>3] = 0.0;
 return 0;
}
function _lm_preloop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iii[$7 & 63]($0,$9)|0);
 return ($10|0);
}
function _lm_step($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$01$i = 0, $$1 = 0, $$pre = 0, $$pre$phi61Z2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $exitcond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF64[$7>>3];
 $9 = ((($5)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_idii[$12 & 31]($8,$0,$14)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$1 = $15;
  return ($$1|0);
 }
 $17 = HEAP32[$9>>2]|0;
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($3)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$13>>2]|0;
 $25 = (FUNCTION_TABLE_iiiii[$19 & 63]($21,$23,$0,$24)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  $$1 = $25;
  return ($$1|0);
 }
 $27 = ((($3)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 do {
  if ($29) {
   $$pre = ((($3)) + 16|0);
   $$pre$phi61Z2D = $$pre;
  } else {
   $30 = ((($5)) + 48|0);
   $31 = +HEAPF64[$30>>3];
   $32 = HEAP32[$0>>2]|0;
   $33 = HEAP32[$22>>2]|0;
   $34 = HEAP32[$20>>2]|0;
   $35 = ((($0)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($0)) + 20|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($0)) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($3)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($3)) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_gsl_multifit_nlinear_eval_fvv($31,$32,$33,$34,$36,$38,$40,$42,$44)|0);
   $46 = ($45|0)==(0);
   if (!($46)) {
    $$1 = $45;
    return ($$1|0);
   }
   $47 = HEAP32[$9>>2]|0;
   $48 = ((($47)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$41>>2]|0;
   $51 = ((($3)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$13>>2]|0;
   $54 = (FUNCTION_TABLE_iiiii[$49 & 63]($50,$52,$0,$53)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = HEAP32[$51>>2]|0;
    $57 = (+_gsl_blas_dnrm2($56));
    $58 = HEAP32[$22>>2]|0;
    $59 = (+_gsl_blas_dnrm2($58));
    $60 = $57 / $59;
    $61 = ((($0)) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    HEAPF64[$62>>3] = $60;
    $$pre$phi61Z2D = $51;
    break;
   } else {
    $$1 = $54;
    return ($$1|0);
   }
  }
 } while(0);
 $63 = HEAP32[$22>>2]|0;
 $64 = HEAP32[$$pre$phi61Z2D>>2]|0;
 $65 = HEAP32[$2>>2]|0;
 $66 = ($65|0)==(0);
 if ($66) {
  $$1 = 0;
  return ($$1|0);
 }
 $67 = ((($63)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($63)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($64)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($64)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($2)) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($2)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $$01$i = 0;
 while(1) {
  $79 = Math_imul($$01$i, $70)|0;
  $80 = (($68) + ($79<<3)|0);
  $81 = +HEAPF64[$80>>3];
  $82 = Math_imul($$01$i, $74)|0;
  $83 = (($72) + ($82<<3)|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $84 * 0.5;
  $86 = $81 + $85;
  $87 = Math_imul($$01$i, $78)|0;
  $88 = (($76) + ($87<<3)|0);
  HEAPF64[$88>>3] = $86;
  $89 = (($$01$i) + 1)|0;
  $exitcond$i = ($89|0)==($65|0);
  if ($exitcond$i) {
   $$1 = 0;
   break;
  } else {
   $$01$i = $89;
  }
 }
 return ($$1|0);
}
function _lm_preduction($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa$i = 0.0, $$02425$i = 0, $$026$i = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0$lcssa$i = 0.0;
 } else {
  $10 = ((($7)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($7)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($5)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($5)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $$02425$i = 0;$$026$i = 0.0;
  while(1) {
   $18 = Math_imul($$02425$i, $13)|0;
   $19 = (($11) + ($18<<3)|0);
   $20 = +HEAPF64[$19>>3];
   $21 = Math_imul($$02425$i, $17)|0;
   $22 = (($15) + ($21<<3)|0);
   $23 = +HEAPF64[$22>>3];
   $24 = $20 * $23;
   $25 = $24 * $24;
   $26 = $$026$i + $25;
   $27 = (($$02425$i) + 1)|0;
   $exitcond$i = ($27|0)==($8|0);
   if ($exitcond$i) {
    $$0$lcssa$i = $26;
    break;
   } else {
    $$02425$i = $27;$$026$i = $26;
   }
  }
 }
 $28 = (+Math_sqrt((+$$0$lcssa$i)));
 $29 = ((($0)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (+_gsl_blas_dnrm2($30));
 $32 = ((($0)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = +HEAPF64[$33>>3];
 $35 = ((($0)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($3)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 (_gsl_blas_dgemv(111,1.0,$36,$7,0.0,$38)|0);
 $39 = HEAP32[$37>>2]|0;
 $40 = (+_gsl_blas_dnrm2($39));
 $41 = $40 / $31;
 $42 = $28 / $31;
 $43 = $41 * $41;
 $44 = $34 * 2.0;
 $45 = $42 * $44;
 $46 = $42 * $45;
 $47 = $46 + $43;
 HEAPF64[$2>>3] = $47;
 return 0;
}
function _lm_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _gsl_vector_free($2);
 }
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _gsl_vector_free($5);
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _gsl_vector_free($8);
 }
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _gsl_vector_free($11);
 }
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  _free($0);
  return;
 }
 _gsl_vector_free($14);
 _free($0);
 return;
}
function _lm_alloc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $4 = (_calloc(1,88)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _gsl_error(81181,80758,81,8);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_gsl_vector_alloc($3)|0);
 $7 = ((($4)) + 20|0);
 HEAP32[$7>>2] = $6;
 $8 = ($6|0)==(0|0);
 if ($8) {
  _gsl_error(81251,80758,87,8);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (_gsl_vector_alloc($2)|0);
 $10 = ((($4)) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = ($9|0)==(0|0);
 if ($11) {
  _gsl_error(81286,80758,93,8);
  $$0 = 0;
  return ($$0|0);
 }
 $12 = (_gsl_vector_alloc($2)|0);
 $13 = ((($4)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ($12|0)==(0|0);
 if ($14) {
  _gsl_error(80763,80758,99,8);
  $$0 = 0;
  return ($$0|0);
 }
 $15 = (_gsl_vector_alloc($3)|0);
 $16 = ((($4)) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = ($15|0)==(0|0);
 if ($17) {
  _gsl_error(80796,80758,105,8);
  $$0 = 0;
  return ($$0|0);
 }
 $18 = (_gsl_vector_alloc($3)|0);
 $19 = ((($4)) + 16|0);
 HEAP32[$19>>2] = $18;
 $20 = ($18|0)==(0|0);
 if ($20) {
  _gsl_error(80829,80758,111,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$4>>2] = $2;
  $21 = ((($4)) + 4|0);
  HEAP32[$21>>2] = $3;
  $22 = ((($4)) + 32|0);
  dest=$22; src=$1; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $23 = ((($4)) + 28|0);
  HEAP32[$23>>2] = $0;
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _lm_alloc_accel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lm_alloc(1,$0,$1,$2)|0);
 return ($3|0);
}
function _qr_alloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_calloc(1,56)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _gsl_error(80891,80919,82,8);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_gsl_matrix_alloc($0,$1)|0);
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  _gsl_error(80924,80919,88,8);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_gsl_vector_alloc($1)|0);
 $8 = ((($2)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ($7|0)==(0|0);
 if ($9) {
  _gsl_error(80956,80919,95,8);
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (_gsl_matrix_alloc($1,$1)|0);
 $11 = ((($2)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = ($10|0)==(0|0);
 if ($12) {
  _gsl_error(80991,80919,101,8);
  $$0 = 0;
  return ($$0|0);
 }
 $13 = (_gsl_vector_alloc($0)|0);
 $14 = ((($2)) + 28|0);
 HEAP32[$14>>2] = $13;
 $15 = ($13|0)==(0|0);
 if ($15) {
  _gsl_error(81022,80919,108,8);
  $$0 = 0;
  return ($$0|0);
 }
 $16 = (_gsl_vector_alloc($0)|0);
 $17 = ((($2)) + 24|0);
 HEAP32[$17>>2] = $16;
 $18 = ($16|0)==(0|0);
 if ($18) {
  _gsl_error(81055,80919,115,8);
  $$0 = 0;
  return ($$0|0);
 }
 $19 = (_gsl_permutation_calloc($1)|0);
 $20 = ((($2)) + 16|0);
 HEAP32[$20>>2] = $19;
 $21 = ($19|0)==(0|0);
 if ($21) {
  _gsl_error(81093,80919,122,8);
  $$0 = 0;
  return ($$0|0);
 }
 $22 = (_gsl_vector_alloc($0)|0);
 $23 = ((($2)) + 32|0);
 HEAP32[$23>>2] = $22;
 $24 = ($22|0)==(0|0);
 if ($24) {
  _gsl_error(81286,80919,129,8);
  $$0 = 0;
  return ($$0|0);
 }
 $25 = (_gsl_vector_alloc($1)|0);
 $26 = ((($2)) + 36|0);
 HEAP32[$26>>2] = $25;
 $27 = ($25|0)==(0|0);
 if ($27) {
  _gsl_error(81251,80919,136,8);
  $$0 = 0;
  return ($$0|0);
 }
 $28 = ($1*3)|0;
 $29 = (_gsl_vector_alloc($28)|0);
 $30 = ((($2)) + 40|0);
 HEAP32[$30>>2] = $29;
 $31 = ($29|0)==(0|0);
 if ($31) {
  _gsl_error(81127,80919,143,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$2>>2] = $1;
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _qr_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 (_gsl_matrix_memcpy($4,$6)|0);
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 (_gsl_linalg_QRPT_decomp($7,$9,$11,$2,$13)|0);
 STACKTOP = sp;return 0;
}
function _qr_presolve($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 48|0);
 HEAPF64[$3>>3] = $0;
 return 0;
}
function _qr_solve($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$024349$i = 0, $$0246$i = 0, $$024624$i = 0, $$024625$i = 0, $$024916$i = 0, $$0252$lcssa$i = 0.0, $$02523$i = 0.0, $$025333$i = 0.0, $$0258$i = 0.0, $$0259$i = 0.0, $$045$i = 0, $$1$i = 0, $$124440$i = 0, $$124734$i = 0, $$1254$i = 0.0, $$129$i = 0, $$130$i = 0, $$2$i = 0, $$22$i = 0;
 var $$2245$$0249$i = 0, $$224517$i = 0, $$22488$i = 0, $$2251$i = 0, $$24$i = 0, $$312$i = 0, $$41$i = 0, $$not$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi67$iZ2D = 0, $$pre65$i = 0, $$pre66$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond54$i = 0, $exitcond55$i = 0, $exitcond56$i = 0, $exitcond57$i = 0, $exitcond58$i = 0;
 var $exitcond59$i = 0, $exitcond60$i = 0, $exitcond61$i = 0, $exitcond62$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($3)) + 48|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $5 == 0.0;
 if ($6) {
  $7 = ((($3)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_gsl_linalg_QRPT_rank($8,-1.0)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($3)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($3)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($3)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_gsl_linalg_QRPT_lssolve2($10,$12,$14,$0,$9,$1,$16)|0);
  $$0 = $17;
  (_gsl_vector_scale($1,-1.0)|0);
  return ($$0|0);
 }
 $18 = (+Math_sqrt((+$5)));
 $19 = ((($3)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 (_gsl_vector_memcpy($20,$0)|0);
 $21 = ((($3)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($3)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$19>>2]|0;
 (_gsl_linalg_QR_QTvec($22,$24,$25)|0);
 $26 = HEAP32[$21>>2]|0;
 $27 = ((($3)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$19>>2]|0;
 $32 = ((($3)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($3)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($26)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $$2251$i = 0;
 } else {
  $39 = ((($26)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($26)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($31)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($31)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($33)) + 12|0);
  $48 = ((($33)) + 8|0);
  $49 = ((($1)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($1)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($35)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($35)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $$024349$i = 0;
  while(1) {
   $57 = Math_imul($$024349$i, $42)|0;
   $58 = (($57) + ($$024349$i))|0;
   $59 = (($40) + ($58<<3)|0);
   $60 = +HEAPF64[$59>>3];
   $61 = Math_imul($$024349$i, $46)|0;
   $62 = (($44) + ($61<<3)|0);
   $63 = +HEAPF64[$62>>3];
   $64 = (($$024349$i) + 1)|0;
   $65 = ($64>>>0)<($37>>>0);
   if ($65) {
    $66 = HEAP32[$47>>2]|0;
    $67 = HEAP32[$48>>2]|0;
    $$045$i = $64;
    while(1) {
     $68 = (($$045$i) + ($57))|0;
     $69 = (($40) + ($68<<3)|0);
     $70 = +HEAPF64[$69>>3];
     $71 = Math_imul($$045$i, $67)|0;
     $72 = (($71) + ($$024349$i))|0;
     $73 = (($66) + ($72<<3)|0);
     HEAPF64[$73>>3] = $70;
     $74 = (($$045$i) + 1)|0;
     $exitcond61$i = ($74|0)==($37|0);
     if ($exitcond61$i) {
      break;
     } else {
      $$045$i = $74;
     }
    }
   }
   $75 = Math_imul($$024349$i, $52)|0;
   $76 = (($50) + ($75<<3)|0);
   HEAPF64[$76>>3] = $60;
   $77 = Math_imul($$024349$i, $56)|0;
   $78 = (($54) + ($77<<3)|0);
   HEAPF64[$78>>3] = $63;
   $exitcond62$i = ($64|0)==($37|0);
   if ($exitcond62$i) {
    break;
   } else {
    $$024349$i = $64;
   }
  }
  $79 = ((($28)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($30)) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($30)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $$124440$i = 0;
  while(1) {
   $85 = (($80) + ($$124440$i<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = Math_imul($86, $84)|0;
   $88 = (($82) + ($87<<3)|0);
   $89 = +HEAPF64[$88>>3];
   $90 = $18 * $89;
   $91 = $90 == 0.0;
   if ($91) {
    $$pre65$i = (($$124440$i) + 1)|0;
    $$pre$phi$iZ2D = $$pre65$i;
   } else {
    $92 = HEAP32[$47>>2]|0;
    $93 = HEAP32[$48>>2]|0;
    $94 = Math_imul($93, $$124440$i)|0;
    $95 = (($94) + ($$124440$i))|0;
    $96 = (($92) + ($95<<3)|0);
    HEAPF64[$96>>3] = $90;
    $$024624$i = (($$124440$i) + 1)|0;
    $97 = ($$024624$i>>>0)<($37>>>0);
    if ($97) {
     $$024625$i = $$024624$i;
     while(1) {
      $98 = Math_imul($$024625$i, $93)|0;
      $99 = (($98) + ($$024625$i))|0;
      $100 = (($92) + ($99<<3)|0);
      HEAPF64[$100>>3] = 0.0;
      $$0246$i = (($$024625$i) + 1)|0;
      $exitcond57$i = ($$0246$i|0)==($37|0);
      if ($exitcond57$i) {
       break;
      } else {
       $$024625$i = $$0246$i;
      }
     }
    }
    $$025333$i = 0.0;$$124734$i = $$124440$i;
    while(1) {
     $101 = Math_imul($$124734$i, $56)|0;
     $102 = (($54) + ($101<<3)|0);
     $103 = +HEAPF64[$102>>3];
     $104 = Math_imul($$124734$i, $42)|0;
     $105 = (($104) + ($$124734$i))|0;
     $106 = (($40) + ($105<<3)|0);
     $107 = +HEAPF64[$106>>3];
     $108 = Math_imul($$124734$i, $93)|0;
     $109 = (($108) + ($$124734$i))|0;
     $110 = (($92) + ($109<<3)|0);
     $111 = +HEAPF64[$110>>3];
     $112 = $111 == 0.0;
     if ($112) {
      $$pre66$i = (($$124734$i) + 1)|0;
      $$1254$i = $$025333$i;$$pre$phi67$iZ2D = $$pre66$i;
     } else {
      $113 = (+Math_abs((+$107)));
      $114 = (+Math_abs((+$111)));
      $115 = $113 < $114;
      if ($115) {
       $116 = $107 / $111;
       $117 = $116 * 0.25;
       $118 = $116 * $117;
       $119 = $118 + 0.25;
       $120 = (+Math_sqrt((+$119)));
       $121 = 0.5 / $120;
       $122 = $116 * $121;
       $$0258$i = $121;$$0259$i = $122;
      } else {
       $123 = $111 / $107;
       $124 = $123 * 0.25;
       $125 = $123 * $124;
       $126 = $125 + 0.25;
       $127 = (+Math_sqrt((+$126)));
       $128 = 0.5 / $127;
       $129 = $123 * $128;
       $$0258$i = $129;$$0259$i = $128;
      }
      $130 = $107 * $$0259$i;
      $131 = $111 * $$0258$i;
      $132 = $130 + $131;
      $133 = $103 * $$0259$i;
      $134 = $$025333$i * $$0258$i;
      $135 = $133 + $134;
      $136 = - $$0258$i;
      $137 = $103 * $136;
      $138 = $$025333$i * $$0259$i;
      $139 = $138 + $137;
      HEAPF64[$106>>3] = $132;
      HEAPF64[$110>>3] = $132;
      HEAPF64[$102>>3] = $135;
      $$129$i = (($$124734$i) + 1)|0;
      $140 = ($$129$i>>>0)<($37>>>0);
      if ($140) {
       $$130$i = $$129$i;
       while(1) {
        $141 = Math_imul($$130$i, $93)|0;
        $142 = (($141) + ($$124734$i))|0;
        $143 = (($92) + ($142<<3)|0);
        $144 = +HEAPF64[$143>>3];
        $145 = (($141) + ($$130$i))|0;
        $146 = (($92) + ($145<<3)|0);
        $147 = +HEAPF64[$146>>3];
        $148 = $$0259$i * $144;
        $149 = $$0258$i * $147;
        $150 = $148 + $149;
        $151 = $144 * $136;
        $152 = $$0259$i * $147;
        $153 = $151 + $152;
        HEAPF64[$143>>3] = $150;
        HEAPF64[$146>>3] = $153;
        $$1$i = (($$130$i) + 1)|0;
        $exitcond58$i = ($$1$i|0)==($37|0);
        if ($exitcond58$i) {
         $$1254$i = $139;$$pre$phi67$iZ2D = $$129$i;
         break;
        } else {
         $$130$i = $$1$i;
        }
       }
      } else {
       $$1254$i = $139;$$pre$phi67$iZ2D = $$129$i;
      }
     }
     $exitcond59$i = ($$pre$phi67$iZ2D|0)==($37|0);
     if ($exitcond59$i) {
      break;
     } else {
      $$025333$i = $$1254$i;$$124734$i = $$pre$phi67$iZ2D;
     }
    }
    $154 = Math_imul($$124440$i, $52)|0;
    $155 = (($50) + ($154<<3)|0);
    $156 = +HEAPF64[$155>>3];
    $157 = Math_imul($$124440$i, $42)|0;
    $158 = (($157) + ($$124440$i))|0;
    $159 = (($40) + ($158<<3)|0);
    HEAPF64[$159>>3] = $156;
    $$pre$phi$iZ2D = $$024624$i;
   }
   $exitcond60$i = ($$pre$phi$iZ2D|0)==($37|0);
   if ($exitcond60$i) {
    break;
   } else {
    $$124440$i = $$pre$phi$iZ2D;
   }
  }
  $160 = HEAP32[$47>>2]|0;
  $161 = HEAP32[$48>>2]|0;
  $$024916$i = $37;$$224517$i = 0;
  while(1) {
   $162 = Math_imul($$224517$i, $161)|0;
   $163 = (($162) + ($$224517$i))|0;
   $164 = (($160) + ($163<<3)|0);
   $165 = +HEAPF64[$164>>3];
   $166 = $165 == 0.0;
   $$2245$$0249$i = $166 ? $$224517$i : $$024916$i;
   $167 = (($$224517$i) + 1)|0;
   $$not$i = $166 ^ 1;
   $168 = ($167>>>0)<($37>>>0);
   $or$cond$i = $168 & $$not$i;
   if ($or$cond$i) {
    $$024916$i = $$2245$$0249$i;$$224517$i = $167;
   } else {
    $$2251$i = $$2245$$0249$i;
    break;
   }
  }
 }
 $169 = ($$2251$i>>>0)<($37>>>0);
 if ($169) {
  $170 = ((($35)) + 8|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ((($35)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $$312$i = $$2251$i;
  while(1) {
   $174 = Math_imul($$312$i, $173)|0;
   $175 = (($171) + ($174<<3)|0);
   HEAPF64[$175>>3] = 0.0;
   $176 = (($$312$i) + 1)|0;
   $exitcond56$i = ($176|0)==($37|0);
   if ($exitcond56$i) {
    break;
   } else {
    $$312$i = $176;
   }
  }
 }
 $177 = ($$2251$i|0)==(0);
 if (!($177)) {
  $178 = (($$2251$i) + -1)|0;
  $179 = ((($35)) + 8|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ((($35)) + 4|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ((($33)) + 12|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = ((($33)) + 8|0);
  $186 = HEAP32[$185>>2]|0;
  $$22488$i = 0;
  while(1) {
   $187 = (($178) - ($$22488$i))|0;
   $$22$i = (($187) + 1)|0;
   $188 = ($$22$i>>>0)<($$2251$i>>>0);
   if ($188) {
    $$02523$i = 0.0;$$24$i = $$22$i;
    while(1) {
     $189 = Math_imul($$24$i, $186)|0;
     $190 = (($189) + ($187))|0;
     $191 = (($184) + ($190<<3)|0);
     $192 = +HEAPF64[$191>>3];
     $193 = Math_imul($$24$i, $182)|0;
     $194 = (($180) + ($193<<3)|0);
     $195 = +HEAPF64[$194>>3];
     $196 = $192 * $195;
     $197 = $$02523$i + $196;
     $$2$i = (($$24$i) + 1)|0;
     $exitcond54$i = ($$2$i|0)==($$2251$i|0);
     if ($exitcond54$i) {
      $$0252$lcssa$i = $197;
      break;
     } else {
      $$02523$i = $197;$$24$i = $$2$i;
     }
    }
   } else {
    $$0252$lcssa$i = 0.0;
   }
   $198 = Math_imul($187, $182)|0;
   $199 = (($180) + ($198<<3)|0);
   $200 = +HEAPF64[$199>>3];
   $201 = Math_imul($187, $186)|0;
   $202 = (($201) + ($187))|0;
   $203 = (($184) + ($202<<3)|0);
   $204 = +HEAPF64[$203>>3];
   $205 = $200 - $$0252$lcssa$i;
   $206 = $205 / $204;
   HEAPF64[$199>>3] = $206;
   $207 = (($$22488$i) + 1)|0;
   $exitcond55$i = ($207|0)==($$2251$i|0);
   if ($exitcond55$i) {
    break;
   } else {
    $$22488$i = $207;
   }
  }
 }
 if ($38) {
  $$0 = 0;
  (_gsl_vector_scale($1,-1.0)|0);
  return ($$0|0);
 }
 $208 = ((($28)) + 4|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = ((($35)) + 8|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = ((($35)) + 4|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = ((($1)) + 8|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = ((($1)) + 4|0);
 $217 = HEAP32[$216>>2]|0;
 $$41$i = 0;
 while(1) {
  $218 = (($209) + ($$41$i<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = Math_imul($$41$i, $213)|0;
  $221 = (($211) + ($220<<3)|0);
  $222 = +HEAPF64[$221>>3];
  $223 = Math_imul($219, $217)|0;
  $224 = (($215) + ($223<<3)|0);
  HEAPF64[$224>>3] = $222;
  $225 = (($$41$i) + 1)|0;
  $exitcond$i = ($225|0)==($37|0);
  if ($exitcond$i) {
   $$0 = 0;
   break;
  } else {
   $$41$i = $225;
  }
 }
 (_gsl_vector_scale($1,-1.0)|0);
 return ($$0|0);
}
function _qr_rcond($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_gsl_linalg_QRPT_rcond($3,$0,$5)|0);
 return ($6|0);
}
function _qr_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _gsl_matrix_free($2);
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _gsl_vector_free($5);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _gsl_matrix_free($8);
 }
 $10 = ((($0)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _gsl_vector_free($11);
 }
 $13 = ((($0)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _gsl_vector_free($14);
 }
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  _gsl_permutation_free($17);
 }
 $19 = ((($0)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  _gsl_vector_free($20);
 }
 $22 = ((($0)) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  _gsl_vector_free($23);
 }
 $25 = ((($0)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  _free($0);
  return;
 }
 _gsl_vector_free($26);
 _free($0);
 return;
}
function _init_diag_more($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$020$i = 0.0, $$020$i = 0.0, $$021$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $exitcond$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 _gsl_vector_set_zero($1);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return 0;
 }
 $6 = ((($1)) + 8|0);
 $7 = ((($1)) + 4|0);
 $$021$i = 0;
 while(1) {
  _gsl_matrix_const_column($2,$0,$$021$i);
  $8 = (+_gsl_blas_dnrm2($2));
  $9 = HEAP32[$6>>2]|0;
  $10 = HEAP32[$7>>2]|0;
  $11 = Math_imul($10, $$021$i)|0;
  $12 = (($9) + ($11<<3)|0);
  $13 = $8 == 0.0;
  $$020$i = $13 ? 1.0 : $8;
  $14 = +HEAPF64[$12>>3];
  $15 = $14 > $$020$i;
  $$$020$i = $15 ? $14 : $$020$i;
  HEAPF64[$12>>3] = $$$020$i;
  $16 = (($$021$i) + 1)|0;
  $exitcond$i = ($16|0)==($4|0);
  if ($exitcond$i) {
   break;
  } else {
   $$021$i = $16;
  }
 }
 STACKTOP = sp;return 0;
}
function _update_diag_more($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$020 = 0.0, $$020 = 0.0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return 0;
 }
 $6 = ((($1)) + 8|0);
 $7 = ((($1)) + 4|0);
 $$021 = 0;
 while(1) {
  _gsl_matrix_const_column($2,$0,$$021);
  $8 = (+_gsl_blas_dnrm2($2));
  $9 = HEAP32[$6>>2]|0;
  $10 = HEAP32[$7>>2]|0;
  $11 = Math_imul($10, $$021)|0;
  $12 = (($9) + ($11<<3)|0);
  $13 = $8 == 0.0;
  $$020 = $13 ? 1.0 : $8;
  $14 = +HEAPF64[$12>>3];
  $15 = $14 > $$020;
  $$$020 = $15 ? $14 : $$020;
  HEAPF64[$12>>3] = $$$020;
  $16 = (($$021) + 1)|0;
  $exitcond = ($16|0)==($4|0);
  if ($exitcond) {
   break;
  } else {
   $$021 = $16;
  }
 }
 STACKTOP = sp;return 0;
}
function _trust_alloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $3 = (_calloc(1,120)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _gsl_error(81181,81209,98,8);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_gsl_vector_alloc($2)|0);
 $6 = ((($3)) + 28|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _gsl_error(81217,81209,104,8);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_gsl_vector_alloc($2)|0);
 $9 = ((($3)) + 40|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if ($10) {
  _gsl_error(81251,81209,110,8);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (_gsl_vector_alloc($1)|0);
 $12 = ((($3)) + 44|0);
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)==(0|0);
 if ($13) {
  _gsl_error(81286,81209,116,8);
  $$0 = 0;
  return ($$0|0);
 }
 $14 = (_gsl_vector_alloc($2)|0);
 $15 = ((($3)) + 32|0);
 HEAP32[$15>>2] = $14;
 $16 = ($14|0)==(0|0);
 if ($16) {
  _gsl_error(81321,81209,122,8);
  $$0 = 0;
  return ($$0|0);
 }
 $17 = (_gsl_vector_alloc($1)|0);
 $18 = ((($3)) + 36|0);
 HEAP32[$18>>2] = $17;
 $19 = ($17|0)==(0|0);
 if ($19) {
  _gsl_error(81358,81209,128,8);
  $$0 = 0;
  return ($$0|0);
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_iiii[$22 & 127]($0,$1,$2)|0);
 $24 = ((($3)) + 48|0);
 HEAP32[$24>>2] = $23;
 $25 = ($23|0)==(0|0);
 if ($25) {
  _gsl_error(81395,81209,134,8);
  $$0 = 0;
  return ($$0|0);
 }
 $26 = ((($0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_iii[$29 & 63]($1,$2)|0);
 $31 = ((($3)) + 52|0);
 HEAP32[$31>>2] = $30;
 $32 = ($30|0)==(0|0);
 if ($32) {
  _gsl_error(81434,81209,140,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$3>>2] = $1;
  $33 = ((($3)) + 4|0);
  HEAP32[$33>>2] = $2;
  $34 = ((($3)) + 64|0);
  dest=$34; src=$0; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _trust_init($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa$i = 0.0, $$02$i = 0, $$02425$i = 0, $$026$i = 0.0, $$027$lcssa$i = 0.0, $$0271$i = 0.0, $$1 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $exitcond$i = 0, $exitcond$i61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 44|0;
 $8 = sp;
 $9 = ((($0)) + 64|0);
 $10 = (_gsl_multifit_nlinear_eval_f($2,$3,$1,$4)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$1 = $10;
  STACKTOP = sp;return ($$1|0);
 }
 $12 = ((($0)) + 104|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($0)) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_gsl_multifit_nlinear_eval_df($3,$4,$1,$13,$15,$2,$5,$17)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$1 = $18;
  STACKTOP = sp;return ($$1|0);
 }
 (_gsl_blas_dgemv(112,1.0,$5,$4,0.0,$6)|0);
 $20 = ((($0)) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 (FUNCTION_TABLE_iii[$23 & 63]($5,$25)|0);
 $26 = HEAP32[$24>>2]|0;
 $27 = HEAP32[$3>>2]|0;
 $28 = ($27|0)==(0);
 $29 = $26;
 if ($28) {
  $$0$lcssa$i = 0.0;
 } else {
  $30 = ((($26)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($26)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($3)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($3)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $$02425$i = 0;$$026$i = 0.0;
  while(1) {
   $38 = Math_imul($$02425$i, $33)|0;
   $39 = (($31) + ($38<<3)|0);
   $40 = +HEAPF64[$39>>3];
   $41 = Math_imul($$02425$i, $37)|0;
   $42 = (($35) + ($41<<3)|0);
   $43 = +HEAPF64[$42>>3];
   $44 = $40 * $43;
   $45 = $44 * $44;
   $46 = $$026$i + $45;
   $47 = (($$02425$i) + 1)|0;
   $exitcond$i = ($47|0)==($27|0);
   if ($exitcond$i) {
    $$0$lcssa$i = $46;
    break;
   } else {
    $$02425$i = $47;$$026$i = $46;
   }
  }
 }
 $48 = (+Math_sqrt((+$$0$lcssa$i)));
 $49 = $48 < 1.0;
 $50 = $49 ? 1.0 : $48;
 $51 = $50 * 0.29999999999999999;
 $52 = ((($0)) + 8|0);
 HEAPF64[$52>>3] = $51;
 $53 = ((($0)) + 16|0);
 $54 = ((($0)) + 24|0);
 $55 = ((($5)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = 2;
 $57 = ($56|0)==(0);
 if ($57) {
  $$027$lcssa$i = -1.0;$76 = $29;
 } else {
  $58 = ((($26)) + 8|0);
  $59 = ((($26)) + 4|0);
  $$02$i = 0;$$0271$i = -1.0;
  while(1) {
   _gsl_matrix_const_column($7,$5,$$02$i);
   $60 = HEAP32[$58>>2]|0;
   $61 = HEAP32[$59>>2]|0;
   $62 = Math_imul($61, $$02$i)|0;
   $63 = (($60) + ($62<<3)|0);
   $64 = +HEAPF64[$63>>3];
   $65 = (+_gsl_blas_dnrm2($7));
   $66 = $65 / $64;
   $67 = $$0271$i > $66;
   $68 = $67 ? $$0271$i : $66;
   $69 = (($$02$i) + 1)|0;
   $exitcond$i61 = ($69|0)==($56|0);
   if ($exitcond$i61) {
    break;
   } else {
    $$02$i = $69;$$0271$i = $68;
   }
  }
  $$pre = HEAP32[$24>>2]|0;
  $$027$lcssa$i = $68;$76 = $$pre;
 }
 $70 = $$027$lcssa$i * 0.001;
 $71 = $$027$lcssa$i * $70;
 HEAPF64[$53>>3] = $71;
 HEAP32[$8>>2] = $3;
 $72 = ((($8)) + 4|0);
 HEAP32[$72>>2] = $4;
 $73 = ((($8)) + 8|0);
 HEAP32[$73>>2] = $6;
 $74 = ((($8)) + 12|0);
 HEAP32[$74>>2] = $5;
 $75 = ((($8)) + 16|0);
 HEAP32[$75>>2] = $76;
 $77 = ((($8)) + 20|0);
 HEAP32[$77>>2] = $1;
 $78 = ((($8)) + 24|0);
 HEAP32[$78>>2] = $53;
 $79 = ((($8)) + 28|0);
 HEAP32[$79>>2] = $9;
 $80 = ((($0)) + 52|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($8)) + 32|0);
 HEAP32[$82>>2] = $81;
 $83 = ((($8)) + 36|0);
 HEAP32[$83>>2] = $2;
 $84 = ((($0)) + 56|0);
 $85 = ((($8)) + 40|0);
 HEAP32[$85>>2] = $84;
 $86 = HEAP32[$9>>2]|0;
 $87 = ((($86)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($0)) + 48|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (FUNCTION_TABLE_iii[$88 & 63]($8,$90)|0);
 $92 = ($91|0)==(0);
 if (!($92)) {
  $$1 = $91;
  STACKTOP = sp;return ($$1|0);
 }
 HEAPF64[$84>>3] = 0.0;
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function _trust_iterate($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i = 0, $$0$i$i = 0.0, $$0108 = 0, $$018$i = 0, $$096 = 0, $$099100106 = 0.0, $$099101 = 0.0, $$099101$ph = 0.0, $$1 = 0, $$195102 = 0, $$195102$ph = 0, $$195103105 = 0, $$sink = 0.0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0;
 var $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0;
 var $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $exitcond$i = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $8 = sp + 52|0;
 $9 = sp;
 $10 = sp + 8|0;
 $11 = ((($0)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$10>>2] = $3;
 $19 = ((($10)) + 4|0);
 HEAP32[$19>>2] = $4;
 $20 = ((($10)) + 8|0);
 HEAP32[$20>>2] = $6;
 $21 = ((($10)) + 12|0);
 HEAP32[$21>>2] = $5;
 $22 = $18;
 $23 = ((($10)) + 16|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($10)) + 20|0);
 HEAP32[$24>>2] = $1;
 $25 = ((($0)) + 16|0);
 $26 = ((($10)) + 24|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($10)) + 28|0);
 HEAP32[$27>>2] = $11;
 $28 = ((($0)) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($10)) + 32|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($10)) + 36|0);
 HEAP32[$31>>2] = $2;
 $32 = ((($0)) + 56|0);
 $33 = ((($10)) + 40|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($12)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($0)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (FUNCTION_TABLE_iii[$35 & 63]($10,$37)|0);
 $39 = ($38|0)==(0);
 if (!($39)) {
  $$096 = $38;
  STACKTOP = sp;return ($$096|0);
 }
 $40 = ((($0)) + 104|0);
 $41 = ((($0)) + 24|0);
 $42 = ((($12)) + 16|0);
 $43 = ((($0)) + 8|0);
 $44 = ((($0)) + 88|0);
 $45 = ((($7)) + 8|0);
 $46 = ((($7)) + 4|0);
 $47 = ((($3)) + 8|0);
 $48 = ((($3)) + 4|0);
 $49 = ((($14)) + 8|0);
 $50 = ((($14)) + 4|0);
 $51 = ((($0)) + 76|0);
 $52 = ((($0)) + 44|0);
 $53 = ((($0)) + 68|0);
 $54 = ((($0)) + 96|0);
 $55 = ((($8)) + 4|0);
 $56 = ((($8)) + 8|0);
 $57 = ((($8)) + 12|0);
 $58 = ((($8)) + 16|0);
 $59 = ((($8)) + 20|0);
 $60 = ((($8)) + 24|0);
 $61 = ((($8)) + 28|0);
 $62 = ((($8)) + 32|0);
 $63 = ((($8)) + 36|0);
 $64 = ((($8)) + 40|0);
 $65 = ((($0)) + 80|0);
 $$0108 = 0;
 L4: while(1) {
  $66 = HEAP32[$42>>2]|0;
  $67 = +HEAPF64[$43>>3];
  $68 = HEAP32[$36>>2]|0;
  $69 = (FUNCTION_TABLE_iidii[$66 & 15]($10,$67,$7,$68)|0);
  $70 = ($69|0)==(0);
  do {
   if ($70) {
    $71 = HEAP32[$3>>2]|0;
    $72 = ($71|0)==(0);
    if (!($72)) {
     $73 = HEAP32[$45>>2]|0;
     $74 = HEAP32[$46>>2]|0;
     $75 = HEAP32[$47>>2]|0;
     $76 = HEAP32[$48>>2]|0;
     $77 = HEAP32[$49>>2]|0;
     $78 = HEAP32[$50>>2]|0;
     $$018$i = 0;
     while(1) {
      $79 = Math_imul($$018$i, $74)|0;
      $80 = (($73) + ($79<<3)|0);
      $81 = +HEAPF64[$80>>3];
      $82 = Math_imul($$018$i, $76)|0;
      $83 = (($75) + ($82<<3)|0);
      $84 = +HEAPF64[$83>>3];
      $85 = $81 + $84;
      $86 = Math_imul($$018$i, $78)|0;
      $87 = (($77) + ($86<<3)|0);
      HEAPF64[$87>>3] = $85;
      $88 = (($$018$i) + 1)|0;
      $exitcond$i = ($88|0)==($71|0);
      if ($exitcond$i) {
       break;
      } else {
       $$018$i = $88;
      }
     }
    }
    $89 = (_gsl_multifit_nlinear_eval_f($2,$14,$1,$16)|0);
    $90 = ($89|0)==(0);
    if (!($90)) {
     $$096 = $89;
     label = 25;
     break L4;
    }
    $91 = HEAP32[$11>>2]|0;
    $92 = ($91|0)==(67576|0);
    if ($92) {
     $93 = +HEAPF64[$32>>3];
     $94 = +HEAPF64[$54>>3];
     $95 = $93 > $94;
     if ($95) {
      $$0$i = -1;
     } else {
      $$0$i = 0;
     }
    } else {
     $$0$i = 0;
    }
    $96 = (+_gsl_blas_dnrm2($4));
    $97 = (+_gsl_blas_dnrm2($16));
    $98 = !($97 >= $96);
    if ($98) {
     HEAP32[$8>>2] = 0;
     HEAP32[$55>>2] = $4;
     HEAP32[$56>>2] = $6;
     HEAP32[$57>>2] = $5;
     $99 = HEAP32[$17>>2]|0;
     HEAP32[$58>>2] = $99;
     HEAP32[$59>>2] = 0;
     HEAP32[$60>>2] = $25;
     HEAP32[$61>>2] = $11;
     $100 = HEAP32[$28>>2]|0;
     HEAP32[$62>>2] = $100;
     HEAP32[$63>>2] = 0;
     HEAP32[$64>>2] = $32;
     $101 = $97 / $96;
     $102 = ((($91)) + 20|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = HEAP32[$36>>2]|0;
     $105 = (FUNCTION_TABLE_iiiii[$103 & 63]($8,$7,$9,$104)|0);
     $106 = ($105|0)==(0);
     if ($106) {
      $107 = +HEAPF64[$9>>3];
      $108 = $107 > 0.0;
      if ($108) {
       $109 = $101 * $101;
       $110 = 1.0 - $109;
       $111 = $110 / $107;
       $$0$i$i = $111;
      } else {
       $$0$i$i = -1.0;
      }
     } else {
      $$0$i$i = -1.0;
     }
    } else {
     $$0$i$i = -1.0;
    }
    $112 = !($$0$i$i <= 0.0);
    $113 = ($$0$i|0)==(0);
    $114 = $113 & $112;
    $spec$select = $114&1;
    $115 = $$0$i$i > 0.75;
    if ($115) {
     $116 = +HEAPF64[$65>>3];
     $117 = +HEAPF64[$43>>3];
     $118 = $116 * $117;
     $$099101$ph = $$0$i$i;$$195102$ph = $spec$select;$$sink = $118;
     label = 19;
     break;
    } else {
     $119 = $$0$i$i < 0.25;
     if ($119) {
      $$099100106 = $$0$i$i;$$195103105 = $spec$select;
      label = 18;
      break;
     } else {
      $$099101 = $$0$i$i;$$195102 = $spec$select;
      break;
     }
    }
   } else {
    $$099100106 = -1.0;$$195103105 = 0;
    label = 18;
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   $120 = +HEAPF64[$44>>3];
   $121 = +HEAPF64[$43>>3];
   $122 = $121 / $120;
   $$099101$ph = $$099100106;$$195102$ph = $$195103105;$$sink = $122;
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   HEAPF64[$43>>3] = $$sink;
   $$099101 = $$099101$ph;$$195102 = $$195102$ph;
  }
  $123 = ($$195102|0)==(0);
  if ($123) {
   $141 = HEAP32[$41>>2]|0;
   $142 = (+($141|0));
   $143 = +HEAPF64[$25>>3];
   $144 = $143 * $142;
   HEAPF64[$25>>3] = $144;
   $145 = $141 << 1;
   HEAP32[$41>>2] = $145;
   $146 = (($$0108) + 1)|0;
   $147 = ($$0108|0)>(14);
   if ($147) {
    $$096 = 27;
    label = 25;
    break;
   } else {
    $$1 = $146;
   }
  } else {
   $124 = +HEAPF64[$40>>3];
   $125 = HEAP32[$51>>2]|0;
   $126 = HEAP32[$52>>2]|0;
   $127 = (_gsl_multifit_nlinear_eval_df($14,$16,$1,$124,$125,$2,$5,$126)|0);
   $128 = ($127|0)==(0);
   if (!($128)) {
    $$096 = $127;
    label = 25;
    break;
   }
   (_gsl_vector_memcpy($3,$14)|0);
   (_gsl_vector_memcpy($4,$16)|0);
   (_gsl_blas_dgemv(112,1.0,$5,$4,0.0,$6)|0);
   $129 = HEAP32[$53>>2]|0;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   (FUNCTION_TABLE_iii[$131 & 63]($5,$18)|0);
   HEAP32[$41>>2] = 2;
   $132 = $$099101 * 2.0;
   $133 = $132 + -1.0;
   $134 = $133 * $133;
   $135 = $133 * $134;
   $136 = 1.0 - $135;
   $137 = $136 < 0.33333333333333298;
   $138 = $137 ? 0.33333333333333298 : $136;
   $139 = +HEAPF64[$25>>3];
   $140 = $138 * $139;
   HEAPF64[$25>>3] = $140;
   $$1 = 0;
  }
  if ($123) {
   $$0108 = $$1;
  } else {
   $$096 = 0;
   label = 25;
   break;
  }
 }
 if ((label|0) == 25) {
  STACKTOP = sp;return ($$096|0);
 }
 return (0)|0;
}
function _trust_rcond($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$5 & 63]($0,$7)|0);
 return ($8|0);
}
function _trust_avratio($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _trust_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _gsl_vector_free($3);
 }
 $5 = ((($0)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _gsl_vector_free($6);
 }
 $8 = ((($0)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _gsl_vector_free($9);
 }
 $11 = ((($0)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  _gsl_vector_free($12);
 }
 $14 = ((($0)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  _gsl_vector_free($15);
 }
 $17 = ((($0)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $20 = HEAP32[$1>>2]|0;
  $21 = ((($20)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 31]($18);
 }
 $23 = ((($0)) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  _free($0);
  return;
 }
 $26 = ((($0)) + 72|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 FUNCTION_TABLE_vi[$29 & 31]($24);
 _free($0);
 return;
}
function _gsl_permutation_alloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  _gsl_error(81476,81522,33,1);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_malloc(8)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _gsl_error(81529,81522,41,8);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $0 << 2;
 $5 = (_malloc($4)|0);
 $6 = ((($2)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _free($2);
  _gsl_error(81577,81522,51,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$2>>2] = $0;
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_permutation_calloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$01213 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_gsl_permutation_alloc($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($0|0)==(0);
 if ($3) {
  $$0 = $1;
  return ($$0|0);
 }
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $$01213 = 0;
 while(1) {
  $6 = (($5) + ($$01213<<2)|0);
  HEAP32[$6>>2] = $$01213;
  $7 = (($$01213) + 1)|0;
  $exitcond = ($7|0)==($0|0);
  if ($exitcond) {
   $$0 = $1;
   break;
  } else {
   $$01213 = $7;
  }
 }
 return ($$0|0);
}
function _gsl_permutation_init($0) {
 $0 = $0|0;
 var $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $$09 = 0;
 while(1) {
  $5 = (($4) + ($$09<<2)|0);
  HEAP32[$5>>2] = $$09;
  $6 = (($$09) + 1)|0;
  $exitcond = ($6|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$09 = $6;
  }
 }
 return;
}
function _gsl_permutation_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 _free($0);
 return;
}
function _gsl_permutation_swap($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if (!($4)) {
  _gsl_error(83149,81623,43,4);
  $$0 = 4;
  return ($$0|0);
 }
 $5 = ($3>>>0)>($2>>>0);
 if (!($5)) {
  _gsl_error(83177,81623,48,4);
  $$0 = 4;
  return ($$0|0);
 }
 $6 = ($1|0)==($2|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + ($2<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$9>>2] = $12;
 HEAP32[$11>>2] = $10;
 $$0 = 0;
 return ($$0|0);
}
function _gsl_permute_vector_inverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$pn$i = 0, $$05665$i = 0, $$057$i = 0, $$057$in$i = 0, $$069$i = 0, $$sroa$0$264$i = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  _gsl_error(81637,81684,157,19);
  $$0 = 19;
  return ($$0|0);
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($2|0)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $$069$i = 0;
 while(1) {
  $$0$pn$i = $$069$i;
  while(1) {
   $$057$in$i = (($6) + ($$0$pn$i<<2)|0);
   $$057$i = HEAP32[$$057$in$i>>2]|0;
   $12 = ($$057$i>>>0)>($$069$i>>>0);
   if ($12) {
    $$0$pn$i = $$057$i;
   } else {
    break;
   }
  }
  $13 = ($$057$i>>>0)<($$069$i>>>0);
  if (!($13)) {
   $14 = (($6) + ($$057$i<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($$069$i|0);
   if (!($16)) {
    $17 = Math_imul($$057$i, $10)|0;
    $18 = (($8) + ($17<<3)|0);
    $19 = +HEAPF64[$18>>3];
    $$05665$i = $15;$$sroa$0$264$i = $19;
    while(1) {
     $20 = Math_imul($$05665$i, $10)|0;
     $21 = (($8) + ($20<<3)|0);
     $22 = +HEAPF64[$21>>3];
     HEAPF64[$21>>3] = $$sroa$0$264$i;
     $23 = (($6) + ($$05665$i<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==($$069$i|0);
     if ($25) {
      break;
     } else {
      $$05665$i = $24;$$sroa$0$264$i = $22;
     }
    }
    $26 = Math_imul($$069$i, $10)|0;
    $27 = (($8) + ($26<<3)|0);
    HEAPF64[$27>>3] = $22;
   }
  }
  $28 = (($$069$i) + 1)|0;
  $exitcond$i = ($28|0)==($2|0);
  if ($exitcond$i) {
   $$0 = 0;
   break;
  } else {
   $$069$i = $28;
  }
 }
 return ($$0|0);
}
function _gsl_ran_binomial($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $$0262 = 0.0, $$0263293 = 0, $$0269292 = 0.0, $$0270296 = 0, $$0270296$in = 0, $$0271299 = 0, $$0271299$in = 0, $$0272298 = 0.0, $$0275291 = 0.0, $$0276 = 0.0, $$0277 = 0.0, $$0278 = 0.0, $$1273295 = 0.0, $$3 = 0, $$5 = 0, $$lcssa284 = 0.0, $$lcssa287 = 0.0, $10 = 0, $100 = 0.0;
 var $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0;
 var $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0;
 var $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0;
 var $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0;
 var $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0;
 var $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0;
 var $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond314 = 0, $ispos = 0, $neg = 0, $or$cond = 0;
 var $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $1 > 0.5;
 $5 = 1.0 - $1;
 $$0262 = $4 ? $5 : $1;
 $6 = 1.0 - $$0262;
 $7 = $$0262 / $6;
 $8 = (+($2>>>0));
 $9 = $$0262 * $8;
 $10 = $9 < 14.0;
 L4: do {
  if ($10) {
   $11 = (+_gsl_pow_uint($6,$2));
   $12 = ((($0)) + 4|0);
   while(1) {
    $13 = HEAP32[$0>>2]|0;
    $14 = ((($13)) + 24|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$12>>2]|0;
    $17 = (+FUNCTION_TABLE_di[$15 & 31]($16));
    $$0263293 = 0;$$0269292 = $11;$$0275291 = $17;
    while(1) {
     $18 = $$0275291 < $$0269292;
     if ($18) {
      $$5 = $$0263293;
      break L4;
     }
     $19 = $$0275291 - $$0269292;
     $20 = (($2) - ($$0263293))|0;
     $21 = (+($20>>>0));
     $22 = $7 * $21;
     $23 = (($$0263293) + 1)|0;
     $24 = (+($23|0));
     $25 = $22 / $24;
     $26 = $$0269292 * $25;
     $27 = ($23>>>0)<(111);
     if ($27) {
      $$0263293 = $23;$$0269292 = $26;$$0275291 = $19;
     } else {
      break;
     }
    }
   }
  } else {
   $28 = $$0262 + $9;
   $29 = (~~(($28)));
   $30 = (+($29|0));
   $31 = $30 + 0.5;
   $32 = $9 * $6;
   $33 = (+Math_sqrt((+$32)));
   $34 = $33 * 2.1949999999999998;
   $35 = $6 * 4.5999999999999996;
   $36 = $34 - $35;
   $37 = (+Math_floor((+$36)));
   $38 = $37 + 0.5;
   $39 = $31 - $38;
   $40 = $31 + $38;
   $41 = $30 + 15.300000000000001;
   $42 = 20.5 / $41;
   $43 = $42 + 0.13400000000000001;
   $44 = $43 + 1.0;
   $45 = $43 + $44;
   $46 = $38 * $45;
   $47 = $28 - $39;
   $48 = $$0262 * $39;
   $49 = $28 - $48;
   $50 = $47 / $49;
   $51 = $50 * 0.5;
   $52 = $51 + 1.0;
   $53 = $50 * $52;
   $54 = $40 - $28;
   $55 = $6 * $40;
   $56 = $54 / $55;
   $57 = $56 * 0.5;
   $58 = $57 + 1.0;
   $59 = $56 * $58;
   $60 = $43 / $53;
   $61 = $46 + $60;
   $62 = $43 / $59;
   $63 = $62 + $61;
   $64 = HEAP32[$0>>2]|0;
   $65 = ((($64)) + 24|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($0)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (+FUNCTION_TABLE_di[$66 & 31]($68));
   $70 = $63 * $69;
   $71 = HEAP32[$0>>2]|0;
   $72 = ((($71)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$67>>2]|0;
   $75 = (+FUNCTION_TABLE_di[$73 & 31]($74));
   $76 = !($70 <= $38);
   L13: do {
    if ($76) {
     $77 = (($2) + 1)|0;
     $78 = (+($77>>>0));
     $79 = $7 * $78;
     $80 = $32 * 0.5;
     $81 = $80 + -1.0;
     $82 = $32 * 2.0;
     $83 = $30 + 1.0;
     $84 = $8 + 1.0;
     $85 = $84 - $30;
     $86 = (($2) - ($29))|0;
     $87 = (+($86>>>0));
     $88 = $87 + 0.5;
     $89 = $83 * $83;
     $90 = 140.0 / $89;
     $91 = 99.0 - $90;
     $92 = $91 / $89;
     $93 = 132.0 - $92;
     $94 = $93 / $89;
     $95 = 462.0 - $94;
     $96 = $95 / $89;
     $97 = 13860.0 - $96;
     $98 = $97 / $83;
     $99 = $98 / 166320.0;
     $100 = $85 * $85;
     $101 = 140.0 / $100;
     $102 = 99.0 - $101;
     $103 = $102 / $100;
     $104 = 132.0 - $103;
     $105 = $104 / $100;
     $106 = 462.0 - $105;
     $107 = $106 / $100;
     $108 = 13860.0 - $107;
     $109 = $108 / $85;
     $110 = $109 / 166320.0;
     $116 = $70;$121 = $75;
     L15: while(1) {
      $115 = !($116 <= $46);
      do {
       if ($115) {
        $130 = !($116 <= $61);
        $131 = (+Math_log((+$121)));
        if ($130) {
         $151 = $131 / $59;
         $152 = $40 - $151;
         $153 = (~~(($152)));
         $154 = (+($153|0));
         $155 = $154 > $8;
         if ($155) {
          break;
         }
         $156 = $116 - $61;
         $157 = $59 * $156;
         $158 = $157 * $121;
         $$0277 = $158;$$3 = $153;
         label = 19;
         break;
        } else {
         $132 = $131 / $53;
         $133 = $39 + $132;
         $134 = (~~(($133)));
         $135 = ($134|0)<(0);
         if ($135) {
          break;
         }
         $148 = $116 - $46;
         $149 = $53 * $148;
         $150 = $149 * $121;
         $$0277 = $150;$$3 = $134;
         label = 19;
         break;
        }
       } else {
        $117 = $116 - $38;
        $118 = $117 / $43;
        $119 = $39 + $118;
        $120 = $43 * $121;
        $122 = $120 + 1.0;
        $123 = $119 - $31;
        $124 = (+Math_abs((+$123)));
        $125 = $124 / $38;
        $126 = $122 - $125;
        $127 = $126 > 1.0;
        $128 = $126 <= 0.0;
        $or$cond = $127 | $128;
        $129 = (~~(($119)));
        if (!($or$cond)) {
         $$0277 = $126;$$3 = $129;
         label = 19;
        }
       }
      } while(0);
      L25: do {
       if ((label|0) == 19) {
        label = 0;
        $159 = (($$3) - ($29))|0;
        $ispos = ($159|0)>(-1);
        $neg = (0 - ($159))|0;
        $160 = $ispos ? $159 : $neg;
        $161 = ($160|0)<(21);
        L27: do {
         if ($161) {
          $162 = ($$3|0)>($29|0);
          if ($162) {
           $$0271299$in = $29;$$0272298 = 1.0;
           while(1) {
            $$0271299 = (($$0271299$in) + 1)|0;
            $163 = (+($$0271299|0));
            $164 = $79 / $163;
            $165 = $164 - $7;
            $166 = $$0272298 * $165;
            $exitcond314 = ($$0271299|0)==($$3|0);
            if ($exitcond314) {
             $$0276 = $$0277;$$0278 = $166;
             break L27;
            } else {
             $$0271299$in = $$0271299;$$0272298 = $166;
            }
           }
          }
          $167 = ($$3|0)<($29|0);
          if ($167) {
           $$0270296$in = $$3;$$1273295 = 1.0;
           while(1) {
            $$0270296 = (($$0270296$in) + 1)|0;
            $168 = (+($$0270296|0));
            $169 = $79 / $168;
            $170 = $169 - $7;
            $171 = $$1273295 / $170;
            $exitcond = ($$0270296|0)==($29|0);
            if ($exitcond) {
             $$0276 = $$0277;$$0278 = $171;
             break;
            } else {
             $$0270296$in = $$0270296;$$1273295 = $171;
            }
           }
          } else {
           $$0276 = $$0277;$$0278 = 1.0;
          }
         } else {
          $172 = (+Math_log((+$$0277)));
          $173 = (+($160|0));
          $174 = $81 > $173;
          if ($174) {
           $175 = $173 / $32;
           $176 = $173 / 3.0;
           $177 = $176 + 0.625;
           $178 = $177 * $173;
           $179 = $178 + 0.16666666666666666;
           $180 = $179 / $32;
           $181 = $180 + 0.5;
           $182 = $175 * $181;
           $183 = Math_imul($160, $160)|0;
           $184 = (+($183|0));
           $185 = $184 / $82;
           $186 = - $185;
           $187 = $186 - $182;
           $188 = $172 < $187;
           $189 = $182 - $185;
           $190 = $172 > $189;
           $191 = $190 ? 8 : 0;
           $trunc = $188 ? 7 : $191;
           $trunc$clear = $trunc & 15;
           switch ($trunc$clear<<24>>24) {
           case 8:  {
            break L25;
            break;
           }
           case 0:  {
            break;
           }
           default: {
            break L15;
           }
           }
          }
          $192 = (+($$3|0));
          $193 = $192 + 1.0;
          $194 = (($2) - ($$3))|0;
          $195 = (+($194>>>0));
          $196 = $195 + 1.0;
          $197 = $83 / $193;
          $198 = (+Math_log((+$197)));
          $199 = $31 * $198;
          $200 = $85 / $196;
          $201 = (+Math_log((+$200)));
          $202 = $88 * $201;
          $203 = $199 + $202;
          $204 = (+($159|0));
          $205 = $$0262 * $196;
          $206 = $6 * $193;
          $207 = $205 / $206;
          $208 = (+Math_log((+$207)));
          $209 = $208 * $204;
          $210 = $203 + $209;
          $211 = $99 + $210;
          $212 = $110 + $211;
          $213 = $193 * $193;
          $214 = 140.0 / $213;
          $215 = 99.0 - $214;
          $216 = $215 / $213;
          $217 = 132.0 - $216;
          $218 = $217 / $213;
          $219 = 462.0 - $218;
          $220 = $219 / $213;
          $221 = 13860.0 - $220;
          $222 = $221 / $193;
          $223 = $222 / 166320.0;
          $224 = $212 - $223;
          $225 = $196 * $196;
          $226 = 140.0 / $225;
          $227 = 99.0 - $226;
          $228 = $227 / $225;
          $229 = 132.0 - $228;
          $230 = $229 / $225;
          $231 = 462.0 - $230;
          $232 = $231 / $225;
          $233 = 13860.0 - $232;
          $234 = $233 / $196;
          $235 = $234 / 166320.0;
          $236 = $224 - $235;
          $$0276 = $172;$$0278 = $236;
         }
        } while(0);
        $237 = !($$0276 <= $$0278);
        if (!($237)) {
         $$5 = $$3;
         break L4;
        }
       }
      } while(0);
      $136 = HEAP32[$0>>2]|0;
      $137 = ((($136)) + 24|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = HEAP32[$67>>2]|0;
      $140 = (+FUNCTION_TABLE_di[$138 & 31]($139));
      $141 = $63 * $140;
      $142 = HEAP32[$0>>2]|0;
      $143 = ((($142)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = HEAP32[$67>>2]|0;
      $146 = (+FUNCTION_TABLE_di[$144 & 31]($145));
      $147 = !($141 <= $38);
      if ($147) {
       $116 = $141;$121 = $146;
      } else {
       $$lcssa284 = $146;$$lcssa287 = $141;
       break L13;
      }
     }
     if ($188) {
      $$5 = $$3;
      break L4;
     } else {
      $$0 = 0;
     }
     return ($$0|0);
    } else {
     $$lcssa284 = $75;$$lcssa287 = $70;
    }
   } while(0);
   $111 = $38 * $$lcssa284;
   $112 = $31 - $111;
   $113 = $$lcssa287 + $112;
   $114 = (~~(($113)));
   $$5 = $114;
  }
 } while(0);
 $238 = (($2) - ($$5))|0;
 $239 = $4 ? $238 : $$5;
 $$0 = $239;
 return ($$0|0);
}
function _gsl_ran_gamma_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0.0, $$01217 = 0, $$013 = 0.0, $$018 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(12);
 if (!($2)) {
  $15 = (+($1>>>0));
  $16 = $15 * 2.0;
  $17 = $16 + -1.0;
  $18 = (+Math_sqrt((+$17)));
  $19 = ((($0)) + 4|0);
  $20 = $15 + -1.0;
  while(1) {
   $21 = HEAP32[$0>>2]|0;
   $22 = ((($21)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$19>>2]|0;
   $25 = (+FUNCTION_TABLE_di[$23 & 31]($24));
   $26 = $25 * 3.1415926535897931;
   $27 = (+Math_tan((+$26)));
   $28 = $18 * $27;
   $29 = $28 + $15;
   $30 = $29 + -1.0;
   $31 = !($30 <= 0.0);
   if ($31) {
    $32 = HEAP32[$0>>2]|0;
    $33 = ((($32)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$19>>2]|0;
    $36 = (+FUNCTION_TABLE_di[$34 & 31]($35));
    $37 = $27 * $27;
    $38 = $37 + 1.0;
    $39 = $30 / $20;
    $40 = (+Math_log((+$39)));
    $41 = $20 * $40;
    $42 = $41 - $28;
    $43 = (+Math_exp((+$42)));
    $44 = $38 * $43;
    $45 = $36 > $44;
    if (!($45)) {
     $$013 = $30;
     break;
    }
   }
  }
  return (+$$013);
 }
 $3 = ($1|0)==(0);
 if ($3) {
  $$0$lcssa = 1.0;
 } else {
  $4 = ((($0)) + 4|0);
  $$01217 = 0;$$018 = 1.0;
  while(1) {
   while(1) {
    $5 = HEAP32[$0>>2]|0;
    $6 = ((($5)) + 24|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = HEAP32[$4>>2]|0;
    $9 = (+FUNCTION_TABLE_di[$7 & 31]($8));
    $10 = $9 == 0.0;
    if (!($10)) {
     break;
    }
   }
   $11 = $$018 * $9;
   $12 = (($$01217) + 1)|0;
   $exitcond = ($12|0)==($1|0);
   if ($exitcond) {
    $$0$lcssa = $11;
    break;
   } else {
    $$01217 = $12;$$018 = $11;
   }
  }
 }
 $13 = (+Math_log((+$$0$lcssa)));
 $14 = - $13;
 $$013 = $14;
 return (+$$013);
}
function _gsl_ran_ugaussian_pdf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * $0;
 $2 = $1 * -0.5;
 $3 = (+Math_exp((+$2)));
 $4 = $3 * 0.3989422804014327;
 return (+$4);
}
function _gsl_ran_landau_pdf($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 < -5.5;
 if ($1) {
  $2 = $0 + 1.0;
  $3 = (+Math_exp((+$2)));
  $4 = -1.0 / $3;
  $5 = (+Math_exp((+$4)));
  $6 = (+Math_sqrt((+$3)));
  $7 = $5 / $6;
  $8 = $7 * 0.39894228030000001;
  $9 = $3 * 0.02709538966;
  $10 = $9 + -0.019965277779999999;
  $11 = $3 * $10;
  $12 = $11 + 0.041666666669999998;
  $13 = $3 * $12;
  $14 = $13 + 1.0;
  $15 = $8 * $14;
  $$0 = $15;
  return (+$$0);
 }
 $16 = $0 < -1.0;
 if ($16) {
  $17 = -1.0 - $0;
  $18 = (+Math_exp((+$17)));
  $19 = - $18;
  $20 = (+Math_exp((+$19)));
  $21 = (+Math_sqrt((+$18)));
  $22 = $20 * $21;
  $23 = $0 * 0.001511162253;
  $24 = $23 + -0.0062982876350000001;
  $25 = $24 * $0;
  $26 = $25 + 0.039842437000000001;
  $27 = $26 * $0;
  $28 = $27 + -0.12497625499999999;
  $29 = $28 * $0;
  $30 = $29 + 0.42598948749999999;
  $31 = $22 * $30;
  $32 = $0 * 0.0037789420630000002;
  $33 = $32 + -0.01608042283;
  $34 = $33 * $0;
  $35 = $34 + 0.09594393323;
  $36 = $35 * $0;
  $37 = $36 + -0.3388260629;
  $38 = $37 * $0;
  $39 = $38 + 1.0;
  $40 = $31 / $39;
  $$0 = $40;
  return (+$$0);
 }
 $41 = $0 < 1.0;
 if ($41) {
  $42 = $0 * 1.2836172110000001E-4;
  $43 = $42 + -0.001394989411;
  $44 = $43 * $0;
  $45 = $44 + 0.014888505180000001;
  $46 = $45 * $0;
  $47 = $46 + 0.1173957403;
  $48 = $47 * $0;
  $49 = $48 + 0.1788541609;
  $50 = $0 * 0.0087906097139999993;
  $51 = $50 + 0.066942195479999994;
  $52 = $51 * $0;
  $53 = $52 + 0.3153932961;
  $54 = $53 * $0;
  $55 = $54 + 0.74287950820000004;
  $56 = $55 * $0;
  $57 = $56 + 1.0;
  $58 = $49 / $57;
  $$0 = $58;
  return (+$$0);
 }
 $59 = $0 < 5.0;
 if ($59) {
  $60 = $0 * 2.0310491009999998E-6;
  $61 = 6.6116673190000003E-5 - $60;
  $62 = $61 * $0;
  $63 = $62 + 0.006325387654;
  $64 = $63 * $0;
  $65 = $64 + 0.093591616619999998;
  $66 = $65 * $0;
  $67 = $66 + 0.1788544503;
  $68 = $0 * 0.0069573016750000003;
  $69 = $68 + 0.047467223840000003;
  $70 = $69 * $0;
  $71 = $70 + 0.25606166650000001;
  $72 = $71 * $0;
  $73 = $72 + 0.60978099210000003;
  $74 = $73 * $0;
  $75 = $74 + 1.0;
  $76 = $67 / $75;
  $$0 = $76;
  return (+$$0);
 }
 $77 = $0 < 12.0;
 if ($77) {
  $78 = 1.0 / $0;
  $79 = $78 * $78;
  $80 = $78 * 427.02621859999999;
  $81 = $80 + -743.77924440000004;
  $82 = $78 * $81;
  $83 = $82 + 849.27943600000003;
  $84 = $78 * $83;
  $85 = $84 + 118.67232730000001;
  $86 = $78 * $85;
  $87 = $86 + 0.98740544070000002;
  $88 = $79 * $87;
  $89 = $78 * 1597.0635110000001;
  $90 = $89 + 2016.712389;
  $91 = $78 * $90;
  $92 = $91 + 337.6496214;
  $93 = $78 * $92;
  $94 = $93 + 106.8615961;
  $95 = $78 * $94;
  $96 = $95 + 1.0;
  $97 = $88 / $96;
  $$0 = $97;
  return (+$$0);
 }
 $98 = $0 < 50.0;
 if ($98) {
  $99 = 1.0 / $0;
  $100 = $99 * $99;
  $101 = $99 * 22324.949100000002;
  $102 = 21217.86767 - $101;
  $103 = $99 * $102;
  $104 = $103 + 4789.7112889999999;
  $105 = $99 * $104;
  $106 = $105 + 167.57024340000001;
  $107 = $99 * $106;
  $108 = $107 + 1.003675074;
  $109 = $100 * $108;
  $110 = $99 * 66924.28357;
  $111 = $110 + 9834.6988760000004;
  $112 = $99 * $111;
  $113 = $112 + 3745.3104880000001;
  $114 = $99 * $113;
  $115 = $114 + 156.94245369999999;
  $116 = $99 * $115;
  $117 = $116 + 1.0;
  $118 = $109 / $117;
  $$0 = $118;
  return (+$$0);
 }
 $119 = $0 < 300.0;
 if ($119) {
  $120 = 1.0 / $0;
  $121 = $120 * $120;
  $122 = $120 * 5743609.1090000002;
  $123 = 475554.6998 - $122;
  $124 = $120 * $123;
  $125 = $124 + 62972.926650000001;
  $126 = $120 * $125;
  $127 = $126 + 664.91431360000001;
  $128 = $120 * $127;
  $129 = $128 + 1.0008276190000001;
  $130 = $121 * $129;
  $131 = $120 * 2815759.9389999998;
  $132 = 165917.4725 - $131;
  $133 = $120 * $132;
  $134 = $133 + 56974.733330000003;
  $135 = $120 * $134;
  $136 = $135 + 651.41010979999999;
  $137 = $120 * $136;
  $138 = $137 + 1.0;
  $139 = $130 / $138;
  $$0 = $139;
  return (+$$0);
 } else {
  $140 = (+Math_log((+$0)));
  $141 = $140 * $0;
  $142 = $0 + 1.0;
  $143 = $141 / $142;
  $144 = $0 - $143;
  $145 = 1.0 / $144;
  $146 = $145 * $145;
  $147 = $145 * 4.2846407429999998;
  $148 = -1.84556867 - $147;
  $149 = $145 * $148;
  $150 = $149 + 1.0;
  $151 = $146 * $150;
  $$0 = $151;
  return (+$$0);
 }
 return +(0.0);
}
function _gsl_ran_poisson($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$033$lcssa = 0.0, $$03346 = 0.0, $$035$lcssa = 0, $$03545 = 0, $$038 = 0.0, $$2 = 0, $$237 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0;
 var $22 = 0.0, $23 = 0, $24 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 > 10.0;
 L1: do {
  if ($2) {
   $$03346 = $1;$$03545 = 0;
   while(1) {
    $3 = $$03346 * 0.875;
    $4 = (~~(($3))>>>0);
    $5 = (+_gsl_ran_gamma_int($0,$4));
    $6 = !($5 >= $$03346);
    if (!($6)) {
     break;
    }
    $11 = (($$03545) + ($4))|0;
    $12 = $$03346 - $5;
    $13 = $12 > 10.0;
    if ($13) {
     $$03346 = $12;$$03545 = $11;
    } else {
     $$033$lcssa = $12;$$035$lcssa = $11;
     break L1;
    }
   }
   $7 = $$03346 / $5;
   $8 = (($4) + -1)|0;
   $9 = (_gsl_ran_binomial($0,$7,$8)|0);
   $10 = (($9) + ($$03545))|0;
   $$2 = $10;
   return ($$2|0);
  } else {
   $$033$lcssa = $1;$$035$lcssa = 0;
  }
 } while(0);
 $14 = - $$033$lcssa;
 $15 = (+Math_exp((+$14)));
 $16 = ((($0)) + 4|0);
 $$038 = 1.0;$$237 = $$035$lcssa;
 while(1) {
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$16>>2]|0;
  $21 = (+FUNCTION_TABLE_di[$19 & 31]($20));
  $22 = $$038 * $21;
  $23 = (($$237) + 1)|0;
  $24 = $22 > $15;
  if ($24) {
   $$038 = $22;$$237 = $23;
  } else {
   $$2 = $$237;
   break;
  }
 }
 return ($$2|0);
}
function _gsl_ran_poisson_pdf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_gsl_sf_lnfact($0));
 $3 = (+Math_log((+$1)));
 $4 = (+($0>>>0));
 $5 = $3 * $4;
 $6 = $5 - $2;
 $7 = $6 - $1;
 $8 = (+Math_exp((+$7)));
 return (+$8);
}
function _gsl_rng_get($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$3 & 63]($5)|0);
 return ($6|0);
}
function _gsl_rng_uniform($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (+FUNCTION_TABLE_di[$3 & 31]($5));
 return (+$6);
}
function _gsl_rng_uniform_pos($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = (+FUNCTION_TABLE_di[$4 & 31]($5));
  $7 = $6 == 0.0;
  if (!($7)) {
   break;
  }
 }
 return (+$6);
}
function _gsl_rng_alloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(8)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _gsl_error(81703,81743,36,8);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_calloc(1,$4)|0);
 $6 = ((($1)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _free($1);
  _gsl_error(81749,81743,46,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$1>>2] = $0;
  $8 = ((($0)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vii[$9 & 127]($5,0);
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_rng_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$4 & 127]($6,$1);
 return;
}
function _gsl_rng_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 _free($0);
 return;
}
function _taus_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $spec$select = $2 ? 1 : $1;
 $3 = ($spec$select*69069)|0;
 $4 = Math_imul($spec$select, 475559465)|0;
 $5 = ((($0)) + 4|0);
 $6 = Math_imul($spec$select, -1493191723)|0;
 $7 = ((($0)) + 8|0);
 $8 = Math_imul($spec$select, 282906624)|0;
 $9 = $8 & -8192;
 $10 = Math_imul($spec$select, 565813248)|0;
 $11 = $10 ^ $3;
 $12 = $11 >>> 19;
 $13 = $12 | $9;
 $14 = Math_imul($spec$select, -980983152)|0;
 $15 = $14 & 268435328;
 $16 = Math_imul($spec$select, 1902237860)|0;
 $17 = $16 ^ $4;
 $18 = $17 >>> 25;
 $19 = $18 | $15;
 $20 = Math_imul($spec$select, 1739194368)|0;
 $21 = $20 & -2097152;
 $22 = Math_imul($spec$select, 939368104)|0;
 $23 = $22 ^ $6;
 $24 = $23 >>> 11;
 $25 = $24 | $21;
 $26 = $13 << 12;
 $27 = $26 & -8192;
 $28 = $13 << 13;
 $29 = $28 ^ $8;
 $30 = $29 >>> 19;
 $31 = $30 | $27;
 $32 = $19 << 4;
 $33 = $32 & 268435328;
 $34 = Math_imul($spec$select, 371034688)|0;
 $35 = $34 ^ $14;
 $36 = $35 >>> 25;
 $37 = $33 | $36;
 $38 = $24 << 17;
 $39 = $38 & -2097152;
 $40 = $25 << 3;
 $41 = $40 ^ $25;
 $42 = $41 >>> 11;
 $43 = $42 | $39;
 $44 = $31 << 12;
 $45 = $44 & -8192;
 $46 = $31 << 13;
 $47 = $46 ^ $26;
 $48 = $47 >>> 19;
 $49 = $48 | $45;
 $50 = $37 << 4;
 $51 = $50 & 268435328;
 $52 = Math_imul($spec$select, 1641587712)|0;
 $53 = $32 ^ $52;
 $54 = $53 >>> 25;
 $55 = $51 | $54;
 $56 = $42 << 17;
 $57 = $56 & -2097152;
 $58 = $43 << 3;
 $59 = $58 ^ $43;
 $60 = $59 >>> 11;
 $61 = $60 | $57;
 $62 = $49 << 12;
 $63 = $62 & -8192;
 $64 = $49 << 13;
 $65 = $64 ^ $44;
 $66 = $65 >>> 19;
 $67 = $66 | $63;
 $68 = $55 << 4;
 $69 = $68 & 268435328;
 $70 = Math_imul($spec$select, 495599616)|0;
 $71 = $50 ^ $70;
 $72 = $71 >>> 25;
 $73 = $69 | $72;
 $74 = $60 << 17;
 $75 = $74 & -2097152;
 $76 = $61 << 3;
 $77 = $76 ^ $61;
 $78 = $77 >>> 11;
 $79 = $78 | $75;
 $80 = $67 << 12;
 $81 = $80 & -8192;
 $82 = $67 << 13;
 $83 = $82 ^ $62;
 $84 = $83 >>> 19;
 $85 = $84 | $81;
 $86 = $73 << 4;
 $87 = $86 & 268435328;
 $88 = Math_imul($spec$select, -660340736)|0;
 $89 = $68 ^ $88;
 $90 = $89 >>> 25;
 $91 = $87 | $90;
 $92 = $78 << 17;
 $93 = $92 & -2097152;
 $94 = $79 << 3;
 $95 = $94 ^ $79;
 $96 = $95 >>> 11;
 $97 = $96 | $93;
 $98 = $85 << 12;
 $99 = $98 & -8192;
 $100 = $85 << 13;
 $101 = $100 ^ $80;
 $102 = $101 >>> 19;
 $103 = $102 | $99;
 HEAP32[$0>>2] = $103;
 $104 = $91 << 4;
 $105 = $104 & -128;
 $106 = Math_imul($spec$select, -1975517184)|0;
 $107 = $86 ^ $106;
 $108 = $107 >>> 25;
 $109 = $105 | $108;
 HEAP32[$5>>2] = $109;
 $110 = $96 << 17;
 $111 = $110 & -2097152;
 $112 = $97 << 3;
 $113 = $112 ^ $97;
 $114 = $113 >>> 11;
 $115 = $114 | $111;
 HEAP32[$7>>2] = $115;
 return;
}
function _taus_get($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 12;
 $3 = $2 & -8192;
 $4 = $1 << 13;
 $5 = $4 ^ $1;
 $6 = $5 >>> 19;
 $7 = $6 | $3;
 HEAP32[$0>>2] = $7;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 4;
 $11 = $10 & -128;
 $12 = $9 << 2;
 $13 = $12 ^ $9;
 $14 = $13 >>> 25;
 $15 = $14 | $11;
 HEAP32[$8>>2] = $15;
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 << 17;
 $19 = $18 & -2097152;
 $20 = $17 << 3;
 $21 = $20 ^ $17;
 $22 = $21 >>> 11;
 $23 = $22 | $19;
 HEAP32[$16>>2] = $23;
 $24 = $15 ^ $7;
 $25 = $24 ^ $23;
 return ($25|0);
}
function _taus_get_double($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 12;
 $3 = $2 & -8192;
 $4 = $1 << 13;
 $5 = $4 ^ $1;
 $6 = $5 >>> 19;
 $7 = $6 | $3;
 HEAP32[$0>>2] = $7;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 4;
 $11 = $10 & -128;
 $12 = $9 << 2;
 $13 = $12 ^ $9;
 $14 = $13 >>> 25;
 $15 = $14 | $11;
 HEAP32[$8>>2] = $15;
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 << 17;
 $19 = $18 & -2097152;
 $20 = $17 << 3;
 $21 = $20 ^ $17;
 $22 = $21 >>> 11;
 $23 = $22 | $19;
 HEAP32[$16>>2] = $23;
 $24 = $15 ^ $7;
 $25 = $24 ^ $23;
 $26 = (+($25>>>0));
 $27 = $26 * 2.3283064365386963E-10;
 return (+$27);
}
function _brent_init_3460($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3 + $4;
 $6 = $5 * 0.5;
 HEAPF64[$2>>3] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (+FUNCTION_TABLE_ddi[$7 & 63]($3,$9));
 $11 = (_gsl_finite($10)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  _gsl_error(81799,81828,57,9);
  $$0 = 9;
  return ($$0|0);
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$8>>2]|0;
 $15 = (+FUNCTION_TABLE_ddi[$13 & 63]($4,$14));
 $16 = (_gsl_finite($15)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  _gsl_error(81799,81828,58,9);
  $$0 = 9;
  return ($$0|0);
 }
 HEAPF64[$0>>3] = $3;
 $18 = ((($0)) + 40|0);
 HEAPF64[$18>>3] = $10;
 $19 = ((($0)) + 8|0);
 HEAPF64[$19>>3] = $4;
 $20 = ((($0)) + 48|0);
 HEAPF64[$20>>3] = $15;
 $21 = ((($0)) + 16|0);
 HEAPF64[$21>>3] = $4;
 $22 = ((($0)) + 56|0);
 HEAPF64[$22>>3] = $15;
 $23 = $4 - $3;
 $24 = ((($0)) + 24|0);
 HEAPF64[$24>>3] = $23;
 $25 = ((($0)) + 32|0);
 HEAPF64[$25>>3] = $23;
 $26 = $10 < 0.0;
 $27 = $15 < 0.0;
 $or$cond = $26 & $27;
 if (!($or$cond)) {
  $28 = $10 > 0.0;
  $29 = $15 > 0.0;
  $or$cond3 = $28 & $29;
  if (!($or$cond3)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 _gsl_error(81836,81828,74,4);
 $$0 = 4;
 return ($$0|0);
}
function _brent_iterate_3461($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0.0, $$0 = 0, $$0183 = 0, $$0184 = 0.0, $$0186 = 0.0, $$0188 = 0.0, $$0190 = 0.0, $$0193 = 0.0, $$0195 = 0.0, $$0196 = 0.0, $$0197 = 0.0, $$0200 = 0.0, $$0200$$1198 = 0.0, $$0202 = 0.0, $$1 = 0, $$1185 = 0.0, $$1187 = 0.0, $$1189 = 0.0, $$1191 = 0.0, $$1194 = 0.0;
 var $$1198 = 0.0, $$1198$$0200 = 0.0, $$1201 = 0.0, $$1201$$2199 = 0.0, $$2 = 0.0, $$2192 = 0.0, $$2192$pn = 0.0, $$2199 = 0.0, $$2199$$1201 = 0.0, $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0;
 var $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0;
 var $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = +HEAPF64[$0>>3];
 $6 = ((($0)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($0)) + 16|0);
 $9 = ((($0)) + 40|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 48|0);
 $12 = +HEAPF64[$11>>3];
 $13 = ((($0)) + 56|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($0)) + 24|0);
 $16 = ((($0)) + 32|0);
 $17 = $12 < 0.0;
 $18 = $14 < 0.0;
 $or$cond = $17 & $18;
 if ($or$cond) {
  label = 3;
 } else {
  $19 = +HEAPF64[$16>>3];
  $20 = +HEAPF64[$15>>3];
  $21 = +HEAPF64[$8>>3];
  $22 = $12 > 0.0;
  $23 = $14 > 0.0;
  $or$cond3 = $22 & $23;
  if ($or$cond3) {
   label = 3;
  } else {
   $$0183 = 0;$$0188 = $19;$$0190 = $20;$$0193 = $14;$$0197 = $21;
  }
 }
 if ((label|0) == 3) {
  $24 = $7 - $5;
  $$0183 = 1;$$0188 = $24;$$0190 = $24;$$0193 = $10;$$0197 = $5;
 }
 $25 = (+Math_abs((+$$0193)));
 $26 = (+Math_abs((+$12)));
 $27 = $25 < $26;
 if ($27) {
  $$0195 = $$0193;$$0196 = $12;$$0200 = $$0197;$$0202 = $7;$$1 = 1;$$1194 = $12;$$1198 = $7;
 } else {
  $$0195 = $12;$$0196 = $10;$$0200 = $7;$$0202 = $5;$$1 = $$0183;$$1194 = $$0193;$$1198 = $$0197;
 }
 $28 = (+Math_abs((+$$0200)));
 $29 = $28 * 1.1102230246251565E-16;
 $30 = $$1198 - $$0200;
 $31 = $30 * 0.5;
 $32 = $$0195 == 0.0;
 if ($32) {
  HEAPF64[$2>>3] = $$0200;
  HEAPF64[$3>>3] = $$0200;
  HEAPF64[$4>>3] = $$0200;
  $$0 = 0;
  return ($$0|0);
 }
 $33 = (+Math_abs((+$31)));
 $34 = !($33 <= $29);
 if (!($34)) {
  HEAPF64[$2>>3] = $$0200;
  $35 = $$0200 < $$1198;
  $$0200$$1198 = $35 ? $$0200 : $$1198;
  $$1198$$0200 = $35 ? $$1198 : $$0200;
  HEAPF64[$3>>3] = $$0200$$1198;
  HEAPF64[$4>>3] = $$1198$$0200;
  $$0 = 0;
  return ($$0|0);
 }
 $36 = (+Math_abs((+$$0188)));
 $37 = $36 < $29;
 if ($37) {
  $$2 = $31;$$2192 = $31;$$pre$phiZ2D = $33;
 } else {
  $38 = (+Math_abs((+$$0196)));
  $39 = (+Math_abs((+$$0195)));
  $40 = !($38 <= $39);
  if ($40) {
   $41 = $$0195 / $$0196;
   $42 = ($$1|0)==(0);
   if ($42) {
    $46 = $$0196 / $$1194;
    $47 = $$0195 / $$1194;
    $48 = $31 * 2.0;
    $49 = $48 * $46;
    $50 = $46 - $47;
    $51 = $49 * $50;
    $52 = $$0200 - $$0202;
    $53 = $47 + -1.0;
    $54 = $52 * $53;
    $55 = $51 - $54;
    $56 = $41 * $55;
    $57 = $46 + -1.0;
    $58 = $57 * $53;
    $59 = $41 + -1.0;
    $60 = $59 * $58;
    $$0184 = $60;$$0186 = $56;
   } else {
    $43 = $31 * 2.0;
    $44 = $43 * $41;
    $45 = 1.0 - $41;
    $$0184 = $45;$$0186 = $44;
   }
   $61 = $$0186 > 0.0;
   $62 = - $$0184;
   $63 = - $$0186;
   $$1187 = $61 ? $$0186 : $63;
   $$1185 = $61 ? $62 : $$0184;
   $64 = $$1187 * 2.0;
   $65 = $31 * 3.0;
   $66 = $65 * $$1185;
   $67 = $29 * $$1185;
   $68 = (+Math_abs((+$67)));
   $69 = $66 - $68;
   $70 = $$0188 * $$1185;
   $71 = (+Math_abs((+$70)));
   $72 = $69 < $71;
   $$ = $72 ? $69 : $71;
   $73 = $64 < $$;
   $74 = $$1187 / $$1185;
   $$1191 = $73 ? $74 : $31;
   $$1189 = $73 ? $$0190 : $31;
   $$pre = (+Math_abs((+$$1191)));
   $$2 = $$1189;$$2192 = $$1191;$$pre$phiZ2D = $$pre;
  } else {
   $$2 = $31;$$2192 = $31;$$pre$phiZ2D = $33;
  }
 }
 $75 = $$pre$phiZ2D > $29;
 $76 = $31 > 0.0;
 $77 = - $29;
 $78 = $76 ? $29 : $77;
 $$2192$pn = $75 ? $$2192 : $78;
 $$1201 = $$0200 + $$2192$pn;
 $79 = HEAP32[$1>>2]|0;
 $80 = ((($1)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (+FUNCTION_TABLE_ddi[$79 & 63]($$1201,$81));
 $83 = (_gsl_finite($82)|0);
 $84 = ($83|0)==(0);
 if ($84) {
  _gsl_error(81799,81828,202,9);
  $$0 = 9;
  return ($$0|0);
 }
 HEAPF64[$0>>3] = $$0200;
 HEAPF64[$6>>3] = $$1201;
 HEAPF64[$8>>3] = $$1198;
 HEAPF64[$15>>3] = $$2192;
 HEAPF64[$16>>3] = $$2;
 HEAPF64[$9>>3] = $$0195;
 HEAPF64[$11>>3] = $82;
 HEAPF64[$13>>3] = $$1194;
 HEAPF64[$2>>3] = $$1201;
 $85 = $82 < 0.0;
 $86 = $$1194 < 0.0;
 $or$cond5 = $86 & $85;
 if ($or$cond5) {
  label = 20;
 } else {
  $87 = $82 > 0.0;
  $88 = $$1194 > 0.0;
  $or$cond7 = $88 & $87;
  if ($or$cond7) {
   label = 20;
  } else {
   $$2199 = $$1198;
  }
 }
 if ((label|0) == 20) {
  $$2199 = $$0200;
 }
 $89 = $$1201 < $$2199;
 $$1201$$2199 = $89 ? $$1201 : $$2199;
 $$2199$$1201 = $89 ? $$2199 : $$1201;
 HEAPF64[$3>>3] = $$1201$$2199;
 HEAPF64[$4>>3] = $$2199$$1201;
 $$0 = 0;
 return ($$0|0);
}
function _gsl_root_test_interval($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$ = 0, $$0 = 0, $$028 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (+Math_abs((+$0)));
 $5 = (+Math_abs((+$1)));
 $6 = $3 < 0.0;
 if ($6) {
  _gsl_error(81866,81897,34,13);
  $$0 = 13;
  return ($$0|0);
 }
 $7 = $2 < 0.0;
 if ($7) {
  _gsl_error(81911,81897,37,13);
  $$0 = 13;
  return ($$0|0);
 }
 $8 = $0 > $1;
 if ($8) {
  _gsl_error(81942,81897,40,4);
  $$0 = 4;
  return ($$0|0);
 }
 $9 = $0 > 0.0;
 $10 = $1 > 0.0;
 $or$cond = $9 & $10;
 if ($or$cond) {
  label = 9;
 } else {
  $11 = $0 < 0.0;
  $12 = $1 < 0.0;
  $or$cond3 = $11 & $12;
  if ($or$cond3) {
   label = 9;
  } else {
   $$028 = 0.0;
  }
 }
 if ((label|0) == 9) {
  $13 = $4 < $5;
  $14 = $13 ? $4 : $5;
  $$028 = $14;
 }
 $15 = $$028 * $3;
 $16 = $15 + $2;
 $17 = $1 - $0;
 $18 = (+Math_abs((+$17)));
 $19 = $18 < $16;
 $$ = $19 ? 0 : -2;
 $$0 = $$;
 return ($$0|0);
}
function _gsl_root_fsolver_alloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(40)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _gsl_error(81978,82026,34,8);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_malloc($4)|0);
 $6 = ((($1)) + 32|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _free($1);
  _gsl_error(82036,82026,44,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$1>>2] = $0;
  $8 = ((($1)) + 4|0);
  HEAP32[$8>>2] = 0;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_root_fsolver_set($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2 > $3;
 if ($4) {
  _gsl_error(82083,82026,58,4);
  $$0 = 4;
  return ($$0|0);
 } else {
  $5 = ((($0)) + 4|0);
  HEAP32[$5>>2] = $1;
  $6 = $2 + $3;
  $7 = $6 * 0.5;
  $8 = ((($0)) + 8|0);
  HEAPF64[$8>>3] = $7;
  $9 = ((($0)) + 16|0);
  HEAPF64[$9>>3] = $2;
  $10 = ((($0)) + 24|0);
  HEAPF64[$10>>3] = $3;
  $11 = HEAP32[$0>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($0)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_iiiidd[$13 & 31]($15,$1,$8,$2,$3)|0);
  $$0 = $16;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_root_fsolver_iterate($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = ((($0)) + 16|0);
 $10 = ((($0)) + 24|0);
 $11 = (FUNCTION_TABLE_iiiiii[$3 & 63]($5,$7,$8,$9,$10)|0);
 return ($11|0);
}
function _gsl_root_fsolver_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 _free($0);
 return;
}
function _gsl_root_fsolver_root($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _gsl_root_fsolver_x_lower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _gsl_root_fsolver_x_upper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _gsl_sf_bessel_IJ_taylor_e($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $$ = 0, $$0$lcssa = 0, $$0105112 = 0.0, $$0106111 = 0.0, $$0107 = 0, $$0108 = 0, $$0113 = 0, $$1 = 0.0, $$109 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0;
 var $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond = 0, $spec$select = 0, $spec$select110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 48|0;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $9 = sp;
 $10 = $0 < 0.0;
 $11 = $1 < 0.0;
 $or$cond = $10 | $11;
 if ($or$cond) {
  HEAPF64[$5>>3] = nan;
  $12 = ((($5)) + 8|0);
  HEAPF64[$12>>3] = nan;
  _gsl_error(82896,82116,102,1);
  $$0107 = 1;
  STACKTOP = sp;return ($$0107|0);
 }
 $13 = $1 == 0.0;
 if ($13) {
  $14 = $0 == 0.0;
  if ($14) {
   HEAPF64[$5>>3] = 1.0;
   $15 = ((($5)) + 8|0);
   HEAPF64[$15>>3] = 0.0;
   $$0107 = 0;
   STACKTOP = sp;return ($$0107|0);
  } else {
   ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
   $$0107 = 0;
   STACKTOP = sp;return ($$0107|0);
  }
 }
 $16 = $0 == 0.0;
 do {
  if ($16) {
   HEAPF64[$6>>3] = 1.0;
   $17 = ((($6)) + 8|0);
   HEAPF64[$17>>3] = 0.0;
   $$0108 = 0;
  } else {
   $18 = $0 < 2147483646.0;
   if ($18) {
    $19 = $0 + 0.5;
    $20 = (+Math_floor((+$19)));
    $21 = (~~(($20)));
    $22 = (+($21|0));
    $23 = $0 - $22;
    $24 = $22 + 1.0;
    $25 = (_gsl_sf_poch_e($24,$23,$7)|0);
    $26 = $1 * 0.5;
    $27 = (_gsl_sf_taylorcoeff_e($21,$26,$8)|0);
    $28 = (+Math_pow((+$26),(+$23)));
    $29 = +HEAPF64[$8>>3];
    $30 = $28 * $29;
    $31 = +HEAPF64[$7>>3];
    $32 = $30 / $31;
    HEAPF64[$6>>3] = $32;
    $33 = ((($8)) + 8|0);
    $34 = +HEAPF64[$33>>3];
    $35 = $28 * $34;
    $36 = $35 / $31;
    $37 = ((($6)) + 8|0);
    $38 = (+Math_abs((+$32)));
    $39 = $38 / $31;
    $40 = ((($7)) + 8|0);
    $41 = +HEAPF64[$40>>3];
    $42 = $39 * $41;
    $43 = $36 + $42;
    $44 = $38 * 4.4408920985006262E-16;
    $45 = $44 + $43;
    HEAPF64[$37>>3] = $45;
    $46 = ($27|0)==(0);
    $$ = $46 ? $25 : $27;
    $$0108 = $$;
    break;
   } else {
    $47 = $0 + 1.0;
    $48 = (_gsl_sf_lngamma_e($47,$9)|0);
    $49 = $1 * 0.5;
    $50 = (+Math_log((+$49)));
    $51 = $50 * $0;
    $52 = +HEAPF64[$9>>3];
    $53 = $51 - $52;
    $54 = (+Math_abs((+$51)));
    $55 = (+Math_abs((+$52)));
    $56 = $54 + $55;
    $57 = $56 * 2.2204460492503131E-16;
    $58 = ((($9)) + 8|0);
    $59 = +HEAPF64[$58>>3];
    $60 = $59 + $57;
    $61 = (_gsl_sf_exp_err_e($53,$60,$6)|0);
    $62 = ($61|0)==(0);
    $$109 = $62 ? $48 : $61;
    $$0108 = $$109;
    break;
   }
  }
 } while(0);
 $63 = (+($2|0));
 $64 = $63 * 0.25;
 $65 = $64 * $1;
 $66 = $65 * $1;
 $67 = ($3|0)<(1);
 L20: do {
  if ($67) {
   $$0$lcssa = 1;$$1 = 1.0;
  } else {
   $$0105112 = 1.0;$$0106111 = 1.0;$$0113 = 1;
   while(1) {
    $68 = (+($$0113|0));
    $69 = $68 + $0;
    $70 = $69 * $68;
    $71 = $66 / $70;
    $72 = $$0105112 * $71;
    $73 = $$0106111 + $72;
    $74 = $72 / $73;
    $75 = (+Math_abs((+$74)));
    $76 = $75 < $4;
    if ($76) {
     $$0$lcssa = $$0113;$$1 = $73;
     break L20;
    }
    $77 = (($$0113) + 1)|0;
    $78 = ($$0113|0)<($3|0);
    if ($78) {
     $$0105112 = $72;$$0106111 = $73;$$0113 = $77;
    } else {
     $$0$lcssa = $77;$$1 = $73;
     break;
    }
   }
  }
 } while(0);
 $79 = (+Math_abs((+$$1)));
 $80 = $79 * $4;
 $81 = ($$0$lcssa|0)<($3|0);
 $82 = +HEAPF64[$6>>3];
 $83 = ((($6)) + 8|0);
 $84 = +HEAPF64[$83>>3];
 $85 = (_gsl_sf_multiply_err_e($82,$84,$$1,$80,$5)|0);
 $86 = ($85|0)==(0);
 $87 = ($$0108|0)==(0);
 $88 = $81 ? 0 : 11;
 $spec$select = $87 ? $88 : $$0108;
 $spec$select110 = $86 ? $spec$select : $85;
 $$0107 = $spec$select110;
 STACKTOP = sp;return ($$0107|0);
}
function _gsl_sf_bessel_Inu_scaled_asymp_unif_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $$sink = 0.0, $$sink80 = 0.0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
 var $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $1 / $0;
 $5 = (+_hypot(1.0,$4));
 $6 = $0 * 6.2831853071795862;
 $7 = $6 * $5;
 $8 = (+Math_sqrt((+$7)));
 $9 = 1.0 / $8;
 $10 = $4 < 165140.3718518207;
 if ($10) {
  $11 = $5 + 1.0;
  $12 = $4 / $11;
  $13 = (+Math_log((+$12)));
  $14 = $5 + $13;
  $15 = $14 - $4;
  $$sink = $15;$$sink80 = $0;
 } else {
  $16 = $0 * -0.5;
  $17 = $16 / $4;
  $18 = $4 * 12.0;
  $19 = $4 * $18;
  $20 = 1.0 / $19;
  $21 = 1.0 - $20;
  $$sink = $17;$$sink80 = $21;
 }
 $22 = $$sink * $$sink80;
 $23 = (_gsl_sf_exp_e($22,$3)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = 1.0 / $5;
  $26 = $25 * $25;
  $27 = $25 * $26;
  $28 = $25 * $27;
  $29 = $25 * $28;
  $30 = $25 * $29;
  $31 = $25 * $30;
  $32 = $25 * $31;
  $33 = $25 * $32;
  $34 = $25 * $33;
  $35 = $25 * $34;
  $36 = $25 * $35;
  $37 = $25 * $36;
  $38 = $25 * $37;
  $39 = $25 * $38;
  $40 = $25 * 3.0;
  $41 = $27 * 5.0;
  $42 = $40 - $41;
  $43 = $42 / 24.0;
  $44 = $43 / $0;
  $45 = $44 + 1.0;
  $46 = $26 * 81.0;
  $47 = $28 * 462.0;
  $48 = $46 - $47;
  $49 = $30 * 385.0;
  $50 = $48 + $49;
  $51 = $50 / 1152.0;
  $52 = $0 * $0;
  $53 = $51 / $52;
  $54 = $45 + $53;
  $55 = $27 * 30375.0;
  $56 = $29 * 369603.0;
  $57 = $55 - $56;
  $58 = $31 * 765765.0;
  $59 = $57 + $58;
  $60 = $33 * 425425.0;
  $61 = $59 - $60;
  $62 = $61 / 414720.0;
  $63 = $52 * $0;
  $64 = $62 / $63;
  $65 = $54 + $64;
  $66 = $28 * 4465125.0;
  $67 = $30 * 94121676.0;
  $68 = $66 - $67;
  $69 = $32 * 349922430.0;
  $70 = $68 + $69;
  $71 = $34 * 446185740.0;
  $72 = $70 - $71;
  $73 = $36 * 185910725.0;
  $74 = $72 + $73;
  $75 = $74 / 39813120.0;
  $76 = $63 * $0;
  $77 = $75 / $76;
  $78 = $65 + $77;
  $79 = $29 * 1519035525.0;
  $80 = $31 * 49286948607.0;
  $81 = $79 - $80;
  $82 = $33 * 284499769554.0;
  $83 = $81 + $82;
  $84 = $35 * 614135872350.0;
  $85 = $83 - $84;
  $86 = $37 * 566098157625.0;
  $87 = $85 + $86;
  $88 = $39 * 188699385875.0;
  $89 = $87 - $88;
  $90 = $89 / 6688604160.0;
  $91 = $76 * $0;
  $92 = $90 / $91;
  $93 = $78 + $92;
  $94 = +HEAPF64[$3>>3];
  $95 = $9 * $94;
  $96 = $95 * $93;
  HEAPF64[$2>>3] = $96;
  $97 = $91 * $0;
  $98 = $95 / $97;
  $99 = ((($2)) + 8|0);
  $100 = ((($3)) + 8|0);
  $101 = +HEAPF64[$100>>3];
  $102 = $9 * $101;
  $103 = (+Math_abs((+$93)));
  $104 = $102 * $103;
  $105 = $98 + $104;
  $106 = (+Math_abs((+$96)));
  $107 = $106 * 4.4408920985006262E-16;
  $108 = $105 + $107;
  HEAPF64[$99>>3] = $108;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_bessel_I_CF1_ser($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$035 = 0, $$03645 = 0, $$03744 = 0.0, $$03843 = 0.0, $$03942 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $$03645 = 1;$$03744 = 0.0;$$03843 = 1.0;$$03942 = 1.0;
 while(1) {
  $3 = (+($$03645|0));
  $4 = $3 + $0;
  $5 = $1 / $4;
  $6 = $5 * 0.25;
  $7 = $6 * $1;
  $8 = $4 + 1.0;
  $9 = $7 / $8;
  $10 = $$03744 + 1.0;
  $11 = $10 * $9;
  $12 = - $11;
  $13 = $11 + 1.0;
  $14 = $12 / $13;
  $15 = $$03942 * $14;
  $16 = $$03843 + $15;
  $17 = $15 / $16;
  $18 = (+Math_abs((+$17)));
  $19 = !($18 < 2.2204460492503131E-16);
  if (!($19)) {
   label = 3;
   break;
  }
  $24 = (($$03645) + 1)|0;
  $25 = ($24>>>0)<(20000);
  if ($25) {
   $$03645 = $24;$$03744 = $14;$$03843 = $16;$$03942 = $15;
  } else {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  $20 = $0 + 1.0;
  $21 = $20 * 2.0;
  $22 = $1 / $21;
  $23 = $22 * $16;
  HEAPF64[$2>>3] = $23;
  $$035 = 0;
  return ($$035|0);
 }
 else if ((label|0) == 5) {
  $26 = $0 + 1.0;
  $27 = $26 * 2.0;
  $28 = $1 / $27;
  $29 = $28 * $16;
  HEAPF64[$2>>3] = $29;
  _gsl_error(82813,82116,656,11);
  $$035 = 11;
  return ($$035|0);
 }
 return (0)|0;
}
function _gsl_sf_bessel_K_scaled_steed_temme_CF2($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0100103 = 0.0, $$0101102 = 0.0, $$089 = 0, $$090$lcssa = 0, $$090112 = 0, $$091111 = 0.0, $$092110 = 0.0, $$093109 = 0.0, $$094108 = 0.0, $$095107 = 0.0, $$096106 = 0.0, $$097105 = 0.0, $$097105$phi = 0.0, $$098104 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0;
 var $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1 + 1.0;
 $6 = $5 * 2.0;
 $7 = 1.0 / $6;
 $8 = $0 * $0;
 $9 = 0.25 - $8;
 $10 = - $9;
 $11 = $9 * $7;
 $12 = $11 + 1.0;
 $$0100103 = $7;$$0101102 = $7;$$090112 = 2;$$091111 = $12;$$092110 = $9;$$093109 = $9;$$094108 = $6;$$095107 = $10;$$096106 = 1.0;$$097105 = 0.0;$$098104 = $7;
 while(1) {
  $13 = (($$090112) + -1)|0;
  $14 = (+($13|0));
  $15 = $14 * 2.0;
  $16 = $$095107 - $15;
  $17 = $$093109 * $16;
  $18 = - $17;
  $19 = (+($$090112|0));
  $20 = $18 / $19;
  $21 = $$096106 * $$094108;
  $22 = $$097105 - $21;
  $23 = $22 / $16;
  $24 = $23 * $20;
  $25 = $$092110 + $24;
  $26 = $$094108 + 2.0;
  $27 = $$0101102 * $16;
  $28 = $26 + $27;
  $29 = 1.0 / $28;
  $30 = $26 * $29;
  $31 = $30 + -1.0;
  $32 = $$0100103 * $31;
  $33 = $$098104 + $32;
  $34 = $25 * $32;
  $35 = $$091111 + $34;
  $36 = $34 / $35;
  $37 = (+Math_abs((+$36)));
  $38 = !($37 < 2.2204460492503131E-16);
  if (!($38)) {
   $$090$lcssa = $$090112;
   break;
  }
  $39 = (($$090112) + 1)|0;
  $40 = ($39>>>0)<(10001);
  if ($40) {
   $$097105$phi = $$096106;$$0100103 = $32;$$0101102 = $29;$$090112 = $39;$$091111 = $35;$$092110 = $25;$$093109 = $20;$$094108 = $26;$$095107 = $16;$$096106 = $23;$$098104 = $33;$$097105 = $$097105$phi;
  } else {
   $$090$lcssa = 10001;
   break;
  }
 }
 $41 = $9 * $33;
 $42 = $1 * 2.0;
 $43 = 3.1415926535897931 / $42;
 $44 = (+Math_sqrt((+$43)));
 $45 = $44 / $35;
 HEAPF64[$2>>3] = $45;
 $46 = $0 + $1;
 $47 = $46 + 0.5;
 $48 = $47 - $41;
 $49 = $45 * $48;
 $50 = $49 / $1;
 HEAPF64[$3>>3] = $50;
 $51 = $0 / $1;
 $52 = +HEAPF64[$2>>3];
 $53 = $51 * $52;
 $54 = $53 - $50;
 HEAPF64[$4>>3] = $54;
 $55 = ($$090$lcssa|0)==(10000);
 if (!($55)) {
  $$089 = 0;
  return ($$089|0);
 }
 _gsl_error(82813,82116,772,11);
 $$089 = 11;
 return ($$089|0);
}
function _gsl_sf_bessel_sin_pi4_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0.0, $$047 = 0.0, $$sink48 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_sin((+$0)));
 $4 = (+Math_cos((+$0)));
 $5 = $3 + $4;
 $6 = $3 - $4;
 $7 = (+Math_abs((+$4)));
 $8 = (+Math_abs((+$3)));
 $9 = $7 + $8;
 $10 = (+Math_abs((+$1)));
 $11 = $10 < 7.4009597974140505E-4;
 if ($11) {
  $12 = $1 * $1;
  $13 = $12 / 6.0;
  $14 = $12 / 20.0;
  $15 = 1.0 - $14;
  $16 = $13 * $15;
  $17 = 1.0 - $16;
  $18 = $17 * $1;
  $19 = $12 * 0.5;
  $20 = $12 / 12.0;
  $21 = 1.0 - $20;
  $22 = $19 * $21;
  $23 = 1.0 - $22;
  $$0 = $18;$$047 = $23;
 } else {
  $24 = (+Math_sin((+$1)));
  $25 = (+Math_cos((+$1)));
  $$0 = $24;$$047 = $25;
 }
 $26 = $6 * $$047;
 $27 = $5 * $$0;
 $28 = $26 + $27;
 $29 = $28 / 1.4142135623730951;
 HEAPF64[$2>>3] = $29;
 $30 = (+Math_abs((+$$047)));
 $31 = (+Math_abs((+$$0)));
 $32 = $30 + $31;
 $33 = $32 * 4.4408920985006262E-16;
 $34 = $9 * $33;
 $35 = $34 / 1.4142135623730951;
 $36 = ((($2)) + 8|0);
 HEAPF64[$36>>3] = $35;
 $37 = $0 > 4503599627370496.0;
 do {
  if ($37) {
   $38 = $0 * 0.5;
   $$sink48 = $38;
  } else {
   $39 = $0 > 67108864.0;
   if ($39) {
    $40 = $0 * 256.0;
    $41 = $40 * 1.4901161193847656E-8;
    $$sink48 = $41;
    break;
   } else {
    return 0;
   }
  }
 } while(0);
 $42 = $$sink48 * $35;
 HEAPF64[$36>>3] = $42;
 return 0;
}
function _gsl_sf_bessel_I0_scaled_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0;
 var $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0;
 var $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0;
 var $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0;
 var $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0;
 var $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0;
 var $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0;
 var $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0;
 var $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0;
 var $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0;
 var $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0;
 var $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0;
 var $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $5 = 0.0, $50 = 0.0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+Math_abs((+$0)));
 $3 = $2 < 2.9802322387695313E-8;
 if ($3) {
  $4 = 1.0 - $2;
  HEAPF64[$1>>3] = $4;
  $5 = $2 * 0.5;
  $6 = $2 * $5;
  $7 = ((($1)) + 8|0);
  HEAPF64[$7>>3] = $6;
  return 0;
 }
 $8 = !($2 <= 3.0);
 if (!($8)) {
  $9 = - $2;
  $10 = (+Math_exp((+$9)));
  $11 = $0 * $0;
  $12 = $11 / 4.5;
  $13 = $12 + -1.0;
  $14 = $13 * 2.0;
  $15 = $14 + 1.0;
  $16 = $15 + -1.0;
  $17 = $16 * 0.5;
  $18 = $17 * 2.0;
  $19 = $18 * 0.0;
  $20 = $19 + 2.4500000000000001E-18;
  $21 = (+Math_abs((+$19)));
  $22 = $21 + 2.4500000000000001E-18;
  $23 = $22 + 0.0;
  $24 = $18 * $20;
  $25 = $24 + 5.3338999999999998E-16;
  $26 = (+Math_abs((+$24)));
  $27 = $26 + 5.3338999999999998E-16;
  $28 = $23 + $27;
  $29 = $18 * $25;
  $30 = $29 - $20;
  $31 = $30 + 9.5794509999999997E-14;
  $32 = (+Math_abs((+$29)));
  $33 = (+Math_abs((+$20)));
  $34 = $32 + $33;
  $35 = $34 + 9.5794509999999997E-14;
  $36 = $28 + $35;
  $37 = $18 * $31;
  $38 = $37 - $25;
  $39 = $38 + 1.3966500439999999E-11;
  $40 = (+Math_abs((+$37)));
  $41 = (+Math_abs((+$25)));
  $42 = $40 + $41;
  $43 = $42 + 1.3966500439999999E-11;
  $44 = $36 + $43;
  $45 = $18 * $39;
  $46 = $45 - $31;
  $47 = $46 + 1.61384906966E-9;
  $48 = (+Math_abs((+$45)));
  $49 = (+Math_abs((+$31)));
  $50 = $48 + $49;
  $51 = $50 + 1.61384906966E-9;
  $52 = $44 + $51;
  $53 = $18 * $47;
  $54 = $53 - $39;
  $55 = $54 + 1.4340062895106E-7;
  $56 = (+Math_abs((+$53)));
  $57 = (+Math_abs((+$39)));
  $58 = $56 + $57;
  $59 = $58 + 1.4340062895106E-7;
  $60 = $52 + $59;
  $61 = $18 * $55;
  $62 = $61 - $47;
  $63 = $62 + 9.4226576860019292E-6;
  $64 = (+Math_abs((+$61)));
  $65 = (+Math_abs((+$47)));
  $66 = $64 + $65;
  $67 = $66 + 9.4226576860019292E-6;
  $68 = $60 + $67;
  $69 = $18 * $63;
  $70 = $69 - $55;
  $71 = $70 + 4.3442709008164872E-4;
  $72 = (+Math_abs((+$69)));
  $73 = (+Math_abs((+$55)));
  $74 = $72 + $73;
  $75 = $74 + 4.3442709008164872E-4;
  $76 = $68 + $75;
  $77 = $18 * $71;
  $78 = $77 - $63;
  $79 = $78 + 0.013048914667072904;
  $80 = (+Math_abs((+$77)));
  $81 = (+Math_abs((+$63)));
  $82 = $80 + $81;
  $83 = $82 + 0.013048914667072904;
  $84 = $76 + $83;
  $85 = $18 * $79;
  $86 = $85 - $71;
  $87 = $86 + 0.22826445869203013;
  $88 = (+Math_abs((+$85)));
  $89 = (+Math_abs((+$71)));
  $90 = $88 + $89;
  $91 = $90 + 0.22826445869203013;
  $92 = $84 + $91;
  $93 = $18 * $87;
  $94 = $93 - $79;
  $95 = $94 + 1.9273379539938083;
  $96 = (+Math_abs((+$93)));
  $97 = (+Math_abs((+$79)));
  $98 = $96 + $97;
  $99 = $98 + 1.9273379539938083;
  $100 = $92 + $99;
  $101 = $17 * $95;
  $102 = $101 - $87;
  $103 = $102 + -0.038302736264195725;
  $104 = (+Math_abs((+$101)));
  $105 = (+Math_abs((+$87)));
  $106 = $105 + $104;
  $107 = $106 + 0.038302736264195725;
  $108 = $100 + $107;
  $109 = $108 * 2.2204460492503131E-16;
  $110 = $109 + 2.4500000000000001E-18;
  $111 = $103 + 2.75;
  $112 = $10 * $111;
  HEAPF64[$1>>3] = $112;
  $113 = (+Math_abs((+$112)));
  $114 = $113 * 2.2204460492503131E-16;
  $115 = $10 * $110;
  $116 = $114 + $115;
  $117 = ((($1)) + 8|0);
  HEAPF64[$117>>3] = $116;
  return 0;
 }
 $118 = !($2 <= 8.0);
 $119 = (+Math_sqrt((+$2)));
 if ($118) {
  $304 = 16.0 / $2;
  $305 = $304 + -1.0;
  $306 = $305 * 2.0;
  $307 = $306 + 1.0;
  $308 = $307 + -1.0;
  $309 = $308 * 0.5;
  $310 = $309 * 2.0;
  $311 = $310 * 0.0;
  $312 = $311 + 3.0000000000000001E-17;
  $313 = (+Math_abs((+$311)));
  $314 = $313 + 3.0000000000000001E-17;
  $315 = $314 + 0.0;
  $316 = $310 * $312;
  $317 = $316 + -2.7E-16;
  $318 = (+Math_abs((+$316)));
  $319 = $318 + 2.7E-16;
  $320 = $315 + $319;
  $321 = $310 * $317;
  $322 = $321 - $312;
  $323 = $322 + -3.4E-16;
  $324 = (+Math_abs((+$321)));
  $325 = (+Math_abs((+$312)));
  $326 = $324 + $325;
  $327 = $326 + 3.4E-16;
  $328 = $320 + $327;
  $329 = $310 * $323;
  $330 = $329 - $317;
  $331 = $330 + 1.76E-15;
  $332 = (+Math_abs((+$329)));
  $333 = (+Math_abs((+$317)));
  $334 = $332 + $333;
  $335 = $334 + 1.76E-15;
  $336 = $328 + $335;
  $337 = $310 * $331;
  $338 = $337 - $323;
  $339 = $338 + 3.8199999999999998E-15;
  $340 = (+Math_abs((+$337)));
  $341 = (+Math_abs((+$323)));
  $342 = $340 + $341;
  $343 = $342 + 3.8199999999999998E-15;
  $344 = $336 + $343;
  $345 = $310 * $339;
  $346 = $345 - $331;
  $347 = $346 + -9.5399999999999996E-15;
  $348 = (+Math_abs((+$345)));
  $349 = (+Math_abs((+$331)));
  $350 = $348 + $349;
  $351 = $350 + 9.5399999999999996E-15;
  $352 = $344 + $351;
  $353 = $310 * $347;
  $354 = $353 - $339;
  $355 = $354 + -4.1509999999999998E-14;
  $356 = (+Math_abs((+$353)));
  $357 = (+Math_abs((+$339)));
  $358 = $356 + $357;
  $359 = $358 + 4.1509999999999998E-14;
  $360 = $352 + $359;
  $361 = $310 * $355;
  $362 = $361 - $347;
  $363 = $362 + 1.5390000000000001E-14;
  $364 = (+Math_abs((+$361)));
  $365 = (+Math_abs((+$347)));
  $366 = $364 + $365;
  $367 = $366 + 1.5390000000000001E-14;
  $368 = $360 + $367;
  $369 = $310 * $363;
  $370 = $369 - $355;
  $371 = $370 + 3.8529000000000002E-13;
  $372 = (+Math_abs((+$369)));
  $373 = (+Math_abs((+$355)));
  $374 = $372 + $373;
  $375 = $374 + 3.8529000000000002E-13;
  $376 = $368 + $375;
  $377 = $310 * $371;
  $378 = $377 - $363;
  $379 = $378 + 7.1800999999999999E-13;
  $380 = (+Math_abs((+$377)));
  $381 = (+Math_abs((+$363)));
  $382 = $380 + $381;
  $383 = $382 + 7.1800999999999999E-13;
  $384 = $376 + $383;
  $385 = $310 * $379;
  $386 = $385 - $371;
  $387 = $386 + -1.7941900000000001E-12;
  $388 = (+Math_abs((+$385)));
  $389 = (+Math_abs((+$371)));
  $390 = $388 + $389;
  $391 = $390 + 1.7941900000000001E-12;
  $392 = $384 + $391;
  $393 = $310 * $387;
  $394 = $393 - $379;
  $395 = $394 + -1.3215799999999999E-11;
  $396 = (+Math_abs((+$393)));
  $397 = (+Math_abs((+$379)));
  $398 = $396 + $397;
  $399 = $398 + 1.3215799999999999E-11;
  $400 = $392 + $399;
  $401 = $310 * $395;
  $402 = $401 - $387;
  $403 = $402 + -3.1499150000000002E-11;
  $404 = (+Math_abs((+$401)));
  $405 = (+Math_abs((+$387)));
  $406 = $404 + $405;
  $407 = $406 + 3.1499150000000002E-11;
  $408 = $400 + $407;
  $409 = $310 * $403;
  $410 = $409 - $395;
  $411 = $410 + 1.188914E-11;
  $412 = (+Math_abs((+$409)));
  $413 = (+Math_abs((+$395)));
  $414 = $412 + $413;
  $415 = $414 + 1.188914E-11;
  $416 = $408 + $415;
  $417 = $310 * $411;
  $418 = $417 - $403;
  $419 = $418 + 4.9406022E-10;
  $420 = (+Math_abs((+$417)));
  $421 = (+Math_abs((+$403)));
  $422 = $420 + $421;
  $423 = $422 + 4.9406022E-10;
  $424 = $416 + $423;
  $425 = $310 * $419;
  $426 = $425 - $411;
  $427 = $426 + 3.3962320300000001E-9;
  $428 = (+Math_abs((+$425)));
  $429 = (+Math_abs((+$411)));
  $430 = $428 + $429;
  $431 = $430 + 3.3962320300000001E-9;
  $432 = $424 + $431;
  $433 = $310 * $427;
  $434 = $433 - $419;
  $435 = $434 + 2.2666689910000001E-8;
  $436 = (+Math_abs((+$433)));
  $437 = (+Math_abs((+$419)));
  $438 = $436 + $437;
  $439 = $438 + 2.2666689910000001E-8;
  $440 = $432 + $439;
  $441 = $310 * $435;
  $442 = $441 - $427;
  $443 = $442 + 2.0489185893E-7;
  $444 = (+Math_abs((+$441)));
  $445 = (+Math_abs((+$427)));
  $446 = $444 + $445;
  $447 = $446 + 2.0489185893E-7;
  $448 = $440 + $447;
  $449 = $310 * $443;
  $450 = $449 - $435;
  $451 = $450 + 2.8913705208200001E-6;
  $452 = (+Math_abs((+$449)));
  $453 = (+Math_abs((+$435)));
  $454 = $452 + $453;
  $455 = $454 + 2.8913705208200001E-6;
  $456 = $448 + $455;
  $457 = $310 * $451;
  $458 = $457 - $443;
  $459 = $458 + 6.8897583469179995E-5;
  $460 = (+Math_abs((+$457)));
  $461 = (+Math_abs((+$443)));
  $462 = $460 + $461;
  $463 = $462 + 6.8897583469179995E-5;
  $464 = $456 + $463;
  $465 = $310 * $459;
  $466 = $465 - $451;
  $467 = $466 + 0.0033691164782556899;
  $468 = (+Math_abs((+$465)));
  $469 = (+Math_abs((+$451)));
  $470 = $468 + $469;
  $471 = $470 + 0.0033691164782556899;
  $472 = $464 + $471;
  $473 = $309 * $467;
  $474 = $473 - $459;
  $475 = $474 + 0.02724520550705441;
  $476 = (+Math_abs((+$473)));
  $477 = (+Math_abs((+$459)));
  $478 = $477 + $476;
  $479 = $478 + 0.02724520550705441;
  $480 = $472 + $479;
  $481 = $480 * 2.2204460492503131E-16;
  $482 = $481 + 3.0000000000000001E-17;
  $483 = $475 + 0.375;
  $484 = $483 / $119;
  HEAPF64[$1>>3] = $484;
  $485 = (+Math_abs((+$475)));
  $486 = $485 + 0.375;
  $487 = $486 * 4.4408920985006262E-16;
  $488 = $487 / $119;
  $489 = ((($1)) + 8|0);
  $490 = $482 / $119;
  $491 = $488 + $490;
  $492 = (+Math_abs((+$484)));
  $493 = $492 * 4.4408920985006262E-16;
  $494 = $493 + $491;
  HEAPF64[$489>>3] = $494;
  return 0;
 } else {
  $120 = 48.0 / $2;
  $121 = $120 + -11.0;
  $122 = $121 / 5.0;
  $123 = $122 * 2.0;
  $124 = $123 + 1.0;
  $125 = $124 + -1.0;
  $126 = $125 * 0.5;
  $127 = $126 * 2.0;
  $128 = $127 * 0.0;
  $129 = $128 + 7.0000000000000003E-17;
  $130 = (+Math_abs((+$128)));
  $131 = $130 + 7.0000000000000003E-17;
  $132 = $131 + 0.0;
  $133 = $127 * $129;
  $134 = $133 + -7.1E-16;
  $135 = (+Math_abs((+$133)));
  $136 = $135 + 7.1E-16;
  $137 = $132 + $136;
  $138 = $127 * $134;
  $139 = $138 - $129;
  $140 = $139 + 3.1400000000000001E-15;
  $141 = (+Math_abs((+$138)));
  $142 = (+Math_abs((+$129)));
  $143 = $141 + $142;
  $144 = $143 + 3.1400000000000001E-15;
  $145 = $137 + $144;
  $146 = $127 * $140;
  $147 = $146 - $134;
  $148 = $147 + -6.0800000000000002E-15;
  $149 = (+Math_abs((+$146)));
  $150 = (+Math_abs((+$134)));
  $151 = $149 + $150;
  $152 = $151 + 6.0800000000000002E-15;
  $153 = $145 + $152;
  $154 = $127 * $148;
  $155 = $154 - $140;
  $156 = $155 + -2.415E-14;
  $157 = (+Math_abs((+$154)));
  $158 = (+Math_abs((+$140)));
  $159 = $157 + $158;
  $160 = $159 + 2.415E-14;
  $161 = $153 + $160;
  $162 = $127 * $156;
  $163 = $162 - $148;
  $164 = $163 + 2.7154999999999999E-13;
  $165 = (+Math_abs((+$162)));
  $166 = (+Math_abs((+$148)));
  $167 = $165 + $166;
  $168 = $167 + 2.7154999999999999E-13;
  $169 = $161 + $168;
  $170 = $127 * $164;
  $171 = $170 - $156;
  $172 = $171 + -1.14684E-12;
  $173 = (+Math_abs((+$170)));
  $174 = (+Math_abs((+$156)));
  $175 = $173 + $174;
  $176 = $175 + 1.14684E-12;
  $177 = $169 + $176;
  $178 = $127 * $172;
  $179 = $178 - $164;
  $180 = $179 + 1.12822E-12;
  $181 = (+Math_abs((+$178)));
  $182 = (+Math_abs((+$164)));
  $183 = $181 + $182;
  $184 = $183 + 1.12822E-12;
  $185 = $177 + $184;
  $186 = $127 * $180;
  $187 = $186 - $172;
  $188 = $187 + 1.757854E-11;
  $189 = (+Math_abs((+$186)));
  $190 = (+Math_abs((+$172)));
  $191 = $189 + $190;
  $192 = $191 + 1.757854E-11;
  $193 = $185 + $192;
  $194 = $127 * $188;
  $195 = $194 - $180;
  $196 = $195 + -1.1916228E-10;
  $197 = (+Math_abs((+$194)));
  $198 = (+Math_abs((+$180)));
  $199 = $197 + $198;
  $200 = $199 + 1.1916228E-10;
  $201 = $193 + $200;
  $202 = $127 * $196;
  $203 = $202 - $188;
  $204 = $203 + 2.2925562999999999E-10;
  $205 = (+Math_abs((+$202)));
  $206 = (+Math_abs((+$188)));
  $207 = $205 + $206;
  $208 = $207 + 2.2925562999999999E-10;
  $209 = $201 + $208;
  $210 = $127 * $204;
  $211 = $210 - $196;
  $212 = $211 + 1.55964859E-9;
  $213 = (+Math_abs((+$210)));
  $214 = (+Math_abs((+$196)));
  $215 = $213 + $214;
  $216 = $215 + 1.55964859E-9;
  $217 = $209 + $216;
  $218 = $127 * $212;
  $219 = $218 - $204;
  $220 = $219 + -1.204463945E-8;
  $221 = (+Math_abs((+$218)));
  $222 = (+Math_abs((+$204)));
  $223 = $221 + $222;
  $224 = $223 + 1.204463945E-8;
  $225 = $217 + $224;
  $226 = $127 * $220;
  $227 = $226 - $212;
  $228 = $227 + 8.2524726000000001E-9;
  $229 = (+Math_abs((+$226)));
  $230 = (+Math_abs((+$212)));
  $231 = $229 + $230;
  $232 = $231 + 8.2524726000000001E-9;
  $233 = $225 + $232;
  $234 = $127 * $228;
  $235 = $234 - $220;
  $236 = $235 + 2.7838499428999999E-7;
  $237 = (+Math_abs((+$234)));
  $238 = (+Math_abs((+$220)));
  $239 = $237 + $238;
  $240 = $239 + 2.7838499428999999E-7;
  $241 = $233 + $240;
  $242 = $127 * $236;
  $243 = $242 - $228;
  $244 = $243 + -7.8261435014000004E-7;
  $245 = (+Math_abs((+$242)));
  $246 = (+Math_abs((+$228)));
  $247 = $245 + $246;
  $248 = $247 + 7.8261435014000004E-7;
  $249 = $241 + $248;
  $250 = $127 * $244;
  $251 = $250 - $236;
  $252 = $251 + -7.90117997921E-6;
  $253 = (+Math_abs((+$250)));
  $254 = (+Math_abs((+$236)));
  $255 = $253 + $254;
  $256 = $255 + 7.90117997921E-6;
  $257 = $249 + $256;
  $258 = $127 * $252;
  $259 = $258 - $244;
  $260 = $259 + 1.0700764634390001E-5;
  $261 = (+Math_abs((+$258)));
  $262 = (+Math_abs((+$244)));
  $263 = $261 + $262;
  $264 = $263 + 1.0700764634390001E-5;
  $265 = $257 + $264;
  $266 = $127 * $260;
  $267 = $266 - $252;
  $268 = $267 + 4.1531313389237001E-4;
  $269 = (+Math_abs((+$266)));
  $270 = (+Math_abs((+$252)));
  $271 = $269 + $270;
  $272 = $271 + 4.1531313389237001E-4;
  $273 = $265 + $272;
  $274 = $127 * $268;
  $275 = $274 - $260;
  $276 = $275 + 0.0075913808108233399;
  $277 = (+Math_abs((+$274)));
  $278 = (+Math_abs((+$260)));
  $279 = $277 + $278;
  $280 = $279 + 0.0075913808108233399;
  $281 = $273 + $280;
  $282 = $126 * $276;
  $283 = $282 - $268;
  $284 = $283 + 0.037879972470118983;
  $285 = (+Math_abs((+$282)));
  $286 = (+Math_abs((+$268)));
  $287 = $286 + $285;
  $288 = $287 + 0.037879972470118983;
  $289 = $281 + $288;
  $290 = $289 * 2.2204460492503131E-16;
  $291 = $290 + 7.0000000000000003E-17;
  $292 = $284 + 0.375;
  $293 = $292 / $119;
  HEAPF64[$1>>3] = $293;
  $294 = (+Math_abs((+$284)));
  $295 = $294 + 0.375;
  $296 = $295 * 4.4408920985006262E-16;
  $297 = $296 / $119;
  $298 = ((($1)) + 8|0);
  $299 = $291 / $119;
  $300 = $297 + $299;
  $301 = (+Math_abs((+$293)));
  $302 = $301 * 4.4408920985006262E-16;
  $303 = $302 + $300;
  HEAPF64[$298>>3] = $303;
  return 0;
 }
 return (0)|0;
}
function _gsl_sf_bessel_I1_scaled_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0;
 var $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0;
 var $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0;
 var $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0;
 var $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0;
 var $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0;
 var $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0;
 var $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0;
 var $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0;
 var $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0;
 var $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0;
 var $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+Math_abs((+$0)));
 $3 = $0 == 0.0;
 if ($3) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $2 < 4.4501477170144028E-308;
 if ($4) {
  HEAPF64[$1>>3] = 0.0;
  $5 = ((($1)) + 8|0);
  HEAPF64[$5>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82125,158,15);
  $$0 = 15;
  return ($$0|0);
 }
 $6 = $2 < 4.2146848510894035E-8;
 if ($6) {
  $7 = $0 * 0.5;
  HEAPF64[$1>>3] = $7;
  $8 = ((($1)) + 8|0);
  HEAPF64[$8>>3] = 0.0;
  $$0 = 0;
  return ($$0|0);
 }
 $9 = !($2 <= 3.0);
 if (!($9)) {
  $10 = - $2;
  $11 = (+Math_exp((+$10)));
  $12 = $0 * $0;
  $13 = $12 / 4.5;
  $14 = $13 + -1.0;
  $15 = $14 * 2.0;
  $16 = $15 + 1.0;
  $17 = $16 + -1.0;
  $18 = $17 * 0.5;
  $19 = $18 * 2.0;
  $20 = $19 * 0.0;
  $21 = $20 + 2.3999999999999999E-17;
  $22 = (+Math_abs((+$20)));
  $23 = $22 + 2.3999999999999999E-17;
  $24 = $23 + 0.0;
  $25 = $19 * $21;
  $26 = $25 + 4.7410000000000003E-15;
  $27 = (+Math_abs((+$25)));
  $28 = $27 + 4.7410000000000003E-15;
  $29 = $24 + $28;
  $30 = $19 * $26;
  $31 = $30 - $21;
  $32 = $31 + 7.6638000000000001E-13;
  $33 = (+Math_abs((+$30)));
  $34 = (+Math_abs((+$21)));
  $35 = $33 + $34;
  $36 = $35 + 7.6638000000000001E-13;
  $37 = $29 + $36;
  $38 = $19 * $32;
  $39 = $38 - $26;
  $40 = $39 + 9.9322077000000003E-11;
  $41 = (+Math_abs((+$38)));
  $42 = (+Math_abs((+$26)));
  $43 = $41 + $42;
  $44 = $43 + 9.9322077000000003E-11;
  $45 = $37 + $44;
  $46 = $19 * $40;
  $47 = $46 - $32;
  $48 = $47 + 1.0042493924E-8;
  $49 = (+Math_abs((+$46)));
  $50 = (+Math_abs((+$32)));
  $51 = $49 + $50;
  $52 = $51 + 1.0042493924E-8;
  $53 = $45 + $52;
  $54 = $19 * $48;
  $55 = $54 - $40;
  $56 = $55 + 7.6490267648300004E-7;
  $57 = (+Math_abs((+$54)));
  $58 = (+Math_abs((+$40)));
  $59 = $57 + $58;
  $60 = $59 + 7.6490267648300004E-7;
  $61 = $53 + $60;
  $62 = $19 * $56;
  $63 = $62 - $48;
  $64 = $63 + 4.1888521098377003E-5;
  $65 = (+Math_abs((+$62)));
  $66 = (+Math_abs((+$48)));
  $67 = $65 + $66;
  $68 = $67 + 4.1888521098377003E-5;
  $69 = $61 + $68;
  $70 = $19 * $64;
  $71 = $70 - $56;
  $72 = $71 + 0.001545394556300123;
  $73 = (+Math_abs((+$70)));
  $74 = (+Math_abs((+$56)));
  $75 = $73 + $74;
  $76 = $75 + 0.001545394556300123;
  $77 = $69 + $76;
  $78 = $19 * $72;
  $79 = $78 - $64;
  $80 = $79 + 0.034838994299959458;
  $81 = (+Math_abs((+$78)));
  $82 = (+Math_abs((+$64)));
  $83 = $81 + $82;
  $84 = $83 + 0.034838994299959458;
  $85 = $77 + $84;
  $86 = $19 * $80;
  $87 = $86 - $72;
  $88 = $87 + 0.40734887667546482;
  $89 = (+Math_abs((+$86)));
  $90 = (+Math_abs((+$72)));
  $91 = $89 + $90;
  $92 = $91 + 0.40734887667546482;
  $93 = $85 + $92;
  $94 = $18 * $88;
  $95 = $94 - $80;
  $96 = $95 + -9.8585663054992956E-4;
  $97 = (+Math_abs((+$94)));
  $98 = (+Math_abs((+$80)));
  $99 = $98 + $97;
  $100 = $99 + 9.8585663054992956E-4;
  $101 = $93 + $100;
  $102 = $101 * 2.2204460492503131E-16;
  $103 = $102 + 2.3999999999999999E-17;
  $104 = $11 * $0;
  $105 = $96 + 0.875;
  $106 = $104 * $105;
  HEAPF64[$1>>3] = $106;
  $107 = $11 * $103;
  $108 = $2 * 2.2204460492503131E-16;
  $109 = (+Math_abs((+$106)));
  $110 = $108 * $109;
  $111 = $110 + $107;
  $112 = ((($1)) + 8|0);
  $113 = $109 * 4.4408920985006262E-16;
  $114 = $113 + $111;
  HEAPF64[$112>>3] = $114;
  $$0 = 0;
  return ($$0|0);
 }
 $115 = !($2 <= 8.0);
 $116 = (+Math_sqrt((+$2)));
 if ($115) {
  $299 = 16.0 / $2;
  $300 = $299 + -1.0;
  $301 = $300 * 2.0;
  $302 = $301 + 1.0;
  $303 = $302 + -1.0;
  $304 = $303 * 0.5;
  $305 = $304 * 2.0;
  $306 = $305 * 0.0;
  $307 = $306 + -3.0000000000000001E-17;
  $308 = (+Math_abs((+$306)));
  $309 = $308 + 3.0000000000000001E-17;
  $310 = $309 + 0.0;
  $311 = $305 * $307;
  $312 = $311 + 2.8000000000000001E-16;
  $313 = (+Math_abs((+$311)));
  $314 = $313 + 2.8000000000000001E-16;
  $315 = $310 + $314;
  $316 = $305 * $312;
  $317 = $316 - $307;
  $318 = $317 + 3.2999999999999999E-16;
  $319 = (+Math_abs((+$316)));
  $320 = (+Math_abs((+$307)));
  $321 = $319 + $320;
  $322 = $321 + 3.2999999999999999E-16;
  $323 = $315 + $322;
  $324 = $305 * $318;
  $325 = $324 - $312;
  $326 = $325 + -1.8599999999999999E-15;
  $327 = (+Math_abs((+$324)));
  $328 = (+Math_abs((+$312)));
  $329 = $327 + $328;
  $330 = $329 + 1.8599999999999999E-15;
  $331 = $323 + $330;
  $332 = $305 * $326;
  $333 = $332 - $318;
  $334 = $333 + -3.8199999999999998E-15;
  $335 = (+Math_abs((+$332)));
  $336 = (+Math_abs((+$318)));
  $337 = $335 + $336;
  $338 = $337 + 3.8199999999999998E-15;
  $339 = $331 + $338;
  $340 = $305 * $334;
  $341 = $340 - $326;
  $342 = $341 + 1.041E-14;
  $343 = (+Math_abs((+$340)));
  $344 = (+Math_abs((+$326)));
  $345 = $343 + $344;
  $346 = $345 + 1.041E-14;
  $347 = $339 + $346;
  $348 = $305 * $342;
  $349 = $348 - $334;
  $350 = $349 + 4.2729999999999998E-14;
  $351 = (+Math_abs((+$348)));
  $352 = (+Math_abs((+$334)));
  $353 = $351 + $352;
  $354 = $353 + 4.2729999999999998E-14;
  $355 = $347 + $354;
  $356 = $305 * $350;
  $357 = $356 - $342;
  $358 = $357 + -2.101E-14;
  $359 = (+Math_abs((+$356)));
  $360 = (+Math_abs((+$342)));
  $361 = $359 + $360;
  $362 = $361 + 2.101E-14;
  $363 = $355 + $362;
  $364 = $305 * $358;
  $365 = $364 - $350;
  $366 = $365 + -4.0835999999999999E-13;
  $367 = (+Math_abs((+$364)));
  $368 = (+Math_abs((+$350)));
  $369 = $367 + $368;
  $370 = $369 + 4.0835999999999999E-13;
  $371 = $363 + $370;
  $372 = $305 * $366;
  $373 = $372 - $358;
  $374 = $373 + -7.1985000000000001E-13;
  $375 = (+Math_abs((+$372)));
  $376 = (+Math_abs((+$358)));
  $377 = $375 + $376;
  $378 = $377 + 7.1985000000000001E-13;
  $379 = $371 + $378;
  $380 = $305 * $374;
  $381 = $380 - $366;
  $382 = $381 + 2.03564E-12;
  $383 = (+Math_abs((+$380)));
  $384 = (+Math_abs((+$366)));
  $385 = $383 + $384;
  $386 = $385 + 2.03564E-12;
  $387 = $379 + $386;
  $388 = $305 * $382;
  $389 = $388 - $374;
  $390 = $389 + 1.4125799999999999E-11;
  $391 = (+Math_abs((+$388)));
  $392 = (+Math_abs((+$374)));
  $393 = $391 + $392;
  $394 = $393 + 1.4125799999999999E-11;
  $395 = $387 + $394;
  $396 = $305 * $390;
  $397 = $396 - $382;
  $398 = $397 + 3.252602E-11;
  $399 = (+Math_abs((+$396)));
  $400 = (+Math_abs((+$382)));
  $401 = $399 + $400;
  $402 = $401 + 3.252602E-11;
  $403 = $395 + $402;
  $404 = $305 * $398;
  $405 = $404 - $390;
  $406 = $405 + -1.8974950000000001E-11;
  $407 = (+Math_abs((+$404)));
  $408 = (+Math_abs((+$390)));
  $409 = $407 + $408;
  $410 = $409 + 1.8974950000000001E-11;
  $411 = $403 + $410;
  $412 = $305 * $406;
  $413 = $412 - $398;
  $414 = $413 + -5.5897433000000004E-10;
  $415 = (+Math_abs((+$412)));
  $416 = (+Math_abs((+$398)));
  $417 = $415 + $416;
  $418 = $417 + 5.5897433000000004E-10;
  $419 = $411 + $418;
  $420 = $305 * $414;
  $421 = $420 - $406;
  $422 = $421 + -3.8353803899999999E-9;
  $423 = (+Math_abs((+$420)));
  $424 = (+Math_abs((+$406)));
  $425 = $423 + $424;
  $426 = $425 + 3.8353803899999999E-9;
  $427 = $419 + $426;
  $428 = $305 * $422;
  $429 = $428 - $414;
  $430 = $429 + -2.6314688470000001E-8;
  $431 = (+Math_abs((+$428)));
  $432 = (+Math_abs((+$414)));
  $433 = $431 + $432;
  $434 = $433 + 2.6314688470000001E-8;
  $435 = $427 + $434;
  $436 = $305 * $430;
  $437 = $436 - $422;
  $438 = $437 + -2.5122362377000002E-7;
  $439 = (+Math_abs((+$436)));
  $440 = (+Math_abs((+$422)));
  $441 = $439 + $440;
  $442 = $441 + 2.5122362377000002E-7;
  $443 = $435 + $442;
  $444 = $305 * $438;
  $445 = $444 - $430;
  $446 = $445 + -3.8825648088700004E-6;
  $447 = (+Math_abs((+$444)));
  $448 = (+Math_abs((+$430)));
  $449 = $447 + $448;
  $450 = $449 + 3.8825648088700004E-6;
  $451 = $443 + $450;
  $452 = $305 * $446;
  $453 = $452 - $438;
  $454 = $453 + -1.1058893876263E-4;
  $455 = (+Math_abs((+$452)));
  $456 = (+Math_abs((+$438)));
  $457 = $455 + $456;
  $458 = $457 + 1.1058893876263E-4;
  $459 = $451 + $458;
  $460 = $305 * $454;
  $461 = $460 - $446;
  $462 = $461 + -0.0097610974913614704;
  $463 = (+Math_abs((+$460)));
  $464 = (+Math_abs((+$446)));
  $465 = $463 + $464;
  $466 = $465 + 0.0097610974913614704;
  $467 = $459 + $466;
  $468 = $304 * $462;
  $469 = $468 - $454;
  $470 = $469 + 0.01428811750914007;
  $471 = (+Math_abs((+$468)));
  $472 = (+Math_abs((+$454)));
  $473 = $472 + $471;
  $474 = $473 + 0.01428811750914007;
  $475 = $467 + $474;
  $476 = $475 * 2.2204460492503131E-16;
  $477 = $476 + 3.0000000000000001E-17;
  $478 = $470 + 0.375;
  $479 = $478 / $116;
  $480 = $0 > 0.0;
  $481 = $480 ? 1.0 : -1.0;
  $482 = $481 * $479;
  HEAPF64[$1>>3] = $482;
  $483 = $477 / $116;
  $484 = ((($1)) + 8|0);
  $485 = (+Math_abs((+$482)));
  $486 = $485 * 4.4408920985006262E-16;
  $487 = $483 + $486;
  HEAPF64[$484>>3] = $487;
  $$0 = 0;
  return ($$0|0);
 } else {
  $117 = 48.0 / $2;
  $118 = $117 + -11.0;
  $119 = $118 / 5.0;
  $120 = $119 * 2.0;
  $121 = $120 + 1.0;
  $122 = $121 + -1.0;
  $123 = $122 * 0.5;
  $124 = $123 * 2.0;
  $125 = $124 * 0.0;
  $126 = $125 + -6.0000000000000001E-17;
  $127 = (+Math_abs((+$125)));
  $128 = $127 + 6.0000000000000001E-17;
  $129 = $128 + 0.0;
  $130 = $124 * $126;
  $131 = $130 + 7.1E-16;
  $132 = (+Math_abs((+$130)));
  $133 = $132 + 7.1E-16;
  $134 = $129 + $133;
  $135 = $124 * $131;
  $136 = $135 - $126;
  $137 = $136 + -3.3300000000000001E-15;
  $138 = (+Math_abs((+$135)));
  $139 = (+Math_abs((+$126)));
  $140 = $138 + $139;
  $141 = $140 + 3.3300000000000001E-15;
  $142 = $134 + $141;
  $143 = $124 * $137;
  $144 = $143 - $131;
  $145 = $144 + 7.2999999999999995E-15;
  $146 = (+Math_abs((+$143)));
  $147 = (+Math_abs((+$131)));
  $148 = $146 + $147;
  $149 = $148 + 7.2999999999999995E-15;
  $150 = $142 + $149;
  $151 = $124 * $145;
  $152 = $151 - $137;
  $153 = $152 + 2.0229999999999999E-14;
  $154 = (+Math_abs((+$151)));
  $155 = (+Math_abs((+$137)));
  $156 = $154 + $155;
  $157 = $156 + 2.0229999999999999E-14;
  $158 = $150 + $157;
  $159 = $124 * $153;
  $160 = $159 - $145;
  $161 = $160 + -2.7315E-13;
  $162 = (+Math_abs((+$159)));
  $163 = (+Math_abs((+$145)));
  $164 = $162 + $163;
  $165 = $164 + 2.7315E-13;
  $166 = $158 + $165;
  $167 = $124 * $161;
  $168 = $167 - $153;
  $169 = $168 + 1.2426E-12;
  $170 = (+Math_abs((+$167)));
  $171 = (+Math_abs((+$153)));
  $172 = $170 + $171;
  $173 = $172 + 1.2426E-12;
  $174 = $166 + $173;
  $175 = $124 * $169;
  $176 = $175 - $161;
  $177 = $176 + -1.66665E-12;
  $178 = (+Math_abs((+$175)));
  $179 = (+Math_abs((+$161)));
  $180 = $178 + $179;
  $181 = $180 + 1.66665E-12;
  $182 = $174 + $181;
  $183 = $124 * $177;
  $184 = $183 - $169;
  $185 = $184 + -1.664947E-11;
  $186 = (+Math_abs((+$183)));
  $187 = (+Math_abs((+$169)));
  $188 = $186 + $187;
  $189 = $188 + 1.664947E-11;
  $190 = $182 + $189;
  $191 = $124 * $185;
  $192 = $191 - $177;
  $193 = $192 + 1.2663889000000001E-10;
  $194 = (+Math_abs((+$191)));
  $195 = (+Math_abs((+$177)));
  $196 = $194 + $195;
  $197 = $196 + 1.2663889000000001E-10;
  $198 = $190 + $197;
  $199 = $124 * $193;
  $200 = $199 - $185;
  $201 = $200 + -2.9085121999999999E-10;
  $202 = (+Math_abs((+$199)));
  $203 = (+Math_abs((+$185)));
  $204 = $202 + $203;
  $205 = $204 + 2.9085121999999999E-10;
  $206 = $198 + $205;
  $207 = $124 * $201;
  $208 = $207 - $193;
  $209 = $208 + -1.4484234099999999E-9;
  $210 = (+Math_abs((+$207)));
  $211 = (+Math_abs((+$193)));
  $212 = $210 + $211;
  $213 = $212 + 1.4484234099999999E-9;
  $214 = $206 + $213;
  $215 = $124 * $209;
  $216 = $215 - $201;
  $217 = $216 + 1.318012367E-8;
  $218 = (+Math_abs((+$215)));
  $219 = (+Math_abs((+$201)));
  $220 = $218 + $219;
  $221 = $220 + 1.318012367E-8;
  $222 = $214 + $221;
  $223 = $124 * $217;
  $224 = $223 - $209;
  $225 = $224 + -1.5593781459999999E-8;
  $226 = (+Math_abs((+$223)));
  $227 = (+Math_abs((+$209)));
  $228 = $226 + $227;
  $229 = $228 + 1.5593781459999999E-8;
  $230 = $222 + $229;
  $231 = $124 * $225;
  $232 = $231 - $217;
  $233 = $232 + -2.9183389184E-7;
  $234 = (+Math_abs((+$231)));
  $235 = (+Math_abs((+$217)));
  $236 = $234 + $235;
  $237 = $236 + 2.9183389184E-7;
  $238 = $230 + $237;
  $239 = $124 * $233;
  $240 = $239 - $225;
  $241 = $240 + 1.04949824671E-6;
  $242 = (+Math_abs((+$239)));
  $243 = (+Math_abs((+$225)));
  $244 = $242 + $243;
  $245 = $244 + 1.04949824671E-6;
  $246 = $238 + $245;
  $247 = $124 * $241;
  $248 = $247 - $233;
  $249 = $248 + 8.5856191458099997E-6;
  $250 = (+Math_abs((+$247)));
  $251 = (+Math_abs((+$233)));
  $252 = $250 + $251;
  $253 = $252 + 8.5856191458099997E-6;
  $254 = $246 + $253;
  $255 = $124 * $249;
  $256 = $255 - $241;
  $257 = $256 + -2.0699712533499999E-5;
  $258 = (+Math_abs((+$255)));
  $259 = (+Math_abs((+$241)));
  $260 = $258 + $259;
  $261 = $260 + 2.0699712533499999E-5;
  $262 = $254 + $261;
  $263 = $124 * $257;
  $264 = $263 - $249;
  $265 = $264 + -6.1151858579436996E-4;
  $266 = (+Math_abs((+$263)));
  $267 = (+Math_abs((+$249)));
  $268 = $266 + $267;
  $269 = $268 + 6.1151858579436996E-4;
  $270 = $262 + $269;
  $271 = $124 * $265;
  $272 = $271 - $257;
  $273 = $272 + -0.01922953231443221;
  $274 = (+Math_abs((+$271)));
  $275 = (+Math_abs((+$257)));
  $276 = $274 + $275;
  $277 = $276 + 0.01922953231443221;
  $278 = $270 + $277;
  $279 = $123 * $273;
  $280 = $279 - $265;
  $281 = $280 + -0.014233720909407395;
  $282 = (+Math_abs((+$279)));
  $283 = (+Math_abs((+$265)));
  $284 = $283 + $282;
  $285 = $284 + 0.014233720909407395;
  $286 = $278 + $285;
  $287 = $286 * 2.2204460492503131E-16;
  $288 = $287 + 6.0000000000000001E-17;
  $289 = $281 + 0.375;
  $290 = $289 / $116;
  $291 = $0 > 0.0;
  $292 = $291 ? 1.0 : -1.0;
  $293 = $292 * $290;
  HEAPF64[$1>>3] = $293;
  $294 = $288 / $116;
  $295 = ((($1)) + 8|0);
  $296 = (+Math_abs((+$293)));
  $297 = $296 * 4.4408920985006262E-16;
  $298 = $294 + $297;
  HEAPF64[$295>>3] = $298;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_bessel_In_scaled_e($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0, $$0130 = 0, $$0131$lcssa = 0.0, $$0131150 = 0.0, $$0132149 = 0.0, $$0132149$phi = 0.0, $$0133148 = 0.0, $$0133148$phi = 0.0, $$0134$lcssa = 0.0, $$0134147 = 0.0, $$0135146 = 0, $$0151 = 0, $$140 = 0.0, $$145 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $11 = 0, $12 = 0;
 var $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $ispos = 0, $neg = 0, $or$cond = 0, $or$cond137 = 0, $or$cond139 = 0, $or$cond142 = 0;
 var $or$cond144 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 56|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $8 = (+Math_abs((+$1)));
 $ispos = ($0|0)>(-1);
 $neg = (0 - ($0))|0;
 $9 = $ispos ? $0 : $neg;
 switch ($9|0) {
 case 0:  {
  $10 = (_gsl_sf_bessel_I0_scaled_e($1,$2)|0);
  $$0130 = $10;
  STACKTOP = sp;return ($$0130|0);
  break;
 }
 case 1:  {
  $11 = (_gsl_sf_bessel_I1_scaled_e($1,$2)|0);
  $$0130 = $11;
  STACKTOP = sp;return ($$0130|0);
  break;
 }
 default: {
  $12 = $1 == 0.0;
  if ($12) {
   ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
   $$0130 = 0;
   STACKTOP = sp;return ($$0130|0);
  }
  $13 = $1 * $1;
  $14 = (+($9|0));
  $15 = $14 + 1.0;
  $16 = $15 * 10.0;
  $17 = $16 / 2.7182818284590451;
  $18 = $13 < $17;
  if ($18) {
   $19 = - $8;
   $20 = (+Math_exp((+$19)));
   $21 = (_gsl_sf_bessel_IJ_taylor_e($14,$8,1,50,2.2204460492503131E-16,$3)|0);
   $22 = +HEAPF64[$3>>3];
   $23 = $20 * $22;
   HEAPF64[$2>>3] = $23;
   $24 = ((($3)) + 8|0);
   $25 = +HEAPF64[$24>>3];
   $26 = $20 * $25;
   $27 = ((($2)) + 8|0);
   $28 = (+Math_abs((+$23)));
   $29 = $28 * 4.4408920985006262E-16;
   $30 = $26 + $29;
   HEAPF64[$27>>3] = $30;
   $31 = !($1 < 0.0);
   $32 = $9 & 1;
   $33 = ($32|0)==(0);
   $or$cond137 = $31 | $33;
   if (!($or$cond137)) {
    $34 = - $23;
    HEAPF64[$2>>3] = $34;
   }
   $$0130 = $21;
   STACKTOP = sp;return ($$0130|0);
  }
  $35 = ($9|0)<(150);
  $36 = $8 < 1.0E+7;
  $or$cond = $35 & $36;
  if ($or$cond) {
   $37 = (_gsl_sf_bessel_I0_scaled_e($8,$4)|0);
   $38 = (_gsl_sf_bessel_I_CF1_ser($14,$8,$5)|0);
   $39 = ($9|0)>(0);
   if ($39) {
    $40 = +HEAPF64[$5>>3];
    $41 = $40 * 1.4916681462400413E-154;
    $$0133148 = $41;$$0134147 = 1.4916681462400413E-154;$$0135146 = $9;
    while(1) {
     $42 = (+($$0135146|0));
     $43 = $42 * 2.0;
     $44 = $43 / $8;
     $45 = $$0134147 * $44;
     $46 = $$0133148 + $45;
     $47 = (($$0135146) + -1)|0;
     $48 = ($$0135146|0)>(1);
     if ($48) {
      $$0133148$phi = $$0134147;$$0134147 = $46;$$0135146 = $47;$$0133148 = $$0133148$phi;
     } else {
      $$0134$lcssa = $46;
      break;
     }
    }
   } else {
    $$0134$lcssa = 1.4916681462400413E-154;
   }
   $49 = +HEAPF64[$4>>3];
   $50 = 1.4916681462400413E-154 / $$0134$lcssa;
   $51 = $50 * $49;
   HEAPF64[$2>>3] = $51;
   $52 = ((($4)) + 8|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $50 * $53;
   $55 = ((($2)) + 8|0);
   $56 = (+Math_abs((+$51)));
   $57 = $56 * 4.4408920985006262E-16;
   $58 = $54 + $57;
   HEAPF64[$55>>3] = $58;
   $59 = !($1 < 0.0);
   $60 = $9 & 1;
   $61 = ($60|0)==(0);
   $or$cond139 = $59 | $61;
   if (!($or$cond139)) {
    $62 = - $51;
    HEAPF64[$2>>3] = $62;
   }
   $63 = ($37|0)==(0);
   $$ = $63 ? $38 : $37;
   $$0130 = $$;
   STACKTOP = sp;return ($$0130|0);
  }
  $64 = Math_imul($9, $9)|0;
  $65 = (+($64|0));
  $66 = 0.28999999999999998 / $65;
  $67 = $13 + $65;
  $68 = 0.5 / $67;
  $69 = $66 < $68;
  $$140 = $69 ? $66 : $68;
  $70 = $$140 < 3.0277272261966714E-6;
  if ($70) {
   $71 = (_gsl_sf_bessel_Inu_scaled_asymp_unif_e($14,$8,$2)|0);
   $72 = !($1 < 0.0);
   $73 = $9 & 1;
   $74 = ($73|0)==(0);
   $or$cond142 = $72 | $74;
   if ($or$cond142) {
    $$0130 = $71;
    STACKTOP = sp;return ($$0130|0);
   }
   $75 = +HEAPF64[$2>>3];
   $76 = - $75;
   HEAPF64[$2>>3] = $76;
   $$0130 = $71;
   STACKTOP = sp;return ($$0130|0);
  }
  $77 = (_gsl_sf_bessel_Inu_scaled_asymp_unif_e(490.0,$8,$6)|0);
  $78 = (_gsl_sf_bessel_Inu_scaled_asymp_unif_e(489.0,$8,$7)|0);
  $79 = +HEAPF64[$6>>3];
  $80 = +HEAPF64[$7>>3];
  $81 = ($9|0)<(489);
  if ($81) {
   $$0131150 = $80;$$0132149 = $79;$$0151 = 489;
   while(1) {
    $82 = (+($$0151|0));
    $83 = $82 * 2.0;
    $84 = $83 / $8;
    $85 = $$0131150 * $84;
    $86 = $$0132149 + $85;
    $87 = (($$0151) + -1)|0;
    $88 = ($87|0)>($9|0);
    if ($88) {
     $$0132149$phi = $$0131150;$$0131150 = $86;$$0151 = $87;$$0132149 = $$0132149$phi;
    } else {
     $$0131$lcssa = $86;
     break;
    }
   }
  } else {
   $$0131$lcssa = $80;
  }
  HEAPF64[$2>>3] = $$0131$lcssa;
  $89 = ((($6)) + 8|0);
  $90 = +HEAPF64[$89>>3];
  $91 = $90 / $79;
  $92 = ((($7)) + 8|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $93 / $80;
  $95 = $91 + $94;
  $96 = $$0131$lcssa * $95;
  $97 = ((($2)) + 8|0);
  HEAPF64[$97>>3] = $96;
  $98 = !($1 < 0.0);
  $99 = $9 & 1;
  $100 = ($99|0)==(0);
  $or$cond144 = $98 | $100;
  if (!($or$cond144)) {
   $101 = - $$0131$lcssa;
   HEAPF64[$2>>3] = $101;
  }
  $102 = ($77|0)==(0);
  $$145 = $102 ? $78 : $77;
  $$0130 = $$145;
  STACKTOP = sp;return ($$0130|0);
 }
 }
 return (0)|0;
}
function _gsl_sf_bessel_In_scaled($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (_gsl_sf_bessel_In_scaled_e($0,$1,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _gsl_error(82149,82137,219,$3);
 }
 $5 = +HEAPF64[$2>>3];
 STACKTOP = sp;return (+$5);
}
function _gsl_sf_bessel_Inu_scaled_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$$073 = 0, $$073 = 0, $$074 = 0, $$075$lcssa = 0.0, $$07578 = 0.0, $$07578$phi = 0.0, $$076$lcssa = 0.0, $$07677 = 0.0, $$079 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0;
 var $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = $1 < 0.0;
 $9 = $0 < 0.0;
 $or$cond = $9 | $8;
 if ($or$cond) {
  HEAPF64[$2>>3] = nan;
  $10 = ((($2)) + 8|0);
  HEAPF64[$10>>3] = nan;
  _gsl_error(82896,82190,43,1);
  $$074 = 1;
  STACKTOP = sp;return ($$074|0);
 }
 $11 = $1 * $1;
 $12 = $0 + 1.0;
 $13 = $12 * 10.0;
 $14 = $11 < $13;
 if ($14) {
  $15 = - $1;
  $16 = (+Math_exp((+$15)));
  $17 = (_gsl_sf_bessel_IJ_taylor_e($0,$1,1,100,2.2204460492503131E-16,$3)|0);
  $18 = +HEAPF64[$3>>3];
  $19 = $16 * $18;
  HEAPF64[$2>>3] = $19;
  $20 = ((($3)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $16 * $21;
  $23 = ((($2)) + 8|0);
  $24 = (+Math_abs((+$19)));
  $25 = $24 * 4.4408920985006262E-16;
  $26 = $22 + $25;
  HEAPF64[$23>>3] = $26;
  $$074 = $17;
  STACKTOP = sp;return ($$074|0);
 }
 $27 = $0 * $0;
 $28 = $27 + $11;
 $29 = 0.5 / $28;
 $30 = $29 < 6.0554544523933429E-6;
 if ($30) {
  $31 = (_gsl_sf_bessel_Inu_scaled_asymp_unif_e($0,$1,$2)|0);
  $$074 = $31;
  STACKTOP = sp;return ($$074|0);
 }
 $32 = $0 + 0.5;
 $33 = (~~(($32)));
 $34 = (+($33|0));
 $35 = $0 - $34;
 $36 = $1 < 2.0;
 if ($36) {
  $37 = (_gsl_sf_bessel_K_scaled_temme($35,$1,$4,$5,$6)|0);
  $$073 = $37;
 } else {
  $38 = (_gsl_sf_bessel_K_scaled_steed_temme_CF2($35,$1,$4,$5,$6)|0);
  $$073 = $38;
 }
 $39 = +HEAPF64[$4>>3];
 $40 = +HEAPF64[$5>>3];
 $41 = ($33|0)>(0);
 if ($41) {
  $$07578 = $39;$$07677 = $40;$$079 = 0;
  while(1) {
   $42 = (+($$079|0));
   $43 = $35 + $42;
   $44 = $43 + 1.0;
   $45 = $44 * 2.0;
   $46 = $45 / $1;
   $47 = $$07677 * $46;
   $48 = $$07578 + $47;
   $49 = (($$079) + 1)|0;
   $exitcond = ($49|0)==($33|0);
   if ($exitcond) {
    $$075$lcssa = $$07677;$$076$lcssa = $48;
    break;
   } else {
    $$07578$phi = $$07677;$$07677 = $48;$$079 = $49;$$07578 = $$07578$phi;
   }
  }
 } else {
  $$075$lcssa = $39;$$076$lcssa = $40;
 }
 $50 = (_gsl_sf_bessel_I_CF1_ser($0,$1,$7)|0);
 $51 = +HEAPF64[$7>>3];
 $52 = $$075$lcssa * $51;
 $53 = $$076$lcssa + $52;
 $54 = $53 * $1;
 $55 = 1.0 / $54;
 HEAPF64[$2>>3] = $55;
 $56 = $34 * 0.5;
 $57 = $56 + 2.0;
 $58 = $57 * 2.2204460492503131E-16;
 $59 = (+Math_abs((+$55)));
 $60 = $58 * $59;
 $61 = ((($2)) + 8|0);
 HEAPF64[$61>>3] = $60;
 $62 = ($$073|0)==(0);
 $$$073 = $62 ? $50 : $$073;
 $$074 = $$$073;
 STACKTOP = sp;return ($$074|0);
}
function _gsl_sf_bessel_J1_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $$04$i54 = 0, $$04$i63 = 0, $$052$lcssa$i60 = 0.0, $$052$lcssa$i69 = 0.0, $$0523$i55 = 0.0, $$0523$i64 = 0.0, $$053$lcssa$i68 = 0.0, $$0532$i65 = 0.0, $$054$lcssa$i58 = 0.0, $$054$lcssa$i67 = 0.0, $$0541$i57 = 0.0, $$0541$i57$phi = 0.0, $$0541$i66 = 0.0, $$0541$i66$phi = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0;
 var $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0;
 var $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0;
 var $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0;
 var $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0;
 var $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0;
 var $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (+Math_abs((+$0)));
 $4 = $0 == 0.0;
 if ($4) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $3 < 4.4501477170144028E-308;
 if ($5) {
  HEAPF64[$1>>3] = 0.0;
  $6 = ((($1)) + 8|0);
  HEAPF64[$6>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82203,86,15);
  $$0 = 15;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $3 < 4.2146848510894035E-8;
 if ($7) {
  $8 = $0 * 0.5;
  HEAPF64[$1>>3] = $8;
  $9 = ((($1)) + 8|0);
  HEAPF64[$9>>3] = 0.0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = $3 < 4.0;
 if ($10) {
  $11 = $3 * 0.125;
  $12 = $3 * $11;
  $13 = $12 + -1.0;
  $14 = $13 * 2.0;
  $15 = $14 + 1.0;
  $16 = $15 + -1.0;
  $17 = $16 * 0.5;
  $18 = $17 * 2.0;
  $19 = $18 * 0.0;
  $20 = $19 + -4.4E-17;
  $21 = (+Math_abs((+$19)));
  $22 = $21 + 4.4E-17;
  $23 = $22 + 0.0;
  $24 = $18 * $20;
  $25 = $24 + 5.8400000000000002E-15;
  $26 = (+Math_abs((+$24)));
  $27 = $26 + 5.8400000000000002E-15;
  $28 = $23 + $27;
  $29 = $18 * $25;
  $30 = $29 - $20;
  $31 = $30 + -6.3276099999999999E-13;
  $32 = (+Math_abs((+$29)));
  $33 = (+Math_abs((+$20)));
  $34 = $32 + $33;
  $35 = $34 + 6.3276099999999999E-13;
  $36 = $28 + $35;
  $37 = $18 * $31;
  $38 = $37 - $25;
  $39 = $38 + 5.5911823000000003E-11;
  $40 = (+Math_abs((+$37)));
  $41 = (+Math_abs((+$25)));
  $42 = $40 + $41;
  $43 = $42 + 5.5911823000000003E-11;
  $44 = $36 + $43;
  $45 = $18 * $39;
  $46 = $45 - $31;
  $47 = $46 + -3.9360930789999997E-9;
  $48 = (+Math_abs((+$45)));
  $49 = (+Math_abs((+$31)));
  $50 = $48 + $49;
  $51 = $50 + 3.9360930789999997E-9;
  $52 = $44 + $51;
  $53 = $18 * $47;
  $54 = $53 - $39;
  $55 = $54 + 2.1429391714300001E-7;
  $56 = (+Math_abs((+$53)));
  $57 = (+Math_abs((+$39)));
  $58 = $56 + $57;
  $59 = $58 + 2.1429391714300001E-7;
  $60 = $52 + $59;
  $61 = $18 * $55;
  $62 = $61 - $47;
  $63 = $62 + -8.6789486862780002E-6;
  $64 = (+Math_abs((+$61)));
  $65 = (+Math_abs((+$47)));
  $66 = $64 + $65;
  $67 = $66 + 8.6789486862780002E-6;
  $68 = $60 + $67;
  $69 = $18 * $63;
  $70 = $69 - $55;
  $71 = $70 + 2.47996229415914E-4;
  $72 = (+Math_abs((+$69)));
  $73 = (+Math_abs((+$55)));
  $74 = $72 + $73;
  $75 = $74 + 2.47996229415914E-4;
  $76 = $68 + $75;
  $77 = $18 * $71;
  $78 = $77 - $63;
  $79 = $78 + -0.0046315148096250812;
  $80 = (+Math_abs((+$77)));
  $81 = (+Math_abs((+$63)));
  $82 = $80 + $81;
  $83 = $82 + 0.0046315148096250812;
  $84 = $76 + $83;
  $85 = $18 * $79;
  $86 = $85 - $71;
  $87 = $86 + 0.050127080984469566;
  $88 = (+Math_abs((+$85)));
  $89 = (+Math_abs((+$71)));
  $90 = $88 + $89;
  $91 = $90 + 0.050127080984469566;
  $92 = $84 + $91;
  $93 = $18 * $87;
  $94 = $93 - $79;
  $95 = $94 + -0.2536152183079064;
  $96 = (+Math_abs((+$93)));
  $97 = (+Math_abs((+$79)));
  $98 = $96 + $97;
  $99 = $98 + 0.2536152183079064;
  $100 = $92 + $99;
  $101 = $17 * $95;
  $102 = $101 - $87;
  $103 = $102 + -0.058630707566663935;
  $104 = (+Math_abs((+$101)));
  $105 = (+Math_abs((+$87)));
  $106 = $105 + $104;
  $107 = $106 + 0.058630707566663935;
  $108 = $100 + $107;
  $109 = $108 * 2.2204460492503131E-16;
  $110 = $109 + 4.4E-17;
  $111 = $103 + 0.25;
  $112 = $111 * $0;
  HEAPF64[$1>>3] = $112;
  $113 = $110 * $0;
  $114 = (+Math_abs((+$113)));
  $115 = ((($1)) + 8|0);
  HEAPF64[$115>>3] = $114;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $116 = $0 * $0;
 $117 = 32.0 / $116;
 $118 = $117 + -1.0;
 $119 = $118 * 2.0;
 $120 = +HEAPF64[(65928)>>3];
 $121 = $119 - $120;
 $122 = +HEAPF64[(65936)>>3];
 $123 = $121 - $122;
 $124 = $122 - $120;
 $125 = $123 / $124;
 $126 = $125 * 2.0;
 $127 = HEAP32[(65924)>>2]|0;
 $128 = ($127|0)>(0);
 $129 = HEAP32[16480]|0;
 if ($128) {
  $$04$i63 = $127;$$0523$i64 = 0.0;$$0532$i65 = 0.0;$$0541$i66 = 0.0;
  while(1) {
   $130 = $126 * $$0523$i64;
   $131 = $130 - $$0541$i66;
   $132 = (($129) + ($$04$i63<<3)|0);
   $133 = +HEAPF64[$132>>3];
   $134 = $131 + $133;
   $135 = (+Math_abs((+$130)));
   $136 = (+Math_abs((+$$0541$i66)));
   $137 = $135 + $136;
   $138 = (+Math_abs((+$133)));
   $139 = $137 + $138;
   $140 = $$0532$i65 + $139;
   $141 = (($$04$i63) + -1)|0;
   $142 = ($$04$i63|0)>(1);
   if ($142) {
    $$0541$i66$phi = $$0523$i64;$$04$i63 = $141;$$0523$i64 = $134;$$0532$i65 = $140;$$0541$i66 = $$0541$i66$phi;
   } else {
    $$052$lcssa$i69 = $134;$$053$lcssa$i68 = $140;$$054$lcssa$i67 = $$0523$i64;
    break;
   }
  }
 } else {
  $$052$lcssa$i69 = 0.0;$$053$lcssa$i68 = 0.0;$$054$lcssa$i67 = 0.0;
 }
 $143 = $125 * $$052$lcssa$i69;
 $144 = $143 - $$054$lcssa$i67;
 $145 = +HEAPF64[$129>>3];
 $146 = $145 * 0.5;
 $147 = $144 + $146;
 $148 = (+Math_abs((+$143)));
 $149 = (+Math_abs((+$$054$lcssa$i67)));
 $150 = $149 + $148;
 $151 = (+Math_abs((+$145)));
 $152 = $151 * 0.5;
 $153 = $150 + $152;
 $154 = $$053$lcssa$i68 + $153;
 $155 = $154 * 2.2204460492503131E-16;
 $156 = (($129) + ($127<<3)|0);
 $157 = +HEAPF64[$156>>3];
 $158 = (+Math_abs((+$157)));
 $159 = $158 + $155;
 $160 = +HEAPF64[(65960)>>3];
 $161 = $119 - $160;
 $162 = +HEAPF64[(65968)>>3];
 $163 = $161 - $162;
 $164 = $162 - $160;
 $165 = $163 / $164;
 $166 = $165 * 2.0;
 $167 = HEAP32[(65956)>>2]|0;
 $168 = ($167|0)>(0);
 $169 = HEAP32[16488]|0;
 if ($168) {
  $$04$i54 = $167;$$0523$i55 = 0.0;$$0541$i57 = 0.0;
  while(1) {
   $170 = $166 * $$0523$i55;
   $171 = $170 - $$0541$i57;
   $172 = (($169) + ($$04$i54<<3)|0);
   $173 = +HEAPF64[$172>>3];
   $174 = $171 + $173;
   $175 = (($$04$i54) + -1)|0;
   $176 = ($$04$i54|0)>(1);
   if ($176) {
    $$0541$i57$phi = $$0523$i55;$$04$i54 = $175;$$0523$i55 = $174;$$0541$i57 = $$0541$i57$phi;
   } else {
    $$052$lcssa$i60 = $174;$$054$lcssa$i58 = $$0523$i55;
    break;
   }
  }
 } else {
  $$052$lcssa$i60 = 0.0;$$054$lcssa$i58 = 0.0;
 }
 $177 = $165 * $$052$lcssa$i60;
 $178 = $177 - $$054$lcssa$i58;
 $179 = +HEAPF64[$169>>3];
 $180 = $179 * 0.5;
 $181 = $178 + $180;
 $182 = $181 / $3;
 $183 = (_gsl_sf_bessel_sin_pi4_e($3,$182,$2)|0);
 $184 = (+Math_sqrt((+$3)));
 $185 = $147 + 0.75;
 $186 = $185 / $184;
 $187 = $0 < 0.0;
 $188 = - $186;
 $189 = $187 ? $188 : $186;
 $190 = +HEAPF64[$2>>3];
 $191 = $189 * $190;
 HEAPF64[$1>>3] = $191;
 $192 = (+Math_abs((+$190)));
 $193 = $159 * $192;
 $194 = $193 / $184;
 $195 = (+Math_abs((+$186)));
 $196 = ((($2)) + 8|0);
 $197 = +HEAPF64[$196>>3];
 $198 = $195 * $197;
 $199 = $194 + $198;
 $200 = ((($1)) + 8|0);
 $201 = (+Math_abs((+$191)));
 $202 = $201 * 2.2204460492503131E-16;
 $203 = $202 + $199;
 HEAPF64[$200>>3] = $203;
 $$0 = $183;
 STACKTOP = sp;return ($$0|0);
}
function _gsl_sf_bessel_K0_scaled_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0;
 var $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0;
 var $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0;
 var $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0;
 var $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0;
 var $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0;
 var $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = !($0 <= 0.0);
 if (!($2)) {
  HEAPF64[$1>>3] = nan;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = nan;
  _gsl_error(82896,82215,136,1);
  $$0 = 1;
  return ($$0|0);
 }
 $4 = $0 < 1.0;
 if ($4) {
  $5 = (+Math_log((+$0)));
  $6 = $0 * $0;
  $7 = $6 * 6.6117104672254181E-12;
  $8 = $7 + 1.2082660336282566E-9;
  $9 = $6 * $8;
  $10 = $9 + 1.6271068931224553E-7;
  $11 = $6 * $10;
  $12 = $11 + 1.4914719243067802E-5;
  $13 = $6 * $12;
  $14 = $13 + 8.4603509072136583E-4;
  $15 = $6 * $14;
  $16 = $15 + 0.02524892993216122;
  $17 = $6 * $16;
  $18 = $17 + 0.27898287891460316;
  $19 = $6 * $18;
  $20 = $19 + 0.11593151565841245;
  $21 = (+Math_exp((+$0)));
  $22 = $6 * 0.25;
  $23 = $22 * 3.9908220583262195E-8;
  $24 = $23 + 1.9288265756466775E-6;
  $25 = $22 * $24;
  $26 = $25 + 6.944447604707243E-5;
  $27 = $22 * $26;
  $28 = $27 + 0.0017361111083544591;
  $29 = $22 * $28;
  $30 = $29 + 0.02777777777789215;
  $31 = $22 * $30;
  $32 = $31 + 0.24999999999999822;
  $33 = $22 * $32;
  $34 = $33 + 1.0;
  $35 = $22 * $34;
  $36 = $35 + 1.0;
  $37 = $5 * $36;
  $38 = $20 - $37;
  $39 = $21 * $38;
  HEAPF64[$1>>3] = $39;
  $40 = (+Math_abs((+$5)));
  $41 = $40 * 0.59999999999999998;
  $42 = $41 + 1.6000000000000001;
  $43 = $21 * $42;
  $44 = $43 * 2.2204460492503131E-16;
  $45 = ((($1)) + 8|0);
  $46 = (+Math_abs((+$39)));
  $47 = $46 * 4.4408920985006262E-16;
  $48 = $44 + $47;
  HEAPF64[$45>>3] = $48;
  $$0 = 0;
  return ($$0|0);
 }
 $49 = !($0 <= 8.0);
 $50 = (+Math_sqrt((+$0)));
 $51 = 16.0 / $0;
 if ($49) {
  $254 = $51 + -1.0;
  $255 = $254 * 2.0;
  $256 = $255 + 1.0;
  $257 = $256 + -1.0;
  $258 = $257 * 0.5;
  $259 = $258 * 2.0;
  $260 = $259 * 0.0;
  $261 = $260 + -2.3416851175792425E-17;
  $262 = (+Math_abs((+$260)));
  $263 = $262 + 2.3416851175792425E-17;
  $264 = $263 + 0.0;
  $265 = $259 * $261;
  $266 = $265 + 2.0621980291978182E-16;
  $267 = (+Math_abs((+$265)));
  $268 = $267 + 2.0621980291978182E-16;
  $269 = $264 + $268;
  $270 = $259 * $266;
  $271 = $270 - $261;
  $272 = $271 + -1.9275548058389562E-15;
  $273 = (+Math_abs((+$270)));
  $274 = (+Math_abs((+$261)));
  $275 = $273 + $274;
  $276 = $275 + 1.9275548058389562E-15;
  $277 = $269 + $276;
  $278 = $259 * $272;
  $279 = $278 - $266;
  $280 = $279 + 1.9257872805899171E-14;
  $281 = (+Math_abs((+$278)));
  $282 = (+Math_abs((+$266)));
  $283 = $281 + $282;
  $284 = $283 + 1.9257872805899171E-14;
  $285 = $277 + $284;
  $286 = $259 * $280;
  $287 = $286 - $272;
  $288 = $287 + -2.0743313873983479E-13;
  $289 = (+Math_abs((+$286)));
  $290 = (+Math_abs((+$272)));
  $291 = $289 + $290;
  $292 = $291 + 2.0743313873983479E-13;
  $293 = $285 + $292;
  $294 = $259 * $288;
  $295 = $294 - $280;
  $296 = $295 + 2.435018039365041E-12;
  $297 = (+Math_abs((+$294)));
  $298 = (+Math_abs((+$280)));
  $299 = $297 + $298;
  $300 = $299 + 2.435018039365041E-12;
  $301 = $293 + $300;
  $302 = $259 * $296;
  $303 = $302 - $288;
  $304 = $303 + -3.1585929978605659E-11;
  $305 = (+Math_abs((+$302)));
  $306 = (+Math_abs((+$288)));
  $307 = $305 + $306;
  $308 = $307 + 3.1585929978605659E-11;
  $309 = $301 + $308;
  $310 = $259 * $304;
  $311 = $310 - $296;
  $312 = $311 + 4.6111825761797177E-10;
  $313 = (+Math_abs((+$310)));
  $314 = (+Math_abs((+$296)));
  $315 = $313 + $314;
  $316 = $315 + 4.6111825761797177E-10;
  $317 = $309 + $316;
  $318 = $259 * $312;
  $319 = $318 - $304;
  $320 = $319 + -7.7701104385217381E-9;
  $321 = (+Math_abs((+$318)));
  $322 = (+Math_abs((+$304)));
  $323 = $321 + $322;
  $324 = $323 + 7.7701104385217381E-9;
  $325 = $317 + $324;
  $326 = $259 * $320;
  $327 = $326 - $312;
  $328 = $327 + 1.5678318108523108E-7;
  $329 = (+Math_abs((+$326)));
  $330 = (+Math_abs((+$312)));
  $331 = $329 + $330;
  $332 = $331 + 1.5678318108523108E-7;
  $333 = $325 + $332;
  $334 = $259 * $328;
  $335 = $334 - $320;
  $336 = $335 + -4.0136141754357098E-6;
  $337 = (+Math_abs((+$334)));
  $338 = (+Math_abs((+$320)));
  $339 = $337 + $338;
  $340 = $339 + 4.0136141754357098E-6;
  $341 = $333 + $340;
  $342 = $259 * $336;
  $343 = $342 - $328;
  $344 = $343 + 1.4445509317750059E-4;
  $345 = (+Math_abs((+$342)));
  $346 = (+Math_abs((+$328)));
  $347 = $345 + $346;
  $348 = $347 + 1.4445509317750059E-4;
  $349 = $341 + $348;
  $350 = $259 * $344;
  $351 = $350 - $336;
  $352 = $351 + -0.0091748526910256957;
  $353 = (+Math_abs((+$350)));
  $354 = (+Math_abs((+$336)));
  $355 = $353 + $354;
  $356 = $355 + 0.0091748526910256957;
  $357 = $349 + $356;
  $358 = $258 * $352;
  $359 = $358 - $344;
  $360 = $359 + -0.0060093491315379608;
  $361 = (+Math_abs((+$358)));
  $362 = (+Math_abs((+$344)));
  $363 = $362 + $361;
  $364 = $363 + 0.0060093491315379608;
  $365 = $357 + $364;
  $366 = $365 * 2.2204460492503131E-16;
  $367 = $366 + 2.3416851175792425E-17;
  $368 = $360 + 1.25;
  $369 = $368 / $50;
  HEAPF64[$1>>3] = $369;
  $370 = $367 + 2.2204460492503131E-16;
  $371 = $370 / $50;
  $372 = ((($1)) + 8|0);
  $373 = (+Math_abs((+$369)));
  $374 = $373 * 4.4408920985006262E-16;
  $375 = $374 + $371;
  HEAPF64[$372>>3] = $375;
  $$0 = 0;
  return ($$0|0);
 } else {
  $52 = $51 + -9.0;
  $53 = $52 / 7.0;
  $54 = $53 * 2.0;
  $55 = $54 + 1.0;
  $56 = $55 + -1.0;
  $57 = $56 * 0.5;
  $58 = $57 * 2.0;
  $59 = $58 * 0.0;
  $60 = $59 + -3.4140734676250241E-17;
  $61 = (+Math_abs((+$59)));
  $62 = $61 + 3.4140734676250241E-17;
  $63 = $62 + 0.0;
  $64 = $58 * $60;
  $65 = $64 + 1.198402385013574E-16;
  $66 = (+Math_abs((+$64)));
  $67 = $66 + 1.198402385013574E-16;
  $68 = $63 + $67;
  $69 = $58 * $65;
  $70 = $69 - $60;
  $71 = $70 + -4.2573753671218817E-16;
  $72 = (+Math_abs((+$69)));
  $73 = (+Math_abs((+$60)));
  $74 = $72 + $73;
  $75 = $74 + 4.2573753671218817E-16;
  $76 = $68 + $75;
  $77 = $58 * $71;
  $78 = $77 - $65;
  $79 = $78 + 1.5320296595064691E-15;
  $80 = (+Math_abs((+$77)));
  $81 = (+Math_abs((+$65)));
  $82 = $80 + $81;
  $83 = $82 + 1.5320296595064691E-15;
  $84 = $76 + $83;
  $85 = $58 * $79;
  $86 = $85 - $71;
  $87 = $86 + -5.5898786039382535E-15;
  $88 = (+Math_abs((+$85)));
  $89 = (+Math_abs((+$71)));
  $90 = $88 + $89;
  $91 = $90 + 5.5898786039382535E-15;
  $92 = $84 + $91;
  $93 = $58 * $87;
  $94 = $93 - $79;
  $95 = $94 + 2.0702746716894839E-14;
  $96 = (+Math_abs((+$93)));
  $97 = (+Math_abs((+$79)));
  $98 = $96 + $97;
  $99 = $98 + 2.0702746716894839E-14;
  $100 = $92 + $99;
  $101 = $58 * $95;
  $102 = $101 - $87;
  $103 = $102 + -7.7927697951229211E-14;
  $104 = (+Math_abs((+$101)));
  $105 = (+Math_abs((+$87)));
  $106 = $104 + $105;
  $107 = $106 + 7.7927697951229211E-14;
  $108 = $100 + $107;
  $109 = $58 * $103;
  $110 = $109 - $95;
  $111 = $110 + 2.9855437521859689E-13;
  $112 = (+Math_abs((+$109)));
  $113 = (+Math_abs((+$95)));
  $114 = $112 + $113;
  $115 = $114 + 2.9855437521859689E-13;
  $116 = $108 + $115;
  $117 = $58 * $111;
  $118 = $117 - $103;
  $119 = $118 + -1.1661428743347078E-12;
  $120 = (+Math_abs((+$117)));
  $121 = (+Math_abs((+$103)));
  $122 = $120 + $121;
  $123 = $122 + 1.1661428743347078E-12;
  $124 = $116 + $123;
  $125 = $58 * $119;
  $126 = $125 - $111;
  $127 = $126 + 4.6529560930411462E-12;
  $128 = (+Math_abs((+$125)));
  $129 = (+Math_abs((+$111)));
  $130 = $128 + $129;
  $131 = $130 + 4.6529560930411462E-12;
  $132 = $124 + $131;
  $133 = $58 * $127;
  $134 = $133 - $119;
  $135 = $134 + -1.9009096891306974E-11;
  $136 = (+Math_abs((+$133)));
  $137 = (+Math_abs((+$119)));
  $138 = $136 + $137;
  $139 = $138 + 1.9009096891306974E-11;
  $140 = $132 + $139;
  $141 = $58 * $135;
  $142 = $141 - $127;
  $143 = $142 + 7.9735610178375308E-11;
  $144 = (+Math_abs((+$141)));
  $145 = (+Math_abs((+$127)));
  $146 = $144 + $145;
  $147 = $146 + 7.9735610178375308E-11;
  $148 = $140 + $147;
  $149 = $58 * $143;
  $150 = $149 - $135;
  $151 = $150 + -3.4455548557919419E-10;
  $152 = (+Math_abs((+$149)));
  $153 = (+Math_abs((+$135)));
  $154 = $152 + $153;
  $155 = $154 + 3.4455548557919419E-10;
  $156 = $148 + $155;
  $157 = $58 * $151;
  $158 = $157 - $143;
  $159 = $158 + 1.5401993004891949E-9;
  $160 = (+Math_abs((+$157)));
  $161 = (+Math_abs((+$143)));
  $162 = $160 + $161;
  $163 = $162 + 1.5401993004891949E-9;
  $164 = $156 + $163;
  $165 = $58 * $159;
  $166 = $165 - $151;
  $167 = $166 + -7.159092104625466E-9;
  $168 = (+Math_abs((+$165)));
  $169 = (+Math_abs((+$151)));
  $170 = $168 + $169;
  $171 = $170 + 7.159092104625466E-9;
  $172 = $164 + $171;
  $173 = $58 * $167;
  $174 = $173 - $159;
  $175 = $174 + 3.4833230684524097E-8;
  $176 = (+Math_abs((+$173)));
  $177 = (+Math_abs((+$159)));
  $178 = $176 + $177;
  $179 = $178 + 3.4833230684524097E-8;
  $180 = $172 + $179;
  $181 = $58 * $175;
  $182 = $181 - $167;
  $183 = $182 + -1.7897864505565116E-7;
  $184 = (+Math_abs((+$181)));
  $185 = (+Math_abs((+$167)));
  $186 = $184 + $185;
  $187 = $186 + 1.7897864505565116E-7;
  $188 = $180 + $187;
  $189 = $58 * $183;
  $190 = $189 - $175;
  $191 = $190 + 9.8287370993732196E-7;
  $192 = (+Math_abs((+$189)));
  $193 = (+Math_abs((+$175)));
  $194 = $192 + $193;
  $195 = $194 + 9.8287370993732196E-7;
  $196 = $188 + $195;
  $197 = $58 * $191;
  $198 = $197 - $183;
  $199 = $198 + -5.8687242239921599E-6;
  $200 = (+Math_abs((+$197)));
  $201 = (+Math_abs((+$183)));
  $202 = $200 + $201;
  $203 = $202 + 5.8687242239921599E-6;
  $204 = $196 + $203;
  $205 = $58 * $199;
  $206 = $205 - $191;
  $207 = $206 + 3.9108556930764682E-5;
  $208 = (+Math_abs((+$205)));
  $209 = (+Math_abs((+$191)));
  $210 = $208 + $209;
  $211 = $210 + 3.9108556930764682E-5;
  $212 = $204 + $211;
  $213 = $58 * $207;
  $214 = $213 - $199;
  $215 = $214 + -3.0369364939618793E-4;
  $216 = (+Math_abs((+$213)));
  $217 = (+Math_abs((+$199)));
  $218 = $216 + $217;
  $219 = $218 + 3.0369364939618793E-4;
  $220 = $212 + $219;
  $221 = $58 * $215;
  $222 = $221 - $207;
  $223 = $222 + 0.0029814999200430811;
  $224 = (+Math_abs((+$221)));
  $225 = (+Math_abs((+$207)));
  $226 = $224 + $225;
  $227 = $226 + 0.0029814999200430811;
  $228 = $220 + $227;
  $229 = $58 * $223;
  $230 = $229 - $215;
  $231 = $230 + -0.044936905771023689;
  $232 = (+Math_abs((+$229)));
  $233 = (+Math_abs((+$215)));
  $234 = $232 + $233;
  $235 = $234 + 0.044936905771023689;
  $236 = $228 + $235;
  $237 = $57 * $231;
  $238 = $237 - $223;
  $239 = $238 + -0.016436893354732505;
  $240 = (+Math_abs((+$237)));
  $241 = (+Math_abs((+$223)));
  $242 = $241 + $240;
  $243 = $242 + 0.016436893354732505;
  $244 = $236 + $243;
  $245 = $244 * 2.2204460492503131E-16;
  $246 = $245 + 3.4140734676250241E-17;
  $247 = $239 + 1.203125;
  $248 = $247 / $50;
  HEAPF64[$1>>3] = $248;
  $249 = $246 / $50;
  $250 = ((($1)) + 8|0);
  $251 = (+Math_abs((+$248)));
  $252 = $251 * 4.4408920985006262E-16;
  $253 = $252 + $249;
  HEAPF64[$250>>3] = $253;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_bessel_Knu_scaled_e10_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $$054$lcssa = 0.0, $$05463 = 0.0, $$055$lcssa = 0, $$05562 = 0, $$05761 = 0, $$058 = 0.0, $$05960 = 0.0, $$1 = 0.0, $$156 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = $1 <= 0.0;
 $7 = $0 < 0.0;
 $or$cond = $7 | $6;
 if ($or$cond) {
  HEAPF64[$2>>3] = nan;
  $8 = ((($2)) + 8|0);
  HEAPF64[$8>>3] = nan;
  $9 = ((($2)) + 16|0);
  HEAP32[$9>>2] = 0;
  _gsl_error(82896,82227,58,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = $0 + 0.5;
 $11 = (~~(($10)));
 $12 = (+($11|0));
 $13 = $0 - $12;
 $14 = $1 < 2.0;
 if ($14) {
  (_gsl_sf_bessel_K_scaled_temme($13,$1,$3,$4,$5)|0);
 } else {
  (_gsl_sf_bessel_K_scaled_steed_temme_CF2($13,$1,$3,$4,$5)|0);
 }
 $15 = +HEAPF64[$3>>3];
 $16 = ($11|0)>(0);
 if ($16) {
  $17 = +HEAPF64[$4>>3];
  $$05463 = $15;$$05562 = 0;$$05761 = 0;$$05960 = $17;
  while(1) {
   $18 = (+Math_abs((+$$05960)));
   $19 = $18 > 1.3407807929942596E+154;
   if ($19) {
    $20 = (+Math_log((+$18)));
    $21 = $20 / 2.3025850929940459;
    $22 = (+Math_floor((+$21)));
    $23 = (+Math_pow(10.0,(+$22)));
    $24 = $$05463 / $23;
    $25 = $$05960 / $23;
    $26 = (+($$05562|0));
    $27 = $22 + $26;
    $28 = (~~(($27)));
    $$058 = $24;$$1 = $25;$$156 = $28;
   } else {
    $$058 = $$05463;$$1 = $$05960;$$156 = $$05562;
   }
   $29 = (+($$05761|0));
   $30 = $13 + $29;
   $31 = $30 + 1.0;
   $32 = $31 * 2.0;
   $33 = $32 / $1;
   $34 = $33 * $$1;
   $35 = $$058 + $34;
   $36 = (($$05761) + 1)|0;
   $exitcond = ($36|0)==($11|0);
   if ($exitcond) {
    $$054$lcssa = $$1;$$055$lcssa = $$156;
    break;
   } else {
    $$05463 = $$1;$$05562 = $$156;$$05761 = $36;$$05960 = $35;
   }
  }
 } else {
  $$054$lcssa = $15;$$055$lcssa = 0;
 }
 HEAPF64[$2>>3] = $$054$lcssa;
 $37 = $12 + 4.0;
 $38 = $37 * 4.4408920985006262E-16;
 $39 = (+Math_abs((+$$054$lcssa)));
 $40 = $38 * $39;
 $41 = ((($2)) + 8|0);
 HEAPF64[$41>>3] = $40;
 $42 = ((($2)) + 16|0);
 HEAP32[$42>>2] = $$055$lcssa;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _gsl_sf_bessel_lnKnu_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$055 = 0.0, $$1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = $1 <= 0.0;
 $7 = $0 < 0.0;
 $or$cond = $7 | $6;
 if ($or$cond) {
  HEAPF64[$2>>3] = nan;
  $8 = ((($2)) + 8|0);
  HEAPF64[$8>>3] = nan;
  _gsl_error(82896,82227,116,1);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $9 = $0 == 0.0;
 if ($9) {
  (_gsl_sf_bessel_K0_scaled_e($1,$3)|0);
  $10 = +HEAPF64[$3>>3];
  $11 = (+Math_abs((+$10)));
  $12 = (+Math_log((+$11)));
  $13 = $12 - $1;
  HEAPF64[$2>>3] = $13;
  $14 = (+Math_abs((+$1)));
  $15 = $14 * 2.2204460492503131E-16;
  $16 = ((($3)) + 8|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 / $10;
  $19 = (+Math_abs((+$18)));
  $20 = $15 + $19;
  $21 = ((($2)) + 8|0);
  $22 = (+Math_abs((+$13)));
  $23 = $22 * 2.2204460492503131E-16;
  $24 = $20 + $23;
  HEAPF64[$21>>3] = $24;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $25 = $1 < 2.0;
 $26 = $0 > 1.0;
 $or$cond3 = $26 & $25;
 do {
  if ($or$cond3) {
   (_gsl_sf_lngamma_e($0,$4)|0);
   $27 = $1 * 0.5;
   $28 = (+Math_log((+$27)));
   $29 = $28 * $0;
   $30 = -0.69314718055994529 - $29;
   $31 = +HEAPF64[$4>>3];
   $32 = $30 + $31;
   $33 = $32 > 689.78271289338397;
   if (!($33)) {
    break;
   }
   $34 = $1 * 0.25;
   $35 = $34 * $1;
   $36 = $0 + -1.0;
   $37 = $35 / $36;
   $38 = 1.0 - $37;
   $39 = $0 > 2.0;
   $40 = $0 + -2.0;
   $41 = $35 / $40;
   $42 = $37 * $41;
   $43 = $38 + $42;
   $$055 = $39 ? $43 : $38;
   $44 = (+Math_log((+$$055)));
   $45 = $44 + $32;
   HEAPF64[$2>>3] = $45;
   $46 = ((($4)) + 8|0);
   $47 = +HEAPF64[$46>>3];
   $48 = ((($2)) + 8|0);
   $49 = (+Math_abs((+$45)));
   $50 = $49 * 4.4408920985006262E-16;
   $51 = $50 + $47;
   HEAPF64[$48>>3] = $51;
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $52 = (_gsl_sf_bessel_Knu_scaled_e10_e($0,$1,$5)|0);
 $53 = +HEAPF64[$5>>3];
 $54 = (+Math_abs((+$53)));
 $55 = (+Math_log((+$54)));
 $56 = $55 - $1;
 $57 = ((($5)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (+($58|0));
 $60 = $59 * 2.3025850929940459;
 $61 = $56 + $60;
 HEAPF64[$2>>3] = $61;
 $62 = (+Math_abs((+$1)));
 $63 = $62 * 2.2204460492503131E-16;
 $64 = ((($5)) + 8|0);
 $65 = +HEAPF64[$64>>3];
 $66 = $65 / $53;
 $67 = (+Math_abs((+$66)));
 $68 = $63 + $67;
 $69 = ((($2)) + 8|0);
 $70 = (+Math_abs((+$61)));
 $71 = $70 * 2.2204460492503131E-16;
 $72 = $68 + $71;
 HEAPF64[$69>>3] = $72;
 $$1 = $52;
 STACKTOP = sp;return ($$1|0);
}
function _gsl_sf_bessel_K_scaled_temme($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0115142 = 0.0, $$0116141 = 0.0, $$0118140 = 0.0, $$0119139 = 0.0, $$0120138 = 0, $$0122137 = 0.0, $$0123136 = 0.0, $$124 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0;
 var $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0;
 var $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0;
 var $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0;
 var $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1 * 0.5;
 $6 = (+Math_log((+$5)));
 $7 = $6 * $0;
 $8 = (+Math_exp((+$7)));
 $9 = $0 * 3.1415926535897931;
 $10 = - $7;
 $11 = (+Math_abs((+$9)));
 $12 = $11 < 2.2204460492503131E-16;
 $13 = (+Math_sin((+$9)));
 $14 = $9 / $13;
 $15 = $12 ? 1.0 : $14;
 $16 = (+Math_abs((+$10)));
 $17 = $16 < 2.2204460492503131E-16;
 if ($17) {
  $124 = 1.0;
 } else {
  $18 = (+_sinh($10));
  $19 = $18 / $10;
  $124 = $19;
 }
 $20 = (+Math_exp((+$1)));
 $21 = (+Math_abs((+$0)));
 $22 = $21 * 4.0;
 $23 = $22 + -1.0;
 $24 = $23 * 2.0;
 $25 = $24 + 1.0;
 $26 = $25 + -1.0;
 $27 = $26 * 0.5;
 $28 = $27 * 2.0;
 $29 = $28 * 0.0;
 $30 = $29 + -3.6586334809210519E-20;
 $31 = $28 * $30;
 $32 = $31 + -3.3726677300771948E-17;
 $33 = $28 * $32;
 $34 = $33 - $30;
 $35 = $34 + -7.9883905769323597E-16;
 $36 = $28 * $35;
 $37 = $36 - $32;
 $38 = $37 + 2.8353502755172103E-14;
 $39 = $28 * $38;
 $40 = $39 - $35;
 $41 = $40 + 6.830943402494752E-13;
 $42 = $28 * $41;
 $43 = $42 - $38;
 $44 = $43 + 3.2433227371020871E-11;
 $45 = $28 * $44;
 $46 = $45 - $41;
 $47 = $46 + 4.5189092894858182E-10;
 $48 = $28 * $47;
 $49 = $48 - $44;
 $50 = $49 + -5.1819848432519383E-8;
 $51 = $28 * $50;
 $52 = $51 - $47;
 $53 = $52 + -6.4597502923347255E-7;
 $54 = $28 * $53;
 $55 = $54 - $50;
 $56 = $55 + 1.7017464011802038E-5;
 $57 = $28 * $56;
 $58 = $57 - $53;
 $59 = $58 + 1.5283308587345351E-4;
 $60 = $28 * $59;
 $61 = $60 - $56;
 $62 = $61 + 0.0018624519300720684;
 $63 = $28 * $62;
 $64 = $63 - $59;
 $65 = $64 + 0.0063608531134708426;
 $66 = $27 * $65;
 $67 = $66 - $62;
 $68 = $67 + -0.57258204183134154;
 $69 = $24 + 1.0;
 $70 = $69 + -1.0;
 $71 = $70 * 0.5;
 $72 = $71 * 2.0;
 $73 = $72 * 0.0;
 $74 = $73 + -7.5225243218253898E-20;
 $75 = $72 * $74;
 $76 = $75 + -2.4377878310107696E-18;
 $77 = $72 * $76;
 $78 = $77 - $74;
 $79 = $78 + -7.0441338200245224E-17;
 $80 = $72 * $79;
 $81 = $80 - $76;
 $82 = $81 + -1.1725509698488015E-15;
 $83 = $72 * $82;
 $84 = $83 - $79;
 $85 = $84 + 2.265853574692576E-13;
 $86 = $72 * $85;
 $87 = $86 - $82;
 $88 = $87 + 4.6875133849532394E-12;
 $89 = $72 * $88;
 $90 = $89 - $85;
 $91 = $90 + -9.4003052735885156E-11;
 $92 = $72 * $91;
 $93 = $92 - $88;
 $94 = $93 + -1.9521334772319614E-9;
 $95 = $72 * $94;
 $96 = $95 - $91;
 $97 = $96 + -8.8927268107886354E-8;
 $98 = $72 * $97;
 $99 = $98 - $94;
 $100 = $99 + -9.5501647561720444E-7;
 $101 = $72 * $100;
 $102 = $101 - $97;
 $103 = $102 + 7.6229054350872901E-5;
 $104 = $72 * $103;
 $105 = $104 - $100;
 $106 = $105 + 6.3380302090748956E-4;
 $107 = $72 * $106;
 $108 = $107 - $103;
 $109 = $108 + -0.018256714847324929;
 $110 = $72 * $109;
 $111 = $110 - $106;
 $112 = $111 + -0.077490658396167519;
 $113 = $71 * $112;
 $114 = $113 - $109;
 $115 = $114 + 0.94132276247483593;
 $116 = $68 * $0;
 $117 = $116 + $115;
 $118 = 1.0 / $117;
 $119 = $115 - $116;
 $120 = 1.0 / $119;
 $121 = (+_cosh($10));
 $122 = $68 * $121;
 $123 = $6 * $124;
 $125 = $123 * $115;
 $126 = $122 - $125;
 $127 = $15 * $126;
 $128 = 0.5 / $8;
 $129 = $128 * $120;
 $130 = $8 * 0.5;
 $131 = $130 * $118;
 $132 = $0 * $0;
 $133 = $5 * $5;
 $$0115142 = $127;$$0116141 = $129;$$0118140 = $127;$$0119139 = $129;$$0120138 = 0;$$0122137 = 1.0;$$0123136 = $131;
 while(1) {
  $134 = (($$0120138) + 1)|0;
  $135 = (+($134|0));
  $136 = $$0118140 * $135;
  $137 = $$0119139 + $136;
  $138 = $$0123136 + $137;
  $139 = Math_imul($134, $134)|0;
  $140 = (+($139|0));
  $141 = $140 - $132;
  $142 = $138 / $141;
  $143 = $133 / $135;
  $144 = $$0122137 * $143;
  $145 = $135 - $0;
  $146 = $$0119139 / $145;
  $147 = $$0120138 ^ -1;
  $148 = (+($147|0));
  $149 = $142 * $148;
  $150 = $146 + $149;
  $151 = $144 * $142;
  $152 = $144 * $150;
  $153 = $$0115142 + $151;
  $154 = $$0116141 + $152;
  $155 = (+Math_abs((+$151)));
  $156 = (+Math_abs((+$153)));
  $157 = $156 * 0.5;
  $158 = $157 * 2.2204460492503131E-16;
  $159 = !($155 < $158);
  if (!($159)) {
   label = 6;
   break;
  }
  $160 = $135 + $0;
  $161 = $$0123136 / $160;
  $162 = ($134>>>0)<(15000);
  if ($162) {
   $$0115142 = $153;$$0116141 = $154;$$0118140 = $142;$$0119139 = $146;$$0120138 = $134;$$0122137 = $144;$$0123136 = $161;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $163 = $20 * $153;
  HEAPF64[$2>>3] = $163;
  $164 = $154 * 2.0;
  $165 = $164 / $1;
  $166 = $20 * $165;
  HEAPF64[$3>>3] = $166;
  $167 = $0 / $1;
  $168 = +HEAPF64[$2>>3];
  $169 = $167 * $168;
  $170 = $169 - $166;
  HEAPF64[$4>>3] = $170;
  $171 = ($134|0)==(15000);
  $$124 = $171 ? 11 : 0;
  return ($$124|0);
 }
 return (0)|0;
}
function _gsl_sf_lnbeta_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (_gsl_sf_lnbeta_sgn_e($0,$1,$2,$3)|0);
 $5 = +HEAPF64[$3>>3];
 $6 = $5 == -1.0;
 if (!($6)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 HEAPF64[$2>>3] = nan;
 $7 = ((($2)) + 8|0);
 HEAPF64[$7>>3] = nan;
 _gsl_error(82896,82240,44,1);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _gsl_sf_lnbeta_sgn_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $phitmp3$i = 0.0, $phitmp3$i100 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = sp + 120|0;
 $5 = sp + 104|0;
 $6 = sp + 88|0;
 $7 = sp + 72|0;
 $8 = sp + 56|0;
 $9 = sp + 40|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp;
 $14 = $0 == 0.0;
 $15 = $1 == 0.0;
 $or$cond = $14 | $15;
 if ($or$cond) {
  HEAPF64[$3>>3] = 0.0;
  HEAPF64[$2>>3] = nan;
  $16 = ((($2)) + 8|0);
  HEAPF64[$16>>3] = nan;
  _gsl_error(82896,82240,56,1);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $17 = $0 < 0.0;
 $18 = (+Math_floor((+$0)));
 $19 = $18 == $0;
 $phitmp3$i = (+($19&1));
 $20 = $17 ? $phitmp3$i : 0.0;
 $21 = $20 != 0.0;
 if (!($21)) {
  $22 = $1 < 0.0;
  $23 = (+Math_floor((+$1)));
  $24 = $23 == $1;
  $phitmp3$i100 = (+($24&1));
  $25 = $22 ? $phitmp3$i100 : 0.0;
  $26 = $25 != 0.0;
  if (!($26)) {
   $28 = $0 > 0.0;
   $29 = $1 > 0.0;
   $or$cond3 = $28 & $29;
   if ($or$cond3) {
    $30 = $0 > $1;
    $31 = $30 ? $0 : $1;
    $32 = $0 < $1;
    $33 = $32 ? $0 : $1;
    $34 = $33 / $31;
    $35 = $34 < 0.20000000000000001;
    if ($35) {
     (_gsl_sf_gammastar_e($0,$5)|0);
     (_gsl_sf_gammastar_e($1,$6)|0);
     $36 = $0 + $1;
     (_gsl_sf_gammastar_e($36,$7)|0);
     (_gsl_sf_log_1plusx_e($34,$4)|0);
     $37 = +HEAPF64[$5>>3];
     $38 = +HEAPF64[$6>>3];
     $39 = $37 * $38;
     $40 = +HEAPF64[$7>>3];
     $41 = $39 / $40;
     $42 = $41 * 1.4142135623730951;
     $43 = $42 * 1.7724538509055161;
     $44 = (+Math_log((+$43)));
     $45 = ((($5)) + 8|0);
     $46 = +HEAPF64[$45>>3];
     $47 = $46 / $37;
     $48 = ((($6)) + 8|0);
     $49 = +HEAPF64[$48>>3];
     $50 = $49 / $38;
     $51 = $47 + $50;
     $52 = ((($7)) + 8|0);
     $53 = +HEAPF64[$52>>3];
     $54 = $53 / $40;
     $55 = $51 + $54;
     $56 = (+Math_log((+$34)));
     $57 = $33 * $56;
     $58 = (+Math_log((+$33)));
     $59 = $58 * 0.5;
     $60 = $36 + -0.5;
     $61 = +HEAPF64[$4>>3];
     $62 = $60 * $61;
     $63 = $57 - $59;
     $64 = $63 - $62;
     $65 = (+Math_abs((+$57)));
     $66 = (+Math_abs((+$59)));
     $67 = $66 + $65;
     $68 = (+Math_abs((+$62)));
     $69 = $67 + $68;
     $70 = $69 * 2.2204460492503131E-16;
     $71 = (+Math_abs((+$60)));
     $72 = ((($4)) + 8|0);
     $73 = +HEAPF64[$72>>3];
     $74 = $71 * $73;
     $75 = $74 + $70;
     $76 = $44 + $64;
     HEAPF64[$2>>3] = $76;
     $77 = $55 + $75;
     $78 = ((($2)) + 8|0);
     $79 = (+Math_abs((+$76)));
     $80 = $79 * 4.4408920985006262E-16;
     $81 = $80 + $77;
     HEAPF64[$78>>3] = $81;
     HEAPF64[$3>>3] = 1.0;
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
   }
   $82 = $0 + $1;
   $83 = (_gsl_sf_lngamma_sgn_e($0,$8,$11)|0);
   $84 = (_gsl_sf_lngamma_sgn_e($1,$9,$12)|0);
   $85 = (_gsl_sf_lngamma_sgn_e($82,$10,$13)|0);
   $86 = +HEAPF64[$11>>3];
   $87 = +HEAPF64[$12>>3];
   $88 = $86 * $87;
   $89 = +HEAPF64[$13>>3];
   $90 = $88 * $89;
   HEAPF64[$3>>3] = $90;
   $91 = +HEAPF64[$8>>3];
   $92 = +HEAPF64[$9>>3];
   $93 = $91 + $92;
   $94 = +HEAPF64[$10>>3];
   $95 = $93 - $94;
   HEAPF64[$2>>3] = $95;
   $96 = ((($8)) + 8|0);
   $97 = +HEAPF64[$96>>3];
   $98 = ((($9)) + 8|0);
   $99 = +HEAPF64[$98>>3];
   $100 = $97 + $99;
   $101 = ((($10)) + 8|0);
   $102 = +HEAPF64[$101>>3];
   $103 = $100 + $102;
   $104 = ((($2)) + 8|0);
   $105 = (+Math_abs((+$91)));
   $106 = (+Math_abs((+$92)));
   $107 = $105 + $106;
   $108 = (+Math_abs((+$94)));
   $109 = $107 + $108;
   $110 = $109 * 4.4408920985006262E-16;
   $111 = $110 + $103;
   $112 = (+Math_abs((+$95)));
   $113 = $112 * 4.4408920985006262E-16;
   $114 = $113 + $111;
   HEAPF64[$104>>3] = $114;
   $115 = ($83|0)==(0);
   $116 = ($84|0)==(0);
   $$ = $116 ? $85 : $84;
   $117 = $115 ? $$ : $83;
   $$1 = $117;
   STACKTOP = sp;return ($$1|0);
  }
 }
 HEAPF64[$3>>3] = 0.0;
 HEAPF64[$2>>3] = nan;
 $27 = ((($2)) + 8|0);
 HEAPF64[$27>>3] = nan;
 _gsl_error(82896,82240,59,1);
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _gsl_sf_beta_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $phitmp3$i = 0.0, $phitmp3$i39 = 0.0, $phitmp3$i40 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 56|0;
 $4 = sp + 40|0;
 $5 = sp + 24|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = $0 > 0.0;
 $9 = $1 > 0.0;
 $or$cond = $8 & $9;
 $10 = $0 < 50.0;
 $or$cond3 = $10 & $or$cond;
 $11 = $1 < 50.0;
 $or$cond5 = $11 & $or$cond3;
 if ($or$cond5) {
  (_gsl_sf_gamma_e($0,$3)|0);
  (_gsl_sf_gamma_e($1,$4)|0);
  $12 = $0 + $1;
  (_gsl_sf_gamma_e($12,$5)|0);
  $13 = +HEAPF64[$3>>3];
  $14 = +HEAPF64[$4>>3];
  $15 = $13 * $14;
  $16 = +HEAPF64[$5>>3];
  $17 = $15 / $16;
  HEAPF64[$2>>3] = $17;
  $18 = ((($3)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $14 / $16;
  $21 = (+Math_abs((+$20)));
  $22 = $19 * $21;
  $23 = ((($2)) + 8|0);
  $24 = ((($4)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $13 / $16;
  $27 = (+Math_abs((+$26)));
  $28 = $27 * $25;
  $29 = $22 + $28;
  $30 = $16 * $16;
  $31 = $15 / $30;
  $32 = (+Math_abs((+$31)));
  $33 = ((($5)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $32 * $34;
  $36 = $29 + $35;
  $37 = (+Math_abs((+$17)));
  $38 = $37 * 4.4408920985006262E-16;
  $39 = $38 + $36;
  HEAPF64[$23>>3] = $39;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $40 = $0 < 0.0;
 $41 = (+Math_floor((+$0)));
 $42 = $41 == $0;
 $phitmp3$i = (+($42&1));
 $43 = $40 ? $phitmp3$i : 0.0;
 $44 = $43 != 0.0;
 if (!($44)) {
  $45 = $1 < 0.0;
  $46 = (+Math_floor((+$1)));
  $47 = $46 == $1;
  $phitmp3$i39 = (+($47&1));
  $48 = $45 ? $phitmp3$i39 : 0.0;
  $49 = $48 != 0.0;
  if (!($49)) {
   $51 = $0 + $1;
   $52 = $51 < 0.0;
   $53 = (+Math_floor((+$51)));
   $54 = $53 == $51;
   $phitmp3$i40 = (+($54&1));
   $55 = $52 ? $phitmp3$i40 : 0.0;
   $56 = $55 != 0.0;
   if ($56) {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
   $57 = (_gsl_sf_lnbeta_sgn_e($0,$1,$6,$7)|0);
   $58 = ($57|0)==(0);
   if ($58) {
    $59 = +HEAPF64[$6>>3];
    $60 = ((($6)) + 8|0);
    $61 = +HEAPF64[$60>>3];
    $62 = (_gsl_sf_exp_err_e($59,$61,$2)|0);
    $63 = +HEAPF64[$7>>3];
    $64 = +HEAPF64[$2>>3];
    $65 = $63 * $64;
    HEAPF64[$2>>3] = $65;
    $$0 = $62;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
    $$0 = $57;
   }
   $$1 = $$0;
   STACKTOP = sp;return ($$1|0);
  }
 }
 HEAPF64[$2>>3] = nan;
 $50 = ((($2)) + 8|0);
 HEAPF64[$50>>3] = nan;
 _gsl_error(82896,82240,134,1);
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _gsl_sf_multiply_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond47 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_abs((+$0)));
 $4 = (+Math_abs((+$1)));
 $5 = $0 == 0.0;
 $6 = $1 == 0.0;
 $or$cond = $5 | $6;
 if ($or$cond) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  $$1 = 0;
  return ($$1|0);
 }
 $7 = $3 <= 1.0;
 $8 = $4 >= 1.0;
 $or$cond3 = $7 & $8;
 if (!($or$cond3)) {
  $9 = $4 <= 1.0;
  $10 = $3 >= 1.0;
  $or$cond5 = $10 & $9;
  if (!($or$cond5)) {
   $15 = $3 < $4;
   $16 = $15 ? $3 : $4;
   $17 = $3 > $4;
   $18 = $17 ? $3 : $4;
   $19 = $18 < 1.2067027136948336E+154;
   $20 = 1.7976931348623149E+308 / $18;
   $21 = $16 < $20;
   $or$cond47 = $19 | $21;
   if (!($or$cond47)) {
    HEAPF64[$2>>3] = inf;
    $28 = ((($2)) + 8|0);
    HEAPF64[$28>>3] = inf;
    _gsl_error(82926,82247,61,16);
    $$1 = 16;
    return ($$1|0);
   }
   $22 = $0 * $1;
   $23 = (+_gsl_coerce_double($22));
   HEAPF64[$2>>3] = $23;
   $24 = (+Math_abs((+$23)));
   $25 = $24 * 4.4408920985006262E-16;
   $26 = ((($2)) + 8|0);
   HEAPF64[$26>>3] = $25;
   $27 = $24 < 2.2250738585072014E-308;
   if (!($27)) {
    $$1 = 0;
    return ($$1|0);
   }
   _gsl_error(82916,82247,57,15);
   $$1 = 15;
   return ($$1|0);
  }
 }
 $11 = $0 * $1;
 HEAPF64[$2>>3] = $11;
 $12 = (+Math_abs((+$11)));
 $13 = $12 * 4.4408920985006262E-16;
 $14 = ((($2)) + 8|0);
 HEAPF64[$14>>3] = $13;
 $$1 = 0;
 return ($$1|0);
}
function _gsl_sf_multiply_err_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_gsl_sf_multiply_e($0,$2,$4)|0);
 $6 = $1 * $2;
 $7 = (+Math_abs((+$6)));
 $8 = $0 * $3;
 $9 = (+Math_abs((+$8)));
 $10 = $7 + $9;
 $11 = ((($4)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $10 + $12;
 HEAPF64[$11>>3] = $13;
 return ($5|0);
}
function _gsl_sf_erfc_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$052 = 0.0, $$pn = 0.0, $$pn$in = 0.0, $$sink = 0.0, $$sink91 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0;
 var $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0;
 var $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0;
 var $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0;
 var $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0;
 var $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0;
 var $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0;
 var $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0;
 var $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0;
 var $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0;
 var $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0;
 var $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0;
 var $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0;
 var $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0;
 var $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0;
 var $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0;
 var $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0.0, $40 = 0.0;
 var $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0;
 var $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0;
 var $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0;
 var $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0;
 var $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0.0;
 var $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0.0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0;
 var $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0;
 var $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0;
 var $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0;
 var $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0.0, $580 = 0.0;
 var $581 = 0.0, $582 = 0.0, $583 = 0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+Math_abs((+$0)));
 $3 = !($2 <= 1.0);
 if (!($3)) {
  $4 = $2 * 2.0;
  $5 = $4 + -1.0;
  $6 = $5 * 2.0;
  $7 = $6 + 1.0;
  $8 = $7 + -1.0;
  $9 = $8 * 0.5;
  $10 = $9 * 2.0;
  $11 = $10 * 0.0;
  $12 = $11 + -9.2959956122052343E-19;
  $13 = (+Math_abs((+$11)));
  $14 = $13 + 9.2959956122052343E-19;
  $15 = $14 + 0.0;
  $16 = $10 * $12;
  $17 = $16 + 2.4593530646053651E-18;
  $18 = (+Math_abs((+$16)));
  $19 = $18 + 2.4593530646053651E-18;
  $20 = $15 + $19;
  $21 = $10 * $17;
  $22 = $21 - $12;
  $23 = $22 + 1.4450649286969993E-16;
  $24 = (+Math_abs((+$21)));
  $25 = (+Math_abs((+$12)));
  $26 = $24 + $25;
  $27 = $26 + 1.4450649286969993E-16;
  $28 = $20 + $27;
  $29 = $10 * $23;
  $30 = $29 - $17;
  $31 = $30 + -6.8562716923170458E-16;
  $32 = (+Math_abs((+$29)));
  $33 = (+Math_abs((+$17)));
  $34 = $32 + $33;
  $35 = $34 + 6.8562716923170458E-16;
  $36 = $28 + $35;
  $37 = $10 * $31;
  $38 = $37 - $23;
  $39 = $38 + -1.951440109222931E-14;
  $40 = (+Math_abs((+$37)));
  $41 = (+Math_abs((+$23)));
  $42 = $40 + $41;
  $43 = $42 + 1.951440109222931E-14;
  $44 = $36 + $43;
  $45 = $10 * $39;
  $46 = $45 - $31;
  $47 = $46 + 1.3625007465069829E-13;
  $48 = (+Math_abs((+$45)));
  $49 = (+Math_abs((+$31)));
  $50 = $48 + $49;
  $51 = $50 + 1.3625007465069829E-13;
  $52 = $44 + $51;
  $53 = $10 * $47;
  $54 = $53 - $39;
  $55 = $54 + 2.2299025553935822E-12;
  $56 = (+Math_abs((+$53)));
  $57 = (+Math_abs((+$39)));
  $58 = $56 + $57;
  $59 = $58 + 2.2299025553935822E-12;
  $60 = $52 + $59;
  $61 = $10 * $55;
  $62 = $61 - $47;
  $63 = $62 + -2.1427399199678535E-11;
  $64 = (+Math_abs((+$61)));
  $65 = (+Math_abs((+$47)));
  $66 = $64 + $65;
  $67 = $66 + 2.1427399199678535E-11;
  $68 = $60 + $67;
  $69 = $10 * $63;
  $70 = $69 - $55;
  $71 = $70 + -2.0634390487207063E-10;
  $72 = (+Math_abs((+$69)));
  $73 = (+Math_abs((+$55)));
  $74 = $72 + $73;
  $75 = $74 + 2.0634390487207063E-10;
  $76 = $68 + $75;
  $77 = $10 * $71;
  $78 = $77 - $63;
  $79 = $78 + 2.7257129633056168E-9;
  $80 = (+Math_abs((+$77)));
  $81 = (+Math_abs((+$63)));
  $82 = $80 + $81;
  $83 = $82 + 2.7257129633056168E-9;
  $84 = $76 + $83;
  $85 = $10 * $79;
  $86 = $85 - $71;
  $87 = $86 + 1.4115809274881312E-8;
  $88 = (+Math_abs((+$85)));
  $89 = (+Math_abs((+$71)));
  $90 = $88 + $89;
  $91 = $90 + 1.4115809274881312E-8;
  $92 = $84 + $91;
  $93 = $10 * $87;
  $94 = $93 - $79;
  $95 = $94 + -2.7818478883353788E-7;
  $96 = (+Math_abs((+$93)));
  $97 = (+Math_abs((+$79)));
  $98 = $96 + $97;
  $99 = $98 + 2.7818478883353788E-7;
  $100 = $92 + $99;
  $101 = $10 * $95;
  $102 = $101 - $87;
  $103 = $102 + -5.2333748523425719E-7;
  $104 = (+Math_abs((+$101)));
  $105 = (+Math_abs((+$87)));
  $106 = $104 + $105;
  $107 = $106 + 5.2333748523425719E-7;
  $108 = $100 + $107;
  $109 = $10 * $103;
  $110 = $109 - $95;
  $111 = $110 + 2.2111147040995264E-5;
  $112 = (+Math_abs((+$109)));
  $113 = (+Math_abs((+$95)));
  $114 = $112 + $113;
  $115 = $114 + 2.2111147040995264E-5;
  $116 = $108 + $115;
  $117 = $10 * $111;
  $118 = $117 - $103;
  $119 = $118 + -1.8363892921493964E-5;
  $120 = (+Math_abs((+$117)));
  $121 = (+Math_abs((+$103)));
  $122 = $120 + $121;
  $123 = $122 + 1.8363892921493964E-5;
  $124 = $116 + $123;
  $125 = $10 * $119;
  $126 = $125 - $111;
  $127 = $126 + -0.0012919410465849696;
  $128 = (+Math_abs((+$125)));
  $129 = (+Math_abs((+$111)));
  $130 = $128 + $129;
  $131 = $130 + 0.0012919410465849696;
  $132 = $124 + $131;
  $133 = $10 * $127;
  $134 = $133 - $119;
  $135 = $134 + 0.0044929348876838271;
  $136 = (+Math_abs((+$133)));
  $137 = (+Math_abs((+$119)));
  $138 = $136 + $137;
  $139 = $138 + 0.0044929348876838271;
  $140 = $132 + $139;
  $141 = $10 * $135;
  $142 = $141 - $127;
  $143 = $142 + 0.049552626796204341;
  $144 = (+Math_abs((+$141)));
  $145 = (+Math_abs((+$127)));
  $146 = $144 + $145;
  $147 = $146 + 0.049552626796204341;
  $148 = $140 + $147;
  $149 = $10 * $143;
  $150 = $149 - $135;
  $151 = $150 + -0.42582445804381042;
  $152 = (+Math_abs((+$149)));
  $153 = (+Math_abs((+$135)));
  $154 = $152 + $153;
  $155 = $154 + 0.42582445804381042;
  $156 = $148 + $155;
  $157 = $9 * $151;
  $158 = $157 - $143;
  $159 = $158 + 0.53036708210884986;
  $160 = (+Math_abs((+$157)));
  $161 = (+Math_abs((+$143)));
  $162 = $161 + $160;
  $163 = $162 + 0.53036708210884986;
  $164 = $156 + $163;
  $165 = $164 * 2.2204460492503131E-16;
  $166 = $165 + 9.2959956122052343E-19;
  $$0 = $159;$$052 = $166;
  $583 = $0 < 0.0;
  $584 = (+Math_abs((+$$0)));
  $585 = 2.0 - $$0;
  $586 = (+Math_abs((+$585)));
  $$sink91 = $583 ? $585 : $$0;
  $$pn$in = $583 ? $586 : $584;
  $$pn = $$pn$in * 4.4408920985006262E-16;
  $$sink = $$052 + $$pn;
  HEAPF64[$1>>3] = $$sink91;
  $587 = ((($1)) + 8|0);
  HEAPF64[$587>>3] = $$sink;
  return 0;
 }
 $167 = !($2 <= 5.0);
 if (!($167)) {
  $168 = $0 * $0;
  $169 = - $168;
  $170 = (+Math_exp((+$169)));
  $171 = $2 + -3.0;
  $172 = $171 * 0.5;
  $173 = $172 * 2.0;
  $174 = $173 + 1.0;
  $175 = $174 + -1.0;
  $176 = $175 * 0.5;
  $177 = $176 * 2.0;
  $178 = $177 * 0.0;
  $179 = $178 + 3.5082664803273787E-16;
  $180 = (+Math_abs((+$178)));
  $181 = $180 + 3.5082664803273787E-16;
  $182 = $181 + 0.0;
  $183 = $177 * $179;
  $184 = $183 + -1.9068597878919219E-15;
  $185 = (+Math_abs((+$183)));
  $186 = $185 + 1.9068597878919219E-15;
  $187 = $182 + $186;
  $188 = $177 * $184;
  $189 = $188 - $179;
  $190 = $189 + 9.8970540947832733E-15;
  $191 = (+Math_abs((+$188)));
  $192 = (+Math_abs((+$179)));
  $193 = $191 + $192;
  $194 = $193 + 9.8970540947832733E-15;
  $195 = $187 + $194;
  $196 = $177 * $190;
  $197 = $196 - $184;
  $198 = $197 + -5.0625823750703869E-14;
  $199 = (+Math_abs((+$196)));
  $200 = (+Math_abs((+$184)));
  $201 = $199 + $200;
  $202 = $201 + 5.0625823750703869E-14;
  $203 = $195 + $202;
  $204 = $177 * $198;
  $205 = $204 - $190;
  $206 = $205 + 2.5538588303325759E-13;
  $207 = (+Math_abs((+$204)));
  $208 = (+Math_abs((+$190)));
  $209 = $207 + $208;
  $210 = $209 + 2.5538588303325759E-13;
  $211 = $203 + $210;
  $212 = $177 * $206;
  $213 = $212 - $198;
  $214 = $213 + -1.2699463922566849E-12;
  $215 = (+Math_abs((+$212)));
  $216 = (+Math_abs((+$198)));
  $217 = $215 + $216;
  $218 = $217 + 1.2699463922566849E-12;
  $219 = $211 + $218;
  $220 = $177 * $214;
  $221 = $220 - $206;
  $222 = $221 + 6.221717926453481E-12;
  $223 = (+Math_abs((+$220)));
  $224 = (+Math_abs((+$206)));
  $225 = $223 + $224;
  $226 = $225 + 6.221717926453481E-12;
  $227 = $219 + $226;
  $228 = $177 * $222;
  $229 = $228 - $214;
  $230 = $229 + -3.001411273953239E-11;
  $231 = (+Math_abs((+$228)));
  $232 = (+Math_abs((+$214)));
  $233 = $231 + $232;
  $234 = $233 + 3.001411273953239E-11;
  $235 = $227 + $234;
  $236 = $177 * $230;
  $237 = $236 - $222;
  $238 = $237 + 1.4248334627320779E-10;
  $239 = (+Math_abs((+$236)));
  $240 = (+Math_abs((+$222)));
  $241 = $239 + $240;
  $242 = $241 + 1.4248334627320779E-10;
  $243 = $235 + $242;
  $244 = $177 * $238;
  $245 = $244 - $230;
  $246 = $245 + -6.6517478972031072E-10;
  $247 = (+Math_abs((+$244)));
  $248 = (+Math_abs((+$230)));
  $249 = $247 + $248;
  $250 = $249 + 6.6517478972031072E-10;
  $251 = $243 + $250;
  $252 = $177 * $246;
  $253 = $252 - $238;
  $254 = $253 + 3.0515705190547516E-9;
  $255 = (+Math_abs((+$252)));
  $256 = (+Math_abs((+$238)));
  $257 = $255 + $256;
  $258 = $257 + 3.0515705190547516E-9;
  $259 = $251 + $258;
  $260 = $177 * $254;
  $261 = $260 - $246;
  $262 = $261 + -1.3746086553986544E-8;
  $263 = (+Math_abs((+$260)));
  $264 = (+Math_abs((+$246)));
  $265 = $263 + $264;
  $266 = $265 + 1.3746086553986544E-8;
  $267 = $259 + $266;
  $268 = $177 * $262;
  $269 = $268 - $254;
  $270 = $269 + 6.0746212272455183E-8;
  $271 = (+Math_abs((+$268)));
  $272 = (+Math_abs((+$254)));
  $273 = $271 + $272;
  $274 = $273 + 6.0746212272455183E-8;
  $275 = $267 + $274;
  $276 = $177 * $270;
  $277 = $276 - $262;
  $278 = $277 + -2.6309866265083411E-7;
  $279 = (+Math_abs((+$276)));
  $280 = (+Math_abs((+$262)));
  $281 = $279 + $280;
  $282 = $281 + 2.6309866265083411E-7;
  $283 = $275 + $282;
  $284 = $177 * $278;
  $285 = $284 - $270;
  $286 = $285 + 1.1155865724443287E-6;
  $287 = (+Math_abs((+$284)));
  $288 = (+Math_abs((+$270)));
  $289 = $287 + $288;
  $290 = $289 + 1.1155865724443287E-6;
  $291 = $283 + $290;
  $292 = $177 * $286;
  $293 = $292 - $278;
  $294 = $293 + -4.6253098116491945E-6;
  $295 = (+Math_abs((+$292)));
  $296 = (+Math_abs((+$278)));
  $297 = $295 + $296;
  $298 = $297 + 4.6253098116491945E-6;
  $299 = $291 + $298;
  $300 = $177 * $294;
  $301 = $300 - $286;
  $302 = $301 + 1.8725312521489178E-5;
  $303 = (+Math_abs((+$300)));
  $304 = (+Math_abs((+$286)));
  $305 = $303 + $304;
  $306 = $305 + 1.8725312521489178E-5;
  $307 = $299 + $306;
  $308 = $177 * $302;
  $309 = $308 - $294;
  $310 = $309 + -7.3906170662206758E-5;
  $311 = (+Math_abs((+$308)));
  $312 = (+Math_abs((+$294)));
  $313 = $311 + $312;
  $314 = $313 + 7.3906170662206758E-5;
  $315 = $307 + $314;
  $316 = $177 * $310;
  $317 = $316 - $302;
  $318 = $317 + 2.8385941921007374E-4;
  $319 = (+Math_abs((+$316)));
  $320 = (+Math_abs((+$302)));
  $321 = $319 + $320;
  $322 = $321 + 2.8385941921007374E-4;
  $323 = $315 + $322;
  $324 = $177 * $318;
  $325 = $324 - $310;
  $326 = $325 + -0.0010586992271951266;
  $327 = (+Math_abs((+$324)));
  $328 = (+Math_abs((+$310)));
  $329 = $327 + $328;
  $330 = $329 + 0.0010586992271951266;
  $331 = $323 + $330;
  $332 = $177 * $326;
  $333 = $332 - $318;
  $334 = $333 + 0.0038246827397504699;
  $335 = (+Math_abs((+$332)));
  $336 = (+Math_abs((+$318)));
  $337 = $335 + $336;
  $338 = $337 + 0.0038246827397504699;
  $339 = $331 + $338;
  $340 = $177 * $334;
  $341 = $340 - $326;
  $342 = $341 + -0.013343124200271211;
  $343 = (+Math_abs((+$340)));
  $344 = (+Math_abs((+$326)));
  $345 = $343 + $344;
  $346 = $345 + 0.013343124200271211;
  $347 = $339 + $346;
  $348 = $177 * $342;
  $349 = $348 - $334;
  $350 = $349 + 0.044786499817939265;
  $351 = (+Math_abs((+$348)));
  $352 = (+Math_abs((+$334)));
  $353 = $351 + $352;
  $354 = $353 + 0.044786499817939265;
  $355 = $347 + $354;
  $356 = $177 * $350;
  $357 = $356 - $342;
  $358 = $357 + -0.14395883676216834;
  $359 = (+Math_abs((+$356)));
  $360 = (+Math_abs((+$342)));
  $361 = $359 + $360;
  $362 = $361 + 0.14395883676216834;
  $363 = $355 + $362;
  $364 = $176 * $358;
  $365 = $364 - $350;
  $366 = $365 + 0.22022916012169055;
  $367 = (+Math_abs((+$364)));
  $368 = (+Math_abs((+$350)));
  $369 = $368 + $367;
  $370 = $369 + 0.22022916012169055;
  $371 = $363 + $370;
  $372 = $371 * 2.2204460492503131E-16;
  $373 = $372 + 3.5082664803273787E-16;
  $374 = $170 * $366;
  $375 = $2 * 2.0;
  $376 = $375 * 2.2204460492503131E-16;
  $377 = $376 + $373;
  $378 = $170 * $377;
  $$0 = $374;$$052 = $378;
  $583 = $0 < 0.0;
  $584 = (+Math_abs((+$$0)));
  $585 = 2.0 - $$0;
  $586 = (+Math_abs((+$585)));
  $$sink91 = $583 ? $585 : $$0;
  $$pn$in = $583 ? $586 : $584;
  $$pn = $$pn$in * 4.4408920985006262E-16;
  $$sink = $$052 + $$pn;
  HEAPF64[$1>>3] = $$sink91;
  $587 = ((($1)) + 8|0);
  HEAPF64[$587>>3] = $$sink;
  return 0;
 }
 $379 = $2 < 10.0;
 if ($379) {
  $380 = $0 * $0;
  $381 = - $380;
  $382 = (+Math_exp((+$381)));
  $383 = $382 / $2;
  $384 = $2 * 2.0;
  $385 = $384 + -15.0;
  $386 = $385 / 5.0;
  $387 = $386 * 2.0;
  $388 = $387 + 1.0;
  $389 = $388 + -1.0;
  $390 = $389 * 0.5;
  $391 = $390 * 2.0;
  $392 = $391 * 0.0;
  $393 = $392 + 9.1260060726479478E-17;
  $394 = (+Math_abs((+$392)));
  $395 = $394 + 9.1260060726479478E-17;
  $396 = $395 + 0.0;
  $397 = $391 * $393;
  $398 = $397 + -6.0797061938416034E-16;
  $399 = (+Math_abs((+$397)));
  $400 = $399 + 6.0797061938416034E-16;
  $401 = $396 + $400;
  $402 = $391 * $398;
  $403 = $402 - $393;
  $404 = $403 + 3.9260782898912583E-15;
  $405 = (+Math_abs((+$402)));
  $406 = (+Math_abs((+$393)));
  $407 = $405 + $406;
  $408 = $407 + 3.9260782898912583E-15;
  $409 = $401 + $408;
  $410 = $391 * $404;
  $411 = $410 - $398;
  $412 = $411 + -2.510459710471625E-14;
  $413 = (+Math_abs((+$410)));
  $414 = (+Math_abs((+$398)));
  $415 = $413 + $414;
  $416 = $415 + 2.510459710471625E-14;
  $417 = $409 + $416;
  $418 = $391 * $412;
  $419 = $418 - $404;
  $420 = $419 + 1.5895314370698077E-13;
  $421 = (+Math_abs((+$418)));
  $422 = (+Math_abs((+$404)));
  $423 = $421 + $422;
  $424 = $423 + 1.5895314370698077E-13;
  $425 = $417 + $424;
  $426 = $391 * $420;
  $427 = $426 - $412;
  $428 = $427 + -9.9601929095531681E-13;
  $429 = (+Math_abs((+$426)));
  $430 = (+Math_abs((+$412)));
  $431 = $429 + $430;
  $432 = $431 + 9.9601929095531681E-13;
  $433 = $425 + $432;
  $434 = $391 * $428;
  $435 = $434 - $420;
  $436 = $435 + 6.1725368387452825E-12;
  $437 = (+Math_abs((+$434)));
  $438 = (+Math_abs((+$420)));
  $439 = $437 + $438;
  $440 = $439 + 6.1725368387452825E-12;
  $441 = $433 + $440;
  $442 = $391 * $436;
  $443 = $442 - $428;
  $444 = $443 + -3.7802252156325183E-11;
  $445 = (+Math_abs((+$442)));
  $446 = (+Math_abs((+$428)));
  $447 = $445 + $446;
  $448 = $447 + 3.7802252156325183E-11;
  $449 = $441 + $448;
  $450 = $391 * $444;
  $451 = $450 - $436;
  $452 = $451 + 2.2857048309016087E-10;
  $453 = (+Math_abs((+$450)));
  $454 = (+Math_abs((+$436)));
  $455 = $453 + $454;
  $456 = $455 + 2.2857048309016087E-10;
  $457 = $449 + $456;
  $458 = $391 * $452;
  $459 = $458 - $444;
  $460 = $459 + -1.3629111486279302E-9;
  $461 = (+Math_abs((+$458)));
  $462 = (+Math_abs((+$444)));
  $463 = $461 + $462;
  $464 = $463 + 1.3629111486279302E-9;
  $465 = $457 + $464;
  $466 = $391 * $460;
  $467 = $466 - $452;
  $468 = $467 + 8.0025311151294362E-9;
  $469 = (+Math_abs((+$466)));
  $470 = (+Math_abs((+$452)));
  $471 = $469 + $470;
  $472 = $471 + 8.0025311151294362E-9;
  $473 = $465 + $472;
  $474 = $391 * $468;
  $475 = $474 - $460;
  $476 = $475 + -4.6183302663484416E-8;
  $477 = (+Math_abs((+$474)));
  $478 = (+Math_abs((+$460)));
  $479 = $477 + $478;
  $480 = $479 + 4.6183302663484416E-8;
  $481 = $473 + $480;
  $482 = $391 * $476;
  $483 = $482 - $468;
  $484 = $483 + 2.6131193034346393E-7;
  $485 = (+Math_abs((+$482)));
  $486 = (+Math_abs((+$468)));
  $487 = $485 + $486;
  $488 = $487 + 2.6131193034346393E-7;
  $489 = $481 + $488;
  $490 = $391 * $484;
  $491 = $490 - $476;
  $492 = $491 + -1.4446479420668908E-6;
  $493 = (+Math_abs((+$490)));
  $494 = (+Math_abs((+$476)));
  $495 = $493 + $494;
  $496 = $495 + 1.4446479420668908E-6;
  $497 = $489 + $496;
  $498 = $391 * $492;
  $499 = $498 - $484;
  $500 = $499 + 7.765152646970611E-6;
  $501 = (+Math_abs((+$498)));
  $502 = (+Math_abs((+$484)));
  $503 = $501 + $502;
  $504 = $503 + 7.765152646970611E-6;
  $505 = $497 + $504;
  $506 = $391 * $500;
  $507 = $506 - $492;
  $508 = $507 + -4.0276384918650073E-5;
  $509 = (+Math_abs((+$506)));
  $510 = (+Math_abs((+$492)));
  $511 = $509 + $510;
  $512 = $511 + 4.0276384918650073E-5;
  $513 = $505 + $512;
  $514 = $391 * $508;
  $515 = $514 - $500;
  $516 = $515 + 1.9909432504494083E-4;
  $517 = (+Math_abs((+$514)));
  $518 = (+Math_abs((+$500)));
  $519 = $517 + $518;
  $520 = $519 + 1.9909432504494083E-4;
  $521 = $513 + $520;
  $522 = $391 * $516;
  $523 = $522 - $508;
  $524 = $523 + -9.1662394804547023E-4;
  $525 = (+Math_abs((+$522)));
  $526 = (+Math_abs((+$508)));
  $527 = $525 + $526;
  $528 = $527 + 9.1662394804547023E-4;
  $529 = $521 + $528;
  $530 = $391 * $524;
  $531 = $530 - $516;
  $532 = $531 + 0.0037362403593819986;
  $533 = (+Math_abs((+$530)));
  $534 = (+Math_abs((+$516)));
  $535 = $533 + $534;
  $536 = $535 + 0.0037362403593819986;
  $537 = $529 + $536;
  $538 = $390 * $532;
  $539 = $538 - $524;
  $540 = $539 + 0.55842495061772845;
  $541 = (+Math_abs((+$538)));
  $542 = (+Math_abs((+$524)));
  $543 = $542 + $541;
  $544 = $543 + 0.55842495061772845;
  $545 = $537 + $544;
  $546 = $545 * 2.2204460492503131E-16;
  $547 = $546 + 9.1260060726479478E-17;
  $548 = $383 * $540;
  $549 = $384 * 2.2204460492503131E-16;
  $550 = $549 + $547;
  $551 = $550 + 2.2204460492503131E-16;
  $552 = $383 * $551;
  $$0 = $548;$$052 = $552;
  $583 = $0 < 0.0;
  $584 = (+Math_abs((+$$0)));
  $585 = 2.0 - $$0;
  $586 = (+Math_abs((+$585)));
  $$sink91 = $583 ? $585 : $$0;
  $$pn$in = $583 ? $586 : $584;
  $$pn = $$pn$in * 4.4408920985006262E-16;
  $$sink = $$052 + $$pn;
  HEAPF64[$1>>3] = $$sink91;
  $587 = ((($1)) + 8|0);
  HEAPF64[$587>>3] = $$sink;
  return 0;
 } else {
  $553 = $2 * 0.56418958354775506;
  $554 = $553 + 1.2753666447299659;
  $555 = $2 * $554;
  $556 = $555 + 5.0190497267842673;
  $557 = $2 * $556;
  $558 = $557 + 6.160209853109631;
  $559 = $2 * $558;
  $560 = $559 + 7.4097406059647417;
  $561 = $2 * $560;
  $562 = $561 + 2.978865626393993;
  $563 = $2 + 2.2605285207673269;
  $564 = $2 * $563;
  $565 = $564 + 9.3960340162350544;
  $566 = $2 * $565;
  $567 = $566 + 12.048951927855128;
  $568 = $2 * $567;
  $569 = $568 + 17.081440747466004;
  $570 = $2 * $569;
  $571 = $570 + 9.608965327192788;
  $572 = $2 * $571;
  $573 = $572 + 3.3690752069827528;
  $574 = $562 / $573;
  $575 = $0 * $0;
  $576 = - $575;
  $577 = (+Math_exp((+$576)));
  $578 = $577 * $574;
  $579 = $575 + 1.0;
  $580 = $579 * 2.2204460492503131E-16;
  $581 = (+Math_abs((+$578)));
  $582 = $580 * $581;
  $$0 = $578;$$052 = $582;
  $583 = $0 < 0.0;
  $584 = (+Math_abs((+$$0)));
  $585 = 2.0 - $$0;
  $586 = (+Math_abs((+$585)));
  $$sink91 = $583 ? $585 : $$0;
  $$pn$in = $583 ? $586 : $584;
  $$pn = $$pn$in * 4.4408920985006262E-16;
  $$sink = $$052 + $$pn;
  HEAPF64[$1>>3] = $$sink91;
  $587 = ((($1)) + 8|0);
  HEAPF64[$587>>3] = $$sink;
  return 0;
 }
 return (0)|0;
}
function _gsl_sf_exp_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 > 709.78271289338397;
 if ($2) {
  HEAPF64[$1>>3] = inf;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = inf;
  _gsl_error(82926,82260,110,16);
  $$0 = 16;
  return ($$0|0);
 }
 $4 = $0 < -708.39641853226408;
 if ($4) {
  HEAPF64[$1>>3] = 0.0;
  $5 = ((($1)) + 8|0);
  HEAPF64[$5>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82260,113,15);
  $$0 = 15;
  return ($$0|0);
 } else {
  $6 = (+Math_exp((+$0)));
  HEAPF64[$1>>3] = $6;
  $7 = $6 * 4.4408920985006262E-16;
  $8 = ((($1)) + 8|0);
  HEAPF64[$8>>3] = $7;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_e10_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 > 2147483646.0;
 if ($2) {
  HEAPF64[$1>>3] = inf;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = inf;
  $4 = ((($1)) + 16|0);
  HEAP32[$4>>2] = 0;
  _gsl_error(82926,82260,125,16);
  $$0 = 16;
  return ($$0|0);
 }
 $5 = $0 < -2147483647.0;
 if ($5) {
  HEAPF64[$1>>3] = 0.0;
  $6 = ((($1)) + 8|0);
  HEAPF64[$6>>3] = 2.2250738585072014E-308;
  $7 = ((($1)) + 16|0);
  HEAP32[$7>>2] = 0;
  _gsl_error(82916,82260,128,15);
  $$0 = 15;
  return ($$0|0);
 } else {
  $8 = $0 > 709.78271289338397;
  $9 = $0 < -708.39641853226408;
  $or$cond = $8 | $9;
  $10 = $0 / 2.3025850929940459;
  $11 = (+Math_floor((+$10)));
  $12 = (~~(($11)));
  $spec$select = $or$cond ? $12 : 0;
  $13 = (+($spec$select|0));
  $14 = $13 * 2.3025850929940459;
  $15 = $0 - $14;
  $16 = (+Math_exp((+$15)));
  HEAPF64[$1>>3] = $16;
  $17 = (+Math_abs((+$0)));
  $18 = $17 + 1.0;
  $19 = $18 * 2.0;
  $20 = $19 * 2.2204460492503131E-16;
  $21 = $20 * $16;
  $22 = ((($1)) + 8|0);
  HEAPF64[$22>>3] = $21;
  $23 = ((($1)) + 16|0);
  HEAP32[$23>>2] = $spec$select;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_mult_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_abs((+$1)));
 $4 = $1 == 0.0;
 if ($4) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  $$1 = 0;
  return ($$1|0);
 }
 $5 = $0 < 354.89135644669199;
 $6 = $0 > -354.19820926613204;
 $or$cond = $5 & $6;
 $7 = $3 < 1.0726246343954077E+154;
 $or$cond3 = $or$cond & $7;
 $8 = $3 > 1.7900017754880496E-154;
 $or$cond5 = $8 & $or$cond3;
 if ($or$cond5) {
  $9 = (+Math_exp((+$0)));
  $10 = $9 * $1;
  HEAPF64[$2>>3] = $10;
  $11 = (+Math_abs((+$0)));
  $12 = $11 + 2.0;
  $13 = $12 * 2.2204460492503131E-16;
  $14 = (+Math_abs((+$10)));
  $15 = $13 * $14;
  $16 = ((($2)) + 8|0);
  HEAPF64[$16>>3] = $15;
  $$1 = 0;
  return ($$1|0);
 }
 $17 = (+Math_log((+$3)));
 $18 = $17 + $0;
 $19 = $18 > 709.77271289338398;
 if ($19) {
  HEAPF64[$2>>3] = inf;
  $20 = ((($2)) + 8|0);
  HEAPF64[$20>>3] = inf;
  _gsl_error(82926,82260,162,16);
  $$1 = 16;
  return ($$1|0);
 }
 $21 = $18 < -708.38641853226409;
 if ($21) {
  HEAPF64[$2>>3] = 0.0;
  $22 = ((($2)) + 8|0);
  HEAPF64[$22>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82260,165,15);
  $$1 = 15;
  return ($$1|0);
 } else {
  $23 = $1 >= 0.0;
  $24 = $23 ? 1.0 : -1.0;
  $25 = (+Math_floor((+$0)));
  $26 = (+Math_floor((+$17)));
  $27 = $0 - $25;
  $28 = $17 - $26;
  $29 = (+Math_abs((+$17)));
  $30 = (+Math_abs((+$26)));
  $31 = $29 + $30;
  $32 = $31 * 4.4408920985006262E-16;
  $33 = $25 + $26;
  $34 = (+Math_exp((+$33)));
  $35 = $24 * $34;
  $36 = $27 + $28;
  $37 = (+Math_exp((+$36)));
  $38 = $35 * $37;
  HEAPF64[$2>>3] = $38;
  $39 = (+Math_abs((+$38)));
  $40 = $32 * $39;
  $41 = ((($2)) + 8|0);
  $42 = $33 + 1.0;
  $43 = $42 * 4.4408920985006262E-16;
  $44 = $43 * $39;
  $45 = $40 + $44;
  HEAPF64[$41>>3] = $45;
  $$1 = 0;
  return ($$1|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_mult_err_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (+Math_abs((+$2)));
 $6 = $2 == 0.0;
 if ($6) {
  HEAPF64[$4>>3] = 0.0;
  $7 = (+Math_exp((+$0)));
  $8 = $7 * $3;
  $9 = (+Math_abs((+$8)));
  $10 = ((($4)) + 8|0);
  HEAPF64[$10>>3] = $9;
  $$1 = 0;
  return ($$1|0);
 }
 $11 = $0 < 354.89135644669199;
 $12 = $0 > -354.19820926613204;
 $or$cond = $11 & $12;
 $13 = $5 < 1.0726246343954077E+154;
 $or$cond3 = $or$cond & $13;
 $14 = $5 > 1.7900017754880496E-154;
 $or$cond5 = $14 & $or$cond3;
 if ($or$cond5) {
  $15 = (+Math_exp((+$0)));
  $16 = $15 * $2;
  HEAPF64[$4>>3] = $16;
  $17 = (+Math_abs((+$3)));
  $18 = $1 * $2;
  $19 = (+Math_abs((+$18)));
  $20 = $17 + $19;
  $21 = $15 * $20;
  $22 = ((($4)) + 8|0);
  $23 = (+Math_abs((+$16)));
  $24 = $23 * 4.4408920985006262E-16;
  $25 = $24 + $21;
  HEAPF64[$22>>3] = $25;
  $$1 = 0;
  return ($$1|0);
 }
 $26 = (+Math_log((+$5)));
 $27 = $26 + $0;
 $28 = $27 > 709.77271289338398;
 if ($28) {
  HEAPF64[$4>>3] = inf;
  $29 = ((($4)) + 8|0);
  HEAPF64[$29>>3] = inf;
  _gsl_error(82926,82260,254,16);
  $$1 = 16;
  return ($$1|0);
 }
 $30 = $27 < -708.38641853226409;
 if ($30) {
  HEAPF64[$4>>3] = 0.0;
  $31 = ((($4)) + 8|0);
  HEAPF64[$31>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82260,257,15);
  $$1 = 15;
  return ($$1|0);
 } else {
  $32 = $2 >= 0.0;
  $33 = $32 ? 1.0 : -1.0;
  $34 = (+Math_floor((+$0)));
  $35 = (+Math_floor((+$26)));
  $36 = $0 - $34;
  $37 = $26 - $35;
  $38 = $34 + $35;
  $39 = (+Math_exp((+$38)));
  $40 = $36 + $37;
  $41 = (+Math_exp((+$40)));
  $42 = $33 * $39;
  $43 = $42 * $41;
  HEAPF64[$4>>3] = $43;
  $44 = $39 * $41;
  $45 = $44 * 2.0;
  $46 = $45 * 2.2204460492503131E-16;
  $47 = ((($4)) + 8|0);
  $48 = $3 / $2;
  $49 = (+Math_abs((+$48)));
  $50 = $49 * $44;
  $51 = $50 + $46;
  $52 = (+Math_abs((+$1)));
  $53 = $52 * $44;
  $54 = $53 + $51;
  HEAPF64[$47>>3] = $54;
  $$1 = 0;
  return ($$1|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_mult_err_e10_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (+Math_abs((+$2)));
 $6 = $2 == 0.0;
 if ($6) {
  HEAPF64[$4>>3] = 0.0;
  $7 = (+Math_exp((+$0)));
  $8 = $7 * $3;
  $9 = (+Math_abs((+$8)));
  $10 = ((($4)) + 8|0);
  HEAPF64[$10>>3] = $9;
  $11 = ((($4)) + 16|0);
  HEAP32[$11>>2] = 0;
  $$1 = 0;
  return ($$1|0);
 }
 $12 = $0 < 354.89135644669199;
 $13 = $0 > -354.19820926613204;
 $or$cond = $12 & $13;
 $14 = $5 < 1.0726246343954077E+154;
 $or$cond3 = $or$cond & $14;
 $15 = $5 > 1.7900017754880496E-154;
 $or$cond5 = $15 & $or$cond3;
 if ($or$cond5) {
  $16 = (+Math_exp((+$0)));
  $17 = $16 * $2;
  HEAPF64[$4>>3] = $17;
  $18 = (+Math_abs((+$3)));
  $19 = $1 * $2;
  $20 = (+Math_abs((+$19)));
  $21 = $18 + $20;
  $22 = $16 * $21;
  $23 = ((($4)) + 8|0);
  $24 = (+Math_abs((+$17)));
  $25 = $24 * 4.4408920985006262E-16;
  $26 = $25 + $22;
  HEAPF64[$23>>3] = $26;
  $27 = ((($4)) + 16|0);
  HEAP32[$27>>2] = 0;
  $$1 = 0;
  return ($$1|0);
 }
 $28 = (+Math_log((+$5)));
 $29 = $28 + $0;
 $30 = $29 / 2.3025850929940459;
 $31 = $30 > 2147483646.0;
 if ($31) {
  HEAPF64[$4>>3] = inf;
  $32 = ((($4)) + 8|0);
  HEAPF64[$32>>3] = inf;
  $33 = ((($4)) + 16|0);
  HEAP32[$33>>2] = 0;
  _gsl_error(82926,82260,304,16);
  $$1 = 16;
  return ($$1|0);
 }
 $34 = $30 < -2147483647.0;
 if ($34) {
  HEAPF64[$4>>3] = 0.0;
  $35 = ((($4)) + 8|0);
  HEAPF64[$35>>3] = 2.2250738585072014E-308;
  $36 = ((($4)) + 16|0);
  HEAP32[$36>>2] = 0;
  _gsl_error(82916,82260,307,15);
  $$1 = 15;
  return ($$1|0);
 } else {
  $37 = $2 >= 0.0;
  $38 = $37 ? 1.0 : -1.0;
  $39 = (+Math_floor((+$30)));
  $40 = (~~(($39)));
  $41 = (+($40|0));
  $42 = $30 - $41;
  $43 = $42 * 2.3025850929940459;
  $44 = $3 / $5;
  $45 = $44 + $1;
  $46 = (+Math_abs((+$43)));
  $47 = $46 * 4.4408920985006262E-16;
  $48 = $45 + $47;
  $49 = (+Math_exp((+$43)));
  $50 = $38 * $49;
  HEAPF64[$4>>3] = $50;
  $51 = (+Math_abs((+$50)));
  $52 = $48 * $51;
  $53 = ((($4)) + 8|0);
  $54 = $51 * 4.4408920985006262E-16;
  $55 = $52 + $54;
  HEAPF64[$53>>3] = $55;
  $56 = ((($4)) + 16|0);
  HEAP32[$56>>2] = $40;
  $$1 = 0;
  return ($$1|0);
 }
 return (0)|0;
}
function _gsl_sf_expm1_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 < -708.39641853226408;
 if ($2) {
  HEAPF64[$1>>3] = -1.0;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = 2.2204460492503131E-16;
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $0 < -0.002;
 if ($4) {
  $5 = (+Math_exp((+$0)));
  $6 = $5 + -1.0;
  HEAPF64[$1>>3] = $6;
  $7 = (+Math_abs((+$6)));
  $8 = $7 * 4.4408920985006262E-16;
  $9 = ((($1)) + 8|0);
  HEAPF64[$9>>3] = $8;
  $$0 = 0;
  return ($$0|0);
 }
 $10 = $0 < 0.002;
 if ($10) {
  $11 = $0 * 0.5;
  $12 = $0 / 3.0;
  $13 = $0 * 0.25;
  $14 = $0 * 0.20000000000000001;
  $15 = $14 + 1.0;
  $16 = $13 * $15;
  $17 = $16 + 1.0;
  $18 = $12 * $17;
  $19 = $18 + 1.0;
  $20 = $11 * $19;
  $21 = $20 + 1.0;
  $22 = $21 * $0;
  HEAPF64[$1>>3] = $22;
  $23 = (+Math_abs((+$22)));
  $24 = $23 * 4.4408920985006262E-16;
  $25 = ((($1)) + 8|0);
  HEAPF64[$25>>3] = $24;
  $$0 = 0;
  return ($$0|0);
 }
 $26 = $0 < 709.78271289338397;
 if ($26) {
  $27 = (+Math_exp((+$0)));
  $28 = $27 + -1.0;
  HEAPF64[$1>>3] = $28;
  $29 = (+Math_abs((+$28)));
  $30 = $29 * 4.4408920985006262E-16;
  $31 = ((($1)) + 8|0);
  HEAPF64[$31>>3] = $30;
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAPF64[$1>>3] = inf;
  $32 = ((($1)) + 8|0);
  HEAPF64[$32>>3] = inf;
  _gsl_error(82926,82260,351,16);
  $$0 = 16;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_exprel_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 < -708.39641853226408;
 if ($2) {
  $3 = -1.0 / $0;
  HEAPF64[$1>>3] = $3;
  $4 = (+Math_abs((+$3)));
  $5 = $4 * 2.2204460492503131E-16;
  $6 = ((($1)) + 8|0);
  HEAPF64[$6>>3] = $5;
  $$0 = 0;
  return ($$0|0);
 }
 $7 = $0 < -0.002;
 if ($7) {
  $8 = (+Math_exp((+$0)));
  $9 = $8 + -1.0;
  $10 = $9 / $0;
  HEAPF64[$1>>3] = $10;
  $11 = (+Math_abs((+$10)));
  $12 = $11 * 4.4408920985006262E-16;
  $13 = ((($1)) + 8|0);
  HEAPF64[$13>>3] = $12;
  $$0 = 0;
  return ($$0|0);
 }
 $14 = $0 < 0.002;
 if ($14) {
  $15 = $0 * 0.5;
  $16 = $0 / 3.0;
  $17 = $0 * 0.25;
  $18 = $0 * 0.20000000000000001;
  $19 = $18 + 1.0;
  $20 = $17 * $19;
  $21 = $20 + 1.0;
  $22 = $16 * $21;
  $23 = $22 + 1.0;
  $24 = $15 * $23;
  $25 = $24 + 1.0;
  HEAPF64[$1>>3] = $25;
  $26 = (+Math_abs((+$25)));
  $27 = $26 * 4.4408920985006262E-16;
  $28 = ((($1)) + 8|0);
  HEAPF64[$28>>3] = $27;
  $$0 = 0;
  return ($$0|0);
 }
 $29 = $0 < 709.78271289338397;
 if ($29) {
  $30 = (+Math_exp((+$0)));
  $31 = $30 + -1.0;
  $32 = $31 / $0;
  HEAPF64[$1>>3] = $32;
  $33 = (+Math_abs((+$32)));
  $34 = $33 * 4.4408920985006262E-16;
  $35 = ((($1)) + 8|0);
  HEAPF64[$35>>3] = $34;
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAPF64[$1>>3] = inf;
  $36 = ((($1)) + 8|0);
  HEAPF64[$36>>3] = inf;
  _gsl_error(82926,82260,381,16);
  $$0 = 16;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_exprel_2_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 < -708.39641853226408;
 if ($2) {
  $3 = -2.0 / $0;
  $4 = 1.0 / $0;
  $5 = $4 + 1.0;
  $6 = $3 * $5;
  HEAPF64[$1>>3] = $6;
  $7 = (+Math_abs((+$6)));
  $8 = $7 * 4.4408920985006262E-16;
  $9 = ((($1)) + 8|0);
  HEAPF64[$9>>3] = $8;
  $$0 = 0;
  return ($$0|0);
 }
 $10 = $0 < -0.002;
 if ($10) {
  $11 = (+Math_exp((+$0)));
  $12 = $11 + -1.0;
  $13 = $12 - $0;
  $14 = $13 * 2.0;
  $15 = $0 * $0;
  $16 = $14 / $15;
  HEAPF64[$1>>3] = $16;
  $17 = (+Math_abs((+$16)));
  $18 = $17 * 4.4408920985006262E-16;
  $19 = ((($1)) + 8|0);
  HEAPF64[$19>>3] = $18;
  $$0 = 0;
  return ($$0|0);
 }
 $20 = $0 < 0.002;
 if ($20) {
  $21 = $0 * 0.33333333333333331;
  $22 = $0 * 0.25;
  $23 = $0 * 0.20000000000000001;
  $24 = $0 * 0.16666666666666666;
  $25 = $24 + 1.0;
  $26 = $23 * $25;
  $27 = $26 + 1.0;
  $28 = $22 * $27;
  $29 = $28 + 1.0;
  $30 = $21 * $29;
  $31 = $30 + 1.0;
  HEAPF64[$1>>3] = $31;
  $32 = (+Math_abs((+$31)));
  $33 = $32 * 4.4408920985006262E-16;
  $34 = ((($1)) + 8|0);
  HEAPF64[$34>>3] = $33;
  $$0 = 0;
  return ($$0|0);
 }
 $35 = $0 < 709.78271289338397;
 if ($35) {
  $36 = (+Math_exp((+$0)));
  $37 = $36 + -1.0;
  $38 = $37 - $0;
  $39 = $38 * 2.0;
  $40 = $0 * $0;
  $41 = $39 / $40;
  HEAPF64[$1>>3] = $41;
  $42 = (+Math_abs((+$41)));
  $43 = $42 * 4.4408920985006262E-16;
  $44 = ((($1)) + 8|0);
  HEAPF64[$44>>3] = $43;
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAPF64[$1>>3] = inf;
  $45 = ((($1)) + 8|0);
  HEAPF64[$45>>3] = inf;
  _gsl_error(82926,82260,411,16);
  $$0 = 16;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_exprel_n_CF_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_exprel_n_CF($0,$1,$2)|0);
 return ($3|0);
}
function _exprel_n_CF($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0103 = 0, $$0104121 = 0, $$0105120 = 0.0, $$0107119 = 0.0, $$0109118 = 0.0, $$0111117 = 0.0, $$0113116 = 0.0, $$1106 = 0.0, $$1108 = 0.0, $$1112 = 0.0, $$1114 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
 var $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond122 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 + 1.0;
 $4 = $1 * 0.0;
 $5 = $3 - $4;
 $6 = $3 - $1;
 $7 = $5 / $6;
 $$0104121 = 2;$$0105120 = $6;$$0107119 = $5;$$0109118 = $7;$$0111117 = 1.0;$$0113116 = 1.0;
 while(1) {
  $8 = (($$0104121) + 1)|0;
  $9 = $8 & 1;
  $10 = ($9|0)==(0);
  if ($10) {
   $14 = $8 >>> 1;
   $15 = (+($14|0));
   $16 = $15 + $0;
   $17 = $16 + -1.0;
   $18 = $17 * $1;
   $19 = - $18;
   $25 = $19;
  } else {
   $11 = $$0104121 >>> 1;
   $12 = (+($11|0));
   $13 = $12 * $1;
   $25 = $13;
  }
  $20 = (+($8|0));
  $21 = $20 + $0;
  $22 = $21 + -1.0;
  $23 = $$0107119 * $22;
  $24 = $$0111117 * $25;
  $26 = $23 + $24;
  $27 = $$0105120 * $22;
  $28 = $$0113116 * $25;
  $29 = $27 + $28;
  $30 = (+Math_abs((+$26)));
  $31 = $30 > 1.3407807929942596E+154;
  $32 = (+Math_abs((+$29)));
  $33 = $32 > 1.3407807929942596E+154;
  $or$cond = $31 | $33;
  if ($or$cond) {
   $34 = $26 / 1.3407807929942596E+154;
   $35 = $29 / 1.3407807929942596E+154;
   $36 = $$0107119 / 1.3407807929942596E+154;
   $37 = $$0105120 / 1.3407807929942596E+154;
   $$1106 = $35;$$1108 = $34;$$1112 = $36;$$1114 = $37;
  } else {
   $$1106 = $29;$$1108 = $26;$$1112 = $$0107119;$$1114 = $$0105120;
  }
  $38 = $$1108 / $$1106;
  $39 = $$0109118 / $38;
  $40 = $39 + -1.0;
  $41 = (+Math_abs((+$40)));
  $42 = !($41 < 4.4408920985006262E-16);
  $43 = ($8>>>0)<(5000);
  $or$cond122 = $42 & $43;
  if ($or$cond122) {
   $$0104121 = $8;$$0105120 = $$1106;$$0107119 = $$1108;$$0109118 = $38;$$0111117 = $$1112;$$0113116 = $$1114;
  } else {
   break;
  }
 }
 HEAPF64[$2>>3] = $38;
 $44 = $20 + 1.0;
 $45 = $44 * 4.0;
 $46 = $45 * 2.2204460492503131E-16;
 $47 = (+Math_abs((+$38)));
 $48 = $47 * $46;
 $49 = ((($2)) + 8|0);
 HEAPF64[$49>>3] = $48;
 $50 = ($8|0)==(5000);
 if (!($50)) {
  $$0103 = 0;
  return ($$0103|0);
 }
 _gsl_error(82813,82260,99,11);
 $$0103 = 11;
 return ($$0103|0);
}
function _gsl_sf_exprel_n_e($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $$0$i138 = 0, $$0$i139 = 0, $$0131148 = 0.0, $$0132147 = 0.0, $$0133146 = 0, $$0134145 = 0.0, $$0135144 = 0.0, $$0136 = 0, $$0149 = 0, $$1 = 0, $$2 = 0, $$sink = 0.0, $$sink156 = 0.0, $$sroa$0$0 = 0.0, $$sroa$7$0 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0;
 var $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0;
 var $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0;
 var $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0;
 var $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0;
 var $177 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $exitcond = 0, $exitcond155 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = ($0|0)<(0);
 if ($6) {
  HEAPF64[$2>>3] = nan;
  $7 = ((($2)) + 8|0);
  HEAPF64[$7>>3] = nan;
  _gsl_error(82896,82260,426,1);
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $8 = $1 == 0.0;
 if ($8) {
  HEAPF64[$2>>3] = 1.0;
  $9 = ((($2)) + 8|0);
  HEAPF64[$9>>3] = 0.0;
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $10 = (+Math_abs((+$1)));
 $11 = (+($0|0));
 $12 = $11 * 6.0554544523933429E-6;
 $13 = $10 < $12;
 if ($13) {
  $14 = (($0) + 1)|0;
  $15 = (+($14|0));
  $16 = $1 / $15;
  $17 = (($0) + 2)|0;
  $18 = (+($17|0));
  $19 = $1 / $18;
  $20 = $19 + 1.0;
  $21 = $16 * $20;
  $22 = $21 + 1.0;
  HEAPF64[$2>>3] = $22;
  $23 = ((($2)) + 8|0);
  HEAPF64[$23>>3] = 4.4408920985006262E-16;
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 switch ($0|0) {
 case 0:  {
  $24 = $1 > 709.78271289338397;
  if ($24) {
   HEAPF64[$2>>3] = inf;
   $25 = ((($2)) + 8|0);
   HEAPF64[$25>>3] = inf;
   _gsl_error(82926,82260,110,16);
   $$2 = 16;
   STACKTOP = sp;return ($$2|0);
  }
  $26 = $1 < -708.39641853226408;
  if ($26) {
   HEAPF64[$2>>3] = 0.0;
   $27 = ((($2)) + 8|0);
   HEAPF64[$27>>3] = 2.2250738585072014E-308;
   _gsl_error(82916,82260,113,15);
   $$2 = 15;
   STACKTOP = sp;return ($$2|0);
  } else {
   $28 = (+Math_exp((+$1)));
   HEAPF64[$2>>3] = $28;
   $29 = $28 * 4.4408920985006262E-16;
   $30 = ((($2)) + 8|0);
   HEAPF64[$30>>3] = $29;
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  break;
 }
 case 1:  {
  $31 = $1 < -708.39641853226408;
  if ($31) {
   $32 = -1.0 / $1;
   HEAPF64[$2>>3] = $32;
   $33 = (+Math_abs((+$32)));
   $34 = $33 * 2.2204460492503131E-16;
   $35 = ((($2)) + 8|0);
   HEAPF64[$35>>3] = $34;
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $36 = $1 < -0.002;
  if ($36) {
   $37 = (+Math_exp((+$1)));
   $38 = $37 + -1.0;
   $39 = $38 / $1;
   HEAPF64[$2>>3] = $39;
   $40 = (+Math_abs((+$39)));
   $41 = $40 * 4.4408920985006262E-16;
   $42 = ((($2)) + 8|0);
   HEAPF64[$42>>3] = $41;
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $43 = $1 < 0.002;
  if ($43) {
   $44 = $1 * 0.5;
   $45 = $1 / 3.0;
   $46 = $1 * 0.25;
   $47 = $1 * 0.20000000000000001;
   $48 = $47 + 1.0;
   $49 = $46 * $48;
   $50 = $49 + 1.0;
   $51 = $45 * $50;
   $52 = $51 + 1.0;
   $53 = $44 * $52;
   $54 = $53 + 1.0;
   HEAPF64[$2>>3] = $54;
   $55 = (+Math_abs((+$54)));
   $56 = $55 * 4.4408920985006262E-16;
   $57 = ((($2)) + 8|0);
   HEAPF64[$57>>3] = $56;
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $58 = $1 < 709.78271289338397;
  if ($58) {
   $59 = (+Math_exp((+$1)));
   $60 = $59 + -1.0;
   $61 = $60 / $1;
   HEAPF64[$2>>3] = $61;
   $62 = (+Math_abs((+$61)));
   $63 = $62 * 4.4408920985006262E-16;
   $64 = ((($2)) + 8|0);
   HEAPF64[$64>>3] = $63;
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  } else {
   HEAPF64[$2>>3] = inf;
   $65 = ((($2)) + 8|0);
   HEAPF64[$65>>3] = inf;
   _gsl_error(82926,82260,381,16);
   $$2 = 16;
   STACKTOP = sp;return ($$2|0);
  }
  break;
 }
 case 2:  {
  $66 = (_gsl_sf_exprel_2_e($1,$2)|0);
  $$2 = $66;
  STACKTOP = sp;return ($$2|0);
  break;
 }
 default: {
  $67 = $11 < $1;
  if (!($67)) {
   $162 = $11 * -10.0;
   $163 = $162 < $1;
   if ($163) {
    $164 = (_exprel_n_CF($11,$1,$2)|0);
    $$2 = $164;
    STACKTOP = sp;return ($$2|0);
   }
   $$0131148 = 1.0;$$0132147 = 1.0;$$0149 = 1;
   while(1) {
    $165 = (($0) - ($$0149))|0;
    $166 = (+($165|0));
    $167 = $166 / $1;
    $168 = $$0131148 * $167;
    $169 = $$0132147 + $168;
    $170 = (($$0149) + 1)|0;
    $exitcond155 = ($170|0)==($0|0);
    if ($exitcond155) {
     break;
    } else {
     $$0131148 = $168;$$0132147 = $169;$$0149 = $170;
    }
   }
   $171 = (0 - ($0))|0;
   $172 = (+($171|0));
   $173 = $172 / $1;
   $174 = $173 * $169;
   HEAPF64[$2>>3] = $174;
   $175 = (+Math_abs((+$174)));
   $176 = $175 * 4.4408920985006262E-16;
   $177 = ((($2)) + 8|0);
   HEAPF64[$177>>3] = $176;
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $68 = $1 / $11;
  $69 = (+Math_log((+$68)));
  $70 = $69 + 1.0;
  $71 = $70 * $11;
  $72 = $71 - $1;
  $73 = $72 < -36.043653389117154;
  if ($73) {
   (_gsl_sf_lnfact_e($0,$3)|0);
   $74 = (+Math_log((+$1)));
   $75 = $74 * $11;
   $76 = +HEAPF64[$3>>3];
   $77 = $76 + $1;
   $78 = $77 - $75;
   $79 = (+Math_abs((+$76)));
   $80 = $10 + $79;
   $81 = (+Math_abs((+$75)));
   $82 = $81 + $80;
   $83 = $82 * 2.2204460492503131E-16;
   $84 = ((($3)) + 8|0);
   $85 = +HEAPF64[$84>>3];
   $86 = $85 + $83;
   $87 = (+Math_abs((+$86)));
   $88 = $78 + $87;
   $89 = $88 > 709.78271289338397;
   do {
    if ($89) {
     HEAPF64[$2>>3] = inf;
     $90 = ((($2)) + 8|0);
     HEAPF64[$90>>3] = inf;
     _gsl_error(82926,82260,542,16);
     $$0$i138 = 16;
    } else {
     $91 = $78 - $87;
     $92 = $91 < -708.39641853226408;
     if ($92) {
      HEAPF64[$2>>3] = 0.0;
      $93 = ((($2)) + 8|0);
      HEAPF64[$93>>3] = 2.2250738585072014E-308;
      _gsl_error(82916,82260,545,15);
      $$0$i138 = 15;
      break;
     } else {
      $94 = (+Math_exp((+$78)));
      $95 = (+Math_exp((+$87)));
      HEAPF64[$2>>3] = $94;
      $96 = 1.0 / $95;
      $97 = $95 - $96;
      $98 = $97 < 2.2204460492503131E-16;
      $99 = $98 ? 2.2204460492503131E-16 : $97;
      $100 = $94 * $99;
      $101 = ((($2)) + 8|0);
      $102 = $94 * 4.4408920985006262E-16;
      $103 = $102 + $100;
      HEAPF64[$101>>3] = $103;
      $$0$i138 = 0;
      break;
     }
    }
   } while(0);
   $$2 = $$0$i138;
   STACKTOP = sp;return ($$2|0);
  }
  $104 = (+Math_log((+$1)));
  (_gsl_sf_lnfact_e($0,$4)|0);
  $105 = +HEAPF64[$4>>3];
  $106 = $105 + $1;
  $107 = $104 * $11;
  $108 = $106 - $107;
  $109 = $108 < 704.78271289338397;
  if ($109) {
   $110 = (+Math_abs((+$105)));
   $111 = $10 + $110;
   $112 = (+Math_abs((+$107)));
   $113 = $112 + $111;
   $114 = $113 * 2.2204460492503131E-16;
   $115 = ((($4)) + 8|0);
   $116 = +HEAPF64[$115>>3];
   $117 = $114 + $116;
   $118 = (+Math_log((+$11)));
   $119 = $105 - $118;
   $120 = (+Math_abs((+$117)));
   $121 = $108 + $120;
   $122 = $121 > 709.78271289338397;
   do {
    if ($122) {
     _gsl_error(82926,82260,542,16);
     $$0$i139 = 16;$$sroa$0$0 = inf;$$sroa$7$0 = inf;
    } else {
     $123 = $108 - $120;
     $124 = $123 < -708.39641853226408;
     if ($124) {
      _gsl_error(82916,82260,545,15);
      $$0$i139 = 15;$$sroa$0$0 = 0.0;$$sroa$7$0 = 2.2250738585072014E-308;
      break;
     } else {
      $125 = (+Math_exp((+$108)));
      $126 = (+Math_exp((+$120)));
      $127 = 1.0 / $126;
      $128 = $126 - $127;
      $129 = $128 < 2.2204460492503131E-16;
      $130 = $129 ? 2.2204460492503131E-16 : $128;
      $131 = $125 * $130;
      $132 = $125 * 4.4408920985006262E-16;
      $133 = $132 + $131;
      $$0$i139 = 0;$$sroa$0$0 = $125;$$sroa$7$0 = $133;
      break;
     }
    }
   } while(0);
   $134 = (($0) + -1)|0;
   $135 = (+($134|0));
   $136 = $104 * $135;
   $137 = $136 - $1;
   $138 = $137 - $119;
   $$0133146 = 1;$$0134145 = 1.0;$$0135144 = 1.0;
   while(1) {
    $139 = (($0) - ($$0133146))|0;
    $140 = (+($139|0));
    $141 = $140 / $1;
    $142 = $$0134145 * $141;
    $143 = $$0135144 + $142;
    $144 = (($$0133146) + 1)|0;
    $exitcond = ($144|0)==($0|0);
    if ($exitcond) {
     break;
    } else {
     $$0133146 = $144;$$0134145 = $142;$$0135144 = $143;
    }
   }
   $145 = (_gsl_sf_exp_mult_e($138,$143,$5)|0);
   $146 = ($145|0)==(0);
   if ($146) {
    $147 = +HEAPF64[$5>>3];
    $148 = 1.0 - $147;
    $149 = $$sroa$0$0 * $148;
    $150 = ((($5)) + 8|0);
    $151 = +HEAPF64[$150>>3];
    $152 = $151 + 4.4408920985006262E-16;
    $153 = $$sroa$0$0 * $152;
    $154 = (+Math_abs((+$148)));
    $155 = $$sroa$7$0 * $154;
    $156 = $155 + $153;
    $157 = (+Math_abs((+$149)));
    $158 = $157 * 4.4408920985006262E-16;
    $159 = $158 + $156;
    $$0136 = $$0$i139;$$sink = $159;$$sink156 = $149;
   } else {
    $$0136 = $145;$$sink = 0.0;$$sink156 = 0.0;
   }
   HEAPF64[$2>>3] = $$sink156;
   $160 = ((($2)) + 8|0);
   HEAPF64[$160>>3] = $$sink;
   $$1 = $$0136;
  } else {
   HEAPF64[$2>>3] = inf;
   $161 = ((($2)) + 8|0);
   HEAPF64[$161>>3] = inf;
   _gsl_error(82926,82260,508,16);
   $$1 = 16;
  }
  $$2 = $$1;
  STACKTOP = sp;return ($$2|0);
 }
 }
 return (0)|0;
}
function _gsl_sf_exp_err_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_abs((+$1)));
 $4 = $3 + $0;
 $5 = $4 > 709.78271289338397;
 if ($5) {
  HEAPF64[$2>>3] = inf;
  $6 = ((($2)) + 8|0);
  HEAPF64[$6>>3] = inf;
  _gsl_error(82926,82260,542,16);
  $$0 = 16;
  return ($$0|0);
 }
 $7 = $0 - $3;
 $8 = $7 < -708.39641853226408;
 if ($8) {
  HEAPF64[$2>>3] = 0.0;
  $9 = ((($2)) + 8|0);
  HEAPF64[$9>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82260,545,15);
  $$0 = 15;
  return ($$0|0);
 } else {
  $10 = (+Math_exp((+$0)));
  $11 = (+Math_exp((+$3)));
  HEAPF64[$2>>3] = $10;
  $12 = 1.0 / $11;
  $13 = $11 - $12;
  $14 = $13 < 2.2204460492503131E-16;
  $15 = $14 ? 2.2204460492503131E-16 : $13;
  $16 = $10 * $15;
  $17 = ((($2)) + 8|0);
  $18 = $10 * 4.4408920985006262E-16;
  $19 = $18 + $16;
  HEAPF64[$17>>3] = $19;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_exp_err_e10_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $3 = 0.0, $4 = 0.0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_abs((+$1)));
 $4 = $3 + $0;
 $5 = $4 > 2147483646.0;
 if ($5) {
  HEAPF64[$2>>3] = inf;
  $6 = ((($2)) + 8|0);
  HEAPF64[$6>>3] = inf;
  $7 = ((($2)) + 16|0);
  HEAP32[$7>>2] = 0;
  _gsl_error(82926,82260,566,16);
  $$0 = 16;
  return ($$0|0);
 }
 $8 = $0 - $3;
 $9 = $8 < -2147483647.0;
 if ($9) {
  HEAPF64[$2>>3] = 0.0;
  $10 = ((($2)) + 8|0);
  HEAPF64[$10>>3] = 2.2250738585072014E-308;
  $11 = ((($2)) + 16|0);
  HEAP32[$11>>2] = 0;
  _gsl_error(82916,82260,569,15);
  $$0 = 15;
  return ($$0|0);
 } else {
  $12 = $0 / 2.3025850929940459;
  $13 = (+Math_floor((+$12)));
  $14 = (~~(($13)));
  $15 = (+($14|0));
  $16 = $15 * 2.3025850929940459;
  $17 = $0 - $16;
  $18 = (+Math_exp((+$17)));
  HEAPF64[$2>>3] = $18;
  $19 = (+Math_abs((+$0)));
  $20 = $19 + 1.0;
  $21 = $20 * 4.4408920985006262E-16;
  $22 = $3 + $21;
  $23 = $22 * $18;
  $24 = ((($2)) + 8|0);
  HEAPF64[$24>>3] = $23;
  $25 = ((($2)) + 16|0);
  HEAP32[$25>>2] = $14;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _expint_E1_impl($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $$04$i = 0, $$04$i113 = 0, $$0523$i = 0.0, $$0523$i114 = 0.0, $$0532$i = 0.0, $$0532$i115 = 0.0, $$0541$i = 0.0, $$0541$i$phi = 0.0, $$0541$i116 = 0.0, $$0541$i116$phi = 0.0, $$1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0;
 var $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0;
 var $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0;
 var $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0;
 var $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0;
 var $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0;
 var $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0;
 var $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0;
 var $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0;
 var $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0.0;
 var $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0;
 var $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0;
 var $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0;
 var $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0;
 var $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0;
 var $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0;
 var $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0;
 var $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0;
 var $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0;
 var $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0;
 var $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0;
 var $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0;
 var $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0;
 var $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0.0;
 var $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0;
 var $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0;
 var $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0;
 var $578 = 0.0, $579 = 0.0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0.0, $590 = 0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0;
 var $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0.0, $610 = 0.0, $611 = 0.0, $612 = 0.0;
 var $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0.0, $630 = 0.0;
 var $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0.0, $640 = 0.0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0;
 var $65 = 0.0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0.0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0;
 var $668 = 0.0, $669 = 0.0, $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0.0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0;
 var $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0.0, $70 = 0.0, $700 = 0.0, $701 = 0.0, $702 = 0.0;
 var $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0.0, $710 = 0.0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0.0, $720 = 0.0;
 var $721 = 0.0, $722 = 0.0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0;
 var $74 = 0.0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0, $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0.0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0.0, $756 = 0.0, $757 = 0.0;
 var $758 = 0.0, $759 = 0.0, $76 = 0.0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0.0, $77 = 0.0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0.0;
 var $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0.0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0.0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0;
 var $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0.0, $80 = 0.0, $800 = 0.0, $801 = 0.0, $802 = 0.0, $803 = 0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0, $808 = 0.0, $809 = 0.0, $81 = 0.0, $810 = 0.0;
 var $811 = 0.0, $812 = 0.0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0.0, $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0.0, $822 = 0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0.0;
 var $83 = 0.0, $830 = 0.0, $831 = 0, $832 = 0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0.0, $837 = 0.0, $838 = 0.0, $839 = 0.0, $84 = 0.0, $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0.0, $844 = 0.0, $845 = 0.0, $846 = 0.0, $847 = 0;
 var $848 = 0.0, $849 = 0.0, $85 = 0.0, $850 = 0.0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0, $855 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = !($0 < -701.83341468208209);
 $4 = ($2|0)!=(0);
 $or$cond = $3 | $4;
 if (!($or$cond)) {
  HEAPF64[$1>>3] = inf;
  $5 = ((($1)) + 8|0);
  HEAPF64[$5>>3] = inf;
  _gsl_error(82926,82266,298,16);
  $$1 = 16;
  return ($$1|0);
 }
 $6 = !($0 <= -10.0);
 if (!($6)) {
  $7 = 1.0 / $0;
  $8 = - $0;
  $9 = (+Math_exp((+$8)));
  $10 = $4 ? 1.0 : $9;
  $11 = $7 * $10;
  $12 = 20.0 / $0;
  $13 = $12 + 1.0;
  $14 = $13 * 2.0;
  $15 = $14 + 1.0;
  $16 = $15 + -1.0;
  $17 = $16 * 0.5;
  $18 = $17 * 2.0;
  $$04$i = 38;$$0523$i = 0.0;$$0532$i = 0.0;$$0541$i = 0.0;
  while(1) {
   $19 = $18 * $$0523$i;
   $20 = $19 - $$0541$i;
   $21 = (30352 + ($$04$i<<3)|0);
   $22 = +HEAPF64[$21>>3];
   $23 = $20 + $22;
   $24 = (+Math_abs((+$19)));
   $25 = (+Math_abs((+$$0541$i)));
   $26 = $24 + $25;
   $27 = (+Math_abs((+$22)));
   $28 = $26 + $27;
   $29 = $$0532$i + $28;
   $30 = (($$04$i) + -1)|0;
   $31 = ($$04$i|0)>(1);
   if ($31) {
    $$0541$i$phi = $$0523$i;$$04$i = $30;$$0523$i = $23;$$0532$i = $29;$$0541$i = $$0541$i$phi;
   } else {
    break;
   }
  }
  $32 = $17 * $23;
  $33 = $32 - $$0523$i;
  $34 = $33 + 0.060751619858032894;
  $35 = (+Math_abs((+$32)));
  $36 = (+Math_abs((+$$0523$i)));
  $37 = $36 + $35;
  $38 = $37 + 0.060751619858032894;
  $39 = $29 + $38;
  $40 = $39 * 2.2204460492503131E-16;
  $41 = $40 + 1.6999999999999999E-17;
  $42 = $34 + 1.0;
  $43 = $11 * $42;
  HEAPF64[$1>>3] = $43;
  $44 = $11 * $41;
  $45 = ((($1)) + 8|0);
  $46 = (+Math_abs((+$0)));
  $47 = $46 + 1.0;
  $48 = $47 * 4.4408920985006262E-16;
  $49 = (+Math_abs((+$43)));
  $50 = $48 * $49;
  $51 = $50 + $44;
  HEAPF64[$45>>3] = $51;
  $$1 = 0;
  return ($$1|0);
 }
 $52 = !($0 <= -4.0);
 if (!($52)) {
  $53 = 1.0 / $0;
  $54 = - $0;
  $55 = (+Math_exp((+$54)));
  $56 = $4 ? 1.0 : $55;
  $57 = $53 * $56;
  $58 = 40.0 / $0;
  $59 = $58 + 7.0;
  $60 = $59 / 3.0;
  $61 = $60 * 2.0;
  $62 = $61 + 1.0;
  $63 = $62 + -1.0;
  $64 = $63 * 0.5;
  $65 = $64 * 2.0;
  $66 = $65 * 0.0;
  $67 = $66 + -5.8000000000000006E-17;
  $68 = (+Math_abs((+$66)));
  $69 = $68 + 5.8000000000000006E-17;
  $70 = $69 + 0.0;
  $71 = $65 * $67;
  $72 = $71 + -2.4400000000000002E-16;
  $73 = (+Math_abs((+$71)));
  $74 = $73 + 2.4400000000000002E-16;
  $75 = $70 + $74;
  $76 = $65 * $72;
  $77 = $76 - $67;
  $78 = $77 + -7.16E-16;
  $79 = (+Math_abs((+$76)));
  $80 = (+Math_abs((+$67)));
  $81 = $79 + $80;
  $82 = $81 + 7.16E-16;
  $83 = $75 + $82;
  $84 = $65 * $78;
  $85 = $84 - $72;
  $86 = $85 + -5.3700000000000005E-16;
  $87 = (+Math_abs((+$84)));
  $88 = (+Math_abs((+$72)));
  $89 = $87 + $88;
  $90 = $89 + 5.3700000000000005E-16;
  $91 = $83 + $90;
  $92 = $65 * $86;
  $93 = $92 - $78;
  $94 = $93 + 1.0707E-14;
  $95 = (+Math_abs((+$92)));
  $96 = (+Math_abs((+$78)));
  $97 = $95 + $96;
  $98 = $97 + 1.0707E-14;
  $99 = $91 + $98;
  $100 = $65 * $94;
  $101 = $100 - $86;
  $102 = $101 + 9.3709000000000002E-14;
  $103 = (+Math_abs((+$100)));
  $104 = (+Math_abs((+$86)));
  $105 = $103 + $104;
  $106 = $105 + 9.3709000000000002E-14;
  $107 = $99 + $106;
  $108 = $65 * $102;
  $109 = $108 - $94;
  $110 = $109 + 4.9273500000000002E-13;
  $111 = (+Math_abs((+$108)));
  $112 = (+Math_abs((+$94)));
  $113 = $111 + $112;
  $114 = $113 + 4.9273500000000002E-13;
  $115 = $107 + $114;
  $116 = $65 * $110;
  $117 = $116 - $102;
  $118 = $117 + 1.769356E-12;
  $119 = (+Math_abs((+$116)));
  $120 = (+Math_abs((+$102)));
  $121 = $119 + $120;
  $122 = $121 + 1.769356E-12;
  $123 = $115 + $122;
  $124 = $65 * $118;
  $125 = $124 - $110;
  $126 = $125 + 2.9057319999999999E-12;
  $127 = (+Math_abs((+$124)));
  $128 = (+Math_abs((+$110)));
  $129 = $127 + $128;
  $130 = $129 + 2.9057319999999999E-12;
  $131 = $123 + $130;
  $132 = $65 * $126;
  $133 = $132 - $118;
  $134 = $133 + -1.5830222000000001E-11;
  $135 = (+Math_abs((+$132)));
  $136 = (+Math_abs((+$118)));
  $137 = $135 + $136;
  $138 = $137 + 1.5830222000000001E-11;
  $139 = $131 + $138;
  $140 = $65 * $134;
  $141 = $140 - $126;
  $142 = $141 + -1.7747660200000001E-10;
  $143 = (+Math_abs((+$140)));
  $144 = (+Math_abs((+$126)));
  $145 = $143 + $144;
  $146 = $145 + 1.7747660200000001E-10;
  $147 = $139 + $146;
  $148 = $65 * $142;
  $149 = $148 - $134;
  $150 = $149 + -9.407241970000001E-10;
  $151 = (+Math_abs((+$148)));
  $152 = (+Math_abs((+$134)));
  $153 = $151 + $152;
  $154 = $153 + 9.407241970000001E-10;
  $155 = $147 + $154;
  $156 = $65 * $150;
  $157 = $156 - $142;
  $158 = $157 + -2.8441048700000001E-9;
  $159 = (+Math_abs((+$156)));
  $160 = (+Math_abs((+$142)));
  $161 = $159 + $160;
  $162 = $161 + 2.8441048700000001E-9;
  $163 = $155 + $162;
  $164 = $65 * $158;
  $165 = $164 - $150;
  $166 = $165 + 6.62143777E-10;
  $167 = (+Math_abs((+$164)));
  $168 = (+Math_abs((+$150)));
  $169 = $167 + $168;
  $170 = $169 + 6.62143777E-10;
  $171 = $163 + $170;
  $172 = $65 * $166;
  $173 = $172 - $158;
  $174 = $173 + 6.6581901390999996E-8;
  $175 = (+Math_abs((+$172)));
  $176 = (+Math_abs((+$158)));
  $177 = $175 + $176;
  $178 = $177 + 6.6581901390999996E-8;
  $179 = $171 + $178;
  $180 = $65 * $174;
  $181 = $180 - $166;
  $182 = $181 + 4.2065002201199999E-7;
  $183 = (+Math_abs((+$180)));
  $184 = (+Math_abs((+$166)));
  $185 = $183 + $184;
  $186 = $185 + 4.2065002201199999E-7;
  $187 = $179 + $186;
  $188 = $65 * $182;
  $189 = $188 - $174;
  $190 = $189 + 1.151381913647E-6;
  $191 = (+Math_abs((+$188)));
  $192 = (+Math_abs((+$174)));
  $193 = $191 + $192;
  $194 = $193 + 1.151381913647E-6;
  $195 = $187 + $194;
  $196 = $65 * $190;
  $197 = $196 - $182;
  $198 = $197 + -2.7133957586400001E-6;
  $199 = (+Math_abs((+$196)));
  $200 = (+Math_abs((+$182)));
  $201 = $199 + $200;
  $202 = $201 + 2.7133957586400001E-6;
  $203 = $195 + $202;
  $204 = $65 * $198;
  $205 = $204 - $190;
  $206 = $205 + -4.1801320556301001E-5;
  $207 = (+Math_abs((+$204)));
  $208 = (+Math_abs((+$190)));
  $209 = $207 + $208;
  $210 = $209 + 4.1801320556301001E-5;
  $211 = $203 + $210;
  $212 = $65 * $206;
  $213 = $212 - $198;
  $214 = $213 + -1.43613366305483E-4;
  $215 = (+Math_abs((+$212)));
  $216 = (+Math_abs((+$198)));
  $217 = $215 + $216;
  $218 = $217 + 1.43613366305483E-4;
  $219 = $211 + $218;
  $220 = $65 * $214;
  $221 = $220 - $206;
  $222 = $221 + 4.3523249216939099E-4;
  $223 = (+Math_abs((+$220)));
  $224 = (+Math_abs((+$206)));
  $225 = $223 + $224;
  $226 = $225 + 4.3523249216939099E-4;
  $227 = $219 + $226;
  $228 = $65 * $222;
  $229 = $228 - $214;
  $230 = $229 + 0.005125843950185725;
  $231 = (+Math_abs((+$228)));
  $232 = (+Math_abs((+$214)));
  $233 = $231 + $232;
  $234 = $233 + 0.005125843950185725;
  $235 = $227 + $234;
  $236 = $65 * $230;
  $237 = $236 - $222;
  $238 = $237 + -0.0067642755903231412;
  $239 = (+Math_abs((+$236)));
  $240 = (+Math_abs((+$222)));
  $241 = $239 + $240;
  $242 = $241 + 0.0067642755903231412;
  $243 = $235 + $242;
  $244 = $65 * $238;
  $245 = $244 - $230;
  $246 = $245 + -0.15834885090578274;
  $247 = (+Math_abs((+$244)));
  $248 = (+Math_abs((+$230)));
  $249 = $247 + $248;
  $250 = $249 + 0.15834885090578274;
  $251 = $243 + $250;
  $252 = $64 * $246;
  $253 = $252 - $238;
  $254 = $253 + 0.29120874756736337;
  $255 = (+Math_abs((+$252)));
  $256 = (+Math_abs((+$238)));
  $257 = $256 + $255;
  $258 = $257 + 0.29120874756736337;
  $259 = $251 + $258;
  $260 = $259 * 2.2204460492503131E-16;
  $261 = $260 + 5.8000000000000006E-17;
  $262 = $254 + 1.0;
  $263 = $57 * $262;
  HEAPF64[$1>>3] = $263;
  $264 = $57 * $261;
  $265 = ((($1)) + 8|0);
  $266 = (+Math_abs((+$263)));
  $267 = $266 * 4.4408920985006262E-16;
  $268 = $267 + $264;
  HEAPF64[$265>>3] = $268;
  $$1 = 0;
  return ($$1|0);
 }
 $269 = !($0 <= -1.0);
 if (!($269)) {
  $270 = (+Math_abs((+$0)));
  $271 = (+Math_log((+$270)));
  $272 = (+Math_exp((+$0)));
  $273 = $4 ? $272 : 1.0;
  $274 = $0 * 2.0;
  $275 = $274 + 5.0;
  $276 = $275 / 3.0;
  $277 = $276 * 2.0;
  $278 = $277 + 1.0;
  $279 = $278 + -1.0;
  $280 = $279 * 0.5;
  $281 = $280 * 2.0;
  $282 = - $271;
  $283 = $281 * 0.0;
  $284 = $283 + -1.08E-18;
  $285 = (+Math_abs((+$283)));
  $286 = $285 + 1.08E-18;
  $287 = $286 + 0.0;
  $288 = $281 * $284;
  $289 = $288 + 2.7329999999999999E-17;
  $290 = (+Math_abs((+$288)));
  $291 = $290 + 2.7329999999999999E-17;
  $292 = $287 + $291;
  $293 = $281 * $289;
  $294 = $293 - $284;
  $295 = $294 + -6.5457E-16;
  $296 = (+Math_abs((+$293)));
  $297 = (+Math_abs((+$284)));
  $298 = $296 + $297;
  $299 = $298 + 6.5457E-16;
  $300 = $292 + $299;
  $301 = $281 * $295;
  $302 = $301 - $289;
  $303 = $302 + 1.479904E-14;
  $304 = (+Math_abs((+$301)));
  $305 = (+Math_abs((+$289)));
  $306 = $304 + $305;
  $307 = $306 + 1.479904E-14;
  $308 = $300 + $307;
  $309 = $281 * $303;
  $310 = $309 - $295;
  $311 = $310 + -3.1481541000000002E-13;
  $312 = (+Math_abs((+$309)));
  $313 = (+Math_abs((+$295)));
  $314 = $312 + $313;
  $315 = $314 + 3.1481541000000002E-13;
  $316 = $308 + $315;
  $317 = $281 * $311;
  $318 = $317 - $303;
  $319 = $318 + 6.2762706600000003E-12;
  $320 = (+Math_abs((+$317)));
  $321 = (+Math_abs((+$303)));
  $322 = $320 + $321;
  $323 = $322 + 6.2762706600000003E-12;
  $324 = $316 + $323;
  $325 = $281 * $319;
  $326 = $325 - $311;
  $327 = $326 + -1.1673686816E-10;
  $328 = (+Math_abs((+$325)));
  $329 = (+Math_abs((+$311)));
  $330 = $328 + $329;
  $331 = $330 + 1.1673686816E-10;
  $332 = $324 + $331;
  $333 = $281 * $327;
  $334 = $333 - $319;
  $335 = $334 + 2.0151997487400002E-9;
  $336 = (+Math_abs((+$333)));
  $337 = (+Math_abs((+$319)));
  $338 = $336 + $337;
  $339 = $338 + 2.0151997487400002E-9;
  $340 = $332 + $339;
  $341 = $281 * $335;
  $342 = $341 - $327;
  $343 = $342 + -3.2092888533289997E-8;
  $344 = (+Math_abs((+$341)));
  $345 = (+Math_abs((+$327)));
  $346 = $344 + $345;
  $347 = $346 + 3.2092888533289997E-8;
  $348 = $340 + $347;
  $349 = $281 * $343;
  $350 = $349 - $335;
  $351 = $350 + 4.6816002303175999E-7;
  $352 = (+Math_abs((+$349)));
  $353 = (+Math_abs((+$335)));
  $354 = $352 + $353;
  $355 = $354 + 4.6816002303175999E-7;
  $356 = $348 + $355;
  $357 = $281 * $351;
  $358 = $357 - $343;
  $359 = $358 + -6.2028618758082001E-6;
  $360 = (+Math_abs((+$357)));
  $361 = (+Math_abs((+$343)));
  $362 = $360 + $361;
  $363 = $362 + 6.2028618758082001E-6;
  $364 = $356 + $363;
  $365 = $281 * $359;
  $366 = $365 - $351;
  $367 = $366 + 7.3880933562621675E-5;
  $368 = (+Math_abs((+$365)));
  $369 = (+Math_abs((+$351)));
  $370 = $368 + $369;
  $371 = $370 + 7.3880933562621675E-5;
  $372 = $364 + $371;
  $373 = $281 * $367;
  $374 = $373 - $359;
  $375 = $374 + -7.8104901449841595E-4;
  $376 = (+Math_abs((+$373)));
  $377 = (+Math_abs((+$359)));
  $378 = $376 + $377;
  $379 = $378 + 7.8104901449841595E-4;
  $380 = $372 + $379;
  $381 = $281 * $375;
  $382 = $381 - $367;
  $383 = $382 + 0.0072110777696600915;
  $384 = (+Math_abs((+$381)));
  $385 = (+Math_abs((+$367)));
  $386 = $384 + $385;
  $387 = $386 + 0.0072110777696600915;
  $388 = $380 + $387;
  $389 = $281 * $383;
  $390 = $389 - $375;
  $391 = $390 + -0.056925031910929021;
  $392 = (+Math_abs((+$389)));
  $393 = (+Math_abs((+$375)));
  $394 = $392 + $393;
  $395 = $394 + 0.056925031910929021;
  $396 = $388 + $395;
  $397 = $281 * $391;
  $398 = $397 - $383;
  $399 = $398 + 0.37337293866277943;
  $400 = (+Math_abs((+$397)));
  $401 = (+Math_abs((+$383)));
  $402 = $400 + $401;
  $403 = $402 + 0.37337293866277943;
  $404 = $396 + $403;
  $405 = $281 * $399;
  $406 = $405 - $391;
  $407 = $406 + -1.955405818863142;
  $408 = (+Math_abs((+$405)));
  $409 = (+Math_abs((+$391)));
  $410 = $408 + $409;
  $411 = $410 + 1.955405818863142;
  $412 = $404 + $411;
  $413 = $281 * $407;
  $414 = $413 - $399;
  $415 = $414 + 7.79407277874268;
  $416 = (+Math_abs((+$413)));
  $417 = (+Math_abs((+$399)));
  $418 = $416 + $417;
  $419 = $418 + 7.79407277874268;
  $420 = $412 + $419;
  $421 = $280 * $415;
  $422 = $421 - $407;
  $423 = $422 + -8.0567308277857475;
  $424 = (+Math_abs((+$421)));
  $425 = (+Math_abs((+$407)));
  $426 = $425 + $424;
  $427 = $426 + 8.0567308277857475;
  $428 = $420 + $427;
  $429 = $428 * 2.2204460492503131E-16;
  $430 = $429 + 1.08E-18;
  $431 = $423 - $271;
  $432 = $273 * $431;
  HEAPF64[$1>>3] = $432;
  $433 = (+Math_abs((+$282)));
  $434 = $433 * 2.2204460492503131E-16;
  $435 = $434 + $430;
  $436 = $273 * $435;
  $437 = ((($1)) + 8|0);
  $438 = (+Math_abs((+$432)));
  $439 = $438 * 4.4408920985006262E-16;
  $440 = $439 + $436;
  HEAPF64[$437>>3] = $440;
  $$1 = 0;
  return ($$1|0);
 }
 $441 = $0 == 0.0;
 if ($441) {
  HEAPF64[$1>>3] = nan;
  $442 = ((($1)) + 8|0);
  HEAPF64[$442>>3] = nan;
  _gsl_error(82896,82266,329,1);
  $$1 = 1;
  return ($$1|0);
 }
 $443 = !($0 <= 1.0);
 if (!($443)) {
  $444 = (+Math_abs((+$0)));
  $445 = (+Math_log((+$444)));
  $446 = (+Math_exp((+$0)));
  $447 = $4 ? $446 : 1.0;
  $448 = $0 * 2.0;
  $449 = $448 + 1.0;
  $450 = $449 + -1.0;
  $451 = $450 * 0.5;
  $452 = $451 * 2.0;
  $453 = - $445;
  $454 = $452 * 0.0;
  $455 = $454 + 3.1500000000000002E-18;
  $456 = (+Math_abs((+$454)));
  $457 = $456 + 3.1500000000000002E-18;
  $458 = $457 + 0.0;
  $459 = $452 * $455;
  $460 = $459 + -1.0148E-16;
  $461 = (+Math_abs((+$459)));
  $462 = $461 + 1.0148E-16;
  $463 = $458 + $462;
  $464 = $452 * $460;
  $465 = $464 - $455;
  $466 = $465 + 3.0629099999999999E-15;
  $467 = (+Math_abs((+$464)));
  $468 = (+Math_abs((+$455)));
  $469 = $467 + $468;
  $470 = $469 + 3.0629099999999999E-15;
  $471 = $463 + $470;
  $472 = $452 * $466;
  $473 = $472 - $460;
  $474 = $473 + -8.6358970000000006E-14;
  $475 = (+Math_abs((+$472)));
  $476 = (+Math_abs((+$460)));
  $477 = $475 + $476;
  $478 = $477 + 8.6358970000000006E-14;
  $479 = $471 + $478;
  $480 = $452 * $474;
  $481 = $480 - $466;
  $482 = $481 + 2.2636214200000002E-12;
  $483 = (+Math_abs((+$480)));
  $484 = (+Math_abs((+$466)));
  $485 = $483 + $484;
  $486 = $485 + 2.2636214200000002E-12;
  $487 = $479 + $486;
  $488 = $452 * $482;
  $489 = $488 - $474;
  $490 = $489 + -5.4851414799999999E-11;
  $491 = (+Math_abs((+$488)));
  $492 = (+Math_abs((+$474)));
  $493 = $491 + $492;
  $494 = $493 + 5.4851414799999999E-11;
  $495 = $487 + $494;
  $496 = $452 * $490;
  $497 = $496 - $482;
  $498 = $497 + 1.22076581374E-9;
  $499 = (+Math_abs((+$496)));
  $500 = (+Math_abs((+$482)));
  $501 = $499 + $500;
  $502 = $501 + 1.22076581374E-9;
  $503 = $495 + $502;
  $504 = $452 * $498;
  $505 = $504 - $490;
  $506 = $505 + -2.4764172113899999E-8;
  $507 = (+Math_abs((+$504)));
  $508 = (+Math_abs((+$490)));
  $509 = $507 + $508;
  $510 = $509 + 2.4764172113899999E-8;
  $511 = $503 + $510;
  $512 = $452 * $506;
  $513 = $512 - $498;
  $514 = $513 + 4.5377325690753002E-7;
  $515 = (+Math_abs((+$512)));
  $516 = (+Math_abs((+$498)));
  $517 = $515 + $516;
  $518 = $517 + 4.5377325690753002E-7;
  $519 = $511 + $518;
  $520 = $452 * $514;
  $521 = $520 - $506;
  $522 = $521 + -7.4299995161194303E-6;
  $523 = (+Math_abs((+$520)));
  $524 = (+Math_abs((+$506)));
  $525 = $523 + $524;
  $526 = $525 + 7.4299995161194303E-6;
  $527 = $519 + $526;
  $528 = $452 * $522;
  $529 = $528 - $514;
  $530 = $529 + 1.073102925306378E-4;
  $531 = (+Math_abs((+$528)));
  $532 = (+Math_abs((+$514)));
  $533 = $531 + $532;
  $534 = $533 + 1.073102925306378E-4;
  $535 = $527 + $534;
  $536 = $452 * $530;
  $537 = $536 - $522;
  $538 = $537 + -0.0013461707805106802;
  $539 = (+Math_abs((+$536)));
  $540 = (+Math_abs((+$522)));
  $541 = $539 + $540;
  $542 = $541 + 0.0013461707805106802;
  $543 = $535 + $542;
  $544 = $452 * $538;
  $545 = $544 - $530;
  $546 = $545 + 0.014419124024698891;
  $547 = (+Math_abs((+$544)));
  $548 = (+Math_abs((+$530)));
  $549 = $547 + $548;
  $550 = $549 + 0.014419124024698891;
  $551 = $543 + $550;
  $552 = $452 * $546;
  $553 = $552 - $538;
  $554 = $553 + -0.13031820798497004;
  $555 = (+Math_abs((+$552)));
  $556 = (+Math_abs((+$538)));
  $557 = $555 + $556;
  $558 = $557 + 0.13031820798497004;
  $559 = $551 + $558;
  $560 = $452 * $554;
  $561 = $560 - $546;
  $562 = $561 + 0.042723986062209576;
  $563 = (+Math_abs((+$560)));
  $564 = (+Math_abs((+$546)));
  $565 = $563 + $564;
  $566 = $565 + 0.042723986062209576;
  $567 = $559 + $566;
  $568 = $451 * $562;
  $569 = $568 - $554;
  $570 = $569 + -0.018695107396101397;
  $571 = (+Math_abs((+$568)));
  $572 = (+Math_abs((+$554)));
  $573 = $572 + $571;
  $574 = $573 + 0.018695107396101397;
  $575 = $567 + $574;
  $576 = $575 * 2.2204460492503131E-16;
  $577 = $576 + 3.1500000000000002E-18;
  $578 = -0.6875 - $445;
  $579 = $578 + $0;
  $580 = $579 + $570;
  $581 = $447 * $580;
  HEAPF64[$1>>3] = $581;
  $582 = (+Math_abs((+$453)));
  $583 = $582 * 2.2204460492503131E-16;
  $584 = $583 + $577;
  $585 = $447 * $584;
  $586 = ((($1)) + 8|0);
  $587 = (+Math_abs((+$581)));
  $588 = $587 * 4.4408920985006262E-16;
  $589 = $588 + $585;
  HEAPF64[$586>>3] = $589;
  $$1 = 0;
  return ($$1|0);
 }
 $590 = !($0 <= 4.0);
 if (!($590)) {
  $591 = 1.0 / $0;
  $592 = - $0;
  $593 = (+Math_exp((+$592)));
  $594 = $4 ? 1.0 : $593;
  $595 = $591 * $594;
  $596 = 8.0 / $0;
  $597 = $596 + -5.0;
  $598 = $597 / 3.0;
  $599 = $598 * 2.0;
  $600 = $599 + 1.0;
  $601 = $600 + -1.0;
  $602 = $601 * 0.5;
  $603 = $602 * 2.0;
  $604 = $603 * 0.0;
  $605 = $604 + 2.3000000000000001E-17;
  $606 = (+Math_abs((+$604)));
  $607 = $606 + 2.3000000000000001E-17;
  $608 = $607 + 0.0;
  $609 = $603 * $605;
  $610 = $609 + -9.3999999999999999E-17;
  $611 = (+Math_abs((+$609)));
  $612 = $611 + 9.3999999999999999E-17;
  $613 = $608 + $612;
  $614 = $603 * $610;
  $615 = $614 - $605;
  $616 = $615 + 3.8300000000000001E-16;
  $617 = (+Math_abs((+$614)));
  $618 = (+Math_abs((+$605)));
  $619 = $617 + $618;
  $620 = $619 + 3.8300000000000001E-16;
  $621 = $613 + $620;
  $622 = $603 * $616;
  $623 = $622 - $610;
  $624 = $623 + -1.568E-15;
  $625 = (+Math_abs((+$622)));
  $626 = (+Math_abs((+$610)));
  $627 = $625 + $626;
  $628 = $627 + 1.568E-15;
  $629 = $621 + $628;
  $630 = $603 * $624;
  $631 = $630 - $616;
  $632 = $631 + 6.4569999999999998E-15;
  $633 = (+Math_abs((+$630)));
  $634 = (+Math_abs((+$616)));
  $635 = $633 + $634;
  $636 = $635 + 6.4569999999999998E-15;
  $637 = $629 + $636;
  $638 = $603 * $632;
  $639 = $638 - $624;
  $640 = $639 + -2.6803999999999999E-14;
  $641 = (+Math_abs((+$638)));
  $642 = (+Math_abs((+$624)));
  $643 = $641 + $642;
  $644 = $643 + 2.6803999999999999E-14;
  $645 = $637 + $644;
  $646 = $603 * $640;
  $647 = $646 - $632;
  $648 = $647 + 1.1221100000000001E-13;
  $649 = (+Math_abs((+$646)));
  $650 = (+Math_abs((+$632)));
  $651 = $649 + $650;
  $652 = $651 + 1.1221100000000001E-13;
  $653 = $645 + $652;
  $654 = $603 * $648;
  $655 = $654 - $640;
  $656 = $655 + -4.7413199999999996E-13;
  $657 = (+Math_abs((+$654)));
  $658 = (+Math_abs((+$640)));
  $659 = $657 + $658;
  $660 = $659 + 4.7413199999999996E-13;
  $661 = $653 + $660;
  $662 = $603 * $656;
  $663 = $662 - $648;
  $664 = $663 + 2.0236719999999999E-12;
  $665 = (+Math_abs((+$662)));
  $666 = (+Math_abs((+$648)));
  $667 = $665 + $666;
  $668 = $667 + 2.0236719999999999E-12;
  $669 = $661 + $668;
  $670 = $603 * $664;
  $671 = $670 - $656;
  $672 = $671 + -8.7330260000000005E-12;
  $673 = (+Math_abs((+$670)));
  $674 = (+Math_abs((+$656)));
  $675 = $673 + $674;
  $676 = $675 + 8.7330260000000005E-12;
  $677 = $669 + $676;
  $678 = $603 * $672;
  $679 = $678 - $664;
  $680 = $679 + 3.8145706000000002E-11;
  $681 = (+Math_abs((+$678)));
  $682 = (+Math_abs((+$664)));
  $683 = $681 + $682;
  $684 = $683 + 3.8145706000000002E-11;
  $685 = $677 + $684;
  $686 = $603 * $680;
  $687 = $686 - $672;
  $688 = $687 + -1.6886433300000001E-10;
  $689 = (+Math_abs((+$686)));
  $690 = (+Math_abs((+$672)));
  $691 = $689 + $690;
  $692 = $691 + 1.6886433300000001E-10;
  $693 = $685 + $692;
  $694 = $603 * $688;
  $695 = $694 - $680;
  $696 = $695 + 7.5875420899999998E-10;
  $697 = (+Math_abs((+$694)));
  $698 = (+Math_abs((+$680)));
  $699 = $697 + $698;
  $700 = $699 + 7.5875420899999998E-10;
  $701 = $693 + $700;
  $702 = $603 * $696;
  $703 = $702 - $688;
  $704 = $703 + -3.4668022109999999E-9;
  $705 = (+Math_abs((+$702)));
  $706 = (+Math_abs((+$688)));
  $707 = $705 + $706;
  $708 = $707 + 3.4668022109999999E-9;
  $709 = $701 + $708;
  $710 = $603 * $704;
  $711 = $710 - $696;
  $712 = $711 + 1.6143270567000001E-8;
  $713 = (+Math_abs((+$710)));
  $714 = (+Math_abs((+$696)));
  $715 = $713 + $714;
  $716 = $715 + 1.6143270567000001E-8;
  $717 = $709 + $716;
  $718 = $603 * $712;
  $719 = $718 - $704;
  $720 = $719 + -7.6823455870000003E-8;
  $721 = (+Math_abs((+$718)));
  $722 = (+Math_abs((+$704)));
  $723 = $721 + $722;
  $724 = $723 + 7.6823455870000003E-8;
  $725 = $717 + $724;
  $726 = $603 * $720;
  $727 = $726 - $712;
  $728 = $727 + 3.74943193568E-7;
  $729 = (+Math_abs((+$726)));
  $730 = (+Math_abs((+$712)));
  $731 = $729 + $730;
  $732 = $731 + 3.74943193568E-7;
  $733 = $725 + $732;
  $734 = $603 * $728;
  $735 = $734 - $720;
  $736 = $735 + -1.885368984916E-6;
  $737 = (+Math_abs((+$734)));
  $738 = (+Math_abs((+$720)));
  $739 = $737 + $738;
  $740 = $739 + 1.885368984916E-6;
  $741 = $733 + $740;
  $742 = $603 * $736;
  $743 = $742 - $728;
  $744 = $743 + 9.8278128802470002E-6;
  $745 = (+Math_abs((+$742)));
  $746 = (+Math_abs((+$728)));
  $747 = $745 + $746;
  $748 = $747 + 9.8278128802470002E-6;
  $749 = $741 + $748;
  $750 = $603 * $744;
  $751 = $750 - $736;
  $752 = $751 + -5.3564132129618001E-5;
  $753 = (+Math_abs((+$750)));
  $754 = (+Math_abs((+$736)));
  $755 = $753 + $754;
  $756 = $755 + 5.3564132129618001E-5;
  $757 = $749 + $756;
  $758 = $603 * $752;
  $759 = $758 - $744;
  $760 = $759 + 3.0911833772060299E-4;
  $761 = (+Math_abs((+$758)));
  $762 = (+Math_abs((+$744)));
  $763 = $761 + $762;
  $764 = $763 + 3.0911833772060299E-4;
  $765 = $757 + $764;
  $766 = $603 * $760;
  $767 = $766 - $752;
  $768 = $767 + -0.0019268451873811451;
  $769 = (+Math_abs((+$766)));
  $770 = (+Math_abs((+$752)));
  $771 = $769 + $770;
  $772 = $771 + 0.0019268451873811451;
  $773 = $765 + $772;
  $774 = $603 * $768;
  $775 = $774 - $760;
  $776 = $775 + 0.013432266247902778;
  $777 = (+Math_abs((+$774)));
  $778 = (+Math_abs((+$760)));
  $779 = $777 + $778;
  $780 = $779 + 0.013432266247902778;
  $781 = $773 + $780;
  $782 = $603 * $776;
  $783 = $782 - $768;
  $784 = $783 + -0.1125352434836609;
  $785 = (+Math_abs((+$782)));
  $786 = (+Math_abs((+$768)));
  $787 = $785 + $786;
  $788 = $787 + 0.1125352434836609;
  $789 = $781 + $788;
  $790 = $602 * $784;
  $791 = $790 - $776;
  $792 = $791 + -0.30288662332030175;
  $793 = (+Math_abs((+$790)));
  $794 = (+Math_abs((+$776)));
  $795 = $794 + $793;
  $796 = $795 + 0.30288662332030175;
  $797 = $789 + $796;
  $798 = $797 * 2.2204460492503131E-16;
  $799 = $798 + 2.3000000000000001E-17;
  $800 = $792 + 1.0;
  $801 = $595 * $800;
  HEAPF64[$1>>3] = $801;
  $802 = $595 * $799;
  $803 = ((($1)) + 8|0);
  $804 = (+Math_abs((+$801)));
  $805 = $804 * 4.4408920985006262E-16;
  $806 = $805 + $802;
  HEAPF64[$803>>3] = $806;
  $$1 = 0;
  return ($$1|0);
 }
 $807 = $0 <= 701.83341468208209;
 $or$cond3 = $807 | $4;
 if (!($or$cond3)) {
  HEAPF64[$1>>3] = 0.0;
  $855 = ((($1)) + 8|0);
  HEAPF64[$855>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82266,363,15);
  $$1 = 15;
  return ($$1|0);
 }
 $808 = 1.0 / $0;
 $809 = - $0;
 $810 = (+Math_exp((+$809)));
 $811 = $4 ? 1.0 : $810;
 $812 = $808 * $811;
 $813 = 8.0 / $0;
 $814 = $813 + -1.0;
 $815 = $814 * 2.0;
 $816 = $815 + 1.0;
 $817 = $816 + -1.0;
 $818 = $817 * 0.5;
 $819 = $818 * 2.0;
 $$04$i113 = 25;$$0523$i114 = 0.0;$$0532$i115 = 0.0;$$0541$i116 = 0.0;
 while(1) {
  $820 = $819 * $$0523$i114;
  $821 = $820 - $$0541$i116;
  $822 = (30672 + ($$04$i113<<3)|0);
  $823 = +HEAPF64[$822>>3];
  $824 = $821 + $823;
  $825 = (+Math_abs((+$820)));
  $826 = (+Math_abs((+$$0541$i116)));
  $827 = $825 + $826;
  $828 = (+Math_abs((+$823)));
  $829 = $827 + $828;
  $830 = $$0532$i115 + $829;
  $831 = (($$04$i113) + -1)|0;
  $832 = ($$04$i113|0)>(1);
  if ($832) {
   $$0541$i116$phi = $$0523$i114;$$04$i113 = $831;$$0523$i114 = $824;$$0532$i115 = $830;$$0541$i116 = $$0541$i116$phi;
  } else {
   break;
  }
 }
 $833 = $818 * $824;
 $834 = $833 - $$0523$i114;
 $835 = $834 + -0.094645900037650846;
 $836 = (+Math_abs((+$833)));
 $837 = (+Math_abs((+$$0523$i114)));
 $838 = $837 + $836;
 $839 = $838 + 0.094645900037650846;
 $840 = $830 + $839;
 $841 = $840 * 2.2204460492503131E-16;
 $842 = $841 + 4.9999999999999999E-17;
 $843 = $835 + 1.0;
 $844 = $812 * $843;
 HEAPF64[$1>>3] = $844;
 $845 = $842 + 2.2204460492503131E-16;
 $846 = $812 * $845;
 $847 = ((($1)) + 8|0);
 $848 = $0 + 1.0;
 $849 = $848 * 2.0;
 $850 = $849 * 2.2204460492503131E-16;
 $851 = (+Math_abs((+$844)));
 $852 = $850 * $851;
 $853 = $852 + $846;
 HEAPF64[$847>>3] = $853;
 $854 = $844 == 0.0;
 if (!($854)) {
  $$1 = 0;
  return ($$1|0);
 }
 HEAPF64[$1>>3] = 0.0;
 HEAPF64[$847>>3] = 2.2250738585072014E-308;
 _gsl_error(82916,82266,358,15);
 $$1 = 15;
 return ($$1|0);
}
function _gsl_sf_expint_Ei($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = - $0;
 $3 = (_expint_E1_impl($2,$1,0)|0);
 $4 = +HEAPF64[$1>>3];
 $5 = - $4;
 HEAPF64[$1>>3] = $5;
 $6 = ($3|0)==(0);
 if ($6) {
  STACKTOP = sp;return (+$5);
 }
 _gsl_error(82275,82266,575,$3);
 STACKTOP = sp;return (+$5);
}
function _gsl_sf_lngamma_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0;
 var $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0;
 var $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $0 + -1.0;
 $4 = (+Math_abs((+$3)));
 $5 = $4 < 0.01;
 if ($5) {
  $6 = $3 + -1.0017419282349509;
  $7 = $3 + 1.736483920992288;
  $8 = $6 * $7;
  $9 = $3 + 1.2433006018858752;
  $10 = $3 + 5.045627410027401;
  $11 = $9 * $10;
  $12 = $8 * 2.081626518866269;
  $13 = $12 / $11;
  $14 = $3 * $3;
  $15 = $3 * $14;
  $16 = $3 * $15;
  $17 = $3 * $16;
  $18 = $3 * 0.031419287550214552;
  $19 = $18 + -0.025940273987250202;
  $20 = $3 * $19;
  $21 = $20 + 0.019319614139604979;
  $22 = $3 * $21;
  $23 = $22 + -0.01192457083645441;
  $24 = $3 * $23;
  $25 = $24 + 0.0047853242575817533;
  $26 = $17 * $25;
  $27 = $13 + $26;
  $28 = $3 * $27;
  HEAPF64[$1>>3] = $28;
  $29 = (+Math_abs((+$28)));
  $30 = $29 * 4.4408920985006262E-16;
  $31 = ((($1)) + 8|0);
  $32 = $4 + 2.2204460492503131E-16;
  $33 = 1.0 / $32;
  $34 = $33 * $30;
  HEAPF64[$31>>3] = $34;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $35 = $0 + -2.0;
 $36 = (+Math_abs((+$35)));
 $37 = $36 < 0.01;
 if ($37) {
  $38 = $35 + 1.0008958347866692;
  $39 = $35 + 4.2093767352877549;
  $40 = $38 * $39;
  $41 = $35 + 2.6188519049032171;
  $42 = $35 + 10.857665599009835;
  $43 = $41 * $42;
  $44 = $40 * 2.853379987657819;
  $45 = $44 / $43;
  $46 = $35 * $35;
  $47 = $35 * $46;
  $48 = $35 * $47;
  $49 = $35 * $48;
  $50 = $35 * 4.0722092786794999E-5;
  $51 = $50 + -6.9327180093128204E-5;
  $52 = $35 * $51;
  $53 = $52 + 1.0672871691836649E-4;
  $54 = $35 * $53;
  $55 = $54 + -1.365435269792533E-4;
  $56 = $35 * $55;
  $57 = $56 + 1.139406357036744E-4;
  $58 = $49 * $57;
  $59 = $45 + $58;
  $60 = $35 * $59;
  HEAPF64[$1>>3] = $60;
  $61 = (+Math_abs((+$60)));
  $62 = $61 * 4.4408920985006262E-16;
  $63 = ((($1)) + 8|0);
  $64 = $36 + 2.2204460492503131E-16;
  $65 = 1.0 / $64;
  $66 = $65 * $62;
  HEAPF64[$63>>3] = $66;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $67 = !($0 >= 0.5);
 if (!($67)) {
  $68 = $3 + 1.0;
  $69 = 676.5203681218851 / $68;
  $70 = $69 + 0.99999999999980993;
  $71 = $3 + 2.0;
  $72 = 1259.1392167224028 / $71;
  $73 = $70 - $72;
  $74 = $3 + 3.0;
  $75 = 771.32342877765313 / $74;
  $76 = $75 + $73;
  $77 = $3 + 4.0;
  $78 = 176.61502916214059 / $77;
  $79 = $76 - $78;
  $80 = $3 + 5.0;
  $81 = 12.507343278686905 / $80;
  $82 = $81 + $79;
  $83 = $3 + 6.0;
  $84 = 0.13857109526572012 / $83;
  $85 = $82 - $84;
  $86 = $3 + 7.0;
  $87 = 9.9843695780195716E-6 / $86;
  $88 = $87 + $85;
  $89 = $3 + 8.0;
  $90 = 1.5056327351493116E-7 / $89;
  $91 = $90 + $88;
  $92 = $3 + 0.5;
  $93 = $3 + 7.5;
  $94 = $93 / 2.7182818284590451;
  $95 = (+Math_log((+$94)));
  $96 = $92 * $95;
  $97 = (+Math_log((+$91)));
  $98 = $97 + 0.91893853320467278;
  $99 = $98 + -7.0;
  $100 = $96 + $99;
  HEAPF64[$1>>3] = $100;
  $101 = (+Math_abs((+$96)));
  $102 = (+Math_abs((+$98)));
  $103 = $101 + $102;
  $104 = $103 + 7.0;
  $105 = $104 * 4.4408920985006262E-16;
  $106 = ((($1)) + 8|0);
  $107 = (+Math_abs((+$100)));
  $108 = $107 * 2.2204460492503131E-16;
  $109 = $105 + $108;
  HEAPF64[$106>>3] = $109;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $110 = $0 == 0.0;
 if ($110) {
  HEAPF64[$1>>3] = nan;
  $111 = ((($1)) + 8|0);
  HEAPF64[$111>>3] = nan;
  _gsl_error(82896,82306,1138,1);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $112 = (+Math_abs((+$0)));
 $113 = $112 < 0.02;
 if ($113) {
  $114 = $0 * 4.8434392722255891E-4;
  $115 = 9.7473237804513216E-4 - $114;
  $116 = $115 * $0;
  $117 = $116 + -0.0018943062168710781;
  $118 = $117 * $0;
  $119 = $118 + 0.003998239557568466;
  $120 = $119 * $0;
  $121 = $120 + -0.0068508853787238068;
  $122 = $121 * $0;
  $123 = $122 + 0.018004931096854797;
  $124 = $123 * $0;
  $125 = $124 + -0.018271913165599812;
  $126 = $125 * $0;
  $127 = $126 + 0.092520923919113707;
  $128 = $127 * $0;
  $129 = $128 + -0.010944004672027444;
  $130 = $129 * $0;
  $131 = $130 + -0.077215664901532866;
  $132 = $131 * $0;
  $133 = $0 + 1.0;
  $134 = 1.0 / $133;
  $135 = $134 + $132;
  $136 = $0 * 0.5;
  $137 = $136 + $135;
  $138 = $137 / $112;
  $139 = (+Math_log((+$138)));
  HEAPF64[$1>>3] = $139;
  $140 = (+Math_abs((+$139)));
  $141 = $140 * 8.8817841970012523E-16;
  $142 = ((($1)) + 8|0);
  HEAPF64[$142>>3] = $141;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $143 = $0 > -716770142402832.38;
 if (!($143)) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
  _gsl_error(82813,82306,1180,18);
  $$1 = 18;
  STACKTOP = sp;return ($$1|0);
 }
 $144 = 1.0 - $0;
 $145 = $144 * 3.1415926535897931;
 $146 = (+Math_sin((+$145)));
 $147 = (+Math_abs((+$146)));
 $148 = $146 == 0.0;
 if ($148) {
  HEAPF64[$1>>3] = nan;
  $149 = ((($1)) + 8|0);
  HEAPF64[$149>>3] = nan;
  _gsl_error(82896,82306,1152,1);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $150 = $147 < 0.047123889803846894;
 if (!($150)) {
  $158 = $144 + -1.0;
  $159 = $158 + 1.0;
  $160 = 676.5203681218851 / $159;
  $161 = $160 + 0.99999999999980993;
  $162 = $158 + 2.0;
  $163 = 1259.1392167224028 / $162;
  $164 = $161 - $163;
  $165 = $158 + 3.0;
  $166 = 771.32342877765313 / $165;
  $167 = $166 + $164;
  $168 = $158 + 4.0;
  $169 = 176.61502916214059 / $168;
  $170 = $167 - $169;
  $171 = $158 + 5.0;
  $172 = 12.507343278686905 / $171;
  $173 = $172 + $170;
  $174 = $158 + 6.0;
  $175 = 0.13857109526572012 / $174;
  $176 = $173 - $175;
  $177 = $158 + 7.0;
  $178 = 9.9843695780195716E-6 / $177;
  $179 = $178 + $176;
  $180 = $158 + 8.0;
  $181 = 1.5056327351493116E-7 / $180;
  $182 = $181 + $179;
  $183 = $158 + 0.5;
  $184 = $158 + 7.5;
  $185 = $184 / 2.7182818284590451;
  $186 = (+Math_log((+$185)));
  $187 = $183 * $186;
  $188 = (+Math_log((+$182)));
  $189 = $188 + 0.91893853320467278;
  $190 = $189 + -7.0;
  $191 = $187 + $190;
  $192 = (+Math_abs((+$187)));
  $193 = (+Math_abs((+$189)));
  $194 = $192 + $193;
  $195 = $194 + 7.0;
  $196 = $195 * 4.4408920985006262E-16;
  $197 = (+Math_abs((+$191)));
  $198 = $197 * 2.2204460492503131E-16;
  $199 = $196 + $198;
  $200 = (+Math_log((+$147)));
  $201 = $200 + $191;
  $202 = 1.1447298858494002 - $201;
  HEAPF64[$1>>3] = $202;
  $203 = (+Math_abs((+$202)));
  $204 = $203 * 4.4408920985006262E-16;
  $205 = $199 + $204;
  $206 = ((($1)) + 8|0);
  HEAPF64[$206>>3] = $205;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $151 = $0 < -2147483646.0;
 if ($151) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
  _gsl_error(82813,82306,1159,18);
  $$1 = 18;
  STACKTOP = sp;return ($$1|0);
 } else {
  $152 = $0 + -0.5;
  $153 = (~~(($152)));
  $154 = (0 - ($153))|0;
  $155 = (+($154|0));
  $156 = $155 + $0;
  $157 = (_lngamma_sgn_sing($154,$156,$1,$2)|0);
  $$1 = $157;
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function _lngamma_sgn_sing($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0;
 var $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp + 96|0;
 $6 = sp + 80|0;
 $7 = sp + 64|0;
 $8 = sp + 48|0;
 $9 = sp + 32|0;
 $10 = sp + 16|0;
 $11 = sp;
 $12 = $1 == 0.0;
 if ($12) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  HEAPF64[$3>>3] = 0.0;
  _gsl_error(82813,82306,769,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($0|0)==(1);
 if ($13) {
  $14 = $1 * 1.6229131039545457E-4;
  $15 = $14 + -3.2205261682710439E-4;
  $16 = $15 * $1;
  $17 = $16 + 6.5267976121802782E-4;
  $18 = $17 * $1;
  $19 = $18 + -0.0012416264556530502;
  $20 = $19 * $1;
  $21 = $20 + 0.002756613101915416;
  $22 = $21 * $1;
  $23 = $22 + -0.0040942722768083908;
  $24 = $23 * $1;
  $25 = $24 + 0.013910658820046407;
  $26 = $25 * $1;
  $27 = $26 + -0.0043612543455534055;
  $28 = $27 * $1;
  $29 = $28 + 0.088159669573560306;
  $30 = $29 * $1;
  $31 = $30 + 0.077215664901532866;
  $32 = $31 * $1;
  $33 = $32 + -1.0;
  $34 = $1 * 0.5;
  $35 = $1 * 3.0;
  $36 = $35 + 1.0;
  $37 = $34 * $36;
  $38 = $1 * $1;
  $39 = 1.0 - $38;
  $40 = $37 / $39;
  $41 = $33 - $40;
  $42 = (+Math_abs((+$41)));
  $43 = (+Math_abs((+$1)));
  $44 = $42 / $43;
  $45 = (+Math_log((+$44)));
  HEAPF64[$2>>3] = $45;
  $46 = (+Math_abs((+$45)));
  $47 = $46 * 4.4408920985006262E-16;
  $48 = ((($2)) + 8|0);
  HEAPF64[$48>>3] = $47;
  $49 = $1 > 0.0;
  $50 = $49 ? -1.0 : 1.0;
  HEAPF64[$3>>3] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = $1 * $1;
 $52 = $51 * 0.0023460810354558235;
 $53 = 0.0261478478176548 - $52;
 $54 = $51 * $53;
 $55 = $54 + -0.19075182412208422;
 $56 = $51 * $55;
 $57 = $56 + 0.8117424252833536;
 $58 = $51 * $57;
 $59 = $58 + -1.6449340668482264;
 $60 = $51 * $59;
 $61 = $60 + 1.0;
 $62 = (+Math_abs((+$1)));
 HEAPF64[$7>>3] = 0.0;
 HEAPF64[$8>>3] = 0.0;
 HEAPF64[$9>>3] = 0.0;
 HEAPF64[$10>>3] = 0.0;
 HEAPF64[$11>>3] = 0.0;
 $63 = ($0>>>0)<(171);
 if ($63) {
  $64 = (((30880 + (($0*24)|0)|0)) + 8|0);
  $65 = +HEAPF64[$64>>3];
  $66 = (+Math_log((+$65)));
  HEAPF64[$4>>3] = $66;
  $67 = (+Math_abs((+$66)));
  $68 = $67 * 4.4408920985006262E-16;
  $69 = ((($4)) + 8|0);
  HEAPF64[$69>>3] = $68;
 } else {
  $70 = (+($0>>>0));
  $71 = $70 + 1.0;
  (_gsl_sf_lngamma_e($71,$4)|0);
 }
 $72 = (($0) + 1)|0;
 (_gsl_sf_psi_int_e($72,$5)|0);
 (_gsl_sf_psi_1_int_e($72,$6)|0);
 $73 = $62 > 1.0000000000000001E-5;
 if ($73) {
  $74 = (+($0|0));
  $75 = $74 + 1.0;
  (_gsl_sf_psi_n_e(2,$75,$7)|0);
 }
 $76 = $62 > 2.0000000000000001E-4;
 if ($76) {
  $77 = (+($0|0));
  $78 = $77 + 1.0;
  (_gsl_sf_psi_n_e(3,$78,$8)|0);
 }
 $79 = $62 > 0.001;
 if ($79) {
  $80 = (+($0|0));
  $81 = $80 + 1.0;
  (_gsl_sf_psi_n_e(4,$81,$9)|0);
 }
 $82 = $62 > 0.0050000000000000001;
 if ($82) {
  $83 = (+($0|0));
  $84 = $83 + 1.0;
  (_gsl_sf_psi_n_e(5,$84,$10)|0);
 }
 $85 = $62 > 0.01;
 if ($85) {
  $86 = (+($0|0));
  $87 = $86 + 1.0;
  (_gsl_sf_psi_n_e(6,$87,$11)|0);
 }
 $88 = +HEAPF64[$5>>3];
 $89 = +HEAPF64[$6>>3];
 $90 = $89 * 0.5;
 $91 = +HEAPF64[$7>>3];
 $92 = $91 / 6.0;
 $93 = +HEAPF64[$8>>3];
 $94 = $93 / 24.0;
 $95 = +HEAPF64[$9>>3];
 $96 = $95 / 120.0;
 $97 = +HEAPF64[$10>>3];
 $98 = $97 / 720.0;
 $99 = +HEAPF64[$11>>3];
 $100 = $99 / 5040.0;
 $101 = +HEAPF64[$4>>3];
 $102 = $100 * $1;
 $103 = $98 - $102;
 $104 = $103 * $1;
 $105 = $96 - $104;
 $106 = $105 * $1;
 $107 = $94 - $106;
 $108 = $107 * $1;
 $109 = $92 - $108;
 $110 = $109 * $1;
 $111 = $90 - $110;
 $112 = $111 * $1;
 $113 = $88 - $112;
 $114 = $113 * $1;
 $115 = $101 - $114;
 $116 = - $115;
 $117 = (+Math_log((+$61)));
 $118 = $116 - $117;
 $119 = (+Math_log((+$62)));
 $120 = $118 - $119;
 HEAPF64[$2>>3] = $120;
 $121 = ((($4)) + 8|0);
 $122 = +HEAPF64[$121>>3];
 $123 = (+Math_abs((+$118)));
 $124 = (+Math_abs((+$120)));
 $125 = $123 + $124;
 $126 = $125 * 4.4408920985006262E-16;
 $127 = $122 + $126;
 $128 = ((($2)) + 8|0);
 HEAPF64[$128>>3] = $127;
 $129 = $0 & 1;
 $130 = ($129|0)==(0);
 $131 = $130 ? 1.0 : -1.0;
 $132 = $1 > 0.0;
 $133 = $132 ? 1.0 : -1.0;
 $134 = $131 * $133;
 HEAPF64[$3>>3] = $134;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _gsl_sf_lngamma_sgn_e($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0;
 var $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 + -1.0;
 $4 = (+Math_abs((+$3)));
 $5 = $4 < 0.01;
 if ($5) {
  $6 = $3 + -1.0017419282349509;
  $7 = $3 + 1.736483920992288;
  $8 = $6 * $7;
  $9 = $3 + 1.2433006018858752;
  $10 = $3 + 5.045627410027401;
  $11 = $9 * $10;
  $12 = $8 * 2.081626518866269;
  $13 = $12 / $11;
  $14 = $3 * $3;
  $15 = $3 * $14;
  $16 = $3 * $15;
  $17 = $3 * $16;
  $18 = $3 * 0.031419287550214552;
  $19 = $18 + -0.025940273987250202;
  $20 = $3 * $19;
  $21 = $20 + 0.019319614139604979;
  $22 = $3 * $21;
  $23 = $22 + -0.01192457083645441;
  $24 = $3 * $23;
  $25 = $24 + 0.0047853242575817533;
  $26 = $17 * $25;
  $27 = $13 + $26;
  $28 = $3 * $27;
  HEAPF64[$1>>3] = $28;
  $29 = (+Math_abs((+$28)));
  $30 = $29 * 4.4408920985006262E-16;
  $31 = ((($1)) + 8|0);
  $32 = $4 + 2.2204460492503131E-16;
  $33 = 1.0 / $32;
  $34 = $33 * $30;
  HEAPF64[$31>>3] = $34;
  HEAPF64[$2>>3] = 1.0;
  $$1 = 0;
  return ($$1|0);
 }
 $35 = $0 + -2.0;
 $36 = (+Math_abs((+$35)));
 $37 = $36 < 0.01;
 if ($37) {
  $38 = $35 + 1.0008958347866692;
  $39 = $35 + 4.2093767352877549;
  $40 = $38 * $39;
  $41 = $35 + 2.6188519049032171;
  $42 = $35 + 10.857665599009835;
  $43 = $41 * $42;
  $44 = $40 * 2.853379987657819;
  $45 = $44 / $43;
  $46 = $35 * $35;
  $47 = $35 * $46;
  $48 = $35 * $47;
  $49 = $35 * $48;
  $50 = $35 * 4.0722092786794999E-5;
  $51 = $50 + -6.9327180093128204E-5;
  $52 = $35 * $51;
  $53 = $52 + 1.0672871691836649E-4;
  $54 = $35 * $53;
  $55 = $54 + -1.365435269792533E-4;
  $56 = $35 * $55;
  $57 = $56 + 1.139406357036744E-4;
  $58 = $49 * $57;
  $59 = $45 + $58;
  $60 = $35 * $59;
  HEAPF64[$1>>3] = $60;
  $61 = (+Math_abs((+$60)));
  $62 = $61 * 4.4408920985006262E-16;
  $63 = ((($1)) + 8|0);
  $64 = $36 + 2.2204460492503131E-16;
  $65 = 1.0 / $64;
  $66 = $65 * $62;
  HEAPF64[$63>>3] = $66;
  HEAPF64[$2>>3] = 1.0;
  $$1 = 0;
  return ($$1|0);
 }
 $67 = !($0 >= 0.5);
 if (!($67)) {
  HEAPF64[$2>>3] = 1.0;
  $68 = $3 + 1.0;
  $69 = 676.5203681218851 / $68;
  $70 = $69 + 0.99999999999980993;
  $71 = $3 + 2.0;
  $72 = 1259.1392167224028 / $71;
  $73 = $70 - $72;
  $74 = $3 + 3.0;
  $75 = 771.32342877765313 / $74;
  $76 = $75 + $73;
  $77 = $3 + 4.0;
  $78 = 176.61502916214059 / $77;
  $79 = $76 - $78;
  $80 = $3 + 5.0;
  $81 = 12.507343278686905 / $80;
  $82 = $81 + $79;
  $83 = $3 + 6.0;
  $84 = 0.13857109526572012 / $83;
  $85 = $82 - $84;
  $86 = $3 + 7.0;
  $87 = 9.9843695780195716E-6 / $86;
  $88 = $87 + $85;
  $89 = $3 + 8.0;
  $90 = 1.5056327351493116E-7 / $89;
  $91 = $90 + $88;
  $92 = $3 + 0.5;
  $93 = $3 + 7.5;
  $94 = $93 / 2.7182818284590451;
  $95 = (+Math_log((+$94)));
  $96 = $92 * $95;
  $97 = (+Math_log((+$91)));
  $98 = $97 + 0.91893853320467278;
  $99 = $98 + -7.0;
  $100 = $96 + $99;
  HEAPF64[$1>>3] = $100;
  $101 = (+Math_abs((+$96)));
  $102 = (+Math_abs((+$98)));
  $103 = $101 + $102;
  $104 = $103 + 7.0;
  $105 = $104 * 4.4408920985006262E-16;
  $106 = ((($1)) + 8|0);
  $107 = (+Math_abs((+$100)));
  $108 = $107 * 2.2204460492503131E-16;
  $109 = $105 + $108;
  HEAPF64[$106>>3] = $109;
  $$1 = 0;
  return ($$1|0);
 }
 $110 = $0 == 0.0;
 if ($110) {
  HEAPF64[$2>>3] = 0.0;
  HEAPF64[$1>>3] = nan;
  $111 = ((($1)) + 8|0);
  HEAPF64[$111>>3] = nan;
  _gsl_error(82896,82306,1205,1);
  $$1 = 1;
  return ($$1|0);
 }
 $112 = (+Math_abs((+$0)));
 $113 = $112 < 0.02;
 if ($113) {
  $114 = $0 * 4.8434392722255891E-4;
  $115 = 9.7473237804513216E-4 - $114;
  $116 = $115 * $0;
  $117 = $116 + -0.0018943062168710781;
  $118 = $117 * $0;
  $119 = $118 + 0.003998239557568466;
  $120 = $119 * $0;
  $121 = $120 + -0.0068508853787238068;
  $122 = $121 * $0;
  $123 = $122 + 0.018004931096854797;
  $124 = $123 * $0;
  $125 = $124 + -0.018271913165599812;
  $126 = $125 * $0;
  $127 = $126 + 0.092520923919113707;
  $128 = $127 * $0;
  $129 = $128 + -0.010944004672027444;
  $130 = $129 * $0;
  $131 = $130 + -0.077215664901532866;
  $132 = $131 * $0;
  $133 = $0 + 1.0;
  $134 = 1.0 / $133;
  $135 = $134 + $132;
  $136 = $0 * 0.5;
  $137 = $136 + $135;
  $138 = $137 / $112;
  $139 = (+Math_log((+$138)));
  HEAPF64[$1>>3] = $139;
  $140 = (+Math_abs((+$139)));
  $141 = $140 * 8.8817841970012523E-16;
  $142 = ((($1)) + 8|0);
  HEAPF64[$142>>3] = $141;
  $143 = $0 >= 0.0;
  $144 = $143 ? 1.0 : -1.0;
  HEAPF64[$2>>3] = $144;
  $$1 = 0;
  return ($$1|0);
 }
 $145 = $0 > -716770142402832.38;
 if (!($145)) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
  HEAPF64[$2>>3] = 0.0;
  _gsl_error(82314,82306,1249,18);
  $$1 = 18;
  return ($$1|0);
 }
 $146 = 1.0 - $0;
 $147 = $0 * 3.1415926535897931;
 $148 = (+Math_sin((+$147)));
 $149 = (+Math_abs((+$148)));
 $150 = $148 == 0.0;
 if ($150) {
  HEAPF64[$2>>3] = 0.0;
  HEAPF64[$1>>3] = nan;
  $151 = ((($1)) + 8|0);
  HEAPF64[$151>>3] = nan;
  _gsl_error(82896,82306,1219,1);
  $$1 = 1;
  return ($$1|0);
 }
 $152 = $149 < 0.047123889803846894;
 if (!($152)) {
  $160 = $146 + -1.0;
  $161 = $160 + 1.0;
  $162 = 676.5203681218851 / $161;
  $163 = $162 + 0.99999999999980993;
  $164 = $160 + 2.0;
  $165 = 1259.1392167224028 / $164;
  $166 = $163 - $165;
  $167 = $160 + 3.0;
  $168 = 771.32342877765313 / $167;
  $169 = $168 + $166;
  $170 = $160 + 4.0;
  $171 = 176.61502916214059 / $170;
  $172 = $169 - $171;
  $173 = $160 + 5.0;
  $174 = 12.507343278686905 / $173;
  $175 = $174 + $172;
  $176 = $160 + 6.0;
  $177 = 0.13857109526572012 / $176;
  $178 = $175 - $177;
  $179 = $160 + 7.0;
  $180 = 9.9843695780195716E-6 / $179;
  $181 = $180 + $178;
  $182 = $160 + 8.0;
  $183 = 1.5056327351493116E-7 / $182;
  $184 = $183 + $181;
  $185 = $160 + 0.5;
  $186 = $160 + 7.5;
  $187 = $186 / 2.7182818284590451;
  $188 = (+Math_log((+$187)));
  $189 = $185 * $188;
  $190 = (+Math_log((+$184)));
  $191 = $190 + 0.91893853320467278;
  $192 = $191 + -7.0;
  $193 = $189 + $192;
  $194 = (+Math_abs((+$189)));
  $195 = (+Math_abs((+$191)));
  $196 = $194 + $195;
  $197 = $196 + 7.0;
  $198 = $197 * 4.4408920985006262E-16;
  $199 = (+Math_abs((+$193)));
  $200 = $199 * 2.2204460492503131E-16;
  $201 = $198 + $200;
  $202 = $148 > 0.0;
  $203 = $202 ? 1.0 : -1.0;
  HEAPF64[$2>>3] = $203;
  $204 = (+Math_log((+$149)));
  $205 = $204 + $193;
  $206 = 1.1447298858494002 - $205;
  HEAPF64[$1>>3] = $206;
  $207 = (+Math_abs((+$206)));
  $208 = $207 * 4.4408920985006262E-16;
  $209 = $201 + $208;
  $210 = ((($1)) + 8|0);
  HEAPF64[$210>>3] = $209;
  $$1 = 0;
  return ($$1|0);
 }
 $153 = $0 < -2147483646.0;
 if ($153) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
  HEAPF64[$2>>3] = 0.0;
  _gsl_error(82813,82306,1227,18);
  $$1 = 18;
  return ($$1|0);
 } else {
  $154 = $0 + -0.5;
  $155 = (~~(($154)));
  $156 = (0 - ($155))|0;
  $157 = (+($156|0));
  $158 = $157 + $0;
  $159 = (_lngamma_sgn_sing($156,$158,$1,$2)|0);
  $$1 = $159;
  return ($$1|0);
 }
 return (0)|0;
}
function _gsl_sf_gamma_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = $0 < 0.5;
 if (!($5)) {
  $46 = (_gamma_xgthalf($0,$1)|0);
  $$2 = $46;
  STACKTOP = sp;return ($$2|0);
 }
 $6 = $0 + 0.5;
 $7 = (+Math_floor((+$6)));
 $8 = (~~(($7)));
 $9 = (+($8|0));
 $10 = $0 - $9;
 $11 = $8 & 1;
 $12 = ($11|0)==(0);
 $13 = $12 ? 1.0 : -1.0;
 $14 = $10 * 3.1415926535897931;
 $15 = (+Math_sin((+$14)));
 $16 = $13 * $15;
 $17 = $16 / 3.1415926535897931;
 $18 = $17 == 0.0;
 if ($18) {
  HEAPF64[$1>>3] = nan;
  $19 = ((($1)) + 8|0);
  HEAPF64[$19>>3] = nan;
  _gsl_error(82896,82306,1264,1);
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $20 = $0 > -169.0;
 if (!($20)) {
  $39 = (_gsl_sf_lngamma_sgn_e($0,$3,$4)|0);
  $40 = +HEAPF64[$3>>3];
  $41 = ((($3)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  $43 = +HEAPF64[$4>>3];
  $44 = (_gsl_sf_exp_mult_err_e($40,$42,$43,0.0,$1)|0);
  $45 = ($44|0)==(0);
  $$ = $45 ? $39 : $44;
  $$2 = $$;
  STACKTOP = sp;return ($$2|0);
 }
 $21 = 1.0 - $0;
 (_gamma_xgthalf($21,$2)|0);
 $22 = (+Math_abs((+$17)));
 $23 = +HEAPF64[$2>>3];
 $24 = $22 * $23;
 $25 = $24 * 2.2250738585072014E-308;
 $26 = $25 < 1.0;
 if ($26) {
  $27 = $17 * $23;
  $28 = 1.0 / $27;
  HEAPF64[$1>>3] = $28;
  $29 = ((($2)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $30 / $23;
  $32 = (+Math_abs((+$31)));
  $33 = (+Math_abs((+$28)));
  $34 = $33 * $32;
  $35 = ((($1)) + 8|0);
  $36 = $33 * 4.4408920985006262E-16;
  $37 = $36 + $34;
  HEAPF64[$35>>3] = $37;
  $$0 = 0;
 } else {
  HEAPF64[$1>>3] = 0.0;
  $38 = ((($1)) + 8|0);
  HEAPF64[$38>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82306,1276,15);
  $$0 = 15;
 }
 $$2 = $$0;
 STACKTOP = sp;return ($$2|0);
}
function _gamma_xgthalf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0;
 var $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0;
 var $298 = 0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0;
 var $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0;
 var $333 = 0, $334 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 == 0.5;
 if ($2) {
  HEAPF64[$1>>3] = 1.7724538509055161;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = 3.9356381507216567E-16;
  $$0 = 0;
  return ($$0|0);
 }
 $4 = !($0 <= 171.0);
 if (!($4)) {
  $5 = (+Math_floor((+$0)));
  $6 = $5 == $0;
  if ($6) {
   $7 = (~~(($5)));
   $8 = (($7) + -1)|0;
   $9 = (((30880 + (($8*24)|0)|0)) + 8|0);
   $10 = +HEAPF64[$9>>3];
   HEAPF64[$1>>3] = $10;
   $11 = $10 * 2.2204460492503131E-16;
   $12 = ((($1)) + 8|0);
   HEAPF64[$12>>3] = $11;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $13 = $0 + -1.0;
 $14 = (+Math_abs((+$13)));
 $15 = $14 < 0.01;
 if ($15) {
  $16 = 1.0 / $0;
  $17 = $13 * 0.003998239557568466;
  $18 = $17 + -0.0068508853787238068;
  $19 = $13 * $18;
  $20 = $19 + 0.018004931096854797;
  $21 = $13 * $20;
  $22 = $21 + -0.018271913165599812;
  $23 = $13 * $22;
  $24 = $23 + 0.092520923919113707;
  $25 = $13 * $24;
  $26 = $25 + -0.010944004672027444;
  $27 = $13 * $26;
  $28 = $27 + 0.42278433509846713;
  $29 = $13 * $28;
  $30 = $16 + $29;
  HEAPF64[$1>>3] = $30;
  $31 = ((($1)) + 8|0);
  HEAPF64[$31>>3] = 2.2204460492503131E-16;
  $$0 = 0;
  return ($$0|0);
 }
 $32 = $0 + -2.0;
 $33 = (+Math_abs((+$32)));
 $34 = $33 < 0.01;
 if ($34) {
  $35 = $32 * 0.0021039333406973879;
  $36 = $35 + -0.0028526458211553408;
  $37 = $32 * $36;
  $38 = $37 + 0.011154045718130992;
  $39 = $32 * $38;
  $40 = $39 + -2.6698206874501475E-4;
  $41 = $32 * $40;
  $42 = $41 + 0.074249010753513894;
  $43 = $32 * $42;
  $44 = $43 + 0.081576919247086266;
  $45 = $32 * $44;
  $46 = $45 + 0.41184033042643969;
  $47 = $32 * $46;
  $48 = $47 + 0.42278433509846713;
  $49 = $32 * $48;
  $50 = $49 + 1.0;
  HEAPF64[$1>>3] = $50;
  $51 = ((($1)) + 8|0);
  HEAPF64[$51>>3] = 2.2204460492503131E-16;
  $$0 = 0;
  return ($$0|0);
 }
 $52 = $0 < 5.0;
 if ($52) {
  $53 = $13 + 1.0;
  $54 = 676.5203681218851 / $53;
  $55 = $54 + 0.99999999999980993;
  $56 = $13 + 2.0;
  $57 = 1259.1392167224028 / $56;
  $58 = $55 - $57;
  $59 = $13 + 3.0;
  $60 = 771.32342877765313 / $59;
  $61 = $60 + $58;
  $62 = $13 + 4.0;
  $63 = 176.61502916214059 / $62;
  $64 = $61 - $63;
  $65 = $13 + 5.0;
  $66 = 12.507343278686905 / $65;
  $67 = $66 + $64;
  $68 = $13 + 6.0;
  $69 = 0.13857109526572012 / $68;
  $70 = $67 - $69;
  $71 = $13 + 7.0;
  $72 = 9.9843695780195716E-6 / $71;
  $73 = $72 + $70;
  $74 = $13 + 8.0;
  $75 = 1.5056327351493116E-7 / $74;
  $76 = $75 + $73;
  $77 = $13 + 0.5;
  $78 = $13 + 7.5;
  $79 = $78 / 2.7182818284590451;
  $80 = (+Math_log((+$79)));
  $81 = $77 * $80;
  $82 = (+Math_log((+$76)));
  $83 = $82 + 0.91893853320467278;
  $84 = $83 + -7.0;
  $85 = $81 + $84;
  $86 = (+Math_abs((+$81)));
  $87 = (+Math_abs((+$83)));
  $88 = $86 + $87;
  $89 = $88 + 7.0;
  $90 = $89 * 4.4408920985006262E-16;
  $91 = (+Math_abs((+$85)));
  $92 = $91 * 2.2204460492503131E-16;
  $93 = $90 + $92;
  $94 = (+Math_exp((+$85)));
  HEAPF64[$1>>3] = $94;
  $95 = $93 + 4.4408920985006262E-16;
  $96 = $94 * $95;
  $97 = ((($1)) + 8|0);
  HEAPF64[$97>>3] = $96;
  $$0 = 0;
  return ($$0|0);
 }
 $98 = $0 < 10.0;
 if ($98) {
  $99 = $0 * 2.0;
  $100 = $99 + -15.0;
  $101 = $100 / 5.0;
  $102 = $101 * 2.0;
  $103 = $102 + 1.0;
  $104 = $103 + -1.0;
  $105 = $104 * 0.5;
  $106 = $105 * 2.0;
  $107 = $106 * 0.0;
  $108 = $107 + -2.2574398807738626E-19;
  $109 = (+Math_abs((+$107)));
  $110 = $109 + 2.2574398807738626E-19;
  $111 = $110 + 0.0;
  $112 = $106 * $108;
  $113 = $112 + 1.3858639703888078E-18;
  $114 = (+Math_abs((+$112)));
  $115 = $114 + 1.3858639703888078E-18;
  $116 = $111 + $115;
  $117 = $106 * $113;
  $118 = $117 - $108;
  $119 = $118 + -8.5354147151695232E-18;
  $120 = (+Math_abs((+$117)));
  $121 = (+Math_abs((+$108)));
  $122 = $120 + $121;
  $123 = $122 + 8.5354147151695232E-18;
  $124 = $116 + $123;
  $125 = $106 * $119;
  $126 = $125 - $113;
  $127 = $126 + 5.2759418422036582E-17;
  $128 = (+Math_abs((+$125)));
  $129 = (+Math_abs((+$113)));
  $130 = $128 + $129;
  $131 = $130 + 5.2759418422036582E-17;
  $132 = $124 + $131;
  $133 = $106 * $127;
  $134 = $133 - $119;
  $135 = $134 + -3.2745239502992355E-16;
  $136 = (+Math_abs((+$133)));
  $137 = (+Math_abs((+$119)));
  $138 = $136 + $137;
  $139 = $138 + 3.2745239502992355E-16;
  $140 = $132 + $139;
  $141 = $106 * $135;
  $142 = $141 - $127;
  $143 = $142 + 2.0417711600852501E-15;
  $144 = (+Math_abs((+$141)));
  $145 = (+Math_abs((+$127)));
  $146 = $144 + $145;
  $147 = $146 + 2.0417711600852501E-15;
  $148 = $140 + $147;
  $149 = $106 * $143;
  $150 = $149 - $135;
  $151 = $150 + -1.2798522376569208E-14;
  $152 = (+Math_abs((+$149)));
  $153 = (+Math_abs((+$135)));
  $154 = $152 + $153;
  $155 = $154 + 1.2798522376569208E-14;
  $156 = $148 + $155;
  $157 = $106 * $151;
  $158 = $157 - $143;
  $159 = $158 + 8.0713532554874637E-14;
  $160 = (+Math_abs((+$157)));
  $161 = (+Math_abs((+$143)));
  $162 = $160 + $161;
  $163 = $162 + 8.0713532554874637E-14;
  $164 = $156 + $163;
  $165 = $106 * $159;
  $166 = $165 - $151;
  $167 = $166 + -5.1260001009953788E-13;
  $168 = (+Math_abs((+$165)));
  $169 = (+Math_abs((+$151)));
  $170 = $168 + $169;
  $171 = $170 + 5.1260001009953788E-13;
  $172 = $164 + $171;
  $173 = $106 * $167;
  $174 = $173 - $159;
  $175 = $174 + 3.2821736040381439E-12;
  $176 = (+Math_abs((+$173)));
  $177 = (+Math_abs((+$159)));
  $178 = $176 + $177;
  $179 = $178 + 3.2821736040381439E-12;
  $180 = $172 + $179;
  $181 = $106 * $175;
  $182 = $181 - $167;
  $183 = $182 + -2.1218861491906788E-11;
  $184 = (+Math_abs((+$181)));
  $185 = (+Math_abs((+$167)));
  $186 = $184 + $185;
  $187 = $186 + 2.1218861491906788E-11;
  $188 = $180 + $187;
  $189 = $106 * $183;
  $190 = $189 - $175;
  $191 = $190 + 1.3875551258028146E-10;
  $192 = (+Math_abs((+$189)));
  $193 = (+Math_abs((+$175)));
  $194 = $192 + $193;
  $195 = $194 + 1.3875551258028146E-10;
  $196 = $188 + $195;
  $197 = $106 * $191;
  $198 = $197 - $183;
  $199 = $198 + -9.1993973208880906E-10;
  $200 = (+Math_abs((+$197)));
  $201 = (+Math_abs((+$183)));
  $202 = $200 + $201;
  $203 = $202 + 9.1993973208880906E-10;
  $204 = $196 + $203;
  $205 = $106 * $199;
  $206 = $205 - $191;
  $207 = $206 + 6.2026423818051404E-9;
  $208 = (+Math_abs((+$205)));
  $209 = (+Math_abs((+$191)));
  $210 = $208 + $209;
  $211 = $210 + 6.2026423818051404E-9;
  $212 = $204 + $211;
  $213 = $106 * $207;
  $214 = $213 - $199;
  $215 = $214 + -4.2705675000079116E-8;
  $216 = (+Math_abs((+$213)));
  $217 = (+Math_abs((+$199)));
  $218 = $216 + $217;
  $219 = $218 + 4.2705675000079116E-8;
  $220 = $212 + $219;
  $221 = $106 * $215;
  $222 = $221 - $207;
  $223 = $222 + 3.0196602854202309E-7;
  $224 = (+Math_abs((+$221)));
  $225 = (+Math_abs((+$207)));
  $226 = $224 + $225;
  $227 = $226 + 3.0196602854202309E-7;
  $228 = $220 + $227;
  $229 = $106 * $223;
  $230 = $229 - $215;
  $231 = $230 + -2.2108528820210579E-6;
  $232 = (+Math_abs((+$229)));
  $233 = (+Math_abs((+$215)));
  $234 = $232 + $233;
  $235 = $234 + 2.2108528820210579E-6;
  $236 = $228 + $235;
  $237 = $106 * $231;
  $238 = $237 - $223;
  $239 = $238 + 1.6970924299232271E-5;
  $240 = (+Math_abs((+$237)));
  $241 = (+Math_abs((+$223)));
  $242 = $240 + $241;
  $243 = $242 + 1.6970924299232271E-5;
  $244 = $236 + $243;
  $245 = $106 * $239;
  $246 = $245 - $231;
  $247 = $246 + -1.3938412402549936E-4;
  $248 = (+Math_abs((+$245)));
  $249 = (+Math_abs((+$231)));
  $250 = $248 + $249;
  $251 = $250 + 1.3938412402549936E-4;
  $252 = $244 + $251;
  $253 = $106 * $247;
  $254 = $253 - $239;
  $255 = $254 + 0.0012704876495201083;
  $256 = (+Math_abs((+$253)));
  $257 = (+Math_abs((+$239)));
  $258 = $256 + $257;
  $259 = $258 + 0.0012704876495201083;
  $260 = $252 + $259;
  $261 = $106 * $255;
  $262 = $261 - $247;
  $263 = $262 + -0.013886766568561788;
  $264 = (+Math_abs((+$261)));
  $265 = (+Math_abs((+$247)));
  $266 = $264 + $265;
  $267 = $266 + 0.013886766568561788;
  $268 = $260 + $267;
  $269 = $106 * $263;
  $270 = $269 - $255;
  $271 = $270 + 0.22777123209776151;
  $272 = (+Math_abs((+$269)));
  $273 = (+Math_abs((+$255)));
  $274 = $272 + $273;
  $275 = $274 + 0.22777123209776151;
  $276 = $268 + $275;
  $277 = $106 * $271;
  $278 = $277 - $263;
  $279 = $278 + 4.8259152300595902;
  $280 = (+Math_abs((+$277)));
  $281 = (+Math_abs((+$263)));
  $282 = $280 + $281;
  $283 = $282 + 4.8259152300595902;
  $284 = $276 + $283;
  $285 = $105 * $279;
  $286 = $285 - $271;
  $287 = $286 + -0.76427970483307894;
  $288 = (+Math_abs((+$285)));
  $289 = (+Math_abs((+$271)));
  $290 = $289 + $288;
  $291 = $290 + 0.76427970483307894;
  $292 = $284 + $291;
  $293 = $292 * 2.2204460492503131E-16;
  $294 = $293 + 2.2574398807738626E-19;
  $295 = (+Math_exp((+$287)));
  $296 = $295 * 5040.0;
  HEAPF64[$1>>3] = $296;
  $297 = $296 * $294;
  $298 = ((($1)) + 8|0);
  $299 = $296 * 4.4408920985006262E-16;
  $300 = $299 + $297;
  HEAPF64[$298>>3] = $300;
  $$0 = 0;
  return ($$0|0);
 }
 $301 = $0 < 171.0;
 if ($301) {
  $302 = $0 * 0.5;
  $303 = (+Math_pow((+$0),(+$302)));
  $304 = - $0;
  $305 = (+Math_exp((+$304)));
  $306 = $305 * $303;
  $307 = $303 * $306;
  $308 = $307 * 2.5066282746310007;
  $309 = (+Math_sqrt((+$0)));
  $310 = $308 / $309;
  $311 = $0 * $0;
  $312 = 1.0 / $311;
  $313 = $312 * 0.029550653594771242;
  $314 = 0.00641025641025641 - $313;
  $315 = $312 * $314;
  $316 = $315 + -0.0019175269175269176;
  $317 = $312 * $316;
  $318 = $317 + 8.4175084175084171E-4;
  $319 = $312 * $318;
  $320 = $319 + -5.9523809523809529E-4;
  $321 = $312 * $320;
  $322 = $321 + 7.9365079365079365E-4;
  $323 = $312 * $322;
  $324 = $323 + -0.0027777777777777779;
  $325 = $312 * $324;
  $326 = $325 + 0.083333333333333329;
  $327 = $326 / $0;
  $328 = (+Math_exp((+$327)));
  $329 = $310 * $328;
  HEAPF64[$1>>3] = $329;
  $330 = $0 + 2.5;
  $331 = $330 * 2.2204460492503131E-16;
  $332 = $331 * $329;
  $333 = ((($1)) + 8|0);
  HEAPF64[$333>>3] = $332;
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAPF64[$1>>3] = inf;
  $334 = ((($1)) + 8|0);
  HEAPF64[$334>>3] = inf;
  _gsl_error(82926,82306,1106,16);
  $$0 = 16;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_gammastar_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$04$i = 0, $$04$i66 = 0, $$0523$i = 0.0, $$0523$i67 = 0.0, $$0532$i = 0.0, $$0532$i68 = 0.0, $$0541$i = 0.0, $$0541$i$phi = 0.0, $$0541$i69 = 0.0, $$0541$i69$phi = 0.0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0;
 var $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $15 = 0.0, $16 = 0.0;
 var $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = !($0 <= 0.0);
 if (!($3)) {
  HEAPF64[$1>>3] = nan;
  $4 = ((($1)) + 8|0);
  HEAPF64[$4>>3] = nan;
  _gsl_error(82896,82306,1304,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $0 < 0.5;
 if ($5) {
  $6 = (_gsl_sf_lngamma_e($0,$2)|0);
  $7 = (+Math_log((+$0)));
  $8 = +HEAPF64[$2>>3];
  $9 = $0 + -0.5;
  $10 = $9 * $7;
  $11 = $8 - $10;
  $12 = $11 + $0;
  $13 = $12 + -0.91893853320467266;
  $14 = ((($2)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $0 + 0.5;
  $17 = (+Math_abs((+$7)));
  $18 = $16 * $17;
  $19 = $18 + 0.91893853320467266;
  $20 = $19 * 4.4408920985006262E-16;
  $21 = $20 + $15;
  $22 = (_gsl_sf_exp_err_e($13,$21,$1)|0);
  $23 = ($6|0)==(0);
  $$ = $23 ? $22 : $6;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = $0 < 2.0;
 if ($24) {
  $25 = $0 + -0.5;
  $26 = $25 * 1.3333333333333333;
  $27 = $26 + -1.0;
  $28 = $27 * 2.0;
  $29 = $28 + 1.0;
  $30 = $29 + -1.0;
  $31 = $30 * 0.5;
  $32 = $31 * 2.0;
  $$04$i = 29;$$0523$i = 0.0;$$0532$i = 0.0;$$0541$i = 0.0;
  while(1) {
   $33 = $32 * $$0523$i;
   $34 = $33 - $$0541$i;
   $35 = (34992 + ($$04$i<<3)|0);
   $36 = +HEAPF64[$35>>3];
   $37 = $34 + $36;
   $38 = (+Math_abs((+$33)));
   $39 = (+Math_abs((+$$0541$i)));
   $40 = $38 + $39;
   $41 = (+Math_abs((+$36)));
   $42 = $40 + $41;
   $43 = $$0532$i + $42;
   $44 = (($$04$i) + -1)|0;
   $45 = ($$04$i|0)>(1);
   if ($45) {
    $$0541$i$phi = $$0523$i;$$04$i = $44;$$0523$i = $37;$$0532$i = $43;$$0541$i = $$0541$i$phi;
   } else {
    break;
   }
  }
  $46 = $31 * $37;
  $47 = $46 - $$0523$i;
  $48 = $47 + 1.0839322393323152;
  $49 = (+Math_abs((+$46)));
  $50 = (+Math_abs((+$$0523$i)));
  $51 = $50 + $49;
  $52 = $51 + 1.0839322393323152;
  $53 = $43 + $52;
  HEAPF64[$1>>3] = $48;
  $54 = $53 * 2.2204460492503131E-16;
  $55 = $54 + 1.0115153943081187E-15;
  $56 = ((($1)) + 8|0);
  HEAPF64[$56>>3] = $55;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $57 = $0 < 10.0;
 if ($57) {
  $58 = $0 + -2.0;
  $59 = $58 * 0.25;
  $60 = $59 + -1.0;
  $61 = $60 * 2.0;
  $62 = $61 + 1.0;
  $63 = $62 + -1.0;
  $64 = $63 * 0.5;
  $65 = $64 * 2.0;
  $$04$i66 = 29;$$0523$i67 = 0.0;$$0532$i68 = 0.0;$$0541$i69 = 0.0;
  while(1) {
   $66 = $65 * $$0523$i67;
   $67 = $66 - $$0541$i69;
   $68 = (35232 + ($$04$i66<<3)|0);
   $69 = +HEAPF64[$68>>3];
   $70 = $67 + $69;
   $71 = (+Math_abs((+$66)));
   $72 = (+Math_abs((+$$0541$i69)));
   $73 = $71 + $72;
   $74 = (+Math_abs((+$69)));
   $75 = $73 + $74;
   $76 = $$0532$i68 + $75;
   $77 = (($$04$i66) + -1)|0;
   $78 = ($$04$i66|0)>(1);
   if ($78) {
    $$0541$i69$phi = $$0523$i67;$$04$i66 = $77;$$0523$i67 = $70;$$0532$i68 = $76;$$0541$i69 = $$0541$i69$phi;
   } else {
    break;
   }
  }
  $79 = $64 * $70;
  $80 = $79 - $$0523$i67;
  $81 = $80 + 0.0028751138636557171;
  $82 = (+Math_abs((+$79)));
  $83 = (+Math_abs((+$$0523$i67)));
  $84 = $83 + $82;
  $85 = $84 + 0.0028751138636557171;
  $86 = $76 + $85;
  $87 = $86 * 2.2204460492503131E-16;
  $88 = $87 + 6.0483153034414767E-17;
  $89 = $0 * $0;
  $90 = $81 / $89;
  $91 = $90 + 1.0;
  $92 = $0 * 12.0;
  $93 = 1.0 / $92;
  $94 = $93 + $91;
  HEAPF64[$1>>3] = $94;
  $95 = $88 / $89;
  $96 = ((($1)) + 8|0);
  $97 = (+Math_abs((+$94)));
  $98 = $97 * 4.4408920985006262E-16;
  $99 = $95 + $98;
  HEAPF64[$96>>3] = $99;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $100 = $0 < 8192.0;
 if ($100) {
  $101 = $0 * $0;
  $102 = 1.0 / $101;
  $103 = $102 * 0.029550653594771242;
  $104 = 0.00641025641025641 - $103;
  $105 = $102 * $104;
  $106 = $105 + -0.0019175269175269176;
  $107 = $102 * $106;
  $108 = $107 + 8.4175084175084171E-4;
  $109 = $102 * $108;
  $110 = $109 + -5.9523809523809529E-4;
  $111 = $102 * $110;
  $112 = $111 + 7.9365079365079365E-4;
  $113 = $102 * $112;
  $114 = $113 + -0.0027777777777777779;
  $115 = $102 * $114;
  $116 = $115 + 0.083333333333333329;
  $117 = $116 / $0;
  $118 = (+Math_exp((+$117)));
  HEAPF64[$1>>3] = $118;
  $119 = $118 * 4.4408920985006262E-16;
  $120 = $117 < 1.0;
  $121 = $120 ? 1.0 : $117;
  $122 = $119 * $121;
  $123 = ((($1)) + 8|0);
  HEAPF64[$123>>3] = $122;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $124 = $0 < 4503599627370496.0;
 if ($124) {
  $125 = 1.0 / $0;
  $126 = $125 / 12.0;
  $127 = $125 / 24.0;
  $128 = $125 * 0.066087962962962959;
  $129 = $128 + 0.77222222222222225;
  $130 = $125 * $129;
  $131 = 1.0 - $130;
  $132 = $127 * $131;
  $133 = $132 + 1.0;
  $134 = $126 * $133;
  $135 = $134 + 1.0;
  HEAPF64[$1>>3] = $135;
  $136 = (+Math_abs((+$135)));
  $137 = $136 * 4.4408920985006262E-16;
  $138 = ((($1)) + 8|0);
  HEAPF64[$138>>3] = $137;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAPF64[$1>>3] = 1.0;
  $139 = 1.0 / $0;
  $140 = ((($1)) + 8|0);
  HEAPF64[$140>>3] = $139;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_gammainv_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = $0 <= 0.0;
 $6 = (+Math_floor((+$0)));
 $7 = $6 == $0;
 $or$cond = $5 & $7;
 if ($or$cond) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $8 = $0 < 0.5;
 if ($8) {
  $9 = (_gsl_sf_lngamma_sgn_e($0,$2,$3)|0);
  switch ($9|0) {
  case 1:  {
   ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
   $$0 = 0;
   break;
  }
  case 0:  {
   $10 = +HEAPF64[$2>>3];
   $11 = - $10;
   $12 = ((($2)) + 8|0);
   $13 = +HEAPF64[$12>>3];
   $14 = +HEAPF64[$3>>3];
   $15 = (_gsl_sf_exp_mult_err_e($11,$13,$14,0.0,$1)|0);
   $$0 = $15;
   break;
  }
  default: {
   ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
   $$0 = $9;
  }
  }
  $$2 = $$0;
  STACKTOP = sp;return ($$2|0);
 } else {
  $16 = (_gamma_xgthalf($0,$4)|0);
  $17 = ($16|0)==(16);
  if ($17) {
   HEAPF64[$1>>3] = 0.0;
   $18 = ((($1)) + 8|0);
   HEAPF64[$18>>3] = 2.2250738585072014E-308;
   _gsl_error(82916,82306,1379,15);
   $$1 = 15;
  } else {
   $19 = +HEAPF64[$4>>3];
   $20 = 1.0 / $19;
   HEAPF64[$1>>3] = $20;
   $21 = ((($4)) + 8|0);
   $22 = +HEAPF64[$21>>3];
   $23 = $22 / $19;
   $24 = (+Math_abs((+$23)));
   $25 = (+Math_abs((+$20)));
   $26 = $25 * $24;
   $27 = ((($1)) + 8|0);
   $28 = $25 * 4.4408920985006262E-16;
   $29 = $28 + $26;
   HEAPF64[$27>>3] = $29;
   $30 = $25 < 2.2250738585072014E-308;
   if ($30) {
    _gsl_error(82916,82306,1385,15);
    $$1 = 15;
   } else {
    $$1 = 0;
   }
  }
  $$2 = $$1;
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _gsl_sf_taylorcoeff_e($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $$04345 = 0.0, $$046 = 0, $$2 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 < 0.0;
 $4 = ($0|0)<(0);
 $or$cond = $4 | $3;
 if ($or$cond) {
  HEAPF64[$2>>3] = nan;
  $5 = ((($2)) + 8|0);
  HEAPF64[$5>>3] = nan;
  _gsl_error(82896,82306,1432,1);
  $$2 = 1;
  return ($$2|0);
 }
 switch ($0|0) {
 case 0:  {
  HEAPF64[$2>>3] = 1.0;
  $6 = ((($2)) + 8|0);
  HEAPF64[$6>>3] = 0.0;
  $$2 = 0;
  return ($$2|0);
  break;
 }
 case 1:  {
  HEAPF64[$2>>3] = $1;
  $7 = ((($2)) + 8|0);
  HEAPF64[$7>>3] = 0.0;
  $$2 = 0;
  return ($$2|0);
  break;
 }
 default: {
  $8 = $1 == 0.0;
  if ($8) {
   ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (+($0|0));
  $10 = (+Math_log((+$1)));
  $11 = $10 + 1.0;
  $12 = $11 * $9;
  $13 = $12 + 1.0;
  $14 = $9 + 0.5;
  $15 = $9 + 1.0;
  $16 = (+Math_log((+$15)));
  $17 = $14 * $16;
  $18 = $13 - $17;
  $19 = $18 + 0.91893853320467266;
  $20 = $19 < -707.39641853226408;
  if ($20) {
   HEAPF64[$2>>3] = 0.0;
   $21 = ((($2)) + 8|0);
   HEAPF64[$21>>3] = 2.2250738585072014E-308;
   _gsl_error(82916,82306,1454,15);
   $$2 = 15;
   return ($$2|0);
  }
  $22 = $19 > 708.78271289338397;
  if ($22) {
   HEAPF64[$2>>3] = inf;
   $23 = ((($2)) + 8|0);
   HEAPF64[$23>>3] = inf;
   _gsl_error(82926,82306,1457,16);
   $$2 = 16;
   return ($$2|0);
  }
  $$04345 = 1.0;$$046 = 1;
  while(1) {
   $24 = (+($$046|0));
   $25 = $1 / $24;
   $26 = $$04345 * $25;
   $27 = (($$046) + 1)|0;
   $exitcond = ($$046|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $$04345 = $26;$$046 = $27;
   }
  }
  HEAPF64[$2>>3] = $26;
  $28 = $9 * 2.2204460492503131E-16;
  $29 = $28 * $26;
  $30 = ((($2)) + 8|0);
  HEAPF64[$30>>3] = $29;
  $31 = (+Math_abs((+$26)));
  $32 = $31 < 2.2250738585072014E-308;
  if (!($32)) {
   $$2 = 0;
   return ($$2|0);
  }
  _gsl_error(82916,82306,1467,15);
  $$2 = 15;
  return ($$2|0);
 }
 }
 return (0)|0;
}
function _gsl_sf_lnfact_e($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(171);
 if ($2) {
  $3 = (((30880 + (($0*24)|0)|0)) + 8|0);
  $4 = +HEAPF64[$3>>3];
  $5 = (+Math_log((+$4)));
  HEAPF64[$1>>3] = $5;
  $6 = (+Math_abs((+$5)));
  $7 = $6 * 4.4408920985006262E-16;
  $8 = ((($1)) + 8|0);
  HEAPF64[$8>>3] = $7;
  return 0;
 } else {
  $9 = (+($0>>>0));
  $10 = $9 + 1.0;
  (_gsl_sf_lngamma_e($10,$1)|0);
  return 0;
 }
 return (0)|0;
}
function _gsl_sf_lnfact($0) {
 $0 = $0|0;
 var $$pre = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(171);
 if ($2) {
  $3 = (((30880 + (($0*24)|0)|0)) + 8|0);
  $4 = +HEAPF64[$3>>3];
  $5 = (+Math_log((+$4)));
  HEAPF64[$1>>3] = $5;
  $6 = (+Math_abs((+$5)));
  $7 = $6 * 4.4408920985006262E-16;
  $8 = ((($1)) + 8|0);
  HEAPF64[$8>>3] = $7;
  $11 = $5;
  STACKTOP = sp;return (+$11);
 } else {
  $9 = (+($0>>>0));
  $10 = $9 + 1.0;
  (_gsl_sf_lngamma_e($10,$1)|0);
  $$pre = +HEAPF64[$1>>3];
  $11 = $$pre;
  STACKTOP = sp;return (+$11);
 }
 return +(0.0);
}
function _gsl_sf_gammainv($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (_gsl_sf_gammainv_e($0,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  _gsl_error(82351,82306,1669,$2);
 }
 $4 = +HEAPF64[$1>>3];
 STACKTOP = sp;return (+$4);
}
function _gamma_inc_P_series($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$07593 = 0, $$07792 = 0.0, $$07991 = 0.0, $$1 = 0, $$176$lcssa = 0, $$17684 = 0, $$17684$ph = 0, $$17883 = 0.0, $$17883$ph = 0.0, $$18082 = 0.0, $$18082$ph = 0.0, $$2 = 0.0, $$281 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0;
 var $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0;
 var $8 = 0, $9 = 0.0, $exitcond = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp;
 _gamma_inc_D($0,$1,$3);
 $5 = $0 * 0.99499999999999999;
 $6 = $5 < $1;
 $7 = $0 > 1.0E+5;
 $or$cond = $7 & $6;
 if ($or$cond) {
  $8 = (_gsl_sf_exprel_n_CF_e($0,$1,$4)|0);
  $9 = +HEAPF64[$3>>3];
  $10 = +HEAPF64[$4>>3];
  $11 = $9 * $10;
  HEAPF64[$2>>3] = $11;
  $12 = ((($4)) + 8|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $9 * $13;
  $15 = (+Math_abs((+$14)));
  $16 = ((($3)) + 8|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $10 * $17;
  $19 = (+Math_abs((+$18)));
  $20 = $15 + $19;
  $21 = ((($2)) + 8|0);
  HEAPF64[$21>>3] = $20;
  $$1 = $8;
  STACKTOP = sp;return ($$1|0);
 }
 $22 = $0 + 1.0E+4;
 $23 = $22 < $1;
 if ($23) {
  _gsl_error(82444,82381,107,11);
  $$1 = 11;
  STACKTOP = sp;return ($$1|0);
 }
 $24 = $1 > $0;
 $25 = $1 - $0;
 $phitmp = (~~(($25)));
 $26 = $24 ? $phitmp : 0;
 $27 = ($26|0)>(1);
 if ($27) {
  $$07593 = 1;$$07792 = 1.0;$$07991 = 1.0;
  while(1) {
   $28 = (+($$07593|0));
   $29 = $28 + $0;
   $30 = $1 / $29;
   $31 = $$07991 * $30;
   $32 = $$07792 + $31;
   $33 = (($$07593) + 1)|0;
   $exitcond = ($33|0)==($26|0);
   if ($exitcond) {
    break;
   } else {
    $$07593 = $33;$$07792 = $32;$$07991 = $31;
   }
  }
  $34 = ($26>>>0)<(10000);
  if ($34) {
   $$17684$ph = $26;$$17883$ph = $32;$$18082$ph = $31;
   label = 9;
  } else {
   $$176$lcssa = $phitmp;$$2 = $32;$$281 = $31;
  }
 } else {
  $$17684$ph = 1;$$17883$ph = 1.0;$$18082$ph = 1.0;
  label = 9;
 }
 L14: do {
  if ((label|0) == 9) {
   $$17684 = $$17684$ph;$$17883 = $$17883$ph;$$18082 = $$18082$ph;
   while(1) {
    $35 = (+($$17684|0));
    $36 = $35 + $0;
    $37 = $1 / $36;
    $38 = $$18082 * $37;
    $39 = $$17883 + $38;
    $40 = $38 / $39;
    $41 = (+Math_abs((+$40)));
    $42 = $41 < 2.2204460492503131E-16;
    if ($42) {
     $$176$lcssa = $$17684;$$2 = $39;$$281 = $38;
     break L14;
    }
    $43 = (($$17684) + 1)|0;
    $44 = ($43>>>0)<(10000);
    if ($44) {
     $$17684 = $43;$$17883 = $39;$$18082 = $38;
    } else {
     $$176$lcssa = 10000;$$2 = $39;$$281 = $38;
     break;
    }
   }
  }
 } while(0);
 $45 = (+($$176$lcssa|0));
 $46 = $45 + $0;
 $47 = $1 / $46;
 $48 = $47 * $$281;
 $49 = $46 + 1.0;
 $50 = $1 / $49;
 $51 = 1.0 - $50;
 $52 = $48 / $51;
 $53 = +HEAPF64[$3>>3];
 $54 = $$2 * $53;
 HEAPF64[$2>>3] = $54;
 $55 = ((($3)) + 8|0);
 $56 = +HEAPF64[$55>>3];
 $57 = (+Math_abs((+$$2)));
 $58 = $57 * $56;
 $59 = $53 * $52;
 $60 = (+Math_abs((+$59)));
 $61 = $60 + $58;
 $62 = ((($2)) + 8|0);
 $63 = $45 + 1.0;
 $64 = $63 * 2.2204460492503131E-16;
 $65 = (+Math_abs((+$54)));
 $66 = $64 * $65;
 $67 = $66 + $61;
 HEAPF64[$62>>3] = $67;
 $68 = ($$176$lcssa|0)==(10000);
 if (!($68)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $69 = $52 / $$2;
 $70 = (+Math_abs((+$69)));
 $71 = $70 > 1.4901161193847656E-8;
 if (!($71)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 _gsl_error(82482,82381,146,11);
 $$1 = 11;
 STACKTOP = sp;return ($$1|0);
}
function _gamma_inc_Q_asymp_unif($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0.0, $$068 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0.0, $83 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp;
 $5 = (+Math_sqrt((+$0)));
 $6 = $1 - $0;
 $7 = $6 / $0;
 $8 = (_gsl_sf_log_1plusx_mx_e($7,$3)|0);
 $9 = $7 >= 0.0;
 $10 = $9 ? 1.0 : -1.0;
 $11 = +HEAPF64[$3>>3];
 $12 = $11 * -2.0;
 $13 = (+Math_sqrt((+$12)));
 $14 = $10 * $13;
 $15 = $5 * $14;
 $16 = $15 / 1.4142135623730951;
 (_gsl_sf_erfc_e($16,$4)|0);
 $17 = (+Math_abs((+$7)));
 $18 = $17 < 7.4009597974140505E-4;
 if ($18) {
  $19 = $7 * 589.0;
  $20 = $19 / 30240.0;
  $21 = 0.027237654320987653 - $20;
  $22 = $7 * $21;
  $23 = 0.042592592592592592 - $22;
  $24 = $7 * $23;
  $25 = 0.083333333333333329 - $24;
  $26 = $7 * $25;
  $27 = $26 + -0.33333333333333331;
  $28 = $7 / 288.0;
  $29 = -0.0018518518518518519 - $28;
  $$0 = $27;$$068 = $29;
 } else {
  $30 = +HEAPF64[$3>>3];
  $31 = $30 * -2.0;
  $32 = $7 * $7;
  $33 = $31 / $32;
  $34 = (+Math_sqrt((+$33)));
  $35 = $1 / $0;
  $36 = 1.0 / $34;
  $37 = 1.0 - $36;
  $38 = $37 / $7;
  $39 = $14 * $14;
  $40 = $14 * $39;
  $41 = $35 * $35;
  $42 = $35 * 10.0;
  $43 = $41 + $42;
  $44 = $43 + 1.0;
  $45 = $44 * $40;
  $46 = $7 * 12.0;
  $47 = $7 * $46;
  $48 = $7 * $47;
  $49 = $45 - $48;
  $50 = - $49;
  $51 = $14 * 12.0;
  $52 = $14 * $51;
  $53 = $14 * $52;
  $54 = $7 * $53;
  $55 = $7 * $54;
  $56 = $7 * $55;
  $57 = $50 / $56;
  $$0 = $38;$$068 = $57;
 }
 $58 = $0 * -0.5;
 $59 = $58 * $14;
 $60 = $14 * $59;
 $61 = (+Math_exp((+$60)));
 $62 = $5 * 2.5066282746310007;
 $63 = $61 / $62;
 $64 = $$068 / $0;
 $65 = $$0 + $64;
 $66 = $63 * $65;
 $67 = +HEAPF64[$4>>3];
 $68 = $67 * 0.5;
 $69 = $68 + $66;
 HEAPF64[$2>>3] = $69;
 $70 = $66 * 0.5;
 $71 = $70 * $0;
 $72 = $14 * $71;
 $73 = $14 * $72;
 $74 = (+Math_abs((+$73)));
 $75 = $74 * 2.2204460492503131E-16;
 $76 = ((($4)) + 8|0);
 $77 = +HEAPF64[$76>>3];
 $78 = $77 * 0.5;
 $79 = $78 + $75;
 $80 = ((($2)) + 8|0);
 $81 = (+Math_abs((+$69)));
 $82 = $81 * 4.4408920985006262E-16;
 $83 = $82 + $79;
 HEAPF64[$80>>3] = $83;
 STACKTOP = sp;return ($8|0);
}
function _gamma_inc_Q_CF($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$048$i = 0, $$049$i = 0.0, $$050$lcssa$i = 0, $$05059$i = 0, $$05158$i = 0.0, $$05257$i = 0.0, $$05456$i = 0.0, $$153$i = 0.0, $$op$i = 0.0, $$pn$i = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 _gamma_inc_D($0,$1,$3);
 $$05059$i = 2;$$05158$i = 1.0;$$05257$i = 9.1343852333181432E+46;$$05456$i = 1.0;
 while(1) {
  $4 = $$05059$i & 1;
  $5 = ($4|0)==(0);
  if ($5) {
   $9 = (+($$05059$i|0));
   $10 = $9 * 0.5;
   $11 = $10 - $0;
   $$pn$i = $11;
  } else {
   $6 = (($$05059$i) + -1)|0;
   $7 = (+($6|0));
   $8 = $7 * 0.5;
   $$pn$i = $8;
  }
  $$049$i = $$pn$i / $1;
  $12 = $$05158$i * $$049$i;
  $13 = $12 + 1.0;
  $14 = (+Math_abs((+$13)));
  $15 = $14 < 1.0947644252537633E-47;
  $16 = $$049$i / $$05257$i;
  $17 = $16 + 1.0;
  $18 = (+Math_abs((+$17)));
  $19 = $18 < 1.0947644252537633E-47;
  $$153$i = $19 ? 1.0947644252537633E-47 : $17;
  $$op$i = 1.0 / $13;
  $20 = $15 ? 9.1343852333181432E+46 : $$op$i;
  $21 = $$153$i * $20;
  $22 = $$05456$i * $21;
  $23 = $21 + -1.0;
  $24 = (+Math_abs((+$23)));
  $25 = !($24 < 2.2204460492503131E-16);
  if (!($25)) {
   $$050$lcssa$i = $$05059$i;
   break;
  }
  $26 = (($$05059$i) + 1)|0;
  $27 = ($26>>>0)<(5000);
  if ($27) {
   $$05059$i = $26;$$05158$i = $20;$$05257$i = $$153$i;$$05456$i = $22;
  } else {
   $$050$lcssa$i = 5000;
   break;
  }
 }
 $28 = (+Math_abs((+$22)));
 $29 = $28 * 4.4408920985006262E-16;
 $30 = (+($$050$lcssa$i|0));
 $31 = $30 * 0.5;
 $32 = $31 + 2.0;
 $33 = $32 * 2.2204460492503131E-16;
 $34 = $28 * $33;
 $35 = $29 + $34;
 $36 = ($$050$lcssa$i|0)==(5000);
 if ($36) {
  _gsl_error(82421,82381,286,11);
  $$048$i = 11;
 } else {
  $$048$i = 0;
 }
 $37 = +HEAPF64[$3>>3];
 $38 = $0 / $1;
 $39 = $38 * $37;
 $40 = $22 * $39;
 HEAPF64[$2>>3] = $40;
 $41 = ((($3)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $38 * $22;
 $44 = (+Math_abs((+$43)));
 $45 = $44 * $42;
 $46 = $37 * $0;
 $47 = $46 / $1;
 $48 = $35 * $47;
 $49 = (+Math_abs((+$48)));
 $50 = $45 + $49;
 $51 = ((($2)) + 8|0);
 HEAPF64[$51>>3] = $50;
 STACKTOP = sp;return ($$048$i|0);
}
function _gamma_inc_D($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$pre$phi1Z2D = 0, $$pre$phiZ2D = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = $0 < 10.0;
 if ($6) {
  $7 = $0 + 1.0;
  (_gsl_sf_lngamma_e($7,$3)|0);
  $8 = (+Math_log((+$1)));
  $9 = $8 * $0;
  $10 = $9 - $1;
  $11 = +HEAPF64[$3>>3];
  $12 = $10 - $11;
  $13 = (+Math_exp((+$12)));
  HEAPF64[$2>>3] = $13;
  $14 = (+Math_abs((+$12)));
  $15 = $14 + 1.0;
  $16 = $15 * 4.4408920985006262E-16;
  $17 = $13 * $16;
  $18 = ((($2)) + 8|0);
  HEAPF64[$18>>3] = $17;
  STACKTOP = sp;return;
 }
 $19 = $0 * 0.5;
 $20 = $19 > $1;
 if ($20) {
  $21 = $1 / $0;
  $22 = (+Math_log((+$21)));
  $23 = $22 - $21;
  $24 = $23 + 1.0;
  HEAPF64[$5>>3] = $24;
  $25 = (+Math_abs((+$22)));
  $26 = (+Math_abs((+$21)));
  $27 = $26 + $25;
  $28 = $27 + 1.0;
  $29 = $28 * 2.2204460492503131E-16;
  $30 = ((($5)) + 8|0);
  HEAPF64[$30>>3] = $29;
  $$pre$phi1Z2D = $30;$$pre$phiZ2D = $5;
 } else {
  $31 = $1 - $0;
  $32 = $31 / $0;
  (_gsl_sf_log_1plusx_mx_e($32,$5)|0);
  $33 = (+Math_abs((+$32)));
  $34 = $33 * 2.2204460492503131E-16;
  $35 = ((($5)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $34 + $36;
  HEAPF64[$35>>3] = $37;
  $$pre$phi1Z2D = $35;$$pre$phiZ2D = $5;
 }
 (_gsl_sf_gammastar_e($0,$4)|0);
 $38 = +HEAPF64[$$pre$phiZ2D>>3];
 $39 = $38 * $0;
 $40 = (+Math_exp((+$39)));
 $41 = $0 * 6.2831853071795862;
 $42 = (+Math_sqrt((+$41)));
 $43 = $40 / $42;
 $44 = +HEAPF64[$4>>3];
 $45 = $43 / $44;
 HEAPF64[$2>>3] = $45;
 $46 = (+Math_abs((+$39)));
 $47 = $46 + 1.0;
 $48 = $47 * 4.4408920985006262E-16;
 $49 = (+Math_abs((+$45)));
 $50 = $48 * $49;
 $51 = ((($2)) + 8|0);
 $52 = (+Math_abs((+$0)));
 $53 = +HEAPF64[$$pre$phi1Z2D>>3];
 $54 = $52 * $53;
 $55 = $54 * $49;
 $56 = $50 + $55;
 $57 = ((($4)) + 8|0);
 $58 = +HEAPF64[$57>>3];
 $59 = (+Math_abs((+$44)));
 $60 = $58 / $59;
 $61 = $49 * $60;
 $62 = $56 + $61;
 HEAPF64[$51>>3] = $62;
 STACKTOP = sp;return;
}
function _gsl_sf_gamma_inc_P_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$03943$i = 0.0, $$040$lcssa$i = 0.0, $$04042$i = 0.0, $$041$i = 0, $$044$i = 0, $$058 = 0, $$phi$trans$insert61 = 0, $$pre = 0.0, $$pre62 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0;
 var $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0;
 var $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 48|0;
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $7 = $0 <= 0.0;
 $8 = $1 < 0.0;
 $or$cond = $7 | $8;
 if ($or$cond) {
  HEAPF64[$2>>3] = nan;
  $9 = ((($2)) + 8|0);
  HEAPF64[$9>>3] = nan;
  _gsl_error(82896,82381,584,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = $1 == 0.0;
 if ($10) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = $1 < 20.0;
 $12 = $0 * 0.5;
 $13 = $12 > $1;
 $or$cond60 = $11 | $13;
 if ($or$cond60) {
  $14 = (_gamma_inc_P_series($0,$1,$2)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = $0 > 1.0E+6;
 if ($15) {
  $16 = $1 - $0;
  $17 = $16 * $16;
  $18 = $17 < $0;
  if ($18) {
   $19 = (_gamma_inc_Q_asymp_unif($0,$1,$4)|0);
   $20 = +HEAPF64[$4>>3];
   $21 = 1.0 - $20;
   HEAPF64[$2>>3] = $21;
   $22 = ((($4)) + 8|0);
   $23 = +HEAPF64[$22>>3];
   $24 = ((($2)) + 8|0);
   $25 = (+Math_abs((+$21)));
   $26 = $25 * 4.4408920985006262E-16;
   $27 = $23 + $26;
   HEAPF64[$24>>3] = $27;
   $$0 = $19;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $28 = !($0 <= $1);
 if ($28) {
  $66 = $1 - $0;
  $67 = $66 * $66;
  $68 = $67 < $0;
  if ($68) {
   $69 = (_gamma_inc_Q_CF($0,$1,$6)|0);
   $70 = +HEAPF64[$6>>3];
   $71 = 1.0 - $70;
   HEAPF64[$2>>3] = $71;
   $72 = ((($6)) + 8|0);
   $73 = +HEAPF64[$72>>3];
   $74 = ((($2)) + 8|0);
   $75 = (+Math_abs((+$71)));
   $76 = $75 * 4.4408920985006262E-16;
   $77 = $73 + $76;
   HEAPF64[$74>>3] = $77;
   $$0 = $69;
   STACKTOP = sp;return ($$0|0);
  } else {
   $78 = (_gamma_inc_P_series($0,$1,$2)|0);
   $$0 = $78;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $29 = $1 * 0.20000000000000001;
 $30 = $29 < $0;
 if ($30) {
  $31 = (_gamma_inc_Q_CF($0,$1,$5)|0);
  $$pre = +HEAPF64[$5>>3];
  $$phi$trans$insert61 = ((($5)) + 8|0);
  $$pre62 = +HEAPF64[$$phi$trans$insert61>>3];
  $$058 = $31;$60 = $$pre;$65 = $$pre62;
 } else {
  _gamma_inc_D($0,$1,$3);
  $$03943$i = 1.0;$$04042$i = 1.0;$$044$i = 1;
  while(1) {
   $32 = (+($$044$i|0));
   $33 = $0 - $32;
   $34 = $33 / $1;
   $35 = $$03943$i * $34;
   $36 = $35 / $$03943$i;
   $37 = (+Math_abs((+$36)));
   $38 = $37 > 1.0;
   if ($38) {
    $$0$lcssa$i = $$044$i;$$040$lcssa$i = $$04042$i;
    break;
   }
   $39 = $35 / $$04042$i;
   $40 = (+Math_abs((+$39)));
   $41 = $40 < 2.2204460492503131E-16;
   if ($41) {
    $$0$lcssa$i = $$044$i;$$040$lcssa$i = $$04042$i;
    break;
   }
   $42 = $$04042$i + $35;
   $43 = (($$044$i) + 1)|0;
   $44 = ($43>>>0)<(5000);
   if ($44) {
    $$03943$i = $35;$$04042$i = $42;$$044$i = $43;
   } else {
    $$0$lcssa$i = 5000;$$040$lcssa$i = $42;
    break;
   }
  }
  $45 = +HEAPF64[$3>>3];
  $46 = $0 / $1;
  $47 = $46 * $45;
  $48 = $$040$lcssa$i * $47;
  HEAPF64[$5>>3] = $48;
  $49 = ((($3)) + 8|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $46 * $$040$lcssa$i;
  $52 = (+Math_abs((+$51)));
  $53 = $52 * $50;
  $54 = ((($5)) + 8|0);
  $55 = (+Math_abs((+$48)));
  $56 = $55 * 4.4408920985006262E-16;
  $57 = $53 + $56;
  HEAPF64[$54>>3] = $57;
  $58 = ($$0$lcssa$i|0)==(5000);
  if ($58) {
   _gsl_error(82393,82381,181,11);
   $$041$i = 11;
  } else {
   $$041$i = 0;
  }
  $$058 = $$041$i;$60 = $48;$65 = $57;
 }
 $59 = 1.0 - $60;
 HEAPF64[$2>>3] = $59;
 $61 = ((($2)) + 8|0);
 $62 = (+Math_abs((+$59)));
 $63 = $62 * 4.4408920985006262E-16;
 $64 = $65 + $63;
 HEAPF64[$61>>3] = $64;
 $$0 = $$058;
 STACKTOP = sp;return ($$0|0);
}
function _gsl_sf_gamma_inc_P($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (_gsl_sf_gamma_inc_P_e($0,$1,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _gsl_error(82520,82381,710,$3);
 }
 $5 = +HEAPF64[$2>>3];
 STACKTOP = sp;return (+$5);
}
function _gsl_sf_hyperg_1F1_int_e($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$037$lcssa$i$i = 0.0, $$037$lcssa$i25$i = 0.0, $$03743$i$i = 0.0, $$03743$i23$i = 0.0, $$03942$i$i = 0, $$03942$i24$i = 0, $$3$i27$i = 0, $$sroa$0$0$i = 0.0, $$sroa$6$0$i = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0;
 var $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0;
 var $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0;
 var $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = $2 == 0.0;
 if ($5) {
  HEAPF64[$3>>3] = 1.0;
  $6 = ((($3)) + 8|0);
  HEAPF64[$6>>3] = 0.0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ($1|0)==($0|0);
 if ($7) {
  $8 = (_gsl_sf_exp_e($2,$3)|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($1|0)==(0);
 if ($9) {
  HEAPF64[$3>>3] = nan;
  $10 = ((($3)) + 8|0);
  HEAPF64[$10>>3] = nan;
  _gsl_error(82896,82556,1803,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($0|0)==(0);
 if ($11) {
  HEAPF64[$3>>3] = 1.0;
  $12 = ((($3)) + 8|0);
  HEAPF64[$12>>3] = 0.0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($1|0)<(0);
 if ($13) {
  $14 = ($1|0)>($0|0);
  $15 = ($0|0)>(0);
  $or$cond = $15 | $14;
  if ($or$cond) {
   HEAPF64[$3>>3] = nan;
   $16 = ((($3)) + 8|0);
   HEAPF64[$16>>3] = nan;
   _gsl_error(82896,82556,1812,1);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = $2 > 100.0;
 if ($17) {
  $18 = (($1) - ($0))|0;
  $19 = (+($18|0));
  $20 = (+Math_abs((+$19)));
  $21 = $20 < 1.0;
  $22 = $21 ? 1.0 : $20;
  $23 = (1 - ($0))|0;
  $24 = (+($23|0));
  $25 = (+Math_abs((+$24)));
  $26 = $25 < 1.0;
  $27 = $26 ? 1.0 : $25;
  $28 = $27 * $22;
  $29 = $2 * 0.5;
  $30 = $28 < $29;
  if ($30) {
   $31 = (+($0|0));
   $32 = (+($1|0));
   $33 = (_hyperg_1F1_asymp_posx($31,$32,$2,$3)|0);
   $$0 = $33;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $34 = $2 < -100.0;
 if ($34) {
  $35 = (+($0|0));
  $36 = (+Math_abs((+$35)));
  $37 = $36 < 1.0;
  $38 = $37 ? 1.0 : $36;
  $39 = (($0) + 1)|0;
  $40 = (($39) - ($1))|0;
  $41 = (+($40|0));
  $42 = (+Math_abs((+$41)));
  $43 = $42 < 1.0;
  $44 = $43 ? 1.0 : $42;
  $45 = $38 * $44;
  $46 = (+Math_abs((+$2)));
  $47 = $46 * 0.5;
  $48 = $45 < $47;
  if ($48) {
   $49 = (+($1|0));
   $50 = (_hyperg_1F1_asymp_negx($35,$49,$2,$3)|0);
   $$0 = $50;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $51 = $1 & $0;
 $52 = ($51|0)<(0);
 if (!($52)) {
  $117 = ($0|0)<(0);
  $118 = ($1|0)>(0);
  $or$cond5 = $117 & $118;
  if ($or$cond5) {
   $119 = (($1) - ($0))|0;
   $120 = - $2;
   $121 = (_hyperg_1F1_ab_posint($119,$1,$120,$4)|0);
   $122 = (+Math_abs((+$2)));
   $123 = $122 * 2.2204460492503131E-16;
   $124 = +HEAPF64[$4>>3];
   $125 = ((($4)) + 8|0);
   $126 = +HEAPF64[$125>>3];
   $127 = (_gsl_sf_exp_mult_err_e($2,$123,$124,$126,$3)|0);
   $128 = ($127|0)==(0);
   $$ = $128 ? $121 : $127;
   $$0 = $$;
   STACKTOP = sp;return ($$0|0);
  } else {
   $129 = (_hyperg_1F1_ab_posint($0,$1,$2,$3)|0);
   $$0 = $129;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $53 = $2 > 0.0;
 if ($53) {
  $54 = (+($1|0));
  $55 = (0 - ($0))|0;
  $56 = ($0|0)<(0);
  L42: do {
   if ($56) {
    $57 = $0 ^ -1;
    $$03743$i$i = 1.0;$$03942$i$i = $57;
    while(1) {
     $58 = (($$03942$i$i) + ($0))|0;
     $59 = (+($58|0));
     $60 = (+($$03942$i$i|0));
     $61 = $54 + $60;
     $62 = $59 / $61;
     $63 = (($$03942$i$i) + 1)|0;
     $64 = (+($63|0));
     $65 = $2 / $64;
     $66 = $62 * $65;
     $67 = 1.0 / $$03743$i$i;
     $68 = $67 + $66;
     $69 = 1.6179238213760842E+308 / $$03743$i$i;
     $70 = $68 > $69;
     if ($70) {
      break;
     }
     $72 = $$03743$i$i * $68;
     $73 = (($$03942$i$i) + -1)|0;
     $74 = ($$03942$i$i|0)>(0);
     if ($74) {
      $$03743$i$i = $72;$$03942$i$i = $73;
     } else {
      $$037$lcssa$i$i = $72;
      break L42;
     }
    }
    HEAPF64[$3>>3] = inf;
    $71 = ((($3)) + 8|0);
    HEAPF64[$71>>3] = inf;
    _gsl_error(82926,82556,1198,16);
    $$0 = 16;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$037$lcssa$i$i = 1.0;
   }
  } while(0);
  HEAPF64[$3>>3] = $$037$lcssa$i$i;
  $75 = (+($55|0));
  $76 = (+Math_sqrt((+$75)));
  $77 = $76 + 1.0;
  $78 = $77 * 2.0;
  $79 = $78 * 2.2204460492503131E-16;
  $80 = (+Math_abs((+$$037$lcssa$i$i)));
  $81 = $79 * $80;
  $82 = ((($3)) + 8|0);
  HEAPF64[$82>>3] = $81;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $83 = (($1) - ($0))|0;
 $84 = (+($1|0));
 $85 = - $2;
 $86 = ($83|0)==(0);
 L52: do {
  if ($86) {
   $$3$i27$i = 0;$$sroa$0$0$i = 1.0;$$sroa$6$0$i = 1.0;
  } else {
   $87 = (0 - ($83))|0;
   $88 = ($83|0)<(0);
   L54: do {
    if ($88) {
     $89 = $83 ^ -1;
     $$03743$i23$i = 1.0;$$03942$i24$i = $89;
     while(1) {
      $90 = (($$03942$i24$i) + ($83))|0;
      $91 = (+($90|0));
      $92 = (+($$03942$i24$i|0));
      $93 = $84 + $92;
      $94 = $91 / $93;
      $95 = (($$03942$i24$i) + 1)|0;
      $96 = (+($95|0));
      $97 = $85 / $96;
      $98 = $94 * $97;
      $99 = 1.0 / $$03743$i23$i;
      $100 = $99 + $98;
      $101 = 1.6179238213760842E+308 / $$03743$i23$i;
      $102 = $100 > $101;
      if ($102) {
       break;
      }
      $103 = $$03743$i23$i * $100;
      $104 = (($$03942$i24$i) + -1)|0;
      $105 = ($$03942$i24$i|0)>(0);
      if ($105) {
       $$03743$i23$i = $103;$$03942$i24$i = $104;
      } else {
       $$037$lcssa$i25$i = $103;
       break L54;
      }
     }
     _gsl_error(82926,82556,1198,16);
     $$3$i27$i = 16;$$sroa$0$0$i = inf;$$sroa$6$0$i = inf;
     break L52;
    } else {
     $$037$lcssa$i25$i = 1.0;
    }
   } while(0);
   $106 = (+($87|0));
   $107 = (+Math_sqrt((+$106)));
   $108 = $107 + 1.0;
   $109 = $108 * 2.0;
   $110 = $109 * 2.2204460492503131E-16;
   $111 = (+Math_abs((+$$037$lcssa$i25$i)));
   $112 = $110 * $111;
   $$3$i27$i = 0;$$sroa$0$0$i = $$037$lcssa$i25$i;$$sroa$6$0$i = $112;
  }
 } while(0);
 $113 = (+Math_abs((+$2)));
 $114 = $113 * 4.4408920985006262E-16;
 $115 = (_gsl_sf_exp_mult_err_e($2,$114,$$sroa$0$0$i,$$sroa$6$0$i,$3)|0);
 $116 = ($115|0)==(0);
 $$$i = $116 ? $$3$i27$i : $115;
 $$0 = $$$i;
 STACKTOP = sp;return ($$0|0);
}
function _hyperg_1F1_asymp_posx($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = (_gsl_sf_lngamma_sgn_e($1,$4,$6)|0);
 $10 = (_gsl_sf_lngamma_sgn_e($0,$5,$7)|0);
 $11 = $10 | $9;
 $12 = ($11|0)==(0);
 if (!($12)) {
  HEAPF64[$3>>3] = nan;
  $53 = ((($3)) + 8|0);
  HEAPF64[$53>>3] = nan;
  _gsl_error(82896,82556,118,1);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $13 = $1 - $0;
 $14 = 1.0 - $0;
 $15 = 1.0 / $2;
 $16 = (_gsl_sf_hyperg_2F0_series_e($13,$14,$15,-1,$8)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = +HEAPF64[$8>>3];
  $19 = $18 != 0.0;
  if ($19) {
   $20 = (+Math_log((+$2)));
   $21 = $0 - $1;
   $22 = $21 * $20;
   $23 = (+Math_abs((+$0)));
   $24 = (+Math_abs((+$1)));
   $25 = $23 + $24;
   $26 = $25 * 4.4408920985006262E-16;
   $27 = (+Math_abs((+$20)));
   $28 = $26 * $27;
   $29 = (+Math_abs((+$21)));
   $30 = $29 * 4.4408920985006262E-16;
   $31 = $30 + $28;
   $32 = +HEAPF64[$4>>3];
   $33 = +HEAPF64[$5>>3];
   $34 = $32 - $33;
   $35 = $22 + $34;
   $36 = $35 + $2;
   $37 = ((($4)) + 8|0);
   $38 = +HEAPF64[$37>>3];
   $39 = ((($5)) + 8|0);
   $40 = +HEAPF64[$39>>3];
   $41 = $38 + $40;
   $42 = $31 + $41;
   $43 = (+Math_abs((+$2)));
   $44 = $43 * 4.4408920985006262E-16;
   $45 = $44 + $42;
   $46 = +HEAPF64[$7>>3];
   $47 = +HEAPF64[$6>>3];
   $48 = $46 * $47;
   $49 = $18 * $48;
   $50 = ((($8)) + 8|0);
   $51 = +HEAPF64[$50>>3];
   $52 = (_gsl_sf_exp_mult_err_e($36,$45,$49,$51,$3)|0);
   $$0 = $52;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
  $$0 = $16;
 }
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _hyperg_1F1_asymp_negx($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = (_gsl_sf_lngamma_sgn_e($1,$4,$6)|0);
 $10 = $1 - $0;
 $11 = (_gsl_sf_lngamma_sgn_e($10,$5,$7)|0);
 $12 = $11 | $9;
 $13 = ($12|0)==(0);
 if (!($13)) {
  HEAPF64[$3>>3] = nan;
  $45 = ((($3)) + 8|0);
  HEAPF64[$45>>3] = nan;
  _gsl_error(82896,82556,75,1);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = $0 + 1.0;
 $15 = $14 - $1;
 $16 = -1.0 / $2;
 $17 = (_gsl_sf_hyperg_2F0_series_e($0,$15,$16,-1,$8)|0);
 $18 = +HEAPF64[$8>>3];
 $19 = $18 != 0.0;
 if ($19) {
  $20 = - $2;
  $21 = (+Math_log((+$20)));
  $22 = $21 * $0;
  $23 = (+Math_abs((+$0)));
  $24 = (+Math_abs((+$22)));
  $25 = $23 + $24;
  $26 = $25 * 4.4408920985006262E-16;
  $27 = +HEAPF64[$4>>3];
  $28 = +HEAPF64[$5>>3];
  $29 = $27 - $28;
  $30 = $29 - $22;
  $31 = ((($4)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = ((($5)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $32 + $34;
  $36 = $26 + $35;
  $37 = +HEAPF64[$7>>3];
  $38 = +HEAPF64[$6>>3];
  $39 = $37 * $38;
  $40 = $18 * $39;
  $41 = ((($8)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  $43 = (_gsl_sf_exp_mult_err_e($30,$36,$40,$42,$3)|0);
  $44 = ($43|0)==(0);
  $$ = $44 ? $17 : $43;
  $$0 = $$;
 } else {
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
  $$0 = $17;
 }
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _hyperg_1F1_ab_posint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0409$lcssa = 0.0, $$0409462 = 0.0, $$0410$lcssa = 0.0, $$0410461 = 0.0, $$0410461$phi = 0.0, $$0411 = 0, $$0411$in460 = 0, $$0411$in460$phi = 0, $$0411459 = 0, $$0411463 = 0, $$0412494 = 0.0, $$0412494$phi = 0.0, $$0413454 = 0.0, $$0415453 = 0.0, $$0415453$phi = 0.0, $$0416$lcssa = 0.0, $$0416493 = 0.0;
 var $$0417492 = 0, $$0418452 = 0.0, $$0418452$phi = 0.0, $$0419$lcssa = 0.0, $$0419451 = 0.0, $$0420 = 0, $$0420$in472 = 0, $$0420$in472$phi = 0, $$0420469 = 0, $$0420473 = 0, $$0421450 = 0, $$0422$lcssa = 0.0, $$0422471 = 0.0, $$0423470 = 0.0, $$0423470$phi = 0.0, $$0424480 = 0, $$0425487 = 0, $$0426479 = 0.0, $$0426479$phi = 0.0, $$0427$lcssa = 0.0;
 var $$0427486 = 0.0, $$0428485 = 0.0, $$0428485$phi = 0.0, $$0429$lcssa = 0.0, $$0429478 = 0.0, $$04353$i = 0, $$04353$i434 = 0, $$0445 = 0.0, $$04452$i = 0.0, $$04452$i435 = 0.0, $$0446 = 0.0, $$04551$i = 0.0, $$04551$i436 = 0.0, $$04650$i = 0.0, $$04650$i437 = 0.0, $$1$i = 0, $$1$i439 = 0, $$1$i514 = 0, $$1414 = 0.0, $$1455 = 0;
 var $$431 = 0, $$pn = 0.0, $$pre = 0.0, $$pre$phi513Z2D = 0.0, $$pre$phiZ2D = 0.0, $$pre512 = 0.0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0;
 var $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0;
 var $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0;
 var $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0;
 var $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0;
 var $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0;
 var $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0;
 var $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0;
 var $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0;
 var $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0;
 var $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0.0;
 var $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0;
 var $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0;
 var $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond508 = 0, $exitcond509 = 0, $exitcond510 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond430 = 0, $or$cond433 = 0, $or$cond5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 96|0;
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp + 48|0;
 $8 = sp + 32|0;
 $9 = sp + 16|0;
 $10 = sp;
 $11 = (+Math_abs((+$2)));
 $12 = ($1|0)==($0|0);
 if ($12) {
  $13 = (_gsl_sf_exp_e($2,$3)|0);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($0|0)==(1);
 if ($14) {
  $15 = (($1) + -1)|0;
  $16 = (_gsl_sf_exprel_n_e($15,$2,$3)|0);
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($0) + 1)|0;
 $18 = ($17|0)==($1|0);
 if ($18) {
  $19 = - $2;
  $20 = (_gsl_sf_exprel_n_e($0,$19,$6)|0);
  $21 = $11 * 4.4408920985006262E-16;
  $22 = +HEAPF64[$6>>3];
  $23 = ((($6)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = (_gsl_sf_exp_mult_err_e($2,$21,$22,$24,$3)|0);
  $26 = ($25|0)==(0);
  $$ = $26 ? $20 : $25;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($1) + 1)|0;
 $28 = ($27|0)==($0|0);
 if ($28) {
  $29 = (_gsl_sf_exp_e($2,$7)|0);
  $30 = +HEAPF64[$7>>3];
  $31 = (+($1|0));
  $32 = $2 / $31;
  $33 = $32 + 1.0;
  $34 = $33 * $30;
  HEAPF64[$3>>3] = $34;
  $35 = ((($7)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $33 * $36;
  $38 = ((($3)) + 8|0);
  $39 = $30 * 2.2204460492503131E-16;
  $40 = (+Math_abs((+$32)));
  $41 = $40 + 1.0;
  $42 = $41 * $39;
  $43 = $42 + $37;
  $44 = (+Math_abs((+$34)));
  $45 = $44 * 4.4408920985006262E-16;
  $46 = $45 + $43;
  HEAPF64[$38>>3] = $46;
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = (($1) + 2)|0;
 $48 = ($47|0)==($0|0);
 if ($48) {
  $49 = (_gsl_sf_exp_e($2,$8)|0);
  $50 = (+($1|0));
  $51 = $2 / $50;
  $52 = $50 + 1.0;
  $53 = $2 / $52;
  $54 = $53 + 2.0;
  $55 = $51 * $54;
  $56 = $55 + 1.0;
  $57 = +HEAPF64[$8>>3];
  $58 = $56 * $57;
  HEAPF64[$3>>3] = $58;
  $59 = ((($8)) + 8|0);
  $60 = +HEAPF64[$59>>3];
  $61 = (+Math_abs((+$56)));
  $62 = $61 * $60;
  $63 = ((($3)) + 8|0);
  $64 = $57 * 2.2204460492503131E-16;
  $65 = (+Math_abs((+$51)));
  $66 = (+Math_abs((+$53)));
  $67 = $66 + 2.0;
  $68 = $65 * $67;
  $69 = $68 + 1.0;
  $70 = $69 * $64;
  $71 = $70 + $62;
  $72 = (+Math_abs((+$58)));
  $73 = $72 * 4.4408920985006262E-16;
  $74 = $73 + $71;
  HEAPF64[$63>>3] = $74;
  $$0 = $49;
  STACKTOP = sp;return ($$0|0);
 }
 $75 = $0 << 1;
 $76 = ($75|0)==($1|0);
 if ($76) {
  $77 = (+($0|0));
  $78 = $2 == 0.0;
  if ($78) {
   HEAPF64[$3>>3] = 1.0;
   $79 = ((($3)) + 8|0);
   HEAPF64[$79>>3] = 0.0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $80 = $77 + -0.5;
   $81 = $11 * 0.5;
   $82 = (_gsl_sf_bessel_Inu_scaled_e($80,$81,$4)|0);
   $83 = $77 + 0.5;
   $84 = (_gsl_sf_lngamma_e($83,$5)|0);
   $85 = 0.5 - $77;
   $86 = $11 * 0.25;
   $87 = (+Math_log((+$86)));
   $88 = $85 * $87;
   $89 = +HEAPF64[$5>>3];
   $90 = $2 > 0.0;
   $91 = $90 ? $2 : 0.0;
   $92 = $91 + $89;
   $93 = $88 + $92;
   $94 = ((($5)) + 8|0);
   $95 = +HEAPF64[$94>>3];
   $96 = (+Math_abs((+$88)));
   $97 = $11 + $96;
   $98 = $97 * 2.2204460492503131E-16;
   $99 = $98 + $95;
   $100 = +HEAPF64[$4>>3];
   $101 = ((($4)) + 8|0);
   $102 = +HEAPF64[$101>>3];
   $103 = (_gsl_sf_exp_mult_err_e($93,$99,$100,$102,$3)|0);
   $104 = ($103|0)==(0);
   $105 = ($84|0)==(0);
   $$$i = $105 ? $82 : $84;
   $106 = $104 ? $$$i : $103;
   $$0 = $106;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $107 = ($1|0)<(10);
 $108 = ($0|0)<(10);
 $or$cond = $108 & $107;
 $109 = $11 < 5.0;
 $or$cond3 = $or$cond & $109;
 if ($or$cond3) {
  $$pre = (+($0|0));
  $$pre512 = (+($1|0));
  $$pre$phi513Z2D = $$pre512;$$pre$phiZ2D = $$pre;
 } else {
  $110 = (+($1|0));
  $111 = (+($0|0));
  $112 = $11 * $111;
  $113 = $112 < $110;
  if ($113) {
   $$pre$phi513Z2D = $110;$$pre$phiZ2D = $111;
  } else {
   $114 = ($1|0)>($0|0);
   $or$cond5 = $114 & $109;
   if ($or$cond5) {
    $$pre$phi513Z2D = $110;$$pre$phiZ2D = $111;
   } else {
    if ($114) {
     $116 = (+($75|0));
     $117 = $116 + $2;
     $118 = !($117 <= $110);
     if (!($118)) {
      $119 = ($0|0)==(0);
      if ($119) {
       $$0416$lcssa = 1.4916681462400413E-154;$$1$i514 = 0;
      } else {
       $120 = $110 - $2;
       $$04353$i = 1;$$04452$i = 0.0;$$04551$i = 1.0;$$04650$i = 1.0;
       while(1) {
        $121 = (+($$04353$i|0));
        $122 = $111 + $121;
        $123 = $122 * $2;
        $124 = $120 + $121;
        $125 = $124 + -1.0;
        $126 = $124 * $125;
        $127 = $123 / $126;
        $128 = $$04452$i + 1.0;
        $129 = $128 * $127;
        $130 = - $129;
        $131 = $129 + 1.0;
        $132 = $130 / $131;
        $133 = $$04551$i * $132;
        $134 = $$04650$i + $133;
        $135 = $133 / $134;
        $136 = (+Math_abs((+$135)));
        $137 = !($136 < 4.4408920985006262E-16);
        if (!($137)) {
         $$1$i = 0;
         break;
        }
        $138 = (($$04353$i) + 1)|0;
        $139 = ($138>>>0)<(5000);
        if ($139) {
         $$04353$i = $138;$$04452$i = $132;$$04551$i = $133;$$04650$i = $134;
        } else {
         label = 26;
         break;
        }
       }
       if ((label|0) == 26) {
        _gsl_error(82813,82556,580,11);
        $$1$i = 11;
       }
       $140 = ($0|0)>(0);
       if ($140) {
        $$pn = $111 / $120;
        $$0446 = $$pn * $134;
        $141 = $2 / $111;
        $142 = $141 * $$0446;
        $143 = $142 + 1.0;
        $144 = $143 * 1.4916681462400413E-154;
        $$0412494 = $144;$$0416493 = 1.4916681462400413E-154;$$0417492 = $0;
        while(1) {
         $145 = (+($$0417492|0));
         $146 = $$0412494 * $145;
         $147 = $$0417492 << 1;
         $148 = (($147) - ($1))|0;
         $149 = (+($148|0));
         $150 = $149 + $2;
         $151 = $$0416493 * $150;
         $152 = $146 - $151;
         $153 = (($1) - ($$0417492))|0;
         $154 = (+($153|0));
         $155 = $152 / $154;
         $156 = (($$0417492) + -1)|0;
         $157 = ($$0417492|0)>(1);
         if ($157) {
          $$0412494$phi = $$0416493;$$0416493 = $155;$$0417492 = $156;$$0412494 = $$0412494$phi;
         } else {
          $$0416$lcssa = $155;$$1$i514 = $$1$i;
          break;
         }
        }
       } else {
        $$0416$lcssa = 1.4916681462400413E-154;$$1$i514 = $$1$i;
       }
      }
      $158 = 1.4916681462400413E-154 / $$0416$lcssa;
      HEAPF64[$3>>3] = $158;
      $159 = (+Math_abs((+$111)));
      $160 = $159 + 1.0;
      $161 = $160 * 4.4408920985006262E-16;
      $162 = (+Math_abs((+$158)));
      $163 = $161 * $162;
      $164 = ((($3)) + 8|0);
      HEAPF64[$164>>3] = $163;
      $$0 = $$1$i514;
      STACKTOP = sp;return ($$0|0);
     }
     $165 = $117 > $110;
     $166 = $110 > $2;
     $or$cond430 = $166 & $165;
     if ($or$cond430) {
      $167 = ($0|0)==(0);
      do {
       if ($167) {
        $$0445 = 0.0;$$1$i439 = 0;
       } else {
        $168 = $110 - $2;
        $$04353$i434 = 1;$$04452$i435 = 0.0;$$04551$i436 = 1.0;$$04650$i437 = 1.0;
        while(1) {
         $169 = (+($$04353$i434|0));
         $170 = $111 + $169;
         $171 = $170 * $2;
         $172 = $168 + $169;
         $173 = $172 + -1.0;
         $174 = $172 * $173;
         $175 = $171 / $174;
         $176 = $$04452$i435 + 1.0;
         $177 = $176 * $175;
         $178 = - $177;
         $179 = $177 + 1.0;
         $180 = $178 / $179;
         $181 = $$04551$i436 * $180;
         $182 = $$04650$i437 + $181;
         $183 = $181 / $182;
         $184 = (+Math_abs((+$183)));
         $185 = !($184 < 4.4408920985006262E-16);
         if (!($185)) {
          label = 35;
          break;
         }
         $188 = (($$04353$i434) + 1)|0;
         $189 = ($188>>>0)<(5000);
         if ($189) {
          $$04353$i434 = $188;$$04452$i435 = $180;$$04551$i436 = $181;$$04650$i437 = $182;
         } else {
          label = 37;
          break;
         }
        }
        if ((label|0) == 35) {
         $186 = $111 / $168;
         $187 = $186 * $182;
         $$0445 = $187;$$1$i439 = 0;
         break;
        }
        else if ((label|0) == 37) {
         $190 = $111 / $168;
         $191 = $190 * $182;
         _gsl_error(82813,82556,580,11);
         $$0445 = $191;$$1$i439 = 11;
         break;
        }
       }
      } while(0);
      $192 = $2 / $111;
      $193 = $192 * $$0445;
      $194 = $193 + 1.0;
      $195 = $194 * 1.4916681462400413E-154;
      $196 = ($17|0)<($1|0);
      if ($196) {
       $$0418452 = 1.4916681462400413E-154;$$0419451 = $195;$$0421450 = $17;
       while(1) {
        $197 = (($1) - ($$0421450))|0;
        $198 = (+($197|0));
        $199 = $$0418452 * $198;
        $200 = $$0421450 << 1;
        $201 = (($200) - ($1))|0;
        $202 = (+($201|0));
        $203 = $202 + $2;
        $204 = $$0419451 * $203;
        $205 = $199 + $204;
        $206 = (+($$0421450|0));
        $207 = $205 / $206;
        $208 = (($$0421450) + 1)|0;
        $exitcond = ($208|0)==($1|0);
        if ($exitcond) {
         $$0419$lcssa = $207;
         break;
        } else {
         $$0418452$phi = $$0419451;$$0419451 = $207;$$0421450 = $208;$$0418452 = $$0418452$phi;
        }
       }
      } else {
       $$0419$lcssa = $195;
      }
      $209 = (_gsl_sf_exp_e($2,$9)|0);
      $210 = +HEAPF64[$9>>3];
      $211 = $210 * 1.4916681462400413E-154;
      $212 = $211 / $$0419$lcssa;
      HEAPF64[$3>>3] = $212;
      $213 = ((($9)) + 8|0);
      $214 = +HEAPF64[$213>>3];
      $215 = 1.4916681462400413E-154 / $$0419$lcssa;
      $216 = (+Math_abs((+$215)));
      $217 = $216 * $214;
      $218 = ((($3)) + 8|0);
      $219 = (($1) - ($0))|0;
      $220 = (+($219|0));
      $221 = (+Math_abs((+$220)));
      $222 = $221 + 1.0;
      $223 = $222 * 8.8817841970012523E-16;
      $224 = (+Math_abs((+$212)));
      $225 = $223 * $224;
      $226 = $217 + $225;
      HEAPF64[$218>>3] = $226;
      $227 = ($209|0)==(0);
      $$431 = $227 ? $$1$i439 : $209;
      $$0 = $$431;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $228 = !($2 >= 0.0);
    if (!($228)) {
     $229 = ($1|0)<($0|0);
     if (!($229)) {
      $262 = (($1) + -1)|0;
      (_gsl_sf_exprel_n_e($262,$2,$10)|0);
      $263 = +HEAPF64[$10>>3];
      $264 = ($0|0)>(1);
      if ($264) {
       $$0425487 = 1;$$0427486 = $263;$$0428485 = 1.0;
       while(1) {
        $265 = (($1) - ($$0425487))|0;
        $266 = (+($265|0));
        $267 = $$0428485 * $266;
        $268 = $$0425487 << 1;
        $269 = (($268) - ($1))|0;
        $270 = (+($269|0));
        $271 = $270 + $2;
        $272 = $$0427486 * $271;
        $273 = $267 + $272;
        $274 = (+($$0425487|0));
        $275 = $273 / $274;
        $276 = (($$0425487) + 1)|0;
        $exitcond510 = ($276|0)==($0|0);
        if ($exitcond510) {
         $$0427$lcssa = $275;
         break;
        } else {
         $$0428485$phi = $$0427486;$$0425487 = $276;$$0427486 = $275;$$0428485 = $$0428485$phi;
        }
       }
      } else {
       $$0427$lcssa = $263;
      }
      HEAPF64[$3>>3] = $$0427$lcssa;
      $277 = (+Math_abs((+$$0427$lcssa)));
      $278 = (+Math_abs((+$111)));
      $279 = $278 + 1.0;
      $280 = $279 * $277;
      $281 = ((($10)) + 8|0);
      $282 = +HEAPF64[$281>>3];
      $283 = $282 / $263;
      $284 = (+Math_abs((+$283)));
      $285 = $280 * $284;
      $286 = ((($3)) + 8|0);
      $287 = $277 * 4.4408920985006262E-16;
      $288 = $287 + $285;
      HEAPF64[$286>>3] = $288;
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $230 = $2 / $110;
     $231 = (+Math_abs((+$230)));
     $232 = (+Math_log((+$231)));
     $233 = $232 + $2;
     $234 = $233 < 707.78271289338397;
     if (!($234)) {
      HEAPF64[$3>>3] = inf;
      $261 = ((($3)) + 8|0);
      HEAPF64[$261>>3] = inf;
      _gsl_error(82926,82556,1062,16);
      $$0 = 16;
      STACKTOP = sp;return ($$0|0);
     }
     $235 = (+Math_exp((+$2)));
     $236 = $230 + 1.0;
     $237 = $235 * $236;
     $238 = ($27|0)<($0|0);
     if ($238) {
      $$0424480 = $27;$$0426479 = $235;$$0429478 = $237;
      while(1) {
       $239 = (($1) - ($$0424480))|0;
       $240 = (+($239|0));
       $241 = $$0426479 * $240;
       $242 = $$0424480 << 1;
       $243 = (($242) - ($1))|0;
       $244 = (+($243|0));
       $245 = $244 + $2;
       $246 = $$0429478 * $245;
       $247 = $241 + $246;
       $248 = (+($$0424480|0));
       $249 = $247 / $248;
       $250 = (($$0424480) + 1)|0;
       $exitcond509 = ($250|0)==($0|0);
       if ($exitcond509) {
        $$0429$lcssa = $249;
        break;
       } else {
        $$0426479$phi = $$0429478;$$0424480 = $250;$$0429478 = $249;$$0426479 = $$0426479$phi;
       }
      }
     } else {
      $$0429$lcssa = $237;
     }
     HEAPF64[$3>>3] = $$0429$lcssa;
     $251 = $2 + 1.0;
     $252 = $251 * 2.2204460492503131E-16;
     $253 = (+Math_abs((+$$0429$lcssa)));
     $254 = $252 * $253;
     $255 = ((($3)) + 8|0);
     $256 = (($0) - ($1))|0;
     $257 = (+($256|0));
     $258 = (+Math_abs((+$257)));
     $259 = $258 + 1.0;
     $260 = $259 * $254;
     HEAPF64[$255>>3] = $260;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $289 = $110 - $2;
    $290 = $289 * 0.5;
    $291 = !($290 >= $111);
    $292 = - $2;
    $293 = !($111 >= $292);
    $or$cond433 = $293 & $291;
    if (!($or$cond433)) {
     $294 = (+Math_exp((+$2)));
     $295 = $111 + -1.0;
     $296 = $2 / $295;
     $297 = $296 + 1.0;
     $298 = $294 * $297;
     $$0420469 = (($0) + -1)|0;
     $299 = ($$0420469|0)>($1|0);
     if ($299) {
      $$0420$in472 = $0;$$0420473 = $$0420469;$$0422471 = $298;$$0423470 = $294;
      while(1) {
       $300 = (1 - ($$0420$in472))|0;
       $301 = (+($300|0));
       $302 = (2 - ($$0420$in472))|0;
       $303 = (+($302|0));
       $304 = $303 - $2;
       $305 = $304 * $301;
       $306 = $$0422471 * $305;
       $307 = (($$0420473) - ($0))|0;
       $308 = (+($307|0));
       $309 = $308 * $2;
       $310 = $$0423470 * $309;
       $311 = $306 - $310;
       $312 = (+($$0420473|0));
       $313 = $312 + -1.0;
       $314 = $313 * $312;
       $315 = $311 / $314;
       $$0420 = (($$0420473) + -1)|0;
       $316 = ($$0420|0)>($1|0);
       if ($316) {
        $$0423470$phi = $$0422471;$$0420$in472$phi = $$0420473;$$0420473 = $$0420;$$0422471 = $315;$$0423470 = $$0423470$phi;$$0420$in472 = $$0420$in472$phi;
       } else {
        $$0422$lcssa = $315;
        break;
       }
      }
     } else {
      $$0422$lcssa = $298;
     }
     HEAPF64[$3>>3] = $$0422$lcssa;
     $317 = $11 + 1.0;
     $318 = $317 * 2.2204460492503131E-16;
     $319 = (+Math_abs((+$$0422$lcssa)));
     $320 = $318 * $319;
     $321 = ((($3)) + 8|0);
     $322 = (($1) - ($0))|0;
     $323 = (+($322|0));
     $324 = (+Math_abs((+$323)));
     $325 = $324 + 1.0;
     $326 = $325 * $320;
     HEAPF64[$321>>3] = $326;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $327 = (+Math_ceil((+$290)));
    $328 = (~~(($327)));
    $329 = (+Math_exp((+$2)));
    $330 = (+($328|0));
    $331 = $330 + -1.0;
    $332 = $2 / $331;
    $333 = $332 + 1.0;
    $334 = $329 * $333;
    $$0411459 = (($328) + -1)|0;
    $335 = ($$0411459|0)>($1|0);
    if ($335) {
     $$0409462 = $334;$$0410461 = $329;$$0411$in460 = $328;$$0411463 = $$0411459;
     while(1) {
      $336 = (1 - ($$0411$in460))|0;
      $337 = (+($336|0));
      $338 = (2 - ($$0411$in460))|0;
      $339 = (+($338|0));
      $340 = $339 - $2;
      $341 = $340 * $337;
      $342 = $$0409462 * $341;
      $343 = (($$0411463) - ($328))|0;
      $344 = (+($343|0));
      $345 = $344 * $2;
      $346 = $$0410461 * $345;
      $347 = $342 - $346;
      $348 = (+($$0411463|0));
      $349 = $348 + -1.0;
      $350 = $349 * $348;
      $351 = $347 / $350;
      $$0411 = (($$0411463) + -1)|0;
      $352 = ($$0411|0)>($1|0);
      if ($352) {
       $$0411$in460$phi = $$0411463;$$0410461$phi = $$0409462;$$0409462 = $351;$$0411463 = $$0411;$$0411$in460 = $$0411$in460$phi;$$0410461 = $$0410461$phi;
      } else {
       $$0409$lcssa = $351;$$0410$lcssa = $$0409462;
       break;
      }
     }
    } else {
     $$0409$lcssa = $334;$$0410$lcssa = $329;
    }
    $353 = $330 + $2;
    $354 = $353 * $110;
    $355 = $354 * $$0409$lcssa;
    $356 = (($328) - ($1))|0;
    $357 = (+($356|0));
    $358 = $357 * $2;
    $359 = $358 * $$0410$lcssa;
    $360 = $359 + $355;
    $361 = Math_imul($328, $1)|0;
    $362 = (+($361|0));
    $363 = $360 / $362;
    $364 = ($328|0)<($0|0);
    if ($364) {
     $365 = (($328) + 1)|0;
     $366 = ($365|0)<($0|0);
     if ($366) {
      $$0413454 = $363;$$0415453 = $$0409$lcssa;$$1455 = $365;
      while(1) {
       $367 = (($1) - ($$1455))|0;
       $368 = (+($367|0));
       $369 = $$0415453 * $368;
       $370 = $$1455 << 1;
       $371 = (($370) - ($1))|0;
       $372 = (+($371|0));
       $373 = $372 + $2;
       $374 = $$0413454 * $373;
       $375 = $369 + $374;
       $376 = (+($$1455|0));
       $377 = $375 / $376;
       $378 = (($$1455) + 1)|0;
       $exitcond508 = ($378|0)==($0|0);
       if ($exitcond508) {
        $$1414 = $377;
        break;
       } else {
        $$0415453$phi = $$0413454;$$0413454 = $377;$$1455 = $378;$$0415453 = $$0415453$phi;
       }
      }
     } else {
      $$1414 = $363;
     }
    } else {
     $$1414 = $$0409$lcssa;
    }
    HEAPF64[$3>>3] = $$1414;
    $379 = $11 + 1.0;
    $380 = $379 * 2.2204460492503131E-16;
    $381 = (+Math_abs((+$$1414)));
    $382 = $380 * $381;
    $383 = ((($3)) + 8|0);
    $384 = (($1) - ($0))|0;
    $385 = (+($384|0));
    $386 = (+Math_abs((+$385)));
    $387 = $386 + 1.0;
    $388 = $387 * $382;
    HEAPF64[$383>>3] = $388;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $115 = (_gsl_sf_hyperg_1F1_series_e($$pre$phiZ2D,$$pre$phi513Z2D,$2,$3)|0);
 $$0 = $115;
 STACKTOP = sp;return ($$0|0);
}
function _gsl_sf_hyperg_1F1_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0210 = 0, $$0210$ = 0, $$037$lcssa$i = 0.0, $$03743$i = 0.0, $$03942$i = 0, $$1$i = 0, $$2$i = 0, $$214 = 0, $$216 = 0, $$217 = 0, $$218 = 0, $$not = 0, $$phi$trans$insert221 = 0, $$phi$trans$insert225$phi$trans$insert = 0, $$pre = 0.0, $$pre222 = 0.0, $$pre224 = 0.0;
 var $$pre224$pre = 0.0, $$pre226 = 0.0, $$pre226$pre = 0.0, $$sink$i = 0.0, $$sink73$i = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0;
 var $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0;
 var $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0;
 var $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0;
 var $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0;
 var $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond213 = 0, $or$cond215 = 0, $or$cond220 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select211 = 0, $spec$select219 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 144|0;
 $5 = sp + 128|0;
 $6 = sp + 112|0;
 $7 = sp + 96|0;
 $8 = sp + 80|0;
 $9 = sp + 64|0;
 $10 = sp + 48|0;
 $11 = sp + 32|0;
 $12 = sp + 16|0;
 $13 = sp;
 $14 = $1 - $0;
 $15 = $0 + 0.5;
 $16 = (+Math_floor((+$15)));
 $17 = $1 + 0.5;
 $18 = (+Math_floor((+$17)));
 $19 = $14 + 0.5;
 $20 = (+Math_floor((+$19)));
 $21 = $0 - $16;
 $22 = (+Math_abs((+$21)));
 $23 = $22 < 2.2204460492503131E-14;
 $24 = $16 > -2147483648.0;
 $or$cond = $24 & $23;
 $25 = $16 < 2147483647.0;
 $spec$select = $25 & $or$cond;
 $26 = $1 - $18;
 $27 = (+Math_abs((+$26)));
 $28 = $27 < 2.2204460492503131E-14;
 $29 = $18 > -2147483648.0;
 $or$cond3 = $29 & $28;
 $30 = $18 < 2147483647.0;
 $spec$select219 = $30 & $or$cond3;
 $31 = $14 - $20;
 $32 = (+Math_abs((+$31)));
 $33 = $32 < 2.2204460492503131E-14;
 $34 = $20 > -2147483648.0;
 $or$cond5 = $34 & $33;
 $35 = $20 < 2147483647.0;
 $spec$select211 = $35 & $or$cond5;
 $36 = $1 < -0.10000000000000001;
 $37 = $36 & $spec$select219;
 $38 = $0 < -0.10000000000000001;
 $39 = $38 & $spec$select;
 $40 = $14 < -0.10000000000000001;
 $41 = $40 & $spec$select211;
 $42 = $2 == 0.0;
 if ($42) {
  HEAPF64[$3>>3] = 1.0;
  $43 = ((($3)) + 8|0);
  HEAPF64[$43>>3] = 0.0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = $1 == 0.0;
 if ($44) {
  HEAPF64[$3>>3] = nan;
  $45 = ((($3)) + 8|0);
  HEAPF64[$45>>3] = nan;
  _gsl_error(82896,82556,1871,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = $0 == 0.0;
 if ($46) {
  HEAPF64[$3>>3] = 1.0;
  $47 = ((($3)) + 8|0);
  HEAPF64[$47>>3] = 0.0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = $0 == $1;
 if ($48) {
  $49 = (_gsl_sf_exp_e($2,$3)|0);
  $$0 = $49;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (+Math_abs((+$1)));
 $51 = $50 < 2.2204460492503131E-14;
 $52 = (+Math_abs((+$0)));
 $53 = $52 < 2.2204460492503131E-14;
 $or$cond213 = $53 & $51;
 if ($or$cond213) {
  $54 = (_gsl_sf_expm1_e($2,$7)|0);
  $55 = $0 > 0.0;
  $56 = $55 ? 1.0 : -1.0;
  $57 = $1 > 0.0;
  $58 = $57 ? 1.0 : -1.0;
  $59 = $0 / $1;
  $60 = (+Math_abs((+$59)));
  $61 = (+Math_log((+$60)));
  $62 = (+Math_abs((+$61)));
  $63 = $62 * 2.2204460492503131E-16;
  $64 = $56 * $58;
  $65 = +HEAPF64[$7>>3];
  $66 = $64 * $65;
  $67 = ((($7)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = (_gsl_sf_exp_mult_err_e($61,$63,$66,$68,$8)|0);
  $70 = +HEAPF64[$8>>3];
  $71 = $70 == 1.7976931348623157E+308;
  $72 = $70 + 1.0;
  $73 = $71 ? $70 : $72;
  HEAPF64[$3>>3] = $73;
  $74 = ((($8)) + 8|0);
  $75 = +HEAPF64[$74>>3];
  $76 = ((($3)) + 8|0);
  HEAPF64[$76>>3] = $75;
  $77 = ($69|0)==(0);
  $$ = $77 ? $54 : $69;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 if ($51) {
  $78 = $0 * $2;
  $79 = (+Math_abs((+$78)));
  $80 = $79 < 1.0;
  if ($80) {
   $81 = $1 * 0.5;
   $82 = 1.0 / $81;
   $83 = $78 > 0.0;
   do {
    if ($83) {
     $84 = (+Math_sqrt((+$78)));
     $85 = $84 * 2.0;
     $86 = (_gsl_sf_bessel_I1_scaled_e($85,$4)|0);
     $87 = +HEAPF64[$4>>3];
     $88 = !($87 <= 0.0);
     if ($88) {
      $91 = $0 * 0.66666666666666663;
      $92 = $0 * 4.0;
      $93 = $2 / $92;
      $94 = (+Math_pow((+$93),1.5));
      $95 = $91 * $94;
      $96 = (+_gsl_sf_bessel_In_scaled(2,$85));
      $97 = $95 * $96;
      $98 = $2 * 0.5;
      $99 = (+Math_log((+$78)));
      $100 = $99 * 0.5;
      $101 = $98 + $100;
      $102 = (+Math_abs((+$85)));
      $103 = $101 + $102;
      $104 = +HEAPF64[$4>>3];
      $105 = $104 + $97;
      $106 = (+Math_log((+$105)));
      $107 = $103 + $106;
      $108 = (+Math_abs((+$2)));
      $109 = $108 * 1.5;
      $110 = $109 + 1.0;
      $111 = $110 * 2.2204460492503131E-16;
      $112 = ((($4)) + 8|0);
      $113 = +HEAPF64[$112>>3];
      $114 = $97 + $113;
      $115 = $114 / $104;
      $116 = (+Math_abs((+$115)));
      $117 = $111 + $116;
      $118 = (_gsl_sf_exp_err_e($107,$117,$9)|0);
      $$pre224$pre = +HEAPF64[$9>>3];
      $$phi$trans$insert225$phi$trans$insert = ((($9)) + 8|0);
      $$pre226$pre = +HEAPF64[$$phi$trans$insert225$phi$trans$insert>>3];
      $$0$i = $118;$$pre224 = $$pre224$pre;$$pre226 = $$pre226$pre;
     } else {
      $89 = ($86|0)==(0);
      $90 = $89 ? 1 : $86;
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
      $$0$i = $90;$$pre224 = 0.0;$$pre226 = 0.0;
     }
     $$2$i = $$0$i;$152 = $$pre224;$154 = $$pre226;
    } else {
     $119 = $78 == 0.0;
     if ($119) {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
      $$2$i = 0;$152 = 0.0;$154 = 0.0;
      break;
     }
     $120 = - $78;
     $121 = (+Math_sqrt((+$120)));
     $122 = $121 * 2.0;
     $123 = (_gsl_sf_bessel_J1_e($122,$5)|0);
     $124 = +HEAPF64[$5>>3];
     $125 = !($124 <= 0.0);
     if ($125) {
      $128 = $2 * 0.5;
      $129 = (+Math_log((+$120)));
      $130 = $129 * 0.5;
      $131 = (+Math_abs((+$2)));
      $132 = (+Math_log((+$124)));
      $133 = $128 + $130;
      $134 = $131 + $133;
      $135 = $134 + $132;
      $136 = $131 * 1.5;
      $137 = $136 + 1.0;
      $138 = $137 * 2.2204460492503131E-16;
      $139 = ((($5)) + 8|0);
      $140 = +HEAPF64[$139>>3];
      $141 = $140 / $124;
      $142 = (+Math_abs((+$141)));
      $143 = $138 + $142;
      $144 = (_gsl_sf_exp_err_e($135,$143,$6)|0);
      $145 = +HEAPF64[$6>>3];
      $146 = - $145;
      $147 = ((($6)) + 8|0);
      $148 = +HEAPF64[$147>>3];
      $$1$i = $144;$$sink$i = $148;$$sink73$i = $146;
     } else {
      $126 = ($123|0)==(0);
      $127 = $126 ? 1 : $123;
      $$1$i = $127;$$sink$i = 0.0;$$sink73$i = 0.0;
     }
     HEAPF64[$9>>3] = $$sink73$i;
     $149 = ((($9)) + 8|0);
     HEAPF64[$149>>3] = $$sink$i;
     $$2$i = $$1$i;$152 = $$sink73$i;$154 = $$sink$i;
    }
   } while(0);
   $150 = $82 * 4.4408920985006262E-16;
   $151 = $152 * 0.5;
   $153 = $154 * 0.5;
   $155 = (_gsl_sf_multiply_err_e($82,$150,$151,$153,$3)|0);
   $156 = ($155|0)==(0);
   $$214 = $156 ? $$2$i : $155;
   $$0 = $$214;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $or$cond7 = $spec$select & $spec$select219;
 if ($or$cond7) {
  $157 = (~~(($16)));
  $158 = (~~(($18)));
  $159 = (_gsl_sf_hyperg_1F1_int_e($157,$158,$2,$3)|0);
  $$0 = $159;
  STACKTOP = sp;return ($$0|0);
 }
 $$not = $37 ^ 1;
 $160 = $0 > $1;
 $or$cond215 = $160 & $39;
 $or$cond220 = $or$cond215 | $$not;
 if (!($or$cond220)) {
  HEAPF64[$3>>3] = nan;
  $161 = ((($3)) + 8|0);
  HEAPF64[$161>>3] = nan;
  _gsl_error(82896,82556,1925,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 if ($39) {
  $162 = (~~(($16)));
  $163 = (_hyperg_1F1_a_negint_lag($162,$1,$2,$3)|0);
  $$0 = $163;
  STACKTOP = sp;return ($$0|0);
 }
 $164 = $1 > 0.0;
 if ($164) {
  $165 = $0 >= -1.0;
  $166 = $0 <= 1.0;
  $or$cond9 = $165 & $166;
  if ($or$cond9) {
   $167 = (_hyperg_1F1_small_a_bgt0($0,$1,$2,$3)|0);
   $$0 = $167;
   STACKTOP = sp;return ($$0|0);
  }
  if ($41) {
   $168 = (~~(($20)));
   $169 = - $2;
   $170 = (_hyperg_1F1_a_negint_lag($168,$1,$169,$10)|0);
   $171 = (+Math_abs((+$2)));
   $172 = $171 * 2.2204460492503131E-16;
   $173 = +HEAPF64[$10>>3];
   $174 = ((($10)) + 8|0);
   $175 = +HEAPF64[$174>>3];
   $176 = (_gsl_sf_exp_mult_err_e($2,$172,$173,$175,$3)|0);
   $177 = ($176|0)==(0);
   $$216 = $177 ? $170 : $176;
   $$0 = $$216;
   STACKTOP = sp;return ($$0|0);
  }
  $178 = $0 < 0.0;
  if ($178) {
   $179 = (+Math_abs((+$2)));
   $180 = $179 < 1419.5654257867679;
   if ($180) {
    $181 = - $2;
    $182 = (_hyperg_1F1_ab_pos($14,$1,$181,$11)|0);
    $183 = $179 * 2.2204460492503131E-16;
    $184 = +HEAPF64[$11>>3];
    $185 = ((($11)) + 8|0);
    $186 = +HEAPF64[$185>>3];
    $187 = (_gsl_sf_exp_mult_err_e($2,$183,$184,$186,$3)|0);
    $188 = ($187|0)==(0);
    $$217 = $188 ? $182 : $187;
    $$0 = $$217;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $189 = $0 > 0.0;
  if ($189) {
   $190 = (_hyperg_1F1_ab_pos($0,$1,$2,$3)|0);
   $$0 = $190;
   STACKTOP = sp;return ($$0|0);
  } else {
   $191 = (_gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3)|0);
   $$0 = $191;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $192 = $2 < 0.0;
 $or$cond11 = $192 & $41;
 if (!($or$cond11)) {
  $233 = $0 > 0.0;
  if ($233) {
   $234 = - $2;
   $235 = (_hyperg_1F1_ab_neg($14,$1,$234,$13)|0);
   $236 = (+Math_abs((+$2)));
   $237 = $236 * 2.2204460492503131E-16;
   $238 = +HEAPF64[$13>>3];
   $239 = ((($13)) + 8|0);
   $240 = +HEAPF64[$239>>3];
   $241 = (_gsl_sf_exp_mult_err_e($2,$237,$238,$240,$3)|0);
   $242 = ($241|0)==(0);
   $$218 = $242 ? $235 : $241;
   $$0 = $$218;
   STACKTOP = sp;return ($$0|0);
  } else {
   $243 = (_hyperg_1F1_ab_neg($0,$1,$2,$3)|0);
   $$0 = $243;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $193 = $0 < 0.0;
 $194 = (~~(($20)));
 $195 = - $2;
 L82: do {
  if ($193) {
   $196 = ($194|0)==(0);
   if ($196) {
    HEAPF64[$12>>3] = 1.0;
    $197 = ((($12)) + 8|0);
    HEAPF64[$197>>3] = 1.0;
    $$0210 = 0;$229 = 1.0;$230 = 1.0;
    break;
   }
   $198 = (0 - ($194))|0;
   $199 = ($194|0)<(0);
   L87: do {
    if ($199) {
     $200 = $194 ^ -1;
     $$03743$i = 1.0;$$03942$i = $200;
     while(1) {
      $201 = (($$03942$i) + ($194))|0;
      $202 = (+($201|0));
      $203 = (+($$03942$i|0));
      $204 = $203 + $1;
      $205 = $202 / $204;
      $206 = (($$03942$i) + 1)|0;
      $207 = (+($206|0));
      $208 = $195 / $207;
      $209 = $205 * $208;
      $210 = 1.0 / $$03743$i;
      $211 = $210 + $209;
      $212 = 1.6179238213760842E+308 / $$03743$i;
      $213 = $211 > $212;
      if ($213) {
       break;
      }
      $215 = $$03743$i * $211;
      $216 = (($$03942$i) + -1)|0;
      $217 = ($$03942$i|0)>(0);
      if ($217) {
       $$03743$i = $215;$$03942$i = $216;
      } else {
       $$037$lcssa$i = $215;
       break L87;
      }
     }
     HEAPF64[$12>>3] = inf;
     $214 = ((($12)) + 8|0);
     HEAPF64[$214>>3] = inf;
     _gsl_error(82926,82556,1198,16);
     $$0210 = 16;$229 = inf;$230 = inf;
     break L82;
    } else {
     $$037$lcssa$i = 1.0;
    }
   } while(0);
   HEAPF64[$12>>3] = $$037$lcssa$i;
   $218 = (+($198|0));
   $219 = (+Math_sqrt((+$218)));
   $220 = $219 + 1.0;
   $221 = $220 * 2.0;
   $222 = $221 * 2.2204460492503131E-16;
   $223 = (+Math_abs((+$$037$lcssa$i)));
   $224 = $222 * $223;
   $225 = ((($12)) + 8|0);
   HEAPF64[$225>>3] = $224;
   $$0210 = 0;$229 = $$037$lcssa$i;$230 = $224;
  } else {
   $226 = (_hyperg_1F1_a_negint_lag($194,$1,$195,$12)|0);
   $$pre = +HEAPF64[$12>>3];
   $$phi$trans$insert221 = ((($12)) + 8|0);
   $$pre222 = +HEAPF64[$$phi$trans$insert221>>3];
   $$0210 = $226;$229 = $$pre;$230 = $$pre222;
  }
 } while(0);
 $227 = (+Math_abs((+$2)));
 $228 = $227 * 2.2204460492503131E-16;
 $231 = (_gsl_sf_exp_mult_err_e($2,$228,$229,$230,$3)|0);
 $232 = ($231|0)==(0);
 $$0210$ = $232 ? $$0210 : $231;
 $$0 = $$0210$;
 STACKTOP = sp;return ($$0|0);
}
function _hyperg_1F1_a_negint_lag($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$81 = 0, $$82 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 96|0;
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp + 48|0;
 $8 = sp + 40|0;
 $9 = sp + 32|0;
 $10 = sp + 16|0;
 $11 = sp;
 $12 = (0 - ($0))|0;
 $13 = $1 + -1.0;
 $14 = (_gsl_sf_laguerre_n_e($12,$13,$2,$4)|0);
 $15 = $1 < 0.0;
 if ($15) {
  $16 = (_gsl_sf_lnfact_e($12,$5)|0);
  $17 = (+($12|0));
  $18 = $17 + $1;
  $19 = (_gsl_sf_lngamma_sgn_e($18,$6,$8)|0);
  $20 = (_gsl_sf_lngamma_sgn_e($1,$7,$9)|0);
  $21 = +HEAPF64[$5>>3];
  $22 = +HEAPF64[$6>>3];
  $23 = +HEAPF64[$7>>3];
  $24 = $22 - $23;
  $25 = $21 - $24;
  $26 = ((($5)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = ((($6)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $27 + $29;
  $31 = ((($7)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $30 + $32;
  $34 = (+Math_abs((+$25)));
  $35 = $34 * 4.4408920985006262E-16;
  $36 = $33 + $35;
  $37 = +HEAPF64[$8>>3];
  $38 = +HEAPF64[$9>>3];
  $39 = $37 * $38;
  $40 = +HEAPF64[$4>>3];
  $41 = $39 * $40;
  $42 = ((($4)) + 8|0);
  $43 = +HEAPF64[$42>>3];
  $44 = (_gsl_sf_exp_mult_err_e($25,$36,$41,$43,$3)|0);
  $45 = ($44|0)==(0);
  if ($45) {
   $46 = ($14|0)==(0);
   if ($46) {
    $47 = ($19|0)==(0);
    $48 = ($20|0)==(0);
    $$ = $48 ? $16 : $20;
    $spec$select = $47 ? $$ : $19;
    $83 = $spec$select;
   } else {
    $83 = $14;
   }
  } else {
   $83 = $44;
  }
  $$1 = $83;
  STACKTOP = sp;return ($$1|0);
 } else {
  $49 = (+($12|0));
  (_gsl_sf_lnbeta_e($1,$49,$10)|0);
  $50 = +HEAPF64[$10>>3];
  $51 = (+Math_abs((+$50)));
  $52 = $51 < 0.10000000000000001;
  if ($52) {
   $53 = $49 * 1.25;
   $54 = (+Math_log((+$53)));
   $55 = $54 * 4.4408920985006262E-16;
   $56 = (_gsl_sf_beta_e($1,$49,$11)|0);
   $57 = +HEAPF64[$4>>3];
   $58 = ((($4)) + 8|0);
   $59 = +HEAPF64[$58>>3];
   $60 = (_gsl_sf_exp_mult_err_e($54,$55,$57,$59,$3)|0);
   $61 = +HEAPF64[$11>>3];
   $62 = $61 / 1.25;
   $63 = +HEAPF64[$3>>3];
   $64 = $63 * $62;
   HEAPF64[$3>>3] = $64;
   $65 = ((($3)) + 8|0);
   $66 = +HEAPF64[$65>>3];
   $67 = $62 * $66;
   HEAPF64[$65>>3] = $67;
   $68 = ($60|0)==(0);
   $69 = ($14|0)==(0);
   $$81 = $69 ? $56 : $14;
   $70 = $68 ? $$81 : $60;
   $$0 = $70;
  } else {
   $71 = (+Math_log((+$49)));
   $72 = $71 + $50;
   $73 = ((($10)) + 8|0);
   $74 = +HEAPF64[$73>>3];
   $75 = (+Math_abs((+$71)));
   $76 = $75 * 4.4408920985006262E-16;
   $77 = $76 + $74;
   $78 = +HEAPF64[$4>>3];
   $79 = ((($4)) + 8|0);
   $80 = +HEAPF64[$79>>3];
   $81 = (_gsl_sf_exp_mult_err_e($72,$77,$78,$80,$3)|0);
   $82 = ($81|0)==(0);
   $$82 = $82 ? $14 : $81;
   $$0 = $$82;
  }
  $$1 = $$0;
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function _hyperg_1F1_small_a_bgt0($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$$i = 0, $$$i$i = 0, $$0 = 0, $$0145163 = 0.0, $$0146162 = 0.0, $$0146162$phi = 0.0, $$0147$lcssa = 0.0, $$0147161 = 0.0, $$0253$i$i = 0.0, $$0253$i89$i = 0.0, $$0253$i94$i = 0.0, $$0253$i99$i = 0.0, $$0262$i$i = 0.0, $$0262$i100$i = 0.0, $$0262$i90$i = 0.0, $$0262$i95$i = 0.0, $$0271$i$i = 0.0, $$0271$i101$i = 0.0, $$0271$i91$i = 0.0;
 var $$0271$i96$i = 0.0, $$04$i$i = 0.0, $$04$i88$i = 0.0, $$04$i93$i = 0.0, $$04$i98$i = 0.0, $$085120$i = 0.0, $$pre$i = 0.0, $$pre$phi$iZ2D = 0.0, $$sroa$0$0$lcssa$i = 0.0, $$sroa$0$0119$i = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0;
 var $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0;
 var $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0;
 var $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0;
 var $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0;
 var $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0;
 var $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0;
 var $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0;
 var $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0.0;
 var $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0;
 var $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0;
 var $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0;
 var $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0;
 var $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0;
 var $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0;
 var $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0;
 var $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0;
 var $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond$i = 0, $or$cond3 = 0, $or$cond3$i = 0;
 var $or$cond87$i = 0, $pow2$i = 0.0, $pow2$i$i = 0.0, $pow21$i = 0.0, $pow21$i$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $8 = $1 - $0;
 $9 = 1.0 - $0;
 $10 = $0 + 1.0;
 $11 = $10 - $1;
 $12 = (+Math_abs((+$8)));
 $13 = (+Math_abs((+$9)));
 $14 = (+Math_abs((+$11)));
 $15 = (+Math_abs((+$2)));
 $16 = $0 == 0.0;
 if ($16) {
  HEAPF64[$3>>3] = 1.0;
  $17 = ((($3)) + 8|0);
  HEAPF64[$17>>3] = 0.0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $0 == 1.0;
 $19 = $1 >= 1.0;
 $or$cond = $18 & $19;
 if (!($or$cond)) {
  $253 = $0 == -1.0;
  if ($253) {
   $254 = -1.0 / $1;
   $255 = $254 * $2;
   $256 = $255 + 1.0;
   HEAPF64[$3>>3] = $256;
   $257 = (+Math_abs((+$255)));
   $258 = $257 + 1.0;
   $259 = $258 * 2.2204460492503131E-16;
   $260 = ((($3)) + 8|0);
   $261 = (+Math_abs((+$256)));
   $262 = $261 * 4.4408920985006262E-16;
   $263 = $259 + $262;
   HEAPF64[$260>>3] = $263;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $264 = $15 * 1.3999999999999999;
  $265 = !($264 <= $1);
  if (!($265)) {
   $266 = (_gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3)|0);
   $$0 = $266;
   STACKTOP = sp;return ($$0|0);
  }
  $267 = $2 > 0.0;
  if (!($267)) {
   $441 = $15 < 10.0;
   $442 = $1 < 10.0;
   $or$cond3 = $442 & $441;
   if ($or$cond3) {
    $443 = (_gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3)|0);
    $$0 = $443;
    STACKTOP = sp;return ($$0|0);
   }
   $444 = !($15 >= 100.0);
   if (!($444)) {
    $445 = $14 > 1.0;
    $446 = $445 ? $14 : 1.0;
    $447 = $15 * 0.98999999999999999;
    $448 = $446 < $447;
    if ($448) {
     $449 = (_hyperg_1F1_asymp_negx($0,$1,$2,$3)|0);
     $$0 = $449;
     STACKTOP = sp;return ($$0|0);
    }
   }
   _hyperg_1F1_luke($0,$1,$2,$3);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $268 = $2 > 100.0;
  if ($268) {
   $269 = $13 * $12;
   $270 = $2 * 0.5;
   $271 = $269 < $270;
   if ($271) {
    $272 = (_hyperg_1F1_asymp_posx($0,$1,$2,$3)|0);
    $$0 = $272;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $273 = $1 < 5.0E+6;
  if ($273) {
   $274 = $2 * 1.3999999999999999;
   $275 = $274 - $1;
   $276 = (+Math_ceil((+$275)));
   $277 = $276 + 1.0;
   $278 = $277 + $1;
   $279 = $278 + 1.0;
   $280 = (_gsl_sf_hyperg_1F1_series_e($0,$279,$2,$6)|0);
   $281 = (_gsl_sf_hyperg_1F1_series_e($0,$278,$2,$7)|0);
   $282 = ((($6)) + 8|0);
   $283 = +HEAPF64[$282>>3];
   $284 = +HEAPF64[$6>>3];
   $285 = $283 / $284;
   $286 = (+Math_abs((+$285)));
   $287 = ((($7)) + 8|0);
   $288 = +HEAPF64[$287>>3];
   $289 = +HEAPF64[$7>>3];
   $290 = $288 / $289;
   $291 = (+Math_abs((+$290)));
   $292 = $286 + $291;
   $293 = $1 + 0.10000000000000001;
   $294 = $278 > $293;
   if ($294) {
    $$0145163 = $278;$$0146162 = $284;$$0147161 = $289;
    while(1) {
     $295 = $$0145163 + $2;
     $296 = $295 + -1.0;
     $297 = $$0147161 * $296;
     $298 = $$0145163 - $0;
     $299 = $298 * $2;
     $300 = $299 / $$0145163;
     $301 = $$0146162 * $300;
     $302 = $297 - $301;
     $303 = $$0145163 + -1.0;
     $304 = $302 / $303;
     $305 = $303 > $293;
     if ($305) {
      $$0146162$phi = $$0147161;$$0145163 = $303;$$0147161 = $304;$$0146162 = $$0146162$phi;
     } else {
      $$0147$lcssa = $304;
      break;
     }
    }
   } else {
    $$0147$lcssa = $289;
   }
   HEAPF64[$3>>3] = $$0147$lcssa;
   $306 = (+Math_abs((+$277)));
   $307 = $306 + 1.0;
   $308 = $307 * $292;
   $309 = (+Math_abs((+$$0147$lcssa)));
   $310 = $308 * $309;
   $311 = ((($3)) + 8|0);
   $312 = $309 * 4.4408920985006262E-16;
   $313 = $310 + $312;
   HEAPF64[$311>>3] = $313;
   $314 = ($280|0)==(0);
   $$ = $314 ? $281 : $280;
   $$0 = $$;
   STACKTOP = sp;return ($$0|0);
  }
  $315 = (+Math_abs((+$1)));
  $316 = $15 < $315;
  if ($316) {
   $317 = $0 * $2;
   $318 = (+Math_abs((+$317)));
   $319 = (+Math_sqrt((+$315)));
   $320 = $1 - $2;
   $321 = (+Math_abs((+$320)));
   $322 = $319 * $321;
   $323 = $318 < $322;
   if ($323) {
    $324 = $2 / $1;
    $325 = - $324;
    $326 = (+_log1p($325));
    $327 = $326 * $0;
    $328 = - $327;
    $329 = (+Math_exp((+$328)));
    $330 = $10 * $0;
    $331 = $1 * 2.0;
    $332 = $330 / $331;
    $333 = 1.0 - $324;
    $334 = $324 / $333;
    $pow2$i = $334 * $334;
    $335 = $332 * $pow2$i;
    $336 = $1 * 24.0;
    $337 = $336 * $1;
    $338 = 1.0 / $337;
    $339 = $330 * $324;
    $340 = $324 * $339;
    $341 = (+Math_pow((+$333),4.0));
    $342 = $340 / $341;
    $343 = $338 * $342;
    $344 = $0 * 2.0;
    $345 = $344 + 1.0;
    $346 = $345 * 8.0;
    $347 = $346 * $324;
    $348 = $347 + 12.0;
    $349 = $0 * 3.0;
    $350 = $349 * $0;
    $351 = $350 - $0;
    $352 = $351 + -2.0;
    $353 = $324 * $352;
    $354 = $324 * $353;
    $355 = $348 + $354;
    $356 = $343 * $355;
    $357 = $1 * 48.0;
    $358 = $357 * $1;
    $359 = $358 * $1;
    $360 = (+Math_pow((+$333),6.0));
    $361 = $359 * $360;
    $362 = -1.0 / $361;
    $363 = $362 * $0;
    $364 = $0 + -2.0;
    $365 = $364 * $324;
    $366 = $365 + 16.0;
    $367 = $0 + -1.0;
    $368 = $367 * $366;
    $369 = $324 * $368;
    $370 = $369 + 72.0;
    $371 = $324 * $370;
    $372 = $371 * $0;
    $373 = $372 + 96.0;
    $374 = $10 * $373;
    $375 = $324 * $374;
    $376 = $375 + 24.0;
    $pow21$i = $324 * $324;
    $377 = $pow21$i * $376;
    $378 = $10 * $377;
    $379 = $363 * $378;
    $380 = 1.0 - $335;
    $381 = $380 + $356;
    $382 = $381 + $379;
    $383 = $382 * $329;
    HEAPF64[$3>>3] = $383;
    $384 = $379 * $329;
    $385 = (+Math_abs((+$384)));
    $386 = $385 * 2.0;
    $387 = (+Math_abs((+$383)));
    $388 = $387 * 4.4408920985006262E-16;
    $389 = $386 + $388;
    $390 = ((($3)) + 8|0);
    HEAPF64[$390>>3] = $389;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $391 = $1 * 2.0;
  $392 = $0 * 4.0;
  $393 = $391 - $392;
  $394 = $2 / $393;
  $395 = 1.0 - $394;
  $396 = (+Math_sqrt((+$394)));
  $397 = (+Math_acos((+$396)));
  $398 = $393 * 2.4674011002723395;
  $399 = $393 * $398;
  $400 = $394 * $399;
  $401 = $395 * $400;
  $402 = (_gsl_sf_lngamma_e($1,$4)|0);
  $403 = 1.0 - $1;
  $404 = $403 * 0.5;
  $405 = $2 * 0.25;
  $406 = $405 * $393;
  $407 = (+Math_log((+$406)));
  $408 = $404 * $407;
  $409 = (+Math_log((+$401)));
  $410 = $409 * 0.25;
  $411 = +HEAPF64[$4>>3];
  $412 = $2 * 0.5;
  $413 = $412 + $411;
  $414 = $408 + $413;
  $415 = $414 - $410;
  $416 = ((($4)) + 8|0);
  $417 = +HEAPF64[$416>>3];
  $418 = (+Math_abs((+$412)));
  $419 = (+Math_abs((+$408)));
  $420 = $418 + $419;
  $421 = (+Math_abs((+$410)));
  $422 = $420 + $421;
  $423 = $422 * 4.4408920985006262E-16;
  $424 = $423 + $417;
  $425 = $0 * 3.1415926535897931;
  $426 = (+Math_sin((+$425)));
  $427 = $393 * 0.25;
  $428 = $397 * 2.0;
  $429 = (+Math_sin((+$428)));
  $430 = $428 - $429;
  $431 = $427 * $430;
  $432 = $431 + 0.78539816339744828;
  $433 = (+Math_sin((+$432)));
  $434 = $426 + $433;
  $435 = (+Math_abs((+$426)));
  $436 = (+Math_abs((+$433)));
  $437 = $435 + $436;
  $438 = $437 * 4.4408920985006262E-16;
  $439 = (_gsl_sf_exp_mult_err_e($415,$424,$434,$438,$3)|0);
  $440 = ($439|0)==(0);
  $$$i = $440 ? $402 : $439;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $1 + 0.10000000000000001;
 $21 = (+Math_floor((+$20)));
 $22 = $1 < 1.0;
 if ($22) {
  HEAPF64[$3>>3] = nan;
  $23 = ((($3)) + 8|0);
  HEAPF64[$23>>3] = nan;
  _gsl_error(82896,82556,352,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = $1 == 1.0;
 if ($24) {
  $25 = (_gsl_sf_exp_e($2,$3)|0);
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $15 * 1.3999999999999999;
 $27 = !($26 <= $1);
 if (!($27)) {
  $$0253$i$i = 1.0;$$0262$i$i = 0.0;$$0271$i$i = 1.0;$$04$i$i = 1.0;
  while(1) {
   $28 = $$04$i$i + $1;
   $29 = $28 + -1.0;
   $30 = $2 / $29;
   $31 = $$0253$i$i * $30;
   $32 = $$0271$i$i + $31;
   $33 = (+Math_abs((+$31)));
   $34 = $33 * 1.7763568394002505E-15;
   $35 = (+Math_abs((+$32)));
   $36 = $35 * 2.2204460492503131E-16;
   $37 = $34 + $36;
   $38 = $$0262$i$i + $37;
   $39 = $$04$i$i + 1.0;
   $40 = $31 / $32;
   $41 = (+Math_abs((+$40)));
   $42 = $41 > 5.5511151231257827E-17;
   if ($42) {
    $$0253$i$i = $31;$$0262$i$i = $38;$$0271$i$i = $32;$$04$i$i = $39;
   } else {
    break;
   }
  }
  HEAPF64[$3>>3] = $32;
  $43 = ((($3)) + 8|0);
  $44 = $33 * 2.0;
  $45 = $44 + $38;
  HEAPF64[$43>>3] = $45;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = $1 - $21;
 $47 = (+Math_abs((+$46)));
 $48 = $47 < 2.2204460492503131E-14;
 $49 = $21 < 2147483647.0;
 $or$cond$i = $49 & $48;
 if ($or$cond$i) {
  $50 = (~~(($21)));
  $51 = ($50|0)<(1);
  if ($51) {
   HEAPF64[$3>>3] = nan;
   $52 = ((($3)) + 8|0);
   HEAPF64[$52>>3] = nan;
   _gsl_error(82896,82556,322,1);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  switch ($50|0) {
  case 1:  {
   $53 = (_gsl_sf_exp_e($2,$3)|0);
   $$0 = $53;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 2:  {
   $54 = (_gsl_sf_exprel_e($2,$3)|0);
   $$0 = $54;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 3:  {
   $55 = (_gsl_sf_exprel_2_e($2,$3)|0);
   $$0 = $55;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $56 = (($50) + -1)|0;
   $57 = (_gsl_sf_exprel_n_e($56,$2,$3)|0);
   $$0 = $57;
   STACKTOP = sp;return ($$0|0);
  }
  }
 }
 $58 = $2 > 0.0;
 if (!($58)) {
  $225 = $15 < 10.0;
  $226 = $1 < 10.0;
  $or$cond3$i = $226 & $225;
  if ($or$cond3$i) {
   $$0253$i99$i = 1.0;$$0262$i100$i = 0.0;$$0271$i101$i = 1.0;$$04$i98$i = 1.0;
   while(1) {
    $227 = $$04$i98$i + $1;
    $228 = $227 + -1.0;
    $229 = $2 / $228;
    $230 = $$0253$i99$i * $229;
    $231 = $$0271$i101$i + $230;
    $232 = (+Math_abs((+$230)));
    $233 = $232 * 1.7763568394002505E-15;
    $234 = (+Math_abs((+$231)));
    $235 = $234 * 2.2204460492503131E-16;
    $236 = $233 + $235;
    $237 = $$0262$i100$i + $236;
    $238 = $$04$i98$i + 1.0;
    $239 = $230 / $231;
    $240 = (+Math_abs((+$239)));
    $241 = $240 > 5.5511151231257827E-17;
    if ($241) {
     $$0253$i99$i = $230;$$0262$i100$i = $237;$$0271$i101$i = $231;$$04$i98$i = $238;
    } else {
     break;
    }
   }
   HEAPF64[$3>>3] = $231;
   $242 = ((($3)) + 8|0);
   $243 = $232 * 2.0;
   $244 = $243 + $237;
   HEAPF64[$242>>3] = $244;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $245 = !($15 >= 100.0);
  if (!($245)) {
   $246 = 2.0 - $1;
   $247 = (+Math_abs((+$246)));
   $248 = $247 > 1.0;
   $249 = $248 ? $247 : 1.0;
   $250 = $15 * 0.98999999999999999;
   $251 = $249 < $250;
   if ($251) {
    $252 = (_hyperg_1F1_asymp_negx(1.0,$1,$2,$3)|0);
    $$0 = $252;
    STACKTOP = sp;return ($$0|0);
   }
  }
  _hyperg_1F1_luke(1.0,$1,$2,$3);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = $2 > 100.0;
 $60 = $2 * 0.75;
 $61 = $60 > $1;
 $or$cond87$i = $59 & $61;
 if ($or$cond87$i) {
  $62 = (_hyperg_1F1_asymp_posx(1.0,$1,$2,$3)|0);
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = $1 < 1.0E+5;
 if ($63) {
  $64 = $2 * 1.3999999999999999;
  $65 = $64 - $1;
  $66 = (+Math_ceil((+$65)));
  $67 = $66 + 1.0;
  $68 = $67 + $1;
  $$0253$i89$i = 1.0;$$0262$i90$i = 0.0;$$0271$i91$i = 1.0;$$04$i88$i = 1.0;
  while(1) {
   $69 = $68 + $$04$i88$i;
   $70 = $69 + -1.0;
   $71 = $2 / $70;
   $72 = $$0253$i89$i * $71;
   $73 = $$0271$i91$i + $72;
   $74 = (+Math_abs((+$72)));
   $75 = $74 * 1.7763568394002505E-15;
   $76 = (+Math_abs((+$73)));
   $77 = $76 * 2.2204460492503131E-16;
   $78 = $75 + $77;
   $79 = $$0262$i90$i + $78;
   $80 = $$04$i88$i + 1.0;
   $81 = $72 / $73;
   $82 = (+Math_abs((+$81)));
   $83 = $82 > 5.5511151231257827E-17;
   if ($83) {
    $$0253$i89$i = $72;$$0262$i90$i = $79;$$0271$i91$i = $73;$$04$i88$i = $80;
   } else {
    break;
   }
  }
  $84 = $74 * 2.0;
  $85 = $84 + $79;
  $86 = $85 / $76;
  $87 = $68 > $20;
  if ($87) {
   $$085120$i = $68;$$sroa$0$0119$i = $73;
   while(1) {
    $88 = $$085120$i + -1.0;
    $89 = $2 / $88;
    $90 = $$sroa$0$0119$i * $89;
    $91 = $90 + 1.0;
    $92 = $88 > $20;
    if ($92) {
     $$085120$i = $88;$$sroa$0$0119$i = $91;
    } else {
     break;
    }
   }
   $$pre$i = (+Math_abs((+$91)));
   $$pre$phi$iZ2D = $$pre$i;$$sroa$0$0$lcssa$i = $91;
  } else {
   $$pre$phi$iZ2D = $76;$$sroa$0$0$lcssa$i = $73;
  }
  HEAPF64[$3>>3] = $$sroa$0$0$lcssa$i;
  $93 = $86 * $$pre$phi$iZ2D;
  $94 = ((($3)) + 8|0);
  $95 = (+Math_abs((+$67)));
  $96 = $95 + 1.0;
  $97 = $96 * 4.4408920985006262E-16;
  $98 = $97 * $$pre$phi$iZ2D;
  $99 = $93 + $98;
  HEAPF64[$94>>3] = $99;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $100 = (+Math_abs((+$1)));
 $101 = $15 < $100;
 if ($101) {
  $102 = (+Math_sqrt((+$100)));
  $103 = $1 - $2;
  $104 = (+Math_abs((+$103)));
  $105 = $102 * $104;
  $106 = $15 < $105;
  if ($106) {
   $107 = $2 / $1;
   $108 = - $107;
   $109 = (+_log1p($108));
   $110 = - $109;
   $111 = (+Math_exp((+$110)));
   $112 = $1 * 2.0;
   $113 = 2.0 / $112;
   $114 = 1.0 - $107;
   $115 = $107 / $114;
   $pow2$i$i = $115 * $115;
   $116 = $113 * $pow2$i$i;
   $117 = $1 * 24.0;
   $118 = $117 * $1;
   $119 = 1.0 / $118;
   $120 = $107 * 2.0;
   $121 = $107 * $120;
   $122 = (+Math_pow((+$114),4.0));
   $123 = $121 / $122;
   $124 = $119 * $123;
   $125 = $107 * 24.0;
   $126 = $125 + 12.0;
   $127 = $107 * 0.0;
   $128 = $107 * $127;
   $129 = $126 + $128;
   $130 = $129 * $124;
   $131 = $1 * 48.0;
   $132 = $131 * $1;
   $133 = $132 * $1;
   $134 = (+Math_pow((+$114),6.0));
   $135 = $133 * $134;
   $136 = -1.0 / $135;
   $137 = 16.0 - $107;
   $138 = $137 * 0.0;
   $139 = $107 * $138;
   $140 = $139 + 72.0;
   $141 = $107 * $140;
   $142 = $141 + 96.0;
   $143 = $142 * 2.0;
   $144 = $107 * $143;
   $145 = $144 + 24.0;
   $pow21$i$i = $107 * $107;
   $146 = $pow21$i$i * $145;
   $147 = $146 * 2.0;
   $148 = $136 * $147;
   $149 = 1.0 - $116;
   $150 = $149 + $130;
   $151 = $150 + $148;
   $152 = $151 * $111;
   HEAPF64[$3>>3] = $152;
   $153 = $148 * $111;
   $154 = (+Math_abs((+$153)));
   $155 = $154 * 2.0;
   $156 = (+Math_abs((+$152)));
   $157 = $156 * 4.4408920985006262E-16;
   $158 = $155 + $157;
   $159 = ((($3)) + 8|0);
   HEAPF64[$159>>3] = $158;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $160 = $15 > $100;
 if (!($160)) {
  $179 = $1 * 2.0;
  $180 = $179 + -4.0;
  $181 = $2 / $180;
  $182 = 1.0 - $181;
  $183 = (+Math_sqrt((+$181)));
  $184 = (+Math_acos((+$183)));
  $185 = $180 * 2.4674011002723395;
  $186 = $180 * $185;
  $187 = $181 * $186;
  $188 = $182 * $187;
  $189 = (_gsl_sf_lngamma_e($1,$5)|0);
  $190 = 1.0 - $1;
  $191 = $190 * 0.5;
  $192 = $2 * 0.25;
  $193 = $192 * $180;
  $194 = (+Math_log((+$193)));
  $195 = $191 * $194;
  $196 = (+Math_log((+$188)));
  $197 = $196 * 0.25;
  $198 = +HEAPF64[$5>>3];
  $199 = $2 * 0.5;
  $200 = $199 + $198;
  $201 = $195 + $200;
  $202 = $201 - $197;
  $203 = ((($5)) + 8|0);
  $204 = +HEAPF64[$203>>3];
  $205 = (+Math_abs((+$199)));
  $206 = (+Math_abs((+$195)));
  $207 = $205 + $206;
  $208 = (+Math_abs((+$197)));
  $209 = $207 + $208;
  $210 = $209 * 4.4408920985006262E-16;
  $211 = $210 + $204;
  $212 = $180 * 0.25;
  $213 = $184 * 2.0;
  $214 = (+Math_sin((+$213)));
  $215 = $213 - $214;
  $216 = $212 * $215;
  $217 = $216 + 0.78539816339744828;
  $218 = (+Math_sin((+$217)));
  $219 = $218 + 1.2246467991473532E-16;
  $220 = (+Math_abs((+$218)));
  $221 = $220 + 1.2246467991473532E-16;
  $222 = $221 * 4.4408920985006262E-16;
  $223 = (_gsl_sf_exp_mult_err_e($202,$211,$219,$222,$3)|0);
  $224 = ($223|0)==(0);
  $$$i$i = $224 ? $189 : $223;
  $$0 = $$$i$i;
  STACKTOP = sp;return ($$0|0);
 }
 $$0253$i94$i = 1.0;$$0262$i95$i = 0.0;$$0271$i96$i = 1.0;$$04$i93$i = 1.0;
 while(1) {
  $161 = $$04$i93$i + $1;
  $162 = $161 + -1.0;
  $163 = $2 / $162;
  $164 = $$0253$i94$i * $163;
  $165 = $$0271$i96$i + $164;
  $166 = (+Math_abs((+$164)));
  $167 = $166 * 1.7763568394002505E-15;
  $168 = (+Math_abs((+$165)));
  $169 = $168 * 2.2204460492503131E-16;
  $170 = $167 + $169;
  $171 = $$0262$i95$i + $170;
  $172 = $$04$i93$i + 1.0;
  $173 = $164 / $165;
  $174 = (+Math_abs((+$173)));
  $175 = $174 > 5.5511151231257827E-17;
  if ($175) {
   $$0253$i94$i = $164;$$0262$i95$i = $171;$$0271$i96$i = $165;$$04$i93$i = $172;
  } else {
   break;
  }
 }
 HEAPF64[$3>>3] = $165;
 $176 = ((($3)) + 8|0);
 $177 = $166 * 2.0;
 $178 = $177 + $171;
 HEAPF64[$176>>3] = $178;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _hyperg_1F1_ab_pos($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$04353$i = 0, $$04353$i562 = 0, $$04452$i = 0.0, $$04452$i563 = 0.0, $$04551$i = 0.0, $$04551$i564 = 0.0, $$04650$i = 0.0, $$04650$i565 = 0.0, $$0528$lcssa = 0.0, $$0528591 = 0.0, $$0529$lcssa = 0.0, $$0529590 = 0.0, $$0529590$phi = 0.0, $$0530626 = 0.0, $$0530626$phi = 0.0, $$0531$lcssa = 0.0, $$0531625 = 0.0, $$0532589 = 0.0;
 var $$0533$lcssa = 0.0, $$0533624 = 0.0, $$0534584 = 0.0, $$0536583 = 0.0, $$0536583$phi = 0.0, $$0537580 = 0.0, $$0537580$phi = 0.0, $$0538$lcssa = 0.0, $$0538579 = 0.0, $$0539 = 0.0, $$0539$lcssa = 0.0, $$0539578 = 0.0, $$0539581 = 0.0, $$0540609 = 0.0, $$0540609$phi = 0.0, $$0541$lcssa = 0.0, $$0541608 = 0.0, $$0542607 = 0.0, $$0543$lcssa = 0.0, $$0543606 = 0.0;
 var $$0544618 = 0.0, $$0544618$phi = 0.0, $$0545$lcssa = 0.0, $$0545617 = 0.0, $$0546616 = 0.0, $$0547$lcssa = 0.0, $$0547615 = 0.0, $$0548$lcssa = 0.0, $$0548600 = 0.0, $$0549599 = 0.0, $$0549599$phi = 0.0, $$0550598 = 0.0, $$0551$lcssa = 0.0, $$0551597 = 0.0, $$0573 = 0.0, $$0574 = 0.0, $$1$i = 0, $$1$i567 = 0, $$1535 = 0.0, $$1585 = 0.0;
 var $$555 = 0, $$556 = 0, $$557 = 0, $$560 = 0, $$561 = 0, $$pre$phi647Z2D = 0.0, $$pre$phi648Z2D = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0;
 var $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0;
 var $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0;
 var $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0;
 var $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0;
 var $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0;
 var $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0;
 var $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0;
 var $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0;
 var $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0;
 var $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0;
 var $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0;
 var $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0;
 var $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0.0;
 var $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0;
 var $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0.0, $387 = 0, $388 = 0.0, $389 = 0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0.0;
 var $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0;
 var $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond553 = 0, $or$cond554 = 0, $or$cond559 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 144|0;
 $5 = sp + 128|0;
 $6 = sp + 112|0;
 $7 = sp + 96|0;
 $8 = sp + 80|0;
 $9 = sp + 64|0;
 $10 = sp + 48|0;
 $11 = sp + 32|0;
 $12 = sp + 16|0;
 $13 = sp;
 $14 = (+Math_abs((+$2)));
 $15 = $1 < 10.0;
 $16 = $0 < 10.0;
 $or$cond = $16 & $15;
 $17 = $14 < 5.0;
 $or$cond3 = $or$cond & $17;
 $18 = $14 * $0;
 $19 = $18 < $1;
 $or$cond553 = $or$cond3 | $19;
 if (!($or$cond553)) {
  $20 = $1 > $0;
  $or$cond5 = $20 & $17;
  if (!($or$cond5)) {
   $22 = $2 < -100.0;
   if ($22) {
    $23 = (+Math_abs((+$0)));
    $24 = $23 > 1.0;
    $25 = $24 ? $23 : 1.0;
    $26 = $0 + 1.0;
    $27 = $26 - $1;
    $28 = (+Math_abs((+$27)));
    $29 = $28 > 1.0;
    $30 = $29 ? $28 : 1.0;
    $31 = $25 * $30;
    $32 = $14 * 0.69999999999999996;
    $33 = $31 < $32;
    if ($33) {
     $34 = (_hyperg_1F1_asymp_negx($0,$1,$2,$3)|0);
     $$0 = $34;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $35 = $2 > 100.0;
   $36 = $1 - $0;
   $37 = (+Math_abs((+$36)));
   if ($35) {
    $38 = $37 > 1.0;
    $39 = $38 ? $37 : 1.0;
    $40 = 1.0 - $0;
    $41 = (+Math_abs((+$40)));
    $42 = $41 > 1.0;
    $43 = $42 ? $41 : 1.0;
    $44 = $43 * $39;
    $45 = $14 * 0.69999999999999996;
    $46 = $44 < $45;
    if ($46) {
     $47 = (_hyperg_1F1_asymp_posx($0,$1,$2,$3)|0);
     $$0 = $47;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $48 = !($37 <= 1.0);
   if (!($48)) {
    $49 = $0 - $1;
    $50 = (_hyperg_1F1_beps_bgt0($49,$1,$2,$3)|0);
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   if ($20) {
    $51 = $0 * 2.0;
    $52 = $51 + $2;
    $53 = !($52 <= $1);
    if (!($53)) {
     $54 = $0 == 0.0;
     do {
      if ($54) {
       $$0574 = 0.0;$$1$i = 0;
      } else {
       $55 = $1 - $2;
       $$04353$i = 1;$$04452$i = 0.0;$$04551$i = 1.0;$$04650$i = 1.0;
       while(1) {
        $56 = (+($$04353$i|0));
        $57 = $56 + $0;
        $58 = $57 * $2;
        $59 = $55 + $56;
        $60 = $59 + -1.0;
        $61 = $59 * $60;
        $62 = $58 / $61;
        $63 = $$04452$i + 1.0;
        $64 = $63 * $62;
        $65 = - $64;
        $66 = $64 + 1.0;
        $67 = $65 / $66;
        $68 = $$04551$i * $67;
        $69 = $$04650$i + $68;
        $70 = $68 / $69;
        $71 = (+Math_abs((+$70)));
        $72 = !($71 < 4.4408920985006262E-16);
        if (!($72)) {
         label = 17;
         break;
        }
        $75 = (($$04353$i) + 1)|0;
        $76 = ($75>>>0)<(5000);
        if ($76) {
         $$04353$i = $75;$$04452$i = $67;$$04551$i = $68;$$04650$i = $69;
        } else {
         label = 19;
         break;
        }
       }
       if ((label|0) == 17) {
        $73 = $0 / $55;
        $74 = $73 * $69;
        $$0574 = $74;$$1$i = 0;
        break;
       }
       else if ((label|0) == 19) {
        $77 = $0 / $55;
        $78 = $77 * $69;
        _gsl_error(82813,82556,580,11);
        $$0574 = $78;$$1$i = 11;
        break;
       }
      }
     } while(0);
     $79 = $0 > 0.5;
     if ($79) {
      $80 = $2 / $0;
      $81 = $80 * $$0574;
      $82 = $81 + 1.0;
      $83 = $82 * 1.4916681462400413E-154;
      $$0530626 = $83;$$0531625 = 1.4916681462400413E-154;$$0533624 = $0;
      while(1) {
       $84 = $$0533624 * $$0530626;
       $85 = $$0533624 * 2.0;
       $86 = $85 - $1;
       $87 = $86 + $2;
       $88 = $$0531625 * $87;
       $89 = $84 - $88;
       $90 = $1 - $$0533624;
       $91 = $89 / $90;
       $92 = $$0533624 + -1.0;
       $93 = $92 > 0.5;
       if ($93) {
        $$0530626$phi = $$0531625;$$0531625 = $91;$$0533624 = $92;$$0530626 = $$0530626$phi;
       } else {
        $$0531$lcssa = $91;$$0533$lcssa = $92;
        break;
       }
      }
     } else {
      $$0531$lcssa = 1.4916681462400413E-154;$$0533$lcssa = $0;
     }
     $94 = (_hyperg_1F1_small_a_bgt0($$0533$lcssa,$1,$2,$4)|0);
     $95 = 1.4916681462400413E-154 / $$0531$lcssa;
     $96 = +HEAPF64[$4>>3];
     $97 = $95 * $96;
     HEAPF64[$3>>3] = $97;
     $98 = (+Math_abs((+$95)));
     $99 = ((($4)) + 8|0);
     $100 = +HEAPF64[$99>>3];
     $101 = $98 * $100;
     $102 = ((($3)) + 8|0);
     $103 = (+Math_abs((+$0)));
     $104 = $103 + 1.0;
     $105 = $104 * 4.4408920985006262E-16;
     $106 = (+Math_abs((+$97)));
     $107 = $105 * $106;
     $108 = $101 + $107;
     HEAPF64[$102>>3] = $108;
     $109 = ($94|0)==(0);
     $$ = $109 ? $$1$i : $94;
     $$0 = $$;
     STACKTOP = sp;return ($$0|0);
    }
    $110 = $52 > $1;
    $111 = $1 > $2;
    $or$cond554 = $111 & $110;
    if ($or$cond554) {
     $112 = $0 == 0.0;
     do {
      if ($112) {
       $$0573 = 0.0;$$1$i567 = 0;
      } else {
       $113 = $1 - $2;
       $$04353$i562 = 1;$$04452$i563 = 0.0;$$04551$i564 = 1.0;$$04650$i565 = 1.0;
       while(1) {
        $114 = (+($$04353$i562|0));
        $115 = $114 + $0;
        $116 = $115 * $2;
        $117 = $113 + $114;
        $118 = $117 + -1.0;
        $119 = $117 * $118;
        $120 = $116 / $119;
        $121 = $$04452$i563 + 1.0;
        $122 = $121 * $120;
        $123 = - $122;
        $124 = $122 + 1.0;
        $125 = $123 / $124;
        $126 = $$04551$i564 * $125;
        $127 = $$04650$i565 + $126;
        $128 = $126 / $127;
        $129 = (+Math_abs((+$128)));
        $130 = !($129 < 4.4408920985006262E-16);
        if (!($130)) {
         label = 28;
         break;
        }
        $133 = (($$04353$i562) + 1)|0;
        $134 = ($133>>>0)<(5000);
        if ($134) {
         $$04353$i562 = $133;$$04452$i563 = $125;$$04551$i564 = $126;$$04650$i565 = $127;
        } else {
         label = 30;
         break;
        }
       }
       if ((label|0) == 28) {
        $131 = $0 / $113;
        $132 = $131 * $127;
        $$0573 = $132;$$1$i567 = 0;
        break;
       }
       else if ((label|0) == 30) {
        $135 = $0 / $113;
        $136 = $135 * $127;
        _gsl_error(82813,82556,580,11);
        $$0573 = $136;$$1$i567 = 11;
        break;
       }
      }
     } while(0);
     $137 = $2 / $0;
     $138 = $137 * $$0573;
     $139 = $138 + 1.0;
     $140 = $139 * 1.4916681462400413E-154;
     $$0539578 = $0 + 1.0;
     $141 = $1 + -0.5;
     $142 = $$0539578 < $141;
     if ($142) {
      $$0537580 = 1.4916681462400413E-154;$$0538579 = $140;$$0539581 = $$0539578;
      while(1) {
       $143 = $1 - $$0539581;
       $144 = $143 * $$0537580;
       $145 = $$0539581 * 2.0;
       $146 = $145 - $1;
       $147 = $146 + $2;
       $148 = $$0538579 * $147;
       $149 = $144 + $148;
       $150 = $149 / $$0539581;
       $$0539 = $$0539581 + 1.0;
       $151 = $$0539 < $141;
       if ($151) {
        $$0537580$phi = $$0538579;$$0538579 = $150;$$0539581 = $$0539;$$0537580 = $$0537580$phi;
       } else {
        $$0538$lcssa = $150;$$0539$lcssa = $$0539;
        break;
       }
      }
     } else {
      $$0538$lcssa = $140;$$0539$lcssa = $$0539578;
     }
     $152 = $$0539$lcssa - $1;
     $153 = (_hyperg_1F1_beps_bgt0($152,$1,$2,$5)|0);
     $154 = 1.4916681462400413E-154 / $$0538$lcssa;
     $155 = +HEAPF64[$5>>3];
     $156 = $154 * $155;
     HEAPF64[$3>>3] = $156;
     $157 = (+Math_abs((+$154)));
     $158 = ((($5)) + 8|0);
     $159 = +HEAPF64[$158>>3];
     $160 = $157 * $159;
     $161 = ((($3)) + 8|0);
     $162 = $37 + 1.0;
     $163 = $162 * 4.4408920985006262E-16;
     $164 = (+Math_abs((+$156)));
     $165 = $163 * $164;
     $166 = $160 + $165;
     HEAPF64[$161>>3] = $166;
     $167 = ($153|0)==(0);
     $$555 = $167 ? $$1$i567 : $153;
     $$0 = $$555;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $168 = !($2 >= 0.0);
   if (!($168)) {
    $169 = $1 < $0;
    if ($169) {
     $170 = $0 - $1;
     $171 = (+Math_floor((+$170)));
     $172 = $170 - $171;
     $173 = $172 + -1.0;
     $174 = (_hyperg_1F1_beps_bgt0($173,$1,$2,$6)|0);
     $175 = (_hyperg_1F1_beps_bgt0($172,$1,$2,$7)|0);
     $176 = +HEAPF64[$6>>3];
     $177 = +HEAPF64[$7>>3];
     $178 = (+Math_abs((+$176)));
     $179 = (+Math_abs((+$177)));
     $180 = $178 + $179;
     $181 = ((($6)) + 8|0);
     $182 = +HEAPF64[$181>>3];
     $183 = $182 / $176;
     $184 = (+Math_abs((+$183)));
     $185 = ((($7)) + 8|0);
     $186 = +HEAPF64[$185>>3];
     $187 = $186 / $177;
     $188 = (+Math_abs((+$187)));
     $189 = $172 + $1;
     $190 = $0 + -0.10000000000000001;
     $191 = $189 < $190;
     if ($191) {
      $$0540609 = $176;$$0541608 = $177;$$0542607 = $189;$$0543606 = 1.7976931348623157E+308;
      while(1) {
       $192 = $1 - $$0542607;
       $193 = $192 * $$0540609;
       $194 = $$0542607 * 2.0;
       $195 = $194 - $1;
       $196 = $195 + $2;
       $197 = $$0541608 * $196;
       $198 = $193 + $197;
       $199 = $198 / $$0542607;
       $200 = (+Math_abs((+$$0541608)));
       $201 = (+Math_abs((+$199)));
       $202 = $200 + $201;
       $203 = $202 < $$0543606;
       $204 = $203 ? $202 : $$0543606;
       $205 = $$0542607 + 1.0;
       $206 = $205 < $190;
       if ($206) {
        $$0540609$phi = $$0541608;$$0541608 = $199;$$0542607 = $205;$$0543606 = $204;$$0540609 = $$0540609$phi;
       } else {
        $$0541$lcssa = $199;$$0543$lcssa = $204;$$pre$phi647Z2D = $201;
        break;
       }
      }
     } else {
      $$0541$lcssa = $177;$$0543$lcssa = 1.7976931348623157E+308;$$pre$phi647Z2D = $179;
     }
     $207 = $180 / $$0543$lcssa;
     HEAPF64[$3>>3] = $$0541$lcssa;
     $208 = $184 + $188;
     $209 = $208 + 2.2204460492503131E-16;
     $210 = $209 * 2.0;
     $211 = $37 + 1.0;
     $212 = $211 * $210;
     $213 = $212 * $$pre$phi647Z2D;
     $214 = ((($3)) + 8|0);
     $215 = $208 * 2.0;
     $216 = $215 * $207;
     $217 = $207 * $216;
     $218 = $217 * $$pre$phi647Z2D;
     $219 = $213 + $218;
     $220 = $$pre$phi647Z2D * 4.4408920985006262E-16;
     $221 = $220 + $219;
     HEAPF64[$214>>3] = $221;
     $222 = ($174|0)==(0);
     $$556 = $222 ? $175 : $174;
     $$0 = $$556;
     STACKTOP = sp;return ($$0|0);
    } else {
     $223 = (+Math_floor((+$0)));
     $224 = $0 - $223;
     $225 = (_hyperg_1F1_small_a_bgt0($224,$1,$2,$8)|0);
     $226 = $224 + 1.0;
     $227 = (_hyperg_1F1_small_a_bgt0($226,$1,$2,$9)|0);
     $228 = +HEAPF64[$8>>3];
     $229 = +HEAPF64[$9>>3];
     $230 = (+Math_abs((+$229)));
     $231 = (+Math_abs((+$228)));
     $232 = $231 + $230;
     $233 = ((($8)) + 8|0);
     $234 = +HEAPF64[$233>>3];
     $235 = $234 / $228;
     $236 = (+Math_abs((+$235)));
     $237 = ((($9)) + 8|0);
     $238 = +HEAPF64[$237>>3];
     $239 = $238 / $229;
     $240 = (+Math_abs((+$239)));
     $241 = $0 + -0.10000000000000001;
     $242 = $226 < $241;
     if ($242) {
      $$0544618 = $228;$$0545617 = $229;$$0546616 = $226;$$0547615 = 1.7976931348623157E+308;
      while(1) {
       $243 = $1 - $$0546616;
       $244 = $243 * $$0544618;
       $245 = $$0546616 * 2.0;
       $246 = $245 - $1;
       $247 = $246 + $2;
       $248 = $$0545617 * $247;
       $249 = $244 + $248;
       $250 = $249 / $$0546616;
       $251 = (+Math_abs((+$250)));
       $252 = (+Math_abs((+$$0545617)));
       $253 = $252 + $251;
       $254 = $253 < $$0547615;
       $255 = $254 ? $253 : $$0547615;
       $256 = $$0546616 + 1.0;
       $257 = $256 < $241;
       if ($257) {
        $$0544618$phi = $$0545617;$$0545617 = $250;$$0546616 = $256;$$0547615 = $255;$$0544618 = $$0544618$phi;
       } else {
        $$0545$lcssa = $250;$$0547$lcssa = $255;$$pre$phi648Z2D = $251;
        break;
       }
      }
     } else {
      $$0545$lcssa = $229;$$0547$lcssa = 1.7976931348623157E+308;$$pre$phi648Z2D = $230;
     }
     $258 = $232 / $$0547$lcssa;
     HEAPF64[$3>>3] = $$0545$lcssa;
     $259 = $236 + $240;
     $260 = $259 + 2.2204460492503131E-16;
     $261 = $260 * 2.0;
     $262 = (+Math_abs((+$0)));
     $263 = $262 + 1.0;
     $264 = $263 * $261;
     $265 = $264 * $$pre$phi648Z2D;
     $266 = ((($3)) + 8|0);
     $267 = $259 * 2.0;
     $268 = $267 * $258;
     $269 = $258 * $268;
     $270 = $269 * $$pre$phi648Z2D;
     $271 = $265 + $270;
     $272 = $$pre$phi648Z2D * 4.4408920985006262E-16;
     $273 = $272 + $271;
     HEAPF64[$266>>3] = $273;
     $274 = ($225|0)==(0);
     $$557 = $274 ? $227 : $225;
     $$0 = $$557;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $275 = $1 - $2;
   $276 = $275 * 0.5;
   $277 = !($276 >= $0);
   $278 = - $2;
   $279 = !($278 <= $0);
   $or$cond559 = $279 & $277;
   if (!($or$cond559)) {
    $280 = $0 - $1;
    $281 = (+Math_floor((+$280)));
    $282 = $281 + 1.0;
    $283 = $282 - $0;
    $284 = $283 + $1;
    $285 = - $284;
    $286 = $284 + $0;
    $287 = (_hyperg_1F1_beps_bgt0($285,$286,$2,$10)|0);
    $288 = 1.0 - $284;
    $289 = $286 + -1.0;
    $290 = (_hyperg_1F1_beps_bgt0($288,$289,$2,$11)|0);
    $291 = +HEAPF64[$10>>3];
    $292 = +HEAPF64[$11>>3];
    $293 = (+Math_abs((+$291)));
    $294 = (+Math_abs((+$292)));
    $295 = $293 + $294;
    $296 = ((($10)) + 8|0);
    $297 = +HEAPF64[$296>>3];
    $298 = $297 / $291;
    $299 = (+Math_abs((+$298)));
    $300 = ((($11)) + 8|0);
    $301 = +HEAPF64[$300>>3];
    $302 = $301 / $292;
    $303 = (+Math_abs((+$302)));
    $304 = $1 + 0.10000000000000001;
    $305 = $289 > $304;
    if ($305) {
     $$0548600 = 1.7976931348623157E+308;$$0549599 = $291;$$0550598 = $289;$$0551597 = $292;
     while(1) {
      $306 = 1.0 - $$0550598;
      $307 = $306 - $2;
      $308 = $$0550598 * $307;
      $309 = $$0551597 * $308;
      $310 = - $309;
      $311 = $$0550598 - $0;
      $312 = $311 * $2;
      $313 = $$0549599 * $312;
      $314 = $310 - $313;
      $315 = $$0550598 + -1.0;
      $316 = $$0550598 * $315;
      $317 = $314 / $316;
      $318 = (+Math_abs((+$$0551597)));
      $319 = (+Math_abs((+$317)));
      $320 = $318 + $319;
      $321 = $320 < $$0548600;
      $322 = $321 ? $320 : $$0548600;
      $323 = $315 > $304;
      if ($323) {
       $$0549599$phi = $$0551597;$$0548600 = $322;$$0550598 = $315;$$0551597 = $317;$$0549599 = $$0549599$phi;
      } else {
       $$0548$lcssa = $322;$$0551$lcssa = $317;$$pre$phiZ2D = $319;
       break;
      }
     }
    } else {
     $$0548$lcssa = 1.7976931348623157E+308;$$0551$lcssa = $292;$$pre$phiZ2D = $294;
    }
    $324 = $295 / $$0548$lcssa;
    HEAPF64[$3>>3] = $$0551$lcssa;
    $325 = $299 + $303;
    $326 = $325 + 2.2204460492503131E-16;
    $327 = $326 * 2.0;
    $328 = $37 + 1.0;
    $329 = $328 * $327;
    $330 = $329 * $$pre$phiZ2D;
    $331 = ((($3)) + 8|0);
    $332 = $324 * $324;
    $333 = $332 + 1.0;
    $334 = $330 * $333;
    HEAPF64[$331>>3] = $334;
    $335 = ($287|0)==(0);
    $$560 = $335 ? $290 : $287;
    $$0 = $$560;
    STACKTOP = sp;return ($$0|0);
   }
   $336 = (+Math_floor((+$0)));
   $337 = $0 - $336;
   $338 = (+Math_floor((+$276)));
   $339 = $337 + $338;
   $340 = $339 - $1;
   $341 = (+Math_floor((+$340)));
   $342 = $341 + 1.0;
   $343 = $342 - $339;
   $344 = $343 + $1;
   $345 = - $344;
   $346 = $339 + $344;
   $347 = (_hyperg_1F1_beps_bgt0($345,$346,$2,$12)|0);
   $348 = 1.0 - $344;
   $349 = $346 + -1.0;
   $350 = (_hyperg_1F1_beps_bgt0($348,$349,$2,$13)|0);
   $351 = +HEAPF64[$12>>3];
   $352 = +HEAPF64[$13>>3];
   $353 = ((($12)) + 8|0);
   $354 = +HEAPF64[$353>>3];
   $355 = $354 / $351;
   $356 = (+Math_abs((+$355)));
   $357 = ((($13)) + 8|0);
   $358 = +HEAPF64[$357>>3];
   $359 = $358 / $352;
   $360 = (+Math_abs((+$359)));
   $361 = $356 + $360;
   $362 = $1 + 0.10000000000000001;
   $363 = $349 > $362;
   if ($363) {
    $$0528591 = $352;$$0529590 = $351;$$0532589 = $349;
    while(1) {
     $364 = 1.0 - $$0532589;
     $365 = $364 - $2;
     $366 = $$0532589 * $365;
     $367 = $$0528591 * $366;
     $368 = - $367;
     $369 = $$0532589 - $339;
     $370 = $369 * $2;
     $371 = $$0529590 * $370;
     $372 = $368 - $371;
     $373 = $$0532589 + -1.0;
     $374 = $$0532589 * $373;
     $375 = $372 / $374;
     $376 = $373 > $362;
     if ($376) {
      $$0529590$phi = $$0528591;$$0528591 = $375;$$0532589 = $373;$$0529590 = $$0529590$phi;
     } else {
      $$0528$lcssa = $375;$$0529$lcssa = $$0528591;
      break;
     }
    }
   } else {
    $$0528$lcssa = $352;$$0529$lcssa = $351;
   }
   $377 = $339 + $2;
   $378 = $377 * $1;
   $379 = $378 * $$0528$lcssa;
   $380 = $340 * $2;
   $381 = $380 * $$0529$lcssa;
   $382 = $381 + $379;
   $383 = $339 * $1;
   $384 = $382 / $383;
   $385 = ($347|0)==(0);
   $$561 = $385 ? $350 : $347;
   $386 = $0 + -0.10000000000000001;
   $387 = !($339 >= $386);
   if ($387) {
    $388 = $339 + 1.0;
    $389 = $388 < $386;
    if ($389) {
     $$0534584 = $384;$$0536583 = $$0528$lcssa;$$1585 = $388;
     while(1) {
      $390 = $1 - $$1585;
      $391 = $$0536583 * $390;
      $392 = $$1585 * 2.0;
      $393 = $392 - $1;
      $394 = $393 + $2;
      $395 = $$0534584 * $394;
      $396 = $391 + $395;
      $397 = $396 / $$1585;
      $398 = $$1585 + 1.0;
      $399 = $398 < $386;
      if ($399) {
       $$0536583$phi = $$0534584;$$0534584 = $397;$$1585 = $398;$$0536583 = $$0536583$phi;
      } else {
       $$1535 = $397;
       break;
      }
     }
    } else {
     $$1535 = $384;
    }
   } else {
    $$1535 = $$0528$lcssa;
   }
   HEAPF64[$3>>3] = $$1535;
   $400 = $361 + 2.2204460492503131E-16;
   $401 = $37 + 1.0;
   $402 = $401 * $400;
   $403 = (+Math_abs((+$$1535)));
   $404 = $402 * $403;
   $405 = ((($3)) + 8|0);
   HEAPF64[$405>>3] = $404;
   $$0 = $$561;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $21 = (_gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3)|0);
 $$0 = $21;
 STACKTOP = sp;return ($$0|0);
}
function _hyperg_1F1_ab_neg($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$$$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$146$i = 0, $$not = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0;
 var $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0;
 var $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0;
 var $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0;
 var $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0;
 var $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0.0;
 var $220 = 0.0, $221 = 0, $222 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond119 = 0, $or$cond120 = 0, $or$cond121 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 152|0;
 $5 = sp + 136|0;
 $6 = sp + 128|0;
 $7 = sp + 112|0;
 $8 = sp + 96|0;
 $9 = sp + 88|0;
 $10 = sp + 80|0;
 $11 = sp + 64|0;
 $12 = sp + 40|0;
 $13 = sp + 16|0;
 $14 = sp;
 $15 = $1 - $0;
 $16 = (+Math_abs((+$2)));
 $17 = (+Math_abs((+$0)));
 $18 = (+Math_abs((+$1)));
 $19 = $17 > 1.0;
 $20 = $19 ? $17 : 1.0;
 $21 = $18 > 1.0;
 $22 = $21 ? $18 : 1.0;
 $23 = $15 + 0.5;
 $24 = (+Math_floor((+$23)));
 $25 = $15 - $24;
 $26 = $25 < 2.2204460492503131E-14;
 $27 = $17 < 10.0;
 $28 = $18 < 10.0;
 $or$cond = $27 & $28;
 $29 = $16 < 5.0;
 $or$cond3 = $or$cond & $29;
 if (!($or$cond3)) {
  $30 = $20 * 0.80000000000000004;
  $31 = $16 * $30;
  $32 = $31 < $1;
  if (!($32)) {
   $34 = $2 > 0.0;
   $35 = $22 > $20;
   $or$cond119 = $34 & $35;
   if ($or$cond119) {
    $36 = $2 * 2.7182818284590451;
    $37 = $36 / $22;
    $38 = (+Math_log((+$37)));
    $39 = $20 * $38;
    $40 = $39 < -29.043653389117154;
    if ($40) {
     $41 = (_gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3)|0);
     $$0 = $41;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $42 = (+Math_abs((+$15)));
   $43 = $42 < 10.0;
   $or$cond5 = $28 & $43;
   $or$cond121 = $29 & $or$cond5;
   if (!($or$cond121)) {
    $44 = $42 > 1.0;
    $45 = $44 ? $42 : 1.0;
    $46 = $45 * 0.80000000000000004;
    $47 = $16 * $46;
    $48 = $47 < $1;
    if (!($48)) {
     $57 = $2 < -30.0;
     if ($57) {
      $58 = $0 + 1.0;
      $59 = $58 - $1;
      $60 = (+Math_abs((+$59)));
      $61 = $60 > 1.0;
      $62 = $61 ? $60 : 1.0;
      $63 = $20 * $62;
      $64 = $16 * 0.98999999999999999;
      $65 = $63 < $64;
      if ($65) {
       $66 = (_hyperg_1F1_asymp_negx($0,$1,$2,$3)|0);
       $$0 = $66;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $67 = $2 > 100.0;
     if ($67) {
      $68 = 1.0 - $0;
      $69 = (+Math_abs((+$68)));
      $70 = $69 > 1.0;
      $71 = $70 ? $69 : 1.0;
      $72 = $71 * $45;
      $73 = $16 * 0.98999999999999999;
      $74 = $72 < $73;
      if ($74) {
       $75 = (_hyperg_1F1_asymp_posx($0,$1,$2,$3)|0);
       $$0 = $75;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $$not = $34 ^ 1;
     $76 = $15 > 0.0;
     $or$cond7 = $76 & $26;
     $or$cond120 = $or$cond7 | $$not;
     if ($or$cond120) {
      $212 = $2 < 0.0;
      if ($212) {
       $213 = - $2;
       $214 = (_gsl_sf_hyperg_1F1_series_e($15,$1,$213,$3)|0);
       $215 = (+Math_exp((+$2)));
       $216 = +HEAPF64[$3>>3];
       $217 = $215 * $216;
       HEAPF64[$3>>3] = $217;
       $218 = ((($3)) + 8|0);
       $219 = +HEAPF64[$218>>3];
       $220 = $215 * $219;
       HEAPF64[$218>>3] = $220;
       $$0 = $214;
       STACKTOP = sp;return ($$0|0);
      } else {
       $221 = (_gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3)|0);
       $$0 = $221;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $77 = 2.0 - $1;
     $78 = $0 - $1;
     $79 = $78 + 1.0;
     $80 = (_gsl_sf_lngamma_sgn_e($79,$4,$6)|0);
     $81 = (_gsl_sf_lngamma_e($77,$5)|0);
     $82 = ($80|0)==(0);
     $$$i = $82 ? $81 : $80;
     $83 = $77 + -1.0;
     $84 = (+Math_log((+$2)));
     $85 = $83 * $84;
     $86 = +HEAPF64[$4>>3];
     $87 = +HEAPF64[$5>>3];
     $88 = $86 - $87;
     $89 = $85 + $88;
     $90 = ((($4)) + 8|0);
     $91 = +HEAPF64[$90>>3];
     $92 = ((($5)) + 8|0);
     $93 = +HEAPF64[$92>>3];
     $94 = $91 + $93;
     $95 = (+Math_abs((+$85)));
     $96 = $95 * 4.4408920985006262E-16;
     $97 = $96 + $94;
     $98 = 2.0 - $77;
     $99 = (_gsl_sf_lngamma_sgn_e($98,$7,$9)|0);
     $100 = $79 + 1.0;
     $101 = $100 - $77;
     $102 = (_gsl_sf_lngamma_sgn_e($101,$8,$10)|0);
     $103 = ($99|0)==(0);
     $104 = $103 ? $102 : $99;
     $105 = +HEAPF64[$7>>3];
     $106 = +HEAPF64[$8>>3];
     $107 = $105 - $106;
     $108 = ((($7)) + 8|0);
     $109 = +HEAPF64[$108>>3];
     $110 = ((($8)) + 8|0);
     $111 = +HEAPF64[$110>>3];
     $112 = $109 + $111;
     $113 = (+Math_abs((+$105)));
     $114 = (+Math_abs((+$106)));
     $115 = $113 + $114;
     $116 = $115 * 2.2204460492503131E-16;
     $117 = $112 + $116;
     $118 = (_gsl_sf_hyperg_1F1_e($79,$77,$2,$11)|0);
     $119 = (_gsl_sf_hyperg_U_e10_e($79,$77,$2,$12)|0);
     $120 = ($118|0)==(0);
     $$146$i = $120 ? $119 : $118;
     $121 = +HEAPF64[$9>>3];
     $122 = +HEAPF64[$10>>3];
     $123 = $121 * $122;
     $124 = +HEAPF64[$11>>3];
     $125 = $123 * $124;
     $126 = ((($11)) + 8|0);
     $127 = +HEAPF64[$126>>3];
     $128 = (_gsl_sf_exp_mult_err_e10_e($107,$117,$125,$127,$13)|0);
     $129 = 1.0 - $77;
     $130 = ((($12)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (+($131|0));
     $133 = $132 * 2.3025850929940459;
     $134 = ((($13)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (+($135|0));
     $137 = $136 * 2.3025850929940459;
     $138 = $133 > $137;
     if ($138) {
      $139 = (+Math_abs((+$133)));
      $140 = $139 * 4.4408920985006262E-16;
      $141 = $137 - $133;
      $142 = (+Math_exp((+$141)));
      $143 = (+Math_abs((+$141)));
      $144 = $143 + 1.0;
      $145 = $144 * 4.4408920985006262E-16;
      $146 = $142 * $145;
      $147 = +HEAPF64[$13>>3];
      $148 = $142 * $147;
      $149 = +HEAPF64[$12>>3];
      $150 = $129 * $149;
      $151 = $148 - $150;
      $152 = ((($13)) + 8|0);
      $153 = +HEAPF64[$152>>3];
      $154 = $142 * $153;
      $155 = (+Math_abs((+$129)));
      $156 = ((($12)) + 8|0);
      $157 = +HEAPF64[$156>>3];
      $158 = $155 * $157;
      $159 = $154 + $158;
      $160 = (+Math_abs((+$147)));
      $161 = $146 * $160;
      $162 = $161 + $159;
      $163 = (+Math_abs((+$148)));
      $164 = (+Math_abs((+$150)));
      $165 = $163 + $164;
      $166 = $165 * 2.2204460492503131E-16;
      $167 = $166 + $162;
      $168 = $89 + $133;
      $169 = $97 + $140;
      $170 = +HEAPF64[$6>>3];
      $171 = $151 * $170;
      $172 = (_gsl_sf_exp_mult_err_e($168,$169,$171,$167,$3)|0);
      $$0$i = $172;
     } else {
      $173 = (+Math_abs((+$137)));
      $174 = $173 * 4.4408920985006262E-16;
      $175 = $133 - $137;
      $176 = (+Math_exp((+$175)));
      $177 = $137 - $133;
      $178 = (+Math_abs((+$177)));
      $179 = $178 + 1.0;
      $180 = $179 * 4.4408920985006262E-16;
      $181 = $176 * $180;
      $182 = +HEAPF64[$13>>3];
      $183 = $129 * $176;
      $184 = +HEAPF64[$12>>3];
      $185 = $183 * $184;
      $186 = $182 - $185;
      $187 = ((($13)) + 8|0);
      $188 = +HEAPF64[$187>>3];
      $189 = ((($12)) + 8|0);
      $190 = +HEAPF64[$189>>3];
      $191 = $183 * $190;
      $192 = (+Math_abs((+$191)));
      $193 = $188 + $192;
      $194 = $129 * $181;
      $195 = $194 * $184;
      $196 = (+Math_abs((+$195)));
      $197 = $196 + $193;
      $198 = (+Math_abs((+$182)));
      $199 = (+Math_abs((+$185)));
      $200 = $198 + $199;
      $201 = $200 * 2.2204460492503131E-16;
      $202 = $201 + $197;
      $203 = $89 + $137;
      $204 = $97 + $174;
      $205 = +HEAPF64[$6>>3];
      $206 = $186 * $205;
      $207 = (_gsl_sf_exp_mult_err_e($203,$204,$206,$202,$3)|0);
      $$0$i = $207;
     }
     $208 = ($$0$i|0)==(0);
     if ($208) {
      $209 = ($128|0)==(0);
      if ($209) {
       $210 = ($$146$i|0)==(0);
       $211 = ($104|0)==(0);
       $$$$i = $211 ? $$$i : $104;
       $spec$select = $210 ? $$$$i : $$146$i;
       $222 = $spec$select;
      } else {
       $222 = $128;
      }
     } else {
      $222 = $$0$i;
     }
     $$0 = $222;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $49 = - $2;
   $50 = (_gsl_sf_hyperg_1F1_series_e($15,$1,$49,$14)|0);
   $51 = $16 * 2.2204460492503131E-16;
   $52 = +HEAPF64[$14>>3];
   $53 = ((($14)) + 8|0);
   $54 = +HEAPF64[$53>>3];
   $55 = (_gsl_sf_exp_mult_err_e($2,$51,$52,$54,$3)|0);
   $56 = ($55|0)==(0);
   $$ = $56 ? $50 : $55;
   $$0 = $$;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $33 = (_gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3)|0);
 $$0 = $33;
 STACKTOP = sp;return ($$0|0);
}
function _hyperg_1F1_beps_bgt0($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp;
 $6 = (+Math_abs((+$2)));
 $7 = $6 < $1;
 $8 = (+Math_abs((+$0)));
 $9 = $8 < 1.4901161193847656E-8;
 $or$cond = $9 & $7;
 if ($or$cond) {
  $10 = $0 + $1;
  $11 = $10 * $2;
  $12 = $11 / $1;
  $13 = (_gsl_sf_exp_e($12,$4)|0);
  $14 = $1 * 2.0;
  $15 = $14 * $1;
  $16 = $1 + 1.0;
  $17 = $16 * $15;
  $18 = $10 / $17;
  $19 = $10 * 2.0;
  $20 = $1 - $19;
  $21 = $10 * $20;
  $22 = $1 * 3.0;
  $23 = $22 * $1;
  $24 = $23 * $1;
  $25 = $16 * $24;
  $26 = $1 + 2.0;
  $27 = $26 * $25;
  $28 = $21 / $27;
  $29 = $28 * $2;
  $30 = $18 + $29;
  $31 = $0 * $2;
  $32 = $31 * $2;
  $33 = $32 * $30;
  $34 = 1.0 - $33;
  $35 = +HEAPF64[$4>>3];
  $36 = $34 * $35;
  HEAPF64[$3>>3] = $36;
  $37 = ((($4)) + 8|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (+Math_abs((+$34)));
  $40 = $39 * $38;
  $41 = ((($3)) + 8|0);
  $42 = (+Math_abs((+$35)));
  $43 = $42 * 2.2204460492503131E-16;
  $44 = (+Math_abs((+$33)));
  $45 = $44 + 1.0;
  $46 = $45 * $43;
  $47 = $40 + $46;
  $48 = (+Math_abs((+$36)));
  $49 = $48 * 8.8817841970012523E-16;
  $50 = $49 + $47;
  HEAPF64[$41>>3] = $50;
  $$1 = $13;
  STACKTOP = sp;return ($$1|0);
 }
 $51 = - $0;
 $52 = - $2;
 $53 = (_hyperg_1F1_small_a_bgt0($51,$1,$52,$5)|0);
 $54 = +HEAPF64[$5>>3];
 $55 = $54 != 0.0;
 if ($55) {
  $56 = $6 * 4.4408920985006262E-16;
  $57 = ((($5)) + 8|0);
  $58 = +HEAPF64[$57>>3];
  $59 = (_gsl_sf_exp_mult_err_e($2,$56,$54,$58,$3)|0);
  $60 = ($59|0)==(0);
  $$ = $60 ? $53 : $59;
  $$0 = $$;
 } else {
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
  $$0 = $53;
 }
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _hyperg_1F1_luke($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$0194 = 0, $$0195 = 0.0, $$0196 = 0.0, $$0197 = 0.0, $$0198 = 0.0, $$0200 = 0.0, $$0202 = 0.0, $$0205 = 0.0, $$0207 = 0.0, $$0210 = 0.0, $$1201 = 0.0, $$1203 = 0.0, $$1208 = 0.0, $$1211 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0;
 var $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0;
 var $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $addconv = 0, $or$cond = 0;
 var $or$cond1 = 0, $spec$select = 0.0, $spec$select10 = 0.0, $spec$select11 = 0.0, $spec$select12 = 0.0, $spec$select13 = 0.0, $spec$select9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = - $2;
 $5 = $2 * $2;
 $6 = $5 * $4;
 $7 = $0 / $1;
 $8 = $0 + 1.0;
 $9 = $1 * 2.0;
 $10 = $8 / $9;
 $11 = $0 + 2.0;
 $12 = $1 + 1.0;
 $13 = $12 * 2.0;
 $14 = $11 / $13;
 $15 = $10 * $4;
 $16 = $15 + 1.0;
 $17 = $14 * $4;
 $18 = $10 / 3.0;
 $19 = $18 * $4;
 $20 = $19 + 1.0;
 $21 = $17 * $20;
 $22 = $21 + 1.0;
 $23 = $7 * $4;
 $24 = $16 - $23;
 $25 = $17 + 1.0;
 $26 = $7 * $25;
 $27 = $26 * $4;
 $28 = $22 - $27;
 $29 = $7 * $10;
 $30 = $1 / $12;
 $31 = $30 * $29;
 $32 = $31 * $4;
 $33 = $32 * $4;
 $34 = $33 + $28;
 $$0194 = 3;$$0197 = 1.0;$$0198 = 1.0;$$0200 = $16;$$0202 = $22;$$0205 = 1.0;$$0207 = $24;$$0210 = $34;
 while(1) {
  $35 = (+($$0194|0));
  $36 = $35 + $0;
  $37 = $36 + -1.0;
  $38 = $35 + $1;
  $39 = $38 + -1.0;
  $40 = $36 + -2.0;
  $41 = $38 + -2.0;
  $42 = $$0194 << 1;
  $43 = (($42) + -1)|0;
  $44 = (+($43|0));
  $45 = (($42) + -3)|0;
  $46 = (+($45|0));
  $47 = (($42) + -5)|0;
  $48 = (+($47|0));
  $49 = $35 - $0;
  $50 = $49 + -2.0;
  $51 = $46 * 2.0;
  $52 = $39 * $51;
  $53 = $50 / $52;
  $54 = $36 * $37;
  $55 = $44 * 4.0;
  $56 = $55 * $46;
  $57 = $41 * $56;
  $58 = $39 * $57;
  $59 = $54 / $58;
  $60 = $40 * $37;
  $61 = $50 * $60;
  $62 = - $61;
  $63 = $46 * 8.0;
  $64 = $63 * $46;
  $65 = $64 * $48;
  $66 = $38 + -3.0;
  $67 = $66 * $65;
  $68 = $41 * $67;
  $69 = $39 * $68;
  $70 = $62 / $69;
  $71 = $35 - $1;
  $72 = $71 + -1.0;
  $73 = $37 * $72;
  $74 = - $73;
  $75 = $41 * $51;
  $76 = $39 * $75;
  $77 = $74 / $76;
  $78 = $53 * $4;
  $79 = $78 + 1.0;
  $80 = $$0210 * $79;
  $81 = $59 * $4;
  $82 = $77 + $81;
  $83 = $82 * $4;
  $84 = $$0207 * $83;
  $85 = $80 + $84;
  $86 = $6 * $70;
  $87 = $$0205 * $86;
  $88 = $87 + $85;
  $89 = $$0202 * $79;
  $90 = $$0200 * $83;
  $91 = $89 + $90;
  $92 = $$0198 * $86;
  $93 = $92 + $91;
  $94 = $88 / $93;
  $95 = $$0197 - $94;
  $96 = $95 / $$0197;
  $97 = (+Math_abs((+$96)));
  $98 = $97 < 2.2204460492503131E-16;
  $99 = ($$0194>>>0)>(5000);
  $or$cond = $99 | $98;
  if ($or$cond) {
   break;
  }
  $100 = (+Math_abs((+$88)));
  $101 = $100 > 1.0000000000000001E+50;
  if ($101) {
   label = 5;
  } else {
   $102 = (+Math_abs((+$93)));
   $103 = $102 > 1.0000000000000001E+50;
   if ($103) {
    label = 5;
   } else {
    $110 = $100 < 9.9999999999999988E-51;
    $111 = $102 < 9.9999999999999988E-51;
    $or$cond1 = $110 | $111;
    $112 = $88 * 1.0000000000000001E+50;
    $113 = $93 * 1.0000000000000001E+50;
    $114 = $$0210 * 1.0000000000000001E+50;
    $115 = $$0202 * 1.0000000000000001E+50;
    $116 = $$0207 * 1.0000000000000001E+50;
    $117 = $$0200 * 1.0000000000000001E+50;
    $spec$select = $or$cond1 ? $114 : $$0210;
    $spec$select9 = $or$cond1 ? $116 : $$0207;
    $spec$select10 = $or$cond1 ? $115 : $$0202;
    $spec$select11 = $or$cond1 ? $117 : $$0200;
    $spec$select12 = $or$cond1 ? $112 : $88;
    $spec$select13 = $or$cond1 ? $113 : $93;
    $$0195 = $spec$select13;$$0196 = $spec$select12;$$1201 = $spec$select11;$$1203 = $spec$select10;$$1208 = $spec$select9;$$1211 = $spec$select;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $104 = $88 / 1.0000000000000001E+50;
   $105 = $93 / 1.0000000000000001E+50;
   $106 = $$0210 / 1.0000000000000001E+50;
   $107 = $$0202 / 1.0000000000000001E+50;
   $108 = $$0207 / 1.0000000000000001E+50;
   $109 = $$0200 / 1.0000000000000001E+50;
   $$0195 = $105;$$0196 = $104;$$1201 = $109;$$1203 = $107;$$1208 = $108;$$1211 = $106;
  }
  $118 = (($$0194) + 1)|0;
  $$0194 = $118;$$0197 = $94;$$0198 = $$1201;$$0200 = $$1203;$$0202 = $$0195;$$0205 = $$1208;$$0207 = $$1211;$$0210 = $$0196;
 }
 HEAPF64[$3>>3] = $94;
 $119 = $94 * $97;
 $120 = (+Math_abs((+$119)));
 $121 = $120 * 2.0;
 $122 = ((($3)) + 8|0);
 $addconv = (($$0194) + -1)|0;
 $123 = (+($addconv|0));
 $124 = $123 * 4.4408920985006262E-16;
 $125 = (+Math_abs((+$94)));
 $126 = $124 * $125;
 $127 = $126 + $121;
 HEAPF64[$122>>3] = $127;
 return;
}
function _gsl_sf_hyperg_2F1_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$ = 0.0, $$$i = 0.0, $$0 = 0, $$0$i = 0.0, $$0345382$i = 0, $$0346$lcssa$i = 0.0, $$0346381$i = 0.0, $$0347380$i = 0.0, $$0355379$i = 0.0, $$0356378$i = 0.0, $$0357377$i = 0.0, $$0358376$i = 0.0, $$0360375$i = 0.0, $$0362$lcssa$i = 0, $$0362374$i = 0, $$197 = 0.0, $$2 = 0, $$2342$i = 0, $$363$i = 0.0, $$364$i = 0;
 var $$5$i = 0, $$9$i = 0, $$phi$trans$insert385$phi$trans$insert$i = 0, $$pre$i = 0.0, $$pre$phi391$iZ2D = 0.0, $$pre$phi392$iZ2D = 0, $$pre$phi393$iZ2D = 0, $$pre$pre$i = 0.0, $$pre386$i = 0.0, $$pre386$pre$i = 0.0, $$pre390$i = 0.0, $$spec$select$i = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0;
 var $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0;
 var $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0;
 var $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0;
 var $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0;
 var $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0;
 var $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0;
 var $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0;
 var $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0;
 var $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0;
 var $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0.0;
 var $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0.0, $386 = 0.0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0;
 var $398 = 0.0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0.0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0;
 var $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0.0, $430 = 0, $431 = 0.0, $432 = 0.0, $433 = 0;
 var $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0;
 var $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0;
 var $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0;
 var $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0.0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0.0;
 var $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0;
 var $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond$not = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond14$i = 0, $or$cond15 = 0, $or$cond16$i = 0;
 var $or$cond17 = 0, $or$cond18$i = 0, $or$cond19 = 0, $or$cond192 = 0, $or$cond194 = 0, $or$cond196 = 0, $or$cond198 = 0, $or$cond199 = 0, $or$cond3 = 0, $spec$select371$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $5 = sp + 480|0;
 $6 = sp + 464|0;
 $7 = sp + 448|0;
 $8 = sp + 432|0;
 $9 = sp + 416|0;
 $10 = sp + 400|0;
 $11 = sp + 384|0;
 $12 = sp + 368|0;
 $13 = sp + 352|0;
 $14 = sp + 336|0;
 $15 = sp + 320|0;
 $16 = sp + 304|0;
 $17 = sp + 288|0;
 $18 = sp + 272|0;
 $19 = sp + 256|0;
 $20 = sp + 240|0;
 $21 = sp + 224|0;
 $22 = sp + 208|0;
 $23 = sp + 192|0;
 $24 = sp + 184|0;
 $25 = sp + 176|0;
 $26 = sp + 168|0;
 $27 = sp + 160|0;
 $28 = sp + 144|0;
 $29 = sp + 128|0;
 $30 = sp + 112|0;
 $31 = sp + 104|0;
 $32 = sp + 96|0;
 $33 = sp + 88|0;
 $34 = sp + 72|0;
 $35 = sp + 56|0;
 $36 = sp + 40|0;
 $37 = sp + 24|0;
 $38 = sp + 16|0;
 $39 = sp + 8|0;
 $40 = sp;
 $41 = $2 - $0;
 $42 = $41 - $1;
 $43 = $0 + 0.5;
 $44 = (+Math_floor((+$43)));
 $45 = $1 + 0.5;
 $46 = (+Math_floor((+$45)));
 $47 = $2 + 0.5;
 $48 = (+Math_floor((+$47)));
 $49 = $0 < 0.0;
 $50 = $0 - $44;
 $51 = (+Math_abs((+$50)));
 $52 = $51 < 2.2204460492503131E-13;
 $53 = $49 & $52;
 $54 = $1 < 0.0;
 $55 = $1 - $46;
 $56 = (+Math_abs((+$55)));
 $57 = $56 < 2.2204460492503131E-13;
 $58 = $54 & $57;
 $59 = $2 < 0.0;
 $60 = $2 - $48;
 $61 = (+Math_abs((+$60)));
 $62 = $61 < 2.2204460492503131E-13;
 $63 = $59 & $62;
 $64 = ((($4)) + 8|0);
 $65 = $3 + -1.0;
 $66 = (+Math_abs((+$65)));
 $67 = $66 < 2.2204460492503131E-13;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 if ($67) {
  $68 = !($42 > 0.0);
  $69 = $2 == 0.0;
  $or$cond$not = $69 | $68;
  $or$cond3 = $or$cond$not | $63;
  if (!($or$cond3)) {
   $70 = (_gsl_sf_lngamma_sgn_e($2,$34,$38)|0);
   $71 = (_gsl_sf_lngamma_e($42,$35)|0);
   $72 = (_gsl_sf_lngamma_sgn_e($41,$36,$39)|0);
   $73 = $2 - $1;
   $74 = (_gsl_sf_lngamma_sgn_e($73,$37,$40)|0);
   $75 = $71 | $70;
   $76 = $75 | $72;
   $77 = $76 | $74;
   $78 = ($77|0)==(0);
   if ($78) {
    $79 = +HEAPF64[$34>>3];
    $80 = +HEAPF64[$35>>3];
    $81 = $79 + $80;
    $82 = +HEAPF64[$36>>3];
    $83 = $81 - $82;
    $84 = +HEAPF64[$37>>3];
    $85 = $83 - $84;
    $86 = ((($34)) + 8|0);
    $87 = +HEAPF64[$86>>3];
    $88 = ((($35)) + 8|0);
    $89 = +HEAPF64[$88>>3];
    $90 = $87 + $89;
    $91 = ((($36)) + 8|0);
    $92 = +HEAPF64[$91>>3];
    $93 = $90 + $92;
    $94 = ((($37)) + 8|0);
    $95 = +HEAPF64[$94>>3];
    $96 = $93 + $95;
    $97 = (_gsl_sf_exp_err_e($85,$96,$4)|0);
    $98 = +HEAPF64[$38>>3];
    $99 = +HEAPF64[$39>>3];
    $100 = +HEAPF64[$40>>3];
    $101 = $99 * $100;
    $102 = $98 / $101;
    $103 = +HEAPF64[$4>>3];
    $104 = $103 * $102;
    HEAPF64[$4>>3] = $104;
    $$0 = $97;
   } else {
    HEAPF64[$4>>3] = nan;
    HEAPF64[$64>>3] = nan;
    _gsl_error(82896,82569,672,1);
    $$0 = 1;
   }
   $$2 = $$0;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $105 = $3 < -1.0;
 $106 = $3 >= 1.0;
 $or$cond11 = $105 | $106;
 if ($or$cond11) {
  HEAPF64[$4>>3] = nan;
  HEAPF64[$64>>3] = nan;
  _gsl_error(82896,82569,685,1);
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 if ($63) {
  $107 = $2 + 0.10000000000000001;
  $108 = $107 < $0;
  $or$cond = $108 & $53;
  $109 = $107 < $1;
  $or$cond192 = $109 & $58;
  $or$cond199 = $or$cond | $or$cond192;
  if (!($or$cond199)) {
   HEAPF64[$4>>3] = nan;
   HEAPF64[$64>>3] = nan;
   _gsl_error(82896,82569,693,1);
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $110 = $2 - $1;
 $111 = (+Math_abs((+$110)));
 $112 = $111 < 2.2204460492503131E-13;
 $113 = (+Math_abs((+$41)));
 $114 = $113 < 2.2204460492503131E-13;
 $or$cond194 = $112 | $114;
 if ($or$cond194) {
  $115 = (+Math_abs((+$3)));
  $116 = $115 < 7.4009597974140505E-4;
  if ($116) {
   $117 = $3 * 0.25;
   $118 = $117 + 0.33333333333333331;
   $119 = $3 * $3;
   $120 = $119 / 5.0;
   $121 = $118 + $120;
   $122 = $121 * $3;
   $123 = $122 + 0.5;
   $124 = $123 * $3;
   $125 = $124 + 1.0;
   $126 = $125 * $3;
   $127 = - $126;
   $$0$i = $127;
  } else {
   $128 = 1.0 - $3;
   $129 = (+Math_log((+$128)));
   $$0$i = $129;
  }
  $130 = $42 * $$0$i;
  $131 = (+Math_abs((+$130)));
  $132 = $131 * 2.2204460492503131E-16;
  $133 = (_gsl_sf_exp_err_e($130,$132,$4)|0);
  $$2 = $133;
  STACKTOP = sp;return ($$2|0);
 }
 $134 = $0 >= 0.0;
 $135 = $1 >= 0.0;
 $or$cond13 = $134 & $135;
 $136 = $2 >= 0.0;
 $or$cond15 = $or$cond13 & $136;
 $137 = $3 >= 0.0;
 $or$cond17 = $or$cond15 & $137;
 $138 = $3 < 0.99499999999999999;
 $or$cond19 = $138 & $or$cond17;
 if ($or$cond19) {
  $139 = (_hyperg_2F1_series($0,$1,$2,$3,$4)|0);
  $$2 = $139;
  STACKTOP = sp;return ($$2|0);
 }
 $140 = (+Math_abs((+$0)));
 $141 = $140 < 10.0;
 $142 = (+Math_abs((+$1)));
 $143 = $142 < 10.0;
 $or$cond196 = $141 & $143;
 if (!($or$cond196)) {
  $480 = $140 > $142;
  $$ = $480 ? $1 : $0;
  $$197 = $480 ? $0 : $1;
  $481 = $3 < 0.0;
  if ($481) {
   $482 = (_hyperg_2F1_luke($0,$1,$2,$3,$4)|0);
   $$2 = $482;
   STACKTOP = sp;return ($$2|0);
  }
  $483 = (+Math_abs((+$$)));
  $484 = $483 > 1.0;
  $485 = $484 ? $483 : 1.0;
  $486 = (+Math_abs((+$$197)));
  $487 = $486 * $485;
  $488 = (+Math_abs((+$3)));
  $489 = $488 * $487;
  $490 = (+Math_abs((+$2)));
  $491 = $490 * 2.0;
  $492 = $489 < $491;
  if ($492) {
   $493 = (_hyperg_2F1_series($0,$1,$2,$3,$4)|0);
   $$2 = $493;
   STACKTOP = sp;return ($$2|0);
  }
  $494 = $$197 * $$197;
  $495 = $494 * $3;
  $496 = $495 * $3;
  $497 = (+Math_abs((+$496)));
  $498 = $486 * 0.001;
  $499 = $497 < $498;
  $500 = $483 < 10.0;
  $or$cond198 = $500 & $499;
  if ($or$cond198) {
   $501 = $$197 * $3;
   $502 = (_gsl_sf_hyperg_1F1_e($$,$2,$501,$4)|0);
   $503 = +HEAPF64[$4>>3];
   $504 = (+Math_abs((+$503)));
   $505 = $504 * 0.001;
   HEAPF64[$64>>3] = $505;
   $$2 = $502;
   STACKTOP = sp;return ($$2|0);
  } else {
   ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
   _gsl_error(82813,82569,773,24);
   $$2 = 24;
   STACKTOP = sp;return ($$2|0);
  }
 }
 if ($53) {
  $144 = (_hyperg_2F1_series($44,$1,$2,$3,$4)|0);
  $$2 = $144;
  STACKTOP = sp;return ($$2|0);
 }
 if ($58) {
  $145 = (_hyperg_2F1_series($0,$46,$2,$3,$4)|0);
  $$2 = $145;
  STACKTOP = sp;return ($$2|0);
 }
 $146 = $3 < -0.25;
 if ($146) {
  $147 = (_hyperg_2F1_luke($0,$1,$2,$3,$4)|0);
  $$2 = $147;
  STACKTOP = sp;return ($$2|0);
 }
 $148 = $3 < 0.5;
 if ($148) {
  $149 = (_hyperg_2F1_series($0,$1,$2,$3,$4)|0);
  $$2 = $149;
  STACKTOP = sp;return ($$2|0);
 }
 $150 = (+Math_abs((+$2)));
 $151 = $150 > 10.0;
 if ($151) {
  $152 = (_hyperg_2F1_series($0,$1,$2,$3,$4)|0);
  $$2 = $152;
  STACKTOP = sp;return ($$2|0);
 }
 $153 = $42 + 0.5;
 $154 = (+Math_floor((+$153)));
 $155 = (~~(($154)));
 $156 = (+($155|0));
 $157 = $42 - $156;
 $158 = (+Math_abs((+$157)));
 $159 = $158 < 2.2204460492503131E-13;
 if (!($159)) {
  $328 = (_gsl_sf_lngamma_sgn_e($41,$20,$24)|0);
  $329 = (_gsl_sf_lngamma_sgn_e($110,$21,$25)|0);
  $330 = (_gsl_sf_lngamma_sgn_e($0,$22,$26)|0);
  $331 = (_gsl_sf_lngamma_sgn_e($1,$23,$27)|0);
  $332 = $329 | $328;
  $333 = $331 | $330;
  $334 = ($333|0)==(0);
  (_gsl_sf_lngamma_sgn_e($2,$28,$31)|0);
  (_gsl_sf_lngamma_sgn_e($42,$29,$32)|0);
  $335 = - $42;
  (_gsl_sf_lngamma_sgn_e($335,$30,$33)|0);
  $336 = +HEAPF64[$31>>3];
  $337 = +HEAPF64[$32>>3];
  $338 = $336 * $337;
  $339 = +HEAPF64[$24>>3];
  $340 = $338 * $339;
  $341 = +HEAPF64[$25>>3];
  $342 = $340 * $341;
  $343 = +HEAPF64[$33>>3];
  $344 = $336 * $343;
  $345 = +HEAPF64[$26>>3];
  $346 = $344 * $345;
  $347 = +HEAPF64[$27>>3];
  $348 = $346 * $347;
  $349 = $333 | $332;
  $350 = ($349|0)==(0);
  do {
   if ($350) {
    $351 = +HEAPF64[$28>>3];
    $352 = +HEAPF64[$29>>3];
    $353 = $351 + $352;
    $354 = +HEAPF64[$20>>3];
    $355 = $353 - $354;
    $356 = +HEAPF64[$21>>3];
    $357 = $355 - $356;
    $358 = +HEAPF64[$30>>3];
    $359 = $351 + $358;
    $360 = +HEAPF64[$22>>3];
    $361 = $359 - $360;
    $362 = +HEAPF64[$23>>3];
    $363 = $361 - $362;
    $364 = 1.0 - $3;
    $365 = (+Math_log((+$364)));
    $366 = $42 * $365;
    $367 = $366 + $363;
    $368 = ((($28)) + 8|0);
    $369 = +HEAPF64[$368>>3];
    $370 = $357 < 709.78271289338397;
    $371 = $367 < 709.78271289338397;
    $or$cond14$i = $370 & $371;
    if ($or$cond14$i) {
     $372 = ((($30)) + 8|0);
     $373 = +HEAPF64[$372>>3];
     $374 = $369 + $373;
     $375 = ((($22)) + 8|0);
     $376 = +HEAPF64[$375>>3];
     $377 = $374 + $376;
     $378 = ((($23)) + 8|0);
     $379 = +HEAPF64[$378>>3];
     $380 = $377 + $379;
     $381 = ((($29)) + 8|0);
     $382 = +HEAPF64[$381>>3];
     $383 = $369 + $382;
     $384 = ((($20)) + 8|0);
     $385 = +HEAPF64[$384>>3];
     $386 = $383 + $385;
     $387 = ((($21)) + 8|0);
     $388 = +HEAPF64[$387>>3];
     $389 = $386 + $388;
     (_gsl_sf_exp_err_e($357,$389,$16)|0);
     (_gsl_sf_exp_err_e($367,$380,$17)|0);
     $390 = +HEAPF64[$16>>3];
     $391 = $342 * $390;
     HEAPF64[$16>>3] = $391;
     $392 = +HEAPF64[$17>>3];
     $393 = $348 * $392;
     HEAPF64[$17>>3] = $393;
     $$pre$phi391$iZ2D = $364;$$pre$phi392$iZ2D = $16;$$pre$phi393$iZ2D = $17;
     label = 67;
     break;
    } else {
     HEAPF64[$4>>3] = inf;
     HEAPF64[$64>>3] = inf;
     _gsl_error(82926,82569,570,16);
     $$9$i = 16;
     break;
    }
   } else {
    $394 = ($332|0)!=(0);
    $or$cond16$i = $394 | $334;
    if (!($or$cond16$i)) {
     $395 = +HEAPF64[$28>>3];
     $396 = +HEAPF64[$29>>3];
     $397 = $395 + $396;
     $398 = +HEAPF64[$20>>3];
     $399 = $397 - $398;
     $400 = +HEAPF64[$21>>3];
     $401 = $399 - $400;
     $402 = $401 < 709.78271289338397;
     if ($402) {
      $403 = ((($28)) + 8|0);
      $404 = +HEAPF64[$403>>3];
      $405 = ((($29)) + 8|0);
      $406 = +HEAPF64[$405>>3];
      $407 = $404 + $406;
      $408 = ((($20)) + 8|0);
      $409 = +HEAPF64[$408>>3];
      $410 = $407 + $409;
      $411 = ((($21)) + 8|0);
      $412 = +HEAPF64[$411>>3];
      $413 = $410 + $412;
      (_gsl_sf_exp_err_e($401,$413,$16)|0);
      $414 = +HEAPF64[$16>>3];
      $415 = $342 * $414;
      HEAPF64[$16>>3] = $415;
      $$pre390$i = 1.0 - $3;
      ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;
      $$pre$phi391$iZ2D = $$pre390$i;$$pre$phi392$iZ2D = $16;$$pre$phi393$iZ2D = $17;
      label = 67;
      break;
     } else {
      HEAPF64[$4>>3] = inf;
      HEAPF64[$64>>3] = inf;
      _gsl_error(82926,82569,583,16);
      $$9$i = 16;
      break;
     }
    }
    $or$cond18$i = $394 & $334;
    if (!($or$cond18$i)) {
     HEAPF64[$16>>3] = 0.0;
     HEAPF64[$17>>3] = 0.0;
     HEAPF64[$4>>3] = 0.0;
     HEAPF64[$64>>3] = 2.2250738585072014E-308;
     _gsl_error(82916,82569,602,15);
     $$9$i = 15;
     break;
    }
    $416 = +HEAPF64[$28>>3];
    $417 = +HEAPF64[$30>>3];
    $418 = $416 + $417;
    $419 = +HEAPF64[$22>>3];
    $420 = $418 - $419;
    $421 = +HEAPF64[$23>>3];
    $422 = $420 - $421;
    $423 = 1.0 - $3;
    $424 = (+Math_log((+$423)));
    $425 = $42 * $424;
    $426 = $425 + $422;
    $427 = $426 < 709.78271289338397;
    if ($427) {
     $428 = ((($28)) + 8|0);
     $429 = +HEAPF64[$428>>3];
     $430 = ((($30)) + 8|0);
     $431 = +HEAPF64[$430>>3];
     $432 = $429 + $431;
     $433 = ((($22)) + 8|0);
     $434 = +HEAPF64[$433>>3];
     $435 = $432 + $434;
     $436 = ((($23)) + 8|0);
     $437 = +HEAPF64[$436>>3];
     $438 = $435 + $437;
     ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
     (_gsl_sf_exp_err_e($426,$438,$17)|0);
     $439 = +HEAPF64[$17>>3];
     $440 = $348 * $439;
     HEAPF64[$17>>3] = $440;
     $$pre$phi391$iZ2D = $423;$$pre$phi392$iZ2D = $16;$$pre$phi393$iZ2D = $17;
     label = 67;
     break;
    } else {
     HEAPF64[$4>>3] = inf;
     HEAPF64[$64>>3] = inf;
     _gsl_error(82926,82569,596,16);
     $$9$i = 16;
     break;
    }
   }
  } while(0);
  if ((label|0) == 67) {
   $441 = 1.0 - $42;
   $442 = (_hyperg_2F1_series($0,$1,$441,$$pre$phi391$iZ2D,$18)|0);
   $443 = $42 + 1.0;
   $444 = (_hyperg_2F1_series($41,$110,$443,$$pre$phi391$iZ2D,$19)|0);
   $445 = +HEAPF64[$$pre$phi392$iZ2D>>3];
   $446 = +HEAPF64[$18>>3];
   $447 = $445 * $446;
   $448 = +HEAPF64[$$pre$phi393$iZ2D>>3];
   $449 = +HEAPF64[$19>>3];
   $450 = $448 * $449;
   $451 = $447 + $450;
   HEAPF64[$4>>3] = $451;
   $452 = ((($18)) + 8|0);
   $453 = +HEAPF64[$452>>3];
   $454 = $445 * $453;
   $455 = (+Math_abs((+$454)));
   $456 = ((($19)) + 8|0);
   $457 = +HEAPF64[$456>>3];
   $458 = $448 * $457;
   $459 = (+Math_abs((+$458)));
   $460 = $455 + $459;
   $461 = ((($16)) + 8|0);
   $462 = +HEAPF64[$461>>3];
   $463 = $446 * $462;
   $464 = (+Math_abs((+$463)));
   $465 = ((($17)) + 8|0);
   $466 = +HEAPF64[$465>>3];
   $467 = $449 * $466;
   $468 = (+Math_abs((+$467)));
   $469 = $464 + $468;
   $470 = $460 + $469;
   $471 = (+Math_abs((+$447)));
   $472 = (+Math_abs((+$450)));
   $473 = $471 + $472;
   $474 = $473 * 4.4408920985006262E-16;
   $475 = $474 + $470;
   $476 = (+Math_abs((+$451)));
   $477 = $476 * 4.4408920985006262E-16;
   $478 = $477 + $475;
   HEAPF64[$64>>3] = $478;
   $479 = ($442|0)==(0);
   $spec$select371$i = $479 ? $444 : $442;
   $$9$i = $spec$select371$i;
  }
  $$2 = $$9$i;
  STACKTOP = sp;return ($$2|0);
 }
 $160 = 1.0 - $3;
 $161 = (+Math_log((+$160)));
 $162 = (+Math_abs((+$42)));
 $163 = !($42 >= 0.0);
 $$$i = $163 ? $42 : 0.0;
 $$363$i = $163 ? 0.0 : $42;
 $164 = $$$i + $0;
 $165 = (_gsl_sf_lngamma_e($164,$8)|0);
 $166 = $$$i + $1;
 $167 = (_gsl_sf_lngamma_e($166,$9)|0);
 (_gsl_sf_lngamma_e($2,$7)|0);
 $168 = $162 < 2.2204460492503131E-16;
 do {
  if ($168) {
   ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
   label = 41;
  } else {
   $169 = (_gsl_sf_lngamma_e($162,$10)|0);
   $170 = $$363$i + $0;
   $171 = (_gsl_sf_lngamma_e($170,$11)|0);
   $172 = $$363$i + $1;
   $173 = (_gsl_sf_lngamma_e($172,$12)|0);
   $174 = $171 | $169;
   $175 = $174 | $173;
   $176 = ($175|0)==(0);
   if ($176) {
    $177 = +HEAPF64[$10>>3];
    $178 = +HEAPF64[$7>>3];
    $179 = $177 + $178;
    $180 = $161 * $$$i;
    $181 = $180 + $179;
    $182 = +HEAPF64[$11>>3];
    $183 = $181 - $182;
    $184 = +HEAPF64[$12>>3];
    $185 = $183 - $184;
    $186 = ((($10)) + 8|0);
    $187 = +HEAPF64[$186>>3];
    $188 = ((($7)) + 8|0);
    $189 = +HEAPF64[$188>>3];
    $190 = $187 + $189;
    $191 = ((($11)) + 8|0);
    $192 = +HEAPF64[$191>>3];
    $193 = $190 + $192;
    $194 = ((($12)) + 8|0);
    $195 = +HEAPF64[$194>>3];
    $196 = $193 + $195;
    $197 = (+Math_abs((+$185)));
    $198 = $197 * 2.2204460492503131E-16;
    $199 = $198 + $196;
    $200 = $162 > 1.0;
    if ($200) {
     $201 = $$$i + 1.0;
     $$0345382$i = 1;$$0346381$i = 1.0;$$0347380$i = 1.0;$210 = 1.0;
     while(1) {
      $202 = (($$0345382$i) + -1)|0;
      $203 = (+($202|0));
      $204 = $164 + $203;
      $205 = $166 + $203;
      $206 = $204 * $205;
      $207 = $201 + $203;
      $208 = $206 / $207;
      $209 = $208 / $210;
      $211 = $160 * $209;
      $212 = $$0347380$i * $211;
      $213 = $$0346381$i + $212;
      $214 = (($$0345382$i) + 1)|0;
      $215 = (+($214|0));
      $216 = $162 > $215;
      if ($216) {
       $$0345382$i = $214;$$0346381$i = $213;$$0347380$i = $212;$210 = $215;
      } else {
       $$0346$lcssa$i = $213;
       break;
      }
     }
    } else {
     $$0346$lcssa$i = 1.0;
    }
    $217 = (+Math_abs((+$$0346$lcssa$i)));
    $218 = $217 * 2.2204460492503131E-16;
    $219 = (_gsl_sf_exp_mult_err_e($185,$199,$$0346$lcssa$i,$218,$5)|0);
    $220 = ($219|0)==(16);
    if ($220) {
     HEAPF64[$4>>3] = inf;
     HEAPF64[$64>>3] = inf;
     _gsl_error(82926,82569,440,16);
     $$5$i = 16;
     break;
    }
   } else {
    ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
   }
   label = 41;
  }
 } while(0);
 L105: do {
  if ((label|0) == 41) {
   $221 = $167 | $165;
   $222 = ($221|0)==(0);
   if ($222) {
    $223 = $162 + 1.0;
    $224 = (_gsl_sf_psi_e($223,$13)|0);
    $225 = $$363$i + $0;
    $226 = (_gsl_sf_psi_e($225,$14)|0);
    $227 = $$363$i + $1;
    $228 = (_gsl_sf_psi_e($227,$15)|0);
    $229 = ($224|0)==(0);
    $230 = ($226|0)==(0);
    $$364$i = $230 ? $228 : $226;
    $231 = $229 ? $$364$i : $224;
    $232 = +HEAPF64[$13>>3];
    $233 = $232 + -0.57721566490153287;
    $234 = +HEAPF64[$14>>3];
    $235 = $233 - $234;
    $236 = +HEAPF64[$15>>3];
    $237 = $235 - $236;
    $238 = $237 - $161;
    $239 = ((($13)) + 8|0);
    $240 = +HEAPF64[$239>>3];
    $241 = ((($14)) + 8|0);
    $242 = +HEAPF64[$241>>3];
    $243 = $240 + $242;
    $244 = ((($15)) + 8|0);
    $245 = +HEAPF64[$244>>3];
    $246 = $243 + $245;
    $247 = (+Math_abs((+$238)));
    $248 = $247 * 2.2204460492503131E-16;
    $249 = $246 + $248;
    $250 = +HEAPF64[$7>>3];
    $251 = $161 * $$363$i;
    $252 = $251 + $250;
    $253 = +HEAPF64[$8>>3];
    $254 = $252 - $253;
    $255 = +HEAPF64[$9>>3];
    $256 = $254 - $255;
    $257 = ((($7)) + 8|0);
    $258 = +HEAPF64[$257>>3];
    $259 = ((($8)) + 8|0);
    $260 = +HEAPF64[$259>>3];
    $261 = $258 + $260;
    $262 = ((($9)) + 8|0);
    $263 = +HEAPF64[$262>>3];
    $264 = $261 + $263;
    $265 = (+Math_abs((+$256)));
    $266 = $265 * 2.2204460492503131E-16;
    $267 = $266 + $264;
    $$0355379$i = $238;$$0356378$i = $249;$$0357377$i = 1.0;$$0358376$i = $238;$$0360375$i = $249;$$0362374$i = 1;
    while(1) {
     $268 = (+($$0362374$i|0));
     $269 = 1.0 / $268;
     $270 = $162 + $268;
     $271 = 1.0 / $270;
     $272 = $269 + $271;
     $273 = $225 + $268;
     $274 = $273 + -1.0;
     $275 = 1.0 / $274;
     $276 = $227 + $268;
     $277 = $276 + -1.0;
     $278 = 1.0 / $277;
     $279 = $275 + $278;
     $280 = $272 - $279;
     $281 = $$0355379$i + $280;
     $282 = (+Math_abs((+$272)));
     $283 = (+Math_abs((+$279)));
     $284 = $282 + $283;
     $285 = $284 * 2.2204460492503131E-16;
     $286 = $$0356378$i + $285;
     $287 = $274 * $277;
     $288 = $270 * $268;
     $289 = $287 / $288;
     $290 = $160 * $289;
     $291 = $$0357377$i * $290;
     $292 = $291 * $281;
     $293 = $$0358376$i + $292;
     $294 = $291 * $286;
     $295 = (+Math_abs((+$294)));
     $296 = (+Math_abs((+$292)));
     $297 = $296 * 2.2204460492503131E-16;
     $298 = $297 + $295;
     $299 = $$0360375$i + $298;
     $300 = (+Math_abs((+$293)));
     $301 = $300 * 2.2204460492503131E-16;
     $302 = !($296 < $301);
     if (!($302)) {
      $$0362$lcssa$i = $$0362374$i;
      break;
     }
     $303 = (($$0362374$i) + 1)|0;
     $304 = ($303>>>0)<(2000);
     if ($304) {
      $$0355379$i = $281;$$0356378$i = $286;$$0357377$i = $291;$$0358376$i = $293;$$0360375$i = $299;$$0362374$i = $303;
     } else {
      $$0362$lcssa$i = 2000;
      break;
     }
    }
    $305 = ($$0362$lcssa$i|0)==(2000);
    $306 = $293 == 0.0;
    do {
     if ($306) {
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
      $$pre$i = 0.0;$$pre386$i = 0.0;
     } else {
      $307 = (_gsl_sf_exp_mult_err_e($256,$267,$293,$299,$6)|0);
      $308 = ($307|0)==(16);
      if ($308) {
       ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
       _gsl_error(82813,82569,509,16);
       $$5$i = 16;
       break L105;
      } else {
       $$pre$pre$i = +HEAPF64[$6>>3];
       $$phi$trans$insert385$phi$trans$insert$i = ((($6)) + 8|0);
       $$pre386$pre$i = +HEAPF64[$$phi$trans$insert385$phi$trans$insert$i>>3];
       $$pre$i = $$pre$pre$i;$$pre386$i = $$pre386$pre$i;
       break;
      }
     }
    } while(0);
    $$spec$select$i = $305 ? 11 : $231;
    $$2342$i = $$spec$select$i;$314 = $$pre$i;$319 = $$pre386$i;
   } else {
    ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
    $$2342$i = 0;$314 = 0.0;$319 = 0.0;
   }
   $309 = $155 & 1;
   $310 = ($309|0)==(0);
   $311 = $310 ? 1.0 : -1.0;
   $312 = +HEAPF64[$5>>3];
   $313 = $311 * $314;
   $315 = $313 + $312;
   HEAPF64[$4>>3] = $315;
   $316 = ((($5)) + 8|0);
   $317 = +HEAPF64[$316>>3];
   $318 = $319 + $317;
   $320 = (+Math_abs((+$312)));
   $321 = (+Math_abs((+$314)));
   $322 = $321 + $320;
   $323 = $322 * 4.4408920985006262E-16;
   $324 = $323 + $318;
   $325 = (+Math_abs((+$315)));
   $326 = $325 * 4.4408920985006262E-16;
   $327 = $326 + $324;
   HEAPF64[$64>>3] = $327;
   $$5$i = $$2342$i;
  }
 } while(0);
 $$2 = $$5$i;
 STACKTOP = sp;return ($$2|0);
}
function _hyperg_2F1_series($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$0 = 0, $$071 = 0.0, $$072 = 0, $$073 = 0.0, $$074 = 0.0, $$076 = 0.0, $$079 = 0.0, $$082 = 0.0, $$1 = 0.0, $$175 = 0.0, $$177 = 0.0, $$180 = 0.0, $$183 = 0.0, $$2 = 0.0, $$278 = 0.0, $$281 = 0.0, $$284 = 0.0, $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0.0;
 var $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0;
 var $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (+Math_abs((+$2)));
 $6 = $5 < 2.2204460492503131E-16;
 if ($6) {
  HEAPF64[$4>>3] = 0.0;
  $7 = ((($4)) + 8|0);
  HEAPF64[$7>>3] = 1.0;
  _gsl_error(82813,82569,57,1);
  $$072 = 1;
  return ($$072|0);
 }
 $$0 = 0;$$071 = 0.0;$$073 = 1.0;$$074 = 0.0;$$076 = 1.0;$$079 = 0.0;$$082 = 1.0;
 while(1) {
  $8 = (($$0) + 1)|0;
  $9 = ($$0>>>0)>(29999);
  if ($9) {
   label = 5;
   break;
  }
  $23 = $$071 + $0;
  $24 = $$071 + $1;
  $25 = $23 * $24;
  $26 = $25 * $3;
  $27 = $$071 + $2;
  $28 = $$071 + 1.0;
  $29 = $27 * $28;
  $30 = $26 / $29;
  $31 = $$073 * $30;
  $32 = $31 > 0.0;
  if ($32) {
   $33 = $$082 + $31;
   $$175 = $$074;$$177 = $31;$$180 = $$079;$$183 = $33;
  } else {
   $34 = $31 == 0.0;
   if ($34) {
    label = 9;
    break;
   }
   $35 = - $31;
   $36 = $$079 - $31;
   $$175 = $35;$$177 = $$076;$$180 = $36;$$183 = $$082;
  }
  $37 = $$183 - $$180;
  $38 = $$073 / $37;
  $39 = (+Math_abs((+$38)));
  $40 = $39 < 2.2204460492503131E-16;
  if ($40) {
   $41 = $31 / $37;
   $42 = (+Math_abs((+$41)));
   $43 = $42 < 2.2204460492503131E-16;
   if ($43) {
    $$1 = $$071;$$2 = $$175;$$278 = $$177;$$281 = $$180;$$284 = $$183;$$pre$phiZ2D = $37;
    break;
   }
  }
  $44 = $$177 + $$175;
  $45 = $44 / $37;
  $46 = (+Math_abs((+$45)));
  $47 = $46 > 2.2204460492503131E-16;
  if ($47) {
   $$0 = $8;$$071 = $28;$$073 = $31;$$074 = $$175;$$076 = $$177;$$079 = $$180;$$082 = $$183;
  } else {
   $$1 = $28;$$2 = $$175;$$278 = $$177;$$281 = $$180;$$284 = $$183;$$pre$phiZ2D = $37;
   break;
  }
 }
 if ((label|0) == 5) {
  $10 = $$082 - $$079;
  HEAPF64[$4>>3] = $10;
  $11 = $$076 + $$074;
  $12 = ((($4)) + 8|0);
  $13 = $$082 + $$079;
  $14 = $13 * 4.4408920985006262E-16;
  $15 = $14 + $11;
  $16 = (+Math_sqrt((+$$071)));
  $17 = $16 * 2.0;
  $18 = $17 + 1.0;
  $19 = $18 * 4.4408920985006262E-16;
  $20 = (+Math_abs((+$10)));
  $21 = $20 * $19;
  $22 = $15 + $21;
  HEAPF64[$12>>3] = $22;
  _gsl_error(82813,82569,66,11);
  $$072 = 11;
  return ($$072|0);
 }
 else if ((label|0) == 9) {
  $$pre = $$082 - $$079;
  $$1 = $$071;$$2 = 0.0;$$278 = 0.0;$$281 = $$079;$$284 = $$082;$$pre$phiZ2D = $$pre;
 }
 HEAPF64[$4>>3] = $$pre$phiZ2D;
 $48 = $$278 + $$2;
 $49 = ((($4)) + 8|0);
 $50 = $$284 + $$281;
 $51 = $50 * 4.4408920985006262E-16;
 $52 = $51 + $48;
 $53 = (+Math_sqrt((+$$1)));
 $54 = $53 * 2.0;
 $55 = $54 + 1.0;
 $56 = $55 * 4.4408920985006262E-16;
 $57 = (+Math_abs((+$$pre$phiZ2D)));
 $58 = $57 * $56;
 $59 = $52 + $58;
 HEAPF64[$49>>3] = $59;
 $$072 = 0;
 return ($$072|0);
}
function _hyperg_2F1_luke($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$0232 = 0, $$0233 = 0.0, $$0234 = 0.0, $$0235 = 0.0, $$0236 = 0.0, $$0238 = 0.0, $$0240 = 0.0, $$0243 = 0.0, $$0245 = 0.0, $$0248 = 0.0, $$1239 = 0.0, $$1241 = 0.0, $$1246 = 0.0, $$1249 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0;
 var $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0;
 var $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0;
 var $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0;
 var $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond251 = 0, $spec$select = 0.0;
 var $spec$select259 = 0.0, $spec$select260 = 0.0, $spec$select261 = 0.0, $spec$select262 = 0.0, $spec$select263 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = - $3;
 $6 = $3 * $3;
 $7 = $6 * $5;
 $8 = $0 * $1;
 $9 = $8 / $2;
 $10 = $0 + 1.0;
 $11 = $1 + 1.0;
 $12 = $10 * $11;
 $13 = $2 * 2.0;
 $14 = $12 / $13;
 $15 = $0 + 2.0;
 $16 = $1 + 2.0;
 $17 = $15 * $16;
 $18 = $2 + 1.0;
 $19 = $18 * 2.0;
 $20 = $17 / $19;
 $21 = $14 * $5;
 $22 = $21 + 1.0;
 $23 = $20 * $5;
 $24 = $14 / 3.0;
 $25 = $24 * $5;
 $26 = $25 + 1.0;
 $27 = $23 * $26;
 $28 = $27 + 1.0;
 $29 = $9 * $5;
 $30 = $22 - $29;
 $31 = $23 + 1.0;
 $32 = $9 * $31;
 $33 = $32 * $5;
 $34 = $28 - $33;
 $35 = $9 * $14;
 $36 = $2 / $18;
 $37 = $36 * $35;
 $38 = $37 * $5;
 $39 = $38 * $5;
 $40 = $39 + $34;
 $41 = $0 + $1;
 $42 = $41 + -6.0;
 $43 = $41 * 2.0;
 $44 = $41 + 6.0;
 $$0232 = 3;$$0235 = 1.0;$$0236 = 1.0;$$0238 = $22;$$0240 = $28;$$0243 = 1.0;$$0245 = $30;$$0248 = $40;
 while(1) {
  $45 = (+($$0232|0));
  $46 = $45 + $0;
  $47 = $46 + -1.0;
  $48 = $45 + $1;
  $49 = $48 + -1.0;
  $50 = $45 + $2;
  $51 = $50 + -1.0;
  $52 = $46 + -2.0;
  $53 = $48 + -2.0;
  $54 = $50 + -2.0;
  $55 = $$0232 << 1;
  $56 = (($55) + -1)|0;
  $57 = (+($56|0));
  $58 = (($55) + -3)|0;
  $59 = (+($58|0));
  $60 = (($55) + -5)|0;
  $61 = (+($60|0));
  $62 = Math_imul($$0232, $$0232)|0;
  $63 = (+($62|0));
  $64 = $63 * 3.0;
  $65 = $42 * $45;
  $66 = $65 + $64;
  $67 = $66 + 2.0;
  $68 = $67 - $8;
  $69 = $68 - $43;
  $70 = $59 * 2.0;
  $71 = $51 * $70;
  $72 = $69 / $71;
  $73 = $44 * $45;
  $74 = $64 - $73;
  $75 = $74 + 2.0;
  $76 = $75 - $8;
  $77 = $47 * $76;
  $78 = $49 * $77;
  $79 = - $78;
  $80 = $57 * 4.0;
  $81 = $80 * $59;
  $82 = $54 * $81;
  $83 = $51 * $82;
  $84 = $79 / $83;
  $85 = $52 * $47;
  $86 = $53 * $85;
  $87 = $49 * $86;
  $88 = $45 - $0;
  $89 = $88 + -2.0;
  $90 = $89 * $87;
  $91 = $45 - $1;
  $92 = $91 + -2.0;
  $93 = $92 * $90;
  $94 = $59 * 8.0;
  $95 = $94 * $59;
  $96 = $95 * $61;
  $97 = $50 + -3.0;
  $98 = $97 * $96;
  $99 = $54 * $98;
  $100 = $51 * $99;
  $101 = $93 / $100;
  $102 = $47 * $49;
  $103 = $45 - $2;
  $104 = $103 + -1.0;
  $105 = $104 * $102;
  $106 = - $105;
  $107 = $54 * $70;
  $108 = $51 * $107;
  $109 = $106 / $108;
  $110 = $72 * $5;
  $111 = $110 + 1.0;
  $112 = $$0248 * $111;
  $113 = $84 * $5;
  $114 = $109 + $113;
  $115 = $114 * $5;
  $116 = $$0245 * $115;
  $117 = $112 + $116;
  $118 = $7 * $101;
  $119 = $$0243 * $118;
  $120 = $119 + $117;
  $121 = $$0240 * $111;
  $122 = $$0238 * $115;
  $123 = $121 + $122;
  $124 = $$0236 * $118;
  $125 = $124 + $123;
  $126 = $120 / $125;
  $127 = $$0235 - $126;
  $128 = $127 / $$0235;
  $129 = (+Math_abs((+$128)));
  $130 = $129 < 2.2204460492503131E-16;
  $131 = ($$0232>>>0)>(20000);
  $or$cond = $131 | $130;
  if ($or$cond) {
   break;
  }
  $132 = (+Math_abs((+$120)));
  $133 = $132 > 1.0000000000000001E+50;
  if ($133) {
   label = 5;
  } else {
   $134 = (+Math_abs((+$125)));
   $135 = $134 > 1.0000000000000001E+50;
   if ($135) {
    label = 5;
   } else {
    $142 = $132 < 9.9999999999999988E-51;
    $143 = $134 < 9.9999999999999988E-51;
    $or$cond251 = $142 | $143;
    $144 = $120 * 1.0000000000000001E+50;
    $145 = $125 * 1.0000000000000001E+50;
    $146 = $$0248 * 1.0000000000000001E+50;
    $147 = $$0240 * 1.0000000000000001E+50;
    $148 = $$0245 * 1.0000000000000001E+50;
    $149 = $$0238 * 1.0000000000000001E+50;
    $spec$select = $or$cond251 ? $146 : $$0248;
    $spec$select259 = $or$cond251 ? $148 : $$0245;
    $spec$select260 = $or$cond251 ? $147 : $$0240;
    $spec$select261 = $or$cond251 ? $149 : $$0238;
    $spec$select262 = $or$cond251 ? $144 : $120;
    $spec$select263 = $or$cond251 ? $145 : $125;
    $$0233 = $spec$select263;$$0234 = $spec$select262;$$1239 = $spec$select261;$$1241 = $spec$select260;$$1246 = $spec$select259;$$1249 = $spec$select;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $136 = $120 / 1.0000000000000001E+50;
   $137 = $125 / 1.0000000000000001E+50;
   $138 = $$0248 / 1.0000000000000001E+50;
   $139 = $$0240 / 1.0000000000000001E+50;
   $140 = $$0245 / 1.0000000000000001E+50;
   $141 = $$0238 / 1.0000000000000001E+50;
   $$0233 = $137;$$0234 = $136;$$1239 = $141;$$1241 = $139;$$1246 = $140;$$1249 = $138;
  }
  $150 = (($$0232) + 1)|0;
  $$0232 = $150;$$0235 = $126;$$0236 = $$1239;$$0238 = $$1241;$$0240 = $$0233;$$0243 = $$1246;$$0245 = $$1249;$$0248 = $$0234;
 }
 HEAPF64[$4>>3] = $126;
 $151 = $126 * $129;
 $152 = (+Math_abs((+$151)));
 $153 = $152 * 2.0;
 $154 = ((($4)) + 8|0);
 $155 = $45 + 1.0;
 $156 = $155 * 4.4408920985006262E-16;
 $157 = (+Math_abs((+$126)));
 $158 = $156 * $157;
 $159 = $158 + $153;
 $160 = (+Math_abs((+$0)));
 $161 = (+Math_abs((+$1)));
 $162 = $160 + $161;
 $163 = $162 + 1.0;
 $164 = $163 * 8.0;
 $165 = $164 * $159;
 HEAPF64[$154>>3] = $165;
 $166 = ($$0232>>>0)>(19999);
 $167 = $166 ? 11 : 0;
 return ($167|0);
}
function _gsl_sf_hyperg_2F1($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (_gsl_sf_hyperg_2F1_e($0,$1,$2,$3,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  _gsl_error(82582,82569,948,$5);
 }
 $7 = +HEAPF64[$4>>3];
 STACKTOP = sp;return (+$7);
}
function _gsl_sf_hyperg_1F1_series_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$079129 = 0.0, $$081128 = 0.0, $$083127 = 0.0, $$085126 = 0.0, $$089125 = 0.0, $$091124 = 0.0, $$093123 = 0.0, $$2 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$079129 = $0;$$081128 = 0.0;$$083127 = 1.0;$$085126 = 1.0;$$089125 = 1.0;$$091124 = 1.0;$$093123 = $1;$10 = 1.0;
 while(1) {
  $4 = $$093123 == 0.0;
  if ($4) {
   label = 3;
   break;
  }
  $6 = $$079129 == 0.0;
  if ($6) {
   label = 5;
   break;
  }
  $12 = $$091124 > 1.0E+4;
  if ($12) {
   label = 7;
   break;
  }
  $14 = $$093123 * $$091124;
  $15 = $$079129 / $14;
  $16 = $15 * $2;
  $17 = (+Math_abs((+$16)));
  $18 = $17 > 1.0;
  $19 = 1.7976931348623157E+308 / $17;
  $20 = $$085126 > $19;
  $or$cond = $18 & $20;
  if ($or$cond) {
   label = 9;
   break;
  }
  $22 = $$089125 * $16;
  $23 = $$083127 + $22;
  $24 = (+Math_abs((+$23)));
  $25 = $24 > 1.7976931348623158E+303;
  if ($25) {
   label = 11;
   break;
  }
  $27 = (+Math_abs((+$22)));
  $28 = $27 > $$085126;
  $29 = $28 ? $27 : $$085126;
  $30 = $27 * 4.4408920985006262E-16;
  $31 = $$081128 + $30;
  $32 = $$079129 + 1.0;
  $33 = $$093123 + 1.0;
  $34 = $$091124 + 1.0;
  $35 = $27 / $24;
  $36 = $35 > 5.5511151231257827E-17;
  if ($36) {
   $$079129 = $32;$$081128 = $31;$$083127 = $23;$$085126 = $29;$$089125 = $22;$$091124 = $34;$$093123 = $33;$10 = $24;
  } else {
   label = 13;
   break;
  }
 }
 if ((label|0) == 3) {
  HEAPF64[$3>>3] = nan;
  $5 = ((($3)) + 8|0);
  HEAPF64[$5>>3] = nan;
  _gsl_error(82896,82623,55,1);
  $$2 = 1;
  return ($$2|0);
 }
 else if ((label|0) == 5) {
  HEAPF64[$3>>3] = $$083127;
  $7 = ((($3)) + 8|0);
  $8 = $$091124 * 4.4408920985006262E-16;
  $9 = $8 * $10;
  $11 = $$081128 + $9;
  HEAPF64[$7>>3] = $11;
  $$2 = 0;
  return ($$2|0);
 }
 else if ((label|0) == 7) {
  HEAPF64[$3>>3] = $$083127;
  $13 = ((($3)) + 8|0);
  HEAPF64[$13>>3] = $$081128;
  _gsl_error(82632,82623,68,5);
  $$2 = 5;
  return ($$2|0);
 }
 else if ((label|0) == 9) {
  HEAPF64[$3>>3] = $$083127;
  $21 = ((($3)) + 8|0);
  HEAPF64[$21>>3] = $10;
  _gsl_error(82926,82623,76,16);
  $$2 = 16;
  return ($$2|0);
 }
 else if ((label|0) == 11) {
  HEAPF64[$3>>3] = $23;
  $26 = ((($3)) + 8|0);
  HEAPF64[$26>>3] = $24;
  _gsl_error(82926,82623,83,16);
  $$2 = 16;
  return ($$2|0);
 }
 else if ((label|0) == 13) {
  HEAPF64[$3>>3] = $23;
  $37 = ((($3)) + 8|0);
  $38 = $27 + $31;
  $39 = $34 * 4.4408920985006262E-16;
  $40 = $39 * $24;
  $41 = $38 + $40;
  HEAPF64[$37>>3] = $41;
  $$2 = 0;
  return ($$2|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_U_large_b_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$0149 = 0.0, $$0150 = 0.0, $$1 = 0, $$3 = 0, $$sroa$0$0 = 0.0, $$sroa$0165$0 = 0.0, $$sroa$0173$0 = 0.0, $$sroa$0173$1 = 0.0, $$sroa$0173$2 = 0.0, $$sroa$8$0 = 0.0, $$sroa$8170$0 = 0.0, $$sroa$9$0 = 0.0, $$sroa$9$1 = 0.0, $$sroa$9$2 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0;
 var $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0;
 var $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0;
 var $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0;
 var $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0;
 var $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0;
 var $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0;
 var $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0;
 var $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0.0;
 var $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0;
 var $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0;
 var $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0;
 var $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $5 = sp + 160|0;
 $6 = sp + 144|0;
 $7 = sp + 128|0;
 $8 = sp + 112|0;
 $9 = sp + 96|0;
 $10 = sp + 80|0;
 $11 = sp + 72|0;
 $12 = sp + 56|0;
 $13 = sp + 48|0;
 $14 = sp + 32|0;
 $15 = sp + 24|0;
 $16 = sp + 8|0;
 $17 = sp;
 $18 = (+Math_floor((+$1)));
 $19 = $1 - $18;
 $20 = (+Math_abs((+$19)));
 $21 = $20 < 1.4901161193847656E-8;
 if (!($21)) {
  $148 = 1.0 - $1;
  $149 = (+Math_log((+$2)));
  $150 = $148 * $149;
  $151 = $2 / $1;
  $152 = (+Math_abs((+$151)));
  $153 = $152 < 1.0;
  if ($153) {
   $154 = 1.0 - $151;
   $155 = 1.0 / $154;
   $156 = (+Math_pow((+$155),(+$0)));
   $157 = $151 * $155;
   $158 = $157 * $157;
   $159 = $0 + 1.0;
   $160 = $159 * $0;
   $161 = $1 * 2.0;
   $162 = $160 / $161;
   $163 = $162 * $158;
   $164 = $1 * 24.0;
   $165 = $164 * $1;
   $166 = $160 / $165;
   $167 = $166 * $158;
   $168 = $0 + 2.0;
   $169 = $168 * 16.0;
   $170 = $169 * $157;
   $171 = $170 + 12.0;
   $172 = $168 * 3.0;
   $173 = $0 + 3.0;
   $174 = $173 * $172;
   $175 = $174 * $158;
   $176 = $171 + $175;
   $177 = $167 * $176;
   $178 = 1.0 - $163;
   $179 = $178 + $177;
   $180 = $156 * $179;
   $181 = $156 * 2.2204460492503131E-16;
   $182 = (+Math_abs((+$163)));
   $183 = $182 + 1.0;
   $184 = (+Math_abs((+$177)));
   $185 = $183 + $184;
   $186 = $181 * $185;
   $187 = (+Math_abs((+$180)));
   $188 = $187 * 4.4408920985006262E-16;
   $189 = $186 + $188;
   $$sroa$0165$0 = $180;$$sroa$8170$0 = $189;
  } else {
   _gsl_error(82896,82623,123,1);
   $$sroa$0165$0 = nan;$$sroa$8170$0 = nan;
  }
  $190 = 1.0 - $0;
  $191 = 2.0 - $1;
  $192 = $2 / $191;
  $193 = (+Math_abs((+$192)));
  $194 = $193 < 1.0;
  if ($194) {
   $195 = 1.0 - $192;
   $196 = 1.0 / $195;
   $197 = (+Math_pow((+$196),(+$190)));
   $198 = $192 * $196;
   $199 = $198 * $198;
   $200 = $190 + 1.0;
   $201 = $190 * $200;
   $202 = $191 * 2.0;
   $203 = $201 / $202;
   $204 = $203 * $199;
   $205 = $191 * 24.0;
   $206 = $191 * $205;
   $207 = $201 / $206;
   $208 = $207 * $199;
   $209 = $190 + 2.0;
   $210 = $209 * 16.0;
   $211 = $210 * $198;
   $212 = $211 + 12.0;
   $213 = $209 * 3.0;
   $214 = $190 + 3.0;
   $215 = $214 * $213;
   $216 = $215 * $199;
   $217 = $212 + $216;
   $218 = $208 * $217;
   $219 = 1.0 - $204;
   $220 = $219 + $218;
   $221 = $197 * $220;
   $222 = $197 * 2.2204460492503131E-16;
   $223 = (+Math_abs((+$204)));
   $224 = $223 + 1.0;
   $225 = (+Math_abs((+$218)));
   $226 = $224 + $225;
   $227 = $222 * $226;
   $228 = (+Math_abs((+$221)));
   $229 = $228 * 4.4408920985006262E-16;
   $230 = $227 + $229;
   $$sroa$0$0 = $221;$$sroa$8$0 = $230;
  } else {
   _gsl_error(82896,82623,123,1);
   $$sroa$0$0 = nan;$$sroa$8$0 = nan;
  }
  (_gsl_sf_lngamma_sgn_e($148,$10,$11)|0);
  $231 = $0 + 1.0;
  $232 = $231 - $1;
  (_gsl_sf_lngamma_sgn_e($232,$12,$13)|0);
  $233 = $1 + -1.0;
  (_gsl_sf_lngamma_sgn_e($233,$14,$15)|0);
  (_gsl_sf_lngamma_sgn_e($0,$16,$17)|0);
  $234 = +HEAPF64[$10>>3];
  $235 = +HEAPF64[$12>>3];
  $236 = $234 - $235;
  $237 = ((($10)) + 8|0);
  $238 = +HEAPF64[$237>>3];
  $239 = ((($12)) + 8|0);
  $240 = +HEAPF64[$239>>3];
  $241 = $238 + $240;
  $242 = +HEAPF64[$14>>3];
  $243 = +HEAPF64[$16>>3];
  $244 = $242 - $243;
  $245 = $244 - $150;
  $246 = $245 - $2;
  $247 = ((($14)) + 8|0);
  $248 = +HEAPF64[$247>>3];
  $249 = ((($16)) + 8|0);
  $250 = +HEAPF64[$249>>3];
  $251 = $248 + $250;
  $252 = (+Math_abs((+$150)));
  $253 = (+Math_abs((+$2)));
  $254 = $253 + $252;
  $255 = $254 * 2.2204460492503131E-16;
  $256 = $255 + $251;
  $257 = +HEAPF64[$11>>3];
  $258 = +HEAPF64[$13>>3];
  $259 = $257 * $258;
  $260 = +HEAPF64[$15>>3];
  $261 = +HEAPF64[$17>>3];
  $262 = $260 * $261;
  $263 = $236 > 699.78271289338397;
  $264 = $246 > 699.78271289338397;
  $or$cond = $263 | $264;
  if ($or$cond) {
   $265 = $236 > $246;
   $266 = $265 ? $236 : $246;
   $267 = $241 > $256;
   $268 = $267 ? $241 : $256;
   $269 = $236 - $266;
   $270 = $246 - $266;
   $271 = (+Math_exp((+$269)));
   $272 = $259 * $271;
   $273 = (+Math_exp((+$270)));
   $274 = $262 * $273;
   $275 = $$sroa$0165$0 * $272;
   $276 = $$sroa$0$0 * $274;
   $277 = $275 + $276;
   HEAPF64[$3>>3] = $277;
   $278 = (+Math_abs((+$272)));
   $279 = $$sroa$8170$0 * $278;
   $280 = (+Math_abs((+$274)));
   $281 = $$sroa$8$0 * $280;
   $282 = $279 + $281;
   $283 = ((($3)) + 8|0);
   $284 = (+Math_exp((+$268)));
   $285 = $284 * 2.2204460492503131E-16;
   $286 = (+Math_abs((+$275)));
   $287 = (+Math_abs((+$276)));
   $288 = $286 + $287;
   $289 = $285 * $288;
   $290 = $282 + $289;
   $291 = (+Math_abs((+$277)));
   $292 = $291 * 4.4408920985006262E-16;
   $293 = $292 + $290;
   HEAPF64[$283>>3] = $293;
   HEAPF64[$4>>3] = $266;
   _gsl_error(82926,82623,215,16);
   $$1 = 16;
  } else {
   $294 = (+Math_exp((+$236)));
   $295 = $294 * $259;
   $296 = (+Math_exp((+$246)));
   $297 = $296 * $262;
   $298 = $$sroa$0165$0 * $295;
   $299 = $$sroa$0$0 * $297;
   $300 = $298 + $299;
   HEAPF64[$3>>3] = $300;
   $301 = (+Math_abs((+$295)));
   $302 = $$sroa$8170$0 * $301;
   $303 = (+Math_abs((+$297)));
   $304 = $$sroa$8$0 * $303;
   $305 = $302 + $304;
   $306 = ((($3)) + 8|0);
   $307 = (+Math_exp((+$241)));
   $308 = (+Math_abs((+$298)));
   $309 = $307 * $308;
   $310 = (+Math_exp((+$256)));
   $311 = (+Math_abs((+$299)));
   $312 = $310 * $311;
   $313 = $309 + $312;
   $314 = $313 * 2.2204460492503131E-16;
   $315 = $305 + $314;
   $316 = (+Math_abs((+$300)));
   $317 = $316 * 4.4408920985006262E-16;
   $318 = $317 + $315;
   HEAPF64[$306>>3] = $318;
   HEAPF64[$4>>3] = 0.0;
   $$1 = 0;
  }
  $$3 = $$1;
  STACKTOP = sp;return ($$3|0);
 }
 $22 = $1 > 1.0;
 if ($22) {
  $23 = 1.0 - $1;
  $24 = (+Math_log((+$2)));
  $25 = $23 * $24;
  $26 = $1 + -1.0;
  (_gsl_sf_lngamma_e($26,$5)|0);
  (_gsl_sf_lngamma_e($0,$6)|0);
  $27 = $25 + $2;
  $28 = +HEAPF64[$5>>3];
  $29 = $27 + $28;
  $30 = +HEAPF64[$6>>3];
  $31 = $29 - $30;
  $32 = ((($5)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = ((($6)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $33 + $35;
  $37 = (+Math_abs((+$2)));
  $38 = (+Math_abs((+$25)));
  $39 = $37 + $38;
  $40 = $39 * 2.2204460492503131E-16;
  $41 = $40 + $36;
  $42 = 1.0 - $0;
  $43 = 2.0 - $1;
  $44 = - $2;
  $45 = $44 / $43;
  $46 = (+Math_abs((+$45)));
  $47 = $46 < 1.0;
  if ($47) {
   $48 = 1.0 - $45;
   $49 = 1.0 / $48;
   $50 = (+Math_pow((+$49),(+$42)));
   $51 = $45 * $49;
   $52 = $51 * $51;
   $53 = $42 + 1.0;
   $54 = $42 * $53;
   $55 = $43 * 2.0;
   $56 = $54 / $55;
   $57 = $56 * $52;
   $58 = $43 * 24.0;
   $59 = $43 * $58;
   $60 = $54 / $59;
   $61 = $60 * $52;
   $62 = $42 + 2.0;
   $63 = $62 * 16.0;
   $64 = $63 * $51;
   $65 = $64 + 12.0;
   $66 = $62 * 3.0;
   $67 = $42 + 3.0;
   $68 = $67 * $66;
   $69 = $68 * $52;
   $70 = $65 + $69;
   $71 = $61 * $70;
   $72 = 1.0 - $57;
   $73 = $72 + $71;
   $74 = $50 * $73;
   $75 = $50 * 2.2204460492503131E-16;
   $76 = (+Math_abs((+$57)));
   $77 = $76 + 1.0;
   $78 = (+Math_abs((+$71)));
   $79 = $77 + $78;
   $80 = $75 * $79;
   $81 = (+Math_abs((+$74)));
   $82 = $81 * 4.4408920985006262E-16;
   $83 = $80 + $82;
   $$sroa$0173$0 = $74;$$sroa$9$0 = $83;
  } else {
   _gsl_error(82896,82623,123,1);
   $$sroa$0173$0 = nan;$$sroa$9$0 = nan;
  }
  $$0149 = $31;$$0150 = $41;$$sroa$0173$2 = $$sroa$0173$0;$$sroa$9$2 = $$sroa$9$0;
 } else {
  $84 = 1.0 - $1;
  (_gsl_sf_lngamma_e($84,$7)|0);
  $85 = $0 + 1.0;
  $86 = $85 - $1;
  (_gsl_sf_lngamma_e($86,$8)|0);
  $87 = +HEAPF64[$7>>3];
  $88 = +HEAPF64[$8>>3];
  $89 = $87 - $88;
  $90 = ((($7)) + 8|0);
  $91 = +HEAPF64[$90>>3];
  $92 = ((($8)) + 8|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $91 + $93;
  $95 = $2 / $1;
  $96 = (+Math_abs((+$95)));
  $97 = $96 < 1.0;
  if ($97) {
   $98 = 1.0 - $95;
   $99 = 1.0 / $98;
   $100 = (+Math_pow((+$99),(+$0)));
   $101 = $95 * $99;
   $102 = $101 * $101;
   $103 = $85 * $0;
   $104 = $1 * 2.0;
   $105 = $103 / $104;
   $106 = $105 * $102;
   $107 = $1 * 24.0;
   $108 = $107 * $1;
   $109 = $103 / $108;
   $110 = $109 * $102;
   $111 = $0 + 2.0;
   $112 = $111 * 16.0;
   $113 = $112 * $101;
   $114 = $113 + 12.0;
   $115 = $111 * 3.0;
   $116 = $0 + 3.0;
   $117 = $116 * $115;
   $118 = $117 * $102;
   $119 = $114 + $118;
   $120 = $110 * $119;
   $121 = 1.0 - $106;
   $122 = $121 + $120;
   $123 = $100 * $122;
   $124 = $100 * 2.2204460492503131E-16;
   $125 = (+Math_abs((+$106)));
   $126 = $125 + 1.0;
   $127 = (+Math_abs((+$120)));
   $128 = $126 + $127;
   $129 = $124 * $128;
   $130 = (+Math_abs((+$123)));
   $131 = $130 * 4.4408920985006262E-16;
   $132 = $129 + $131;
   $$sroa$0173$1 = $123;$$sroa$9$1 = $132;
  } else {
   _gsl_error(82896,82623,123,1);
   $$sroa$0173$1 = nan;$$sroa$9$1 = nan;
  }
  $$0149 = $89;$$0150 = $94;$$sroa$0173$2 = $$sroa$0173$1;$$sroa$9$2 = $$sroa$9$1;
 }
 $133 = $$0149 > 699.78271289338397;
 if ($133) {
  HEAPF64[$3>>3] = $$sroa$0173$2;
  $134 = ((($3)) + 8|0);
  HEAPF64[$134>>3] = $$sroa$9$2;
  HEAPF64[$4>>3] = $$0149;
  _gsl_error(82926,82623,165,16);
  $$3 = 16;
  STACKTOP = sp;return ($$3|0);
 } else {
  $135 = (_gsl_sf_exp_err_e($$0149,$$0150,$9)|0);
  $136 = +HEAPF64[$9>>3];
  $137 = $$sroa$0173$2 * $136;
  HEAPF64[$3>>3] = $137;
  $138 = $$sroa$9$2 * $136;
  $139 = ((($9)) + 8|0);
  $140 = +HEAPF64[$139>>3];
  $141 = (+Math_abs((+$$sroa$0173$2)));
  $142 = $141 * $140;
  $143 = $138 + $142;
  $144 = ((($3)) + 8|0);
  $145 = (+Math_abs((+$137)));
  $146 = $145 * 4.4408920985006262E-16;
  $147 = $146 + $143;
  HEAPF64[$144>>3] = $147;
  HEAPF64[$4>>3] = 0.0;
  $$3 = $135;
  STACKTOP = sp;return ($$3|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_2F0_series_e($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$06799 = 0.0, $$07198 = 0.0, $$07397 = 0.0, $$07696 = 0.0, $$07895 = 0.0, $$08194 = 0.0, $$08493 = 0.0, $$2 = 0, $$283 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0;
 var $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, $brmerge = 0, $or$cond = 0, $or$cond87 = 0, $or$cond89$not = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)>(-1);
 $6 = (+($3|0));
 $$06799 = $0;$$07198 = 1.0;$$07397 = 1.0;$$07696 = 1.0;$$07895 = 1.0;$$08194 = 1.0;$$08493 = $1;$15 = 1.0;
 while(1) {
  $7 = $$08493 / $$08194;
  $8 = $7 * $2;
  $9 = $8 * $$06799;
  $10 = (+Math_abs((+$9)));
  $11 = $10 > 1.0;
  $12 = 1.7976931348623157E+308 / $10;
  $13 = $$07198 > $12;
  $or$cond87 = $11 & $13;
  if ($or$cond87) {
   label = 3;
   break;
  }
  $16 = $$07696 * $9;
  $17 = $$07895 + $16;
  $18 = (+Math_abs((+$16)));
  $19 = $18 > $$07397;
  if ($19) {
   $$283 = $$08194;
   break;
  }
  $20 = $$06799 + 1.0;
  $21 = $$08493 + 1.0;
  $22 = $$08194 + 1.0;
  $23 = $20 == 0.0;
  $24 = $21 == 0.0;
  $or$cond = $24 | $23;
  $25 = $22 >= $6;
  $or$cond89$not = $5 & $25;
  $brmerge = $or$cond89$not | $or$cond;
  if ($brmerge) {
   $$283 = $22;
   break;
  }
  $26 = $18 > $$07198;
  $27 = $26 ? $18 : $$07198;
  $28 = (+Math_abs((+$17)));
  $29 = $18 / $28;
  $30 = $29 > 2.2204460492503131E-16;
  $31 = $22 < 2000.0;
  $32 = $31 & $30;
  if ($32) {
   $$06799 = $20;$$07198 = $27;$$07397 = $18;$$07696 = $16;$$07895 = $17;$$08194 = $22;$$08493 = $21;$15 = $28;
  } else {
   $$283 = $22;
   break;
  }
 }
 if ((label|0) == 3) {
  HEAPF64[$4>>3] = $$07895;
  $14 = ((($4)) + 8|0);
  HEAPF64[$14>>3] = $15;
  _gsl_error(82926,82623,263,16);
  $$2 = 16;
  return ($$2|0);
 }
 HEAPF64[$4>>3] = $17;
 $33 = $$283 * 2.2204460492503131E-16;
 $34 = $33 + $18;
 $35 = ((($4)) + 8|0);
 HEAPF64[$35>>3] = $34;
 $36 = !($$283 >= 2000.0);
 if ($36) {
  $$2 = 0;
  return ($$2|0);
 }
 _gsl_error(82813,82623,288,11);
 $$2 = 11;
 return ($$2|0);
}
function _gsl_sf_hyperg_U_int_e10_e($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$$i$i = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $5 = sp + 40|0;
 $6 = sp + 24|0;
 $7 = sp;
 $8 = $2 == 0.0;
 $9 = ($1|0)>(0);
 $or$cond = $9 & $8;
 if ($or$cond) {
  HEAPF64[$3>>3] = nan;
  $10 = ((($3)) + 8|0);
  HEAPF64[$10>>3] = nan;
  $11 = ((($3)) + 16|0);
  HEAP32[$11>>2] = 0;
  _gsl_error(82896,82673,1656,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 if ($8) {
  $12 = (+($0|0));
  $13 = (+($1|0));
  $14 = $12 + 1.0;
  $15 = $14 - $13;
  $16 = (_gsl_sf_gammainv_e($15,$5)|0);
  $17 = (_gsl_sf_gammainv_e($13,$6)|0);
  $18 = $13 * 3.1415926535897931;
  $19 = (+Math_sin((+$18)));
  $20 = 3.1415926535897931 / $19;
  $21 = +HEAPF64[$5>>3];
  $22 = $20 * $21;
  $23 = +HEAPF64[$6>>3];
  $24 = $22 * $23;
  HEAPF64[$3>>3] = $24;
  $25 = (+Math_abs((+$20)));
  $26 = ((($5)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = ((($6)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $27 + $29;
  $31 = $25 * $30;
  $32 = ((($3)) + 8|0);
  HEAPF64[$32>>3] = $31;
  $33 = ((($3)) + 16|0);
  HEAP32[$33>>2] = 0;
  $34 = ($16|0)==(0);
  $$$i$i = $34 ? $17 : $16;
  $$0 = $$$i$i;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = $2 < 0.0;
 if ($35) {
  $36 = ($0|0)<($1|0);
  $37 = ($1|0)<(1);
  $or$cond$i = $36 & $37;
  if ($or$cond$i) {
   $38 = (1 - ($1))|0;
   $39 = (+($38|0));
   $40 = (+Math_pow((+$2),(+$39)));
   $41 = (($0) + 1)|0;
   $42 = (($41) - ($1))|0;
   $43 = (+($42|0));
   $44 = (2 - ($1))|0;
   $45 = (+($44|0));
   $46 = (_hyperg_U_negx($43,$45,$2,$4)|0);
   $47 = +HEAPF64[$4>>3];
   $48 = $40 * $47;
   $49 = (+Math_abs((+$40)));
   $50 = ((($4)) + 8|0);
   $51 = +HEAPF64[$50>>3];
   $52 = $49 * $51;
   HEAPF64[$3>>3] = $48;
   $53 = ((($3)) + 8|0);
   HEAPF64[$53>>3] = $52;
   $$0 = $46;
   STACKTOP = sp;return ($$0|0);
  } else {
   $54 = (+($0|0));
   $55 = (+($1|0));
   $56 = (_hyperg_U_negx($54,$55,$2,$3)|0);
   $$0 = $56;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  if ($9) {
   $57 = (_hyperg_U_int_bge1($0,$1,$2,$3)|0);
   $$0 = $57;
   STACKTOP = sp;return ($$0|0);
  } else {
   $58 = (+Math_log((+$2)));
   $59 = (($0) + 1)|0;
   $60 = (($59) - ($1))|0;
   $61 = (2 - ($1))|0;
   $62 = (_hyperg_U_int_bge1($60,$61,$2,$7)|0);
   $63 = (+($1|0));
   $64 = 1.0 - $63;
   $65 = $64 * $58;
   $66 = (+Math_abs((+$63)));
   $67 = $66 + 1.0;
   $68 = $67 * 4.4408920985006262E-16;
   $69 = (+Math_abs((+$58)));
   $70 = $69 * $68;
   $71 = (+Math_abs((+$64)));
   $72 = $71 * 4.4408920985006262E-16;
   $73 = $72 + $70;
   $74 = ((($7)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75|0));
   $77 = $76 * 2.3025850929940459;
   $78 = $65 + $77;
   $79 = +HEAPF64[$7>>3];
   $80 = ((($7)) + 8|0);
   $81 = +HEAPF64[$80>>3];
   $82 = (_gsl_sf_exp_mult_err_e10_e($78,$73,$79,$81,$3)|0);
   $83 = ($82|0)==(0);
   $$ = $83 ? $62 : $82;
   $$0 = $$;
   STACKTOP = sp;return ($$0|0);
  }
 }
 return (0)|0;
}
function _hyperg_U_negx($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$$098 = 0, $$$1 = 0, $$0 = 0, $$0100 = 0.0, $$0102 = 0.0, $$0104 = 0.0, $$098 = 0, $$099 = 0.0, $$1101 = 0.0, $$1103 = 0.0, $$2 = 0, $$not = 0, $$pre = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, $or$cond105 = 0, $or$cond107 = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $8 = (+Math_floor((+$0)));
 $9 = $8 == $0;
 $10 = (+Math_floor((+$1)));
 $11 = $10 == $1;
 $12 = $1 <= 0.0;
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = $0 <= 0.0;
  $or$cond3 = $13 & $9;
  $or$cond3$not = $or$cond3 ^ 1;
  $14 = !($0 >= $1);
  $or$cond105 = $14 | $or$cond3$not;
  if ($or$cond105) {
   HEAPF64[$3>>3] = nan;
   $15 = ((($3)) + 8|0);
   HEAPF64[$15>>3] = nan;
   _gsl_error(82684,82673,1548,24);
   $$0 = 24;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $16 = $0 + 1.0;
 $17 = $16 - $1;
 $18 = - $0;
 $19 = (_gsl_sf_poch_e($17,$18,$4)|0);
 $20 = +HEAPF64[$4>>3];
 $21 = $20 != 0.0;
 if ($21) {
  $22 = (_gsl_sf_hyperg_1F1_e($0,$1,$2,$6)|0);
  $23 = ($19|0)==(0);
  $$ = $23 ? $22 : $19;
  $24 = +HEAPF64[$6>>3];
  $25 = +HEAPF64[$4>>3];
  $26 = $24 * $25;
  $27 = (+Math_abs((+$26)));
  $28 = $27 * 4.4408920985006262E-16;
  $29 = ((($6)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $25 * $30;
  $32 = (+Math_abs((+$31)));
  $33 = $28 + $32;
  $34 = ((($4)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $24 * $35;
  $37 = (+Math_abs((+$36)));
  $38 = $33 + $37;
  $$0104 = $38;$$098 = $$;$$099 = $26;
 } else {
  $$0104 = 0.0;$$098 = $19;$$099 = 0.0;
 }
 $39 = $1 >= 2.0;
 $or$cond5 = $39 & $11;
 if ($or$cond5) {
  $$not = $9 ^ 1;
  $40 = $1 + -2.0;
  $41 = !($40 >= $0);
  $or$cond107 = $41 | $$not;
  if ($or$cond107) {
   HEAPF64[$3>>3] = nan;
   $42 = ((($3)) + 8|0);
   HEAPF64[$42>>3] = nan;
   _gsl_error(82724,82673,1581,24);
   $$0 = 24;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $43 = $0 <= 0.0;
 $or$cond7 = $43 & $9;
 $44 = $1 >= 1.0;
 $or$cond9 = $44 & $or$cond7;
 if ($or$cond9) {
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
  $$1101 = 0.0;$$1103 = 0.0;$$2 = $$098;
 } else {
  $45 = - $17;
  $46 = (_gsl_sf_poch_e($0,$45,$5)|0);
  $47 = ($$098|0)==(0);
  $$$098 = $47 ? $46 : $$098;
  $$pre = +HEAPF64[$5>>3];
  $phitmp = $$pre != 0.0;
  if ($phitmp) {
   $48 = 2.0 - $1;
   $49 = (_gsl_sf_hyperg_1F1_e($17,$48,$2,$7)|0);
   $50 = +HEAPF64[$7>>3];
   $51 = +HEAPF64[$5>>3];
   $52 = $50 * $51;
   $53 = (+Math_abs((+$52)));
   $54 = $53 * 4.4408920985006262E-16;
   $55 = ((($7)) + 8|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $51 * $56;
   $58 = (+Math_abs((+$57)));
   $59 = $54 + $58;
   $60 = ((($5)) + 8|0);
   $61 = +HEAPF64[$60>>3];
   $62 = $50 * $61;
   $63 = (+Math_abs((+$62)));
   $64 = $59 + $63;
   $65 = ($$$098|0)==(0);
   $$$1 = $65 ? $49 : $$$098;
   $66 = $52 != 0.0;
   $67 = 1.0 - $1;
   $68 = (+Math_pow((+$2),(+$67)));
   $69 = $68 * $52;
   $70 = (+Math_abs((+$68)));
   $71 = $70 * $64;
   $$0102 = $66 ? $69 : $52;
   $$0100 = $66 ? $71 : $64;
   $$1101 = $$0100;$$1103 = $$0102;$$2 = $$$1;
  } else {
   $$1101 = 0.0;$$1103 = 0.0;$$2 = $$$098;
  }
 }
 $72 = $$099 + $$1103;
 HEAPF64[$3>>3] = $72;
 $73 = (+Math_abs((+$72)));
 $74 = $73 * 4.4408920985006262E-16;
 $75 = $$0104 + $$1101;
 $76 = $75 + $74;
 $77 = ((($3)) + 8|0);
 HEAPF64[$77>>3] = $76;
 $78 = ((($3)) + 16|0);
 HEAP32[$78>>2] = 0;
 $$0 = $$2;
 STACKTOP = sp;return ($$0|0);
}
function _hyperg_U_int_bge1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$01013$i = 0.0, $$01013$i514 = 0.0, $$01032$i = 0.0, $$01032$i515 = 0.0, $$0466559 = 0, $$0468558 = 0.0, $$0470557 = 0.0, $$0472556 = 0, $$0473$lcssa = 0, $$0473589 = 0, $$0475588 = 0.0, $$0477$lcssa = 0.0, $$0477587 = 0.0, $$0479586 = 0, $$0480$lcssa608 = 0, $$0480581 = 0, $$0482564 = 0, $$0484$lcssa = 0.0, $$0484563 = 0.0;
 var $$0486562 = 0.0, $$0489573 = 0, $$0490$lcssa607 = 0.0, $$0490580 = 0.0, $$0492572 = 0.0, $$0494$lcssa = 0.0, $$0494571 = 0.0, $$0496579 = 0.0, $$0498578 = 0, $$0499 = 0, $$0499$ = 0, $$0500 = 0.0, $$0501 = 0.0, $$0502$lcssa = 0, $$0502561 = 0, $$0505$lcssa = 0, $$0505570 = 0, $$093$i = 0, $$093$i522 = 0, $$0947$i = 0;
 var $$0947$i510 = 0, $$0956$i = 0.0, $$0956$i511 = 0.0, $$0975$i = 0.0, $$0975$i512 = 0.0, $$0994$i = 0.0, $$0994$i513 = 0.0, $$1100$i = 0.0, $$1100$i519 = 0.0, $$1102$i = 0.0, $$1102$i518 = 0.0, $$1104$i = 0.0, $$1104$i517 = 0.0, $$1467 = 0, $$1469 = 0.0, $$1471 = 0.0, $$1474 = 0, $$1476 = 0.0, $$1478 = 0.0, $$1481 = 0;
 var $$1485 = 0.0, $$1487 = 0.0, $$1491 = 0.0, $$1493 = 0.0, $$1495 = 0.0, $$1497 = 0.0, $$1503 = 0, $$1506 = 0, $$198$i = 0.0, $$198$i520 = 0.0, $$2 = 0, $$2504 = 0, $$508 = 0, $$509 = 0, $$old = 0, $$pre$phi602Z2D = 0, $$pre$phi604Z2D = 0, $$pre$phi606Z2D = 0, $$pre$phiZ2D = 0, $$pre603 = 0;
 var $$pre605 = 0, $$sroa$0537$0 = 0.0, $$sroa$0537$1 = 0.0, $$sroa$9$0 = 0.0, $$sroa$9$1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0;
 var $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0;
 var $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0;
 var $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0;
 var $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0;
 var $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0;
 var $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0;
 var $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0.0;
 var $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0;
 var $35 = 0.0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0;
 var $368 = 0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0.0;
 var $386 = 0.0, $387 = 0.0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0;
 var $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0;
 var $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0.0, $438 = 0, $439 = 0.0;
 var $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0;
 var $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond600 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i516 = 0, $or$cond11 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond507 = 0, $or$cond7 = 0, $or$cond7$not = 0, $or$cond8$i = 0, $or$cond8$i521 = 0, $or$cond9 = 0, $spec$select = 0.0, $spec$select550 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 144|0;
 $5 = sp + 128|0;
 $6 = sp + 112|0;
 $7 = sp + 96|0;
 $8 = sp + 80|0;
 $9 = sp + 64|0;
 $10 = sp + 56|0;
 $11 = sp + 40|0;
 $12 = sp + 24|0;
 $13 = sp + 8|0;
 $14 = sp;
 switch ($0|0) {
 case 0:  {
  HEAPF64[$3>>3] = 1.0;
  $15 = ((($3)) + 8|0);
  HEAPF64[$15>>3] = 0.0;
  $16 = ((($3)) + 16|0);
  HEAP32[$16>>2] = 0;
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
  break;
 }
 case -1:  {
  $17 = (0 - ($1))|0;
  $18 = (+($17|0));
  $19 = $18 + $2;
  HEAPF64[$3>>3] = $19;
  $20 = (+($1|0));
  $21 = (+Math_abs((+$20)));
  $22 = (+Math_abs((+$2)));
  $23 = $21 + $22;
  $24 = $23 * 4.4408920985006262E-16;
  $25 = ((($3)) + 8|0);
  $26 = (+Math_abs((+$19)));
  $27 = $26 * 4.4408920985006262E-16;
  $28 = $24 + $27;
  HEAPF64[$25>>3] = $28;
  $29 = ((($3)) + 16|0);
  HEAP32[$29>>2] = 0;
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
  break;
 }
 default: {
  $30 = (($0) + 1)|0;
  $31 = ($30|0)==($1|0);
  if ($31) {
   $32 = (0 - ($0))|0;
   $33 = (+($32|0));
   $34 = (+Math_log((+$2)));
   $35 = $34 * $33;
   $36 = (_gsl_sf_exp_e10_e($35,$3)|0);
   $$2 = $36;
   STACKTOP = sp;return ($$2|0);
  }
  $37 = (+($0|0));
  $38 = (+Math_abs((+$37)));
  $39 = $38 > 1.0;
  $40 = $39 ? $38 : 1.0;
  $41 = $37 + 1.0;
  $42 = (+($1|0));
  $43 = $41 - $42;
  $44 = (+Math_abs((+$43)));
  $45 = $44 > 1.0;
  $46 = $45 ? $44 : 1.0;
  $47 = $40 * $46;
  $48 = (+Math_abs((+$2)));
  $49 = $48 * 0.98999999999999999;
  $50 = $47 < $49;
  if ($50) {
   $51 = (0 - ($0))|0;
   $52 = (+($51|0));
   $53 = (+Math_log((+$2)));
   $54 = $53 * $52;
   $55 = (+Math_abs((+$54)));
   $56 = $55 * 4.4408920985006262E-16;
   $57 = (_hyperg_zaU_asymp($37,$42,$2,$7)|0);
   $58 = +HEAPF64[$7>>3];
   $59 = ((($7)) + 8|0);
   $60 = +HEAPF64[$59>>3];
   $61 = (_gsl_sf_exp_mult_err_e10_e($54,$56,$58,$60,$3)|0);
   $62 = ($61|0)==(0);
   $$ = $62 ? $57 : $61;
   $$2 = $$;
   STACKTOP = sp;return ($$2|0);
  }
  $63 = $38 < 5.0;
  $64 = ($1|0)<(5);
  $or$cond = $64 & $63;
  $65 = $2 < 2.0;
  $or$cond3 = $65 & $or$cond;
  if ($or$cond3) {
   $$old = ($0|0)<($1|0);
   if (!($$old)) {
    label = 11;
   }
  } else {
   $66 = $38 < 10.0;
   $67 = ($1|0)<(10);
   $or$cond5 = $67 & $66;
   $68 = $2 < 1.0;
   $or$cond7 = $68 & $or$cond5;
   $or$cond7$not = $or$cond7 ^ 1;
   $69 = ($0|0)<($1|0);
   $or$cond507 = $69 | $or$cond7$not;
   if (!($or$cond507)) {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   $70 = (_hyperg_U_series($37,$42,$2,$8)|0);
   $71 = +HEAPF64[$8>>3];
   HEAPF64[$3>>3] = $71;
   $72 = ((($8)) + 8|0);
   $73 = +HEAPF64[$72>>3];
   $74 = ((($3)) + 8|0);
   HEAPF64[$74>>3] = $73;
   $75 = ((($3)) + 16|0);
   HEAP32[$75>>2] = 0;
   $$2 = $70;
   STACKTOP = sp;return ($$2|0);
  }
  $76 = ($0|0)<(0);
  if ($76) {
   $77 = (0 - ($1))|0;
   $78 = (+($77|0));
   $79 = $78 + $2;
   $$0466559 = 0;$$0468558 = 1.0;$$0470557 = $79;$$0472556 = -1;
   while(1) {
    $80 = (+($$0472556|0));
    $81 = (($1) - ($$0472556))|0;
    $82 = (+($81|0));
    $83 = $82 + -1.0;
    $84 = $83 * $80;
    $85 = $$0468558 * $84;
    $86 = $80 * 2.0;
    $87 = $86 + $2;
    $88 = $87 - $42;
    $89 = $$0470557 * $88;
    $90 = $85 + $89;
    $91 = (+Math_abs((+$90)));
    $92 = $91 > 1.3407807929942596E+154;
    if ($92) {
     $93 = $90 / 1.3407807929942596E+154;
     $94 = $$0470557 / 1.3407807929942596E+154;
     $95 = (($$0466559) + 1)|0;
     $$1467 = $95;$$1469 = $94;$$1471 = $93;
    } else {
     $96 = $91 < 7.4583407312002084E-155;
     if ($96) {
      $97 = (($$0466559) + -1)|0;
      $98 = $$0470557 * 1.3407807929942596E+154;
      $99 = $90 * 1.3407807929942596E+154;
      $$1467 = $97;$$1469 = $98;$$1471 = $99;
     } else {
      $$1467 = $$0466559;$$1469 = $$0470557;$$1471 = $90;
     }
    }
    $100 = (($$0472556) + -1)|0;
    $101 = ($100|0)>($0|0);
    if ($101) {
     $$0466559 = $$1467;$$0468558 = $$1469;$$0470557 = $$1471;$$0472556 = $100;
    } else {
     break;
    }
   }
   $102 = (+($$1467|0));
   $103 = $102 * 354.89135644669199;
   $104 = (+Math_abs((+$103)));
   $105 = $104 * 4.4408920985006262E-16;
   $106 = $38 + 1.0;
   $107 = $106 * 8.8817841970012523E-16;
   $108 = (+Math_abs((+$$1471)));
   $109 = $107 * $108;
   $110 = (_gsl_sf_exp_mult_err_e10_e($103,$105,$$1471,$109,$3)|0);
   $$2 = $110;
   STACKTOP = sp;return ($$2|0);
  }
  $111 = $37 * 2.0;
  $112 = $111 + $2;
  $113 = !($112 <= $42);
  if (!($113)) {
   $114 = (_hyperg_U_small_a_bgt0(1.0,$42,$2,$9,$10)|0);
   $115 = +HEAPF64[$9>>3];
   $116 = +HEAPF64[$10>>3];
   $117 = ($0|0)>(1);
   if ($117) {
    $118 = - $116;
    $119 = (+Math_exp((+$118)));
    $$0473589 = 0;$$0475588 = $119;$$0477587 = $115;$$0479586 = 1;
    while(1) {
     $120 = (+($$0479586|0));
     $121 = $120 * 2.0;
     $122 = $42 - $121;
     $123 = $122 - $2;
     $124 = $$0477587 * $123;
     $125 = $$0475588 + $124;
     $126 = - $125;
     $127 = $120 + 1.0;
     $128 = $127 - $42;
     $129 = $128 * $120;
     $130 = $126 / $129;
     $131 = (+Math_abs((+$130)));
     $132 = $131 > 1.3407807929942596E+154;
     if ($132) {
      $133 = $130 / 1.3407807929942596E+154;
      $134 = $$0477587 / 1.3407807929942596E+154;
      $135 = (($$0473589) + 1)|0;
      $$1474 = $135;$$1476 = $134;$$1478 = $133;
     } else {
      $136 = $131 < 7.4583407312002084E-155;
      if ($136) {
       $137 = (($$0473589) + -1)|0;
       $138 = $$0477587 * 1.3407807929942596E+154;
       $139 = $130 * 1.3407807929942596E+154;
       $$1474 = $137;$$1476 = $138;$$1478 = $139;
      } else {
       $$1474 = $$0473589;$$1476 = $$0477587;$$1478 = $130;
      }
     }
     $140 = (($$0479586) + 1)|0;
     $exitcond600 = ($140|0)==($0|0);
     if ($exitcond600) {
      $$0473$lcssa = $$1474;$$0477$lcssa = $$1478;
      break;
     } else {
      $$0473589 = $$1474;$$0475588 = $$1476;$$0477587 = $$1478;$$0479586 = $140;
     }
    }
   } else {
    $$0473$lcssa = 0;$$0477$lcssa = $115;
   }
   $141 = (+($$0473$lcssa|0));
   $142 = $141 * 354.89135644669199;
   $143 = $116 + $142;
   $144 = (+Math_abs((+$116)));
   $145 = (+Math_abs((+$142)));
   $146 = $144 + $145;
   $147 = $146 * 4.4408920985006262E-16;
   $148 = ((($9)) + 8|0);
   $149 = +HEAPF64[$148>>3];
   $150 = $149 / $115;
   $151 = (+Math_abs((+$150)));
   $152 = (+Math_abs((+$$0477$lcssa)));
   $153 = $152 * $151;
   $154 = $38 + 1.0;
   $155 = $154 * 4.4408920985006262E-16;
   $156 = $155 * $152;
   $157 = $156 + $153;
   $158 = (_gsl_sf_exp_mult_err_e10_e($143,$147,$$0477$lcssa,$157,$3)|0);
   $159 = ($158|0)==(0);
   $$508 = $159 ? $114 : $158;
   $$2 = $$508;
   STACKTOP = sp;return ($$2|0);
  }
  $160 = !($42 <= $2);
  if (!($160)) {
   $161 = ($0|0)<($1|0);
   $162 = (1 - ($1))|0;
   $163 = (+($162|0));
   $164 = (+Math_log((+$2)));
   $165 = $164 * $163;
   $spec$select = $161 ? 0.0 : $165;
   $166 = $42 - $111;
   $167 = $166 - $2;
   $168 = $167 + -2.0;
   $169 = $168 * 0.0;
   $170 = $169 - $37;
   $171 = $37 * 0.0;
   $172 = $168 - $171;
   $173 = $170 / $172;
   $$01013$i = 0.0;$$01032$i = 1.0;$$0947$i = 1;$$0956$i = $173;$$0975$i = $172;$$0994$i = $170;
   while(1) {
    $174 = (($$0947$i) + 1)|0;
    $175 = (+($174|0));
    $176 = $37 + $175;
    $177 = $176 - $42;
    $178 = $176 + -1.0;
    $179 = $177 * $178;
    $180 = - $179;
    $181 = $175 * 2.0;
    $182 = $167 - $181;
    $183 = $$0994$i * $182;
    $184 = $$01013$i * $180;
    $185 = $183 + $184;
    $186 = $$0975$i * $182;
    $187 = $$01032$i * $180;
    $188 = $186 + $187;
    $189 = (+Math_abs((+$185)));
    $190 = $189 > 1.3407807929942596E+154;
    $191 = (+Math_abs((+$188)));
    $192 = $191 > 1.3407807929942596E+154;
    $or$cond$i = $190 | $192;
    if ($or$cond$i) {
     $193 = $185 / 1.3407807929942596E+154;
     $194 = $188 / 1.3407807929942596E+154;
     $195 = $$0994$i / 1.3407807929942596E+154;
     $196 = $$0975$i / 1.3407807929942596E+154;
     $$1100$i = $193;$$1102$i = $195;$$1104$i = $196;$$198$i = $194;
    } else {
     $$1100$i = $185;$$1102$i = $$0994$i;$$1104$i = $$0975$i;$$198$i = $188;
    }
    $197 = $$1100$i / $$198$i;
    $198 = $$0956$i / $197;
    $199 = $198 + -1.0;
    $200 = (+Math_abs((+$199)));
    $201 = !($200 < 2.2204460492503131E-15);
    $202 = ($174>>>0)<(20000);
    $or$cond8$i = $202 & $201;
    if ($or$cond8$i) {
     $$01013$i = $$1102$i;$$01032$i = $$1104$i;$$0947$i = $174;$$0956$i = $197;$$0975$i = $$198$i;$$0994$i = $$1100$i;
    } else {
     break;
    }
   }
   $203 = (($1) + -1)|0;
   $spec$select550 = $161 ? 0 : $203;
   $204 = ($174|0)==(20000);
   if ($204) {
    _gsl_error(82813,82673,121,11);
    $$093$i = 11;
   } else {
    $$093$i = 0;
   }
   $205 = ($spec$select550|0)<($0|0);
   if ($205) {
    $206 = $197 / $37;
    $$0480581 = 0;$$0490580 = 1.0;$$0496579 = $206;$$0498578 = $0;
    while(1) {
     $207 = (+($$0498578|0));
     $208 = $207 * 2.0;
     $209 = $42 - $208;
     $210 = $209 - $2;
     $211 = $$0490580 * $210;
     $212 = $207 + 1.0;
     $213 = $212 - $42;
     $214 = $213 * $207;
     $215 = $$0496579 * $214;
     $216 = $211 + $215;
     $217 = - $216;
     $218 = (+Math_abs((+$217)));
     $219 = $218 > 1.3407807929942596E+154;
     if ($219) {
      $220 = $217 / 1.3407807929942596E+154;
      $221 = $$0490580 / 1.3407807929942596E+154;
      $222 = (($$0480581) + 1)|0;
      $$1481 = $222;$$1491 = $220;$$1497 = $221;
     } else {
      $223 = $218 < 7.4583407312002084E-155;
      if ($223) {
       $224 = (($$0480581) + -1)|0;
       $225 = $$0490580 * 1.3407807929942596E+154;
       $226 = $216 * -1.3407807929942596E+154;
       $$1481 = $224;$$1491 = $226;$$1497 = $225;
      } else {
       $$1481 = $$0480581;$$1491 = $217;$$1497 = $$0490580;
      }
     }
     $227 = (($$0498578) + -1)|0;
     $228 = ($227|0)>($spec$select550|0);
     if ($228) {
      $$0480581 = $$1481;$$0490580 = $$1491;$$0496579 = $$1497;$$0498578 = $227;
     } else {
      break;
     }
    }
    $229 = $$1491 == 0.0;
    if ($229) {
     ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
     _gsl_error(82813,82673,1002,12);
     $$2 = 12;
     STACKTOP = sp;return ($$2|0);
    } else {
     $$0480$lcssa608 = $$1481;$$0490$lcssa607 = $$1491;
    }
   } else {
    $$0480$lcssa608 = 0;$$0490$lcssa607 = 1.0;
   }
   $230 = (0 - ($$0480$lcssa608))|0;
   $231 = (+($230|0));
   $232 = $231 * 354.89135644669199;
   $233 = $spec$select + $232;
   $234 = (+Math_abs((+$spec$select)));
   $235 = (+Math_abs((+$232)));
   $236 = $234 + $235;
   $237 = $236 * 4.4408920985006262E-16;
   $238 = (($spec$select550) - ($0))|0;
   $239 = (+($238|0));
   $240 = (+Math_abs((+$239)));
   $241 = $240 + $175;
   $242 = $241 + 1.0;
   $243 = $242 * 2.0;
   $244 = $243 * 2.2204460492503131E-16;
   $245 = 1.0 / $$0490$lcssa607;
   $246 = (+Math_abs((+$245)));
   $247 = $244 * $246;
   $248 = (_gsl_sf_exp_mult_err_e10_e($233,$237,$245,$247,$3)|0);
   $249 = ($248|0)==(0);
   $$509 = $249 ? $$093$i : $248;
   $$2 = $$509;
   STACKTOP = sp;return ($$2|0);
  }
  $250 = $42 - $2;
  $251 = $250 * 0.5;
  $252 = $251 + -1.0;
  $253 = (+Math_ceil((+$252)));
  $254 = $253 + 1.0;
  $255 = $42 - $111;
  $256 = $255 - $2;
  $257 = $256 + -2.0;
  $258 = $257 * 0.0;
  $259 = $258 - $37;
  $260 = $37 * 0.0;
  $261 = $257 - $260;
  $262 = $259 / $261;
  $$01013$i514 = 0.0;$$01032$i515 = 1.0;$$0947$i510 = 1;$$0956$i511 = $262;$$0975$i512 = $261;$$0994$i513 = $259;
  while(1) {
   $263 = (($$0947$i510) + 1)|0;
   $264 = (+($263|0));
   $265 = $37 + $264;
   $266 = $265 - $42;
   $267 = $265 + -1.0;
   $268 = $266 * $267;
   $269 = - $268;
   $270 = $264 * 2.0;
   $271 = $256 - $270;
   $272 = $$0994$i513 * $271;
   $273 = $$01013$i514 * $269;
   $274 = $272 + $273;
   $275 = $$0975$i512 * $271;
   $276 = $$01032$i515 * $269;
   $277 = $275 + $276;
   $278 = (+Math_abs((+$274)));
   $279 = $278 > 1.3407807929942596E+154;
   $280 = (+Math_abs((+$277)));
   $281 = $280 > 1.3407807929942596E+154;
   $or$cond$i516 = $279 | $281;
   if ($or$cond$i516) {
    $282 = $274 / 1.3407807929942596E+154;
    $283 = $277 / 1.3407807929942596E+154;
    $284 = $$0994$i513 / 1.3407807929942596E+154;
    $285 = $$0975$i512 / 1.3407807929942596E+154;
    $$1100$i519 = $282;$$1102$i518 = $284;$$1104$i517 = $285;$$198$i520 = $283;
   } else {
    $$1100$i519 = $274;$$1102$i518 = $$0994$i513;$$1104$i517 = $$0975$i512;$$198$i520 = $277;
   }
   $286 = $$1100$i519 / $$198$i520;
   $287 = $$0956$i511 / $286;
   $288 = $287 + -1.0;
   $289 = (+Math_abs((+$288)));
   $290 = !($289 < 2.2204460492503131E-15);
   $291 = ($263>>>0)<(20000);
   $or$cond8$i521 = $291 & $290;
   if ($or$cond8$i521) {
    $$01013$i514 = $$1102$i518;$$01032$i515 = $$1104$i517;$$0947$i510 = $263;$$0956$i511 = $286;$$0975$i512 = $$198$i520;$$0994$i513 = $$1100$i519;
   } else {
    break;
   }
  }
  $292 = (~~(($254)));
  $293 = ($263|0)==(20000);
  if ($293) {
   _gsl_error(82813,82673,121,11);
   $$093$i522 = 11;
  } else {
   $$093$i522 = 0;
  }
  $294 = ($292|0)<($0|0);
  if ($294) {
   $295 = $286 / $37;
   $$0489573 = $0;$$0492572 = $295;$$0494571 = 1.0;$$0505570 = 0;
   while(1) {
    $296 = (+($$0489573|0));
    $297 = $296 * 2.0;
    $298 = $42 - $297;
    $299 = $298 - $2;
    $300 = $$0494571 * $299;
    $301 = $296 + 1.0;
    $302 = $301 - $42;
    $303 = $302 * $296;
    $304 = $$0492572 * $303;
    $305 = $300 + $304;
    $306 = - $305;
    $307 = (+Math_abs((+$306)));
    $308 = $307 > 1.3407807929942596E+154;
    if ($308) {
     $309 = $306 / 1.3407807929942596E+154;
     $310 = $$0494571 / 1.3407807929942596E+154;
     $311 = (($$0505570) + 1)|0;
     $$1493 = $310;$$1495 = $309;$$1506 = $311;
    } else {
     $312 = $307 < 7.4583407312002084E-155;
     if ($312) {
      $313 = (($$0505570) + -1)|0;
      $314 = $$0494571 * 1.3407807929942596E+154;
      $315 = $305 * -1.3407807929942596E+154;
      $$1493 = $314;$$1495 = $315;$$1506 = $313;
     } else {
      $$1493 = $$0494571;$$1495 = $306;$$1506 = $$0505570;
     }
    }
    $316 = (($$0489573) + -1)|0;
    $317 = ($316|0)>($292|0);
    if ($317) {
     $$0489573 = $316;$$0492572 = $$1493;$$0494571 = $$1495;$$0505570 = $$1506;
    } else {
     $$0494$lcssa = $$1495;$$0505$lcssa = $$1506;
     break;
    }
   }
  } else {
   $$0494$lcssa = 1.0;$$0505$lcssa = 0;
  }
  $318 = (($292) - ($0))|0;
  $319 = (+($318|0));
  $320 = (+Math_abs((+$319)));
  $321 = $320 + $264;
  $322 = $321 + 1.0;
  $323 = $322 * 4.4408920985006262E-16;
  $324 = (+Math_abs((+$$0494$lcssa)));
  $325 = $323 * $324;
  $326 = $292 << 1;
  $327 = ($326|0)==($1|0);
  $328 = ($292|0)>(1);
  $or$cond9 = $328 & $327;
  do {
   if ($or$cond9) {
    $329 = (+($292|0));
    $330 = (+Math_log((+$2)));
    $331 = $329 + -0.5;
    $332 = $2 + -1.1447298858494002;
    $333 = $332 * 0.5;
    $334 = $330 * $331;
    $335 = $333 - $334;
    $336 = $2 * 0.5;
    (_gsl_sf_bessel_lnKnu_e($331,$336,$5)|0);
    $337 = +HEAPF64[$5>>3];
    $338 = $335 + $337;
    $339 = (+Math_abs((+$336)));
    $340 = $339 + 0.57236494292470008;
    $341 = (+Math_abs((+$334)));
    $342 = $340 + $341;
    $343 = $342 * 4.4408920985006262E-16;
    $344 = ((($5)) + 8|0);
    $345 = +HEAPF64[$344>>3];
    $346 = $343 + $345;
    $347 = (+Math_abs((+$338)));
    $348 = $347 * 4.4408920985006262E-16;
    $349 = $346 + $348;
    $$0499 = 0;$$0500 = 0.0;$$0501 = 1.0;$$2504 = 0;$$sroa$0537$1 = $338;$$sroa$9$1 = $349;
   } else {
    $350 = (($326) + -1)|0;
    $351 = ($350|0)==($1|0);
    $or$cond11 = $328 & $351;
    if ($or$cond11) {
     $352 = (+($292|0));
     $353 = $352 + -1.0;
     $354 = (+Math_log((+$2)));
     $355 = $353 + -0.5;
     $356 = $2 + -1.1447298858494002;
     $357 = $356 * 0.5;
     $358 = $354 * $355;
     $359 = $357 - $358;
     $360 = $2 * 0.5;
     (_gsl_sf_bessel_lnKnu_e($355,$360,$4)|0);
     $361 = +HEAPF64[$4>>3];
     $362 = $359 + $361;
     $363 = (+Math_abs((+$360)));
     $364 = $363 + 0.57236494292470008;
     $365 = (+Math_abs((+$358)));
     $366 = $364 + $365;
     $367 = $366 * 4.4408920985006262E-16;
     $368 = ((($4)) + 8|0);
     $369 = +HEAPF64[$368>>3];
     $370 = $367 + $369;
     $371 = (+Math_abs((+$362)));
     $372 = $371 * 4.4408920985006262E-16;
     $373 = $370 + $372;
     $374 = $352 + -0.5;
     $375 = $354 * $374;
     $376 = $357 - $375;
     (_gsl_sf_bessel_lnKnu_e($374,$360,$6)|0);
     $377 = +HEAPF64[$6>>3];
     $378 = $376 + $377;
     $379 = (+Math_abs((+$375)));
     $380 = $364 + $379;
     $381 = $380 * 4.4408920985006262E-16;
     $382 = ((($6)) + 8|0);
     $383 = +HEAPF64[$382>>3];
     $384 = $381 + $383;
     $385 = (+Math_abs((+$378)));
     $386 = $385 * 4.4408920985006262E-16;
     $387 = $384 + $386;
     $388 = $362 > $378;
     if ($388) {
      HEAPF64[$11>>3] = 1.0;
      $389 = ((($11)) + 8|0);
      HEAPF64[$389>>3] = 0.0;
      $390 = $378 - $362;
      $391 = $373 + $387;
      (_gsl_sf_exp_err_e($390,$391,$12)|0);
      $$pre603 = ((($12)) + 8|0);
      $$pre$phi602Z2D = $11;$$pre$phi604Z2D = $$pre603;$$pre$phi606Z2D = $389;$$pre$phiZ2D = $12;$$sroa$0537$0 = $362;$$sroa$9$0 = $373;
     } else {
      HEAPF64[$12>>3] = 1.0;
      $392 = ((($12)) + 8|0);
      HEAPF64[$392>>3] = 0.0;
      $393 = $362 - $378;
      $394 = $373 + $387;
      (_gsl_sf_exp_err_e($393,$394,$11)|0);
      $$pre605 = ((($11)) + 8|0);
      $$pre$phi602Z2D = $11;$$pre$phi604Z2D = $392;$$pre$phi606Z2D = $$pre605;$$pre$phiZ2D = $12;$$sroa$0537$0 = $378;$$sroa$9$0 = $387;
     }
     $395 = +HEAPF64[$$pre$phiZ2D>>3];
     $396 = $395 * $2;
     $397 = +HEAPF64[$$pre$phi602Z2D>>3];
     $398 = $396 - $397;
     $399 = $352 * 2.0;
     $400 = $399 + -2.0;
     $401 = $398 / $400;
     $402 = +HEAPF64[$$pre$phi604Z2D>>3];
     $403 = $48 * $402;
     $404 = +HEAPF64[$$pre$phi606Z2D>>3];
     $405 = $403 + $404;
     $406 = (+Math_abs((+$400)));
     $407 = $405 / $406;
     $408 = (+Math_abs((+$401)));
     $409 = $408 * 4.4408920985006262E-16;
     $410 = $407 + $409;
     $$0499 = 0;$$0500 = $410;$$0501 = $401;$$2504 = 0;$$sroa$0537$1 = $$sroa$0537$0;$$sroa$9$1 = $$sroa$9$0;
     break;
    }
    $411 = (_hyperg_U_small_a_bgt0(1.0,$42,$2,$13,$14)|0);
    $412 = +HEAPF64[$13>>3];
    $413 = +HEAPF64[$14>>3];
    if ($328) {
     $414 = - $413;
     $415 = (+Math_exp((+$414)));
     $$0482564 = 1;$$0484563 = $412;$$0486562 = $415;$$0502561 = 0;
     while(1) {
      $416 = (+($$0482564|0));
      $417 = $416 * 2.0;
      $418 = $42 - $417;
      $419 = $418 - $2;
      $420 = $$0484563 * $419;
      $421 = $$0486562 + $420;
      $422 = - $421;
      $423 = $416 + 1.0;
      $424 = $423 - $42;
      $425 = $424 * $416;
      $426 = $422 / $425;
      $427 = (+Math_abs((+$426)));
      $428 = $427 > 1.3407807929942596E+154;
      if ($428) {
       $429 = $426 / 1.3407807929942596E+154;
       $430 = $$0484563 / 1.3407807929942596E+154;
       $431 = (($$0502561) + 1)|0;
       $$1485 = $429;$$1487 = $430;$$1503 = $431;
      } else {
       $432 = $427 < 7.4583407312002084E-155;
       if ($432) {
        $433 = (($$0502561) + -1)|0;
        $434 = $$0484563 * 1.3407807929942596E+154;
        $435 = $426 * 1.3407807929942596E+154;
        $$1485 = $435;$$1487 = $434;$$1503 = $433;
       } else {
        $$1485 = $426;$$1487 = $$0484563;$$1503 = $$0502561;
       }
      }
      $436 = (($$0482564) + 1)|0;
      $exitcond = ($436|0)==($292|0);
      if ($exitcond) {
       $$0484$lcssa = $$1485;$$0502$lcssa = $$1503;
       break;
      } else {
       $$0482564 = $436;$$0484563 = $$1485;$$0486562 = $$1487;$$0502561 = $$1503;
      }
     }
    } else {
     $$0484$lcssa = $412;$$0502$lcssa = 0;
    }
    $437 = (+Math_abs((+$$0484$lcssa)));
    $438 = ((($13)) + 8|0);
    $439 = +HEAPF64[$438>>3];
    $440 = $439 / $412;
    $441 = (+Math_abs((+$440)));
    $442 = $437 * $441;
    $443 = (($292) + -1)|0;
    $444 = (+($443|0));
    $445 = (+Math_abs((+$444)));
    $446 = $445 + 1.0;
    $447 = $446 * 4.4408920985006262E-16;
    $448 = $447 * $437;
    $449 = $448 + $442;
    $$0499 = $411;$$0500 = $449;$$0501 = $$0484$lcssa;$$2504 = $$0502$lcssa;$$sroa$0537$1 = $413;$$sroa$9$1 = 0.0;
   }
  } while(0);
  $450 = $$0494$lcssa == 0.0;
  if ($450) {
   ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
   _gsl_error(82813,82673,1127,12);
   $$2 = 12;
   STACKTOP = sp;return ($$2|0);
  }
  $451 = $$0501 == 0.0;
  if ($451) {
   HEAPF64[$3>>3] = 0.0;
   $452 = ((($3)) + 8|0);
   HEAPF64[$452>>3] = 2.2250738585072014E-308;
   $453 = ((($3)) + 16|0);
   HEAP32[$453>>2] = 0;
   _gsl_error(82916,82673,1131,15);
   $$2 = 15;
   STACKTOP = sp;return ($$2|0);
  } else {
   $454 = (($$2504) - ($$0505$lcssa))|0;
   $455 = (+($454|0));
   $456 = $455 * 354.89135644669199;
   $457 = (+Math_abs((+$$0501)));
   $458 = (+Math_log((+$457)));
   $459 = $$0500 / $$0501;
   $460 = (+Math_abs((+$459)));
   $461 = $460 + 2.2204460492503131E-16;
   $462 = (+Math_log((+$324)));
   $463 = $325 / $$0494$lcssa;
   $464 = (+Math_abs((+$463)));
   $465 = $464 + 2.2204460492503131E-16;
   $466 = $$sroa$0537$1 + $458;
   $467 = $466 - $462;
   $468 = $456 + $467;
   $469 = $$sroa$9$1 + $461;
   $470 = $465 + $469;
   $471 = (+Math_abs((+$$sroa$0537$1)));
   $472 = (+Math_abs((+$458)));
   $473 = $471 + $472;
   $474 = (+Math_abs((+$462)));
   $475 = $474 + $473;
   $476 = (+Math_abs((+$456)));
   $477 = $476 + $475;
   $478 = $477 * 4.4408920985006262E-16;
   $479 = $470 + $478;
   $480 = $$0501 >= 0.0;
   $481 = $480 ? 1 : -1;
   $482 = $$0494$lcssa >= 0.0;
   $483 = $482 ? 1 : -1;
   $484 = Math_imul($481, $483)|0;
   $485 = (+($484|0));
   $486 = (_gsl_sf_exp_err_e10_e($468,$479,$3)|0);
   $487 = +HEAPF64[$3>>3];
   $488 = $487 * $485;
   HEAPF64[$3>>3] = $488;
   $489 = ($486|0)==(0);
   $490 = ($$093$i522|0)==(0);
   $$0499$ = $490 ? $$0499 : $$093$i522;
   $491 = $489 ? $$0499$ : $486;
   $$2 = $491;
   STACKTOP = sp;return ($$2|0);
  }
 }
 }
 return (0)|0;
}
function _hyperg_zaU_asymp($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$0 = 0, $$0103$lcssa$i = 0, $$0103108$i = 0, $$0104107$i = 0.0, $$07381 = 0.0, $$074$lcssa = 0.0, $$07480 = 0.0, $$07579 = 0.0, $$076$lcssa = 0.0, $$07678 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $101$phi = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $104$phi = 0.0, $105 = 0.0, $106 = 0.0;
 var $107 = 0.0, $108 = 0.0, $109 = 0.0, $109$phi = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $112$phi = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 + 1.0;
 $5 = $4 - $1;
 $6 = $5 + 0.5;
 $7 = (+Math_floor((+$6)));
 $8 = $0 < 0.0;
 $9 = $0 + 0.5;
 $10 = (+Math_floor((+$9)));
 $11 = $0 - $10;
 $12 = (+Math_abs((+$11)));
 $13 = $12 < 2.2204460492503131E-13;
 $14 = $8 & $13;
 $15 = $5 < 0.0;
 $16 = $5 - $7;
 $17 = (+Math_abs((+$16)));
 $18 = $17 < 2.2204460492503131E-13;
 $19 = $15 & $18;
 $or$cond = $14 | $19;
 if ($or$cond) {
  $20 = -1.0 / $2;
  $21 = $5 > $0;
  $22 = $21 ? $0 : $5;
  $23 = $22 + -0.10000000000000001;
  $24 = (~~(($23)));
  $25 = (0 - ($24))|0;
  $26 = (+($25|0));
  $27 = ($24|0)>(-1);
  if ($27) {
   $$074$lcssa = 0.0;$$076$lcssa = 1.0;
  } else {
   $$07381 = 1.0;$$07480 = 0.0;$$07579 = 1.0;$$07678 = 1.0;
   while(1) {
    $28 = $$07579 + $0;
    $29 = $28 + -1.0;
    $30 = $5 + $$07579;
    $31 = $30 + -1.0;
    $32 = $29 / $$07579;
    $33 = $20 * $32;
    $34 = $31 * $33;
    $35 = $$07381 * $34;
    $36 = $$07678 + $35;
    $37 = (+Math_abs((+$35)));
    $38 = $37 * 4.4408920985006262E-16;
    $39 = $$07480 + $38;
    $40 = $$07579 + 1.0;
    $41 = !($40 <= $26);
    if ($41) {
     $$074$lcssa = $39;$$076$lcssa = $36;
     break;
    } else {
     $$07381 = $35;$$07480 = $39;$$07579 = $40;$$07678 = $36;
    }
   }
  }
  HEAPF64[$3>>3] = $$076$lcssa;
  $42 = ((($3)) + 8|0);
  $43 = (+Math_abs((+$26)));
  $44 = $43 + 1.0;
  $45 = $44 * 4.4408920985006262E-16;
  $46 = (+Math_abs((+$$076$lcssa)));
  $47 = $45 * $46;
  $48 = $$074$lcssa + $47;
  HEAPF64[$42>>3] = $48;
  $$0 = 0;
  return ($$0|0);
 }
 $49 = $5 * $0;
 $50 = $2 - $49;
 $51 = $50 * 2.0;
 $52 = $5 + $0;
 $53 = $52 + 1.0;
 $54 = $49 + $53;
 $55 = $52 + $54;
 $56 = $55 + 3.0;
 $57 = $2 * 2.0;
 $58 = $57 / $56;
 $59 = $58 + 1.0;
 $60 = $57 / $54;
 $61 = $60 + 1.0;
 $62 = $51 / $54;
 $63 = $62 + 1.0;
 $64 = $59 * 6.0;
 $65 = $64 * $2;
 $66 = $65 / $54;
 $67 = $66 + 1.0;
 $68 = $49 * 6.0;
 $69 = $68 / $56;
 $70 = $69 + 1.0;
 $71 = $59 * 3.0;
 $72 = $51 * $71;
 $73 = $72 / $54;
 $74 = $70 + $73;
 $$0103108$i = 4;$$0104107$i = $56;$101 = $61;$104 = 1.0;$107 = $74;$109 = $63;$112 = 1.0;$99 = $67;
 while(1) {
  $75 = $$0103108$i << 1;
  $76 = (($75) + -3)|0;
  $77 = (+($76|0));
  $78 = $77 + -2.0;
  $79 = $77 / $78;
  $80 = $52 + $77;
  $81 = $$0104107$i + $80;
  $82 = $77 + -1.0;
  $83 = $82 / $81;
  $84 = $83 * $77;
  $85 = $84 + -1.0;
  $86 = $77 * 2.0;
  $87 = $86 * $2;
  $88 = $87 / $81;
  $89 = $52 * $83;
  $90 = $89 + $85;
  $91 = $79 * $90;
  $92 = $88 + $91;
  $93 = $88 - $85;
  $94 = 1.0 - $89;
  $95 = $83 * 2.0;
  $96 = $94 - $95;
  $97 = $79 * $96;
  $98 = $99 * $92;
  $100 = $101 * $93;
  $102 = $100 + $98;
  $103 = $104 * $97;
  $105 = $103 + $102;
  $106 = $107 * $92;
  $108 = $109 * $93;
  $110 = $108 + $106;
  $111 = $112 * $97;
  $113 = $111 + $110;
  $114 = $104 * $113;
  $115 = $112 * $105;
  $116 = $114 - $115;
  $117 = (+Math_abs((+$116)));
  $118 = $104 * $105;
  $119 = (+Math_abs((+$118)));
  $120 = $119 * 1.7763568394002505E-15;
  $121 = $117 < $120;
  if ($121) {
   $$0103$lcssa$i = $$0103108$i;
   break;
  }
  $122 = (($$0103108$i) + 1)|0;
  $123 = ($122>>>0)<(500);
  if ($123) {
   $112$phi = $109;$109$phi = $107;$104$phi = $101;$101$phi = $99;$$0103108$i = $122;$$0104107$i = $81;$107 = $113;$99 = $105;$112 = $112$phi;$109 = $109$phi;$104 = $104$phi;$101 = $101$phi;
  } else {
   $$0103$lcssa$i = 500;
   break;
  }
 }
 $124 = $113 / $105;
 HEAPF64[$3>>3] = $124;
 $125 = (+Math_abs((+$124)));
 $126 = $125 * 1.7763568394002505E-15;
 $127 = ((($3)) + 8|0);
 HEAPF64[$127>>3] = $126;
 $128 = ($$0103$lcssa$i|0)==(500);
 if (!($128)) {
  $$0 = 0;
  return ($$0|0);
 }
 _gsl_error(82813,82673,201,11);
 $$0 = 11;
 return ($$0|0);
}
function _hyperg_U_series($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$$i = 0, $$$i105 = 0, $$$i107 = 0, $$0 = 0, $$0$ = 0, $$0$i = 0, $$0126140$i = 0, $$0128$lcssa$i = 0.0, $$0128139$i = 0.0, $$0130$lcssa$i = 0.0, $$0130138$i = 0.0, $$0132137$i = 0.0, $$0133136$i = 0.0, $$0134143$i = 0.0, $$0135142$i = 0.0, $$0192$i = 0, $$019310$i = 0.0, $$01949$i = 0.0, $$01958$i = 0.0, $$01967$i = 0.0;
 var $$0197$lcssa$i = 0, $$01976$i = 0, $$01985$i = 0.0, $$02014$i = 0.0, $$0205$i = 0, $$020610$i = 0.0, $$02079$i = 0.0, $$02088$i = 0.0, $$02097$i = 0.0, $$0210$lcssa$i = 0, $$02106$i = 0, $$02115$i = 0.0, $$02124$i = 0.0, $$0277$i = 0, $$027810$i = 0.0, $$02799$i = 0.0, $$0280$lcssa$i = 0, $$02808$i = 0, $$02817$i = 0.0, $$02826$i = 0.0;
 var $$02845$i = 0.0, $$02864$i = 0.0, $$097 = 0, $$1127146$i = 0, $$1129$lcssa$i = 0.0, $$1129145$i = 0.0, $$1131$lcssa$i = 0.0, $$1131144$i = 0.0, $$2$i = 0, $$2$i108 = 0, $$203$i = 0, $$204$i = 0, $$205$i = 0, $$216$i = 0, $$217$i = 0, $$218$i = 0, $$3$i = 0, $$4$i = 0, $$pre$i = 0.0, $$pre13$i = 0.0;
 var $$sink$i = 0.0, $$sink155$i = 0.0, $$sroa$0$0 = 0.0, $$sroa$8$0 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0;
 var $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0;
 var $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0;
 var $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0;
 var $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0;
 var $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0;
 var $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0;
 var $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0;
 var $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0.0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0.0;
 var $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0;
 var $440 = 0.0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0.0;
 var $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0;
 var $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0;
 var $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0;
 var $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0, $525 = 0.0, $526 = 0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0;
 var $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0;
 var $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0, $584 = 0.0;
 var $585 = 0.0, $586 = 0.0, $587 = 0, $588 = 0.0, $589 = 0.0, $59 = 0.0, $590 = 0.0, $591 = 0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0.0, $600 = 0, $601 = 0.0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0.0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0.0;
 var $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0, $629 = 0.0, $63 = 0.0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0, $636 = 0.0, $637 = 0.0, $638 = 0.0;
 var $639 = 0.0, $64 = 0.0, $640 = 0.0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0;
 var $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0.0, $660 = 0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0;
 var $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0.0;
 var $693 = 0.0, $694 = 0.0, $695 = 0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0.0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0, $71 = 0.0;
 var $710 = 0.0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0.0, $720 = 0.0, $721 = 0.0, $722 = 0.0, $723 = 0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0.0;
 var $729 = 0.0, $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0;
 var $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0.0, $756 = 0.0, $757 = 0.0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0.0, $763 = 0, $764 = 0.0;
 var $765 = 0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0.0, $77 = 0.0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0.0, $780 = 0.0, $781 = 0.0, $782 = 0.0;
 var $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0.0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0, $80 = 0.0;
 var $800 = 0.0, $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0.0, $808 = 0.0, $809 = 0.0, $81 = 0.0, $810 = 0.0, $811 = 0.0, $812 = 0.0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0.0;
 var $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0.0, $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0.0, $828 = 0, $829 = 0, $83 = 0.0, $830 = 0, $831 = 0.0, $832 = 0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0.0;
 var $837 = 0.0, $838 = 0.0, $839 = 0.0, $84 = 0.0, $840 = 0.0, $841 = 0, $842 = 0, $843 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0;
 var $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $exitcond$i = 0, $or$cond = 0, $or$cond116 = 0, $or$cond3 = 0, $spec$select = 0.0, $spec$select$i = 0, $spec$select114 = 0.0, $spec$select117 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $4 = sp + 480|0;
 $5 = sp + 464|0;
 $6 = sp + 448|0;
 $7 = sp + 432|0;
 $8 = sp + 416|0;
 $9 = sp + 400|0;
 $10 = sp + 384|0;
 $11 = sp + 368|0;
 $12 = sp + 352|0;
 $13 = sp + 336|0;
 $14 = sp + 320|0;
 $15 = sp + 304|0;
 $16 = sp + 288|0;
 $17 = sp + 272|0;
 $18 = sp + 256|0;
 $19 = sp + 240|0;
 $20 = sp + 224|0;
 $21 = sp + 208|0;
 $22 = sp + 192|0;
 $23 = sp + 176|0;
 $24 = sp + 160|0;
 $25 = sp + 144|0;
 $26 = sp + 128|0;
 $27 = sp + 112|0;
 $28 = sp + 96|0;
 $29 = sp + 80|0;
 $30 = sp + 64|0;
 $31 = sp + 48|0;
 $32 = sp + 32|0;
 $33 = sp + 16|0;
 $34 = sp;
 $35 = $1 < 0.0;
 $36 = $1 + -0.5;
 $37 = (+Math_ceil((+$36)));
 $38 = $1 + 0.5;
 $39 = (+Math_floor((+$38)));
 $40 = $35 ? $37 : $39;
 $41 = $1 - $40;
 $42 = $0 - $41;
 $43 = $42 + 0.5;
 $44 = (+Math_floor((+$43)));
 $45 = $42 - $44;
 $46 = (+Math_abs((+$45)));
 $47 = $46 < 2.2204460492503131E-13;
 $48 = $42 <= 0.0;
 $or$cond = $48 & $47;
 $49 = $41 + -1.0;
 $50 = (+Math_floor((+$42)));
 $51 = $49 + $50;
 $52 = $40 + 1.0;
 $53 = $52 - $50;
 $spec$select = $or$cond ? $51 : $41;
 $spec$select114 = $or$cond ? $53 : $40;
 $54 = $0 + 1.0;
 $55 = $54 - $1;
 $56 = (+Math_abs((+$55)));
 $57 = $56 < 2.1073424255447017E-8;
 if ($57) {
  $58 = (+Math_log((+$2)));
  $59 = $58 * $0;
  $60 = - $59;
  $61 = (_gsl_sf_exp_e($60,$3)|0);
  $62 = +HEAPF64[$3>>3];
  $63 = (+Math_abs((+$62)));
  $64 = $63 * 4.2146848510894035E-8;
  $65 = ((($3)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $66 + $64;
  HEAPF64[$65>>3] = $67;
  $$097 = $61;
  STACKTOP = sp;return ($$097|0);
 }
 $68 = (~~(($spec$select114)));
 $69 = (+Math_log((+$2)));
 $70 = $69 * $spec$select;
 $71 = - $70;
 $72 = (+Math_exp((+$71)));
 $73 = ($68|0)<(1);
 if ($73) {
  $74 = (0 - ($68))|0;
  $75 = ($68|0)>(-1);
  if ($75) {
   $$0128$lcssa$i = 1.0;$$0130$lcssa$i = 0.0;
  } else {
   $$0126140$i = 1;$$0128139$i = 1.0;$$0130138$i = 0.0;$$0132137$i = 1.0;$$0133136$i = 0.0;
   while(1) {
    $76 = (($$0126140$i) + -1)|0;
    $77 = (+($76|0));
    $78 = $77 + $0;
    $79 = $78 * $2;
    $80 = $77 + $1;
    $81 = $77 + 1.0;
    $82 = $80 * $81;
    $83 = $79 / $82;
    $84 = $$0132137$i * $83;
    $85 = (+Math_abs((+$83)));
    $86 = $$0133136$i * $85;
    $87 = (+Math_abs((+$84)));
    $88 = $87 * 8.0;
    $89 = $88 * 2.0;
    $90 = $89 * 2.2204460492503131E-16;
    $91 = $86 + $90;
    $92 = $$0133136$i + $91;
    $93 = $$0128139$i + $84;
    $94 = $$0130138$i + $92;
    $95 = (($$0126140$i) + 1)|0;
    $96 = ($$0126140$i|0)<($74|0);
    if ($96) {
     $$0126140$i = $95;$$0128139$i = $93;$$0130138$i = $94;$$0132137$i = $84;$$0133136$i = $92;
    } else {
     $$0128$lcssa$i = $93;$$0130$lcssa$i = $94;
     break;
    }
   }
  }
  $97 = - $0;
  $98 = (_gsl_sf_poch_e($55,$97,$31)|0);
  $99 = +HEAPF64[$31>>3];
  $100 = $$0128$lcssa$i * $99;
  $101 = (+Math_abs((+$$0128$lcssa$i)));
  $102 = ((($31)) + 8|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $101 * $103;
  $105 = (+Math_abs((+$99)));
  $106 = $$0130$lcssa$i * $105;
  $107 = $106 + $104;
  $108 = (+($68|0));
  $109 = (+Math_abs((+$108)));
  $110 = $109 + 2.0;
  $111 = $110 * $105;
  $112 = $111 * 2.2204460492503131E-16;
  $113 = $101 * $112;
  $114 = $107 + $113;
  $115 = (+Math_abs((+$100)));
  $116 = $115 * 4.4408920985006262E-16;
  $117 = $116 + $114;
  $118 = $117 * 2.0;
  $$2$i = $98;$$sroa$0$0 = $100;$$sroa$8$0 = $118;
 } else {
  $119 = (($68) + -2)|0;
  $120 = ($68|0)==(1);
  if ($120) {
   $$2$i = 0;$$sroa$0$0 = 0.0;$$sroa$8$0 = 0.0;
  } else {
   $121 = ($68|0)<(3);
   if ($121) {
    $$1129$lcssa$i = 1.0;$$1131$lcssa$i = 0.0;
   } else {
    $122 = $0 - $1;
    $123 = 1.0 - $1;
    $124 = (($68) + -1)|0;
    $$0134143$i = 0.0;$$0135142$i = 1.0;$$1127146$i = 1;$$1129145$i = 1.0;$$1131144$i = 0.0;
    while(1) {
     $125 = (+($$1127146$i|0));
     $126 = $122 + $125;
     $127 = $126 * $2;
     $128 = $123 + $125;
     $129 = $128 * $125;
     $130 = $127 / $129;
     $131 = $$0135142$i * $130;
     $132 = (+Math_abs((+$130)));
     $133 = $$0134143$i * $132;
     $134 = (+Math_abs((+$131)));
     $135 = $134 * 8.0;
     $136 = $135 * 2.0;
     $137 = $136 * 2.2204460492503131E-16;
     $138 = $133 + $137;
     $139 = $$0134143$i + $138;
     $140 = $$1129145$i + $131;
     $141 = $$1131144$i + $139;
     $142 = (($$1127146$i) + 1)|0;
     $exitcond$i = ($142|0)==($124|0);
     if ($exitcond$i) {
      $$1129$lcssa$i = $140;$$1131$lcssa$i = $141;
      break;
     } else {
      $$0134143$i = $139;$$0135142$i = $131;$$1127146$i = $142;$$1129145$i = $140;$$1131144$i = $141;
     }
    }
   }
   $143 = $1 + -1.0;
   $144 = (_gsl_sf_gamma_e($143,$32)|0);
   (_gsl_sf_gammainv_e($0,$33)|0);
   $145 = ($144|0)==(0);
   if ($145) {
    $146 = (1 - ($68))|0;
    $147 = (_gsl_sf_pow_int_e($2,$146,$34)|0);
    $148 = +HEAPF64[$34>>3];
    $149 = $72 * $148;
    $150 = ((($34)) + 8|0);
    $151 = +HEAPF64[$150>>3];
    $152 = $72 * $151;
    $153 = (+Math_abs((+$149)));
    $154 = $153 * 4.4408920985006262E-16;
    $155 = $152 + $154;
    $156 = +HEAPF64[$32>>3];
    $157 = +HEAPF64[$33>>3];
    $158 = $156 * $157;
    $159 = $149 * $158;
    $160 = ((($32)) + 8|0);
    $161 = +HEAPF64[$160>>3];
    $162 = $149 * $157;
    $163 = (+Math_abs((+$162)));
    $164 = $161 * $163;
    $165 = ((($33)) + 8|0);
    $166 = +HEAPF64[$165>>3];
    $167 = $149 * $156;
    $168 = (+Math_abs((+$167)));
    $169 = $168 * $166;
    $170 = $164 + $169;
    $171 = (+Math_abs((+$158)));
    $172 = $155 * $171;
    $173 = $172 + $170;
    $174 = (+Math_abs((+$159)));
    $175 = $174 * 4.4408920985006262E-16;
    $176 = $175 + $173;
    $177 = $$1129$lcssa$i * $159;
    $178 = (+Math_abs((+$$1129$lcssa$i)));
    $179 = $178 * $176;
    $180 = $$1131$lcssa$i * $174;
    $181 = $180 + $179;
    $182 = (+($119|0));
    $183 = $182 + 2.0;
    $184 = $183 * 4.4408920985006262E-16;
    $185 = (+Math_abs((+$177)));
    $186 = $184 * $185;
    $187 = $186 + $181;
    $188 = $187 * 2.0;
    $$0$i = $147;$$sink$i = $188;$$sink155$i = $177;
   } else {
    $$0$i = $144;$$sink$i = 0.0;$$sink155$i = 0.0;
   }
   $$2$i = $$0$i;$$sroa$0$0 = $$sink155$i;$$sroa$8$0 = $$sink$i;
  }
 }
 $189 = $72 + -1.0;
 $190 = (+Math_abs((+$189)));
 $191 = $190 > 0.5;
 do {
  if ($191) {
   $192 = (1 - ($68))|0;
   $193 = $73 ? $192 : 0;
   $194 = (+($193|0));
   $195 = (_gsl_sf_gammainv_e($55,$23)|0);
   $196 = (_gsl_sf_pow_int_e($2,$193,$24)|0);
   $197 = $spec$select * 3.1415926535897931;
   $198 = $197 != 0.0;
   $199 = (+Math_sin((+$197)));
   $200 = $197 / $199;
   $201 = $198 ? $200 : 1.0;
   $202 = $68 & 1;
   $203 = ($202|0)==(0);
   $204 = $203 ? 1.0 : -1.0;
   $205 = $204 * $201;
   $206 = +HEAPF64[$23>>3];
   $207 = $205 * $206;
   $208 = +HEAPF64[$24>>3];
   $209 = $207 * $208;
   $210 = (+Math_abs((+$206)));
   $211 = ((($24)) + 8|0);
   $212 = +HEAPF64[$211>>3];
   $213 = $210 * $212;
   $214 = (+Math_abs((+$208)));
   $215 = ((($23)) + 8|0);
   $216 = +HEAPF64[$215>>3];
   $217 = $214 * $216;
   $218 = $213 + $217;
   $219 = (+Math_abs((+$209)));
   $220 = $219 * 4.4408920985006262E-16;
   $221 = $220 + $218;
   $222 = (_gsl_sf_poch_e($0,$194,$25)|0);
   $223 = $194 + 1.0;
   $224 = (_gsl_sf_gammainv_e($223,$26)|0);
   $225 = $spec$select114 + $194;
   $226 = (_gsl_sf_gammainv_e($225,$27)|0);
   $227 = ($195|0)==(0);
   $228 = ($224|0)==(0);
   $$$i = $228 ? $226 : $224;
   $229 = $227 ? $$$i : $195;
   $230 = ($229|0)==(0);
   $231 = ($222|0)==(0);
   $$203$i = $231 ? $196 : $222;
   $232 = $230 ? $$203$i : $229;
   $233 = $194 - $spec$select;
   $234 = (_gsl_sf_poch_e($0,$233,$28)|0);
   $235 = $223 - $spec$select;
   $236 = (_gsl_sf_gammainv_e($235,$29)|0);
   $237 = ($232|0)==(0);
   $238 = ($234|0)==(0);
   $$204$i = $238 ? $236 : $234;
   $239 = $237 ? $$204$i : $232;
   $240 = +HEAPF64[$28>>3];
   $241 = $209 * $240;
   $242 = +HEAPF64[$27>>3];
   $243 = $241 * $242;
   $244 = +HEAPF64[$29>>3];
   $245 = $243 * $244;
   $246 = (+Math_abs((+$243)));
   $247 = ((($29)) + 8|0);
   $248 = +HEAPF64[$247>>3];
   $249 = $246 * $248;
   $250 = $241 * $244;
   $251 = (+Math_abs((+$250)));
   $252 = ((($27)) + 8|0);
   $253 = +HEAPF64[$252>>3];
   $254 = $251 * $253;
   $255 = $249 + $254;
   $256 = $209 * $242;
   $257 = $256 * $244;
   $258 = (+Math_abs((+$257)));
   $259 = ((($28)) + 8|0);
   $260 = +HEAPF64[$259>>3];
   $261 = $258 * $260;
   $262 = $255 + $261;
   $263 = $240 * $242;
   $264 = $263 * $244;
   $265 = (+Math_abs((+$264)));
   $266 = $221 * $265;
   $267 = $266 + $262;
   $268 = (+Math_abs((+$245)));
   $269 = $268 * 4.4408920985006262E-16;
   $270 = $269 + $267;
   $271 = $194 + $1;
   $272 = (_gsl_sf_gammainv_e($271,$30)|0);
   $273 = +HEAPF64[$25>>3];
   $274 = $209 * $273;
   $275 = +HEAPF64[$30>>3];
   $276 = $274 * $275;
   $277 = +HEAPF64[$26>>3];
   $278 = $276 * $277;
   $279 = $278 / $spec$select;
   $280 = $276 / $spec$select;
   $281 = (+Math_abs((+$280)));
   $282 = ((($26)) + 8|0);
   $283 = +HEAPF64[$282>>3];
   $284 = $283 * $281;
   $285 = $274 * $277;
   $286 = $285 / $spec$select;
   $287 = (+Math_abs((+$286)));
   $288 = ((($30)) + 8|0);
   $289 = +HEAPF64[$288>>3];
   $290 = $289 * $287;
   $291 = $284 + $290;
   $292 = $209 * $275;
   $293 = $292 * $277;
   $294 = $293 / $spec$select;
   $295 = (+Math_abs((+$294)));
   $296 = ((($25)) + 8|0);
   $297 = +HEAPF64[$296>>3];
   $298 = $295 * $297;
   $299 = $298 + $291;
   $300 = $273 * $275;
   $301 = $300 * $277;
   $302 = $301 / $spec$select;
   $303 = (+Math_abs((+$302)));
   $304 = $221 * $303;
   $305 = $304 + $299;
   $306 = (+Math_abs((+$279)));
   $307 = $306 * 4.4408920985006262E-16;
   $308 = $307 + $305;
   $309 = ($239|0)==(0);
   $$205$i = $309 ? $272 : $239;
   $310 = $72 * $245;
   $311 = $310 / $spec$select;
   $312 = $72 / $spec$select;
   $313 = (+Math_abs((+$312)));
   $314 = $313 * $270;
   $315 = (+Math_abs((+$311)));
   $316 = $315 * 8.8817841970012523E-16;
   $317 = $316 + $314;
   $318 = $$sroa$0$0 + $279;
   $319 = $318 - $311;
   $320 = $$sroa$8$0 + $308;
   $321 = $317 + $320;
   $322 = (+Math_abs((+$$sroa$0$0)));
   $323 = $322 + $306;
   $324 = $315 + $323;
   $325 = $324 * 4.4408920985006262E-16;
   $326 = $325 + $321;
   $$019310$i = $311;$$01949$i = $317;$$01958$i = $308;$$01967$i = $279;$$01976$i = 1;$$01985$i = $319;$$02014$i = $326;
   while(1) {
    $327 = (($$01976$i) + ($193))|0;
    $328 = (+($327|0));
    $329 = (($327) + -1)|0;
    $330 = (+($329|0));
    $331 = $330 + $0;
    $332 = $331 * $2;
    $333 = $330 + $1;
    $334 = $333 * $328;
    $335 = $332 / $334;
    $336 = $331 - $spec$select;
    $337 = $336 * $2;
    $338 = $spec$select114 + $330;
    $339 = $328 - $spec$select;
    $340 = $339 * $338;
    $341 = $337 / $340;
    $342 = $$01967$i * $335;
    $343 = (+Math_abs((+$335)));
    $344 = $$01958$i * $343;
    $345 = $$01958$i + $344;
    $346 = $$019310$i * $341;
    $347 = (+Math_abs((+$341)));
    $348 = $$01949$i * $347;
    $349 = $$01949$i + $348;
    $350 = $342 - $346;
    $351 = $345 + $349;
    $352 = $$01985$i + $350;
    $353 = $$02014$i + $351;
    $354 = (+Math_abs((+$350)));
    $355 = (+Math_abs((+$352)));
    $356 = $355 * 4.4408920985006262E-16;
    $357 = !($354 < $356);
    if (!($357)) {
     $$0197$lcssa$i = $$01976$i;
     break;
    }
    $358 = (($$01976$i) + 1)|0;
    $359 = ($358>>>0)<(2000);
    if ($359) {
     $$019310$i = $346;$$01949$i = $349;$$01958$i = $345;$$01967$i = $342;$$01976$i = $358;$$01985$i = $352;$$02014$i = $353;
    } else {
     $$0197$lcssa$i = 2000;
     break;
    }
   }
   HEAPF64[$3>>3] = $352;
   $360 = $353 * 2.0;
   $361 = ((($3)) + 8|0);
   $362 = $354 * 2.0;
   $363 = $362 + $360;
   $364 = (+($$0197$lcssa$i|0));
   $365 = $364 + 2.0;
   $366 = $365 * 8.8817841970012523E-16;
   $367 = $355 * $366;
   $368 = $363 + $367;
   $369 = $368 * 2.0;
   HEAPF64[$361>>3] = $369;
   $370 = ($$0197$lcssa$i>>>0)>(1999);
   if ($370) {
    _gsl_error(82813,82673,438,11);
    $$0192$i = 11;
   } else {
    $$0192$i = $$205$i;
   }
   $$0 = $$0192$i;
  } else {
   $371 = $55 < 0.0;
   if ($371) {
    $372 = (+Math_floor((+$55)));
    $373 = $55 == $372;
    $374 = $spec$select != 0.0;
    $or$cond3 = $373 & $374;
    if ($or$cond3) {
     $375 = (1 - ($68))|0;
     $376 = $73 ? $375 : 0;
     $377 = (+($376|0));
     $378 = (_gsl_sf_pow_int_e($2,$376,$15)|0);
     $379 = $spec$select * 3.1415926535897931;
     $380 = $379 != 0.0;
     $381 = (+Math_sin((+$379)));
     $382 = $379 / $381;
     $383 = $380 ? $382 : 1.0;
     $384 = $68 & 1;
     $385 = ($384|0)==(0);
     $386 = $385 ? 1.0 : -1.0;
     $387 = $386 * $383;
     $388 = +HEAPF64[$15>>3];
     $389 = $387 * $388;
     $390 = ((($15)) + 8|0);
     $391 = +HEAPF64[$390>>3];
     $392 = (+Math_abs((+$391)));
     $393 = (+Math_abs((+$389)));
     $394 = $393 * 4.4408920985006262E-16;
     $395 = $392 + $394;
     $396 = (_gsl_sf_poch_e($0,$377,$16)|0);
     $397 = $377 + 1.0;
     $398 = (_gsl_sf_gammainv_e($397,$17)|0);
     $399 = $spec$select114 + $377;
     $400 = (_gsl_sf_gammainv_e($399,$18)|0);
     $401 = ($398|0)==(0);
     $$$i105 = $401 ? $400 : $398;
     $402 = ($$$i105|0)==(0);
     $403 = ($396|0)==(0);
     $$216$i = $403 ? $378 : $396;
     $404 = $402 ? $$216$i : $$$i105;
     $405 = $377 - $spec$select;
     $406 = (_gsl_sf_poch_e($0,$405,$19)|0);
     $407 = $397 - $spec$select;
     $408 = (_gsl_sf_gammainv_e($407,$20)|0);
     $409 = ($404|0)==(0);
     $410 = ($406|0)==(0);
     $$217$i = $410 ? $408 : $406;
     $411 = $409 ? $$217$i : $404;
     $412 = +HEAPF64[$15>>3];
     $413 = $387 * $412;
     $414 = $377 + -1.0;
     $415 = $414 + $1;
     $416 = $415 - $spec$select;
     $417 = (+_gsl_sf_poch($55,$416));
     $418 = $413 * $417;
     $419 = (+_gsl_sf_gammainv($0));
     $420 = $418 * $419;
     $421 = +HEAPF64[$18>>3];
     $422 = $420 * $421;
     $423 = +HEAPF64[$20>>3];
     $424 = $422 * $423;
     $425 = +HEAPF64[$19>>3];
     $426 = $389 * $425;
     $427 = $421 * $426;
     $428 = (+Math_abs((+$427)));
     $429 = ((($20)) + 8|0);
     $430 = +HEAPF64[$429>>3];
     $431 = $430 * $428;
     $432 = $423 * $426;
     $433 = (+Math_abs((+$432)));
     $434 = ((($18)) + 8|0);
     $435 = +HEAPF64[$434>>3];
     $436 = $435 * $433;
     $437 = $431 + $436;
     $438 = $389 * $421;
     $439 = $438 * $423;
     $440 = (+Math_abs((+$439)));
     $441 = ((($19)) + 8|0);
     $442 = +HEAPF64[$441>>3];
     $443 = $440 * $442;
     $444 = $443 + $437;
     $445 = $421 * $425;
     $446 = $423 * $445;
     $447 = (+Math_abs((+$446)));
     $448 = $395 * $447;
     $449 = $448 + $444;
     $450 = (+Math_abs((+$424)));
     $451 = $450 * 4.4408920985006262E-16;
     $452 = $451 + $449;
     $453 = (_gsl_sf_gammainv_e($55,$21)|0);
     $454 = $377 + $1;
     $455 = (_gsl_sf_gammainv_e($454,$22)|0);
     $456 = +HEAPF64[$21>>3];
     $457 = $389 * $456;
     $458 = +HEAPF64[$16>>3];
     $459 = $457 * $458;
     $460 = +HEAPF64[$22>>3];
     $461 = $459 * $460;
     $462 = +HEAPF64[$17>>3];
     $463 = $461 * $462;
     $464 = $463 / $spec$select;
     $465 = $389 * $458;
     $466 = $465 * $460;
     $467 = $466 * $462;
     $468 = $467 / $spec$select;
     $469 = (+Math_abs((+$468)));
     $470 = ((($21)) + 8|0);
     $471 = +HEAPF64[$470>>3];
     $472 = $471 * $469;
     $473 = $457 * $460;
     $474 = $473 * $462;
     $475 = $474 / $spec$select;
     $476 = (+Math_abs((+$475)));
     $477 = ((($16)) + 8|0);
     $478 = +HEAPF64[$477>>3];
     $479 = $478 * $476;
     $480 = $472 + $479;
     $481 = $459 * $462;
     $482 = $481 / $spec$select;
     $483 = (+Math_abs((+$482)));
     $484 = ((($22)) + 8|0);
     $485 = +HEAPF64[$484>>3];
     $486 = $483 * $485;
     $487 = $486 + $480;
     $488 = $461 / $spec$select;
     $489 = (+Math_abs((+$488)));
     $490 = ((($17)) + 8|0);
     $491 = +HEAPF64[$490>>3];
     $492 = $489 * $491;
     $493 = $492 + $487;
     $494 = $456 * $458;
     $495 = $494 * $460;
     $496 = $495 * $462;
     $497 = $496 / $spec$select;
     $498 = (+Math_abs((+$497)));
     $499 = $395 * $498;
     $500 = $499 + $493;
     $501 = (+Math_abs((+$464)));
     $502 = $501 * 4.4408920985006262E-16;
     $503 = $502 + $500;
     $504 = ($411|0)==(0);
     $505 = ($453|0)==(0);
     $$218$i = $505 ? $455 : $453;
     $506 = $504 ? $$218$i : $411;
     $507 = $72 * $424;
     $508 = $507 / $spec$select;
     $509 = $72 / $spec$select;
     $510 = (+Math_abs((+$509)));
     $511 = $510 * $452;
     $512 = (+Math_abs((+$508)));
     $513 = $512 * 8.8817841970012523E-16;
     $514 = $513 + $511;
     $515 = $$sroa$0$0 + $464;
     $516 = $515 - $508;
     $517 = $$sroa$8$0 + $503;
     $518 = $514 + $517;
     $519 = (+Math_abs((+$$sroa$0$0)));
     $520 = $519 + $501;
     $521 = $512 + $520;
     $522 = $521 * 4.4408920985006262E-16;
     $523 = $522 + $518;
     $$020610$i = $508;$$02079$i = $514;$$02088$i = $503;$$02097$i = $464;$$02106$i = 1;$$02115$i = $516;$$02124$i = $523;
     while(1) {
      $524 = (($$02106$i) + ($376))|0;
      $525 = (+($524|0));
      $526 = (($524) + -1)|0;
      $527 = (+($526|0));
      $528 = $527 + $0;
      $529 = $528 * $2;
      $530 = $527 + $1;
      $531 = $530 * $525;
      $532 = $529 / $531;
      $533 = $528 - $spec$select;
      $534 = $533 * $2;
      $535 = $spec$select114 + $527;
      $536 = $525 - $spec$select;
      $537 = $536 * $535;
      $538 = $534 / $537;
      $539 = $$02097$i * $532;
      $540 = (+Math_abs((+$532)));
      $541 = $$02088$i * $540;
      $542 = $$02088$i + $541;
      $543 = $$020610$i * $538;
      $544 = (+Math_abs((+$538)));
      $545 = $$02079$i * $544;
      $546 = $$02079$i + $545;
      $547 = $539 - $543;
      $548 = $542 + $546;
      $549 = $$02115$i + $547;
      $550 = $$02124$i + $548;
      $551 = (_gsl_finite($547)|0);
      $552 = ($551|0)==(0);
      $$pre$i = (+Math_abs((+$547)));
      $$pre13$i = (+Math_abs((+$549)));
      $553 = $$pre13$i * 4.4408920985006262E-16;
      $554 = $$pre$i < $553;
      $or$cond116 = $552 | $554;
      if ($or$cond116) {
       $$0210$lcssa$i = $$02106$i;
       break;
      }
      $555 = (($$02106$i) + 1)|0;
      $556 = ($555>>>0)<(2000);
      if ($556) {
       $$020610$i = $543;$$02079$i = $546;$$02088$i = $542;$$02097$i = $539;$$02106$i = $555;$$02115$i = $549;$$02124$i = $550;
      } else {
       $$0210$lcssa$i = 2000;
       break;
      }
     }
     HEAPF64[$3>>3] = $549;
     $557 = $550 * 2.0;
     $558 = ((($3)) + 8|0);
     $559 = $$pre$i * 2.0;
     $560 = $559 + $557;
     $561 = (+($$0210$lcssa$i|0));
     $562 = $561 + 2.0;
     $563 = $562 * 8.8817841970012523E-16;
     $564 = $$pre13$i * $563;
     $565 = $560 + $564;
     $566 = $565 * 2.0;
     HEAPF64[$558>>3] = $566;
     $567 = ($$0210$lcssa$i>>>0)>(1999);
     if ($567) {
      _gsl_error(82813,82673,537,11);
      $$0205$i = 11;
     } else {
      $$0205$i = $506;
     }
     $$0 = $$0205$i;
     break;
    }
   }
   $568 = (1 - ($68))|0;
   $569 = $73 ? $568 : 0;
   $570 = (+($569|0));
   $571 = (_gsl_sf_gammainv_e($55,$4)|0);
   $572 = (_gsl_sf_pow_int_e($2,$569,$5)|0);
   $573 = $spec$select * 3.1415926535897931;
   $574 = $573 != 0.0;
   $575 = (+Math_sin((+$573)));
   $576 = $573 / $575;
   $577 = $574 ? $576 : 1.0;
   $578 = $68 & 1;
   $579 = ($578|0)==(0);
   $580 = $579 ? 1.0 : -1.0;
   $581 = $580 * $577;
   $582 = +HEAPF64[$4>>3];
   $583 = $581 * $582;
   $584 = +HEAPF64[$5>>3];
   $585 = $583 * $584;
   $586 = (+Math_abs((+$582)));
   $587 = ((($5)) + 8|0);
   $588 = +HEAPF64[$587>>3];
   $589 = $586 * $588;
   $590 = (+Math_abs((+$584)));
   $591 = ((($4)) + 8|0);
   $592 = +HEAPF64[$591>>3];
   $593 = $590 * $592;
   $594 = $589 + $593;
   $595 = (+Math_abs((+$585)));
   $596 = $595 * 4.4408920985006262E-16;
   $597 = $596 + $594;
   $598 = (_gsl_sf_poch_e($0,$570,$6)|0);
   $599 = $570 + 1.0;
   $600 = (_gsl_sf_gammainv_e($599,$7)|0);
   $601 = $spec$select114 + $570;
   $602 = (_gsl_sf_gammainv_e($601,$8)|0);
   $603 = ($571|0)==(0);
   $604 = ($600|0)==(0);
   $$$i107 = $604 ? $602 : $600;
   $605 = $603 ? $$$i107 : $571;
   $606 = ($605|0)==(0);
   $607 = ($598|0)==(0);
   $$2$i108 = $607 ? $572 : $598;
   $608 = $606 ? $$2$i108 : $605;
   $609 = $570 - $spec$select;
   $610 = (_gsl_sf_poch_e($0,$609,$9)|0);
   $611 = $599 - $spec$select;
   $612 = (_gsl_sf_gammainv_e($611,$10)|0);
   $613 = ($608|0)==(0);
   $614 = ($610|0)==(0);
   $$3$i = $614 ? $612 : $610;
   $615 = $613 ? $$3$i : $608;
   $616 = +HEAPF64[$9>>3];
   $617 = $585 * $616;
   $618 = +HEAPF64[$8>>3];
   $619 = $617 * $618;
   $620 = +HEAPF64[$10>>3];
   $621 = $619 * $620;
   $622 = (+Math_abs((+$619)));
   $623 = ((($10)) + 8|0);
   $624 = +HEAPF64[$623>>3];
   $625 = $622 * $624;
   $626 = $617 * $620;
   $627 = (+Math_abs((+$626)));
   $628 = ((($8)) + 8|0);
   $629 = +HEAPF64[$628>>3];
   $630 = $627 * $629;
   $631 = $625 + $630;
   $632 = $585 * $618;
   $633 = $632 * $620;
   $634 = (+Math_abs((+$633)));
   $635 = ((($9)) + 8|0);
   $636 = +HEAPF64[$635>>3];
   $637 = $634 * $636;
   $638 = $631 + $637;
   $639 = $616 * $618;
   $640 = $639 * $620;
   $641 = (+Math_abs((+$640)));
   $642 = $597 * $641;
   $643 = $642 + $638;
   $644 = (+Math_abs((+$621)));
   $645 = $644 * 4.4408920985006262E-16;
   $646 = $645 + $643;
   $647 = $570 + $0;
   $648 = - $spec$select;
   $649 = (_gsl_sf_pochrel_e($647,$648,$11)|0);
   $650 = (_gsl_sf_pochrel_e($611,$spec$select,$12)|0);
   $651 = $570 + $1;
   $652 = (_gsl_sf_pochrel_e($651,$648,$13)|0);
   $653 = +HEAPF64[$11>>3];
   $654 = $spec$select * $653;
   $655 = +HEAPF64[$12>>3];
   $656 = $654 * $655;
   $657 = (+Math_abs((+$spec$select)));
   $658 = (+Math_abs((+$653)));
   $659 = $657 * $658;
   $660 = ((($12)) + 8|0);
   $661 = +HEAPF64[$660>>3];
   $662 = $659 * $661;
   $663 = (+Math_abs((+$655)));
   $664 = $657 * $663;
   $665 = ((($11)) + 8|0);
   $666 = +HEAPF64[$665>>3];
   $667 = $664 * $666;
   $668 = $662 + $667;
   $669 = (+Math_abs((+$656)));
   $670 = $669 * 4.4408920985006262E-16;
   $671 = $670 + $668;
   $672 = +HEAPF64[$13>>3];
   $673 = $653 - $672;
   $674 = $673 - $655;
   $675 = $656 + $674;
   $676 = ((($13)) + 8|0);
   $677 = +HEAPF64[$676>>3];
   $678 = $666 + $677;
   $679 = $661 + $678;
   $680 = $671 + $679;
   $681 = (+Math_abs((+$675)));
   $682 = $681 * 4.4408920985006262E-16;
   $683 = $680 + $682;
   $684 = +HEAPF64[$6>>3];
   $685 = $585 * $684;
   $686 = +HEAPF64[$8>>3];
   $687 = $685 * $686;
   $688 = +HEAPF64[$7>>3];
   $689 = $687 * $688;
   $690 = $675 * $689;
   $691 = (+Math_abs((+$689)));
   $692 = $691 * $683;
   $693 = $675 * $687;
   $694 = (+Math_abs((+$693)));
   $695 = ((($7)) + 8|0);
   $696 = +HEAPF64[$695>>3];
   $697 = $696 * $694;
   $698 = $692 + $697;
   $699 = $685 * $688;
   $700 = $675 * $699;
   $701 = (+Math_abs((+$700)));
   $702 = +HEAPF64[$628>>3];
   $703 = $702 * $701;
   $704 = $698 + $703;
   $705 = $585 * $686;
   $706 = $705 * $688;
   $707 = $675 * $706;
   $708 = (+Math_abs((+$707)));
   $709 = ((($6)) + 8|0);
   $710 = +HEAPF64[$709>>3];
   $711 = $708 * $710;
   $712 = $711 + $704;
   $713 = $684 * $686;
   $714 = $713 * $688;
   $715 = $675 * $714;
   $716 = (+Math_abs((+$715)));
   $717 = $597 * $716;
   $718 = $717 + $712;
   $719 = (+Math_abs((+$690)));
   $720 = $719 * 4.4408920985006262E-16;
   $721 = $720 + $718;
   $722 = $69 * $648;
   $723 = (_gsl_sf_exprel_e($722,$14)|0);
   $724 = +HEAPF64[$14>>3];
   $725 = $69 * $724;
   $726 = (+Math_abs((+$70)));
   $727 = $726 + 1.0;
   $728 = $727 * 4.4408920985006262E-16;
   $729 = (+Math_abs((+$724)));
   $730 = $728 * $729;
   $731 = (+Math_abs((+$69)));
   $732 = ((($14)) + 8|0);
   $733 = +HEAPF64[$732>>3];
   $734 = $731 * $733;
   $735 = $730 + $734;
   $736 = (+Math_abs((+$725)));
   $737 = $736 * 4.4408920985006262E-16;
   $738 = $735 + $737;
   $739 = $$sroa$0$0 + $690;
   $740 = $621 * $725;
   $741 = $739 + $740;
   $742 = $$sroa$8$0 + $721;
   $743 = $646 * $736;
   $744 = $742 + $743;
   $745 = $644 * $738;
   $746 = $744 + $745;
   $747 = $69 * $621;
   $748 = (+Math_abs((+$747)));
   $749 = $748 * $733;
   $750 = $749 + $746;
   $751 = (+Math_abs((+$$sroa$0$0)));
   $752 = $751 + $719;
   $753 = (+Math_abs((+$740)));
   $754 = $752 + $753;
   $755 = $754 * 4.4408920985006262E-16;
   $756 = $755 + $750;
   $757 = (+($68|0));
   $758 = ($615|0)==(0);
   if ($758) {
    $759 = ($723|0)==(0);
    $760 = ($652|0)==(0);
    $761 = ($650|0)==(0);
    $$4$i = $761 ? $649 : $650;
    $spec$select$i = $760 ? $$4$i : $652;
    $spec$select117 = $759 ? $spec$select$i : $723;
    $843 = $spec$select117;
   } else {
    $843 = $615;
   }
   $762 = $0 + -1.0;
   $$027810$i = $621;$$02799$i = $646;$$02808$i = 1;$$02817$i = $690;$$02826$i = $721;$$02845$i = $741;$$02864$i = $756;
   while(1) {
    $763 = (($$02808$i) + ($569))|0;
    $764 = (+($763|0));
    $765 = (($763) + -1)|0;
    $766 = (+($765|0));
    $767 = $764 * 2.0;
    $768 = $767 + $757;
    $769 = $768 + -1.0;
    $770 = $762 * $769;
    $771 = $764 - $spec$select;
    $772 = $771 * $764;
    $773 = $772 + $770;
    $774 = $766 + $0;
    $775 = $774 - $spec$select;
    $776 = $775 * $2;
    $777 = $757 + $766;
    $778 = $771 * $777;
    $779 = $776 / $778;
    $780 = $774 * $2;
    $781 = $766 + $1;
    $782 = $781 * $764;
    $783 = $780 / $782;
    $784 = $782 * $775;
    $785 = $773 / $784;
    $786 = $$027810$i * $779;
    $787 = (+Math_abs((+$779)));
    $788 = $$02799$i * $787;
    $789 = (+Math_abs((+$786)));
    $790 = $789 * 8.0;
    $791 = $790 * 2.0;
    $792 = $791 * 2.2204460492503131E-16;
    $793 = $788 + $792;
    $794 = $$02799$i + $793;
    $795 = $$02817$i * $783;
    $796 = $785 * $786;
    $797 = $795 - $796;
    $798 = (+Math_abs((+$783)));
    $799 = $$02826$i * $798;
    $800 = (+Math_abs((+$785)));
    $801 = $800 * $794;
    $802 = $799 + $801;
    $803 = (+Math_abs((+$797)));
    $804 = $803 * 8.0;
    $805 = $804 * 2.0;
    $806 = $805 * 2.2204460492503131E-16;
    $807 = $806 + $802;
    $808 = (+Math_abs((+$796)));
    $809 = $808 * 16.0;
    $810 = $809 * 2.0;
    $811 = $810 * 2.2204460492503131E-16;
    $812 = $811 + $807;
    $813 = $725 * $786;
    $814 = $813 + $797;
    $815 = $736 * $794;
    $816 = $815 + $812;
    $817 = $69 * $786;
    $818 = (+Math_abs((+$817)));
    $819 = $733 * $818;
    $820 = $819 + $816;
    $821 = $738 * $789;
    $822 = $821 + $820;
    $823 = $$02845$i + $814;
    $824 = $$02864$i + $822;
    $825 = (+Math_abs((+$814)));
    $826 = (+Math_abs((+$823)));
    $827 = $826 * 4.4408920985006262E-16;
    $828 = !($825 < $827);
    if (!($828)) {
     $$0280$lcssa$i = $$02808$i;
     break;
    }
    $829 = (($$02808$i) + 1)|0;
    $830 = ($829>>>0)<(2000);
    if ($830) {
     $$027810$i = $786;$$02799$i = $794;$$02808$i = $829;$$02817$i = $797;$$02826$i = $812;$$02845$i = $823;$$02864$i = $824;
    } else {
     $$0280$lcssa$i = 2000;
     break;
    }
   }
   HEAPF64[$3>>3] = $823;
   $831 = $824 * 2.0;
   $832 = ((($3)) + 8|0);
   $833 = $825 * 2.0;
   $834 = $833 + $831;
   $835 = (+($$0280$lcssa$i|0));
   $836 = $835 + 2.0;
   $837 = $836 * 8.8817841970012523E-16;
   $838 = $826 * $837;
   $839 = $834 + $838;
   $840 = $839 * 2.0;
   HEAPF64[$832>>3] = $840;
   $841 = ($$0280$lcssa$i>>>0)>(1999);
   if ($841) {
    _gsl_error(82813,82673,664,11);
    $$0277$i = 11;
   } else {
    $$0277$i = $843;
   }
   $$0 = $$0277$i;
  }
 } while(0);
 $842 = ($$2$i|0)==(0);
 $$0$ = $842 ? $$0 : $$2$i;
 $$097 = $$0$;
 STACKTOP = sp;return ($$097|0);
}
function _hyperg_U_small_a_bgt0($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$076$lcssa = 0.0, $$07680 = 0.0, $$07779 = 0.0, $$07779$phi = 0.0, $$081 = 0.0, $$1 = 0, $$78 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = $0 == 0.0;
 if ($7) {
  HEAPF64[$3>>3] = 1.0;
  $8 = ((($3)) + 8|0);
  HEAPF64[$8>>3] = 0.0;
  HEAPF64[$4>>3] = 0.0;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $9 = $1 > 5000.0;
 if ($9) {
  $10 = (+Math_abs((+$1)));
  $11 = $10 * 0.90000000000000002;
  $12 = $11 > $2;
  if (!($12)) {
   label = 5;
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   $13 = $1 > 500.0;
   if ($13) {
    $14 = (+Math_abs((+$1)));
    $15 = $14 * 0.5;
    $16 = $15 > $2;
    if ($16) {
     break;
    }
   }
   $19 = $1 > 15.0;
   if (!($19)) {
    HEAPF64[$4>>3] = 0.0;
    $59 = (_hyperg_U_small_ab($0,$1,$2,$3)|0);
    $$1 = $59;
    STACKTOP = sp;return ($$1|0);
   }
   $20 = (+Math_floor((+$1)));
   $21 = $1 - $20;
   $22 = $21 + 1.0;
   $23 = (_hyperg_U_small_ab($0,$22,$2,$5)|0);
   $24 = $22 + 1.0;
   $25 = (_hyperg_U_small_ab($0,$24,$2,$6)|0);
   $26 = +HEAPF64[$5>>3];
   $27 = +HEAPF64[$6>>3];
   $28 = $1 + -0.10000000000000001;
   $29 = $24 < $28;
   if ($29) {
    $30 = $0 + 1.0;
    $$07680 = $27;$$07779 = $26;$$081 = $24;
    while(1) {
     $31 = $30 - $$081;
     $32 = $$07779 * $31;
     $33 = $$081 + $2;
     $34 = $33 + -1.0;
     $35 = $$07680 * $34;
     $36 = $32 + $35;
     $37 = $36 / $2;
     $38 = $$081 + 1.0;
     $39 = $38 < $28;
     if ($39) {
      $$07779$phi = $$07680;$$07680 = $37;$$081 = $38;$$07779 = $$07779$phi;
     } else {
      $$076$lcssa = $37;
      break;
     }
    }
   } else {
    $$076$lcssa = $27;
   }
   HEAPF64[$3>>3] = $$076$lcssa;
   $40 = ((($5)) + 8|0);
   $41 = +HEAPF64[$40>>3];
   $42 = $41 / $26;
   $43 = (+Math_abs((+$42)));
   $44 = ((($6)) + 8|0);
   $45 = +HEAPF64[$44>>3];
   $46 = $45 / $27;
   $47 = (+Math_abs((+$46)));
   $48 = $43 + $47;
   $49 = (+Math_abs((+$$076$lcssa)));
   $50 = $49 * $48;
   $51 = ((($3)) + 8|0);
   $52 = $1 - $22;
   $53 = (+Math_abs((+$52)));
   $54 = $53 + 1.0;
   $55 = $54 * 4.4408920985006262E-16;
   $56 = $55 * $49;
   $57 = $56 + $50;
   HEAPF64[$51>>3] = $57;
   HEAPF64[$4>>3] = 0.0;
   $58 = ($23|0)==(0);
   $$78 = $58 ? $25 : $23;
   $$1 = $$78;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $17 = (_gsl_sf_hyperg_U_large_b_e($0,$1,$2,$3,$4)|0);
 $18 = ($17|0)==(16);
 $$ = $18 ? 0 : $17;
 $$1 = $$;
 STACKTOP = sp;return ($$1|0);
}
function _hyperg_U_small_ab($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = $0 == -1.0;
 if ($5) {
  $6 = $2 - $1;
  HEAPF64[$3>>3] = $6;
  $7 = (+Math_abs((+$1)));
  $8 = (+Math_abs((+$2)));
  $9 = $7 + $8;
  $10 = $9 * 4.4408920985006262E-16;
  $11 = ((($3)) + 8|0);
  $12 = (+Math_abs((+$6)));
  $13 = $12 * 4.4408920985006262E-16;
  $14 = $10 + $13;
  HEAPF64[$11>>3] = $14;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = $0 == 0.0;
 if ($15) {
  HEAPF64[$3>>3] = 1.0;
  $16 = ((($3)) + 8|0);
  HEAPF64[$16>>3] = 0.0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (+Math_abs((+$0)));
 $18 = $17 > 1.0;
 $19 = $18 ? $17 : 1.0;
 $20 = $0 + 1.0;
 $21 = $20 - $1;
 $22 = (+Math_abs((+$21)));
 $23 = $22 > 1.0;
 $24 = $23 ? $22 : 1.0;
 $25 = $19 * $24;
 $26 = (+Math_abs((+$2)));
 $27 = $26 * 0.98999999999999999;
 $28 = $25 < $27;
 if ($28) {
  $29 = - $0;
  $30 = (+Math_pow((+$2),(+$29)));
  $31 = (_hyperg_zaU_asymp($0,$1,$2,$4)|0);
  $32 = +HEAPF64[$4>>3];
  $33 = $30 * $32;
  HEAPF64[$3>>3] = $33;
  $34 = ((($4)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $30 * $35;
  $37 = ((($3)) + 8|0);
  $38 = (+Math_abs((+$32)));
  $39 = $38 * 2.2204460492503131E-16;
  $40 = $17 * $39;
  $41 = $30 * $40;
  $42 = $36 + $41;
  $43 = (+Math_abs((+$33)));
  $44 = $43 * 4.4408920985006262E-16;
  $45 = $44 + $42;
  HEAPF64[$37>>3] = $45;
  $$0 = $31;
  STACKTOP = sp;return ($$0|0);
 } else {
  $46 = (_hyperg_U_series($0,$1,$2,$3)|0);
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_hyperg_U_e10_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0;
 var $82 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 56|0;
 $5 = sp + 40|0;
 $6 = sp + 24|0;
 $7 = sp;
 $8 = $0 + 0.5;
 $9 = (+Math_floor((+$8)));
 $10 = $1 + 0.5;
 $11 = (+Math_floor((+$10)));
 $12 = $0 - $9;
 $13 = (+Math_abs((+$12)));
 $14 = $13 < 2.2204460492503131E-13;
 $15 = $1 - $11;
 $16 = (+Math_abs((+$15)));
 $17 = $16 < 2.2204460492503131E-13;
 $18 = $2 == 0.0;
 $19 = $1 >= 1.0;
 $or$cond = $19 & $18;
 if ($or$cond) {
  HEAPF64[$3>>3] = nan;
  $20 = ((($3)) + 8|0);
  HEAPF64[$20>>3] = nan;
  $21 = ((($3)) + 16|0);
  HEAP32[$21>>2] = 0;
  _gsl_error(82896,82673,1701,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = $0 == 0.0;
 if ($22) {
  HEAPF64[$3>>3] = 1.0;
  $23 = ((($3)) + 8|0);
  HEAPF64[$23>>3] = 0.0;
  $24 = ((($3)) + 16|0);
  HEAP32[$24>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if ($18) {
  $25 = $0 + 1.0;
  $26 = $25 - $1;
  $27 = (_gsl_sf_gammainv_e($26,$4)|0);
  $28 = (_gsl_sf_gammainv_e($1,$5)|0);
  $29 = $1 * 3.1415926535897931;
  $30 = (+Math_sin((+$29)));
  $31 = 3.1415926535897931 / $30;
  $32 = +HEAPF64[$4>>3];
  $33 = $31 * $32;
  $34 = +HEAPF64[$5>>3];
  $35 = $33 * $34;
  HEAPF64[$3>>3] = $35;
  $36 = (+Math_abs((+$31)));
  $37 = ((($4)) + 8|0);
  $38 = +HEAPF64[$37>>3];
  $39 = ((($5)) + 8|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $38 + $40;
  $42 = $36 * $41;
  $43 = ((($3)) + 8|0);
  HEAPF64[$43>>3] = $42;
  $44 = ((($3)) + 16|0);
  HEAP32[$44>>2] = 0;
  $45 = ($27|0)==(0);
  $$$i = $45 ? $28 : $27;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = $0 + 1.0;
 $47 = $46 == $1;
 $or$cond86 = $47 & $14;
 if ($or$cond86) {
  $48 = - $0;
  $49 = (~~(($48)));
  (_gsl_sf_pow_int_e($2,$49,$6)|0);
  $50 = +HEAPF64[$6>>3];
  HEAPF64[$3>>3] = $50;
  $51 = ((($6)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = ((($3)) + 8|0);
  HEAPF64[$53>>3] = $52;
  $54 = ((($3)) + 16|0);
  HEAP32[$54>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $or$cond3 = $14 & $17;
 if ($or$cond3) {
  $55 = (~~(($9)));
  $56 = (~~(($11)));
  $57 = (_gsl_sf_hyperg_U_int_e10_e($55,$56,$2,$3)|0);
  $$0 = $57;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = $2 < 0.0;
 if ($58) {
  $59 = (_hyperg_U_negx($0,$1,$2,$3)|0);
  $$0 = $59;
  STACKTOP = sp;return ($$0|0);
 }
 if ($19) {
  $60 = (_hyperg_U_bge1($0,$1,$2,$3)|0);
  $$0 = $60;
  STACKTOP = sp;return ($$0|0);
 } else {
  $61 = (+Math_log((+$2)));
  $62 = 1.0 - $1;
  $63 = $62 * $61;
  $64 = (+Math_abs((+$61)));
  $65 = $64 * 2.0;
  $66 = $65 * 2.2204460492503131E-16;
  $67 = (+Math_abs((+$1)));
  $68 = $67 + 1.0;
  $69 = $68 * $66;
  $70 = $46 - $1;
  $71 = 2.0 - $1;
  $72 = (_hyperg_U_bge1($70,$71,$2,$7)|0);
  $73 = ((($7)) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (+($74|0));
  $76 = $75 * 2.3025850929940459;
  $77 = $63 + $76;
  $78 = +HEAPF64[$7>>3];
  $79 = ((($7)) + 8|0);
  $80 = +HEAPF64[$79>>3];
  $81 = (_gsl_sf_exp_mult_err_e10_e($77,$69,$78,$80,$3)|0);
  $82 = ($81|0)==(0);
  $$ = $82 ? $72 : $81;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _hyperg_U_bge1($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$01013$i = 0.0, $$01013$i662 = 0.0, $$01032$i = 0.0, $$01032$i663 = 0.0, $$0610705 = 0.0, $$0611$lcssa = 0.0, $$0611704 = 0.0, $$0612703 = 0.0, $$0614$lcssa = 0, $$0614695 = 0, $$0616 = 0, $$0617$lcssa = 0.0, $$0617694 = 0.0, $$0619$lcssa = 0.0, $$0619693 = 0.0, $$0621692 = 0.0, $$0622714 = 0.0, $$0623688 = 0.0;
 var $$0625$lcssa = 0.0, $$0625713 = 0.0, $$0627712 = 0.0, $$0629$lcssa = 0.0, $$0629687 = 0.0, $$0631 = 0.0, $$0631686 = 0.0, $$0631690 = 0.0, $$0632$lcssa = 0, $$0632730 = 0, $$0634729 = 0.0, $$0636$lcssa = 0.0, $$0636728 = 0.0, $$0638727 = 0.0, $$0639$lcssa = 0, $$0639722 = 0, $$0641721 = 0.0, $$0643$lcssa = 0.0, $$0643720 = 0.0, $$0645719 = 0.0;
 var $$0646$lcssa = 0, $$0646702 = 0, $$0648$lcssa = 0, $$0648711 = 0, $$093$i = 0, $$093$i670 = 0, $$0947$i = 0, $$0947$i658 = 0, $$0956$i = 0.0, $$0956$i659 = 0.0, $$0975$i = 0.0, $$0975$i660 = 0.0, $$0994$i = 0.0, $$0994$i661 = 0.0, $$1 = 0.0, $$1100$i = 0.0, $$1100$i667 = 0.0, $$1102$i = 0.0, $$1102$i666 = 0.0, $$1104$i = 0.0;
 var $$1104$i665 = 0.0, $$1613 = 0.0, $$1615 = 0, $$1618 = 0.0, $$1620 = 0.0, $$1624 = 0.0, $$1626 = 0.0, $$1628 = 0.0, $$1630 = 0.0, $$1633 = 0, $$1635 = 0.0, $$1637 = 0.0, $$1640 = 0, $$1642 = 0.0, $$1644 = 0.0, $$1647 = 0, $$1649 = 0, $$198$i = 0.0, $$198$i668 = 0.0, $$2$lcssa = 0;
 var $$2689 = 0, $$3 = 0, $$652 = 0, $$653 = 0, $$654 = 0, $$655 = 0, $$656 = 0, $$657 = 0, $$657$ = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0;
 var $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0;
 var $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0;
 var $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0;
 var $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0;
 var $219 = 0.0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0;
 var $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0;
 var $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0;
 var $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0;
 var $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0;
 var $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0;
 var $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0;
 var $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0;
 var $382 = 0.0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0;
 var $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0;
 var $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0;
 var $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0;
 var $454 = 0.0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0, $459 = 0.0, $46 = 0.0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0;
 var $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0.0;
 var $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0;
 var $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0.0;
 var $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond$i = 0, $or$cond$i664 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond651 = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond8$i669 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $4 = sp + 240|0;
 $5 = sp + 224|0;
 $6 = sp + 208|0;
 $7 = sp + 192|0;
 $8 = sp + 184|0;
 $9 = sp + 168|0;
 $10 = sp + 160|0;
 $11 = sp + 152|0;
 $12 = sp + 136|0;
 $13 = sp + 120|0;
 $14 = sp + 112|0;
 $15 = sp + 104|0;
 $16 = sp + 88|0;
 $17 = sp + 72|0;
 $18 = sp + 64|0;
 $19 = sp + 48|0;
 $20 = sp + 32|0;
 $21 = sp + 16|0;
 $22 = sp + 8|0;
 $23 = sp;
 $24 = $0 + 0.5;
 $25 = (+Math_floor((+$24)));
 $26 = $0 < 0.0;
 $27 = $0 == 0.0;
 if ($27) {
  HEAPF64[$3>>3] = 1.0;
  $28 = ((($3)) + 8|0);
  HEAPF64[$28>>3] = 0.0;
  $29 = ((($3)) + 16|0);
  HEAP32[$29>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = $0 - $25;
 $31 = (+Math_abs((+$30)));
 $32 = $31 < 2.2204460492503131E-13;
 $33 = $26 & $32;
 $34 = (+Math_abs((+$25)));
 $35 = $34 < 2147483647.0;
 $or$cond651 = $35 & $33;
 if ($or$cond651) {
  $36 = (~~(($25)));
  $37 = (0 - ($36))|0;
  $38 = $37 & 1;
  $39 = ($38|0)==(0);
  $40 = $39 ? 1.0 : -1.0;
  $41 = $1 + -1.0;
  $42 = (_gsl_sf_laguerre_n_e($37,$41,$2,$5)|0);
  (_gsl_sf_lnfact_e($37,$4)|0);
  $43 = +HEAPF64[$4>>3];
  $44 = ((($4)) + 8|0);
  $45 = +HEAPF64[$44>>3];
  $46 = +HEAPF64[$5>>3];
  $47 = $40 * $46;
  $48 = ((($5)) + 8|0);
  $49 = +HEAPF64[$48>>3];
  $50 = (_gsl_sf_exp_mult_err_e10_e($43,$45,$47,$49,$3)|0);
  $51 = ($50|0)==(0);
  $$ = $51 ? $42 : $50;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $52 = (+Math_abs((+$0)));
 $53 = $52 > 1.0;
 $54 = $53 ? $52 : 1.0;
 $55 = $0 + 1.0;
 $56 = $55 - $1;
 $57 = (+Math_abs((+$56)));
 $58 = $57 > 1.0;
 $59 = $58 ? $57 : 1.0;
 $60 = $54 * $59;
 $61 = (+Math_abs((+$2)));
 $62 = $61 * 0.98999999999999999;
 $63 = $60 < $62;
 if ($63) {
  $64 = (+Math_log((+$2)));
  $65 = $64 * $0;
  $66 = - $65;
  $67 = (+Math_abs((+$66)));
  $68 = $67 * 4.4408920985006262E-16;
  $69 = (_hyperg_zaU_asymp($0,$1,$2,$6)|0);
  $70 = +HEAPF64[$6>>3];
  $71 = ((($6)) + 8|0);
  $72 = +HEAPF64[$71>>3];
  $73 = (_gsl_sf_exp_mult_err_e10_e($66,$68,$70,$72,$3)|0);
  $74 = ($73|0)==(0);
  $$652 = $74 ? $69 : $73;
  $$0 = $$652;
  STACKTOP = sp;return ($$0|0);
 }
 $75 = !($52 <= 1.0);
 if (!($75)) {
  $76 = (_hyperg_U_small_a_bgt0($0,$1,$2,$7,$8)|0);
  $77 = +HEAPF64[$8>>3];
  $78 = (+Math_abs((+$77)));
  $79 = $78 * 4.4408920985006262E-16;
  $80 = +HEAPF64[$7>>3];
  $81 = ((($7)) + 8|0);
  $82 = +HEAPF64[$81>>3];
  $83 = (_gsl_sf_exp_mult_err_e10_e($77,$79,$80,$82,$3)|0);
  $84 = ($76|0)==(0);
  $$653 = $84 ? $83 : $76;
  $$0 = $$653;
  STACKTOP = sp;return ($$0|0);
 }
 $85 = $52 < 5.0;
 $86 = $1 < 5.0;
 $or$cond = $85 & $86;
 $87 = $2 < 2.0;
 $or$cond3 = $or$cond & $87;
 if (!($or$cond3)) {
  $88 = $52 < 10.0;
  $89 = $1 < 10.0;
  $or$cond5 = $88 & $89;
  $90 = $2 < 1.0;
  $or$cond7 = $or$cond5 & $90;
  if (!($or$cond7)) {
   if ($26) {
    $97 = (+Math_floor((+$0)));
    $98 = $0 - $97;
    $99 = $98 + -1.0;
    $100 = (+Math_floor((+$1)));
    $101 = $1 - $100;
    $102 = $101 + 1.0;
    $103 = $99 + 1.0;
    $104 = (_hyperg_U_small_a_bgt0($103,$102,$2,$12,$10)|0);
    $105 = (_hyperg_U_small_a_bgt0($99,$102,$2,$13,$11)|0);
    $106 = +HEAPF64[$12>>3];
    $107 = +HEAPF64[$13>>3];
    $108 = +HEAPF64[$10>>3];
    $109 = +HEAPF64[$11>>3];
    $110 = $108 > $109;
    $111 = $110 ? $108 : $109;
    $112 = $108 - $111;
    $113 = (+Math_exp((+$112)));
    $114 = $106 * $113;
    $115 = $109 - $111;
    $116 = (+Math_exp((+$115)));
    $117 = $107 * $116;
    $118 = $0 + 0.10000000000000001;
    $119 = $99 > $118;
    if ($119) {
     $$0614695 = 0;$$0617694 = $114;$$0619693 = $117;$$0621692 = $99;
     while(1) {
      $120 = $102 - $$0621692;
      $121 = $120 + -1.0;
      $122 = $$0621692 * $121;
      $123 = $$0617694 * $122;
      $124 = $$0621692 * 2.0;
      $125 = $124 + $2;
      $126 = $125 - $102;
      $127 = $$0619693 * $126;
      $128 = $123 + $127;
      $129 = (+Math_abs((+$128)));
      $130 = $129 > 1.3407807929942596E+154;
      if ($130) {
       $131 = $128 / 1.3407807929942596E+154;
       $132 = $$0619693 / 1.3407807929942596E+154;
       $133 = (($$0614695) + 1)|0;
       $$1615 = $133;$$1618 = $132;$$1620 = $131;
      } else {
       $134 = $129 < 7.4583407312002084E-155;
       if ($134) {
        $135 = (($$0614695) + -1)|0;
        $136 = $$0619693 * 1.3407807929942596E+154;
        $137 = $128 * 1.3407807929942596E+154;
        $$1615 = $135;$$1618 = $136;$$1620 = $137;
       } else {
        $$1615 = $$0614695;$$1618 = $$0619693;$$1620 = $128;
       }
      }
      $138 = $$0621692 + -1.0;
      $139 = $138 > $118;
      if ($139) {
       $$0614695 = $$1615;$$0617694 = $$1618;$$0619693 = $$1620;$$0621692 = $138;
      } else {
       $$0614$lcssa = $$1615;$$0617$lcssa = $$1618;$$0619$lcssa = $$1620;
       break;
      }
     }
    } else {
     $$0614$lcssa = 0;$$0617$lcssa = $114;$$0619$lcssa = $117;
    }
    $140 = $1 < 2.0;
    if ($140) {
     $141 = (+($$0614$lcssa|0));
     $142 = $141 * 354.89135644669199;
     $143 = $111 + $142;
     $144 = (+Math_abs((+$111)));
     $145 = $144 + $142;
     $146 = $145 * 4.4408920985006262E-16;
     $147 = ((($12)) + 8|0);
     $148 = +HEAPF64[$147>>3];
     $149 = $148 / $106;
     $150 = (+Math_abs((+$149)));
     $151 = (+Math_abs((+$$0619$lcssa)));
     $152 = $151 * $150;
     $153 = ((($13)) + 8|0);
     $154 = +HEAPF64[$153>>3];
     $155 = $154 / $107;
     $156 = (+Math_abs((+$155)));
     $157 = $151 * $156;
     $158 = $152 + $157;
     $159 = $0 - $99;
     $160 = (+Math_abs((+$159)));
     $161 = $160 + 1.0;
     $162 = $161 * 4.4408920985006262E-16;
     $163 = $162 * $151;
     $164 = $163 + $158;
     $165 = (+Math_abs((+$112)));
     $166 = $165 + 1.0;
     $167 = $166 * $164;
     $168 = (+Math_abs((+$115)));
     $169 = $168 + 1.0;
     $170 = $169 * $167;
     $171 = (_gsl_sf_exp_mult_err_e10_e($143,$146,$$0619$lcssa,$170,$3)|0);
     $$0616 = $171;
    } else {
     $172 = $1 - $102;
     $173 = (+Math_abs((+$172)));
     $174 = $0 - $99;
     $175 = (+Math_abs((+$174)));
     $176 = $175 + $173;
     $177 = $176 + 1.0;
     $178 = $102 - $0;
     $179 = $178 + -1.0;
     $180 = $179 * $0;
     $181 = $180 * $$0617$lcssa;
     $182 = $0 + $2;
     $183 = $182 * $$0619$lcssa;
     $184 = $183 + $181;
     $185 = $184 / $2;
     $$0631686 = $102 + 1.0;
     $186 = $1 + -0.10000000000000001;
     $187 = $$0631686 < $186;
     if ($187) {
      $$0623688 = $$0619$lcssa;$$0629687 = $185;$$0631690 = $$0631686;$$2689 = $$0614$lcssa;
      while(1) {
       $188 = $55 - $$0631690;
       $189 = $188 * $$0623688;
       $190 = $$0631690 + $2;
       $191 = $190 + -1.0;
       $192 = $$0629687 * $191;
       $193 = $189 + $192;
       $194 = $193 / $2;
       $195 = (+Math_abs((+$194)));
       $196 = $195 > 1.3407807929942596E+154;
       if ($196) {
        $197 = $194 / 1.3407807929942596E+154;
        $198 = $$0629687 / 1.3407807929942596E+154;
        $199 = (($$2689) + 1)|0;
        $$1624 = $198;$$1630 = $197;$$3 = $199;
       } else {
        $200 = $195 < 7.4583407312002084E-155;
        if ($200) {
         $201 = (($$2689) + -1)|0;
         $202 = $$0629687 * 1.3407807929942596E+154;
         $203 = $194 * 1.3407807929942596E+154;
         $$1624 = $202;$$1630 = $203;$$3 = $201;
        } else {
         $$1624 = $$0629687;$$1630 = $194;$$3 = $$2689;
        }
       }
       $$0631 = $$0631690 + 1.0;
       $204 = $$0631 < $186;
       if ($204) {
        $$0623688 = $$1624;$$0629687 = $$1630;$$0631690 = $$0631;$$2689 = $$3;
       } else {
        $$0629$lcssa = $$1630;$$2$lcssa = $$3;
        break;
       }
      }
     } else {
      $$0629$lcssa = $185;$$2$lcssa = $$0614$lcssa;
     }
     $205 = (+($$2$lcssa|0));
     $206 = $205 * 354.89135644669199;
     $207 = $111 + $206;
     $208 = (+Math_abs((+$111)));
     $209 = (+Math_abs((+$206)));
     $210 = $208 + $209;
     $211 = $210 * 4.4408920985006262E-16;
     $212 = $177 * 2.0;
     $213 = ((($12)) + 8|0);
     $214 = +HEAPF64[$213>>3];
     $215 = $214 / $106;
     $216 = (+Math_abs((+$215)));
     $217 = $212 * $216;
     $218 = (+Math_abs((+$$0629$lcssa)));
     $219 = $218 * $217;
     $220 = ((($13)) + 8|0);
     $221 = +HEAPF64[$220>>3];
     $222 = $221 / $107;
     $223 = (+Math_abs((+$222)));
     $224 = $212 * $223;
     $225 = $218 * $224;
     $226 = $219 + $225;
     $227 = $177 * 4.4408920985006262E-16;
     $228 = $227 * $218;
     $229 = $228 + $226;
     $230 = (+Math_abs((+$112)));
     $231 = $230 + 1.0;
     $232 = $231 * $229;
     $233 = (+Math_abs((+$115)));
     $234 = $233 + 1.0;
     $235 = $234 * $232;
     $236 = (_gsl_sf_exp_mult_err_e10_e($207,$211,$$0629$lcssa,$235,$3)|0);
     $$0616 = $236;
    }
    $237 = ($$0616|0)==(0);
    $238 = ($104|0)==(0);
    $$654 = $238 ? $105 : $104;
    $239 = $237 ? $$654 : $$0616;
    $$0 = $239;
    STACKTOP = sp;return ($$0|0);
   }
   $240 = $0 * 2.0;
   $241 = $240 + $2;
   $242 = !($241 <= $1);
   if (!($242)) {
    $243 = (+Math_floor((+$0)));
    $244 = $0 - $243;
    $245 = $244 + -1.0;
    $246 = (_hyperg_U_small_a_bgt0($245,$1,$2,$16,$14)|0);
    $247 = (_hyperg_U_small_a_bgt0($244,$1,$2,$17,$15)|0);
    $248 = +HEAPF64[$16>>3];
    $249 = +HEAPF64[$17>>3];
    $250 = +HEAPF64[$14>>3];
    $251 = +HEAPF64[$15>>3];
    $252 = $250 > $251;
    $253 = $252 ? $250 : $251;
    $254 = $250 - $253;
    $255 = $251 - $253;
    $256 = (+Math_exp((+$255)));
    $257 = $249 * $256;
    $258 = $0 + -0.10000000000000001;
    $259 = $244 < $258;
    if ($259) {
     $260 = (+Math_exp((+$254)));
     $261 = $248 * $260;
     $$0632730 = 0;$$0634729 = $261;$$0636728 = $257;$$0638727 = $244;
     while(1) {
      $262 = $$0638727 * 2.0;
      $263 = $1 - $262;
      $264 = $263 - $2;
      $265 = $$0636728 * $264;
      $266 = $$0634729 + $265;
      $267 = - $266;
      $268 = $$0638727 + 1.0;
      $269 = $268 - $1;
      $270 = $$0638727 * $269;
      $271 = $267 / $270;
      $272 = (+Math_abs((+$271)));
      $273 = $272 > 1.3407807929942596E+154;
      if ($273) {
       $274 = $271 / 1.3407807929942596E+154;
       $275 = $$0636728 / 1.3407807929942596E+154;
       $276 = (($$0632730) + 1)|0;
       $$1633 = $276;$$1635 = $275;$$1637 = $274;
      } else {
       $277 = $272 < 7.4583407312002084E-155;
       if ($277) {
        $278 = (($$0632730) + -1)|0;
        $279 = $$0636728 * 1.3407807929942596E+154;
        $280 = $271 * 1.3407807929942596E+154;
        $$1633 = $278;$$1635 = $279;$$1637 = $280;
       } else {
        $$1633 = $$0632730;$$1635 = $$0636728;$$1637 = $271;
       }
      }
      $281 = $268 < $258;
      if ($281) {
       $$0632730 = $$1633;$$0634729 = $$1635;$$0636728 = $$1637;$$0638727 = $268;
      } else {
       $$0632$lcssa = $$1633;$$0636$lcssa = $$1637;
       break;
      }
     }
    } else {
     $$0632$lcssa = 0;$$0636$lcssa = $257;
    }
    $282 = (+($$0632$lcssa|0));
    $283 = $282 * 354.89135644669199;
    $284 = $253 + $283;
    $285 = (+Math_abs((+$253)));
    $286 = (+Math_abs((+$283)));
    $287 = $285 + $286;
    $288 = $287 * 4.4408920985006262E-16;
    $289 = ((($16)) + 8|0);
    $290 = +HEAPF64[$289>>3];
    $291 = $290 / $248;
    $292 = (+Math_abs((+$291)));
    $293 = (+Math_abs((+$$0636$lcssa)));
    $294 = $293 * $292;
    $295 = ((($17)) + 8|0);
    $296 = +HEAPF64[$295>>3];
    $297 = $296 / $249;
    $298 = (+Math_abs((+$297)));
    $299 = $293 * $298;
    $300 = $294 + $299;
    $301 = $0 - $244;
    $302 = (+Math_abs((+$301)));
    $303 = $302 + 1.0;
    $304 = $303 * 4.4408920985006262E-16;
    $305 = $304 * $293;
    $306 = $305 + $300;
    $307 = (+Math_abs((+$254)));
    $308 = $307 + 1.0;
    $309 = $308 * $306;
    $310 = (+Math_abs((+$255)));
    $311 = $310 + 1.0;
    $312 = $311 * $309;
    $313 = (_gsl_sf_exp_mult_err_e10_e($284,$288,$$0636$lcssa,$312,$3)|0);
    $314 = ($313|0)==(0);
    $315 = ($246|0)==(0);
    $$655 = $315 ? $247 : $246;
    $316 = $314 ? $$655 : $313;
    $$0 = $316;
    STACKTOP = sp;return ($$0|0);
   }
   $317 = !($1 <= $2);
   $318 = (+Math_floor((+$0)));
   $319 = $0 - $318;
   if (!($317)) {
    $320 = $0 + 0.0;
    $321 = $1 - $240;
    $322 = $321 - $2;
    $323 = $322 + -2.0;
    $324 = $323 * 0.0;
    $325 = $324 - $320;
    $326 = $320 * 0.0;
    $327 = $323 - $326;
    $328 = $325 / $327;
    $$01013$i = 0.0;$$01032$i = 1.0;$$0947$i = 1;$$0956$i = $328;$$0975$i = $327;$$0994$i = $325;
    while(1) {
     $329 = (($$0947$i) + 1)|0;
     $330 = (+($329|0));
     $331 = $320 + $330;
     $332 = $331 - $1;
     $333 = $331 + -1.0;
     $334 = $332 * $333;
     $335 = - $334;
     $336 = $330 * 2.0;
     $337 = $322 - $336;
     $338 = $$0994$i * $337;
     $339 = $$01013$i * $335;
     $340 = $338 + $339;
     $341 = $$0975$i * $337;
     $342 = $$01032$i * $335;
     $343 = $341 + $342;
     $344 = (+Math_abs((+$340)));
     $345 = $344 > 1.3407807929942596E+154;
     $346 = (+Math_abs((+$343)));
     $347 = $346 > 1.3407807929942596E+154;
     $or$cond$i = $345 | $347;
     if ($or$cond$i) {
      $348 = $340 / 1.3407807929942596E+154;
      $349 = $343 / 1.3407807929942596E+154;
      $350 = $$0994$i / 1.3407807929942596E+154;
      $351 = $$0975$i / 1.3407807929942596E+154;
      $$1100$i = $348;$$1102$i = $350;$$1104$i = $351;$$198$i = $349;
     } else {
      $$1100$i = $340;$$1102$i = $$0994$i;$$1104$i = $$0975$i;$$198$i = $343;
     }
     $352 = $$1100$i / $$198$i;
     $353 = $$0956$i / $352;
     $354 = $353 + -1.0;
     $355 = (+Math_abs((+$354)));
     $356 = !($355 < 2.2204460492503131E-15);
     $357 = ($329>>>0)<(20000);
     $or$cond8$i = $357 & $356;
     if ($or$cond8$i) {
      $$01013$i = $$1102$i;$$01032$i = $$1104$i;$$0947$i = $329;$$0956$i = $352;$$0975$i = $$198$i;$$0994$i = $$1100$i;
     } else {
      break;
     }
    }
    $358 = ($329|0)==(20000);
    if ($358) {
     _gsl_error(82813,82673,121,11);
     $$093$i = 11;
    } else {
     $$093$i = 0;
    }
    $359 = $319 + 0.10000000000000001;
    $360 = $359 < $0;
    if ($360) {
     $361 = $352 / $0;
     $362 = $361 * 1.4916681462400413E-154;
     $$0639722 = 0;$$0641721 = $362;$$0643720 = 1.4916681462400413E-154;$$0645719 = $0;
     while(1) {
      $363 = $$0645719 * 2.0;
      $364 = $1 - $363;
      $365 = $364 - $2;
      $366 = $$0643720 * $365;
      $367 = $$0645719 + 1.0;
      $368 = $367 - $1;
      $369 = $$0645719 * $368;
      $370 = $$0641721 * $369;
      $371 = $366 + $370;
      $372 = - $371;
      $373 = (+Math_abs((+$372)));
      $374 = $373 > 1.3407807929942596E+154;
      if ($374) {
       $375 = $372 / 1.3407807929942596E+154;
       $376 = $$0643720 / 1.3407807929942596E+154;
       $377 = (($$0639722) + 1)|0;
       $$1640 = $377;$$1642 = $376;$$1644 = $375;
      } else {
       $378 = $373 < 7.4583407312002084E-155;
       if ($378) {
        $379 = (($$0639722) + -1)|0;
        $380 = $$0643720 * 1.3407807929942596E+154;
        $381 = $371 * -1.3407807929942596E+154;
        $$1640 = $379;$$1642 = $380;$$1644 = $381;
       } else {
        $$1640 = $$0639722;$$1642 = $$0643720;$$1644 = $372;
       }
      }
      $382 = $$0645719 + -1.0;
      $383 = $382 > $359;
      if ($383) {
       $$0639722 = $$1640;$$0641721 = $$1642;$$0643720 = $$1644;$$0645719 = $382;
      } else {
       $$0639$lcssa = $$1640;$$0643$lcssa = $$1644;
       break;
      }
     }
    } else {
     $$0639$lcssa = 0;$$0643$lcssa = 1.4916681462400413E-154;
    }
    $384 = (_hyperg_U_small_a_bgt0($319,$1,$2,$19,$18)|0);
    $385 = +HEAPF64[$18>>3];
    $386 = (+($$0639$lcssa|0));
    $387 = $386 * 354.89135644669199;
    $388 = $385 - $387;
    $389 = (+Math_abs((+$385)));
    $390 = (+Math_abs((+$387)));
    $391 = $390 + $389;
    $392 = $391 * 4.4408920985006262E-16;
    $393 = +HEAPF64[$19>>3];
    $394 = $393 / $$0643$lcssa;
    $395 = $394 * 1.4916681462400413E-154;
    $396 = ((($19)) + 8|0);
    $397 = +HEAPF64[$396>>3];
    $398 = (+Math_abs((+$$0643$lcssa)));
    $399 = $397 / $398;
    $400 = $399 * 1.4916681462400413E-154;
    $401 = $319 - $0;
    $402 = (+Math_abs((+$401)));
    $403 = $402 + $330;
    $404 = $403 + 1.0;
    $405 = $404 * 4.4408920985006262E-16;
    $406 = (+Math_abs((+$395)));
    $407 = $405 * $406;
    $408 = $400 + $407;
    $409 = (_gsl_sf_exp_mult_err_e10_e($388,$392,$395,$408,$3)|0);
    $410 = ($409|0)==(0);
    $411 = ($384|0)==(0);
    $$656 = $411 ? $$093$i : $384;
    $412 = $410 ? $$656 : $409;
    $$0 = $412;
    STACKTOP = sp;return ($$0|0);
   }
   $413 = $319 == 0.0;
   $414 = $413 ? 1.0 : $319;
   $415 = $1 - $2;
   $416 = $415 * 0.5;
   $417 = $416 - $414;
   $418 = (+Math_ceil((+$417)));
   $419 = $0 + 0.0;
   $420 = $1 - $240;
   $421 = $420 - $2;
   $422 = $421 + -2.0;
   $423 = $422 * 0.0;
   $424 = $423 - $419;
   $425 = $419 * 0.0;
   $426 = $422 - $425;
   $427 = $424 / $426;
   $$01013$i662 = 0.0;$$01032$i663 = 1.0;$$0947$i658 = 1;$$0956$i659 = $427;$$0975$i660 = $426;$$0994$i661 = $424;
   while(1) {
    $428 = (($$0947$i658) + 1)|0;
    $429 = (+($428|0));
    $430 = $419 + $429;
    $431 = $430 - $1;
    $432 = $430 + -1.0;
    $433 = $431 * $432;
    $434 = - $433;
    $435 = $429 * 2.0;
    $436 = $421 - $435;
    $437 = $$0994$i661 * $436;
    $438 = $$01013$i662 * $434;
    $439 = $437 + $438;
    $440 = $$0975$i660 * $436;
    $441 = $$01032$i663 * $434;
    $442 = $440 + $441;
    $443 = (+Math_abs((+$439)));
    $444 = $443 > 1.3407807929942596E+154;
    $445 = (+Math_abs((+$442)));
    $446 = $445 > 1.3407807929942596E+154;
    $or$cond$i664 = $444 | $446;
    if ($or$cond$i664) {
     $447 = $439 / 1.3407807929942596E+154;
     $448 = $442 / 1.3407807929942596E+154;
     $449 = $$0994$i661 / 1.3407807929942596E+154;
     $450 = $$0975$i660 / 1.3407807929942596E+154;
     $$1100$i667 = $447;$$1102$i666 = $449;$$1104$i665 = $450;$$198$i668 = $448;
    } else {
     $$1100$i667 = $439;$$1102$i666 = $$0994$i661;$$1104$i665 = $$0975$i660;$$198$i668 = $442;
    }
    $451 = $$1100$i667 / $$198$i668;
    $452 = $$0956$i659 / $451;
    $453 = $452 + -1.0;
    $454 = (+Math_abs((+$453)));
    $455 = !($454 < 2.2204460492503131E-15);
    $456 = ($428>>>0)<(20000);
    $or$cond8$i669 = $456 & $455;
    if ($or$cond8$i669) {
     $$01013$i662 = $$1102$i666;$$01032$i663 = $$1104$i665;$$0947$i658 = $428;$$0956$i659 = $451;$$0975$i660 = $$198$i668;$$0994$i661 = $$1100$i667;
    } else {
     break;
    }
   }
   $457 = $414 + $418;
   $458 = ($428|0)==(20000);
   if ($458) {
    _gsl_error(82813,82673,121,11);
    $$093$i670 = 11;
   } else {
    $$093$i670 = 0;
   }
   $459 = $457 + 0.10000000000000001;
   $460 = $459 < $0;
   if ($460) {
    $461 = $451 / $0;
    $462 = $461 * 1.4916681462400413E-154;
    $$0622714 = $0;$$0625713 = 1.4916681462400413E-154;$$0627712 = $462;$$0648711 = 0;
    while(1) {
     $463 = $$0622714 * 2.0;
     $464 = $1 - $463;
     $465 = $464 - $2;
     $466 = $$0625713 * $465;
     $467 = $$0622714 + 1.0;
     $468 = $467 - $1;
     $469 = $$0622714 * $468;
     $470 = $$0627712 * $469;
     $471 = $466 + $470;
     $472 = - $471;
     $473 = (+Math_abs((+$472)));
     $474 = $473 > 1.3407807929942596E+154;
     if ($474) {
      $475 = $472 / 1.3407807929942596E+154;
      $476 = $$0625713 / 1.3407807929942596E+154;
      $477 = (($$0648711) + 1)|0;
      $$1626 = $475;$$1628 = $476;$$1649 = $477;
     } else {
      $478 = $473 < 7.4583407312002084E-155;
      if ($478) {
       $479 = (($$0648711) + -1)|0;
       $480 = $$0625713 * 1.3407807929942596E+154;
       $481 = $471 * -1.3407807929942596E+154;
       $$1626 = $481;$$1628 = $480;$$1649 = $479;
      } else {
       $$1626 = $472;$$1628 = $$0625713;$$1649 = $$0648711;
      }
     }
     $482 = $$0622714 + -1.0;
     $483 = $482 > $459;
     if ($483) {
      $$0622714 = $482;$$0625713 = $$1626;$$0627712 = $$1628;$$0648711 = $$1649;
     } else {
      $$0625$lcssa = $$1626;$$0648$lcssa = $$1649;
      break;
     }
    }
   } else {
    $$0625$lcssa = 1.4916681462400413E-154;$$0648$lcssa = 0;
   }
   $484 = $414 + -1.0;
   $485 = (_hyperg_U_small_a_bgt0($484,$1,$2,$20,$22)|0);
   $486 = (_hyperg_U_small_a_bgt0($414,$1,$2,$21,$23)|0);
   $487 = +HEAPF64[$21>>3];
   $488 = +HEAPF64[$22>>3];
   $489 = +HEAPF64[$23>>3];
   $490 = $488 > $489;
   $491 = $490 ? $488 : $489;
   $492 = $489 - $491;
   $493 = (+Math_exp((+$492)));
   $494 = $487 * $493;
   $495 = $457 + -0.10000000000000001;
   $496 = $414 < $495;
   if ($496) {
    $497 = +HEAPF64[$20>>3];
    $498 = $488 - $491;
    $499 = (+Math_exp((+$498)));
    $500 = $497 * $499;
    $$0610705 = $414;$$0611704 = $494;$$0612703 = $500;$$0646702 = 0;
    while(1) {
     $501 = $$0610705 * 2.0;
     $502 = $1 - $501;
     $503 = $502 - $2;
     $504 = $$0611704 * $503;
     $505 = $$0612703 + $504;
     $506 = - $505;
     $507 = $$0610705 + 1.0;
     $508 = $507 - $1;
     $509 = $$0610705 * $508;
     $510 = $506 / $509;
     $511 = (+Math_abs((+$510)));
     $512 = $511 > 1.3407807929942596E+154;
     if ($512) {
      $513 = $510 / 1.3407807929942596E+154;
      $514 = $$0611704 / 1.3407807929942596E+154;
      $515 = (($$0646702) + 1)|0;
      $$1 = $513;$$1613 = $514;$$1647 = $515;
     } else {
      $516 = $511 < 7.4583407312002084E-155;
      if ($516) {
       $517 = (($$0646702) + -1)|0;
       $518 = $$0611704 * 1.3407807929942596E+154;
       $519 = $510 * 1.3407807929942596E+154;
       $$1 = $519;$$1613 = $518;$$1647 = $517;
      } else {
       $$1 = $510;$$1613 = $$0611704;$$1647 = $$0646702;
      }
     }
     $520 = $507 < $495;
     if ($520) {
      $$0610705 = $507;$$0611704 = $$1;$$0612703 = $$1613;$$0646702 = $$1647;
     } else {
      $$0611$lcssa = $$1;$$0646$lcssa = $$1647;
      break;
     }
    }
   } else {
    $$0611$lcssa = $494;$$0646$lcssa = 0;
   }
   $521 = ($485|0)==(0);
   $$657 = $521 ? $486 : $485;
   $522 = (($$0646$lcssa) - ($$0648$lcssa))|0;
   $523 = (+($522|0));
   $524 = $523 * 354.89135644669199;
   $525 = $491 + $524;
   $526 = (+Math_abs((+$491)));
   $527 = (+Math_abs((+$523)));
   $528 = $527 * 354.89135644669199;
   $529 = $526 + $528;
   $530 = $529 * 4.4408920985006262E-16;
   $531 = $$0611$lcssa * 1.4916681462400413E-154;
   $532 = $531 / $$0625$lcssa;
   $533 = $0 - $414;
   $534 = (+Math_abs((+$533)));
   $535 = $534 + $429;
   $536 = $535 + 1.0;
   $537 = $536 * 4.4408920985006262E-16;
   $538 = (+Math_abs((+$532)));
   $539 = $537 * $538;
   $540 = (_gsl_sf_exp_mult_err_e10_e($525,$530,$532,$539,$3)|0);
   $541 = ($540|0)==(0);
   $542 = ($$093$i670|0)==(0);
   $$657$ = $542 ? $$657 : $$093$i670;
   $543 = $541 ? $$657$ : $540;
   $$0 = $543;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $91 = (_hyperg_U_series($0,$1,$2,$9)|0);
 $92 = +HEAPF64[$9>>3];
 HEAPF64[$3>>3] = $92;
 $93 = ((($9)) + 8|0);
 $94 = +HEAPF64[$93>>3];
 $95 = ((($3)) + 8|0);
 HEAPF64[$95>>3] = $94;
 $96 = ((($3)) + 16|0);
 HEAP32[$96>>2] = 0;
 $$0 = $91;
 STACKTOP = sp;return ($$0|0);
}
function _gsl_sf_laguerre_n_e($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$$i = 0, $$0103 = 0, $$0104130 = 0.0, $$0105129 = 0.0, $$0105129$phi = 0.0, $$0106128 = 0.0, $$0107127 = 0, $$0131 = 0, $$04653$i = 0.0, $$04653$i110 = 0.0, $$04752$i = 0.0, $$04752$i111 = 0.0, $$04851$i = 0.0, $$04851$i112 = 0.0, $$049$i = 0, $$049$i117 = 0, $$054$i = 0, $$054$i113 = 0, $$054$in$i = 0, $$054$in$i109 = 0;
 var $$sink$i = 0.0, $$sink29$i = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0;
 var $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0;
 var $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond140 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $8 = ($0|0)<(0);
 if ($8) {
  HEAPF64[$3>>3] = nan;
  $9 = ((($3)) + 8|0);
  HEAPF64[$9>>3] = nan;
  _gsl_error(82896,82764,244,1);
  $$0103 = 1;
  STACKTOP = sp;return ($$0103|0);
 }
 switch ($0|0) {
 case 0:  {
  HEAPF64[$3>>3] = 1.0;
  $10 = ((($3)) + 8|0);
  HEAPF64[$10>>3] = 0.0;
  $$0103 = 0;
  STACKTOP = sp;return ($$0103|0);
  break;
 }
 case 1:  {
  $11 = $1 + 1.0;
  $12 = $11 - $2;
  HEAPF64[$3>>3] = $12;
  $13 = (+Math_abs((+$1)));
  $14 = $13 + 1.0;
  $15 = (+Math_abs((+$2)));
  $16 = $14 + $15;
  $17 = $16 * 4.4408920985006262E-16;
  $18 = ((($3)) + 8|0);
  HEAPF64[$18>>3] = $17;
  $$0103 = 0;
  STACKTOP = sp;return ($$0103|0);
  break;
 }
 default: {
  $19 = $2 == 0.0;
  if ($19) {
   $20 = $1 + 1.0;
   $$0106128 = $20;$$0107127 = 2;
   while(1) {
    $21 = (+($$0107127|0));
    $22 = $21 + $1;
    $23 = $22 / $21;
    $24 = $$0106128 * $23;
    $25 = (($$0107127) + 1)|0;
    $exitcond = ($$0107127|0)==($0|0);
    if ($exitcond) {
     break;
    } else {
     $$0106128 = $24;$$0107127 = $25;
    }
   }
   HEAPF64[$3>>3] = $24;
   $26 = (+($0|0));
   $27 = $26 + 1.0;
   $28 = $27 * 2.0;
   $29 = $28 * 2.2204460492503131E-16;
   $30 = (+Math_abs((+$24)));
   $31 = $29 * $30;
   $32 = $31 + 2.2204460492503131E-16;
   $33 = ((($3)) + 8|0);
   HEAPF64[$33>>3] = $32;
   $$0103 = 0;
   STACKTOP = sp;return ($$0103|0);
  }
  $34 = $2 < 0.0;
  $35 = $1 > -1.0;
  $or$cond = $35 & $34;
  if ($or$cond) {
   $36 = (_laguerre_n_cp($0,$1,$2,$3)|0);
   $$0103 = $36;
   STACKTOP = sp;return ($$0103|0);
  }
  $37 = ($0|0)<(5);
  do {
   if (!($37)) {
    $38 = $2 > 0.0;
    if ($38) {
     $40 = $0 ^ -1;
     $41 = (+($40|0));
     $42 = $41 > $1;
     if ($42) {
      break;
     }
     $76 = (+($0|0));
     $77 = ($0|0)>(10000000);
     $or$cond5 = $35 & $77;
     if ($or$cond5) {
      $78 = $1 + 1.0;
      $79 = $78 * 2.0;
      $80 = $76 * 4.0;
      $81 = $80 + $79;
      $82 = $81 > $2;
      if ($82) {
       $83 = (0 - ($0))|0;
       $84 = (+($83|0));
       $85 = $84 * 4.0;
       $86 = $79 - $85;
       $87 = $2 / $86;
       $88 = 1.0 - $87;
       $89 = (+Math_sqrt((+$87)));
       $90 = (+Math_asin((+$89)));
       $91 = $86 * 2.4674011002723395;
       $92 = $86 * $91;
       $93 = $87 * $92;
       $94 = $88 * $93;
       $95 = $78 + $76;
       $96 = (_gsl_sf_lngamma_e($95,$5)|0);
       $97 = (_gsl_sf_lnfact_e($0,$6)|0);
       $98 = 1.0 - $78;
       $99 = $98 * 0.5;
       $100 = $2 * 0.25;
       $101 = $100 * $86;
       $102 = (+Math_log((+$101)));
       $103 = $99 * $102;
       $104 = (+Math_log((+$94)));
       $105 = $104 * 0.25;
       $106 = +HEAPF64[$5>>3];
       $107 = +HEAPF64[$6>>3];
       $108 = $106 - $107;
       $109 = $2 * 0.5;
       $110 = $109 + $108;
       $111 = $103 + $110;
       $112 = $111 - $105;
       $113 = ((($5)) + 8|0);
       $114 = +HEAPF64[$113>>3];
       $115 = ((($6)) + 8|0);
       $116 = +HEAPF64[$115>>3];
       $117 = $114 + $116;
       $118 = (+Math_abs((+$103)));
       $119 = (+Math_abs((+$105)));
       $120 = $118 + $119;
       $121 = $120 * 2.2204460492503131E-16;
       $122 = $121 + $117;
       $123 = $86 * 0.25;
       $124 = $90 * 2.0;
       $125 = (+Math_sin((+$124)));
       $126 = $124 + $125;
       $127 = $123 * $126;
       $128 = (+Math_sin((+$127)));
       $129 = - $128;
       $130 = $88 * 4.0;
       $131 = 5.0 / $130;
       $132 = $78 * 3.0;
       $133 = $78 * $132;
       $134 = $78 * 6.0;
       $135 = $133 - $134;
       $136 = $135 + 2.0;
       $137 = $136 * $88;
       $138 = $137 + $131;
       $139 = $138 + -1.0;
       $140 = $139 * 0.083333333333333329;
       $141 = (+Math_cos((+$127)));
       $142 = $140 * $141;
       $143 = - $142;
       $144 = $123 * $125;
       $145 = $143 / $144;
       $146 = $145 - $128;
       $147 = $145 * $145;
       $148 = (+Math_abs((+$129)));
       $149 = (+Math_abs((+$145)));
       $150 = $148 + $149;
       $151 = $150 * 2.2204460492503131E-16;
       $152 = $147 + $151;
       $153 = (_gsl_sf_exp_mult_err_e($112,$122,$146,$152,$3)|0);
       $154 = +HEAPF64[$3>>3];
       $155 = (+Math_abs((+$154)));
       $156 = $155 * 2.9802322387695313E-8;
       $157 = ((($3)) + 8|0);
       $158 = +HEAPF64[$157>>3];
       $159 = $158 + $156;
       HEAPF64[$157>>3] = $159;
       $160 = ($153|0)==(0);
       $161 = ($97|0)==(0);
       $$$i = $161 ? $96 : $97;
       $162 = $160 ? $$$i : $153;
       $$0103 = $162;
       STACKTOP = sp;return ($$0103|0);
      } else {
       $213 = $76;
      }
     } else {
      $213 = $76;
     }
    } else {
     $39 = (+($0|0));
     $213 = $39;
    }
    $163 = !($1 >= 0.0);
    do {
     if ($163) {
      if ($38) {
       $164 = $0 ^ -1;
       $165 = (+($164|0));
       $166 = $165 > $1;
       if ($166) {
        break;
       }
      }
      $217 = $1 + 1.0;
      $218 = - $2;
      $219 = (+Math_abs((+$2)));
      $220 = (_gsl_sf_taylorcoeff_e($0,$219,$4)|0);
      $221 = ($220|0)==(0);
      if ($221) {
       $222 = $0 & 1;
       $223 = ($222|0)==(0);
       $224 = $223 | $34;
       $225 = $224 ? 1.0 : -1.0;
       $226 = +HEAPF64[$4>>3];
       $227 = $225 * $226;
       $228 = ((($4)) + 8|0);
       $229 = +HEAPF64[$228>>3];
       $$04653$i110 = $229;$$04752$i111 = $227;$$04851$i112 = $227;$$054$in$i109 = $0;
       while(1) {
        $$054$i113 = (($$054$in$i109) + -1)|0;
        $230 = (+($$054$i113|0));
        $231 = $217 + $230;
        $232 = (($0) - ($$054$i113))|0;
        $233 = (+($232|0));
        $234 = $231 / $233;
        $235 = $230 + 1.0;
        $236 = $235 * $234;
        $237 = $236 / $218;
        $238 = $$04851$i112 * $237;
        $239 = $$04752$i111 + $238;
        $240 = (+Math_abs((+$238)));
        $241 = $240 * 8.8817841970012523E-16;
        $242 = $$04653$i110 + $241;
        $243 = ($$054$in$i109|0)>(1);
        if ($243) {
         $$04653$i110 = $242;$$04752$i111 = $239;$$04851$i112 = $238;$$054$in$i109 = $$054$i113;
        } else {
         break;
        }
       }
       HEAPF64[$3>>3] = $239;
       $244 = (+Math_abs((+$239)));
       $245 = $244 * 4.4408920985006262E-16;
       $246 = $242 + $245;
       $247 = ((($3)) + 8|0);
       HEAPF64[$247>>3] = $246;
       $$049$i117 = 0;
      } else {
       ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
       $$049$i117 = $220;
      }
      $$0103 = $$049$i117;
      STACKTOP = sp;return ($$0103|0);
     }
    } while(0);
    $167 = $1 == -2.0;
    if ($167) {
     $168 = $2 * 0.5;
     $169 = $168 * $2;
     $170 = (+Math_abs((+$169)));
     $171 = $170 * 4.4408920985006262E-16;
     $$sink$i = $171;$$sink29$i = $169;
    } else {
     $172 = $1 + 2.0;
     $173 = $172 * 0.5;
     $174 = $1 + 1.0;
     $175 = $174 * $173;
     $176 = -0.5 / $172;
     $177 = $172 * $2;
     $178 = - $177;
     $179 = $176 * $2;
     $180 = $179 + 1.0;
     $181 = $180 * $178;
     $182 = $175 + $181;
     $183 = (+Math_abs((+$175)));
     $184 = (+Math_abs((+$178)));
     $185 = $184 * 2.0;
     $186 = (+Math_abs((+$179)));
     $187 = $186 * 2.0;
     $188 = $187 + 1.0;
     $189 = $185 * $188;
     $190 = $183 + $189;
     $191 = $190 * 4.4408920985006262E-16;
     $192 = (+Math_abs((+$182)));
     $193 = $192 * 4.4408920985006262E-16;
     $194 = $193 + $191;
     $$sink$i = $194;$$sink29$i = $182;
    }
    $195 = $1 + 1.0;
    $196 = $195 - $2;
    $$0104130 = $$sink29$i;$$0105129 = $196;$$0131 = 2;
    while(1) {
     $197 = (+($$0131|0));
     $198 = $197 + $1;
     $199 = $$0105129 * $198;
     $200 = $197 * 2.0;
     $201 = $200 + $1;
     $202 = $201 + 1.0;
     $203 = $202 - $2;
     $204 = $$0104130 * $203;
     $205 = $204 - $199;
     $206 = $197 + 1.0;
     $207 = $205 / $206;
     $208 = (($$0131) + 1)|0;
     $exitcond140 = ($208|0)==($0|0);
     if ($exitcond140) {
      break;
     } else {
      $$0105129$phi = $$0104130;$$0104130 = $207;$$0131 = $208;$$0105129 = $$0105129$phi;
     }
    }
    HEAPF64[$3>>3] = $207;
    $209 = $$sink$i / $$sink29$i;
    $210 = (+Math_abs((+$209)));
    $211 = $210 + 2.2204460492503131E-16;
    $212 = $213 * $211;
    $214 = (+Math_abs((+$207)));
    $215 = $212 * $214;
    $216 = ((($3)) + 8|0);
    HEAPF64[$216>>3] = $215;
    $$0103 = 0;
    STACKTOP = sp;return ($$0103|0);
   }
  } while(0);
  $43 = (_laguerre_n_cp($0,$1,$2,$3)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   $$0103 = 0;
   STACKTOP = sp;return ($$0103|0);
  }
  $45 = $1 + 1.0;
  $46 = - $2;
  $47 = (+Math_abs((+$2)));
  $48 = (_gsl_sf_taylorcoeff_e($0,$47,$7)|0);
  $49 = ($48|0)==(0);
  if ($49) {
   $50 = $0 & 1;
   $51 = ($50|0)==(0);
   $52 = $51 | $34;
   $53 = $52 ? 1.0 : -1.0;
   $54 = +HEAPF64[$7>>3];
   $55 = $53 * $54;
   $56 = ((($7)) + 8|0);
   $57 = +HEAPF64[$56>>3];
   $$04653$i = $57;$$04752$i = $55;$$04851$i = $55;$$054$in$i = $0;
   while(1) {
    $$054$i = (($$054$in$i) + -1)|0;
    $58 = (+($$054$i|0));
    $59 = $45 + $58;
    $60 = (($0) - ($$054$i))|0;
    $61 = (+($60|0));
    $62 = $59 / $61;
    $63 = $58 + 1.0;
    $64 = $63 * $62;
    $65 = $64 / $46;
    $66 = $$04851$i * $65;
    $67 = $$04752$i + $66;
    $68 = (+Math_abs((+$66)));
    $69 = $68 * 8.8817841970012523E-16;
    $70 = $$04653$i + $69;
    $71 = ($$054$in$i|0)>(1);
    if ($71) {
     $$04653$i = $70;$$04752$i = $67;$$04851$i = $66;$$054$in$i = $$054$i;
    } else {
     break;
    }
   }
   HEAPF64[$3>>3] = $67;
   $72 = (+Math_abs((+$67)));
   $73 = $72 * 4.4408920985006262E-16;
   $74 = $70 + $73;
   $75 = ((($3)) + 8|0);
   HEAPF64[$75>>3] = $74;
   $$049$i = 0;
  } else {
   ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
   $$049$i = $48;
  }
  $$0103 = $$049$i;
  STACKTOP = sp;return ($$0103|0);
 }
 }
 return (0)|0;
}
function _laguerre_n_cp($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$ = 0, $$061$lcssa = 0.0, $$06173 = 0.0, $$063$lcssa = 0.0, $$06372 = 0.0, $$06574 = 0, $$06574$in = 0, $$2 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $9 = (_gsl_sf_lnfact_e($0,$4)|0);
 $10 = $1 + 1.0;
 $11 = (+($0|0));
 $12 = $10 + $11;
 $13 = (_gsl_sf_lngamma_sgn_e($12,$5,$7)|0);
 $14 = (_gsl_sf_lngamma_sgn_e($10,$6,$8)|0);
 $15 = +HEAPF64[$5>>3];
 $16 = +HEAPF64[$6>>3];
 $17 = $15 - $16;
 $18 = +HEAPF64[$4>>3];
 $19 = $17 - $18;
 $20 = ((($5)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = ((($6)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $21 + $23;
 $25 = ((($4)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $24 + $26;
 $28 = (+Math_abs((+$19)));
 $29 = $28 * 4.4408920985006262E-16;
 $30 = $29 + $27;
 $31 = ($0|0)>(0);
 L1: do {
  if ($31) {
   $$06173 = 1.0;$$06372 = 0.0;$$06574$in = $0;
   while(1) {
    $$06574 = (($$06574$in) + -1)|0;
    $32 = (($$06574) - ($0))|0;
    $33 = (+($32|0));
    $34 = (+($$06574|0));
    $35 = $10 + $34;
    $36 = $33 / $35;
    $37 = (+($$06574$in|0));
    $38 = $2 / $37;
    $39 = $38 * $36;
    $40 = 1.0 / $$06173;
    $41 = $40 + $39;
    $42 = 1.6179238213760842E+308 / $$06173;
    $43 = $41 > $42;
    if ($43) {
     break;
    }
    $45 = $$06173 * $39;
    $46 = $45 + 1.0;
    $47 = (+Math_abs((+$39)));
    $48 = $$06372 * $47;
    $49 = $48 + 2.2204460492503131E-16;
    $50 = $$06372 + $49;
    $51 = ($$06574$in|0)>(1);
    if ($51) {
     $$06173 = $46;$$06372 = $50;$$06574$in = $$06574;
    } else {
     $$061$lcssa = $46;$$063$lcssa = $50;
     break L1;
    }
   }
   HEAPF64[$3>>3] = inf;
   $44 = ((($3)) + 8|0);
   HEAPF64[$44>>3] = inf;
   $$2 = 16;
   STACKTOP = sp;return ($$2|0);
  } else {
   $$061$lcssa = 1.0;$$063$lcssa = 0.0;
  }
 } while(0);
 $52 = (_gsl_sf_exp_mult_err_e($19,$30,$$061$lcssa,$$063$lcssa,$3)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  $$2 = $52;
  STACKTOP = sp;return ($$2|0);
 }
 $54 = ($9|0)==(0);
 $55 = ($13|0)==(0);
 $$ = $55 ? $14 : $13;
 $spec$select = $54 ? $$ : $9;
 $$2 = $spec$select;
 STACKTOP = sp;return ($$2|0);
}
function _gsl_sf_log_1plusx_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = !($0 <= -1.0);
 if (!($2)) {
  HEAPF64[$1>>3] = nan;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = nan;
  _gsl_error(82896,82775,170,1);
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (+Math_abs((+$0)));
 $5 = $4 < 0.0024607833005759251;
 if ($5) {
  $6 = $0 * 0.10000000000000001;
  $7 = 0.1111111111111111 - $6;
  $8 = $7 * $0;
  $9 = $8 + -0.125;
  $10 = $9 * $0;
  $11 = $10 + 0.14285714285714285;
  $12 = $11 * $0;
  $13 = $12 + -0.16666666666666666;
  $14 = $13 * $0;
  $15 = $14 + 0.20000000000000001;
  $16 = $15 * $0;
  $17 = $16 + -0.25;
  $18 = $17 * $0;
  $19 = $18 + 0.33333333333333331;
  $20 = $19 * $0;
  $21 = $20 + -0.5;
  $22 = $21 * $0;
  $23 = $22 + 1.0;
  $24 = $23 * $0;
  HEAPF64[$1>>3] = $24;
  $25 = (+Math_abs((+$24)));
  $26 = $25 * 2.2204460492503131E-16;
  $27 = ((($1)) + 8|0);
  HEAPF64[$27>>3] = $26;
  $$0 = 0;
  return ($$0|0);
 }
 $28 = $4 < 0.5;
 if ($28) {
  $29 = $0 * 8.0;
  $30 = $29 + 1.0;
  $31 = $30 * 0.5;
  $32 = $0 + 2.0;
  $33 = $31 / $32;
  $34 = $33 * 2.0;
  $35 = $34 + 1.0;
  $36 = $35 + -1.0;
  $37 = $36 * 0.5;
  $38 = $37 * 2.0;
  $39 = $38 * 0.0;
  $40 = $39 + 1.8657327910677295E-18;
  $41 = (+Math_abs((+$39)));
  $42 = $41 + 1.8657327910677295E-18;
  $43 = $42 + 0.0;
  $44 = $38 * $40;
  $45 = $44 + -1.3492637457521938E-17;
  $46 = (+Math_abs((+$44)));
  $47 = $46 + 1.3492637457521938E-17;
  $48 = $43 + $47;
  $49 = $38 * $45;
  $50 = $49 - $40;
  $51 = $50 + 9.7089758328248469E-17;
  $52 = (+Math_abs((+$49)));
  $53 = (+Math_abs((+$40)));
  $54 = $52 + $53;
  $55 = $54 + 9.7089758328248469E-17;
  $56 = $48 + $55;
  $57 = $38 * $51;
  $58 = $57 - $45;
  $59 = $58 + -7.0722150011433277E-16;
  $60 = (+Math_abs((+$57)));
  $61 = (+Math_abs((+$45)));
  $62 = $60 + $61;
  $63 = $62 + 7.0722150011433277E-16;
  $64 = $56 + $63;
  $65 = $38 * $59;
  $66 = $65 - $51;
  $67 = $66 + 5.1107345870861672E-15;
  $68 = (+Math_abs((+$65)));
  $69 = (+Math_abs((+$51)));
  $70 = $68 + $69;
  $71 = $70 + 5.1107345870861672E-15;
  $72 = $64 + $71;
  $73 = $38 * $67;
  $74 = $73 - $59;
  $75 = $74 + -3.7581977830387938E-14;
  $76 = (+Math_abs((+$73)));
  $77 = (+Math_abs((+$59)));
  $78 = $76 + $77;
  $79 = $78 + 3.7581977830387938E-14;
  $80 = $72 + $79;
  $81 = $38 * $75;
  $82 = $81 - $67;
  $83 = $82 + 2.7291231220549217E-13;
  $84 = (+Math_abs((+$81)));
  $85 = (+Math_abs((+$67)));
  $86 = $84 + $85;
  $87 = $86 + 2.7291231220549217E-13;
  $88 = $80 + $87;
  $89 = $38 * $83;
  $90 = $89 - $75;
  $91 = $90 + -2.0328515972462118E-12;
  $92 = (+Math_abs((+$89)));
  $93 = (+Math_abs((+$75)));
  $94 = $92 + $93;
  $95 = $94 + 2.0328515972462118E-12;
  $96 = $88 + $95;
  $97 = $38 * $91;
  $98 = $97 - $83;
  $99 = $98 + 1.4844576692270934E-11;
  $100 = (+Math_abs((+$97)));
  $101 = (+Math_abs((+$83)));
  $102 = $100 + $101;
  $103 = $102 + 1.4844576692270934E-11;
  $104 = $96 + $103;
  $105 = $38 * $99;
  $106 = $105 - $91;
  $107 = $106 + -1.126049937649205E-10;
  $108 = (+Math_abs((+$105)));
  $109 = (+Math_abs((+$91)));
  $110 = $108 + $109;
  $111 = $110 + 1.126049937649205E-10;
  $112 = $104 + $111;
  $113 = $38 * $107;
  $114 = $113 - $99;
  $115 = $114 + 8.2751976628812384E-10;
  $116 = (+Math_abs((+$113)));
  $117 = (+Math_abs((+$99)));
  $118 = $116 + $117;
  $119 = $118 + 8.2751976628812384E-10;
  $120 = $112 + $119;
  $121 = $38 * $115;
  $122 = $121 - $107;
  $123 = $122 + -6.4501969776090321E-9;
  $124 = (+Math_abs((+$121)));
  $125 = (+Math_abs((+$107)));
  $126 = $124 + $125;
  $127 = $126 + 6.4501969776090321E-9;
  $128 = $120 + $127;
  $129 = $38 * $123;
  $130 = $129 - $115;
  $131 = $130 + 4.7743678729400456E-8;
  $132 = (+Math_abs((+$129)));
  $133 = (+Math_abs((+$115)));
  $134 = $132 + $133;
  $135 = $134 + 4.7743678729400456E-8;
  $136 = $128 + $135;
  $137 = $38 * $131;
  $138 = $137 - $123;
  $139 = $138 + -3.8873813517057341E-7;
  $140 = (+Math_abs((+$137)));
  $141 = (+Math_abs((+$123)));
  $142 = $140 + $141;
  $143 = $142 + 3.8873813517057341E-7;
  $144 = $136 + $143;
  $145 = $38 * $139;
  $146 = $145 - $131;
  $147 = $146 + 2.9004512660400622E-6;
  $148 = (+Math_abs((+$145)));
  $149 = (+Math_abs((+$131)));
  $150 = $148 + $149;
  $151 = $150 + 2.9004512660400622E-6;
  $152 = $144 + $151;
  $153 = $38 * $147;
  $154 = $153 - $139;
  $155 = $154 + -2.5532588861055426E-5;
  $156 = (+Math_abs((+$153)));
  $157 = (+Math_abs((+$139)));
  $158 = $156 + $157;
  $159 = $158 + 2.5532588861055426E-5;
  $160 = $152 + $159;
  $161 = $38 * $155;
  $162 = $161 - $147;
  $163 = $162 + 1.9211375164056698E-4;
  $164 = (+Math_abs((+$161)));
  $165 = (+Math_abs((+$147)));
  $166 = $164 + $165;
  $167 = $166 + 1.9211375164056698E-4;
  $168 = $160 + $167;
  $169 = $38 * $163;
  $170 = $169 - $155;
  $171 = $170 + -0.0020021590494141545;
  $172 = (+Math_abs((+$169)));
  $173 = (+Math_abs((+$155)));
  $174 = $172 + $173;
  $175 = $174 + 0.0020021590494141545;
  $176 = $168 + $175;
  $177 = $38 * $171;
  $178 = $177 - $163;
  $179 = $178 + 0.015177672556905537;
  $180 = (+Math_abs((+$177)));
  $181 = (+Math_abs((+$163)));
  $182 = $180 + $181;
  $183 = $182 + 0.015177672556905537;
  $184 = $176 + $183;
  $185 = $38 * $179;
  $186 = $185 - $171;
  $187 = $186 + -0.28565398551049742;
  $188 = (+Math_abs((+$185)));
  $189 = (+Math_abs((+$171)));
  $190 = $188 + $189;
  $191 = $190 + 0.28565398551049742;
  $192 = $184 + $191;
  $193 = $37 * $187;
  $194 = $193 - $179;
  $195 = $194 + 1.0832395533219763;
  $196 = (+Math_abs((+$193)));
  $197 = (+Math_abs((+$179)));
  $198 = $197 + $196;
  $199 = $198 + 1.0832395533219763;
  $200 = $192 + $199;
  $201 = $200 * 2.2204460492503131E-16;
  $202 = $201 + 1.8657327910677295E-18;
  $203 = $195 * $0;
  HEAPF64[$1>>3] = $203;
  $204 = $202 * $0;
  $205 = (+Math_abs((+$204)));
  $206 = ((($1)) + 8|0);
  HEAPF64[$206>>3] = $205;
  $$0 = 0;
  return ($$0|0);
 } else {
  $207 = $0 + 1.0;
  $208 = (+Math_log((+$207)));
  HEAPF64[$1>>3] = $208;
  $209 = (+Math_abs((+$208)));
  $210 = $209 * 2.2204460492503131E-16;
  $211 = ((($1)) + 8|0);
  HEAPF64[$211>>3] = $210;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_log_1plusx_mx_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = !($0 <= -1.0);
 if (!($2)) {
  HEAPF64[$1>>3] = nan;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = nan;
  _gsl_error(82896,82775,209,1);
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (+Math_abs((+$0)));
 $5 = $4 < 7.4009597974140505E-4;
 if ($5) {
  $6 = $0 * 0.10000000000000001;
  $7 = 0.1111111111111111 - $6;
  $8 = $7 * $0;
  $9 = $8 + -0.125;
  $10 = $9 * $0;
  $11 = $10 + 0.14285714285714285;
  $12 = $11 * $0;
  $13 = $12 + -0.16666666666666666;
  $14 = $0 * $0;
  $15 = $13 * $0;
  $16 = $15 + 0.20000000000000001;
  $17 = $16 * $0;
  $18 = $17 + -0.25;
  $19 = $18 * $0;
  $20 = $19 + 0.33333333333333331;
  $21 = $20 * $0;
  $22 = $21 + -0.5;
  $23 = $14 * $22;
  HEAPF64[$1>>3] = $23;
  $24 = (+Math_abs((+$23)));
  $25 = $24 * 2.2204460492503131E-16;
  $26 = ((($1)) + 8|0);
  HEAPF64[$26>>3] = $25;
  $$0 = 0;
  return ($$0|0);
 }
 $27 = $4 < 0.5;
 if ($27) {
  $28 = $0 * 8.0;
  $29 = $28 + 1.0;
  $30 = $29 * 0.5;
  $31 = $0 + 2.0;
  $32 = $30 / $31;
  $33 = $32 * 2.0;
  $34 = $33 + 1.0;
  $35 = $34 + -1.0;
  $36 = $35 * 0.5;
  $37 = $36 * 2.0;
  $38 = $37 * 0.0;
  $39 = $38 + 1.3170135013050997E-17;
  $40 = (+Math_abs((+$38)));
  $41 = $40 + 1.3170135013050997E-17;
  $42 = $41 + 0.0;
  $43 = $37 * $39;
  $44 = $43 + -9.5034129794804271E-17;
  $45 = (+Math_abs((+$43)));
  $46 = $45 + 9.5034129794804271E-17;
  $47 = $42 + $46;
  $48 = $37 * $44;
  $49 = $48 - $39;
  $50 = $49 + 6.8802890218846814E-16;
  $51 = (+Math_abs((+$48)));
  $52 = (+Math_abs((+$39)));
  $53 = $51 + $52;
  $54 = $53 + 6.8802890218846814E-16;
  $55 = $47 + $54;
  $56 = $37 * $50;
  $57 = $56 - $44;
  $58 = $57 + -4.9937495922755005E-15;
  $59 = (+Math_abs((+$56)));
  $60 = (+Math_abs((+$44)));
  $61 = $59 + $60;
  $62 = $61 + 4.9937495922755005E-15;
  $63 = $55 + $62;
  $64 = $37 * $58;
  $65 = $64 - $50;
  $66 = $65 + 3.6402634315269587E-14;
  $67 = (+Math_abs((+$64)));
  $68 = (+Math_abs((+$50)));
  $69 = $67 + $68;
  $70 = $69 + 3.6402634315269587E-14;
  $71 = $63 + $70;
  $72 = $37 * $66;
  $73 = $72 - $58;
  $74 = $73 + -2.6614436796793063E-13;
  $75 = (+Math_abs((+$72)));
  $76 = (+Math_abs((+$58)));
  $77 = $75 + $76;
  $78 = $77 + 2.6614436796793063E-13;
  $79 = $71 + $78;
  $80 = $37 * $74;
  $81 = $80 - $66;
  $82 = $81 + 1.9573912180610338E-12;
  $83 = (+Math_abs((+$80)));
  $84 = (+Math_abs((+$66)));
  $85 = $83 + $84;
  $86 = $85 + 1.9573912180610338E-12;
  $87 = $79 + $86;
  $88 = $37 * $82;
  $89 = $88 - $74;
  $90 = $89 + -1.4445310914224613E-11;
  $91 = (+Math_abs((+$88)));
  $92 = (+Math_abs((+$74)));
  $93 = $91 + $92;
  $94 = $93 + 1.4445310914224613E-11;
  $95 = $87 + $94;
  $96 = $37 * $90;
  $97 = $96 - $82;
  $98 = $97 + 1.0751718277499374E-10;
  $99 = (+Math_abs((+$96)));
  $100 = (+Math_abs((+$82)));
  $101 = $99 + $100;
  $102 = $101 + 1.0751718277499374E-10;
  $103 = $95 + $102;
  $104 = $37 * $98;
  $105 = $104 - $90;
  $106 = $105 + -8.0339824424815794E-10;
  $107 = (+Math_abs((+$104)));
  $108 = (+Math_abs((+$90)));
  $109 = $107 + $108;
  $110 = $109 + 8.0339824424815794E-10;
  $111 = $103 + $110;
  $112 = $37 * $106;
  $113 = $112 - $98;
  $114 = $113 + 6.0822637459403994E-9;
  $115 = (+Math_abs((+$112)));
  $116 = (+Math_abs((+$98)));
  $117 = $115 + $116;
  $118 = $117 + 6.0822637459403994E-9;
  $119 = $111 + $118;
  $120 = $37 * $114;
  $121 = $120 - $106;
  $122 = $121 + -4.6241857041062062E-8;
  $123 = (+Math_abs((+$120)));
  $124 = (+Math_abs((+$106)));
  $125 = $123 + $124;
  $126 = $125 + 4.6241857041062062E-8;
  $127 = $119 + $126;
  $128 = $37 * $122;
  $129 = $128 - $114;
  $130 = $129 + 3.5936568872522161E-7;
  $131 = (+Math_abs((+$128)));
  $132 = (+Math_abs((+$114)));
  $133 = $131 + $132;
  $134 = $133 + 3.5936568872522161E-7;
  $135 = $127 + $134;
  $136 = $37 * $130;
  $137 = $136 - $122;
  $138 = $137 + -2.8031253116633521E-6;
  $139 = (+Math_abs((+$136)));
  $140 = (+Math_abs((+$122)));
  $141 = $139 + $140;
  $142 = $141 + 2.8031253116633521E-6;
  $143 = $135 + $142;
  $144 = $37 * $138;
  $145 = $144 - $130;
  $146 = $145 + 2.2801540217716349E-5;
  $147 = (+Math_abs((+$144)));
  $148 = (+Math_abs((+$130)));
  $149 = $147 + $148;
  $150 = $149 + 2.2801540217716349E-5;
  $151 = $143 + $150;
  $152 = $37 * $146;
  $153 = $152 - $138;
  $154 = $153 + -1.8543356147700371E-4;
  $155 = (+Math_abs((+$152)));
  $156 = (+Math_abs((+$138)));
  $157 = $155 + $156;
  $158 = $157 + 1.8543356147700371E-4;
  $159 = $151 + $158;
  $160 = $37 * $154;
  $161 = $160 - $146;
  $162 = $161 + 0.0016667825047436548;
  $163 = (+Math_abs((+$160)));
  $164 = (+Math_abs((+$146)));
  $165 = $163 + $164;
  $166 = $165 + 0.0016667825047436548;
  $167 = $159 + $166;
  $168 = $37 * $162;
  $169 = $168 - $154;
  $170 = $169 + -0.014674704538080841;
  $171 = (+Math_abs((+$168)));
  $172 = (+Math_abs((+$154)));
  $173 = $171 + $172;
  $174 = $173 + 0.014674704538080841;
  $175 = $167 + $174;
  $176 = $37 * $170;
  $177 = $176 - $162;
  $178 = $177 + 0.19553462773379388;
  $179 = (+Math_abs((+$176)));
  $180 = (+Math_abs((+$162)));
  $181 = $179 + $180;
  $182 = $181 + 0.19553462773379388;
  $183 = $175 + $182;
  $184 = $36 * $178;
  $185 = $184 - $170;
  $186 = $185 + -0.56050115661872046;
  $187 = (+Math_abs((+$184)));
  $188 = (+Math_abs((+$170)));
  $189 = $188 + $187;
  $190 = $189 + 0.56050115661872046;
  $191 = $183 + $190;
  $192 = $191 * 2.2204460492503131E-16;
  $193 = $192 + 1.3170135013050997E-17;
  $194 = $0 * $0;
  $195 = $194 * $186;
  HEAPF64[$1>>3] = $195;
  $196 = $194 * $193;
  $197 = ((($1)) + 8|0);
  HEAPF64[$197>>3] = $196;
  $$0 = 0;
  return ($$0|0);
 } else {
  $198 = $0 + 1.0;
  $199 = (+Math_log((+$198)));
  $200 = $199 - $0;
  HEAPF64[$1>>3] = $200;
  $201 = (+Math_abs((+$199)));
  $202 = $4 + $201;
  $203 = $202 * 2.2204460492503131E-16;
  $204 = ((($1)) + 8|0);
  HEAPF64[$204>>3] = $203;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_log($0) {
 $0 = +$0;
 var $$sroa$0$07 = 0.0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = !($0 <= 0.0);
 if ($1) {
  $2 = (+Math_log((+$0)));
  $$sroa$0$07 = $2;
  return (+$$sroa$0$07);
 } else {
  _gsl_error(82896,82775,116,1);
  _gsl_error(82781,82775,250,1);
  $$sroa$0$07 = nan;
  return (+$$sroa$0$07);
 }
 return +(0.0);
}
function _lnpoch_pos($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$173 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0;
 var $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $17 = 0, $18 = 0.0;
 var $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond174 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 80|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = (+Math_abs((+$1)));
 $10 = $0 * 0.10000000000000001;
 $11 = $9 > $10;
 if (!($11)) {
  $12 = $0 > 2.0;
  $13 = $12 ? $0 : 2.0;
  $14 = (+Math_log((+$13)));
  $15 = $9 * $14;
  $16 = $15 > 0.10000000000000001;
  if (!($16)) {
   $53 = $9 < $10;
   $54 = $0 > 15.0;
   $or$cond = $54 & $53;
   if ($or$cond) {
    $55 = $1 / $0;
    $56 = $55 + 1.0;
    $57 = $56 * $56;
    $58 = $56 * $57;
    $59 = $56 * $58;
    $60 = $56 * $59;
    $61 = $56 * $60;
    $62 = $56 * $61;
    $63 = - $55;
    $64 = $63 / $56;
    $65 = $55 + 3.0;
    $66 = $55 * $65;
    $67 = $66 + 3.0;
    $68 = $67 * $63;
    $69 = $68 / $58;
    $70 = $55 + 5.0;
    $71 = $55 * $70;
    $72 = $71 + 10.0;
    $73 = $55 * $72;
    $74 = $73 + 10.0;
    $75 = $55 * $74;
    $76 = $75 + 5.0;
    $77 = $76 * $63;
    $78 = $77 / $60;
    $79 = $55 + 7.0;
    $80 = $55 * $79;
    $81 = $80 + 21.0;
    $82 = $55 * $81;
    $83 = $82 + 35.0;
    $84 = $55 * $83;
    $85 = $84 + 35.0;
    $86 = $55 * $85;
    $87 = $86 + 21.0;
    $88 = $55 * $87;
    $89 = $88 + 7.0;
    $90 = $89 * $63;
    $91 = $90 / $62;
    $92 = (+_gsl_sf_pow_int($56,8));
    $93 = 1.0 / $92;
    $94 = $93 + -1.0;
    $95 = $56 * $92;
    $96 = 1.0 / $95;
    $97 = $96 + -1.0;
    $98 = $0 * $0;
    $99 = $98 * $0;
    $100 = $99 * $0;
    $101 = $100 * $0;
    $102 = $101 * $0;
    $103 = $0 * 30.0;
    $104 = $103 * $0;
    $105 = $69 / $104;
    $106 = $64 + $105;
    $107 = $100 * 105.0;
    $108 = $78 / $107;
    $109 = $106 + $108;
    $110 = $102 * 140.0;
    $111 = $91 / $110;
    $112 = $109 + $111;
    $113 = $102 * 99.0;
    $114 = $113 * $0;
    $115 = $114 * $0;
    $116 = $94 / $115;
    $117 = $97 * 0.0019175269175269176;
    $118 = $100 * $102;
    $119 = $117 / $118;
    $120 = $116 - $119;
    $121 = $112 + $120;
    $122 = $0 * 12.0;
    $123 = $121 / $122;
    $124 = $0 / 2.7182818284590451;
    $125 = (+Math_log((+$124)));
    $126 = $125 * $1;
    (_gsl_sf_log_1plusx_e($55,$7)|0);
    $127 = $0 + $1;
    $128 = $127 + -0.5;
    $129 = +HEAPF64[$7>>3];
    $130 = $128 * $129;
    $131 = $126 + $130;
    $132 = $131 + $123;
    HEAPF64[$2>>3] = $132;
    $133 = (+Math_abs((+$126)));
    $134 = $133 * 2.2204460492503131E-16;
    $135 = ((($2)) + 8|0);
    $136 = ((($7)) + 8|0);
    $137 = +HEAPF64[$136>>3];
    $138 = $128 * $137;
    $139 = (+Math_abs((+$138)));
    $140 = $134 + $139;
    $141 = (+Math_abs((+$129)));
    $142 = $141 * 2.2204460492503131E-16;
    $143 = (+Math_abs((+$0)));
    $144 = $143 + $9;
    $145 = $144 + 0.5;
    $146 = $145 * $142;
    $147 = $146 + $140;
    $148 = (+Math_abs((+$132)));
    $149 = $148 * 4.4408920985006262E-16;
    $150 = $147 + $149;
    HEAPF64[$135>>3] = $150;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $151 = (_pochrel_smallx($0,$1,$8)|0);
    $152 = +HEAPF64[$8>>3];
    $153 = $152 * $1;
    $154 = (_gsl_sf_log_1plusx_e($153,$2)|0);
    $155 = ((($8)) + 8|0);
    $156 = +HEAPF64[$155>>3];
    $157 = $156 * $1;
    $158 = $153 + 1.0;
    $159 = $157 / $158;
    $160 = (+Math_abs((+$159)));
    $161 = $160 * 2.0;
    $162 = ((($2)) + 8|0);
    $163 = +HEAPF64[$2>>3];
    $164 = (+Math_abs((+$163)));
    $165 = $164 * 4.4408920985006262E-16;
    $166 = $161 + $165;
    HEAPF64[$162>>3] = $166;
    $167 = ($154|0)==(0);
    $$173 = $167 ? $151 : $154;
    $$0 = $$173;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $17 = $0 < 171.0;
 $18 = $0 + $1;
 $19 = $18 < 171.0;
 $or$cond174 = $17 & $19;
 if ($or$cond174) {
  (_gsl_sf_gammainv_e($0,$3)|0);
  (_gsl_sf_gammainv_e($18,$4)|0);
  $20 = +HEAPF64[$4>>3];
  $21 = +HEAPF64[$3>>3];
  $22 = $20 / $21;
  $23 = (+Math_log((+$22)));
  $24 = - $23;
  HEAPF64[$2>>3] = $24;
  $25 = ((($3)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = (+Math_abs((+$21)));
  $28 = $26 / $27;
  $29 = ((($4)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (+Math_abs((+$20)));
  $32 = $30 / $31;
  $33 = $28 + $32;
  $34 = ((($2)) + 8|0);
  $35 = (+Math_abs((+$24)));
  $36 = $35 * 4.4408920985006262E-16;
  $37 = $36 + $33;
  HEAPF64[$34>>3] = $37;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $38 = (_gsl_sf_lngamma_e($0,$5)|0);
  $39 = (_gsl_sf_lngamma_e($18,$6)|0);
  $40 = +HEAPF64[$6>>3];
  $41 = +HEAPF64[$5>>3];
  $42 = $40 - $41;
  HEAPF64[$2>>3] = $42;
  $43 = ((($6)) + 8|0);
  $44 = +HEAPF64[$43>>3];
  $45 = ((($5)) + 8|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $44 + $46;
  $48 = ((($2)) + 8|0);
  $49 = (+Math_abs((+$42)));
  $50 = $49 * 4.4408920985006262E-16;
  $51 = $50 + $47;
  HEAPF64[$48>>3] = $51;
  $52 = ($38|0)==(0);
  $$ = $52 ? $39 : $38;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _pochrel_smallx($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0151$lcssa = 0.0, $$0151161 = 0.0, $$0152162 = 0, $$0152162$in = 0, $$0153$lcssa = 0.0, $$0153167 = 0.0, $$0156166 = 0.0, $$0157164 = 0.0, $$0158163 = 0, $$0159165 = 0, $$1 = 0, $$2 = 0, $$2155 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0;
 var $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
 var $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0;
 var $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond173 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $3 = sp + 192|0;
 $4 = sp;
 $5 = $1 == 0.0;
 if ($5) {
  $6 = (_gsl_sf_psi_e($0,$2)|0);
  $$2 = $6;
  STACKTOP = sp;return ($$2|0);
 }
 $7 = $0 < -0.5;
 $8 = 1.0 - $0;
 $9 = $8 - $1;
 $10 = $7 ? $9 : $0;
 $11 = $10 < 10.0;
 $12 = 11.0 - $10;
 $13 = (~~(($12)));
 $14 = $11 ? $13 : 0;
 $15 = (+($14|0));
 $16 = $10 + $15;
 $17 = $1 + -1.0;
 $18 = $17 * 0.5;
 $19 = $18 + $16;
 $20 = (+Math_log((+$19)));
 $21 = $20 * $1;
 $22 = $19 < 1.3684286665667226E+153;
 do {
  if ($22) {
   $23 = 18.36840028483855 / $20;
   $24 = $23 + 1.0;
   $25 = (~~(($24)));
   $26 = 1.0 / $19;
   $27 = $26 / $19;
   $28 = $1 + 1.0;
   $29 = $28 * 0.5;
   $30 = ((($4)) + 8|0);
   HEAPF64[$30>>3] = 1.0;
   $31 = - $29;
   $32 = $31 / 12.0;
   $33 = ((($4)) + 16|0);
   HEAPF64[$33>>3] = $32;
   $34 = ($25|0)>(20);
   if ($34) {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
    _gsl_error(82813,82806,128,7);
    $$1 = 7;
    break;
   }
   $35 = $32 * $27;
   $36 = ($25|0)<(2);
   if ($36) {
    $$0153$lcssa = $35;
   } else {
    $37 = (($25) + 1)|0;
    $$0153167 = $35;$$0156166 = $27;$$0159165 = 2;$indvars$iv = 3;
    while(1) {
     $38 = (($$0159165) + 1)|0;
     $$0157164 = 0.0;$$0158163 = 1;
     while(1) {
      $39 = (($38) - ($$0158163))|0;
      $40 = (35472 + ($39<<3)|0);
      $41 = +HEAPF64[$40>>3];
      $42 = (($4) + ($$0158163<<3)|0);
      $43 = +HEAPF64[$42>>3];
      $44 = $41 * $43;
      $45 = $$0157164 + $44;
      $46 = (($$0158163) + 1)|0;
      $exitcond = ($46|0)==($indvars$iv|0);
      if ($exitcond) {
       break;
      } else {
       $$0157164 = $45;$$0158163 = $46;
      }
     }
     $47 = $45 * $31;
     $48 = (+($$0159165|0));
     $49 = $47 / $48;
     $50 = (($4) + ($38<<3)|0);
     HEAPF64[$50>>3] = $49;
     $51 = $$0159165 << 1;
     $52 = (($51) + -2)|0;
     $53 = (+($52|0));
     $54 = $53 - $1;
     $55 = (($51) + -1)|0;
     $56 = (+($55|0));
     $57 = $56 - $1;
     $58 = $54 * $57;
     $59 = $27 * $58;
     $60 = $$0156166 * $59;
     $61 = $60 * $49;
     $62 = $$0153167 + $61;
     $indvars$iv$next = (($indvars$iv) + 1)|0;
     $exitcond173 = ($indvars$iv|0)==($37|0);
     if ($exitcond173) {
      $$0153$lcssa = $62;
      break;
     } else {
      $$0153167 = $62;$$0156166 = $60;$$0159165 = $38;$indvars$iv = $indvars$iv$next;
     }
    }
   }
   $$2155 = $$0153$lcssa;
   label = 12;
  } else {
   $$2155 = 0.0;
   label = 12;
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   $63 = (_gsl_sf_expm1_e($21,$3)|0);
   $64 = ($63|0)==(0);
   if (!($64)) {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
    $$1 = $63;
    break;
   }
   $65 = +HEAPF64[$3>>3];
   $66 = $65 / $21;
   HEAPF64[$3>>3] = $66;
   $67 = $17 * $$2155;
   $68 = $21 * $67;
   $69 = $20 + $68;
   $70 = $69 * $66;
   $71 = $67 + $70;
   $72 = ($14|0)>(0);
   if ($72) {
    $$0151161 = $71;$$0152162$in = $13;
    while(1) {
     $$0152162 = (($$0152162$in) + -1)|0;
     $73 = (+($$0152162|0));
     $74 = $10 + $73;
     $75 = 1.0 / $74;
     $76 = $$0151161 - $75;
     $77 = $75 * $1;
     $78 = $77 + 1.0;
     $79 = $76 / $78;
     $80 = ($$0152162$in|0)>(1);
     if ($80) {
      $$0151161 = $79;$$0152162$in = $$0152162;
     } else {
      $$0151$lcssa = $79;
      break;
     }
    }
   } else {
    $$0151$lcssa = $71;
   }
   $81 = $10 == $0;
   if ($81) {
    HEAPF64[$2>>3] = $$0151$lcssa;
    $82 = (+Math_abs((+$15)));
    $83 = $82 + 1.0;
    $84 = $83 * 4.4408920985006262E-16;
    $85 = (+Math_abs((+$$0151$lcssa)));
    $86 = $84 * $85;
    $87 = ((($2)) + 8|0);
    HEAPF64[$87>>3] = $86;
    $$1 = 0;
    break;
   } else {
    $88 = $1 * 3.1415926535897931;
    $89 = (+Math_sin((+$88)));
    $90 = $89 / $1;
    $91 = $1 * 1.5707963267948966;
    $92 = (+Math_sin((+$91)));
    $93 = $16 * 3.1415926535897931;
    $94 = (+Math_tan((+$93)));
    $95 = $90 / $94;
    $96 = $92 * 2.0;
    $97 = $92 / $1;
    $98 = $96 * $97;
    $99 = $95 - $98;
    $100 = $99 * $1;
    $101 = $100 + 1.0;
    $102 = $$0151$lcssa * $101;
    $103 = $99 + $102;
    HEAPF64[$2>>3] = $103;
    $104 = $$0151$lcssa * $1;
    $105 = (+Math_abs((+$104)));
    $106 = $105 + 1.0;
    $107 = $106 * 2.2204460492503131E-16;
    $108 = (+Math_abs((+$95)));
    $109 = (+Math_abs((+$98)));
    $110 = $109 + $108;
    $111 = $107 * $110;
    $112 = ((($2)) + 8|0);
    $113 = (+Math_abs((+$15)));
    $114 = $113 + 1.0;
    $115 = $114 * 4.4408920985006262E-16;
    $116 = (+Math_abs((+$103)));
    $117 = $115 * $116;
    $118 = $111 + $117;
    HEAPF64[$112>>3] = $118;
    $$1 = 0;
    break;
   }
  }
 } while(0);
 $$2 = $$1;
 STACKTOP = sp;return ($$2|0);
}
function _gsl_sf_lnpoch_sgn_e($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0;
 var $or$cond = 0, $or$cond118 = 0, $or$cond120 = 0, $or$cond122 = 0, $or$cond124 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $10 = $1 == 0.0;
 if ($10) {
  HEAPF64[$3>>3] = 1.0;
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $11 = $0 > 0.0;
 $12 = $0 + $1;
 $13 = $12 > 0.0;
 $or$cond118 = $11 & $13;
 if ($or$cond118) {
  HEAPF64[$3>>3] = 1.0;
  $14 = (_lnpoch_pos($0,$1,$2)|0);
  $$2 = $14;
  STACKTOP = sp;return ($$2|0);
 }
 $15 = $0 <= 0.0;
 $16 = (+Math_floor((+$0)));
 $17 = $16 == $0;
 $or$cond120 = $15 & $17;
 if ($or$cond120) {
  $18 = $12 < 0.0;
  $19 = (+Math_floor((+$1)));
  $20 = $19 == $1;
  $or$cond122 = $18 & $20;
  if ($or$cond122) {
   $21 = - $0;
   $22 = - $1;
   $23 = (_lnpoch_pos($21,$22,$4)|0);
   $24 = $0 / $12;
   $25 = (+Math_log((+$24)));
   $26 = $1 % 2.0;
   $27 = $26 == 0.0;
   $28 = $27 ? 1.0 : -1.0;
   $29 = +HEAPF64[$4>>3];
   $30 = $25 - $29;
   HEAPF64[$2>>3] = $30;
   $31 = ((($4)) + 8|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $25 * 4.4408920985006262E-16;
   $34 = $33 + $32;
   $35 = ((($2)) + 8|0);
   HEAPF64[$35>>3] = $34;
   HEAPF64[$3>>3] = $28;
   $$2 = $23;
   STACKTOP = sp;return ($$2|0);
  }
  $36 = $12 == 0.0;
  if ($36) {
   $37 = - $0;
   $38 = 1.0 - $0;
   $39 = (_gsl_sf_lngamma_sgn_e($38,$2,$3)|0);
   $40 = $37 % 2.0;
   $41 = $40 == 0.0;
   $42 = $41 ? 1.0 : -1.0;
   $43 = +HEAPF64[$3>>3];
   $44 = $42 * $43;
   HEAPF64[$3>>3] = $44;
   $$2 = $39;
   STACKTOP = sp;return ($$2|0);
  } else {
   HEAPF64[$2>>3] = -inf;
   $45 = ((($2)) + 8|0);
   HEAPF64[$45>>3] = 0.0;
   HEAPF64[$3>>3] = 1.0;
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $46 = $0 < 0.0;
 $47 = $12 < 0.0;
 $or$cond124 = $46 & $47;
 if ($or$cond124) {
  $48 = 1.0 - $0;
  $49 = $48 * 3.1415926535897931;
  $50 = (+Math_sin((+$49)));
  $51 = $48 - $1;
  $52 = $51 * 3.1415926535897931;
  $53 = (+Math_sin((+$52)));
  $54 = $50 == 0.0;
  $55 = $53 == 0.0;
  $or$cond = $54 | $55;
  if ($or$cond) {
   HEAPF64[$3>>3] = 0.0;
   HEAPF64[$2>>3] = nan;
   $56 = ((($2)) + 8|0);
   HEAPF64[$56>>3] = nan;
   _gsl_error(82896,82806,349,1);
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  } else {
   $57 = - $1;
   $58 = (_lnpoch_pos($48,$57,$5)|0);
   $59 = $50 / $53;
   $60 = (+Math_abs((+$59)));
   $61 = (+Math_log((+$60)));
   $62 = +HEAPF64[$5>>3];
   $63 = $61 - $62;
   HEAPF64[$2>>3] = $63;
   $64 = ((($5)) + 8|0);
   $65 = +HEAPF64[$64>>3];
   $66 = ((($2)) + 8|0);
   $67 = (+Math_abs((+$48)));
   $68 = (+Math_abs((+$51)));
   $69 = $67 + $68;
   $70 = $69 * 4.4408920985006262E-16;
   $71 = (+Math_abs((+$61)));
   $72 = $70 * $71;
   $73 = $72 + $65;
   $74 = (+Math_abs((+$63)));
   $75 = $74 * 4.4408920985006262E-16;
   $76 = $73 + $75;
   HEAPF64[$66>>3] = $76;
   $77 = $50 * $53;
   $78 = $77 >= 0.0;
   $79 = $78 ? 1.0 : -1.0;
   HEAPF64[$3>>3] = $79;
   $$2 = $58;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $80 = (_gsl_sf_lngamma_sgn_e($12,$6,$8)|0);
 $81 = (_gsl_sf_lngamma_sgn_e($0,$7,$9)|0);
 $82 = $81 | $80;
 $83 = ($82|0)==(0);
 do {
  if ($83) {
   $84 = +HEAPF64[$6>>3];
   $85 = +HEAPF64[$7>>3];
   $86 = $84 - $85;
   HEAPF64[$2>>3] = $86;
   $87 = ((($6)) + 8|0);
   $88 = +HEAPF64[$87>>3];
   $89 = ((($7)) + 8|0);
   $90 = +HEAPF64[$89>>3];
   $91 = $88 + $90;
   $92 = ((($2)) + 8|0);
   $93 = (+Math_abs((+$86)));
   $94 = $93 * 4.4408920985006262E-16;
   $95 = $94 + $91;
   HEAPF64[$92>>3] = $95;
   $96 = +HEAPF64[$9>>3];
   $97 = +HEAPF64[$8>>3];
   $98 = $96 * $97;
   HEAPF64[$3>>3] = $98;
   $$1 = 0;
  } else {
   $99 = ($80|0)==(1);
   $100 = ($81|0)==(1);
   $or$cond5 = $99 | $100;
   if ($or$cond5) {
    HEAPF64[$3>>3] = 0.0;
    HEAPF64[$2>>3] = nan;
    $101 = ((($2)) + 8|0);
    HEAPF64[$101>>3] = nan;
    _gsl_error(82896,82806,380,1);
    $$1 = 1;
    break;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
    HEAPF64[$3>>3] = 0.0;
    $$1 = -1;
    break;
   }
  }
 } while(0);
 $$2 = $$1;
 STACKTOP = sp;return ($$2|0);
}
function _gsl_sf_poch_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp;
 $5 = $1 == 0.0;
 if ($5) {
  HEAPF64[$2>>3] = 1.0;
  $6 = ((($2)) + 8|0);
  HEAPF64[$6>>3] = 0.0;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $7 = (_gsl_sf_lnpoch_sgn_e($0,$1,$3,$4)|0);
 $8 = +HEAPF64[$3>>3];
 $9 = $8 == -inf;
 if ($9) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  $$0 = $7;
 } else {
  $10 = ((($3)) + 8|0);
  $11 = +HEAPF64[$10>>3];
  $12 = (_gsl_sf_exp_err_e($8,$11,$2)|0);
  $13 = +HEAPF64[$4>>3];
  $14 = +HEAPF64[$2>>3];
  $15 = $13 * $14;
  HEAPF64[$2>>3] = $15;
  $16 = (+Math_abs((+$15)));
  $17 = $16 * 4.4408920985006262E-16;
  $18 = ((($2)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19 + $17;
  HEAPF64[$18>>3] = $20;
  $21 = ($12|0)==(0);
  $$ = $21 ? $7 : $12;
  $$0 = $$;
 }
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _gsl_sf_pochrel_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp;
 $5 = (+Math_abs((+$1)));
 $6 = (+Math_abs((+$0)));
 $7 = $6 * 0.10000000000000001;
 $8 = $5 > $7;
 if (!($8)) {
  $9 = $6 > 2.0;
  $10 = $9 ? $6 : 2.0;
  $11 = (+Math_log((+$10)));
  $12 = $5 * $11;
  $13 = $12 > 0.10000000000000001;
  if (!($13)) {
   $34 = (_pochrel_smallx($0,$1,$2)|0);
   $$1 = $34;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $14 = (_gsl_sf_lnpoch_sgn_e($0,$1,$3,$4)|0);
 $15 = +HEAPF64[$3>>3];
 $16 = $15 > 709.78271289338397;
 if ($16) {
  HEAPF64[$2>>3] = inf;
  $17 = ((($2)) + 8|0);
  HEAPF64[$17>>3] = inf;
  _gsl_error(82926,82806,432,16);
  $$0 = 16;
 } else {
  $18 = (+Math_exp((+$15)));
  $19 = +HEAPF64[$4>>3];
  $20 = $18 * $19;
  $21 = $20 + -1.0;
  $22 = $21 / $1;
  HEAPF64[$2>>3] = $22;
  $23 = (+Math_abs((+$22)));
  $24 = ((($3)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $25 + 4.4408920985006262E-16;
  $27 = $26 * $23;
  $28 = ((($2)) + 8|0);
  $29 = (+Math_abs((+$20)));
  $30 = $29 + 1.0;
  $31 = $30 * 4.4408920985006262E-16;
  $32 = $31 / $5;
  $33 = $27 + $32;
  HEAPF64[$28>>3] = $33;
  $$0 = $14;
 }
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _gsl_sf_poch($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$$i = 0, $$0 = 0.0, $$0$i = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = $1 == 0.0;
 if ($5) {
  HEAPF64[$4>>3] = 1.0;
  $6 = ((($4)) + 8|0);
  HEAPF64[$6>>3] = 0.0;
  $$0 = 1.0;
  STACKTOP = sp;return (+$$0);
 }
 $7 = (_gsl_sf_lnpoch_sgn_e($0,$1,$2,$3)|0);
 $8 = +HEAPF64[$2>>3];
 $9 = $8 == -inf;
 if ($9) {
  ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
  $$0$i = $7;$24 = 0.0;
 } else {
  $10 = ((($2)) + 8|0);
  $11 = +HEAPF64[$10>>3];
  $12 = (_gsl_sf_exp_err_e($8,$11,$4)|0);
  $13 = +HEAPF64[$3>>3];
  $14 = +HEAPF64[$4>>3];
  $15 = $13 * $14;
  HEAPF64[$4>>3] = $15;
  $16 = (+Math_abs((+$15)));
  $17 = $16 * 4.4408920985006262E-16;
  $18 = ((($4)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19 + $17;
  HEAPF64[$18>>3] = $20;
  $21 = ($12|0)==(0);
  $$$i = $21 ? $7 : $12;
  $$0$i = $$$i;$24 = $15;
 }
 $22 = ($$0$i|0)==(0);
 if ($22) {
  $$0 = $24;
  STACKTOP = sp;return (+$$0);
 }
 _gsl_error(82819,82806,459,$$0$i);
 $23 = +HEAPF64[$4>>3];
 $$0 = $23;
 STACKTOP = sp;return (+$$0);
}
function _gsl_sf_pow_int_e($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$029 = 0, $$030 = 0.0, $$132 = 0.0, $$132$ph = 0.0, $$134 = 0, $$134$ph = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<(0);
 if ($3) {
  $4 = (0 - ($1))|0;
  $5 = $0 == 0.0;
  $6 = 1.0 / $0;
  if ($5) {
   $7 = $4 & 1;
   $8 = ($7|0)==(0);
   $9 = $6 * $6;
   $10 = $8 ? $9 : $6;
   HEAPF64[$2>>3] = $10;
   $11 = ((($2)) + 8|0);
   HEAPF64[$11>>3] = inf;
   _gsl_error(82926,82848,45,16);
   $$0 = 16;
   return ($$0|0);
  } else {
   $$132$ph = $6;$$134$ph = $4;
  }
 } else {
  $$132$ph = $0;$$134$ph = $1;
 }
 $$029 = 0;$$030 = 1.0;$$132 = $$132$ph;$$134 = $$134$ph;
 while(1) {
  $12 = $$134 & 1;
  $13 = ($12|0)==(0);
  $14 = $$132 * $$030;
  $spec$select = $13 ? $$030 : $14;
  $15 = $$134 >> 1;
  $16 = $$132 * $$132;
  $17 = (($$029) + 1)|0;
  $18 = ($15|0)==(0);
  if ($18) {
   break;
  } else {
   $$029 = $17;$$030 = $spec$select;$$132 = $16;$$134 = $15;
  }
 }
 HEAPF64[$2>>3] = $spec$select;
 $19 = (+($17|0));
 $20 = $19 + 1.0;
 $21 = $20 * 4.4408920985006262E-16;
 $22 = (+Math_abs((+$spec$select)));
 $23 = $22 * $21;
 $24 = ((($2)) + 8|0);
 HEAPF64[$24>>3] = $23;
 $$0 = 0;
 return ($$0|0);
}
function _gsl_sf_pow_int($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$030$i = 0.0, $$132$i = 0.0, $$132$i$ph = 0.0, $$134$i = 0, $$134$i$ph = 0, $$sroa$0$08 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var $spec$select$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(0);
 if ($2) {
  $3 = (0 - ($1))|0;
  $4 = $0 == 0.0;
  $5 = 1.0 / $0;
  if ($4) {
   $12 = $3 & 1;
   $13 = ($12|0)==(0);
   $14 = $5 * $5;
   $15 = $13 ? $14 : $5;
   _gsl_error(82926,82848,45,16);
   _gsl_error(82858,82848,73,16);
   $$sroa$0$08 = $15;
   return (+$$sroa$0$08);
  } else {
   $$132$i$ph = $5;$$134$i$ph = $3;
  }
 } else {
  $$132$i$ph = $0;$$134$i$ph = $1;
 }
 $$030$i = 1.0;$$132$i = $$132$i$ph;$$134$i = $$134$i$ph;
 while(1) {
  $6 = $$134$i & 1;
  $7 = ($6|0)==(0);
  $8 = $$132$i * $$030$i;
  $spec$select$i = $7 ? $$030$i : $8;
  $9 = $$134$i >> 1;
  $10 = $$132$i * $$132$i;
  $11 = ($9|0)==(0);
  if ($11) {
   $$sroa$0$08 = $spec$select$i;
   break;
  } else {
   $$030$i = $spec$select$i;$$132$i = $10;$$134$i = $9;
  }
 }
 return (+$$sroa$0$08);
}
function _gsl_sf_psi_int_e($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)<(1);
 if ($2) {
  HEAPF64[$1>>3] = nan;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = nan;
  _gsl_error(82896,82890,587,1);
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ($0|0)<(101);
 if ($4) {
  $5 = (35648 + ($0<<3)|0);
  $6 = +HEAPF64[$5>>3];
  HEAPF64[$1>>3] = $6;
  $7 = (+Math_abs((+$6)));
  $8 = $7 * 2.2204460492503131E-16;
  $9 = ((($1)) + 8|0);
  HEAPF64[$9>>3] = $8;
  $$0 = 0;
  return ($$0|0);
 } else {
  $10 = (+($0|0));
  $11 = 1.0 / $10;
  $12 = $11 * $11;
  $13 = $12 * 0.0041666666666666666;
  $14 = $13 + -0.003968253968253968;
  $15 = $12 * $14;
  $16 = $15 + 0.0083333333333333332;
  $17 = $12 * $16;
  $18 = $17 + -0.083333333333333329;
  $19 = $12 * $18;
  $20 = (+Math_log((+$10)));
  $21 = 0.5 / $10;
  $22 = $20 - $21;
  $23 = $22 + $19;
  HEAPF64[$1>>3] = $23;
  $24 = (+Math_abs((+$20)));
  $25 = (+Math_abs((+$21)));
  $26 = $24 + $25;
  $27 = (+Math_abs((+$19)));
  $28 = $26 + $27;
  $29 = $28 * 2.2204460492503131E-16;
  $30 = ((($1)) + 8|0);
  $31 = (+Math_abs((+$23)));
  $32 = $31 * 2.2204460492503131E-16;
  $33 = $29 + $32;
  HEAPF64[$30>>3] = $33;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_psi_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$3$i = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0;
 var $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0;
 var $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0;
 var $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0;
 var $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0;
 var $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0;
 var $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0;
 var $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0;
 var $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0;
 var $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0;
 var $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0;
 var $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0;
 var $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0;
 var $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0, $530 = 0.0;
 var $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0.0;
 var $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0;
 var $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0, $584 = 0.0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0.0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0, $602 = 0.0;
 var $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0.0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0.0;
 var $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0.0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0.0;
 var $64 = 0.0, $640 = 0.0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0.0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0.0;
 var $658 = 0.0, $659 = 0.0, $66 = 0.0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0, $675 = 0.0;
 var $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0.0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0.0;
 var $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0.0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0.0, $710 = 0.0;
 var $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0.0, $720 = 0.0, $721 = 0.0, $722 = 0.0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0.0, $729 = 0.0;
 var $73 = 0.0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0.0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0, $747 = 0.0;
 var $748 = 0.0, $749 = 0.0, $75 = 0.0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0.0, $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0.0, $76 = 0.0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0.0;
 var $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0.0, $77 = 0.0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0, $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0.0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0.0;
 var $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0.0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0.0, $80 = 0.0, $800 = 0.0;
 var $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0.0, $808 = 0.0, $809 = 0.0, $81 = 0.0, $810 = 0.0, $811 = 0.0, $812 = 0.0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0.0, $819 = 0.0;
 var $82 = 0.0, $820 = 0.0, $821 = 0.0, $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0.0, $83 = 0.0, $830 = 0.0, $831 = 0.0, $832 = 0.0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0.0, $837 = 0.0;
 var $838 = 0.0, $839 = 0.0, $84 = 0.0, $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0.0, $844 = 0.0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0.0, $85 = 0.0, $850 = 0.0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0.0, $855 = 0.0;
 var $856 = 0.0, $857 = 0.0, $858 = 0.0, $859 = 0.0, $86 = 0.0, $860 = 0.0, $861 = 0.0, $862 = 0.0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0.0, $87 = 0.0, $870 = 0.0, $871 = 0.0, $872 = 0.0, $873 = 0.0;
 var $874 = 0.0, $875 = 0.0, $876 = 0.0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0.0, $880 = 0.0, $881 = 0.0, $882 = 0.0, $883 = 0.0, $884 = 0.0, $885 = 0.0, $886 = 0.0, $887 = 0.0, $888 = 0.0, $889 = 0.0, $89 = 0.0, $890 = 0.0, $891 = 0.0;
 var $892 = 0.0, $893 = 0.0, $894 = 0.0, $895 = 0.0, $896 = 0.0, $897 = 0.0, $898 = 0.0, $899 = 0.0, $9 = 0.0, $90 = 0.0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0.0, $904 = 0.0, $905 = 0.0, $906 = 0.0, $907 = 0.0, $908 = 0.0, $909 = 0.0;
 var $91 = 0.0, $910 = 0.0, $911 = 0.0, $912 = 0.0, $913 = 0.0, $914 = 0.0, $915 = 0.0, $916 = 0.0, $917 = 0.0, $918 = 0.0, $919 = 0.0, $92 = 0.0, $920 = 0.0, $921 = 0.0, $922 = 0.0, $923 = 0.0, $924 = 0.0, $925 = 0.0, $926 = 0.0, $927 = 0.0;
 var $928 = 0.0, $929 = 0.0, $93 = 0.0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0.0, $936 = 0.0, $937 = 0.0, $938 = 0.0, $939 = 0.0, $94 = 0.0, $940 = 0.0, $941 = 0.0, $942 = 0.0, $943 = 0.0, $944 = 0.0, $945 = 0.0;
 var $946 = 0.0, $947 = 0.0, $948 = 0.0, $949 = 0.0, $95 = 0.0, $950 = 0.0, $951 = 0.0, $952 = 0.0, $953 = 0.0, $954 = 0.0, $955 = 0.0, $956 = 0.0, $957 = 0.0, $958 = 0.0, $959 = 0.0, $96 = 0.0, $960 = 0.0, $961 = 0.0, $962 = 0.0, $963 = 0.0;
 var $964 = 0.0, $965 = 0.0, $966 = 0.0, $967 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond$i = 0, $or$cond4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+Math_abs((+$0)));
 $3 = $0 == 0.0;
 $4 = $0 == -1.0;
 $or$cond$i = $3 | $4;
 $5 = $0 == -2.0;
 $or$cond4$i = $5 | $or$cond$i;
 if ($or$cond4$i) {
  HEAPF64[$1>>3] = nan;
  $6 = ((($1)) + 8|0);
  HEAPF64[$6>>3] = nan;
  _gsl_error(82896,82890,385,1);
  $$3$i = 1;
  return ($$3$i|0);
 }
 $7 = !($2 >= 2.0);
 if (!($7)) {
  $8 = $0 * $0;
  $9 = 8.0 / $8;
  $10 = $9 + -1.0;
  $11 = $10 * 2.0;
  $12 = $11 + 1.0;
  $13 = $12 + -1.0;
  $14 = $13 * 0.5;
  $15 = $14 * 2.0;
  $16 = $15 * 0.0;
  $17 = (+Math_abs((+$16)));
  $18 = $15 * $16;
  $19 = $18 + 2.0E-16;
  $20 = (+Math_abs((+$18)));
  $21 = $20 + 2.0E-16;
  $22 = $17 + $21;
  $23 = $15 * $19;
  $24 = $23 - $16;
  $25 = $24 + -9.0000000000000003E-16;
  $26 = (+Math_abs((+$23)));
  $27 = (+Math_abs((+$16)));
  $28 = $26 + $27;
  $29 = $28 + 9.0000000000000003E-16;
  $30 = $22 + $29;
  $31 = $15 * $25;
  $32 = $31 - $19;
  $33 = $32 + 4.4999999999999998E-15;
  $34 = (+Math_abs((+$31)));
  $35 = (+Math_abs((+$19)));
  $36 = $34 + $35;
  $37 = $36 + 4.4999999999999998E-15;
  $38 = $30 + $37;
  $39 = $15 * $33;
  $40 = $39 - $25;
  $41 = $40 + -2.2800000000000001E-14;
  $42 = (+Math_abs((+$39)));
  $43 = (+Math_abs((+$25)));
  $44 = $42 + $43;
  $45 = $44 + 2.2800000000000001E-14;
  $46 = $38 + $45;
  $47 = $15 * $41;
  $48 = $47 - $33;
  $49 = $48 + 1.2329999999999999E-13;
  $50 = (+Math_abs((+$47)));
  $51 = (+Math_abs((+$33)));
  $52 = $50 + $51;
  $53 = $52 + 1.2329999999999999E-13;
  $54 = $46 + $53;
  $55 = $15 * $49;
  $56 = $55 - $41;
  $57 = $56 + -7.3439999999999998E-13;
  $58 = (+Math_abs((+$55)));
  $59 = (+Math_abs((+$41)));
  $60 = $58 + $59;
  $61 = $60 + 7.3439999999999998E-13;
  $62 = $54 + $61;
  $63 = $15 * $57;
  $64 = $63 - $49;
  $65 = $64 + 4.899E-12;
  $66 = (+Math_abs((+$63)));
  $67 = (+Math_abs((+$49)));
  $68 = $66 + $67;
  $69 = $68 + 4.899E-12;
  $70 = $62 + $69;
  $71 = $15 * $65;
  $72 = $71 - $57;
  $73 = $72 + -3.7483799999999999E-11;
  $74 = (+Math_abs((+$71)));
  $75 = (+Math_abs((+$57)));
  $76 = $74 + $75;
  $77 = $76 + 3.7483799999999999E-11;
  $78 = $70 + $77;
  $79 = $15 * $73;
  $80 = $79 - $65;
  $81 = $80 + 3.3974340000000001E-10;
  $82 = (+Math_abs((+$79)));
  $83 = (+Math_abs((+$65)));
  $84 = $82 + $83;
  $85 = $84 + 3.3974340000000001E-10;
  $86 = $78 + $85;
  $87 = $15 * $81;
  $88 = $87 - $73;
  $89 = $88 + -3.8213539000000003E-9;
  $90 = (+Math_abs((+$87)));
  $91 = (+Math_abs((+$73)));
  $92 = $90 + $91;
  $93 = $92 + 3.8213539000000003E-9;
  $94 = $86 + $93;
  $95 = $15 * $89;
  $96 = $95 - $81;
  $97 = $96 + 5.7285860599999999E-8;
  $98 = (+Math_abs((+$95)));
  $99 = (+Math_abs((+$81)));
  $100 = $98 + $99;
  $101 = $100 + 5.7285860599999999E-8;
  $102 = $94 + $101;
  $103 = $15 * $97;
  $104 = $103 - $89;
  $105 = $104 + -1.2917176570000001E-6;
  $106 = (+Math_abs((+$103)));
  $107 = (+Math_abs((+$89)));
  $108 = $106 + $107;
  $109 = $108 + 1.2917176570000001E-6;
  $110 = $102 + $109;
  $111 = $15 * $105;
  $112 = $111 - $97;
  $113 = $112 + 5.59718725387E-5;
  $114 = (+Math_abs((+$111)));
  $115 = (+Math_abs((+$97)));
  $116 = $114 + $115;
  $117 = $116 + 5.59718725387E-5;
  $118 = $110 + $117;
  $119 = $15 * $113;
  $120 = $119 - $105;
  $121 = $120 + -0.0101801271534859;
  $122 = (+Math_abs((+$119)));
  $123 = (+Math_abs((+$105)));
  $124 = $122 + $123;
  $125 = $124 + 0.0101801271534859;
  $126 = $118 + $125;
  $127 = $14 * $121;
  $128 = $127 - $113;
  $129 = $128 + -0.010237452233909251;
  $130 = (+Math_abs((+$127)));
  $131 = (+Math_abs((+$113)));
  $132 = $131 + $130;
  $133 = $132 + 0.010237452233909251;
  $134 = $126 + $133;
  $135 = $134 * 2.2204460492503131E-16;
  $136 = $135 + 0.0;
  $137 = $0 < 0.0;
  if (!($137)) {
   $160 = (+Math_log((+$2)));
   $161 = 0.5 / $0;
   $162 = $160 - $161;
   $163 = $162 + $129;
   HEAPF64[$1>>3] = $163;
   $164 = ((($1)) + 8|0);
   $165 = (+Math_abs((+$163)));
   $166 = $165 * 2.2204460492503131E-16;
   $167 = $166 + $136;
   HEAPF64[$164>>3] = $167;
   $$3$i = 0;
   return ($$3$i|0);
  }
  $138 = $0 * 3.1415926535897931;
  $139 = (+Math_sin((+$138)));
  $140 = (+Math_abs((+$139)));
  $141 = $140 < 2.9833362924800827E-154;
  if ($141) {
   HEAPF64[$1>>3] = nan;
   $142 = ((($1)) + 8|0);
   HEAPF64[$142>>3] = nan;
   _gsl_error(82896,82890,395,1);
   $$3$i = 1;
   return ($$3$i|0);
  } else {
   $143 = (+Math_cos((+$138)));
   $144 = (+Math_log((+$2)));
   $145 = 0.5 / $0;
   $146 = $144 - $145;
   $147 = $146 + $129;
   $148 = $143 * 3.1415926535897931;
   $149 = $148 / $139;
   $150 = $147 - $149;
   HEAPF64[$1>>3] = $150;
   $151 = $2 * 3.1415926535897931;
   $152 = $151 * 2.2204460492503131E-16;
   $153 = $139 * $139;
   $154 = $152 / $153;
   $155 = ((($1)) + 8|0);
   $156 = $154 + $136;
   $157 = (+Math_abs((+$150)));
   $158 = $157 * 2.2204460492503131E-16;
   $159 = $158 + $156;
   HEAPF64[$155>>3] = $159;
   $$3$i = 0;
   return ($$3$i|0);
  }
 }
 $168 = $0 < -1.0;
 if ($168) {
  $169 = $0 + 2.0;
  $170 = 1.0 / $0;
  $171 = $0 + 1.0;
  $172 = 1.0 / $171;
  $173 = 1.0 / $169;
  $174 = $169 * 2.0;
  $175 = $174 + -1.0;
  $176 = $175 * 2.0;
  $177 = $176 + 1.0;
  $178 = $177 + -1.0;
  $179 = $178 * 0.5;
  $180 = $179 * 2.0;
  $181 = $180 * 0.0;
  $182 = $181 + -2.0000000000000001E-17;
  $183 = (+Math_abs((+$181)));
  $184 = $183 + 2.0000000000000001E-17;
  $185 = $184 + 0.0;
  $186 = $180 * $182;
  $187 = $186 + 1.1799999999999999E-16;
  $188 = (+Math_abs((+$186)));
  $189 = $188 + 1.1799999999999999E-16;
  $190 = $185 + $189;
  $191 = $180 * $187;
  $192 = $191 - $182;
  $193 = $192 + -6.9099999999999999E-16;
  $194 = (+Math_abs((+$191)));
  $195 = (+Math_abs((+$182)));
  $196 = $194 + $195;
  $197 = $196 + 6.9099999999999999E-16;
  $198 = $190 + $197;
  $199 = $180 * $193;
  $200 = $199 - $187;
  $201 = $200 + 4.0270000000000002E-15;
  $202 = (+Math_abs((+$199)));
  $203 = (+Math_abs((+$187)));
  $204 = $202 + $203;
  $205 = $204 + 4.0270000000000002E-15;
  $206 = $198 + $205;
  $207 = $180 * $201;
  $208 = $207 - $193;
  $209 = $208 + -2.3474999999999999E-14;
  $210 = (+Math_abs((+$207)));
  $211 = (+Math_abs((+$193)));
  $212 = $210 + $211;
  $213 = $212 + 2.3474999999999999E-14;
  $214 = $206 + $213;
  $215 = $180 * $209;
  $216 = $215 - $201;
  $217 = $216 + 1.3682699999999999E-13;
  $218 = (+Math_abs((+$215)));
  $219 = (+Math_abs((+$201)));
  $220 = $218 + $219;
  $221 = $220 + 1.3682699999999999E-13;
  $222 = $214 + $221;
  $223 = $180 * $217;
  $224 = $223 - $209;
  $225 = $224 + -7.9752700000000002E-13;
  $226 = (+Math_abs((+$223)));
  $227 = (+Math_abs((+$209)));
  $228 = $226 + $227;
  $229 = $228 + 7.9752700000000002E-13;
  $230 = $222 + $229;
  $231 = $180 * $225;
  $232 = $231 - $217;
  $233 = $232 + 4.6487220000000004E-12;
  $234 = (+Math_abs((+$231)));
  $235 = (+Math_abs((+$217)));
  $236 = $234 + $235;
  $237 = $236 + 4.6487220000000004E-12;
  $238 = $230 + $237;
  $239 = $180 * $233;
  $240 = $239 - $225;
  $241 = $240 + -2.7098645999999999E-11;
  $242 = (+Math_abs((+$239)));
  $243 = (+Math_abs((+$225)));
  $244 = $242 + $243;
  $245 = $244 + 2.7098645999999999E-11;
  $246 = $238 + $245;
  $247 = $180 * $241;
  $248 = $247 - $233;
  $249 = $248 + 1.5798126500000001E-10;
  $250 = (+Math_abs((+$247)));
  $251 = (+Math_abs((+$233)));
  $252 = $250 + $251;
  $253 = $252 + 1.5798126500000001E-10;
  $254 = $246 + $253;
  $255 = $180 * $249;
  $256 = $255 - $241;
  $257 = $256 + -9.2116814099999996E-10;
  $258 = (+Math_abs((+$255)));
  $259 = (+Math_abs((+$241)));
  $260 = $258 + $259;
  $261 = $260 + 9.2116814099999996E-10;
  $262 = $254 + $261;
  $263 = $180 * $257;
  $264 = $263 - $249;
  $265 = $264 + 5.3728087760000004E-9;
  $266 = (+Math_abs((+$263)));
  $267 = (+Math_abs((+$249)));
  $268 = $266 + $267;
  $269 = $268 + 5.3728087760000004E-9;
  $270 = $262 + $269;
  $271 = $180 * $265;
  $272 = $271 - $257;
  $273 = $272 + -3.1353509360999999E-8;
  $274 = (+Math_abs((+$271)));
  $275 = (+Math_abs((+$257)));
  $276 = $274 + $275;
  $277 = $276 + 3.1353509360999999E-8;
  $278 = $270 + $277;
  $279 = $180 * $273;
  $280 = $279 - $265;
  $281 = $280 + 1.8312839465400001E-7;
  $282 = (+Math_abs((+$279)));
  $283 = (+Math_abs((+$265)));
  $284 = $282 + $283;
  $285 = $284 + 1.8312839465400001E-7;
  $286 = $278 + $285;
  $287 = $180 * $281;
  $288 = $287 - $273;
  $289 = $288 + -1.0712639085060001E-6;
  $290 = (+Math_abs((+$287)));
  $291 = (+Math_abs((+$273)));
  $292 = $290 + $291;
  $293 = $292 + 1.0712639085060001E-6;
  $294 = $286 + $293;
  $295 = $180 * $289;
  $296 = $295 - $281;
  $297 = $296 + 6.2837936548539997E-6;
  $298 = (+Math_abs((+$295)));
  $299 = (+Math_abs((+$281)));
  $300 = $298 + $299;
  $301 = $300 + 6.2837936548539997E-6;
  $302 = $294 + $301;
  $303 = $180 * $297;
  $304 = $303 - $289;
  $305 = $304 + -3.7040238178456E-5;
  $306 = (+Math_abs((+$303)));
  $307 = (+Math_abs((+$289)));
  $308 = $306 + $307;
  $309 = $308 + 3.7040238178456E-5;
  $310 = $302 + $309;
  $311 = $180 * $305;
  $312 = $311 - $297;
  $313 = $312 + 2.20313287069308E-4;
  $314 = (+Math_abs((+$311)));
  $315 = (+Math_abs((+$297)));
  $316 = $314 + $315;
  $317 = $316 + 2.20313287069308E-4;
  $318 = $310 + $317;
  $319 = $180 * $313;
  $320 = $319 - $305;
  $321 = $320 + -0.001333232857994342;
  $322 = (+Math_abs((+$319)));
  $323 = (+Math_abs((+$305)));
  $324 = $322 + $323;
  $325 = $324 + 0.001333232857994342;
  $326 = $318 + $325;
  $327 = $180 * $321;
  $328 = $327 - $313;
  $329 = $328 + 0.008357821225914313;
  $330 = (+Math_abs((+$327)));
  $331 = (+Math_abs((+$313)));
  $332 = $330 + $331;
  $333 = $332 + 0.008357821225914313;
  $334 = $326 + $333;
  $335 = $180 * $329;
  $336 = $335 - $321;
  $337 = $336 + -0.056815747821244732;
  $338 = (+Math_abs((+$335)));
  $339 = (+Math_abs((+$321)));
  $340 = $338 + $339;
  $341 = $340 + 0.056815747821244732;
  $342 = $334 + $341;
  $343 = $180 * $337;
  $344 = $343 - $329;
  $345 = $344 + 0.49141539302938714;
  $346 = (+Math_abs((+$343)));
  $347 = (+Math_abs((+$329)));
  $348 = $346 + $347;
  $349 = $348 + 0.49141539302938714;
  $350 = $342 + $349;
  $351 = $179 * $345;
  $352 = $351 - $337;
  $353 = $352 + -0.019028540417608961;
  $354 = (+Math_abs((+$351)));
  $355 = (+Math_abs((+$337)));
  $356 = $355 + $354;
  $357 = $356 + 0.019028540417608961;
  $358 = $350 + $357;
  $359 = $358 * 2.2204460492503131E-16;
  $360 = $359 + 2.0000000000000001E-17;
  $361 = $170 + $172;
  $362 = $173 + $361;
  $363 = $353 - $362;
  HEAPF64[$1>>3] = $363;
  $364 = (+Math_abs((+$170)));
  $365 = $172 * $172;
  $366 = $0 / $365;
  $367 = (+Math_abs((+$366)));
  $368 = $364 + $367;
  $369 = $173 * $173;
  $370 = $0 / $369;
  $371 = (+Math_abs((+$370)));
  $372 = $371 + $368;
  $373 = $372 * 2.2204460492503131E-16;
  $374 = ((($1)) + 8|0);
  $375 = $373 + $360;
  $376 = (+Math_abs((+$363)));
  $377 = $376 * 2.2204460492503131E-16;
  $378 = $377 + $375;
  HEAPF64[$374>>3] = $378;
  $$3$i = 0;
  return ($$3$i|0);
 }
 $379 = $0 < 0.0;
 if ($379) {
  $380 = $0 + 1.0;
  $381 = 1.0 / $0;
  $382 = 1.0 / $380;
  $383 = $380 * 2.0;
  $384 = $383 + -1.0;
  $385 = $384 * 2.0;
  $386 = $385 + 1.0;
  $387 = $386 + -1.0;
  $388 = $387 * 0.5;
  $389 = $388 * 2.0;
  $390 = $389 * 0.0;
  $391 = $390 + -2.0000000000000001E-17;
  $392 = (+Math_abs((+$390)));
  $393 = $392 + 2.0000000000000001E-17;
  $394 = $393 + 0.0;
  $395 = $389 * $391;
  $396 = $395 + 1.1799999999999999E-16;
  $397 = (+Math_abs((+$395)));
  $398 = $397 + 1.1799999999999999E-16;
  $399 = $394 + $398;
  $400 = $389 * $396;
  $401 = $400 - $391;
  $402 = $401 + -6.9099999999999999E-16;
  $403 = (+Math_abs((+$400)));
  $404 = (+Math_abs((+$391)));
  $405 = $403 + $404;
  $406 = $405 + 6.9099999999999999E-16;
  $407 = $399 + $406;
  $408 = $389 * $402;
  $409 = $408 - $396;
  $410 = $409 + 4.0270000000000002E-15;
  $411 = (+Math_abs((+$408)));
  $412 = (+Math_abs((+$396)));
  $413 = $411 + $412;
  $414 = $413 + 4.0270000000000002E-15;
  $415 = $407 + $414;
  $416 = $389 * $410;
  $417 = $416 - $402;
  $418 = $417 + -2.3474999999999999E-14;
  $419 = (+Math_abs((+$416)));
  $420 = (+Math_abs((+$402)));
  $421 = $419 + $420;
  $422 = $421 + 2.3474999999999999E-14;
  $423 = $415 + $422;
  $424 = $389 * $418;
  $425 = $424 - $410;
  $426 = $425 + 1.3682699999999999E-13;
  $427 = (+Math_abs((+$424)));
  $428 = (+Math_abs((+$410)));
  $429 = $427 + $428;
  $430 = $429 + 1.3682699999999999E-13;
  $431 = $423 + $430;
  $432 = $389 * $426;
  $433 = $432 - $418;
  $434 = $433 + -7.9752700000000002E-13;
  $435 = (+Math_abs((+$432)));
  $436 = (+Math_abs((+$418)));
  $437 = $435 + $436;
  $438 = $437 + 7.9752700000000002E-13;
  $439 = $431 + $438;
  $440 = $389 * $434;
  $441 = $440 - $426;
  $442 = $441 + 4.6487220000000004E-12;
  $443 = (+Math_abs((+$440)));
  $444 = (+Math_abs((+$426)));
  $445 = $443 + $444;
  $446 = $445 + 4.6487220000000004E-12;
  $447 = $439 + $446;
  $448 = $389 * $442;
  $449 = $448 - $434;
  $450 = $449 + -2.7098645999999999E-11;
  $451 = (+Math_abs((+$448)));
  $452 = (+Math_abs((+$434)));
  $453 = $451 + $452;
  $454 = $453 + 2.7098645999999999E-11;
  $455 = $447 + $454;
  $456 = $389 * $450;
  $457 = $456 - $442;
  $458 = $457 + 1.5798126500000001E-10;
  $459 = (+Math_abs((+$456)));
  $460 = (+Math_abs((+$442)));
  $461 = $459 + $460;
  $462 = $461 + 1.5798126500000001E-10;
  $463 = $455 + $462;
  $464 = $389 * $458;
  $465 = $464 - $450;
  $466 = $465 + -9.2116814099999996E-10;
  $467 = (+Math_abs((+$464)));
  $468 = (+Math_abs((+$450)));
  $469 = $467 + $468;
  $470 = $469 + 9.2116814099999996E-10;
  $471 = $463 + $470;
  $472 = $389 * $466;
  $473 = $472 - $458;
  $474 = $473 + 5.3728087760000004E-9;
  $475 = (+Math_abs((+$472)));
  $476 = (+Math_abs((+$458)));
  $477 = $475 + $476;
  $478 = $477 + 5.3728087760000004E-9;
  $479 = $471 + $478;
  $480 = $389 * $474;
  $481 = $480 - $466;
  $482 = $481 + -3.1353509360999999E-8;
  $483 = (+Math_abs((+$480)));
  $484 = (+Math_abs((+$466)));
  $485 = $483 + $484;
  $486 = $485 + 3.1353509360999999E-8;
  $487 = $479 + $486;
  $488 = $389 * $482;
  $489 = $488 - $474;
  $490 = $489 + 1.8312839465400001E-7;
  $491 = (+Math_abs((+$488)));
  $492 = (+Math_abs((+$474)));
  $493 = $491 + $492;
  $494 = $493 + 1.8312839465400001E-7;
  $495 = $487 + $494;
  $496 = $389 * $490;
  $497 = $496 - $482;
  $498 = $497 + -1.0712639085060001E-6;
  $499 = (+Math_abs((+$496)));
  $500 = (+Math_abs((+$482)));
  $501 = $499 + $500;
  $502 = $501 + 1.0712639085060001E-6;
  $503 = $495 + $502;
  $504 = $389 * $498;
  $505 = $504 - $490;
  $506 = $505 + 6.2837936548539997E-6;
  $507 = (+Math_abs((+$504)));
  $508 = (+Math_abs((+$490)));
  $509 = $507 + $508;
  $510 = $509 + 6.2837936548539997E-6;
  $511 = $503 + $510;
  $512 = $389 * $506;
  $513 = $512 - $498;
  $514 = $513 + -3.7040238178456E-5;
  $515 = (+Math_abs((+$512)));
  $516 = (+Math_abs((+$498)));
  $517 = $515 + $516;
  $518 = $517 + 3.7040238178456E-5;
  $519 = $511 + $518;
  $520 = $389 * $514;
  $521 = $520 - $506;
  $522 = $521 + 2.20313287069308E-4;
  $523 = (+Math_abs((+$520)));
  $524 = (+Math_abs((+$506)));
  $525 = $523 + $524;
  $526 = $525 + 2.20313287069308E-4;
  $527 = $519 + $526;
  $528 = $389 * $522;
  $529 = $528 - $514;
  $530 = $529 + -0.001333232857994342;
  $531 = (+Math_abs((+$528)));
  $532 = (+Math_abs((+$514)));
  $533 = $531 + $532;
  $534 = $533 + 0.001333232857994342;
  $535 = $527 + $534;
  $536 = $389 * $530;
  $537 = $536 - $522;
  $538 = $537 + 0.008357821225914313;
  $539 = (+Math_abs((+$536)));
  $540 = (+Math_abs((+$522)));
  $541 = $539 + $540;
  $542 = $541 + 0.008357821225914313;
  $543 = $535 + $542;
  $544 = $389 * $538;
  $545 = $544 - $530;
  $546 = $545 + -0.056815747821244732;
  $547 = (+Math_abs((+$544)));
  $548 = (+Math_abs((+$530)));
  $549 = $547 + $548;
  $550 = $549 + 0.056815747821244732;
  $551 = $543 + $550;
  $552 = $389 * $546;
  $553 = $552 - $538;
  $554 = $553 + 0.49141539302938714;
  $555 = (+Math_abs((+$552)));
  $556 = (+Math_abs((+$538)));
  $557 = $555 + $556;
  $558 = $557 + 0.49141539302938714;
  $559 = $551 + $558;
  $560 = $388 * $554;
  $561 = $560 - $546;
  $562 = $561 + -0.019028540417608961;
  $563 = (+Math_abs((+$560)));
  $564 = (+Math_abs((+$546)));
  $565 = $564 + $563;
  $566 = $565 + 0.019028540417608961;
  $567 = $559 + $566;
  $568 = $567 * 2.2204460492503131E-16;
  $569 = $568 + 2.0000000000000001E-17;
  $570 = $381 + $382;
  $571 = $562 - $570;
  HEAPF64[$1>>3] = $571;
  $572 = (+Math_abs((+$381)));
  $573 = $382 * $382;
  $574 = $0 / $573;
  $575 = (+Math_abs((+$574)));
  $576 = $572 + $575;
  $577 = $576 * 2.2204460492503131E-16;
  $578 = ((($1)) + 8|0);
  $579 = $577 + $569;
  $580 = (+Math_abs((+$571)));
  $581 = $580 * 2.2204460492503131E-16;
  $582 = $581 + $579;
  HEAPF64[$578>>3] = $582;
  $$3$i = 0;
  return ($$3$i|0);
 }
 $583 = $0 < 1.0;
 if ($583) {
  $584 = 1.0 / $0;
  $585 = $0 * 2.0;
  $586 = $585 + -1.0;
  $587 = $586 * 2.0;
  $588 = $587 + 1.0;
  $589 = $588 + -1.0;
  $590 = $589 * 0.5;
  $591 = $590 * 2.0;
  $592 = $591 * 0.0;
  $593 = $592 + -2.0000000000000001E-17;
  $594 = (+Math_abs((+$592)));
  $595 = $594 + 2.0000000000000001E-17;
  $596 = $595 + 0.0;
  $597 = $591 * $593;
  $598 = $597 + 1.1799999999999999E-16;
  $599 = (+Math_abs((+$597)));
  $600 = $599 + 1.1799999999999999E-16;
  $601 = $596 + $600;
  $602 = $591 * $598;
  $603 = $602 - $593;
  $604 = $603 + -6.9099999999999999E-16;
  $605 = (+Math_abs((+$602)));
  $606 = (+Math_abs((+$593)));
  $607 = $605 + $606;
  $608 = $607 + 6.9099999999999999E-16;
  $609 = $601 + $608;
  $610 = $591 * $604;
  $611 = $610 - $598;
  $612 = $611 + 4.0270000000000002E-15;
  $613 = (+Math_abs((+$610)));
  $614 = (+Math_abs((+$598)));
  $615 = $613 + $614;
  $616 = $615 + 4.0270000000000002E-15;
  $617 = $609 + $616;
  $618 = $591 * $612;
  $619 = $618 - $604;
  $620 = $619 + -2.3474999999999999E-14;
  $621 = (+Math_abs((+$618)));
  $622 = (+Math_abs((+$604)));
  $623 = $621 + $622;
  $624 = $623 + 2.3474999999999999E-14;
  $625 = $617 + $624;
  $626 = $591 * $620;
  $627 = $626 - $612;
  $628 = $627 + 1.3682699999999999E-13;
  $629 = (+Math_abs((+$626)));
  $630 = (+Math_abs((+$612)));
  $631 = $629 + $630;
  $632 = $631 + 1.3682699999999999E-13;
  $633 = $625 + $632;
  $634 = $591 * $628;
  $635 = $634 - $620;
  $636 = $635 + -7.9752700000000002E-13;
  $637 = (+Math_abs((+$634)));
  $638 = (+Math_abs((+$620)));
  $639 = $637 + $638;
  $640 = $639 + 7.9752700000000002E-13;
  $641 = $633 + $640;
  $642 = $591 * $636;
  $643 = $642 - $628;
  $644 = $643 + 4.6487220000000004E-12;
  $645 = (+Math_abs((+$642)));
  $646 = (+Math_abs((+$628)));
  $647 = $645 + $646;
  $648 = $647 + 4.6487220000000004E-12;
  $649 = $641 + $648;
  $650 = $591 * $644;
  $651 = $650 - $636;
  $652 = $651 + -2.7098645999999999E-11;
  $653 = (+Math_abs((+$650)));
  $654 = (+Math_abs((+$636)));
  $655 = $653 + $654;
  $656 = $655 + 2.7098645999999999E-11;
  $657 = $649 + $656;
  $658 = $591 * $652;
  $659 = $658 - $644;
  $660 = $659 + 1.5798126500000001E-10;
  $661 = (+Math_abs((+$658)));
  $662 = (+Math_abs((+$644)));
  $663 = $661 + $662;
  $664 = $663 + 1.5798126500000001E-10;
  $665 = $657 + $664;
  $666 = $591 * $660;
  $667 = $666 - $652;
  $668 = $667 + -9.2116814099999996E-10;
  $669 = (+Math_abs((+$666)));
  $670 = (+Math_abs((+$652)));
  $671 = $669 + $670;
  $672 = $671 + 9.2116814099999996E-10;
  $673 = $665 + $672;
  $674 = $591 * $668;
  $675 = $674 - $660;
  $676 = $675 + 5.3728087760000004E-9;
  $677 = (+Math_abs((+$674)));
  $678 = (+Math_abs((+$660)));
  $679 = $677 + $678;
  $680 = $679 + 5.3728087760000004E-9;
  $681 = $673 + $680;
  $682 = $591 * $676;
  $683 = $682 - $668;
  $684 = $683 + -3.1353509360999999E-8;
  $685 = (+Math_abs((+$682)));
  $686 = (+Math_abs((+$668)));
  $687 = $685 + $686;
  $688 = $687 + 3.1353509360999999E-8;
  $689 = $681 + $688;
  $690 = $591 * $684;
  $691 = $690 - $676;
  $692 = $691 + 1.8312839465400001E-7;
  $693 = (+Math_abs((+$690)));
  $694 = (+Math_abs((+$676)));
  $695 = $693 + $694;
  $696 = $695 + 1.8312839465400001E-7;
  $697 = $689 + $696;
  $698 = $591 * $692;
  $699 = $698 - $684;
  $700 = $699 + -1.0712639085060001E-6;
  $701 = (+Math_abs((+$698)));
  $702 = (+Math_abs((+$684)));
  $703 = $701 + $702;
  $704 = $703 + 1.0712639085060001E-6;
  $705 = $697 + $704;
  $706 = $591 * $700;
  $707 = $706 - $692;
  $708 = $707 + 6.2837936548539997E-6;
  $709 = (+Math_abs((+$706)));
  $710 = (+Math_abs((+$692)));
  $711 = $709 + $710;
  $712 = $711 + 6.2837936548539997E-6;
  $713 = $705 + $712;
  $714 = $591 * $708;
  $715 = $714 - $700;
  $716 = $715 + -3.7040238178456E-5;
  $717 = (+Math_abs((+$714)));
  $718 = (+Math_abs((+$700)));
  $719 = $717 + $718;
  $720 = $719 + 3.7040238178456E-5;
  $721 = $713 + $720;
  $722 = $591 * $716;
  $723 = $722 - $708;
  $724 = $723 + 2.20313287069308E-4;
  $725 = (+Math_abs((+$722)));
  $726 = (+Math_abs((+$708)));
  $727 = $725 + $726;
  $728 = $727 + 2.20313287069308E-4;
  $729 = $721 + $728;
  $730 = $591 * $724;
  $731 = $730 - $716;
  $732 = $731 + -0.001333232857994342;
  $733 = (+Math_abs((+$730)));
  $734 = (+Math_abs((+$716)));
  $735 = $733 + $734;
  $736 = $735 + 0.001333232857994342;
  $737 = $729 + $736;
  $738 = $591 * $732;
  $739 = $738 - $724;
  $740 = $739 + 0.008357821225914313;
  $741 = (+Math_abs((+$738)));
  $742 = (+Math_abs((+$724)));
  $743 = $741 + $742;
  $744 = $743 + 0.008357821225914313;
  $745 = $737 + $744;
  $746 = $591 * $740;
  $747 = $746 - $732;
  $748 = $747 + -0.056815747821244732;
  $749 = (+Math_abs((+$746)));
  $750 = (+Math_abs((+$732)));
  $751 = $749 + $750;
  $752 = $751 + 0.056815747821244732;
  $753 = $745 + $752;
  $754 = $591 * $748;
  $755 = $754 - $740;
  $756 = $755 + 0.49141539302938714;
  $757 = (+Math_abs((+$754)));
  $758 = (+Math_abs((+$740)));
  $759 = $757 + $758;
  $760 = $759 + 0.49141539302938714;
  $761 = $753 + $760;
  $762 = $590 * $756;
  $763 = $762 - $748;
  $764 = $763 + -0.019028540417608961;
  $765 = (+Math_abs((+$762)));
  $766 = (+Math_abs((+$748)));
  $767 = $766 + $765;
  $768 = $767 + 0.019028540417608961;
  $769 = $761 + $768;
  $770 = $769 * 2.2204460492503131E-16;
  $771 = $770 + 2.0000000000000001E-17;
  $772 = $764 - $584;
  HEAPF64[$1>>3] = $772;
  $773 = $584 * 2.2204460492503131E-16;
  $774 = ((($1)) + 8|0);
  $775 = $773 + $771;
  $776 = (+Math_abs((+$772)));
  $777 = $776 * 2.2204460492503131E-16;
  $778 = $777 + $775;
  HEAPF64[$774>>3] = $778;
  $$3$i = 0;
  return ($$3$i|0);
 } else {
  $779 = $0 + -1.0;
  $780 = $779 * 2.0;
  $781 = $780 + -1.0;
  $782 = $781 * 2.0;
  $783 = $782 + 1.0;
  $784 = $783 + -1.0;
  $785 = $784 * 0.5;
  $786 = $785 * 2.0;
  $787 = $786 * 0.0;
  $788 = $787 + -2.0000000000000001E-17;
  $789 = (+Math_abs((+$787)));
  $790 = $789 + 2.0000000000000001E-17;
  $791 = $790 + 0.0;
  $792 = $786 * $788;
  $793 = $792 + 1.1799999999999999E-16;
  $794 = (+Math_abs((+$792)));
  $795 = $794 + 1.1799999999999999E-16;
  $796 = $791 + $795;
  $797 = $786 * $793;
  $798 = $797 - $788;
  $799 = $798 + -6.9099999999999999E-16;
  $800 = (+Math_abs((+$797)));
  $801 = (+Math_abs((+$788)));
  $802 = $800 + $801;
  $803 = $802 + 6.9099999999999999E-16;
  $804 = $796 + $803;
  $805 = $786 * $799;
  $806 = $805 - $793;
  $807 = $806 + 4.0270000000000002E-15;
  $808 = (+Math_abs((+$805)));
  $809 = (+Math_abs((+$793)));
  $810 = $808 + $809;
  $811 = $810 + 4.0270000000000002E-15;
  $812 = $804 + $811;
  $813 = $786 * $807;
  $814 = $813 - $799;
  $815 = $814 + -2.3474999999999999E-14;
  $816 = (+Math_abs((+$813)));
  $817 = (+Math_abs((+$799)));
  $818 = $816 + $817;
  $819 = $818 + 2.3474999999999999E-14;
  $820 = $812 + $819;
  $821 = $786 * $815;
  $822 = $821 - $807;
  $823 = $822 + 1.3682699999999999E-13;
  $824 = (+Math_abs((+$821)));
  $825 = (+Math_abs((+$807)));
  $826 = $824 + $825;
  $827 = $826 + 1.3682699999999999E-13;
  $828 = $820 + $827;
  $829 = $786 * $823;
  $830 = $829 - $815;
  $831 = $830 + -7.9752700000000002E-13;
  $832 = (+Math_abs((+$829)));
  $833 = (+Math_abs((+$815)));
  $834 = $832 + $833;
  $835 = $834 + 7.9752700000000002E-13;
  $836 = $828 + $835;
  $837 = $786 * $831;
  $838 = $837 - $823;
  $839 = $838 + 4.6487220000000004E-12;
  $840 = (+Math_abs((+$837)));
  $841 = (+Math_abs((+$823)));
  $842 = $840 + $841;
  $843 = $842 + 4.6487220000000004E-12;
  $844 = $836 + $843;
  $845 = $786 * $839;
  $846 = $845 - $831;
  $847 = $846 + -2.7098645999999999E-11;
  $848 = (+Math_abs((+$845)));
  $849 = (+Math_abs((+$831)));
  $850 = $848 + $849;
  $851 = $850 + 2.7098645999999999E-11;
  $852 = $844 + $851;
  $853 = $786 * $847;
  $854 = $853 - $839;
  $855 = $854 + 1.5798126500000001E-10;
  $856 = (+Math_abs((+$853)));
  $857 = (+Math_abs((+$839)));
  $858 = $856 + $857;
  $859 = $858 + 1.5798126500000001E-10;
  $860 = $852 + $859;
  $861 = $786 * $855;
  $862 = $861 - $847;
  $863 = $862 + -9.2116814099999996E-10;
  $864 = (+Math_abs((+$861)));
  $865 = (+Math_abs((+$847)));
  $866 = $864 + $865;
  $867 = $866 + 9.2116814099999996E-10;
  $868 = $860 + $867;
  $869 = $786 * $863;
  $870 = $869 - $855;
  $871 = $870 + 5.3728087760000004E-9;
  $872 = (+Math_abs((+$869)));
  $873 = (+Math_abs((+$855)));
  $874 = $872 + $873;
  $875 = $874 + 5.3728087760000004E-9;
  $876 = $868 + $875;
  $877 = $786 * $871;
  $878 = $877 - $863;
  $879 = $878 + -3.1353509360999999E-8;
  $880 = (+Math_abs((+$877)));
  $881 = (+Math_abs((+$863)));
  $882 = $880 + $881;
  $883 = $882 + 3.1353509360999999E-8;
  $884 = $876 + $883;
  $885 = $786 * $879;
  $886 = $885 - $871;
  $887 = $886 + 1.8312839465400001E-7;
  $888 = (+Math_abs((+$885)));
  $889 = (+Math_abs((+$871)));
  $890 = $888 + $889;
  $891 = $890 + 1.8312839465400001E-7;
  $892 = $884 + $891;
  $893 = $786 * $887;
  $894 = $893 - $879;
  $895 = $894 + -1.0712639085060001E-6;
  $896 = (+Math_abs((+$893)));
  $897 = (+Math_abs((+$879)));
  $898 = $896 + $897;
  $899 = $898 + 1.0712639085060001E-6;
  $900 = $892 + $899;
  $901 = $786 * $895;
  $902 = $901 - $887;
  $903 = $902 + 6.2837936548539997E-6;
  $904 = (+Math_abs((+$901)));
  $905 = (+Math_abs((+$887)));
  $906 = $904 + $905;
  $907 = $906 + 6.2837936548539997E-6;
  $908 = $900 + $907;
  $909 = $786 * $903;
  $910 = $909 - $895;
  $911 = $910 + -3.7040238178456E-5;
  $912 = (+Math_abs((+$909)));
  $913 = (+Math_abs((+$895)));
  $914 = $912 + $913;
  $915 = $914 + 3.7040238178456E-5;
  $916 = $908 + $915;
  $917 = $786 * $911;
  $918 = $917 - $903;
  $919 = $918 + 2.20313287069308E-4;
  $920 = (+Math_abs((+$917)));
  $921 = (+Math_abs((+$903)));
  $922 = $920 + $921;
  $923 = $922 + 2.20313287069308E-4;
  $924 = $916 + $923;
  $925 = $786 * $919;
  $926 = $925 - $911;
  $927 = $926 + -0.001333232857994342;
  $928 = (+Math_abs((+$925)));
  $929 = (+Math_abs((+$911)));
  $930 = $928 + $929;
  $931 = $930 + 0.001333232857994342;
  $932 = $924 + $931;
  $933 = $786 * $927;
  $934 = $933 - $919;
  $935 = $934 + 0.008357821225914313;
  $936 = (+Math_abs((+$933)));
  $937 = (+Math_abs((+$919)));
  $938 = $936 + $937;
  $939 = $938 + 0.008357821225914313;
  $940 = $932 + $939;
  $941 = $786 * $935;
  $942 = $941 - $927;
  $943 = $942 + -0.056815747821244732;
  $944 = (+Math_abs((+$941)));
  $945 = (+Math_abs((+$927)));
  $946 = $944 + $945;
  $947 = $946 + 0.056815747821244732;
  $948 = $940 + $947;
  $949 = $786 * $943;
  $950 = $949 - $935;
  $951 = $950 + 0.49141539302938714;
  $952 = (+Math_abs((+$949)));
  $953 = (+Math_abs((+$935)));
  $954 = $952 + $953;
  $955 = $954 + 0.49141539302938714;
  $956 = $948 + $955;
  $957 = $785 * $951;
  $958 = $957 - $943;
  $959 = $958 + -0.019028540417608961;
  $960 = (+Math_abs((+$957)));
  $961 = (+Math_abs((+$943)));
  $962 = $961 + $960;
  $963 = $962 + 0.019028540417608961;
  $964 = $956 + $963;
  HEAPF64[$1>>3] = $959;
  $965 = $964 * 2.2204460492503131E-16;
  $966 = $965 + 2.0000000000000001E-17;
  $967 = ((($1)) + 8|0);
  HEAPF64[$967>>3] = $966;
  $$3$i = 0;
  return ($$3$i|0);
 }
 return (0)|0;
}
function _gsl_sf_psi_1_int_e($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)<(1);
 if ($2) {
  HEAPF64[$1>>3] = nan;
  $3 = ((($1)) + 8|0);
  HEAPF64[$3>>3] = nan;
  _gsl_error(82896,82890,699,1);
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ($0|0)<(101);
 if ($4) {
  $5 = (36464 + ($0<<3)|0);
  $6 = +HEAPF64[$5>>3];
  HEAPF64[$1>>3] = $6;
  $7 = $6 * 2.2204460492503131E-16;
  $8 = ((($1)) + 8|0);
  HEAPF64[$8>>3] = $7;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = (+($0|0));
  $10 = 1.0 / $9;
  $11 = $10 * $10;
  $12 = $11 * $11;
  $13 = $11 * 0.033333333333333333;
  $14 = 0.023809523809523808 - $13;
  $15 = $11 * $14;
  $16 = $15 + -0.033333333333333333;
  $17 = $12 * $16;
  $18 = 0.5 / $9;
  $19 = $18 + 1.0;
  $20 = $9 * 6.0;
  $21 = $20 * $9;
  $22 = 1.0 / $21;
  $23 = $19 + $22;
  $24 = $23 + $17;
  $25 = $24 / $9;
  HEAPF64[$1>>3] = $25;
  $26 = $25 * 2.2204460492503131E-16;
  $27 = ((($1)) + 8|0);
  HEAPF64[$27>>3] = $26;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_sf_psi_1_e($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$$i = 0, $$$i59 = 0, $$$i60 = 0, $$057$lcssa = 0.0, $$05762 = 0.0, $$05861 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp + 96|0;
 $3 = sp + 80|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = $0 == 0.0;
 $10 = $0 == -1.0;
 $or$cond = $9 | $10;
 $11 = $0 == -2.0;
 $or$cond3 = $11 | $or$cond;
 if ($or$cond3) {
  HEAPF64[$1>>3] = nan;
  $12 = ((($1)) + 8|0);
  HEAPF64[$12>>3] = nan;
  _gsl_error(82896,82890,727,1);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $13 = $0 > 0.0;
 if ($13) {
  $14 = (_gsl_sf_hzeta_e(2.0,$0,$7)|0);
  $15 = (_gsl_sf_lnfact_e(1,$6)|0);
  $16 = +HEAPF64[$6>>3];
  $17 = ((($6)) + 8|0);
  $18 = +HEAPF64[$17>>3];
  $19 = +HEAPF64[$7>>3];
  $20 = ((($7)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (_gsl_sf_exp_mult_err_e($16,$18,$19,$21,$1)|0);
  $23 = ($22|0)==(0);
  $24 = ($15|0)==(0);
  $$$i = $24 ? $14 : $15;
  $25 = $23 ? $$$i : $22;
  $$1 = $25;
  STACKTOP = sp;return ($$1|0);
 }
 $26 = $0 > -5.0;
 if (!($26)) {
  $60 = $0 * 3.1415926535897931;
  $61 = (+Math_sin((+$60)));
  $62 = $61 * $61;
  $63 = 9.869604401089358 / $62;
  $64 = 1.0 - $0;
  $65 = (_gsl_sf_hzeta_e(2.0,$64,$3)|0);
  $66 = (_gsl_sf_lnfact_e(1,$2)|0);
  $67 = +HEAPF64[$2>>3];
  $68 = ((($2)) + 8|0);
  $69 = +HEAPF64[$68>>3];
  $70 = +HEAPF64[$3>>3];
  $71 = ((($3)) + 8|0);
  $72 = +HEAPF64[$71>>3];
  $73 = (_gsl_sf_exp_mult_err_e($67,$69,$70,$72,$8)|0);
  $74 = ($73|0)==(0);
  $75 = ($66|0)==(0);
  $$$i60 = $75 ? $65 : $66;
  $76 = $74 ? $$$i60 : $73;
  $77 = +HEAPF64[$8>>3];
  $78 = $63 - $77;
  HEAPF64[$1>>3] = $78;
  $79 = ((($8)) + 8|0);
  $80 = +HEAPF64[$79>>3];
  $81 = $63 * 4.4408920985006262E-16;
  $82 = $81 + $80;
  $83 = ((($1)) + 8|0);
  HEAPF64[$83>>3] = $82;
  $$1 = $76;
  STACKTOP = sp;return ($$1|0);
 }
 $27 = (+Math_floor((+$0)));
 $28 = - $27;
 $29 = (~~(($28)));
 $30 = (+($29|0));
 $31 = $30 + $0;
 $32 = $31 == 0.0;
 if ($32) {
  HEAPF64[$1>>3] = nan;
  $33 = ((($1)) + 8|0);
  HEAPF64[$33>>3] = nan;
  _gsl_error(82896,82890,742,1);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $34 = ($29|0)>(0);
 if ($34) {
  $$05762 = 0.0;$$05861 = 0;
  while(1) {
   $35 = (+($$05861|0));
   $36 = $35 + $0;
   $37 = $36 * $36;
   $38 = 1.0 / $37;
   $39 = $$05762 + $38;
   $40 = (($$05861) + 1)|0;
   $exitcond = ($40|0)==($29|0);
   if ($exitcond) {
    $$057$lcssa = $39;
    break;
   } else {
    $$05762 = $39;$$05861 = $40;
   }
  }
 } else {
  $$057$lcssa = 0.0;
 }
 $41 = (_gsl_sf_hzeta_e(2.0,$31,$5)|0);
 $42 = (_gsl_sf_lnfact_e(1,$4)|0);
 $43 = +HEAPF64[$4>>3];
 $44 = ((($4)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = +HEAPF64[$5>>3];
 $47 = ((($5)) + 8|0);
 $48 = +HEAPF64[$47>>3];
 $49 = (_gsl_sf_exp_mult_err_e($43,$45,$46,$48,$1)|0);
 $50 = ($49|0)==(0);
 $51 = ($42|0)==(0);
 $$$i59 = $51 ? $41 : $42;
 $52 = $50 ? $$$i59 : $49;
 $53 = +HEAPF64[$1>>3];
 $54 = $$057$lcssa + $53;
 HEAPF64[$1>>3] = $54;
 $55 = $30 * 2.2204460492503131E-16;
 $56 = $55 * $$057$lcssa;
 $57 = ((($1)) + 8|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $56 + $58;
 HEAPF64[$57>>3] = $59;
 $$1 = $52;
 STACKTOP = sp;return ($$1|0);
}
function _gsl_sf_psi_n_e($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp;
 switch ($0|0) {
 case 0:  {
  $5 = (_gsl_sf_psi_e($1,$2)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $6 = (_gsl_sf_psi_1_e($1,$2)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $7 = ($0|0)<(0);
  $8 = $1 <= 0.0;
  $or$cond = $7 | $8;
  if ($or$cond) {
   HEAPF64[$2>>3] = nan;
   $9 = ((($2)) + 8|0);
   HEAPF64[$9>>3] = nan;
   _gsl_error(82896,82890,781,1);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $10 = (+($0|0));
  $11 = $10 + 1.0;
  $12 = (_gsl_sf_hzeta_e($11,$1,$4)|0);
  $13 = (_gsl_sf_lnfact_e($0,$3)|0);
  $14 = +HEAPF64[$3>>3];
  $15 = ((($3)) + 8|0);
  $16 = +HEAPF64[$15>>3];
  $17 = +HEAPF64[$4>>3];
  $18 = ((($4)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = (_gsl_sf_exp_mult_err_e($14,$16,$17,$19,$2)|0);
  $21 = $0 & 1;
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = +HEAPF64[$2>>3];
   $24 = - $23;
   HEAPF64[$2>>3] = $24;
  }
  $25 = ($20|0)==(0);
  $26 = ($13|0)==(0);
  $$ = $26 ? $12 : $13;
  $27 = $25 ? $$ : $20;
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _gsl_sf_hzeta_e($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0111122 = 0.0, $$0113121 = 0.0, $$0117120 = 0, $$1 = 0, $$1110123 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 <= 1.0;
 $4 = $1 <= 0.0;
 $or$cond = $3 | $4;
 if ($or$cond) {
  HEAPF64[$2>>3] = nan;
  $5 = ((($2)) + 8|0);
  HEAPF64[$5>>3] = nan;
  _gsl_error(82896,82909,719,1);
  $$1 = 1;
  return ($$1|0);
 }
 $6 = - $0;
 $7 = (+Math_log((+$1)));
 $8 = $7 * $6;
 $9 = $8 < -707.39641853226408;
 if ($9) {
  HEAPF64[$2>>3] = 0.0;
  $10 = ((($2)) + 8|0);
  HEAPF64[$10>>3] = 2.2250738585072014E-308;
  _gsl_error(82916,82909,726,15);
  $$1 = 15;
  return ($$1|0);
 }
 $11 = $8 > 708.78271289338397;
 if ($11) {
  HEAPF64[$2>>3] = inf;
  $12 = ((($2)) + 8|0);
  HEAPF64[$12>>3] = inf;
  _gsl_error(82926,82909,729,16);
  $$1 = 16;
  return ($$1|0);
 }
 $13 = $0 > 54.0;
 $14 = $1 < 1.0;
 $or$cond3 = $13 & $14;
 if (!($or$cond3)) {
  $15 = $0 > 27.0;
  $16 = $1 < 0.25;
  $or$cond5 = $15 & $16;
  if (!($or$cond5)) {
   $or$cond7 = $15 & $14;
   if ($or$cond7) {
    $21 = (+Math_pow((+$1),(+$6)));
    $22 = $1 + 1.0;
    $23 = $1 / $22;
    $24 = (+Math_pow((+$23),(+$0)));
    $25 = $1 + 2.0;
    $26 = $1 / $25;
    $27 = (+Math_pow((+$26),(+$0)));
    $28 = $24 + 1.0;
    $29 = $27 + $28;
    $30 = $21 * $29;
    HEAPF64[$2>>3] = $30;
    $31 = $0 * 0.5;
    $32 = $31 + 2.0;
    $33 = $32 * 2.2204460492503131E-16;
    $34 = (+Math_abs((+$30)));
    $35 = $33 * $34;
    $36 = ((($2)) + 8|0);
    HEAPF64[$36>>3] = $35;
    $$1 = 0;
    return ($$1|0);
   }
   $37 = $1 + 10.0;
   $38 = (+Math_pow((+$37),(+$6)));
   $39 = $0 + -1.0;
   $40 = $37 / $39;
   $41 = $40 + 0.5;
   $42 = $38 * $41;
   $43 = $1 + 0.0;
   $44 = (+Math_pow((+$43),(+$6)));
   $45 = $42 + $44;
   $46 = $1 + 1.0;
   $47 = (+Math_pow((+$46),(+$6)));
   $48 = $45 + $47;
   $49 = $1 + 2.0;
   $50 = (+Math_pow((+$49),(+$6)));
   $51 = $48 + $50;
   $52 = $1 + 3.0;
   $53 = (+Math_pow((+$52),(+$6)));
   $54 = $51 + $53;
   $55 = $1 + 4.0;
   $56 = (+Math_pow((+$55),(+$6)));
   $57 = $54 + $56;
   $58 = $1 + 5.0;
   $59 = (+Math_pow((+$58),(+$6)));
   $60 = $57 + $59;
   $61 = $1 + 6.0;
   $62 = (+Math_pow((+$61),(+$6)));
   $63 = $60 + $62;
   $64 = $1 + 7.0;
   $65 = (+Math_pow((+$64),(+$6)));
   $66 = $63 + $65;
   $67 = $1 + 8.0;
   $68 = (+Math_pow((+$67),(+$6)));
   $69 = $66 + $68;
   $70 = $1 + 9.0;
   $71 = (+Math_pow((+$70),(+$6)));
   $72 = $69 + $71;
   $73 = $38 / $37;
   $74 = $37 * $37;
   $$0111122 = $73;$$0113121 = $0;$$0117120 = 0;$$1110123 = $72;
   while(1) {
    $75 = (($$0117120) + 1)|0;
    $76 = (37280 + ($75<<3)|0);
    $77 = +HEAPF64[$76>>3];
    $78 = $$0113121 * $77;
    $79 = $$0111122 * $78;
    $80 = $$1110123 + $79;
    $81 = $79 / $80;
    $82 = (+Math_abs((+$81)));
    $83 = $82 < 1.1102230246251565E-16;
    if ($83) {
     break;
    }
    $84 = $$0117120 << 1;
    $85 = (+($84|0));
    $86 = $85 + $0;
    $87 = $86 + 1.0;
    $88 = $86 + 2.0;
    $89 = $87 * $88;
    $90 = $$0113121 * $89;
    $91 = $$0111122 / $74;
    $92 = ($75>>>0)<(13);
    if ($92) {
     $$0111122 = $91;$$0113121 = $90;$$0117120 = $75;$$1110123 = $80;
    } else {
     break;
    }
   }
   HEAPF64[$2>>3] = $80;
   $93 = (+Math_abs((+$80)));
   $94 = $93 * 5.773159728050814E-15;
   $95 = ((($2)) + 8|0);
   HEAPF64[$95>>3] = $94;
   $$1 = 0;
   return ($$1|0);
  }
 }
 $17 = (+Math_pow((+$1),(+$6)));
 HEAPF64[$2>>3] = $17;
 $18 = (+Math_abs((+$17)));
 $19 = $18 * 4.4408920985006262E-16;
 $20 = ((($2)) + 8|0);
 HEAPF64[$20>>3] = $19;
 $$1 = 0;
 return ($$1|0);
}
function _gsl_coerce_double($0) {
 $0 = +$0;
 var $$0$$0$ = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAPF64[$1>>3] = $0;
 $$0$$0$ = +HEAPF64[$1>>3];
 STACKTOP = sp;return (+$$0$$0$);
}
function _gsl_finite($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2146435072;
 $4 = (0)!=(0);
 $5 = ($3|0)!=(2146435072);
 $6 = $4 | $5;
 $7 = $6&1;
 return ($7|0);
}
function _gsl_pow_2($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * $0;
 return (+$1);
}
function _gsl_pow_4($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * $0;
 $2 = $1 * $1;
 return (+$2);
}
function _gsl_pow_uint($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$08 = 0, $$09 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 1.0;$$08 = $1;$$09 = $0;
 while(1) {
  $2 = $$08 & 1;
  $3 = ($2|0)==(0);
  $4 = $$09 * $$0;
  $spec$select = $3 ? $$0 : $4;
  $5 = $$08 >>> 1;
  $6 = $$09 * $$09;
  $7 = ($5|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $spec$select;$$08 = $5;$$09 = $6;
  }
 }
 return (+$spec$select);
}
function _gsl_vector_memcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_gsl_blas_dcopy($1,$0)|0);
 return 0;
}
function _gsl_vector_alloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(20)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _gsl_error(82935,82978,31,8);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_gsl_block_alloc($0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _free($1);
  _gsl_error(82994,82978,41,8);
  $$0 = 0;
  return ($$0|0);
 } else {
  $5 = ((($3)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 8|0);
  HEAP32[$7>>2] = $6;
  HEAP32[$1>>2] = $0;
  $8 = ((($1)) + 4|0);
  HEAP32[$8>>2] = 1;
  $9 = ((($1)) + 12|0);
  HEAP32[$9>>2] = $3;
  $10 = ((($1)) + 16|0);
  HEAP32[$10>>2] = 1;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _gsl_vector_calloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(20)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _gsl_error(82935,82978,31,8);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_gsl_block_alloc($0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _free($1);
  _gsl_error(82994,82978,41,8);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 8|0);
 HEAP32[$7>>2] = $6;
 HEAP32[$1>>2] = $0;
 $8 = ((($1)) + 4|0);
 HEAP32[$8>>2] = 1;
 $9 = ((($1)) + 12|0);
 HEAP32[$9>>2] = $3;
 $10 = ((($1)) + 16|0);
 HEAP32[$10>>2] = 1;
 $11 = $6;
 $12 = $0 << 3;
 _memset(($11|0),0,($12|0))|0;
 $13 = ($0|0)==(0);
 if ($13) {
  $$0 = $1;
  return ($$0|0);
 }
 $14 = HEAP32[$7>>2]|0;
 _memset(($14|0),0,($12|0))|0;
 $$0 = $1;
 return ($$0|0);
}
function _gsl_vector_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  _gsl_block_free($6);
 }
 _free($0);
 return;
}
function _gsl_vector_set_zero($0) {
 $0 = $0|0;
 var $$017 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==(0);
 if ($6) {
  return;
 }
 $$017 = 0;
 while(1) {
  $7 = Math_imul($$017, $5)|0;
  $8 = (($2) + ($7<<3)|0);
  HEAPF64[$8>>3] = 0.0;
  $9 = (($$017) + 1)|0;
  $exitcond = ($9|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$017 = $9;
  }
 }
 return;
}
function _gsl_vector_minmax($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$1 = 0.0, $$$139 = 0.0, $$03644 = 0.0, $$03743 = 0, $$03842 = 0.0, $$3 = 0.0, $$341 = 0.0, $$not = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF64[$7>>3];
 $9 = ($3|0)==(0);
 if ($9) {
  $$3 = $8;$$341 = $8;
  HEAPF64[$1>>3] = $$341;
  HEAPF64[$2>>3] = $$3;
  return;
 }
 $$03644 = $8;$$03743 = 0;$$03842 = $8;
 while(1) {
  $10 = Math_imul($$03743, $5)|0;
  $11 = (($7) + ($10<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $12 < $$03842;
  $14 = $12 > $$03644;
  HEAPF64[tempDoublePtr>>3] = $12;$15 = HEAP32[tempDoublePtr>>2]|0;
  $16 = HEAP32[tempDoublePtr+4>>2]|0;
  $17 = $16 & 2147483647;
  $18 = ($17>>>0)>(2146435072);
  $19 = ($15>>>0)>(0);
  $20 = ($17|0)==(2146435072);
  $21 = $20 & $19;
  $22 = $18 | $21;
  $23 = $13 | $22;
  $$$139 = $23 ? $12 : $$03842;
  $24 = $14 | $22;
  $$$1 = $24 ? $12 : $$03644;
  $25 = (($$03743) + 1)|0;
  $$not = $22 ^ 1;
  $26 = ($25>>>0)<($3>>>0);
  $or$cond = $26 & $$not;
  if ($or$cond) {
   $$03644 = $$$1;$$03743 = $25;$$03842 = $$$139;
  } else {
   $$3 = $$$1;$$341 = $$$139;
   break;
  }
 }
 HEAPF64[$1>>3] = $$341;
 HEAPF64[$2>>3] = $$3;
 return;
}
function _gsl_vector_mul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021 = 0, $$022 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==($2|0);
 if (!($4)) {
  _gsl_error(83029,83059,77,19);
  $$021 = 19;
  return ($$021|0);
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($2|0)==(0);
 if ($9) {
  $$021 = 0;
  return ($$021|0);
 }
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $$022 = 0;
 while(1) {
  $14 = Math_imul($$022, $8)|0;
  $15 = (($11) + ($14<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = Math_imul($$022, $6)|0;
  $18 = (($13) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $16 * $19;
  HEAPF64[$18>>3] = $20;
  $21 = (($$022) + 1)|0;
  $exitcond = ($21|0)==($2|0);
  if ($exitcond) {
   $$021 = 0;
   break;
  } else {
   $$022 = $21;
  }
 }
 return ($$021|0);
}
function _gsl_vector_scale($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _gsl_blas_dscal($1,$0);
 return 0;
}
function _gsl_vector_subvector($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink41 = 0, $$sink42 = 0, $$sroa$824$0$$sroa_idx25 = 0, $$sroa$824$0$$sroa_idx26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 $5 = (($3) + -1)|0;
 $6 = $4 ? 0 : $5;
 $7 = (($6) + ($2))|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ($7>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = Math_imul($13, $2)|0;
  $15 = (($11) + ($14<<3)|0);
  $16 = ((($1)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $$sroa$824$0$$sroa_idx26 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx26>>2] = $17;
  $$sink = $15;$$sink41 = $13;$$sink42 = $3;
 } else {
  _gsl_error(83075,83112,28,4);
  $$sroa$824$0$$sroa_idx25 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx25>>2] = 0;
  $$sink = 0;$$sink41 = 0;$$sink42 = 0;
 }
 HEAP32[$0>>2] = $$sink42;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = $$sink41;
 $19 = ((($0)) + 8|0);
 HEAP32[$19>>2] = $$sink;
 $20 = ((($0)) + 16|0);
 HEAP32[$20>>2] = 0;
 return;
}
function _gsl_vector_const_subvector($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink41 = 0, $$sink42 = 0, $$sroa$824$0$$sroa_idx25 = 0, $$sroa$824$0$$sroa_idx26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 $5 = (($3) + -1)|0;
 $6 = $4 ? 0 : $5;
 $7 = (($6) + ($2))|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ($7>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = Math_imul($13, $2)|0;
  $15 = (($11) + ($14<<3)|0);
  $16 = ((($1)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $$sroa$824$0$$sroa_idx26 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx26>>2] = $17;
  $$sink = $15;$$sink41 = $13;$$sink42 = $3;
 } else {
  _gsl_error(83075,83112,28,4);
  $$sroa$824$0$$sroa_idx25 = ((($0)) + 12|0);
  HEAP32[$$sroa$824$0$$sroa_idx25>>2] = 0;
  $$sink = 0;$$sink41 = 0;$$sink42 = 0;
 }
 HEAP32[$0>>2] = $$sink42;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = $$sink41;
 $19 = ((($0)) + 8|0);
 HEAP32[$19>>2] = $$sink;
 $20 = ((($0)) + 16|0);
 HEAP32[$20>>2] = 0;
 return;
}
function _gsl_vector_swap_elements($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($1>>>0);
 if (!($8)) {
  _gsl_error(83149,83133,57,4);
  $$0 = 4;
  return ($$0|0);
 }
 $9 = ($5>>>0)>($2>>>0);
 if (!($9)) {
  _gsl_error(83177,83133,62,4);
  $$0 = 4;
  return ($$0|0);
 }
 $10 = ($1|0)==($2|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = Math_imul($7, $2)|0;
 $12 = Math_imul($7, $1)|0;
 $13 = (($4) + ($11<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (($4) + ($12<<3)|0);
 $16 = +HEAPF64[$15>>3];
 HEAPF64[$13>>3] = $16;
 HEAPF64[$15>>3] = $14;
 $$0 = 0;
 return ($$0|0);
}
function _gsl_vector_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (1)==(0);
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3>>>0)>($1>>>0);
  if (!($4)) {
   _gsl_error(83206,83225,181,4);
   $$0 = 0.0;
   return (+$$0);
  }
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($8, $1)|0;
 $10 = (($6) + ($9<<3)|0);
 $11 = +HEAPF64[$10>>3];
 $$0 = $11;
 return (+$$0);
}
function _gsl_vector_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (1)==(0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4>>>0)>($1>>>0);
  if (!($5)) {
   _gsl_error(83206,83225,194,4);
   return;
  }
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($9, $1)|0;
 $11 = (($7) + ($10<<3)|0);
 HEAPF64[$11>>3] = $2;
 return;
}
function _gsl_cdf_ugaussian_Pinv($0) {
 $0 = +$0;
 var $$0 = 0.0, $$sink = 0.0, $$sink27 = 0.0, $$sink31 = 0.0, $$sink35 = 0.0, $$sink39 = 0.0, $$sink43 = 0.0, $$sink44 = 0.0, $$sink46 = 0.0, $$sink47 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
 var $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -0.5;
 $2 = $0 == 1.0;
 if ($2) {
  $$0 = inf;
  return (+$$0);
 }
 $3 = $0 == 0.0;
 if ($3) {
  $$0 = -inf;
  return (+$$0);
 }
 $4 = (+Math_abs((+$1)));
 $5 = !($4 <= 0.42499999999999999);
 if (!($5)) {
  $6 = $1 * $1;
  $7 = 0.18062500000000001 - $6;
  $8 = $7 * 2509.0809287301227;
  $9 = $8 + 33430.575583588128;
  $10 = $7 * $9;
  $11 = $10 + 67265.770927008707;
  $12 = $7 * $11;
  $13 = $12 + 45921.95393154987;
  $14 = $7 * $13;
  $15 = $14 + 13731.693765509461;
  $16 = $7 * $15;
  $17 = $16 + 1971.5909503065513;
  $18 = $7 * $17;
  $19 = $18 + 133.14166789178438;
  $20 = $7 * $19;
  $21 = $20 + 3.3871328727963665;
  $22 = $7 * 5226.4952788528544;
  $23 = $22 + 28729.085735721943;
  $24 = $7 * $23;
  $25 = $24 + 39307.895800092709;
  $26 = $7 * $25;
  $27 = $26 + 21213.794301586597;
  $28 = $7 * $27;
  $29 = $28 + 5394.1960214247511;
  $30 = $7 * $29;
  $31 = $30 + 687.18700749205789;
  $32 = $7 * $31;
  $33 = $32 + 42.313330701600911;
  $34 = $7 * $33;
  $35 = $34 + 1.0;
  $36 = $21 / $35;
  $37 = $1 * $36;
  $$0 = $37;
  return (+$$0);
 }
 $38 = $0 < 0.5;
 $39 = 1.0 - $0;
 $40 = $38 ? $0 : $39;
 $41 = (+Math_log((+$40)));
 $42 = - $41;
 $43 = (+Math_sqrt((+$42)));
 $44 = !($43 <= 5.0);
 if ($44) {
  $61 = $43 + -5.0;
  $62 = $61 * 2.0103343992922881E-7;
  $63 = $62 + 2.7115555687434876E-5;
  $64 = $61 * $63;
  $65 = $64 + 0.0012426609473880784;
  $66 = $61 * $65;
  $67 = $66 + 0.026532189526576124;
  $68 = $61 * $67;
  $69 = $68 + 0.29656057182850487;
  $70 = $61 * $69;
  $71 = $70 + 1.7848265399172913;
  $72 = $61 * $71;
  $73 = $72 + 5.4637849111641144;
  $74 = $61 * $73;
  $75 = $74 + 6.6579046435011033;
  $76 = $61 * 2.0442631033899397E-15;
  $$sink = $75;$$sink27 = 0.59983220655588798;$$sink31 = 0.13692988092273581;$$sink35 = 0.014875361290850615;$$sink39 = 7.8686913114561329E-4;$$sink43 = 1.8463183175100548E-5;$$sink44 = $61;$$sink46 = $76;$$sink47 = 1.4215117583164459E-7;
 } else {
  $45 = $43 + -1.6000000000000001;
  $46 = $45 * 7.7454501427834139E-4;
  $47 = $46 + 0.022723844989269184;
  $48 = $45 * $47;
  $49 = $48 + 0.24178072517745061;
  $50 = $45 * $49;
  $51 = $50 + 1.2704582524523684;
  $52 = $45 * $51;
  $53 = $52 + 3.6478483247632045;
  $54 = $45 * $53;
  $55 = $54 + 5.769497221460691;
  $56 = $45 * $55;
  $57 = $56 + 4.6303378461565456;
  $58 = $45 * $57;
  $59 = $58 + 1.4234371107496835;
  $60 = $45 * 1.0507500716444169E-9;
  $$sink = $59;$$sink27 = 2.053191626637759;$$sink31 = 1.6763848301838038;$$sink35 = 0.68976733498510001;$$sink39 = 0.14810397642748008;$$sink43 = 0.015198666563616457;$$sink44 = $45;$$sink46 = $60;$$sink47 = 5.4759380849953455E-4;
 }
 $77 = $$sink46 + $$sink47;
 $78 = $$sink44 * $77;
 $79 = $78 + $$sink43;
 $80 = $$sink44 * $79;
 $81 = $80 + $$sink39;
 $82 = $$sink44 * $81;
 $83 = $82 + $$sink35;
 $84 = $$sink44 * $83;
 $85 = $84 + $$sink31;
 $86 = $$sink44 * $85;
 $87 = $86 + $$sink27;
 $88 = $$sink44 * $87;
 $89 = $88 + 1.0;
 $90 = $$sink / $89;
 if (!($38)) {
  $$0 = $90;
  return (+$$0);
 }
 $91 = - $90;
 $$0 = $91;
 return (+$$0);
}
function _cblas_dasum($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01519 = 0, $$01618 = 0.0, $$017 = 0.0, $$020 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(0);
 $4 = ($0|0)>(0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  $$017 = 0.0;
  return (+$$017);
 }
 $$01519 = 0;$$01618 = 0.0;$$020 = 0;
 while(1) {
  $5 = (($1) + ($$020<<3)|0);
  $6 = +HEAPF64[$5>>3];
  $7 = (+Math_abs((+$6)));
  $8 = $$01618 + $7;
  $9 = (($$020) + ($2))|0;
  $10 = (($$01519) + 1)|0;
  $exitcond = ($10|0)==($0|0);
  if ($exitcond) {
   $$017 = $8;
   break;
  } else {
   $$01519 = $10;$$01618 = $8;$$020 = $9;
  }
 }
 return (+$$017);
}
function _cblas_daxpy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$06168 = 0, $$06265 = 0, $$069 = 0, $$164 = 0, $$267 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond73 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $1 == 0.0;
 if ($6) {
  return;
 }
 $7 = ($3|0)==(1);
 $8 = ($5|0)==(1);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  $50 = ($0|0)>(0);
  if (!($50)) {
   return;
  }
  $51 = ($5|0)>(0);
  $52 = (1 - ($0))|0;
  $53 = Math_imul($52, $5)|0;
  $54 = $51 ? 0 : $53;
  $55 = ($3|0)>(0);
  $56 = Math_imul($52, $3)|0;
  $spec$select = $55 ? 0 : $56;
  $$06168 = $spec$select;$$069 = $54;$$267 = 0;
  while(1) {
   $57 = (($2) + ($$06168<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = $58 * $1;
   $60 = (($4) + ($$069<<3)|0);
   $61 = +HEAPF64[$60>>3];
   $62 = $61 + $59;
   HEAPF64[$60>>3] = $62;
   $63 = (($$06168) + ($3))|0;
   $64 = (($$069) + ($5))|0;
   $65 = (($$267) + 1)|0;
   $exitcond73 = ($65|0)==($0|0);
   if ($exitcond73) {
    break;
   } else {
    $$06168 = $63;$$069 = $64;$$267 = $65;
   }
  }
  return;
 }
 $9 = (($0|0) % 4)&-1;
 $10 = ($9|0)>(0);
 if ($10) {
  $$06265 = 0;
  while(1) {
   $11 = (($2) + ($$06265<<3)|0);
   $12 = +HEAPF64[$11>>3];
   $13 = $12 * $1;
   $14 = (($4) + ($$06265<<3)|0);
   $15 = +HEAPF64[$14>>3];
   $16 = $15 + $13;
   HEAPF64[$14>>3] = $16;
   $17 = (($$06265) + 1)|0;
   $exitcond = ($17|0)==($9|0);
   if ($exitcond) {
    break;
   } else {
    $$06265 = $17;
   }
  }
 }
 $18 = (($9) + 3)|0;
 $19 = ($18|0)<($0|0);
 if (!($19)) {
  return;
 }
 $$164 = $9;$41 = $18;
 while(1) {
  $20 = (($2) + ($$164<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $21 * $1;
  $23 = (($4) + ($$164<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $24 + $22;
  HEAPF64[$23>>3] = $25;
  $26 = (($$164) + 1)|0;
  $27 = (($2) + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $28 * $1;
  $30 = (($4) + ($26<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $31 + $29;
  HEAPF64[$30>>3] = $32;
  $33 = (($$164) + 2)|0;
  $34 = (($2) + ($33<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $35 * $1;
  $37 = (($4) + ($33<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $38 + $36;
  HEAPF64[$37>>3] = $39;
  $40 = (($2) + ($41<<3)|0);
  $42 = +HEAPF64[$40>>3];
  $43 = $42 * $1;
  $44 = (($4) + ($41<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $45 + $43;
  HEAPF64[$44>>3] = $46;
  $47 = (($$164) + 4)|0;
  $48 = (($$164) + 7)|0;
  $49 = ($48|0)<($0|0);
  if ($49) {
   $$164 = $47;$41 = $48;
  } else {
   break;
  }
 }
 return;
}
function _cblas_dcopy($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$02124 = 0, $$02223 = 0, $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)>(0);
 if (!($5)) {
  return;
 }
 $6 = ($4|0)>(0);
 $7 = (1 - ($0))|0;
 $8 = Math_imul($7, $4)|0;
 $9 = $6 ? 0 : $8;
 $10 = ($2|0)>(0);
 $11 = Math_imul($7, $2)|0;
 $spec$select = $10 ? 0 : $11;
 $$02124 = $spec$select;$$02223 = 0;$$025 = $9;
 while(1) {
  $12 = (($1) + ($$02124<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (($3) + ($$025<<3)|0);
  HEAPF64[$14>>3] = $13;
  $15 = (($$02124) + ($2))|0;
  $16 = (($$025) + ($4))|0;
  $17 = (($$02223) + 1)|0;
  $exitcond = ($17|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $$02124 = $15;$$02223 = $17;$$025 = $16;
  }
 }
 return;
}
function _cblas_ddot($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$02530 = 0, $$02629 = 0, $$027$lcssa = 0.0, $$02728 = 0.0, $$031 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)>(0);
 if (!($5)) {
  $$027$lcssa = 0.0;
  return (+$$027$lcssa);
 }
 $6 = ($4|0)>(0);
 $7 = (1 - ($0))|0;
 $8 = Math_imul($7, $4)|0;
 $9 = $6 ? 0 : $8;
 $10 = ($2|0)>(0);
 $11 = Math_imul($7, $2)|0;
 $spec$select = $10 ? 0 : $11;
 $$02530 = $spec$select;$$02629 = 0;$$02728 = 0.0;$$031 = $9;
 while(1) {
  $12 = (($1) + ($$02530<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = (($3) + ($$031<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $13 * $15;
  $17 = $$02728 + $16;
  $18 = (($$02530) + ($2))|0;
  $19 = (($$031) + ($4))|0;
  $20 = (($$02629) + 1)|0;
  $exitcond = ($20|0)==($0|0);
  if ($exitcond) {
   $$027$lcssa = $17;
   break;
  } else {
   $$02530 = $18;$$02629 = $20;$$02728 = $17;$$031 = $19;
  }
 }
 return (+$$027$lcssa);
}
function _cblas_dgemv($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = +$9;
 $10 = $10|0;
 $11 = $11|0;
 var $$ = 0, $$0159206 = 0, $$0160202$us = 0, $$0161192$us = 0, $$0162191$us = 0.0, $$0163193 = 0, $$0163193$us = 0, $$0164209 = 0, $$0165205 = 0, $$0170190$us = 0, $$0198$us = 0, $$1171201$us = 0, $$1210 = 0, $$177 = 0, $$2168 = 0, $$2194 = 0, $$2194$us = 0, $$3197$us = 0, $$5 = 0, $$off = 0;
 var $$sink = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0, $81 = 0.0;
 var $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond217 = 0;
 var $exitcond218 = 0, $exitcond219 = 0, $exitcond220 = 0, $exitcond222 = 0, $exitcond223 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond227 = 0, $or$cond7 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select176 = 0, $spec$select178 = 0, $spec$select179 = 0, $spec$select180 = 0, $spec$select181 = 0, $spec$select182 = 0;
 var $spec$select183 = 0, $spec$select184 = 0, $spec$select185 = 0, $spec$store$select = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = ($1|0)==(113);
 $13 = $12 ? 112 : $1;
 $14 = (($0) + -101)|0;
 $15 = ($14>>>0)>(1);
 $spec$store$select = $15&1;
 $$off = (($1) + -111)|0;
 $switch = ($$off>>>0)<(3);
 $spec$select178 = $switch ? $spec$store$select : 2;
 $16 = ($2|0)<(0);
 $spec$select = $16 ? 3 : $spec$select178;
 $17 = ($3|0)<(0);
 $$2168 = $17 ? 4 : $spec$select;
 $18 = ($0|0)==(101);
 if ($18) {
  $19 = ($3|0)>(1);
  $20 = $19 ? $3 : 1;
  $21 = ($20|0)>($6|0);
  $$sink = $21;
 } else {
  $22 = ($0|0)==(102);
  $23 = ($2|0)>(1);
  $24 = $23 ? $2 : 1;
  $25 = ($24|0)>($6|0);
  $26 = $22 & $25;
  $$sink = $26;
 }
 $spec$select179 = $$sink ? 7 : $$2168;
 $27 = ($8|0)==(0);
 $spec$select176 = $27 ? 9 : $spec$select179;
 $28 = ($11|0)==(0);
 $$5 = $28 ? 12 : $spec$select176;
 $29 = ($$5|0)==(0);
 if (!($29)) {
  _cblas_xerbla($$5,83252,1292420,$vararg_buffer);
  // unreachable;
 }
 $30 = ($2|0)==(0);
 $31 = ($3|0)==(0);
 $or$cond7 = $30 | $31;
 if ($or$cond7) {
  STACKTOP = sp;return;
 }
 $32 = $4 == 0.0;
 $33 = $9 == 1.0;
 $or$cond9 = $32 & $33;
 if ($or$cond9) {
  STACKTOP = sp;return;
 }
 $34 = ($13|0)==(111);
 $$ = $34 ? $3 : $2;
 $$177 = $34 ? $2 : $3;
 $35 = $9 == 0.0;
 if ($35) {
  $36 = ($$177|0)>(0);
  if ($36) {
   $37 = ($11|0)>(0);
   $38 = (1 - ($$177))|0;
   $39 = Math_imul($38, $11)|0;
   $spec$select180 = $37 ? 0 : $39;
   $$0159206 = 0;$$0165205 = $spec$select180;
   while(1) {
    $40 = (($10) + ($$0165205<<3)|0);
    HEAPF64[$40>>3] = 0.0;
    $41 = (($$0165205) + ($11))|0;
    $42 = (($$0159206) + 1)|0;
    $exitcond222 = ($42|0)==($$177|0);
    if ($exitcond222) {
     break;
    } else {
     $$0159206 = $42;$$0165205 = $41;
    }
   }
  }
 } else {
  $43 = $9 != 1.0;
  $44 = ($$177|0)>(0);
  $or$cond227 = $43 & $44;
  if ($or$cond227) {
   $45 = ($11|0)>(0);
   $46 = (1 - ($$177))|0;
   $47 = Math_imul($46, $11)|0;
   $spec$select181 = $45 ? 0 : $47;
   $$0164209 = $spec$select181;$$1210 = 0;
   while(1) {
    $48 = (($10) + ($$0164209<<3)|0);
    $49 = +HEAPF64[$48>>3];
    $50 = $49 * $9;
    HEAPF64[$48>>3] = $50;
    $51 = (($$0164209) + ($11))|0;
    $52 = (($$1210) + 1)|0;
    $exitcond223 = ($52|0)==($$177|0);
    if ($exitcond223) {
     break;
    } else {
     $$0164209 = $51;$$1210 = $52;
    }
   }
  }
 }
 if ($32) {
  STACKTOP = sp;return;
 }
 $or$cond11 = $18 & $34;
 if (!($or$cond11)) {
  $53 = ($0|0)==(102);
  $54 = ($13|0)==(112);
  $or$cond13 = $53 & $54;
  if (!($or$cond13)) {
   $or$cond15 = $18 & $54;
   $or$cond17 = $53 & $34;
   $or$cond = $or$cond15 | $or$cond17;
   if (!($or$cond)) {
    _cblas_xerbla(0,83252,83288,$vararg_buffer1);
    // unreachable;
   }
   $85 = ($$|0)>(0);
   if (!($85)) {
    STACKTOP = sp;return;
   }
   $86 = ($11|0)>(0);
   $87 = (1 - ($$177))|0;
   $88 = Math_imul($87, $11)|0;
   $spec$select185 = $86 ? 0 : $88;
   $89 = ($$177|0)>(0);
   if (!($89)) {
    STACKTOP = sp;return;
   }
   $90 = ($8|0)>(0);
   $91 = (1 - ($$))|0;
   $92 = Math_imul($91, $8)|0;
   $spec$select184 = $90 ? 0 : $92;
   $$0160202$us = $spec$select184;$$1171201$us = 0;
   while(1) {
    $93 = (($7) + ($$0160202$us<<3)|0);
    $94 = +HEAPF64[$93>>3];
    $95 = $94 * $4;
    $96 = $95 != 0.0;
    if ($96) {
     $100 = Math_imul($$1171201$us, $6)|0;
     $$0198$us = $spec$select185;$$3197$us = 0;
     while(1) {
      $99 = (($$3197$us) + ($100))|0;
      $101 = (($5) + ($99<<3)|0);
      $102 = +HEAPF64[$101>>3];
      $103 = $95 * $102;
      $104 = (($10) + ($$0198$us<<3)|0);
      $105 = +HEAPF64[$104>>3];
      $106 = $105 + $103;
      HEAPF64[$104>>3] = $106;
      $107 = (($$0198$us) + ($11))|0;
      $108 = (($$3197$us) + 1)|0;
      $exitcond219 = ($108|0)==($$177|0);
      if ($exitcond219) {
       break;
      } else {
       $$0198$us = $107;$$3197$us = $108;
      }
     }
    }
    $97 = (($$0160202$us) + ($8))|0;
    $98 = (($$1171201$us) + 1)|0;
    $exitcond220 = ($98|0)==($$|0);
    if ($exitcond220) {
     break;
    } else {
     $$0160202$us = $97;$$1171201$us = $98;
    }
   }
   STACKTOP = sp;return;
  }
 }
 $55 = ($11|0)>(0);
 $56 = (1 - ($$177))|0;
 $57 = Math_imul($56, $11)|0;
 $spec$select182 = $55 ? 0 : $57;
 $58 = ($$177|0)>(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = ($8|0)>(0);
 $60 = (1 - ($$))|0;
 $61 = Math_imul($60, $8)|0;
 $spec$select183 = $59 ? 0 : $61;
 $62 = ($$|0)>(0);
 if (!($62)) {
  $79 = $4 * 0.0;
  $$0163193 = $spec$select182;$$2194 = 0;
  while(1) {
   $80 = (($10) + ($$0163193<<3)|0);
   $81 = +HEAPF64[$80>>3];
   $82 = $79 + $81;
   HEAPF64[$80>>3] = $82;
   $83 = (($$0163193) + ($11))|0;
   $84 = (($$2194) + 1)|0;
   $exitcond218 = ($84|0)==($$177|0);
   if ($exitcond218) {
    break;
   } else {
    $$0163193 = $83;$$2194 = $84;
   }
  }
  STACKTOP = sp;return;
 }
 $$0163193$us = $spec$select182;$$2194$us = 0;
 while(1) {
  $63 = Math_imul($$2194$us, $6)|0;
  $$0161192$us = $spec$select183;$$0162191$us = 0.0;$$0170190$us = 0;
  while(1) {
   $64 = (($7) + ($$0161192$us<<3)|0);
   $65 = +HEAPF64[$64>>3];
   $66 = (($$0170190$us) + ($63))|0;
   $67 = (($5) + ($66<<3)|0);
   $68 = +HEAPF64[$67>>3];
   $69 = $65 * $68;
   $70 = $$0162191$us + $69;
   $71 = (($$0161192$us) + ($8))|0;
   $72 = (($$0170190$us) + 1)|0;
   $exitcond = ($72|0)==($$|0);
   if ($exitcond) {
    break;
   } else {
    $$0161192$us = $71;$$0162191$us = $70;$$0170190$us = $72;
   }
  }
  $73 = $70 * $4;
  $74 = (($10) + ($$0163193$us<<3)|0);
  $75 = +HEAPF64[$74>>3];
  $76 = $73 + $75;
  HEAPF64[$74>>3] = $76;
  $77 = (($$0163193$us) + ($11))|0;
  $78 = (($$2194$us) + 1)|0;
  $exitcond217 = ($78|0)==($$177|0);
  if ($exitcond217) {
   break;
  } else {
   $$0163193$us = $77;$$2194$us = $78;
  }
 }
 STACKTOP = sp;return;
}
function _cblas_dnrm2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$04049 = 0.0, $$04148 = 0, $$04247 = 0, $$04346 = 0.0, $$2 = 0.0, $$245 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)<(1);
 $4 = ($2|0)<(1);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$0 = 0.0;
  return (+$$0);
 }
 $5 = ($0|0)==(1);
 if ($5) {
  $6 = +HEAPF64[$1>>3];
  $7 = (+Math_abs((+$6)));
  $$0 = $7;
  return (+$$0);
 }
 $$04049 = 0.0;$$04148 = 0;$$04247 = 0;$$04346 = 1.0;
 while(1) {
  $8 = (($1) + ($$04148<<3)|0);
  $9 = +HEAPF64[$8>>3];
  $10 = $9 != 0.0;
  do {
   if ($10) {
    $11 = (+Math_abs((+$9)));
    $12 = $$04049 < $11;
    if ($12) {
     $13 = $$04049 / $11;
     $14 = $$04346 * $13;
     $15 = $13 * $14;
     $16 = $15 + 1.0;
     $$2 = $11;$$245 = $16;
     break;
    } else {
     $17 = $11 / $$04049;
     $18 = $17 * $17;
     $19 = $$04346 + $18;
     $$2 = $$04049;$$245 = $19;
     break;
    }
   } else {
    $$2 = $$04049;$$245 = $$04346;
   }
  } while(0);
  $20 = (($$04148) + ($2))|0;
  $21 = (($$04247) + 1)|0;
  $exitcond = ($21|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $$04049 = $$2;$$04148 = $20;$$04247 = $21;$$04346 = $$245;
  }
 }
 $22 = (+Math_sqrt((+$$245)));
 $23 = $22 * $$2;
 $$0 = $23;
 return (+$$0);
}
function _cblas_dscal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$01112 = 0, $$013 = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)>(0);
 $5 = ($0|0)>(0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  return;
 }
 $$01112 = 0;$$013 = 0;
 while(1) {
  $6 = (($2) + ($$013<<3)|0);
  $7 = +HEAPF64[$6>>3];
  $8 = $7 * $1;
  HEAPF64[$6>>3] = $8;
  $9 = (($$013) + ($3))|0;
  $10 = (($$01112) + 1)|0;
  $exitcond = ($10|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $$01112 = $10;$$013 = $9;
  }
 }
 return;
}
function _cblas_dtrsv($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0 = 0, $$0$us = 0, $$0303$lcssa = 0.0, $$0303$lcssa$us = 0.0, $$0303370 = 0.0, $$0303370$us = 0.0, $$0304344 = 0, $$0304344$us = 0, $$0308361 = 0.0, $$0308361$us = 0.0, $$0309347 = 0, $$0309347$us = 0, $$0313353 = 0.0, $$0313353$us = 0.0, $$0314343 = 0, $$0314343$us = 0, $$0318$lcssa = 0.0, $$0318$lcssa$us = 0.0, $$0318342 = 0.0, $$0318342$us = 0.0;
 var $$0346 = 0, $$0349 = 0, $$0349$us = 0, $$1 = 0, $$1$us = 0, $$1305354 = 0, $$1305354$us = 0, $$1310356 = 0, $$1310356$us = 0, $$1315352 = 0, $$1315352$us = 0, $$1355 = 0, $$1357 = 0, $$1357$us = 0, $$2 = 0, $$2$us = 0, $$2306362 = 0, $$2306362$us = 0, $$2311364 = 0, $$2311364$us = 0;
 var $$2316360 = 0, $$2316360$us = 0, $$2321 = 0, $$2363 = 0, $$2365 = 0, $$2365$us = 0, $$3 = 0, $$3$us = 0, $$3307369 = 0, $$3307369$us = 0, $$3312376 = 0, $$3312376$us = 0, $$3317368 = 0, $$3317368$us = 0, $$3375 = 0, $$3378 = 0, $$3378$us = 0, $$4 = 0, $$off = 0, $$pn327348 = 0;
 var $$pn327348$phi = 0, $$pn327348$us = 0, $$pn327348$us$phi = 0, $$pn377 = 0, $$pn377$phi = 0, $$pn377$us = 0, $$pn377$us$phi = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0;
 var $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0;
 var $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0;
 var $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $exitcond = 0;
 var $exitcond395 = 0, $exitcond396 = 0, $exitcond397 = 0, $exitcond398 = 0, $exitcond399 = 0, $exitcond400 = 0, $exitcond401 = 0, $exitcond402 = 0, $exitcond403 = 0, $exitcond404 = 0, $exitcond405 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond21 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0;
 var $or$cond31 = 0, $or$cond33 = 0, $or$cond330 = 0, $or$cond37 = 0, $or$cond41 = 0, $spec$select = 0, $spec$select329 = 0, $spec$select331 = 0, $spec$select332 = 0, $spec$select333 = 0, $spec$select335 = 0, $spec$select337 = 0, $spec$store$select = 0, $spec$store$select43 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = ($3|0)==(131);
 $10 = ($2|0)==(113);
 $11 = $10 ? 112 : $2;
 $12 = (($0) + -101)|0;
 $13 = ($12>>>0)>(1);
 $spec$store$select = $13&1;
 $14 = (($1) + -121)|0;
 $15 = ($14>>>0)>(1);
 $spec$store$select43 = $15 ? 2 : $spec$store$select;
 $$off = (($2) + -111)|0;
 $switch = ($$off>>>0)<(3);
 $spec$select331 = $switch ? $spec$store$select43 : 3;
 $16 = (($3) + -131)|0;
 $17 = ($16>>>0)>(1);
 $spec$select = $17 ? 4 : $spec$select331;
 $18 = ($4|0)<(0);
 $$2321 = $18 ? 5 : $spec$select;
 $19 = ($4|0)>(1);
 $20 = $19 ? $4 : 1;
 $21 = ($20|0)>($6|0);
 $spec$select329 = $21 ? 7 : $$2321;
 $22 = ($8|0)==(0);
 $$4 = $22 ? 9 : $spec$select329;
 $23 = ($$4|0)==(0);
 if (!($23)) {
  _cblas_xerbla($$4,83270,1292420,$vararg_buffer);
  // unreachable;
 }
 $24 = ($4|0)==(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = ($0|0)==(101);
 $26 = ($11|0)==(111);
 $or$cond11 = $25 & $26;
 $27 = ($1|0)==(121);
 $or$cond13 = $27 & $or$cond11;
 if (!($or$cond13)) {
  $28 = ($0|0)==(102);
  $29 = ($11|0)==(112);
  $or$cond15 = $28 & $29;
  $30 = ($1|0)==(122);
  $or$cond17 = $30 & $or$cond15;
  if (!($or$cond17)) {
   $or$cond21 = $30 & $or$cond11;
   $or$cond25 = $27 & $or$cond15;
   $or$cond = $or$cond21 | $or$cond25;
   if ($or$cond) {
    $78 = ($8|0)>(0);
    $79 = (1 - ($4))|0;
    $80 = Math_imul($79, $8)|0;
    $spec$select333 = $78 ? 0 : $80;
    $81 = (($7) + ($spec$select333<<3)|0);
    if ($9) {
     $82 = +HEAPF64[$81>>3];
     $83 = +HEAPF64[$5>>3];
     $84 = $82 / $83;
     HEAPF64[$81>>3] = $84;
    }
    $$1355 = (($spec$select333) + ($8))|0;
    if (!($19)) {
     STACKTOP = sp;return;
    }
    if ($9) {
     $$1310356$us = 1;$$1357$us = $$1355;
     while(1) {
      $85 = (($7) + ($$1357$us<<3)|0);
      $86 = +HEAPF64[$85>>3];
      $87 = Math_imul($$1310356$us, $6)|0;
      $$0313353$us = $86;$$1305354$us = $spec$select333;$$1315352$us = 0;
      while(1) {
       $94 = (($$1315352$us) + ($87))|0;
       $95 = (($5) + ($94<<3)|0);
       $96 = +HEAPF64[$95>>3];
       $97 = (($7) + ($$1305354$us<<3)|0);
       $98 = +HEAPF64[$97>>3];
       $99 = $96 * $98;
       $92 = $$0313353$us - $99;
       $100 = (($$1305354$us) + ($8))|0;
       $101 = (($$1315352$us) + 1)|0;
       $exitcond396 = ($101|0)==($$1310356$us|0);
       if ($exitcond396) {
        break;
       } else {
        $$0313353$us = $92;$$1305354$us = $100;$$1315352$us = $101;
       }
      }
      $88 = (($87) + ($$1310356$us))|0;
      $89 = (($5) + ($88<<3)|0);
      $90 = +HEAPF64[$89>>3];
      $91 = $92 / $90;
      HEAPF64[$85>>3] = $91;
      $93 = (($$1310356$us) + 1)|0;
      $$1$us = (($$1357$us) + ($8))|0;
      $exitcond397 = ($93|0)==($4|0);
      if ($exitcond397) {
       break;
      } else {
       $$1310356$us = $93;$$1357$us = $$1$us;
      }
     }
     STACKTOP = sp;return;
    } else {
     $$1310356 = 1;$$1357 = $$1355;
     while(1) {
      $102 = (($7) + ($$1357<<3)|0);
      $103 = +HEAPF64[$102>>3];
      $104 = Math_imul($$1310356, $6)|0;
      $$0313353 = $103;$$1305354 = $spec$select333;$$1315352 = 0;
      while(1) {
       $105 = (($$1315352) + ($104))|0;
       $106 = (($5) + ($105<<3)|0);
       $107 = +HEAPF64[$106>>3];
       $108 = (($7) + ($$1305354<<3)|0);
       $109 = +HEAPF64[$108>>3];
       $110 = $107 * $109;
       $111 = $$0313353 - $110;
       $112 = (($$1305354) + ($8))|0;
       $113 = (($$1315352) + 1)|0;
       $exitcond398 = ($113|0)==($$1310356|0);
       if ($exitcond398) {
        break;
       } else {
        $$0313353 = $111;$$1305354 = $112;$$1315352 = $113;
       }
      }
      HEAPF64[$102>>3] = $111;
      $114 = (($$1310356) + 1)|0;
      $$1 = (($$1357) + ($8))|0;
      $exitcond399 = ($114|0)==($4|0);
      if ($exitcond399) {
       break;
      } else {
       $$1310356 = $114;$$1357 = $$1;
      }
     }
     STACKTOP = sp;return;
    }
   }
   $or$cond27 = $25 & $29;
   $or$cond29 = $27 & $or$cond27;
   if (!($or$cond29)) {
    $or$cond31 = $28 & $26;
    $or$cond33 = $30 & $or$cond31;
    if (!($or$cond33)) {
     $or$cond37 = $30 & $or$cond27;
     $or$cond41 = $27 & $or$cond31;
     $or$cond330 = $or$cond37 | $or$cond41;
     if (!($or$cond330)) {
      _cblas_xerbla(0,83270,83288,$vararg_buffer1);
      // unreachable;
     }
     $153 = ($8|0)>(0);
     $154 = (1 - ($4))|0;
     $155 = Math_imul($154, $8)|0;
     $spec$select337 = $153 ? 0 : $155;
     $156 = (($4) + -1)|0;
     $157 = Math_imul($156, $8)|0;
     $158 = (($spec$select337) + ($157))|0;
     $159 = (($7) + ($158<<3)|0);
     if ($9) {
      $160 = Math_imul($156, $6)|0;
      $161 = (($160) + ($156))|0;
      $162 = (($5) + ($161<<3)|0);
      $163 = +HEAPF64[$159>>3];
      $164 = +HEAPF64[$162>>3];
      $165 = $163 / $164;
      HEAPF64[$159>>3] = $165;
     }
     $$3375 = (($158) - ($8))|0;
     if (!($19)) {
      STACKTOP = sp;return;
     }
     if ($9) {
      $$3312376$us = $156;$$3378$us = $$3375;$$pn377$us = $158;
      while(1) {
       $166 = (($$3312376$us) + -1)|0;
       $167 = (($7) + ($$3378$us<<3)|0);
       $168 = +HEAPF64[$167>>3];
       $169 = ($$3312376$us|0)<($4|0);
       if ($169) {
        $$0303370$us = $168;$$3307369$us = $$pn377$us;$$3317368$us = $$3312376$us;
        while(1) {
         $176 = Math_imul($$3317368$us, $6)|0;
         $177 = (($176) + ($166))|0;
         $178 = (($5) + ($177<<3)|0);
         $179 = +HEAPF64[$178>>3];
         $180 = (($7) + ($$3307369$us<<3)|0);
         $181 = +HEAPF64[$180>>3];
         $182 = $179 * $181;
         $183 = $$0303370$us - $182;
         $184 = (($$3307369$us) + ($8))|0;
         $185 = (($$3317368$us) + 1)|0;
         $exitcond404 = ($185|0)==($4|0);
         if ($exitcond404) {
          $$0303$lcssa$us = $183;
          break;
         } else {
          $$0303370$us = $183;$$3307369$us = $184;$$3317368$us = $185;
         }
        }
       } else {
        $$0303$lcssa$us = $168;
       }
       $170 = Math_imul($166, $6)|0;
       $171 = (($170) + ($166))|0;
       $172 = (($5) + ($171<<3)|0);
       $173 = +HEAPF64[$172>>3];
       $174 = $$0303$lcssa$us / $173;
       HEAPF64[$167>>3] = $174;
       $$3$us = (($$3378$us) - ($8))|0;
       $175 = ($$3312376$us|0)>(1);
       if ($175) {
        $$pn377$us$phi = $$3378$us;$$3312376$us = $166;$$3378$us = $$3$us;$$pn377$us = $$pn377$us$phi;
       } else {
        break;
       }
      }
      STACKTOP = sp;return;
     } else {
      $$3312376 = $156;$$3378 = $$3375;$$pn377 = $158;
      while(1) {
       $186 = (($$3312376) + -1)|0;
       $187 = (($7) + ($$3378<<3)|0);
       $188 = +HEAPF64[$187>>3];
       $189 = ($$3312376|0)<($4|0);
       if ($189) {
        $$0303370 = $188;$$3307369 = $$pn377;$$3317368 = $$3312376;
        while(1) {
         $190 = Math_imul($$3317368, $6)|0;
         $191 = (($190) + ($186))|0;
         $192 = (($5) + ($191<<3)|0);
         $193 = +HEAPF64[$192>>3];
         $194 = (($7) + ($$3307369<<3)|0);
         $195 = +HEAPF64[$194>>3];
         $196 = $193 * $195;
         $197 = $$0303370 - $196;
         $198 = (($$3307369) + ($8))|0;
         $199 = (($$3317368) + 1)|0;
         $exitcond405 = ($199|0)==($4|0);
         if ($exitcond405) {
          $$0303$lcssa = $197;
          break;
         } else {
          $$0303370 = $197;$$3307369 = $198;$$3317368 = $199;
         }
        }
       } else {
        $$0303$lcssa = $188;
       }
       HEAPF64[$187>>3] = $$0303$lcssa;
       $$3 = (($$3378) - ($8))|0;
       $200 = ($$3312376|0)>(1);
       if ($200) {
        $$pn377$phi = $$3378;$$3312376 = $186;$$3378 = $$3;$$pn377 = $$pn377$phi;
       } else {
        break;
       }
      }
      STACKTOP = sp;return;
     }
    }
   }
   $115 = ($8|0)>(0);
   $116 = (1 - ($4))|0;
   $117 = Math_imul($116, $8)|0;
   $spec$select335 = $115 ? 0 : $117;
   $118 = (($7) + ($spec$select335<<3)|0);
   if ($9) {
    $119 = +HEAPF64[$118>>3];
    $120 = +HEAPF64[$5>>3];
    $121 = $119 / $120;
    HEAPF64[$118>>3] = $121;
   }
   $$2363 = (($spec$select335) + ($8))|0;
   if (!($19)) {
    STACKTOP = sp;return;
   }
   if ($9) {
    $$2311364$us = 1;$$2365$us = $$2363;
    while(1) {
     $122 = (($7) + ($$2365$us<<3)|0);
     $123 = +HEAPF64[$122>>3];
     $$0308361$us = $123;$$2306362$us = $spec$select335;$$2316360$us = 0;
     while(1) {
      $131 = Math_imul($$2316360$us, $6)|0;
      $132 = (($131) + ($$2311364$us))|0;
      $133 = (($5) + ($132<<3)|0);
      $134 = +HEAPF64[$133>>3];
      $135 = (($7) + ($$2306362$us<<3)|0);
      $136 = +HEAPF64[$135>>3];
      $137 = $134 * $136;
      $129 = $$0308361$us - $137;
      $138 = (($$2306362$us) + ($8))|0;
      $139 = (($$2316360$us) + 1)|0;
      $exitcond400 = ($139|0)==($$2311364$us|0);
      if ($exitcond400) {
       break;
      } else {
       $$0308361$us = $129;$$2306362$us = $138;$$2316360$us = $139;
      }
     }
     $124 = Math_imul($$2311364$us, $6)|0;
     $125 = (($124) + ($$2311364$us))|0;
     $126 = (($5) + ($125<<3)|0);
     $127 = +HEAPF64[$126>>3];
     $128 = $129 / $127;
     HEAPF64[$122>>3] = $128;
     $130 = (($$2311364$us) + 1)|0;
     $$2$us = (($$2365$us) + ($8))|0;
     $exitcond401 = ($130|0)==($4|0);
     if ($exitcond401) {
      break;
     } else {
      $$2311364$us = $130;$$2365$us = $$2$us;
     }
    }
    STACKTOP = sp;return;
   } else {
    $$2311364 = 1;$$2365 = $$2363;
    while(1) {
     $140 = (($7) + ($$2365<<3)|0);
     $141 = +HEAPF64[$140>>3];
     $$0308361 = $141;$$2306362 = $spec$select335;$$2316360 = 0;
     while(1) {
      $142 = Math_imul($$2316360, $6)|0;
      $143 = (($142) + ($$2311364))|0;
      $144 = (($5) + ($143<<3)|0);
      $145 = +HEAPF64[$144>>3];
      $146 = (($7) + ($$2306362<<3)|0);
      $147 = +HEAPF64[$146>>3];
      $148 = $145 * $147;
      $149 = $$0308361 - $148;
      $150 = (($$2306362) + ($8))|0;
      $151 = (($$2316360) + 1)|0;
      $exitcond402 = ($151|0)==($$2311364|0);
      if ($exitcond402) {
       break;
      } else {
       $$0308361 = $149;$$2306362 = $150;$$2316360 = $151;
      }
     }
     HEAPF64[$140>>3] = $149;
     $152 = (($$2311364) + 1)|0;
     $$2 = (($$2365) + ($8))|0;
     $exitcond403 = ($152|0)==($4|0);
     if ($exitcond403) {
      break;
     } else {
      $$2311364 = $152;$$2365 = $$2;
     }
    }
    STACKTOP = sp;return;
   }
  }
 }
 $31 = ($8|0)>(0);
 $32 = (1 - ($4))|0;
 $33 = Math_imul($32, $8)|0;
 $spec$select332 = $31 ? 0 : $33;
 $34 = (($4) + -1)|0;
 $35 = Math_imul($34, $8)|0;
 $36 = (($spec$select332) + ($35))|0;
 $37 = (($7) + ($36<<3)|0);
 if ($9) {
  $38 = Math_imul($34, $6)|0;
  $39 = (($38) + ($34))|0;
  $40 = (($5) + ($39<<3)|0);
  $41 = +HEAPF64[$37>>3];
  $42 = +HEAPF64[$40>>3];
  $43 = $41 / $42;
  HEAPF64[$37>>3] = $43;
 }
 $$0346 = (($36) - ($8))|0;
 if (!($19)) {
  STACKTOP = sp;return;
 }
 if ($9) {
  $$0309347$us = $34;$$0349$us = $$0346;$$pn327348$us = $36;
  while(1) {
   $44 = (($$0309347$us) + -1)|0;
   $45 = (($7) + ($$0349$us<<3)|0);
   $46 = +HEAPF64[$45>>3];
   $47 = ($$0309347$us|0)<($4|0);
   $48 = Math_imul($44, $6)|0;
   if ($47) {
    $$0304344$us = $$pn327348$us;$$0314343$us = $$0309347$us;$$0318342$us = $46;
    while(1) {
     $54 = (($$0314343$us) + ($48))|0;
     $55 = (($5) + ($54<<3)|0);
     $56 = +HEAPF64[$55>>3];
     $57 = (($7) + ($$0304344$us<<3)|0);
     $58 = +HEAPF64[$57>>3];
     $59 = $56 * $58;
     $60 = $$0318342$us - $59;
     $61 = (($$0304344$us) + ($8))|0;
     $62 = (($$0314343$us) + 1)|0;
     $exitcond = ($62|0)==($4|0);
     if ($exitcond) {
      $$0318$lcssa$us = $60;
      break;
     } else {
      $$0304344$us = $61;$$0314343$us = $62;$$0318342$us = $60;
     }
    }
   } else {
    $$0318$lcssa$us = $46;
   }
   $49 = (($48) + ($44))|0;
   $50 = (($5) + ($49<<3)|0);
   $51 = +HEAPF64[$50>>3];
   $52 = $$0318$lcssa$us / $51;
   HEAPF64[$45>>3] = $52;
   $$0$us = (($$0349$us) - ($8))|0;
   $53 = ($$0309347$us|0)>(1);
   if ($53) {
    $$pn327348$us$phi = $$0349$us;$$0309347$us = $44;$$0349$us = $$0$us;$$pn327348$us = $$pn327348$us$phi;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
 } else {
  $$0309347 = $34;$$0349 = $$0346;$$pn327348 = $36;
  while(1) {
   $63 = (($$0309347) + -1)|0;
   $64 = (($7) + ($$0349<<3)|0);
   $65 = +HEAPF64[$64>>3];
   $66 = ($$0309347|0)<($4|0);
   $67 = Math_imul($63, $6)|0;
   if ($66) {
    $$0304344 = $$pn327348;$$0314343 = $$0309347;$$0318342 = $65;
    while(1) {
     $68 = (($$0314343) + ($67))|0;
     $69 = (($5) + ($68<<3)|0);
     $70 = +HEAPF64[$69>>3];
     $71 = (($7) + ($$0304344<<3)|0);
     $72 = +HEAPF64[$71>>3];
     $73 = $70 * $72;
     $74 = $$0318342 - $73;
     $75 = (($$0304344) + ($8))|0;
     $76 = (($$0314343) + 1)|0;
     $exitcond395 = ($76|0)==($4|0);
     if ($exitcond395) {
      $$0318$lcssa = $74;
      break;
     } else {
      $$0304344 = $75;$$0314343 = $76;$$0318342 = $74;
     }
    }
   } else {
    $$0318$lcssa = $65;
   }
   HEAPF64[$64>>3] = $$0318$lcssa;
   $$0 = (($$0349) - ($8))|0;
   $77 = ($$0309347|0)>(1);
   if ($77) {
    $$pn327348$phi = $$0349;$$0309347 = $63;$$0349 = $$0;$$pn327348 = $$pn327348$phi;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
 }
}
function _cblas_idamax($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02027 = 0, $$02126 = 0, $$02225 = 0.0, $$024 = 0, $$028 = 0, $$1 = 0, $$123 = 0.0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(0);
 $4 = ($0|0)>(0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  $$024 = 0;
  return ($$024|0);
 }
 $$02027 = 0;$$02126 = 0;$$02225 = 0.0;$$028 = 0;
 while(1) {
  $5 = (($1) + ($$02126<<3)|0);
  $6 = +HEAPF64[$5>>3];
  $7 = (+Math_abs((+$6)));
  $8 = $7 > $$02225;
  $$123 = $8 ? $7 : $$02225;
  $$1 = $8 ? $$02027 : $$028;
  $9 = (($$02126) + ($2))|0;
  $10 = (($$02027) + 1)|0;
  $exitcond = ($10|0)==($0|0);
  if ($exitcond) {
   $$024 = $$1;
   break;
  } else {
   $$02027 = $10;$$02126 = $9;$$02225 = $$123;$$028 = $$1;
  }
 }
 return ($$024|0);
}
function _cblas_xerbla($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $$pre = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = ($0|0)==(0);
 $$pre = HEAP32[16931]|0;
 if ($4) {
  (_vfprintf($$pre,$2,$3)|0);
  _abort();
  // unreachable;
 }
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 (_fprintf($$pre,83311,$vararg_buffer)|0);
 (_vfprintf($$pre,$2,$3)|0);
 _abort();
 // unreachable;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_560($2)|0);
 $4 = (___wasi_fd_close(($3|0))|0);
 $5 = $4&65535;
 return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$048 = 0, $$049 = 0, $$050 = 0, $$052 = 0, $$1 = 0, $$153 = 0, $$156$ph = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = sp + 16|0;
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 4|0);
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($6))|0;
 HEAP32[$7>>2] = $10;
 $11 = ((($3)) + 8|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($3)) + 12|0);
 HEAP32[$12>>2] = $2;
 $13 = (($10) + ($2))|0;
 $14 = ((($0)) + 60|0);
 $$049 = 2;$$050 = $13;$$052 = $3;
 while(1) {
  $15 = HEAP32[$14>>2]|0;
  $16 = (___wasi_fd_write(($15|0),($$052|0),($$049|0),($4|0))|0);
  $17 = (___wasi_syscall_ret($16)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $$pr = HEAP32[$4>>2]|0;
   $20 = $$pr;
  } else {
   HEAP32[$4>>2] = -1;
   $20 = -1;
  }
  $19 = ($$050|0)==($20|0);
  if ($19) {
   label = 6;
   break;
  }
  $28 = ($20|0)<(0);
  if ($28) {
   label = 8;
   break;
  }
  $36 = (($$050) - ($20))|0;
  $37 = ((($$052)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($20>>>0)>($38>>>0);
  $40 = ((($$052)) + 8|0);
  $$153 = $39 ? $40 : $$052;
  $41 = $39 << 31 >> 31;
  $$1 = (($$049) + ($41))|0;
  $42 = $39 ? $38 : 0;
  $$048 = (($20) - ($42))|0;
  $43 = HEAP32[$$153>>2]|0;
  $44 = (($43) + ($$048)|0);
  HEAP32[$$153>>2] = $44;
  $45 = ((($$153)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - ($$048))|0;
  HEAP32[$45>>2] = $47;
  $$049 = $$1;$$050 = $36;$$052 = $$153;
 }
 if ((label|0) == 6) {
  $21 = ((($0)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + ($24)|0);
  $26 = ((($0)) + 16|0);
  HEAP32[$26>>2] = $25;
  $27 = $22;
  HEAP32[$5>>2] = $27;
  HEAP32[$8>>2] = $27;
  $$156$ph = $2;
 }
 else if ((label|0) == 8) {
  $29 = ((($0)) + 16|0);
  HEAP32[$29>>2] = 0;
  HEAP32[$5>>2] = 0;
  HEAP32[$8>>2] = 0;
  $30 = HEAP32[$0>>2]|0;
  $31 = $30 | 32;
  HEAP32[$0>>2] = $31;
  $32 = ($$049|0)==(2);
  if ($32) {
   $$156$ph = 0;
  } else {
   $33 = ((($$052)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($2) - ($34))|0;
   $$156$ph = $35;
  }
 }
 STACKTOP = sp;return ($$156$ph|0);
}
function ___stdio_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3&255;
 $8 = (___wasi_fd_seek(($6|0),($1|0),($2|0),($7|0),($4|0))|0);
 $9 = (___wasi_syscall_ret($8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $4;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $21 = $16;$22 = $13;
 } else {
  $17 = $4;
  $18 = $17;
  HEAP32[$18>>2] = -1;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = -1;
  $21 = -1;$22 = -1;
 }
 setTempRet0(($21) | 0);
 STACKTOP = sp;return ($22|0);
}
function ___wasi_syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = $0&65535;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1291884|0);
}
function _dummy_560($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $5 = ((($3)) + 4|0);
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $8&1;
 $10 = (($2) - ($9))|0;
 HEAP32[$5>>2] = $10;
 $11 = ((($3)) + 8|0);
 $12 = ((($0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($3)) + 12|0);
 HEAP32[$14>>2] = $7;
 $15 = ((($0)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (___wasi_fd_read(($16|0),($3|0),2,($4|0))|0);
 $18 = (___wasi_syscall_ret($17)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $$pr = HEAP32[$4>>2]|0;
  $20 = ($$pr|0)<(1);
  if ($20) {
   $22 = $$pr;
   label = 4;
  } else {
   $26 = HEAP32[$5>>2]|0;
   $27 = ($$pr>>>0)>($26>>>0);
   if ($27) {
    $28 = (($$pr) - ($26))|0;
    $29 = HEAP32[$12>>2]|0;
    $30 = ((($0)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$cast = $29;
    $31 = (($$cast) + ($28)|0);
    $32 = ((($0)) + 8|0);
    HEAP32[$32>>2] = $31;
    $33 = HEAP32[$6>>2]|0;
    $34 = ($33|0)==(0);
    if ($34) {
     $$0 = $2;
    } else {
     $35 = ((($$cast)) + 1|0);
     HEAP32[$30>>2] = $35;
     $36 = HEAP8[$$cast>>0]|0;
     $37 = (($2) + -1)|0;
     $38 = (($1) + ($37)|0);
     HEAP8[$38>>0] = $36;
     $$0 = $2;
    }
   } else {
    $$0 = $$pr;
   }
  }
 } else {
  HEAP32[$4>>2] = -1;
  $22 = -1;
  label = 4;
 }
 if ((label|0) == 4) {
  $21 = $22 & 48;
  $23 = $21 ^ 16;
  $24 = HEAP32[$0>>2]|0;
  $25 = $23 | $24;
  HEAP32[$0>>2] = $25;
  $$0 = $22;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___emscripten_stdout_close($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___emscripten_stdout_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function _strtox_735($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 120|0);
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$6>>2]|0;
  $23 = HEAP32[$10>>2]|0;
  $24 = (($22) + ($18))|0;
  $25 = (($24) - ($23))|0;
  $26 = (($0) + ($25)|0);
  HEAP32[$1>>2] = $26;
 }
 setTempRet0(($13) | 0);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = ((($0)) + 120|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = ($1|0)!=(0);
 $21 = ($2|0)!=(0);
 $22 = $20 | $21;
 $23 = ($14|0)>($2|0);
 $24 = ($12>>>0)>($1>>>0);
 $25 = ($14|0)==($2|0);
 $26 = $25 & $24;
 $27 = $23 | $26;
 $or$cond = $22 & $27;
 if ($or$cond) {
  $28 = $11;
  $29 = (($28) + ($1)|0);
  $30 = ((($0)) + 104|0);
  HEAP32[$30>>2] = $29;
 } else {
  $31 = ((($0)) + 104|0);
  HEAP32[$31>>2] = $9;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 28;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 104|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((37617) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((37617) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 28;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$93 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $92 = ($93|0)<(0);
         $94 = $92 << 31 >> 31;
         $95 = $93 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$93 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$265 = $103;$267 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$265 = 0;$267 = $73;
       }
      } else {
       $$1158 = $$0157;$265 = 0;$267 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (83353 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((37617) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((37617) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((37617) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((37617) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((37617) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$209 = $298;$211 = $297;$218 = $296;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $211;$294 = $209;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $211;$294 = $209;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((37617) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$209 = $226;$211 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((37617) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((37617) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 68;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$265 = $4;$267 = $3;
    } else {
     $$1158 = $$0157;$265 = $294;$267 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $264 = ($265>>>0)<($4>>>0);
   $266 = ($267>>>0)<($3>>>0);
   $268 = ($265|0)==($4|0);
   $269 = $268 & $266;
   $270 = $264 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 68;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($265>>>0)>($4>>>0);
    $280 = ($267>>>0)>($3>>>0);
    $281 = ($265|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 68;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $267 ^ $$1158;
   $288 = $265 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==(0);
 $9 = ($7|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  label = 3;
 } else {
  $11 = ((($0)) + 120|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)<($7|0);
  $19 = ($14>>>0)<($4>>>0);
  $20 = ($17|0)==($7|0);
  $21 = $20 & $19;
  $22 = $18 | $21;
  if ($22) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $23 = (___uflow($0)|0);
  $24 = ($23|0)<(0);
  if ($24) {
   label = 4;
  } else {
   $26 = $1;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)==(0);
   $33 = ($31|0)==(0);
   $34 = $32 & $33;
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($34) {
    $35 = $$pre;
    $89 = $35;
    label = 9;
   } else {
    $36 = ((($0)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
    $39 = (($$pre) - ($38))|0;
    $40 = ($39|0)<(0);
    $41 = $40 << 31 >> 31;
    $42 = ((($0)) + 120|0);
    $43 = $42;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (_i64Subtract(($28|0),($31|0),($45|0),($48|0))|0);
    $50 = (getTempRet0() | 0);
    $51 = ($50|0)>($41|0);
    $52 = ($49>>>0)>($39>>>0);
    $53 = ($50|0)==($41|0);
    $54 = $53 & $52;
    $55 = $51 | $54;
    $56 = $$pre;
    if ($55) {
     $89 = $56;
     label = 9;
    } else {
     $57 = (($49) + -1)|0;
     $58 = (($37) + ($57)|0);
     $59 = ((($0)) + 104|0);
     HEAP32[$59>>2] = $58;
     $62 = $56;
    }
   }
   if ((label|0) == 9) {
    $60 = ((($0)) + 104|0);
    HEAP32[$60>>2] = $$pre;
    $62 = $89;
   }
   $61 = ($62|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($61) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $84 = $$pre29;
   } else {
    $63 = HEAP32[$$phi$trans$insert28>>2]|0;
    $64 = $62;
    $65 = (($64) + 1)|0;
    $66 = (($65) - ($63))|0;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = ((($0)) + 120|0);
    $70 = $69;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (_i64Add(($72|0),($75|0),($66|0),($68|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = $69;
    $79 = $78;
    HEAP32[$79>>2] = $76;
    $80 = (($78) + 4)|0;
    $81 = $80;
    HEAP32[$81>>2] = $77;
    $82 = $63;
    $84 = $82;
   }
   $83 = ((($84)) + -1|0);
   $85 = HEAP8[$83>>0]|0;
   $86 = $85&255;
   $87 = ($23|0)==($86|0);
   if ($87) {
    $$0 = $23;
   } else {
    $88 = $23&255;
    HEAP8[$83>>0] = $88;
    $$0 = $23;
   }
  }
 }
 if ((label|0) == 4) {
  $25 = ((($0)) + 104|0);
  HEAP32[$25>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 127]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 127]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_735($0,$1,$2,-2147483648,0)|0);
 $4 = (getTempRet0() | 0);
 return ($3|0);
}
function _hypot($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$036 = 0.0, $$037 = 0.0, $$038 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select40 = 0.0, $spec$select41 = 0.0, $spec$select42 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 HEAPF64[tempDoublePtr>>3] = $0;$6 = HEAP32[tempDoublePtr>>2]|0;
 $7 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$8 = HEAP32[tempDoublePtr>>2]|0;
 $9 = HEAP32[tempDoublePtr+4>>2]|0;
 $10 = $7 & 2147483647;
 $11 = $9 & 2147483647;
 $12 = ($10>>>0)<($11>>>0);
 $13 = ($6>>>0)<($8>>>0);
 $14 = ($10|0)==($11|0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 $17 = $16 ? $8 : $6;
 $18 = $16 ? $11 : $10;
 $19 = $16 ? $6 : $8;
 $20 = $16 ? $10 : $11;
 $21 = (_bitshift64Lshr(($17|0),($18|0),52)|0);
 $22 = (getTempRet0() | 0);
 $23 = (_bitshift64Lshr(($19|0),($20|0),52)|0);
 $24 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$25 = +HEAPF64[tempDoublePtr>>3];
 HEAP32[tempDoublePtr>>2] = $19;HEAP32[tempDoublePtr+4>>2] = $20;$26 = +HEAPF64[tempDoublePtr>>3];
 $27 = ($23|0)==(2047);
 do {
  if ($27) {
   $$036 = $26;
  } else {
   $28 = ($21|0)==(2047);
   $29 = ($19|0)==(0);
   $30 = ($20|0)==(0);
   $31 = $29 & $30;
   $or$cond = $31 | $28;
   if ($or$cond) {
    $$036 = $25;
   } else {
    $32 = (($21) - ($23))|0;
    $33 = ($32|0)>(64);
    if ($33) {
     $34 = $25 + $26;
     $$036 = $34;
     break;
    }
    $35 = ($21|0)>(1533);
    if ($35) {
     $36 = $25 * 1.9010915662951598E-211;
     $37 = $26 * 1.9010915662951598E-211;
     $$0 = 5.2601359015483735E+210;$$037 = $36;$$038 = $37;
    } else {
     $38 = ($23|0)<(573);
     $39 = $25 * 5.2601359015483735E+210;
     $40 = $26 * 5.2601359015483735E+210;
     $spec$select40 = $38 ? $40 : $26;
     $spec$select41 = $38 ? $39 : $25;
     $spec$select42 = $38 ? 1.9010915662951598E-211 : 1.0;
     $$0 = $spec$select42;$$037 = $spec$select41;$$038 = $spec$select40;
    }
    _sq($2,$3,$$037);
    _sq($4,$5,$$038);
    $41 = +HEAPF64[$5>>3];
    $42 = +HEAPF64[$3>>3];
    $43 = $41 + $42;
    $44 = +HEAPF64[$4>>3];
    $45 = $43 + $44;
    $46 = +HEAPF64[$2>>3];
    $47 = $45 + $46;
    $48 = (+Math_sqrt((+$47)));
    $49 = $$0 * $48;
    $$036 = $49;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$036);
}
function _sq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 * 134217729.0;
 $4 = $2 - $3;
 $5 = $3 + $4;
 $6 = $2 - $5;
 $7 = $2 * $2;
 HEAPF64[$0>>3] = $7;
 $8 = $5 * $5;
 $9 = $8 - $7;
 $10 = $5 * 2.0;
 $11 = $10 * $6;
 $12 = $9 + $11;
 $13 = $6 * $6;
 $14 = $13 + $12;
 HEAPF64[$1>>3] = $14;
 return;
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _cosh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $5 = ($3>>>0)<(1072049730);
 do {
  if ($5) {
   $6 = ($3>>>0)<(1045430272);
   if ($6) {
    $$0 = 1.0;
   } else {
    $7 = (+_expm1($4));
    $8 = $7 * $7;
    $9 = $7 + 1.0;
    $10 = $9 * 2.0;
    $11 = $8 / $10;
    $12 = $11 + 1.0;
    $$0 = $12;
   }
  } else {
   $13 = ($3>>>0)<(1082535490);
   if ($13) {
    $14 = (+Math_exp((+$4)));
    $15 = 1.0 / $14;
    $16 = $14 + $15;
    $17 = $16 * 0.5;
    $$0 = $17;
    break;
   } else {
    $18 = (+___expo2($4));
    $$0 = $18;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _sinh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2|0)<(0);
 $spec$select = $3 ? -0.5 : 0.5;
 $4 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
 $6 = ($4>>>0)<(1082535490);
 do {
  if ($6) {
   $7 = (+_expm1($5));
   $8 = ($4>>>0)<(1072693248);
   if (!($8)) {
    $16 = $7 + 1.0;
    $17 = $7 / $16;
    $18 = $7 + $17;
    $19 = $spec$select * $18;
    $$0 = $19;
    break;
   }
   $9 = ($4>>>0)<(1045430272);
   if ($9) {
    $$0 = $0;
   } else {
    $10 = $7 * 2.0;
    $11 = $7 * $7;
    $12 = $7 + 1.0;
    $13 = $11 / $12;
    $14 = $10 - $13;
    $15 = $spec$select * $14;
    $$0 = $15;
   }
  } else {
   $20 = $spec$select * 2.0;
   $21 = (+___expo2($5));
   $22 = $20 * $21;
   $$0 = $22;
  }
 } while(0);
 return (+$$0);
}
function _expm1($0) {
 $0 = +$0;
 var $$0 = 0.0, $$0105 = 0, $$0106 = 0.0, $$0107 = 0.0, $$0109 = 0.0, $$0110 = 0.0, $$0111 = 0.0, $$1 = 0, $$1108 = 0.0, $$sink = 0.0, $$sink113 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $5 = (getTempRet0() | 0);
 $6 = ($3>>>0)>(1078159481);
 do {
  if ($6) {
   $7 = (___DOUBLE_BITS_261($0)|0);
   $8 = (getTempRet0() | 0);
   $9 = $8 & 2147483647;
   $10 = ($9>>>0)>(2146435072);
   $11 = ($7>>>0)>(0);
   $12 = ($9|0)==(2146435072);
   $13 = $12 & $11;
   $14 = $10 | $13;
   if ($14) {
    $$0 = $0;
   } else {
    $15 = ($4|0)==(0);
    if ($15) {
     $16 = $0 > 709.78271289338397;
     if ($16) {
      $17 = $0 * 8.9884656743115795E+307;
      $$0 = $17;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $18 = ($3>>>0)>(1071001154);
   if (!($18)) {
    $35 = ($3>>>0)<(1016070144);
    if ($35) {
     $$0 = $0;
     break;
    } else {
     $$0106 = $0;$$0111 = 0.0;$$1 = 0;
     label = 14;
     break;
    }
   }
   $19 = ($3>>>0)<(1072734898);
   if ($19) {
    $20 = ($4|0)==(0);
    if ($20) {
     $21 = $0 + -0.69314718036912382;
     $$0105 = 1;$$0109 = $21;$$0110 = 1.9082149292705877E-10;
     label = 12;
     break;
    } else {
     $22 = $0 + 0.69314718036912382;
     $$0105 = -1;$$0109 = $22;$$0110 = -1.9082149292705877E-10;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $23 = $0 * 1.4426950408889634;
  $24 = ($4|0)==(0);
  $25 = $24 ? 0.5 : -0.5;
  $26 = $23 + $25;
  $27 = (~~(($26)));
  $28 = (+($27|0));
  $29 = $28 * 0.69314718036912382;
  $30 = $0 - $29;
  $31 = $28 * 1.9082149292705877E-10;
  $$0105 = $27;$$0109 = $30;$$0110 = $31;
  label = 12;
 }
 if ((label|0) == 12) {
  $32 = $$0109 - $$0110;
  $33 = $$0109 - $32;
  $34 = $33 - $$0110;
  $$0106 = $32;$$0111 = $34;$$1 = $$0105;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $36 = $$0106 * 0.5;
   $37 = $$0106 * $36;
   $38 = $37 * 2.0109921818362437E-7;
   $39 = 4.0082178273293624E-6 - $38;
   $40 = $37 * $39;
   $41 = $40 + -7.9365075786748794E-5;
   $42 = $37 * $41;
   $43 = $42 + 0.0015873015872548146;
   $44 = $37 * $43;
   $45 = $44 + -0.033333333333333132;
   $46 = $37 * $45;
   $47 = $46 + 1.0;
   $48 = $36 * $47;
   $49 = 3.0 - $48;
   $50 = $47 - $49;
   $51 = $$0106 * $49;
   $52 = 6.0 - $51;
   $53 = $50 / $52;
   $54 = $37 * $53;
   $55 = ($$1|0)==(0);
   if ($55) {
    $56 = $$0106 * $54;
    $57 = $56 - $37;
    $58 = $$0106 - $57;
    $$0 = $58;
    break;
   }
   $59 = $54 - $$0111;
   $60 = $$0106 * $59;
   $61 = $60 - $$0111;
   $62 = $61 - $37;
   switch ($$1|0) {
   case -1:  {
    $63 = $$0106 - $62;
    $64 = $63 * 0.5;
    $65 = $64 + -0.5;
    $$0 = $65;
    break L18;
    break;
   }
   case 1:  {
    $66 = $$0106 < -0.25;
    if ($66) {
     $67 = $$0106 + 0.5;
     $68 = $62 - $67;
     $69 = $68 * -2.0;
     $$0 = $69;
     break L18;
    } else {
     $70 = $$0106 - $62;
     $71 = $70 * 2.0;
     $72 = $71 + 1.0;
     $$0 = $72;
     break L18;
    }
    break;
   }
   default: {
    $73 = (($$1) + 1023)|0;
    $74 = (_bitshift64Shl(($73|0),0,52)|0);
    $75 = (getTempRet0() | 0);
    HEAP32[tempDoublePtr>>2] = $74;HEAP32[tempDoublePtr+4>>2] = $75;$76 = +HEAPF64[tempDoublePtr>>3];
    $77 = ($$1>>>0)>(56);
    if ($77) {
     $78 = $$0106 - $62;
     $79 = $78 + 1.0;
     $80 = ($$1|0)==(1024);
     $81 = $79 * 2.0;
     $82 = $81 * 8.9884656743115795E+307;
     $83 = $79 * $76;
     $$0107 = $80 ? $82 : $83;
     $84 = $$0107 + -1.0;
     $$0 = $84;
     break L18;
    }
    $85 = (1023 - ($$1))|0;
    $86 = (_bitshift64Shl(($85|0),0,52)|0);
    $87 = (getTempRet0() | 0);
    $88 = ($$1|0)<(20);
    if ($88) {
     $89 = $$0106 - $62;
     HEAP32[tempDoublePtr>>2] = $86;HEAP32[tempDoublePtr+4>>2] = $87;$90 = +HEAPF64[tempDoublePtr>>3];
     $91 = 1.0 - $90;
     $$sink = $91;$$sink113 = $89;
    } else {
     HEAP32[tempDoublePtr>>2] = $86;HEAP32[tempDoublePtr+4>>2] = $87;$92 = +HEAPF64[tempDoublePtr>>3];
     $93 = $62 + $92;
     $94 = $$0106 - $93;
     $$sink = $94;$$sink113 = 1.0;
    }
    $95 = $$sink + $$sink113;
    $$1108 = $95 * $76;
    $$0 = $$1108;
    break L18;
   }
   }
  }
 } while(0);
 return (+$$0);
}
function ___expo2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -1416.0996898839683;
 $2 = (+Math_exp((+$1)));
 $3 = $2 * 2.2471164185778949E+307;
 $4 = $3 * 2.2471164185778949E+307;
 return (+$4);
}
function ___DOUBLE_BITS_261($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 144|0;
 $5 = sp;
 _memcpy(($5|0),(66272|0),144)|0;
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 61;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___vfprintf_internal($0,$1,$2,66,67)|0);
 return ($3|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_670($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_670($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 83379;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (83380) : (83385);
  $spec$select565 = $19 ? $$ : (83382);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 83398 : 83402;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 83436 : 83406;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_667($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_667($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexp($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (38352 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_667($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_667($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_667($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_667($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$135 = $$pr;
    while(1) {
     $134 = ($135|0)<(29);
     $136 = $134 ? $135 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $154 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($154>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $154;
        } else {
         $$3501$lcssa = $154;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$135 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $273 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $272 = ($273>>>0)>($$9>>>0);
      if ($272) {
       $$9507625 = $273;
      } else {
       $$9507$lcssa = $273;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_667($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_667($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,83410,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_667($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,83410,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_667($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_667($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function _pop_arg_long_double($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$1>>2]|0;
 $2 = $arglist_current;
 $3 = ((0) + 8|0);
 $expanded1 = $3;
 $expanded = (($expanded1) - 1)|0;
 $4 = (($2) + ($expanded))|0;
 $5 = ((0) + 8|0);
 $expanded5 = $5;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $6 = $4 & $expanded3;
 $7 = $6;
 $8 = +HEAPF64[$7>>3];
 $arglist_next = ((($7)) + 8|0);
 HEAP32[$1>>2] = $arglist_next;
 HEAPF64[$0>>3] = $8;
 return;
}
function ___vfprintf_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select45 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp + 208|0;
 $6 = sp + 160|0;
 $7 = sp + 80|0;
 $8 = sp;
 dest=$6; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $vacopy_currentptr;
 $9 = (_printf_core(0,$1,$5,$7,$6,$3,$4)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$0 = -1;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(-1);
  if ($13) {
   $14 = (___lockfile($0)|0);
   $42 = $14;
  } else {
   $42 = 0;
  }
  $15 = HEAP32[$0>>2]|0;
  $16 = $15 & 32;
  $17 = ((($0)) + 74|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(1);
  if ($19) {
   $20 = $15 & -33;
   HEAP32[$0>>2] = $20;
  }
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $25 = ((($0)) + 44|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$25>>2] = $8;
   $27 = ((($0)) + 28|0);
   HEAP32[$27>>2] = $8;
   $28 = ((($0)) + 20|0);
   HEAP32[$28>>2] = $8;
   HEAP32[$21>>2] = 80;
   $29 = ((($8)) + 80|0);
   $30 = ((($0)) + 16|0);
   HEAP32[$30>>2] = $29;
   $31 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $32 = ($26|0)==(0|0);
   if ($32) {
    $$1 = $31;
   } else {
    $33 = ((($0)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    (FUNCTION_TABLE_iiii[$34 & 127]($0,0,0)|0);
    $35 = HEAP32[$28>>2]|0;
    $36 = ($35|0)==(0|0);
    $spec$select = $36 ? -1 : $31;
    HEAP32[$25>>2] = $26;
    HEAP32[$21>>2] = 0;
    HEAP32[$30>>2] = 0;
    HEAP32[$27>>2] = 0;
    HEAP32[$28>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $24 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $$1 = $24;
  }
  $37 = HEAP32[$0>>2]|0;
  $38 = $37 & 32;
  $39 = ($38|0)==(0);
  $spec$select45 = $39 ? $$1 : -1;
  $40 = $37 | $16;
  HEAP32[$0>>2] = $40;
  $41 = ($42|0)==(0);
  if (!($41)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select45;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0 = 0, $$0231 = 0, $$0232336 = 0, $$0234 = 0, $$0237 = 0, $$0239 = 0, $$0242315 = 0, $$0242315373 = 0, $$0242335 = 0, $$0245 = 0, $$0245$ph = 0, $$0245$ph$be = 0, $$0249 = 0, $$0249$ph = 0, $$0251$lcssa = 0, $$0251323 = 0, $$0254 = 0, $$0255 = 0, $$0256 = 0;
 var $$0261 = 0, $$0264$lcssa = 0, $$0264330 = 0, $$0271$ph = 0, $$1 = 0, $$1233342 = 0, $$1235 = 0, $$1238 = 0, $$1240 = 0, $$1243341 = 0, $$1250 = 0, $$1252 = 0, $$1257 = 0, $$1262 = 0, $$1265 = 0, $$1272 = 0, $$2236 = 0, $$2241 = 0, $$2244322 = 0, $$2258 = 0;
 var $$2258$ = 0, $$2263 = 0, $$2273 = 0, $$3259 = 0, $$3267 = 0, $$3274 = 0, $$3319 = 0, $$4260372 = 0, $$4268 = 0, $$5 = 0, $$6270 = 0, $$lcssa310 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre362 = 0, $$pre364 = 0, $$pre365 = 0, $$pre365$pre = 0, $$pre366 = 0, $$pre370 = 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge328 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0;
 var $or$cond278 = 0, $or$cond280 = 0, $or$cond285 = 0, $spec$select = 0, $spec$select283 = 0, $spec$select286 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $spec$select300 = 0, $spec$select301 = 0, $storemerge275$lcssa = 0, $storemerge275329 = 0, $storemerge276 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 56|0;
 $8 = sp + 40|0;
 $9 = sp;
 $10 = sp + 48|0;
 $11 = sp + 60|0;
 HEAP32[$7>>2] = $1;
 $12 = ($0|0)!=(0|0);
 $13 = ((($9)) + 40|0);
 $14 = $13;
 $15 = ((($9)) + 39|0);
 $16 = ((($10)) + 4|0);
 $$0245$ph = 0;$$0249$ph = 0;$$0271$ph = 0;
 L1: while(1) {
  $$0245 = $$0245$ph;$$0249 = $$0249$ph;
  while(1) {
   $17 = ($$0249|0)>(-1);
   do {
    if ($17) {
     $18 = (2147483647 - ($$0249))|0;
     $19 = ($$0245|0)>($18|0);
     if ($19) {
      $20 = (___errno_location()|0);
      HEAP32[$20>>2] = 61;
      $$1250 = -1;
      break;
     } else {
      $21 = (($$0245) + ($$0249))|0;
      $$1250 = $21;
      break;
     }
    } else {
     $$1250 = $$0249;
    }
   } while(0);
   $22 = HEAP32[$7>>2]|0;
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    label = 92;
    break L1;
   }
   $25 = $23;$27 = $22;
   L12: while(1) {
    switch ($25<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0251$lcssa = $27;
     break L12;
     break;
    }
    default: {
    }
    }
    $26 = ((($27)) + 1|0);
    HEAP32[$7>>2] = $26;
    $$pre = HEAP8[$26>>0]|0;
    $25 = $$pre;$27 = $26;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0251323 = $27;$29 = $27;
     while(1) {
      $28 = ((($29)) + 1|0);
      $30 = HEAP8[$28>>0]|0;
      $31 = ($30<<24>>24)==(37);
      if (!($31)) {
       $$0251$lcssa = $$0251323;
       break L15;
      }
      $32 = ((($$0251323)) + 1|0);
      $33 = ((($29)) + 2|0);
      HEAP32[$7>>2] = $33;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(37);
      if ($35) {
       $$0251323 = $32;$29 = $33;
      } else {
       $$0251$lcssa = $32;
       break;
      }
     }
    }
   } while(0);
   $36 = $$0251$lcssa;
   $37 = $22;
   $38 = (($36) - ($37))|0;
   if ($12) {
    _out($0,$22,$38);
   }
   $39 = ($38|0)==(0);
   if ($39) {
    break;
   } else {
    $$0245 = $38;$$0249 = $$1250;
   }
  }
  $40 = HEAP32[$7>>2]|0;
  $41 = ((($40)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (_isdigit($43)|0);
  $45 = ($44|0)==(0);
  $$pre362 = HEAP32[$7>>2]|0;
  if ($45) {
   $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
  } else {
   $46 = ((($$pre362)) + 2|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)==(36);
   if ($48) {
    $49 = ((($$pre362)) + 1|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = (($51) + -48)|0;
    $$0255 = $52;$$1272 = 1;$$sink = 3;
   } else {
    $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
   }
  }
  $53 = (($$pre362) + ($$sink)|0);
  HEAP32[$7>>2] = $53;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = (($55) + -32)|0;
  $57 = ($56>>>0)>(31);
  $58 = 1 << $56;
  $59 = $58 & 75913;
  $60 = ($59|0)==(0);
  $brmerge328 = $57 | $60;
  if ($brmerge328) {
   $$0264$lcssa = 0;$$lcssa310 = $54;$storemerge275$lcssa = $53;
  } else {
   $$0264330 = 0;$62 = $56;$storemerge275329 = $53;
   while(1) {
    $61 = 1 << $62;
    $63 = $61 | $$0264330;
    $64 = ((($storemerge275329)) + 1|0);
    HEAP32[$7>>2] = $64;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = (($66) + -32)|0;
    $68 = ($67>>>0)>(31);
    $69 = 1 << $67;
    $70 = $69 & 75913;
    $71 = ($70|0)==(0);
    $brmerge = $68 | $71;
    if ($brmerge) {
     $$0264$lcssa = $63;$$lcssa310 = $65;$storemerge275$lcssa = $64;
     break;
    } else {
     $$0264330 = $63;$62 = $67;$storemerge275329 = $64;
    }
   }
  }
  $72 = ($$lcssa310<<24>>24)==(42);
  if ($72) {
   $73 = ((($storemerge275$lcssa)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = (_isdigit($75)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    label = 27;
   } else {
    $78 = HEAP32[$7>>2]|0;
    $79 = ((($78)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ($80<<24>>24)==(36);
    if ($81) {
     $82 = ((($78)) + 1|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83 << 24 >> 24;
     $85 = (($84) + -48)|0;
     $86 = (($4) + ($85<<2)|0);
     HEAP32[$86>>2] = 10;
     $87 = HEAP8[$82>>0]|0;
     $88 = $87 << 24 >> 24;
     $89 = (($88) + -48)|0;
     $90 = (($3) + ($89<<3)|0);
     $91 = $90;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($91) + 4)|0;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($78)) + 3|0);
     $$0261 = $93;$$2273 = 1;$storemerge276 = $97;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $98 = ($$1272|0)==(0);
    if (!($98)) {
     $$0 = -1;
     break;
    }
    if ($12) {
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $367 = $105;
    } else {
     $367 = 0;
    }
    $106 = HEAP32[$7>>2]|0;
    $107 = ((($106)) + 1|0);
    $$0261 = $367;$$2273 = 0;$storemerge276 = $107;
   }
   HEAP32[$7>>2] = $storemerge276;
   $108 = ($$0261|0)<(0);
   $109 = $$0264$lcssa | 8192;
   $110 = (0 - ($$0261))|0;
   $spec$select293 = $108 ? $109 : $$0264$lcssa;
   $spec$select294 = $108 ? $110 : $$0261;
   $$1262 = $spec$select294;$$1265 = $spec$select293;$$3274 = $$2273;$114 = $storemerge276;
  } else {
   $111 = (_getint($7)|0);
   $112 = ($111|0)<(0);
   if ($112) {
    $$0 = -1;
    break;
   }
   $$pre364 = HEAP32[$7>>2]|0;
   $$1262 = $111;$$1265 = $$0264$lcssa;$$3274 = $$1272;$114 = $$pre364;
  }
  $113 = HEAP8[$114>>0]|0;
  $115 = ($113<<24>>24)==(46);
  do {
   if ($115) {
    $116 = ((($114)) + 1|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = ($117<<24>>24)==(42);
    if (!($118)) {
     HEAP32[$7>>2] = $116;
     $154 = (_getint($7)|0);
     $$pre365$pre = HEAP32[$7>>2]|0;
     $$0256 = $154;$$pre365 = $$pre365$pre;
     break;
    }
    $119 = ((($114)) + 2|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120 << 24 >> 24;
    $122 = (_isdigit($121)|0);
    $123 = ($122|0)==(0);
    if (!($123)) {
     $124 = HEAP32[$7>>2]|0;
     $125 = ((($124)) + 3|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = ($126<<24>>24)==(36);
     if ($127) {
      $128 = ((($124)) + 2|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129 << 24 >> 24;
      $131 = (($130) + -48)|0;
      $132 = (($4) + ($131<<2)|0);
      HEAP32[$132>>2] = 10;
      $133 = HEAP8[$128>>0]|0;
      $134 = $133 << 24 >> 24;
      $135 = (($134) + -48)|0;
      $136 = (($3) + ($135<<3)|0);
      $137 = $136;
      $138 = $137;
      $139 = HEAP32[$138>>2]|0;
      $140 = (($137) + 4)|0;
      $141 = $140;
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($124)) + 4|0);
      HEAP32[$7>>2] = $143;
      $$0256 = $139;$$pre365 = $143;
      break;
     }
    }
    $144 = ($$3274|0)==(0);
    if (!($144)) {
     $$0 = -1;
     break L1;
    }
    if ($12) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $145 = $arglist_current2;
     $146 = ((0) + 4|0);
     $expanded11 = $146;
     $expanded10 = (($expanded11) - 1)|0;
     $147 = (($145) + ($expanded10))|0;
     $148 = ((0) + 4|0);
     $expanded15 = $148;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $149 = $147 & $expanded13;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $arglist_next3 = ((($150)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $368 = $151;
    } else {
     $368 = 0;
    }
    $152 = HEAP32[$7>>2]|0;
    $153 = ((($152)) + 2|0);
    HEAP32[$7>>2] = $153;
    $$0256 = $368;$$pre365 = $153;
   } else {
    $$0256 = -1;$$pre365 = $114;
   }
  } while(0);
  $$0254 = 0;$156 = $$pre365;
  while(1) {
   $155 = HEAP8[$156>>0]|0;
   $157 = $155 << 24 >> 24;
   $158 = (($157) + -65)|0;
   $159 = ($158>>>0)>(57);
   if ($159) {
    $$0 = -1;
    break L1;
   }
   $160 = ((($156)) + 1|0);
   HEAP32[$7>>2] = $160;
   $161 = HEAP8[$156>>0]|0;
   $162 = $161 << 24 >> 24;
   $163 = (($162) + -65)|0;
   $164 = ((37888 + (($$0254*58)|0)|0) + ($163)|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = (($166) + -1)|0;
   $168 = ($167>>>0)<(8);
   if ($168) {
    $$0254 = $166;$156 = $160;
   } else {
    break;
   }
  }
  $169 = ($165<<24>>24)==(0);
  if ($169) {
   $$0 = -1;
   break;
  }
  $170 = ($165<<24>>24)==(19);
  $171 = ($$0255|0)>(-1);
  do {
   if ($170) {
    if ($171) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($171) {
     $172 = (($4) + ($$0255<<2)|0);
     HEAP32[$172>>2] = $166;
     $173 = (($3) + ($$0255<<3)|0);
     $174 = $173;
     $175 = $174;
     $176 = HEAP32[$175>>2]|0;
     $177 = (($174) + 4)|0;
     $178 = $177;
     $179 = HEAP32[$178>>2]|0;
     $180 = $8;
     $181 = $180;
     HEAP32[$181>>2] = $176;
     $182 = (($180) + 4)|0;
     $183 = $182;
     HEAP32[$183>>2] = $179;
     label = 54;
     break;
    }
    if (!($12)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($8,$166,$2,$6);
    $$pre366 = HEAP32[$7>>2]|0;
    $185 = $$pre366;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($12) {
    $185 = $160;
    label = 55;
   } else {
    $$0245$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $184 = ((($185)) + -1|0);
    $186 = HEAP8[$184>>0]|0;
    $187 = $186 << 24 >> 24;
    $188 = ($$0254|0)!=(0);
    $189 = $187 & 15;
    $190 = ($189|0)==(3);
    $or$cond278 = $188 & $190;
    $191 = $187 & -33;
    $$0237 = $or$cond278 ? $191 : $187;
    $192 = $$1265 & 8192;
    $193 = ($192|0)==(0);
    $194 = $$1265 & -65537;
    $spec$select = $193 ? $$1265 : $194;
    L79: do {
     switch ($$0237|0) {
     case 110:  {
      $trunc = $$0254&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $201 = HEAP32[$8>>2]|0;
       HEAP32[$201>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $202 = HEAP32[$8>>2]|0;
       HEAP32[$202>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $203 = ($$1250|0)<(0);
       $204 = $203 << 31 >> 31;
       $205 = HEAP32[$8>>2]|0;
       $206 = $205;
       $207 = $206;
       HEAP32[$207>>2] = $$1250;
       $208 = (($206) + 4)|0;
       $209 = $208;
       HEAP32[$209>>2] = $204;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $210 = $$1250&65535;
       $211 = HEAP32[$8>>2]|0;
       HEAP16[$211>>1] = $210;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $212 = $$1250&255;
       $213 = HEAP32[$8>>2]|0;
       HEAP8[$213>>0] = $212;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $214 = HEAP32[$8>>2]|0;
       HEAP32[$214>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $215 = ($$1250|0)<(0);
       $216 = $215 << 31 >> 31;
       $217 = HEAP32[$8>>2]|0;
       $218 = $217;
       $219 = $218;
       HEAP32[$219>>2] = $$1250;
       $220 = (($218) + 4)|0;
       $221 = $220;
       HEAP32[$221>>2] = $216;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0245$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $222 = ($$0256>>>0)>(8);
      $223 = $222 ? $$0256 : 8;
      $224 = $spec$select | 8;
      $$1238 = 120;$$1257 = $223;$$3267 = $224;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1238 = $$0237;$$1257 = $$0256;$$3267 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $246 = $8;
      $247 = $246;
      $248 = HEAP32[$247>>2]|0;
      $249 = (($246) + 4)|0;
      $250 = $249;
      $251 = HEAP32[$250>>2]|0;
      $252 = (_fmt_o($248,$251,$13)|0);
      $253 = $spec$select & 8;
      $254 = ($253|0)==(0);
      $255 = $252;
      $256 = (($14) - ($255))|0;
      $257 = ($$0256|0)>($256|0);
      $258 = (($256) + 1)|0;
      $259 = $254 | $257;
      $spec$select297 = $259 ? $$0256 : $258;
      $$0231 = $252;$$1235 = 0;$$1240 = 83362;$$2258 = $spec$select297;$$4268 = $spec$select;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $260 = $8;
      $261 = $260;
      $262 = HEAP32[$261>>2]|0;
      $263 = (($260) + 4)|0;
      $264 = $263;
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)<(0);
      if ($266) {
       $267 = (_i64Subtract(0,0,($262|0),($265|0))|0);
       $268 = (getTempRet0() | 0);
       $269 = $8;
       $270 = $269;
       HEAP32[$270>>2] = $267;
       $271 = (($269) + 4)|0;
       $272 = $271;
       HEAP32[$272>>2] = $268;
       $$0234 = 1;$$0239 = 83362;$279 = $267;$280 = $268;
       label = 72;
       break L79;
      } else {
       $273 = $spec$select & 2048;
       $274 = ($273|0)==(0);
       $275 = $spec$select & 1;
       $276 = ($275|0)==(0);
       $$ = $276 ? 83362 : (83364);
       $spec$select298 = $274 ? $$ : (83363);
       $277 = $spec$select & 2049;
       $278 = ($277|0)!=(0);
       $spec$select299 = $278&1;
       $$0234 = $spec$select299;$$0239 = $spec$select298;$279 = $262;$280 = $265;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $195 = $8;
      $196 = $195;
      $197 = HEAP32[$196>>2]|0;
      $198 = (($195) + 4)|0;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $$0234 = 0;$$0239 = 83362;$279 = $197;$280 = $200;
      label = 72;
      break;
     }
     case 99:  {
      $300 = $8;
      $301 = $300;
      $302 = HEAP32[$301>>2]|0;
      $303 = (($300) + 4)|0;
      $304 = $303;
      $305 = HEAP32[$304>>2]|0;
      $306 = $302&255;
      HEAP8[$15>>0] = $306;
      $$1 = $15;$$2236 = 0;$$2241 = 83362;$$5 = 1;$$6270 = $194;$$pre$phiZ2D = $14;
      break;
     }
     case 115:  {
      $307 = HEAP32[$8>>2]|0;
      $308 = ($307|0)==(0|0);
      $309 = $308 ? 83372 : $307;
      $310 = (_memchr($309,0,$$0256)|0);
      $311 = ($310|0)==(0|0);
      $312 = $310;
      $313 = $309;
      $314 = (($312) - ($313))|0;
      $315 = (($309) + ($$0256)|0);
      $$3259 = $311 ? $$0256 : $314;
      $$1252 = $311 ? $315 : $310;
      $$pre370 = $$1252;
      $$1 = $309;$$2236 = 0;$$2241 = 83362;$$5 = $$3259;$$6270 = $194;$$pre$phiZ2D = $$pre370;
      break;
     }
     case 67:  {
      $316 = $8;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      HEAP32[$10>>2] = $318;
      HEAP32[$16>>2] = 0;
      HEAP32[$8>>2] = $10;
      $$4260372 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $322 = ($$0256|0)==(0);
      if ($322) {
       _pad_667($0,32,$$1262,0,$spec$select);
       $$0242315373 = 0;
       label = 89;
      } else {
       $$4260372 = $$0256;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $345 = +HEAPF64[$8>>3];
      $346 = (FUNCTION_TABLE_iidiiii[$5 & 127]($0,$345,$$1262,$$0256,$spec$select,$$0237)|0);
      $$0245$ph$be = $346;
      break L77;
      break;
     }
     default: {
      $$1 = $22;$$2236 = 0;$$2241 = 83362;$$5 = $$0256;$$6270 = $spec$select;$$pre$phiZ2D = $14;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $225 = $8;
      $226 = $225;
      $227 = HEAP32[$226>>2]|0;
      $228 = (($225) + 4)|0;
      $229 = $228;
      $230 = HEAP32[$229>>2]|0;
      $231 = $$1238 & 32;
      $232 = (_fmt_x($227,$230,$13,$231)|0);
      $233 = $8;
      $234 = $233;
      $235 = HEAP32[$234>>2]|0;
      $236 = (($233) + 4)|0;
      $237 = $236;
      $238 = HEAP32[$237>>2]|0;
      $239 = ($235|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      $242 = $$3267 & 8;
      $243 = ($242|0)==(0);
      $or$cond280 = $243 | $241;
      $244 = $$1238 >>> 4;
      $245 = (83362 + ($244)|0);
      $spec$select295 = $or$cond280 ? 83362 : $245;
      $spec$select296 = $or$cond280 ? 0 : 2;
      $$0231 = $232;$$1235 = $spec$select296;$$1240 = $spec$select295;$$2258 = $$1257;$$4268 = $$3267;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $281 = (_fmt_u($279,$280,$13)|0);
      $$0231 = $281;$$1235 = $$0234;$$1240 = $$0239;$$2258 = $$0256;$$4268 = $spec$select;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $323 = HEAP32[$8>>2]|0;
      $$0232336 = $323;$$0242335 = 0;
      while(1) {
       $324 = HEAP32[$$0232336>>2]|0;
       $325 = ($324|0)==(0);
       if ($325) {
        $$0242315 = $$0242335;
        break;
       }
       $326 = (_wctomb($11,$324)|0);
       $327 = ($326|0)<(0);
       $328 = (($$4260372) - ($$0242335))|0;
       $329 = ($326>>>0)>($328>>>0);
       $or$cond285 = $327 | $329;
       if ($or$cond285) {
        label = 83;
        break;
       }
       $330 = ((($$0232336)) + 4|0);
       $331 = (($326) + ($$0242335))|0;
       $332 = ($$4260372>>>0)>($331>>>0);
       if ($332) {
        $$0232336 = $330;$$0242335 = $331;
       } else {
        $$0242315 = $331;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($327) {
        $$0 = -1;
        break L1;
       } else {
        $$0242315 = $$0242335;
       }
      }
      _pad_667($0,32,$$1262,$$0242315,$spec$select);
      $333 = ($$0242315|0)==(0);
      if ($333) {
       $$0242315373 = 0;
       label = 89;
      } else {
       $334 = HEAP32[$8>>2]|0;
       $$1233342 = $334;$$1243341 = 0;
       while(1) {
        $335 = HEAP32[$$1233342>>2]|0;
        $336 = ($335|0)==(0);
        if ($336) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $337 = (_wctomb($11,$335)|0);
        $338 = (($337) + ($$1243341))|0;
        $339 = ($338|0)>($$0242315|0);
        if ($339) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $340 = ((($$1233342)) + 4|0);
        _out($0,$11,$337);
        $341 = ($338>>>0)<($$0242315>>>0);
        if ($341) {
         $$1233342 = $340;$$1243341 = $338;
        } else {
         $$0242315373 = $$0242315;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $282 = ($$2258|0)>(-1);
     $283 = $$4268 & -65537;
     $spec$select283 = $282 ? $283 : $$4268;
     $284 = $8;
     $285 = $284;
     $286 = HEAP32[$285>>2]|0;
     $287 = (($284) + 4)|0;
     $288 = $287;
     $289 = HEAP32[$288>>2]|0;
     $290 = ($286|0)!=(0);
     $291 = ($289|0)!=(0);
     $292 = $290 | $291;
     $293 = ($$2258|0)!=(0);
     $or$cond = $293 | $292;
     $294 = $$0231;
     $295 = (($14) - ($294))|0;
     $296 = $292 ^ 1;
     $297 = $296&1;
     $298 = (($295) + ($297))|0;
     $299 = ($$2258|0)>($298|0);
     $$2258$ = $299 ? $$2258 : $298;
     $spec$select300 = $or$cond ? $$2258$ : 0;
     $spec$select301 = $or$cond ? $$0231 : $13;
     $$1 = $spec$select301;$$2236 = $$1235;$$2241 = $$1240;$$5 = $spec$select300;$$6270 = $spec$select283;$$pre$phiZ2D = $14;
    }
    else if ((label|0) == 89) {
     label = 0;
     $342 = $spec$select ^ 8192;
     _pad_667($0,32,$$1262,$$0242315373,$342);
     $343 = ($$1262|0)>($$0242315373|0);
     $344 = $343 ? $$1262 : $$0242315373;
     $$0245$ph$be = $344;
     break;
    }
    $347 = $$1;
    $348 = (($$pre$phiZ2D) - ($347))|0;
    $349 = ($$5|0)<($348|0);
    $spec$select286 = $349 ? $348 : $$5;
    $350 = (($spec$select286) + ($$2236))|0;
    $351 = ($$1262|0)<($350|0);
    $$2263 = $351 ? $350 : $$1262;
    _pad_667($0,32,$$2263,$350,$$6270);
    _out($0,$$2241,$$2236);
    $352 = $$6270 ^ 65536;
    _pad_667($0,48,$$2263,$350,$352);
    _pad_667($0,48,$spec$select286,$348,0);
    _out($0,$$1,$348);
    $353 = $$6270 ^ 8192;
    _pad_667($0,32,$$2263,$350,$353);
    $$0245$ph$be = $$2263;
   }
  } while(0);
  $$0245$ph = $$0245$ph$be;$$0249$ph = $$1250;$$0271$ph = $$3274;
 }
 L123: do {
  if ((label|0) == 92) {
   $354 = ($0|0)==(0|0);
   if ($354) {
    $355 = ($$0271$ph|0)==(0);
    if ($355) {
     $$0 = 0;
    } else {
     $$2244322 = 1;
     while(1) {
      $356 = (($4) + ($$2244322<<2)|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($357|0)==(0);
      if ($358) {
       break;
      }
      $359 = (($3) + ($$2244322<<3)|0);
      _pop_arg($359,$357,$2,$6);
      $360 = (($$2244322) + 1)|0;
      $361 = ($360>>>0)<(10);
      if ($361) {
       $$2244322 = $360;
      } else {
       $$0 = 1;
       break L123;
      }
     }
     $$3319 = $$2244322;
     while(1) {
      $364 = (($4) + ($$3319<<2)|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ($365|0)==(0);
      $363 = (($$3319) + 1)|0;
      if (!($366)) {
       $$0 = -1;
       break L123;
      }
      $362 = ($363>>>0)<(10);
      if ($362) {
       $$3319 = $363;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1250;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0;
 var $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1>>>0)>(20);
 L1: do {
  if (!($4)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $5 = $arglist_current;
     $6 = ((0) + 4|0);
     $expanded25 = $6;
     $expanded = (($expanded25) - 1)|0;
     $7 = (($5) + ($expanded))|0;
     $8 = ((0) + 4|0);
     $expanded29 = $8;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $9 = $7 & $expanded27;
     $10 = $9;
     $11 = HEAP32[$10>>2]|0;
     $arglist_next = ((($10)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $11;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $12 = $arglist_current2;
     $13 = ((0) + 4|0);
     $expanded32 = $13;
     $expanded31 = (($expanded32) - 1)|0;
     $14 = (($12) + ($expanded31))|0;
     $15 = ((0) + 4|0);
     $expanded36 = $15;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $16 = $14 & $expanded34;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $arglist_next3 = ((($17)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $19 = ($18|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = $0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = $20;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $25 = $arglist_current5;
     $26 = ((0) + 4|0);
     $expanded39 = $26;
     $expanded38 = (($expanded39) - 1)|0;
     $27 = (($25) + ($expanded38))|0;
     $28 = ((0) + 4|0);
     $expanded43 = $28;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $29 = $27 & $expanded41;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $arglist_next6 = ((($30)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $32 = $0;
     $33 = $32;
     HEAP32[$33>>2] = $31;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $36 = $arglist_current8;
     $37 = ((0) + 8|0);
     $expanded46 = $37;
     $expanded45 = (($expanded46) - 1)|0;
     $38 = (($36) + ($expanded45))|0;
     $39 = ((0) + 8|0);
     $expanded50 = $39;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $40 = $38 & $expanded48;
     $41 = $40;
     $42 = $41;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($42) + 4)|0;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $arglist_next9 = ((($41)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $48 = $0;
     $49 = $48;
     HEAP32[$49>>2] = $44;
     $50 = (($48) + 4)|0;
     $51 = $50;
     HEAP32[$51>>2] = $47;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $52 = $arglist_current11;
     $53 = ((0) + 4|0);
     $expanded53 = $53;
     $expanded52 = (($expanded53) - 1)|0;
     $54 = (($52) + ($expanded52))|0;
     $55 = ((0) + 4|0);
     $expanded57 = $55;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $56 = $54 & $expanded55;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $arglist_next12 = ((($57)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $59 = $58&65535;
     $60 = $59 << 16 >> 16;
     $61 = ($60|0)<(0);
     $62 = $61 << 31 >> 31;
     $63 = $0;
     $64 = $63;
     HEAP32[$64>>2] = $60;
     $65 = (($63) + 4)|0;
     $66 = $65;
     HEAP32[$66>>2] = $62;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $67 = $arglist_current14;
     $68 = ((0) + 4|0);
     $expanded60 = $68;
     $expanded59 = (($expanded60) - 1)|0;
     $69 = (($67) + ($expanded59))|0;
     $70 = ((0) + 4|0);
     $expanded64 = $70;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $71 = $69 & $expanded62;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $arglist_next15 = ((($72)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $73 & 65535;
     $74 = $0;
     $75 = $74;
     HEAP32[$75>>2] = $$mask31;
     $76 = (($74) + 4)|0;
     $77 = $76;
     HEAP32[$77>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $78 = $arglist_current17;
     $79 = ((0) + 4|0);
     $expanded67 = $79;
     $expanded66 = (($expanded67) - 1)|0;
     $80 = (($78) + ($expanded66))|0;
     $81 = ((0) + 4|0);
     $expanded71 = $81;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $82 = $80 & $expanded69;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $arglist_next18 = ((($83)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $85 = $84&255;
     $86 = $85 << 24 >> 24;
     $87 = ($86|0)<(0);
     $88 = $87 << 31 >> 31;
     $89 = $0;
     $90 = $89;
     HEAP32[$90>>2] = $86;
     $91 = (($89) + 4)|0;
     $92 = $91;
     HEAP32[$92>>2] = $88;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $93 = $arglist_current20;
     $94 = ((0) + 4|0);
     $expanded74 = $94;
     $expanded73 = (($expanded74) - 1)|0;
     $95 = (($93) + ($expanded73))|0;
     $96 = ((0) + 4|0);
     $expanded78 = $96;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $97 = $95 & $expanded76;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $arglist_next21 = ((($98)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $99 & 255;
     $100 = $0;
     $101 = $100;
     HEAP32[$101>>2] = $$mask;
     $102 = (($100) + 4)|0;
     $103 = $102;
     HEAP32[$103>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $104 = $arglist_current23;
     $105 = ((0) + 8|0);
     $expanded81 = $105;
     $expanded80 = (($expanded81) - 1)|0;
     $106 = (($104) + ($expanded80))|0;
     $107 = ((0) + 8|0);
     $expanded85 = $107;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $108 = $106 & $expanded83;
     $109 = $108;
     $110 = +HEAPF64[$109>>3];
     $arglist_next24 = ((($109)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $110;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$3 & 127]($0,$2);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (38352 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_667($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_423()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 25;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 25;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_423() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67736|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $23 = (($$03846) + -1)|0;
      $24 = (($0) + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $22 = ($23|0)==(0);
      if ($22) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $23;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 127]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___DOUBLE_BITS_670($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_dummy_560($0)|0);
 $2 = (___wasi_fd_close(($1|0))|0);
 $3 = ($2<<16>>16)==(27);
 $4 = $3 ? 0 : $2;
 $5 = (___wasi_syscall_ret($4)|0);
 return ($5|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $2 = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall197(197,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-8);
 if ($5) {
  $6 = (___wasi_fd_is_valid($0)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   $9 = $2;
   HEAP32[$vararg_buffer2>>2] = $9;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $3;
   $10 = (___syscall195(195,($vararg_buffer2|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = (___syscall_ret($4)|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___wasi_fd_is_valid($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = (___wasi_fd_fdstat_get(($0|0),($1|0))|0);
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = $2&65535;
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = $4;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=83412; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($0)) + 14|0);
  HEAP8[$3>>0] = 48;
  $4 = ((($0)) + 15|0);
  HEAP8[$4>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $5 = (($$027>>>0) / 10)&-1;
   $6 = (($$126) + 1)|0;
   $7 = ($$027>>>0)<(10);
   if ($7) {
    break;
   } else {
    $$027 = $5;$$126 = $6;
   }
  }
  $8 = (($0) + ($6)|0);
  HEAP8[$8>>0] = 0;
  $$02324 = $1;$$225 = $6;
  while(1) {
   $9 = (($$02324>>>0) / 10)&-1;
   $10 = ($9*10)|0;
   $11 = (($$02324) - ($10))|0;
   $12 = $11 | 48;
   $13 = $12&255;
   $14 = (($$225) + -1)|0;
   $15 = (($0) + ($14)|0);
   HEAP8[$15>>0] = $13;
   $16 = ($$02324>>>0)<(10);
   if ($16) {
    break;
   } else {
    $$02324 = $9;$$225 = $14;
   }
  }
 }
 return;
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2080)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    (___wasi_fd_close(($1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $2 = sp;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($15|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $$pre = (((($0)) + 32|0) + ($2)|0);
   $$pre$phiZ2D = $$pre;$17 = $2;
   label = 7;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 32|0);
   $8 = $7;
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $8;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $9 = (___syscall220(220,($vararg_buffer|0))|0);
   $10 = ($9|0)<(1);
   if (!($10)) {
    HEAP32[$3>>2] = $9;
    HEAP32[$1>>2] = 0;
    $$pre$phiZ2D = $7;$17 = 0;
    label = 7;
    break;
   }
   switch ($9|0) {
   case 0: case -44:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $11 = (0 - ($9))|0;
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = $11;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 7) {
  $13 = ((($$pre$phiZ2D)) + 16|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = (($17) + ($15))|0;
  HEAP32[$1>>2] = $16;
  $18 = ((($$pre$phiZ2D)) + 8|0);
  $19 = $18;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($0)) + 8|0);
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $21;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
  $$1 = $$pre$phiZ2D;
 }
 STACKTOP = sp;return ($$1|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$169$be = 0, $$2 = 0, $$2$be = 0, $$be = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp;
 $5 = sp + 192|0;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$43 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $42 = ($43|0)==(1);
    $or$cond = $41 & $42;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     } else {
      label = 19;
     }
    } else {
     $46 = ($$2|0)<(2);
     if ($46) {
      label = 19;
     } else {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169$be = $60;$$2$be = $49;$$be = $59;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $47 = (_pntz($5)|0);
     _shr($5,$47);
     $48 = (($47) + ($$2))|0;
     $$pre$pre = HEAP32[$5>>2]|0;
     $$pre76 = (($$169) + ($12)|0);
     $$169$be = $$pre76;$$2$be = $48;$$be = $$pre$pre;
    }
    $$169 = $$169$be;$$2 = $$2$be;$43 = $$be;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$02934 = 0, $$03133 = 0, $$035 = 0, $$1 = 0, $$130 = 0, $$132 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02934 = $0;$$03133 = $3;$$035 = 1;$14 = $0;
   while(1) {
    $8 = (($$02934) + ($7)|0);
    $9 = (($$03133) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 63]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 63]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$035;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 63]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($5) + ($$035<<2)|0);
    if ($20) {
     HEAP32[$21>>2] = $13;
     $22 = (($$03133) + -1)|0;
     $$130 = $13;$$132 = $22;
    } else {
     HEAP32[$21>>2] = $8;
     $$130 = $8;$$132 = $9;
    }
    $$1 = (($$035) + 1)|0;
    $23 = ($$132|0)>(1);
    if (!($23)) {
     $$0$lcssa = $$1;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02934 = $$130;$$03133 = $$132;$$035 = $$1;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 63]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 63]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 63]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 63]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_730($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_730($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $spec$select = $9 ? 0 : $8;
  return ($spec$select|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_730($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $$068 & 2;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     (_memcpy(($10|0),($9|0),($8|0))|0);
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      (_memcpy(($12|0),($15|0),($8|0))|0);
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (38368 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 38464;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 38464;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 104|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (83427 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (83436 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $81 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $81 = $79;
      }
      $80 = ($81|0)==(40);
      if (!($80)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 28;
       ___shlim($0,0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 28;
      ___shlim($0,0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 104|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $29 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $29 = $27;
  }
  $28 = ($29|0)==(48);
  if ($28) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $42 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $42 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = (getTempRet0() | 0);
    $41 = ($42|0)==(48);
    if ($41) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $42;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $29;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$52 = 0;$54 = 0;$97 = $212;$99 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $54;$215 = $52;$216 = $54;$217 = $52;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $51 = ($52|0)<(0);
   $53 = ($54>>>0)<(8);
   $55 = ($52|0)==(0);
   $56 = $55 & $53;
   $57 = $51 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($52|0)<(0);
     $61 = ($54>>>0)<(14);
     $62 = ($52|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($54|0),($52|0),1,0)|0);
   $74 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $97;$215 = $99;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$52 = $217;$54 = $216;$97 = $214;$99 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $96 = $95 ? $54 : $97;
   $98 = $95 ? $52 : $99;
   $100 = ($52|0)<(0);
   $101 = ($54>>>0)<(8);
   $102 = ($52|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $54;$107 = $52;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = (getTempRet0() | 0);
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = (getTempRet0() | 0);
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($96|0),($98|0),2)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = (getTempRet0() | 0);
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = (getTempRet0() | 0);
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 68;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 68;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = (getTempRet0() | 0);
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = (getTempRet0() | 0);
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = (getTempRet0() | 0);
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 68;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 104|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $26 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $26 = $24;
  }
  $25 = ($26|0)==(48);
  if ($25) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = (getTempRet0() | 0);
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $39 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $39 = $37;
    }
    $38 = ($39|0)==(48);
    if ($38) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $39;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $26;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = (getTempRet0() | 0);
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$77 = $383;$78 = $381;$80 = $384;$81 = $382;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$77 = 0;$78 = $375;$80 = 0;$81 = $376;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $76 = $75 ? $77 : $78;
   $79 = $75 ? $80 : $81;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $76;$388 = $79;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $76;$394 = $79;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = (getTempRet0() | 0);
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($76|0),($79|0))|0);
   $98 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$110 = $97;$111 = $77;$113 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$110 = $387;$111 = $385;$113 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$110 = $393;$111 = $390;$113 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 28;
   ___shlim($0,0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $109 = ($110|0)==($111|0);
   $112 = ($113|0)==($114|0);
   $115 = $109 & $112;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = $105 >>> $2;
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($113|0)>($129|0);
   $131 = ($110>>>0)>($127>>>0);
   $132 = ($113|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 68;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($113|0)<($141|0);
   $143 = ($110>>>0)<($139>>>0);
   $144 = ($113|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 68;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($110|0);
    $161 = ($110|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($110|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($110|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($110))|0;
      $173 = (40272 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($110, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = $$pre >>> $177;
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($110) + -10)|0;
      $185 = (40272 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($110|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $110;
   } else {
    $191 = ($110|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (40272 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $110;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $110;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = (getTempRet0() | 0);
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = (getTempRet0() | 0);
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = (getTempRet0() | 0);
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = (getTempRet0() | 0);
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = (getTempRet0() | 0);
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $297 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (67980 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = $280 >>> $spec$select420;
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $296 = ($297|0)==($spec$select443|0);
      if (!($296)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $297;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 68;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = (getTempRet0() | 0);
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = (getTempRet0() | 0);
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = (getTempRet0() | 0);
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = (getTempRet0() | 0);
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 setTempRet0(($99) | 0);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_273($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$101 = $92;$158 = $97;$159 = $87;$160 = $88;$99 = $91;
      while(1) {
       if ($158) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$101 = $111;$158 = $116;$159 = $106;$160 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $124 = $120;$126 = $118;
     }
    } else {
     $124 = $157;$126 = $156;
    }
    $123 = ($124>>>0)<(1048576);
    $125 = ($126>>>0)<(0);
    $127 = ($124|0)==(1048576);
    $128 = $127 & $125;
    $129 = $123 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $126;$131 = $124;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $126;$142 = $124;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_273($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $spec$select = $5 ? 1291888 : $3;
 $6 = HEAP32[$spec$select>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $spec$select47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$spec$select47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_414()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$spec$select47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 19;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (37408 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 19;
       break L1;
      }
      $41 = $$04051 << 6;
      $42 = (($34) + -128)|0;
      $43 = $42 | $41;
      $44 = (($$04350) + -1)|0;
      $45 = ($43|0)<(0);
      if ($45) {
       $$03952$pn = $$03952;$47 = $43;$53 = $44;
       while(1) {
        $56 = ((($$03952$pn)) + 1|0);
        $57 = ($53|0)==(0);
        if ($57) {
         $$2 = $47;
         break L14;
        }
        $49 = HEAP8[$56>>0]|0;
        $58 = $49 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         label = 19;
         break L1;
        }
        $46 = $47 << 6;
        $48 = $49&255;
        $50 = (($48) + -128)|0;
        $51 = $50 | $46;
        $52 = (($53) + -1)|0;
        $54 = ($51|0)<(0);
        if ($54) {
         $$03952$pn = $56;$47 = $51;$53 = $52;
        } else {
         $$lcssa = $52;$$lcssa56 = $51;
         break;
        }
       }
      } else {
       $$lcssa = $44;$$lcssa56 = $43;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select47>>2] = $$lcssa56;
      $55 = (($2) - ($$lcssa))|0;
      $$0 = $55;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $60 = (___errno_location()|0);
  HEAP32[$60>>2] = 25;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_414() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function _log1p($0) {
 $0 = +$0;
 var $$081 = 0.0, $$1 = 0.0, $$183 = 0.0, $$185 = 0.0, $$2 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $phitmp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1071284858);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = ($2>>>0)>(3220176895);
   if ($5) {
    $6 = $0 == -1.0;
    if ($6) {
     $$081 = -inf;
     break;
    }
    $7 = $0 - $0;
    $8 = $7 / 0.0;
    $$081 = $8;
    break;
   } else {
    $9 = (_bitshift64Shl(($2|0),0,1)|0);
    $10 = (getTempRet0() | 0);
    $11 = ($9>>>0)<(2034237440);
    if ($11) {
     $$081 = $0;
     break;
    }
    $12 = ($2>>>0)<(3218259653);
    if ($12) {
     $$1 = 0.0;$$183 = $0;$$2 = 0.0;
     label = 11;
     break;
    } else {
     label = 8;
     break;
    }
   }
  } else {
   $13 = ($2>>>0)>(2146435071);
   if ($13) {
    $$081 = $0;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $14 = $0 + 1.0;
  HEAPF64[tempDoublePtr>>3] = $14;$15 = HEAP32[tempDoublePtr>>2]|0;
  $16 = HEAP32[tempDoublePtr+4>>2]|0;
  $17 = (($16) + 614242)|0;
  $18 = $17 >>> 20;
  $19 = (($18) + -1023)|0;
  $20 = ($17>>>0)<(1129316352);
  if ($20) {
   $21 = ($17>>>0)>(1074790399);
   $22 = $14 - $0;
   $23 = 1.0 - $22;
   $24 = $14 + -1.0;
   $25 = $0 - $24;
   $26 = $21 ? $23 : $25;
   $27 = $26 / $14;
   $$185 = $27;
  } else {
   $$185 = 0.0;
  }
  $28 = $17 & 1048575;
  $29 = (($28) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $29;$30 = +HEAPF64[tempDoublePtr>>3];
  $31 = $30 + -1.0;
  $phitmp = (+($19|0));
  $$1 = $phitmp;$$183 = $31;$$2 = $$185;
  label = 11;
 }
 if ((label|0) == 11) {
  $32 = $$183 * 0.5;
  $33 = $$183 * $32;
  $34 = $$183 + 2.0;
  $35 = $$183 / $34;
  $36 = $35 * $35;
  $37 = $36 * $36;
  $38 = $37 * 0.15313837699209373;
  $39 = $38 + 0.22222198432149784;
  $40 = $37 * $39;
  $41 = $40 + 0.39999999999409419;
  $42 = $37 * $41;
  $43 = $37 * 0.14798198605116586;
  $44 = $43 + 0.1818357216161805;
  $45 = $37 * $44;
  $46 = $45 + 0.28571428743662391;
  $47 = $37 * $46;
  $48 = $47 + 0.66666666666667351;
  $49 = $36 * $48;
  $50 = $42 + $49;
  $51 = $33 + $50;
  $52 = $35 * $51;
  $53 = $$1 * 1.9082149292705877E-10;
  $54 = $$2 + $53;
  $55 = $54 + $52;
  $56 = $55 - $33;
  $57 = $$183 + $56;
  $58 = $$1 * 0.69314718036912382;
  $59 = $58 + $57;
  $$081 = $59;
 }
 return (+$$081);
}
function _ldexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $spec$select;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 132|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 128|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 128|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_603()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 132|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_603() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(83440,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 28;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = (___fdopen($11,$1)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    (___wasi_fd_close(($11|0))|0);
    $$0 = 0;
   } else {
    $$0 = $13;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(83440,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 28;
  $$0 = 0;
 } else {
  $8 = (_malloc(1176)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,144)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   $12 = HEAP8[$1>>0]|0;
   if ($11) {
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = ($12<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 3;
    $16 = (___syscall221(221,($vararg_buffer|0))|0);
    $17 = $16 & 1024;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = $16 | 1024;
     HEAP32[$vararg_buffer2>>2] = $0;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = 4;
     $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
     HEAP32[$vararg_ptr6>>2] = $19;
     (___syscall221(221,($vararg_buffer2|0))|0);
    }
    $20 = HEAP32[$8>>2]|0;
    $21 = $20 | 128;
    HEAP32[$8>>2] = $21;
    $28 = $21;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $28 = $$pre;
   }
   $22 = ((($8)) + 60|0);
   HEAP32[$22>>2] = $0;
   $23 = ((($8)) + 152|0);
   $24 = ((($8)) + 44|0);
   HEAP32[$24>>2] = $23;
   $25 = ((($8)) + 48|0);
   HEAP32[$25>>2] = 1024;
   $26 = ((($8)) + 75|0);
   HEAP8[$26>>0] = -1;
   $27 = $28 & 8;
   $29 = ($27|0)==(0);
   if ($29) {
    $30 = $2;
    HEAP32[$vararg_buffer7>>2] = $0;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = 21523;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $30;
    $31 = (___syscall54(54,($vararg_buffer7|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$26>>0] = 10;
    }
   }
   $33 = ((($8)) + 32|0);
   HEAP32[$33>>2] = 68;
   $34 = ((($8)) + 36|0);
   HEAP32[$34>>2] = 34;
   $35 = ((($8)) + 40|0);
   HEAP32[$35>>2] = 35;
   $36 = ((($8)) + 12|0);
   HEAP32[$36>>2] = 33;
   $37 = HEAP32[(1291824)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($8)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   $40 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((1291892|0));
 return (1291900|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((1291892|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 63]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 96|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[16933]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[16933]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 127]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = ((($0)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   (FUNCTION_TABLE_iiiii[$21 & 63]($0,$17,$19,1)|0);
   $22 = (getTempRet0() | 0);
  }
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$05963 = 0, $$06065 = 0, $$06164 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond72 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $16 = $6;
 } else {
  $16 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $15 = ($16|0)==(0);
  if (!($15)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $18 = ($7|0)==(0);
  L11: do {
   if ($18) {
    $$1 = $0;
    label = 17;
   } else {
    $19 = ((($2)) + 4|0);
    $20 = ((($2)) + 8|0);
    $$06065 = $7;$$06164 = $0;
    while(1) {
     $21 = HEAP32[$19>>2]|0;
     $22 = HEAP32[$20>>2]|0;
     $23 = $21;
     $24 = (($22) - ($23))|0;
     $25 = (_memchr($21,10,$24)|0);
     $26 = ($25|0)==(0|0);
     $27 = $25;
     $28 = (1 - ($23))|0;
     $29 = (($28) + ($27))|0;
     $30 = $26 ? $24 : $29;
     $31 = ($30>>>0)<($$06065>>>0);
     $32 = $31 ? $30 : $$06065;
     (_memcpy(($$06164|0),($21|0),($32|0))|0);
     $33 = HEAP32[$19>>2]|0;
     $34 = (($33) + ($32)|0);
     HEAP32[$19>>2] = $34;
     $35 = (($$06164) + ($32)|0);
     $36 = (($$06065) - ($32))|0;
     $37 = ($36|0)!=(0);
     $or$cond = $26 & $37;
     if (!($or$cond)) {
      $$1 = $35;
      label = 17;
      break L11;
     }
     $38 = HEAP32[$20>>2]|0;
     $39 = ($34>>>0)<($38>>>0);
     if ($39) {
      $40 = ((($34)) + 1|0);
      HEAP32[$19>>2] = $40;
      $41 = HEAP8[$34>>0]|0;
      $42 = $41&255;
      $50 = $42;
     } else {
      $43 = (___uflow($2)|0);
      $44 = ($43|0)<(0);
      if ($44) {
       break;
      } else {
       $50 = $43;
      }
     }
     $49 = $50&255;
     $51 = ((($35)) + 1|0);
     HEAP8[$35>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)==(10);
     $53 = (($36) + -1)|0;
     $54 = ($53|0)==(0);
     $or$cond72 = $52 | $54;
     if ($or$cond72) {
      $$1 = $51;
      label = 17;
      break L11;
     } else {
      $$06065 = $53;$$06164 = $51;
     }
    }
    $45 = ($35|0)==($0|0);
    if ($45) {
     $$05963 = 0;
    } else {
     $46 = HEAP32[$2>>2]|0;
     $47 = $46 & 16;
     $48 = ($47|0)==(0);
     if ($48) {
      $$05963 = 0;
     } else {
      $$1 = $35;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $55 = ($0|0)==(0|0);
   if ($55) {
    $$05963 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$05963 = $0;
   }
  }
  $56 = ($16|0)==(0);
  if ($56) {
   $$0 = $$05963;
  } else {
   ___unlockfile($2);
   $$0 = $$05963;
  }
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp;
 _memset(($3|0),0,144)|0;
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 69;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0266$lcssa = 0, $$0266407 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273418 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0288409 = 0, $$0290414 = 0, $$0294 = 0, $$0295 = 0, $$0308412 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0, $$1271 = 0;
 var $$1274 = 0, $$1281 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3406 = 0, $$4 = 0, $$4284 = 0, $$5 = 0, $$5313 = 0, $$6 = 0;
 var $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$not = 0, $$old4 = 0, $$ph$ph = 0, $$pr = 0, $$pr332 = 0, $$pre = 0, $$pre$phi491Z2D = 0, $$pre$phiZ2D = 0, $$pre483 = 0, $$pre485 = 0, $$pre486 = 0, $$pre488 = 0;
 var $$pre490 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0;
 var $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor334 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond321 = 0, $or$cond5 = 0, $spec$select = 0, $spec$select319 = 0, $spec$select320 = 0, $spec$select322 = 0, $spec$select323 = 0, $spec$select324 = 0, $spec$select325 = 0, $spec$select326 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 264|0;
 $4 = sp;
 $5 = sp + 260|0;
 $6 = sp + 272|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $386 = $10;
 } else {
  $386 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3293 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 104|0);
   $15 = ((($0)) + 120|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273418 = $1;$$0290414 = 0;$$0308412 = 0;$22 = $11;$387 = 0;$56 = 0;$57 = 0;
   L6: while(1) {
    $21 = $22&255;
    $23 = (_isspace($21)|0);
    $24 = ($23|0)==(0);
    L8: do {
     if ($24) {
      $62 = HEAP8[$$0273418>>0]|0;
      $63 = ($62<<24>>24)==(37);
      L10: do {
       if ($63) {
        $64 = ((($$0273418)) + 1|0);
        $65 = HEAP8[$64>>0]|0;
        L12: do {
         switch ($65<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $87 = ((($$0273418)) + 2|0);
          $$0295 = 0;$$2275 = $87;
          break;
         }
         default: {
          $88 = $65&255;
          $89 = (_isdigit($88)|0);
          $90 = ($89|0)==(0);
          if (!($90)) {
           $91 = ((($$0273418)) + 2|0);
           $92 = HEAP8[$91>>0]|0;
           $93 = ($92<<24>>24)==(36);
           if ($93) {
            $94 = HEAP8[$64>>0]|0;
            $95 = $94&255;
            $96 = (($95) + -48)|0;
            $97 = (_arg_n($2,$96)|0);
            $98 = ((($$0273418)) + 3|0);
            $$0295 = $97;$$2275 = $98;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $99 = $arglist_current;
          $100 = ((0) + 4|0);
          $expanded1 = $100;
          $expanded = (($expanded1) - 1)|0;
          $101 = (($99) + ($expanded))|0;
          $102 = ((0) + 4|0);
          $expanded5 = $102;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $103 = $101 & $expanded3;
          $104 = $103;
          $105 = HEAP32[$104>>2]|0;
          $arglist_next = ((($104)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0295 = $105;$$2275 = $64;
         }
         }
        } while(0);
        $106 = HEAP8[$$2275>>0]|0;
        $107 = $106&255;
        $108 = (_isdigit($107)|0);
        $109 = ($108|0)==(0);
        if ($109) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266407 = 0;$$3406 = $$2275;
         while(1) {
          $110 = ($$0266407*10)|0;
          $111 = HEAP8[$$3406>>0]|0;
          $112 = $111&255;
          $113 = (($110) + -48)|0;
          $114 = (($113) + ($112))|0;
          $115 = ((($$3406)) + 1|0);
          $116 = HEAP8[$115>>0]|0;
          $117 = $116&255;
          $118 = (_isdigit($117)|0);
          $119 = ($118|0)==(0);
          if ($119) {
           $$0266$lcssa = $114;$$3$lcssa = $115;
           break;
          } else {
           $$0266407 = $114;$$3406 = $115;
          }
         }
        }
        $120 = HEAP8[$$3$lcssa>>0]|0;
        $121 = ($120<<24>>24)==(109);
        $122 = ((($$3$lcssa)) + 1|0);
        if ($121) {
         $123 = ($$0295|0)!=(0|0);
         $124 = $123&1;
         $$pr = HEAP8[$122>>0]|0;
         $$pre486 = ((($$3$lcssa)) + 2|0);
         $$0270 = $124;$$1309 = 0;$$4 = $122;$$pre$phiZ2D = $$pre486;$125 = $$pr;$392 = 0;
        } else {
         $$0270 = 0;$$1309 = $$0308412;$$4 = $$3$lcssa;$$pre$phiZ2D = $122;$125 = $120;$392 = $387;
        }
        switch ($125<<24>>24) {
        case 104:  {
         $126 = HEAP8[$$pre$phiZ2D>>0]|0;
         $127 = ($126<<24>>24)==(104);
         $128 = ((($$4)) + 2|0);
         $spec$select323 = $127 ? $128 : $$pre$phiZ2D;
         $spec$select324 = $127 ? -2 : -1;
         $$0268 = $spec$select324;$$5 = $spec$select323;
         break;
        }
        case 108:  {
         $129 = HEAP8[$$pre$phiZ2D>>0]|0;
         $130 = ($129<<24>>24)==(108);
         $131 = ((($$4)) + 2|0);
         $spec$select325 = $130 ? $131 : $$pre$phiZ2D;
         $spec$select326 = $130 ? 3 : 1;
         $$0268 = $spec$select326;$$5 = $spec$select325;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $$pre$phiZ2D;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $$pre$phiZ2D;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $$pre$phiZ2D;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$8316 = $$1309;$393 = $392;
         label = 143;
         break L6;
        }
        }
        $132 = HEAP8[$$5>>0]|0;
        $133 = $132&255;
        $134 = $133 & 47;
        $135 = ($134|0)==(3);
        $136 = $133 | 32;
        $spec$select = $135 ? $136 : $133;
        $spec$select319 = $135 ? 1 : $$0268;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $137 = ($$0266$lcssa|0)>(1);
         $spec$select320 = $137 ? $$0266$lcssa : 1;
         $$1267 = $spec$select320;$372 = $56;$373 = $57;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$372 = $56;$373 = $57;
         break;
        }
        case 110:  {
         _store_int($$0295,$spec$select319,$56,$57);
         $$12 = $$5;$$1291 = $$0290414;$$7315 = $$1309;$388 = $392;$389 = $56;$390 = $57;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0,0);
         while(1) {
          $138 = HEAP32[$13>>2]|0;
          $139 = HEAP32[$14>>2]|0;
          $140 = ($138>>>0)<($139>>>0);
          if ($140) {
           $141 = ((($138)) + 1|0);
           HEAP32[$13>>2] = $141;
           $142 = HEAP8[$138>>0]|0;
           $143 = $142&255;
           $145 = $143;
          } else {
           $144 = (___shgetc($0)|0);
           $145 = $144;
          }
          $146 = (_isspace($145)|0);
          $147 = ($146|0)==(0);
          if ($147) {
           break;
          }
         }
         $148 = HEAP32[$14>>2]|0;
         $149 = ($148|0)==(0|0);
         if ($149) {
          $$pre483 = HEAP32[$13>>2]|0;
          $161 = $$pre483;
         } else {
          $150 = HEAP32[$13>>2]|0;
          $151 = ((($150)) + -1|0);
          HEAP32[$13>>2] = $151;
          $152 = $151;
          $161 = $152;
         }
         $153 = $15;
         $154 = $153;
         $155 = HEAP32[$154>>2]|0;
         $156 = (($153) + 4)|0;
         $157 = $156;
         $158 = HEAP32[$157>>2]|0;
         $159 = HEAP32[$16>>2]|0;
         $160 = (($161) - ($159))|0;
         $162 = ($160|0)<(0);
         $163 = $162 << 31 >> 31;
         $164 = (_i64Add(($155|0),($158|0),($56|0),($57|0))|0);
         $165 = (getTempRet0() | 0);
         $166 = (_i64Add(($164|0),($165|0),($160|0),($163|0))|0);
         $167 = (getTempRet0() | 0);
         $$1267 = $$0266$lcssa;$372 = $166;$373 = $167;
        }
        }
        $168 = ($$1267|0)<(0);
        $169 = $168 << 31 >> 31;
        ___shlim($0,$$1267,$169);
        $170 = HEAP32[$13>>2]|0;
        $171 = HEAP32[$14>>2]|0;
        $172 = ($170>>>0)<($171>>>0);
        if ($172) {
         $173 = ((($170)) + 1|0);
         HEAP32[$13>>2] = $173;
         $177 = $171;
        } else {
         $174 = (___shgetc($0)|0);
         $175 = ($174|0)<(0);
         if ($175) {
          $$8316 = $$1309;$393 = $392;
          label = 143;
          break L6;
         }
         $$pr332 = HEAP32[$14>>2]|0;
         $177 = $$pr332;
        }
        $176 = ($177|0)==(0|0);
        if (!($176)) {
         $178 = HEAP32[$13>>2]|0;
         $179 = ((($178)) + -1|0);
         HEAP32[$13>>2] = $179;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $180 = ($spec$select|0)==(99);
          $181 = $spec$select | 16;
          $182 = ($181|0)==(115);
          L61: do {
           if ($182) {
            $183 = ($spec$select|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($183) {
             HEAP8[$18>>0] = 0;
             ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP8[$17+4>>0]=0|0;
             $$10 = $$5;
            } else {
             $$10 = $$5;
            }
           } else {
            $184 = ((($$5)) + 1|0);
            $185 = HEAP8[$184>>0]|0;
            $186 = ($185<<24>>24)==(94);
            $187 = ((($$5)) + 2|0);
            $$0294 = $186&1;
            $$6 = $186 ? $187 : $184;
            (_memset(($4|0),($$0294|0),257)|0);
            HEAP8[$4>>0] = 0;
            $188 = HEAP8[$$6>>0]|0;
            switch ($188<<24>>24) {
            case 45:  {
             $189 = ((($$6)) + 1|0);
             $190 = $$0294 ^ 1;
             $191 = $190&255;
             HEAP8[$19>>0] = $191;
             $$7 = $189;$$pre$phi491Z2D = $191;
             break;
            }
            case 93:  {
             $192 = ((($$6)) + 1|0);
             $193 = $$0294 ^ 1;
             $194 = $193&255;
             HEAP8[$20>>0] = $194;
             $$7 = $192;$$pre$phi491Z2D = $194;
             break;
            }
            default: {
             $$pre488 = $$0294 ^ 1;
             $$pre490 = $$pre488&255;
             $$7 = $$6;$$pre$phi491Z2D = $$pre490;
            }
            }
            $$8 = $$7;
            while(1) {
             $195 = HEAP8[$$8>>0]|0;
             L72: do {
              switch ($195<<24>>24) {
              case 0:  {
               $$8316 = $$1309;$393 = $392;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $$10 = $$8;
               break L61;
               break;
              }
              case 45:  {
               $196 = ((($$8)) + 1|0);
               $197 = HEAP8[$196>>0]|0;
               switch ($197<<24>>24) {
               case 93: case 0:  {
                $$9 = $$8;$208 = 45;
                break L72;
                break;
               }
               default: {
               }
               }
               $198 = ((($$8)) + -1|0);
               $199 = HEAP8[$198>>0]|0;
               $200 = ($199&255)<($197&255);
               if ($200) {
                $201 = $199&255;
                $$0288409 = $201;
                while(1) {
                 $202 = (($$0288409) + 1)|0;
                 $203 = (($4) + ($202)|0);
                 HEAP8[$203>>0] = $$pre$phi491Z2D;
                 $204 = HEAP8[$196>>0]|0;
                 $205 = $204&255;
                 $206 = ($202>>>0)<($205>>>0);
                 if ($206) {
                  $$0288409 = $202;
                 } else {
                  $$9 = $196;$208 = $204;
                  break;
                 }
                }
               } else {
                $$9 = $196;$208 = $197;
               }
               break;
              }
              default: {
               $$9 = $$8;$208 = $195;
              }
              }
             } while(0);
             $207 = $208&255;
             $209 = (($207) + 1)|0;
             $210 = (($4) + ($209)|0);
             HEAP8[$210>>0] = $$pre$phi491Z2D;
             $211 = ((($$9)) + 1|0);
             $$8 = $211;
            }
           }
          } while(0);
          $212 = (($$1267) + 1)|0;
          $213 = $180 ? $212 : 31;
          $214 = ($spec$select319|0)==(1);
          $215 = ($$0270|0)!=(0);
          L80: do {
           if ($214) {
            if ($215) {
             $216 = $213 << 2;
             $217 = (_malloc($216)|0);
             $218 = ($217|0)==(0|0);
             if ($218) {
              $$8316 = 0;$393 = 0;
              label = 143;
              break L6;
             } else {
              $395 = $217;
             }
            } else {
             $395 = $$0295;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph$ph = $213;$$0280$ph$ph = 0;$$ph$ph = $395;
            L85: while(1) {
             $219 = ($$ph$ph|0)==(0|0);
             $$0280$ph = $$0280$ph$ph;
             while(1) {
              L89: while(1) {
               $220 = HEAP32[$13>>2]|0;
               $221 = HEAP32[$14>>2]|0;
               $222 = ($220>>>0)<($221>>>0);
               if ($222) {
                $223 = ((($220)) + 1|0);
                HEAP32[$13>>2] = $223;
                $224 = HEAP8[$220>>0]|0;
                $225 = $224&255;
                $228 = $225;
               } else {
                $226 = (___shgetc($0)|0);
                $228 = $226;
               }
               $227 = (($228) + 1)|0;
               $229 = (($4) + ($227)|0);
               $230 = HEAP8[$229>>0]|0;
               $231 = ($230<<24>>24)==(0);
               if ($231) {
                break L85;
               }
               $232 = $228&255;
               HEAP8[$6>>0] = $232;
               $233 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($233|0) {
               case -1:  {
                $$8316 = 0;$393 = $$ph$ph;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($219) {
               $$1281 = $$0280$ph;
              } else {
               $234 = (($$ph$ph) + ($$0280$ph<<2)|0);
               $235 = (($$0280$ph) + 1)|0;
               $236 = HEAP32[$5>>2]|0;
               HEAP32[$234>>2] = $236;
               $$1281 = $235;
              }
              $237 = ($$1281|0)==($$0276$ph$ph|0);
              $or$cond = $215 & $237;
              if ($or$cond) {
               break;
              } else {
               $$0280$ph = $$1281;
              }
             }
             $factor334 = $$0276$ph$ph << 1;
             $238 = $factor334 | 1;
             $239 = $238 << 2;
             $240 = (_realloc($$ph$ph,$239)|0);
             $241 = ($240|0)==(0|0);
             if ($241) {
              $$8316 = 0;$393 = $$ph$ph;
              label = 143;
              break L6;
             } else {
              $$0276$ph$ph = $238;$$0280$ph$ph = $$1281;$$ph$ph = $240;
             }
            }
            $242 = (_mbsinit($3)|0);
            $243 = ($242|0)==(0);
            if ($243) {
             $$8316 = 0;$393 = $$ph$ph;
             label = 143;
             break L6;
            } else {
             $$4284 = $$0280$ph;$$5313 = 0;$$6302 = $$ph$ph;$396 = $$ph$ph;
            }
           } else {
            if ($215) {
             $244 = (_malloc($213)|0);
             $245 = ($244|0)==(0|0);
             if ($245) {
              $$8316 = 0;$393 = 0;
              label = 143;
              break L6;
             }
             $$2278$ph = $213;$$2282$ph = 0;$$2310$ph = $244;
             while(1) {
              $$2282 = $$2282$ph;
              while(1) {
               $246 = HEAP32[$13>>2]|0;
               $247 = HEAP32[$14>>2]|0;
               $248 = ($246>>>0)<($247>>>0);
               if ($248) {
                $249 = ((($246)) + 1|0);
                HEAP32[$13>>2] = $249;
                $250 = HEAP8[$246>>0]|0;
                $251 = $250&255;
                $254 = $251;
               } else {
                $252 = (___shgetc($0)|0);
                $254 = $252;
               }
               $253 = (($254) + 1)|0;
               $255 = (($4) + ($253)|0);
               $256 = HEAP8[$255>>0]|0;
               $257 = ($256<<24>>24)==(0);
               if ($257) {
                $$4284 = $$2282;$$5313 = $$2310$ph;$$6302 = 0;$396 = 0;
                break L80;
               }
               $258 = $254&255;
               $259 = (($$2282) + 1)|0;
               $260 = (($$2310$ph) + ($$2282)|0);
               HEAP8[$260>>0] = $258;
               $261 = ($259|0)==($$2278$ph|0);
               if ($261) {
                break;
               } else {
                $$2282 = $259;
               }
              }
              $factor = $$2278$ph << 1;
              $262 = $factor | 1;
              $263 = (_realloc($$2310$ph,$262)|0);
              $264 = ($263|0)==(0|0);
              if ($264) {
               $$8316 = $$2310$ph;$393 = 0;
               label = 143;
               break L6;
              } else {
               $$2278$ph = $262;$$2282$ph = $259;$$2310$ph = $263;
              }
             }
            }
            $265 = ($$0295|0)==(0|0);
            if ($265) {
             while(1) {
              $281 = HEAP32[$13>>2]|0;
              $282 = HEAP32[$14>>2]|0;
              $283 = ($281>>>0)<($282>>>0);
              if ($283) {
               $284 = ((($281)) + 1|0);
               HEAP32[$13>>2] = $284;
               $285 = HEAP8[$281>>0]|0;
               $286 = $285&255;
               $289 = $286;
              } else {
               $287 = (___shgetc($0)|0);
               $289 = $287;
              }
              $288 = (($289) + 1)|0;
              $290 = (($4) + ($288)|0);
              $291 = HEAP8[$290>>0]|0;
              $292 = ($291<<24>>24)==(0);
              if ($292) {
               $$4284 = 0;$$5313 = 0;$$6302 = 0;$396 = 0;
               break L80;
              }
             }
            }
            $$3283 = 0;
            while(1) {
             $266 = HEAP32[$13>>2]|0;
             $267 = HEAP32[$14>>2]|0;
             $268 = ($266>>>0)<($267>>>0);
             if ($268) {
              $269 = ((($266)) + 1|0);
              HEAP32[$13>>2] = $269;
              $270 = HEAP8[$266>>0]|0;
              $271 = $270&255;
              $274 = $271;
             } else {
              $272 = (___shgetc($0)|0);
              $274 = $272;
             }
             $273 = (($274) + 1)|0;
             $275 = (($4) + ($273)|0);
             $276 = HEAP8[$275>>0]|0;
             $277 = ($276<<24>>24)==(0);
             if ($277) {
              $$4284 = $$3283;$$5313 = $$0295;$$6302 = 0;$396 = 0;
              break L80;
             }
             $278 = $274&255;
             $279 = (($$3283) + 1)|0;
             $280 = (($$0295) + ($$3283)|0);
             HEAP8[$280>>0] = $278;
             $$3283 = $279;
            }
           }
          } while(0);
          $293 = HEAP32[$14>>2]|0;
          $294 = ($293|0)==(0|0);
          if ($294) {
           $$pre485 = HEAP32[$13>>2]|0;
           $306 = $$pre485;
          } else {
           $295 = HEAP32[$13>>2]|0;
           $296 = ((($295)) + -1|0);
           HEAP32[$13>>2] = $296;
           $297 = $296;
           $306 = $297;
          }
          $298 = $15;
          $299 = $298;
          $300 = HEAP32[$299>>2]|0;
          $301 = (($298) + 4)|0;
          $302 = $301;
          $303 = HEAP32[$302>>2]|0;
          $304 = HEAP32[$16>>2]|0;
          $305 = (($306) - ($304))|0;
          $307 = ($305|0)<(0);
          $308 = $307 << 31 >> 31;
          $309 = (_i64Add(($300|0),($303|0),($305|0),($308|0))|0);
          $310 = (getTempRet0() | 0);
          $311 = ($309|0)==(0);
          $312 = ($310|0)==(0);
          $313 = $311 & $312;
          if ($313) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290414;$384 = $396;
           break L6;
          }
          $$not = $180 ^ 1;
          $314 = ($309|0)==($$1267|0);
          $315 = ($310|0)==($169|0);
          $316 = $314 & $315;
          $or$cond321 = $316 | $$not;
          if (!($or$cond321)) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290414;$384 = $396;
           break L6;
          }
          do {
           if ($215) {
            if ($214) {
             HEAP32[$$0295>>2] = $$6302;
             break;
            } else {
             HEAP32[$$0295>>2] = $$5313;
             break;
            }
           }
          } while(0);
          if ($180) {
           $$11 = $$10;$$6314 = $$5313;$394 = $396;
          } else {
           $317 = ($$6302|0)==(0|0);
           if (!($317)) {
            $318 = (($$6302) + ($$4284<<2)|0);
            HEAP32[$318>>2] = 0;
           }
           $319 = ($$5313|0)==(0|0);
           if ($319) {
            $$11 = $$10;$$6314 = 0;$394 = $396;
            break L59;
           }
           $320 = (($$5313) + ($$4284)|0);
           HEAP8[$320>>0] = 0;
           $$11 = $$10;$$6314 = $$5313;$394 = $396;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $342 = (+___floatscan($0,$spec$select319,0));
          $343 = $15;
          $344 = $343;
          $345 = HEAP32[$344>>2]|0;
          $346 = (($343) + 4)|0;
          $347 = $346;
          $348 = HEAP32[$347>>2]|0;
          $349 = HEAP32[$13>>2]|0;
          $350 = HEAP32[$16>>2]|0;
          $351 = (($349) - ($350))|0;
          $352 = ($351|0)<(0);
          $353 = $352 << 31 >> 31;
          $354 = (_i64Subtract(0,0,($351|0),($353|0))|0);
          $355 = (getTempRet0() | 0);
          $356 = ($345|0)==($354|0);
          $357 = ($348|0)==($355|0);
          $358 = $356 & $357;
          if ($358) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290414;$384 = $392;
           break L6;
          }
          $359 = ($$0295|0)==(0|0);
          if ($359) {
           $$11 = $$5;$$6314 = $$1309;$394 = $392;
          } else {
           switch ($spec$select319|0) {
           case 0:  {
            $360 = $342;
            HEAPF32[$$0295>>2] = $360;
            $$11 = $$5;$$6314 = $$1309;$394 = $392;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$$0295>>3] = $342;
            $$11 = $$5;$$6314 = $$1309;$394 = $392;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$$0295>>3] = $342;
            $$11 = $$5;$$6314 = $$1309;$394 = $392;
            break L59;
            break;
           }
           default: {
            $$11 = $$5;$$6314 = $$1309;$394 = $392;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $$11 = $$5;$$6314 = $$1309;$394 = $392;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $321 = (___intscan($0,$$0272,0,-1,-1)|0);
          $322 = (getTempRet0() | 0);
          $323 = $15;
          $324 = $323;
          $325 = HEAP32[$324>>2]|0;
          $326 = (($323) + 4)|0;
          $327 = $326;
          $328 = HEAP32[$327>>2]|0;
          $329 = HEAP32[$13>>2]|0;
          $330 = HEAP32[$16>>2]|0;
          $331 = (($329) - ($330))|0;
          $332 = ($331|0)<(0);
          $333 = $332 << 31 >> 31;
          $334 = (_i64Subtract(0,0,($331|0),($333|0))|0);
          $335 = (getTempRet0() | 0);
          $336 = ($325|0)==($334|0);
          $337 = ($328|0)==($335|0);
          $338 = $336 & $337;
          if ($338) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290414;$384 = $392;
           break L6;
          }
          $339 = ($spec$select|0)==(112);
          $340 = ($$0295|0)!=(0|0);
          $or$cond3 = $340 & $339;
          if ($or$cond3) {
           $341 = $321;
           HEAP32[$$0295>>2] = $341;
           $$11 = $$5;$$6314 = $$1309;$394 = $392;
           break;
          } else {
           _store_int($$0295,$spec$select319,$321,$322);
           $$11 = $$5;$$6314 = $$1309;$394 = $392;
           break;
          }
         }
        } while(0);
        $361 = $15;
        $362 = $361;
        $363 = HEAP32[$362>>2]|0;
        $364 = (($361) + 4)|0;
        $365 = $364;
        $366 = HEAP32[$365>>2]|0;
        $367 = HEAP32[$13>>2]|0;
        $368 = HEAP32[$16>>2]|0;
        $369 = (($367) - ($368))|0;
        $370 = ($369|0)<(0);
        $371 = $370 << 31 >> 31;
        $374 = (_i64Add(($363|0),($366|0),($372|0),($373|0))|0);
        $375 = (getTempRet0() | 0);
        $376 = (_i64Add(($374|0),($375|0),($369|0),($371|0))|0);
        $377 = (getTempRet0() | 0);
        $378 = ($$0295|0)!=(0|0);
        $379 = $378&1;
        $spec$select322 = (($$0290414) + ($379))|0;
        $$12 = $$11;$$1291 = $spec$select322;$$7315 = $$6314;$388 = $394;$389 = $376;$390 = $377;
        break L8;
       }
      } while(0);
      $66 = $63&1;
      $67 = (($$0273418) + ($66)|0);
      ___shlim($0,0,0);
      $68 = HEAP32[$13>>2]|0;
      $69 = HEAP32[$14>>2]|0;
      $70 = ($68>>>0)<($69>>>0);
      if ($70) {
       $71 = ((($68)) + 1|0);
       HEAP32[$13>>2] = $71;
       $72 = HEAP8[$68>>0]|0;
       $73 = $72&255;
       $78 = $73;
      } else {
       $74 = (___shgetc($0)|0);
       $78 = $74;
      }
      $75 = HEAP8[$67>>0]|0;
      $76 = $75&255;
      $77 = ($78|0)==($76|0);
      if (!($77)) {
       label = 23;
       break L6;
      }
      $85 = (_i64Add(($56|0),($57|0),1,0)|0);
      $86 = (getTempRet0() | 0);
      $$12 = $67;$$1291 = $$0290414;$$7315 = $$0308412;$388 = $387;$389 = $85;$390 = $86;
     } else {
      $$1274 = $$0273418;
      while(1) {
       $25 = ((($$1274)) + 1|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        break;
       } else {
        $$1274 = $25;
       }
      }
      ___shlim($0,0,0);
      while(1) {
       $30 = HEAP32[$13>>2]|0;
       $31 = HEAP32[$14>>2]|0;
       $32 = ($30>>>0)<($31>>>0);
       if ($32) {
        $33 = ((($30)) + 1|0);
        HEAP32[$13>>2] = $33;
        $34 = HEAP8[$30>>0]|0;
        $35 = $34&255;
        $37 = $35;
       } else {
        $36 = (___shgetc($0)|0);
        $37 = $36;
       }
       $38 = (_isspace($37)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        break;
       }
      }
      $40 = HEAP32[$14>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$pre = HEAP32[$13>>2]|0;
       $53 = $$pre;
      } else {
       $42 = HEAP32[$13>>2]|0;
       $43 = ((($42)) + -1|0);
       HEAP32[$13>>2] = $43;
       $44 = $43;
       $53 = $44;
      }
      $45 = $15;
      $46 = $45;
      $47 = HEAP32[$46>>2]|0;
      $48 = (($45) + 4)|0;
      $49 = $48;
      $50 = HEAP32[$49>>2]|0;
      $51 = HEAP32[$16>>2]|0;
      $52 = (($53) - ($51))|0;
      $54 = ($52|0)<(0);
      $55 = $54 << 31 >> 31;
      $58 = (_i64Add(($47|0),($50|0),($56|0),($57|0))|0);
      $59 = (getTempRet0() | 0);
      $60 = (_i64Add(($58|0),($59|0),($52|0),($55|0))|0);
      $61 = (getTempRet0() | 0);
      $$12 = $$1274;$$1291 = $$0290414;$$7315 = $$0308412;$388 = $387;$389 = $60;$390 = $61;
     }
    } while(0);
    $380 = ((($$12)) + 1|0);
    $381 = HEAP8[$380>>0]|0;
    $382 = ($381<<24>>24)==(0);
    if ($382) {
     $$3293 = $$1291;
     break L4;
    } else {
     $$0273418 = $380;$$0290414 = $$1291;$$0308412 = $$7315;$22 = $381;$387 = $388;$56 = $389;$57 = $390;
    }
   }
   if ((label|0) == 23) {
    $79 = HEAP32[$14>>2]|0;
    $80 = ($79|0)==(0|0);
    if (!($80)) {
     $81 = HEAP32[$13>>2]|0;
     $82 = ((($81)) + -1|0);
     HEAP32[$13>>2] = $82;
    }
    $83 = ($78|0)>(-1);
    $84 = ($$0290414|0)!=(0);
    $or$cond5 = $84 | $83;
    if ($or$cond5) {
     $$3293 = $$0290414;
     break;
    } else {
     $$1271 = 0;$$9317 = $$0308412;$391 = $387;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $$old4 = ($$0290414|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$9317 = $$8316;$391 = $393;
     label = 144;
    } else {
     $$10318 = $$8316;$$2 = $$0270;$$2292 = $$0290414;$384 = $393;
    }
   }
   if ((label|0) == 144) {
    $$10318 = $$9317;$$2 = $$1271;$$2292 = -1;$384 = $391;
   }
   $383 = ($$2|0)==(0);
   if ($383) {
    $$3293 = $$2292;
   } else {
    _free($$10318);
    _free($384);
    $$3293 = $$2292;
   }
  }
 } while(0);
 $385 = ($386|0)==(0);
 if (!($385)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3293|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $spec$select = $11 ? $$027 : $2;
 (_memcpy(($1|0),($4|0),($spec$select|0))|0);
 $12 = (($4) + ($spec$select)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($spec$select|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $37 = $9;
 } else {
  $37 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 127]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $36 = ($37|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($37|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function _perror($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[16931]|0;
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strerror($3)|0);
 $5 = ((($1)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($1)|0);
  $15 = $8;
 } else {
  $15 = 0;
 }
 $9 = ($0|0)==(0|0);
 if (!($9)) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   $12 = (_strlen($0)|0);
   (_fwrite($0,$12,1,$1)|0);
   (_fputc(58,$1)|0);
   (_fputc(32,$1)|0);
  }
 }
 $13 = (_strlen($4)|0);
 (_fwrite($4,$13,1,$1)|0);
 (_fputc(10,$1)|0);
 $14 = ($15|0)==(0);
 if (!($14)) {
  ___unlockfile($1);
 }
 return;
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[16932]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((1291920|0));
 return;
}
function __get_tzname() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1291904|0);
}
function __get_daylight() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1291912|0);
}
function __get_timezone() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1291916|0);
}
function __get_environ() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1291920|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[322981]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (1291964 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[322981] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(1291932)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (1291964 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[322981] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(1291944)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (1291964 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[322981] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(1291932)>>2] = $76;
     HEAP32[(1291944)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(1291928)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (1292228 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (1292228 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(1291928)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(1291944)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (1291964 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[322981] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(1291932)>>2] = $$0171$i;
       HEAP32[(1291944)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(1291928)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (1292228 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (1292228 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $314 = $312;
       } else {
        $314 = $309;
       }
       $313 = ($314|0)==(0|0);
       if ($313) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $314;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(1291932)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (1292228 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(1291928)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (1291964 + ($382<<2)|0);
           $384 = HEAP32[322981]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[322981] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (1292228 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(1291928)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(1291932)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(1291944)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(1291944)>>2] = $465;
   HEAP32[(1291932)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(1291932)>>2] = 0;
   HEAP32[(1291944)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(1291936)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(1291936)>>2] = $480;
  $481 = HEAP32[(1291948)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(1291948)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[323099]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(1292404)>>2] = 4096;
  HEAP32[(1292400)>>2] = 4096;
  HEAP32[(1292408)>>2] = -1;
  HEAP32[(1292412)>>2] = -1;
  HEAP32[(1292416)>>2] = 0;
  HEAP32[(1292368)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[323099] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(1292404)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(1292364)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(1292356)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(1292368)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(1291948)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (1292372);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk($543)|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(1292400)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(1292356)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(1292364)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk($spec$select49$i)|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(1292404)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk($560)|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk($552)|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(1292368)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(1292368)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk($498)|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(1292356)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(1292356)>>2] = $582;
  $583 = HEAP32[(1292360)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(1292360)>>2] = $582;
  }
  $585 = HEAP32[(1291948)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(1291940)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(1291940)>>2] = $$748$i;
    }
    HEAP32[(1292372)>>2] = $$748$i;
    HEAP32[(1292376)>>2] = $$723947$i;
    HEAP32[(1292384)>>2] = 0;
    $590 = HEAP32[323099]|0;
    HEAP32[(1291960)>>2] = $590;
    HEAP32[(1291956)>>2] = -1;
    HEAP32[(1291976)>>2] = (1291964);
    HEAP32[(1291972)>>2] = (1291964);
    HEAP32[(1291984)>>2] = (1291972);
    HEAP32[(1291980)>>2] = (1291972);
    HEAP32[(1291992)>>2] = (1291980);
    HEAP32[(1291988)>>2] = (1291980);
    HEAP32[(1292000)>>2] = (1291988);
    HEAP32[(1291996)>>2] = (1291988);
    HEAP32[(1292008)>>2] = (1291996);
    HEAP32[(1292004)>>2] = (1291996);
    HEAP32[(1292016)>>2] = (1292004);
    HEAP32[(1292012)>>2] = (1292004);
    HEAP32[(1292024)>>2] = (1292012);
    HEAP32[(1292020)>>2] = (1292012);
    HEAP32[(1292032)>>2] = (1292020);
    HEAP32[(1292028)>>2] = (1292020);
    HEAP32[(1292040)>>2] = (1292028);
    HEAP32[(1292036)>>2] = (1292028);
    HEAP32[(1292048)>>2] = (1292036);
    HEAP32[(1292044)>>2] = (1292036);
    HEAP32[(1292056)>>2] = (1292044);
    HEAP32[(1292052)>>2] = (1292044);
    HEAP32[(1292064)>>2] = (1292052);
    HEAP32[(1292060)>>2] = (1292052);
    HEAP32[(1292072)>>2] = (1292060);
    HEAP32[(1292068)>>2] = (1292060);
    HEAP32[(1292080)>>2] = (1292068);
    HEAP32[(1292076)>>2] = (1292068);
    HEAP32[(1292088)>>2] = (1292076);
    HEAP32[(1292084)>>2] = (1292076);
    HEAP32[(1292096)>>2] = (1292084);
    HEAP32[(1292092)>>2] = (1292084);
    HEAP32[(1292104)>>2] = (1292092);
    HEAP32[(1292100)>>2] = (1292092);
    HEAP32[(1292112)>>2] = (1292100);
    HEAP32[(1292108)>>2] = (1292100);
    HEAP32[(1292120)>>2] = (1292108);
    HEAP32[(1292116)>>2] = (1292108);
    HEAP32[(1292128)>>2] = (1292116);
    HEAP32[(1292124)>>2] = (1292116);
    HEAP32[(1292136)>>2] = (1292124);
    HEAP32[(1292132)>>2] = (1292124);
    HEAP32[(1292144)>>2] = (1292132);
    HEAP32[(1292140)>>2] = (1292132);
    HEAP32[(1292152)>>2] = (1292140);
    HEAP32[(1292148)>>2] = (1292140);
    HEAP32[(1292160)>>2] = (1292148);
    HEAP32[(1292156)>>2] = (1292148);
    HEAP32[(1292168)>>2] = (1292156);
    HEAP32[(1292164)>>2] = (1292156);
    HEAP32[(1292176)>>2] = (1292164);
    HEAP32[(1292172)>>2] = (1292164);
    HEAP32[(1292184)>>2] = (1292172);
    HEAP32[(1292180)>>2] = (1292172);
    HEAP32[(1292192)>>2] = (1292180);
    HEAP32[(1292188)>>2] = (1292180);
    HEAP32[(1292200)>>2] = (1292188);
    HEAP32[(1292196)>>2] = (1292188);
    HEAP32[(1292208)>>2] = (1292196);
    HEAP32[(1292204)>>2] = (1292196);
    HEAP32[(1292216)>>2] = (1292204);
    HEAP32[(1292212)>>2] = (1292204);
    HEAP32[(1292224)>>2] = (1292212);
    HEAP32[(1292220)>>2] = (1292212);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(1291948)>>2] = $599;
    HEAP32[(1291936)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(1292412)>>2]|0;
    HEAP32[(1291952)>>2] = $605;
   } else {
    $$024372$i = (1292372);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(1291936)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(1291948)>>2] = $631;
       HEAP32[(1291936)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(1292412)>>2]|0;
       HEAP32[(1291952)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(1291940)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(1291940)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (1292372);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(1291936)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(1291936)>>2] = $678;
        HEAP32[(1291948)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(1291944)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(1291932)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(1291932)>>2] = $684;
         HEAP32[(1291944)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[322981]|0;
            $703 = $702 & $701;
            HEAP32[322981] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (1292228 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(1291928)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(1291928)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (1291964 + ($763<<2)|0);
         $765 = HEAP32[322981]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[322981] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (1292228 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(1291928)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(1291928)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (1292372);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(1291948)>>2] = $870;
    HEAP32[(1291936)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(1292412)>>2]|0;
    HEAP32[(1291952)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(1292372)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(1292372)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(1292372)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(1292372)+12>>2]|0;
    HEAP32[(1292372)>>2] = $$748$i;
    HEAP32[(1292376)>>2] = $$723947$i;
    HEAP32[(1292384)>>2] = 0;
    HEAP32[(1292380)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (1291964 + ($892<<2)|0);
      $894 = HEAP32[322981]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[322981] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (1292228 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(1291928)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(1291928)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(1291936)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(1291936)>>2] = $971;
   $972 = HEAP32[(1291948)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(1291948)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 48;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(1291940)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(1291944)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(1291932)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[322981]|0;
     $29 = $28 & $27;
     HEAP32[322981] = $29;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (1292228 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(1291928)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(1291928)>>2] = $62;
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(1291948)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(1291936)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(1291936)>>2] = $98;
   HEAP32[(1291948)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(1291944)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(1291944)>>2] = 0;
   HEAP32[(1291932)>>2] = 0;
   return;
  }
  $103 = HEAP32[(1291944)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(1291932)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(1291932)>>2] = $106;
   HEAP32[(1291944)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[322981]|0;
     $122 = $121 & $120;
     HEAP32[322981] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (1292228 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(1291928)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(1291928)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(1291944)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(1291932)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (1291964 + ($183<<2)|0);
  $185 = HEAP32[322981]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[322981] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (1292228 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(1291928)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(1291928)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(1291956)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(1291956)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (1292380);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(1291956)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 48;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(1292404)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(1291948)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(1291936)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(1291948)>>2] = $33;
  HEAP32[(1291936)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(1291944)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(1291932)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(1291932)>>2] = $storemerge1;
  HEAP32[(1291944)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[322981]|0;
    $81 = $80 & $79;
    HEAP32[322981] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (1292228 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(1291928)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(1291928)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(1291944)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(1291932)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[322981]|0;
     $25 = $24 & $23;
     HEAP32[322981] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (1292228 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(1291928)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(1291928)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(1291948)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(1291936)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(1291936)>>2] = $89;
   HEAP32[(1291948)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(1291944)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(1291944)>>2] = 0;
   HEAP32[(1291932)>>2] = 0;
   return;
  }
  $94 = HEAP32[(1291944)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(1291932)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(1291932)>>2] = $97;
   HEAP32[(1291944)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[322981]|0;
     $113 = $112 & $111;
     HEAP32[322981] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (1292228 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(1291928)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(1291928)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(1291944)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(1291932)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (1291964 + ($174<<2)|0);
  $176 = HEAP32[322981]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[322981] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (1292228 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(1291928)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(1291928)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function _sbrk($0) {
 $0 = $0|0;
 var $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_emscripten_get_sbrk_ptr()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0))|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 48;
  $$2 = (-1);
  return ($$2|0);
 }
 $6 = (_emscripten_get_heap_size()|0);
 $7 = ($3>>>0)>($6>>>0);
 if ($7) {
  $8 = (_emscripten_resize_heap(($3|0))|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 48;
   $$2 = (-1);
   return ($$2|0);
  }
 }
 HEAP32[$1>>2] = $3;
 $11 = $2;
 $$2 = $11;
 return ($$2|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _emscripten_get_sbrk_ptr() {
    return 1292448;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}

  
function dynCall_ddi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  return +FUNCTION_TABLE_ddi[index&63](+a1,a2|0);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&31](a1|0);
}


function dynCall_idii(index,a1,a2,a3) {
  index = index|0;
  a1=+a1; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_idii[index&31](+a1,a2|0,a3|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_iidii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iidii[index&15](a1|0,+a2,a3|0,a4|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&127](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiidddddd(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=+a8;
  return FUNCTION_TABLE_iiidddddd[index&7](a1|0,a2|0,+a3,+a4,+a5,+a6,+a7,+a8)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiidd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5;
  return FUNCTION_TABLE_iiiidd[index&31](a1|0,a2|0,a3|0,+a4,+a5)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_viddiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viddiiii[index&63](a1|0,+a2,+a3,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_ddi(0);return +0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_di(1);return +0;
}
function b2(p0,p1,p2) {
 p0 = +p0;p1 = p1|0;p2 = p2|0; nullFunc_idii(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0; nullFunc_iidii(4);return 0;
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(5);return 0;
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6;p7 = +p7; nullFunc_iiidddddd(7);return 0;
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4; nullFunc_iiiidd(9);return 0;
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(10);return 0;
}
function b11(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(11);return 0;
}
function b12(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(13);return 0;
}
function b14(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(14);return 0;
}
function b15(p0) {
 p0 = p0|0; nullFunc_vi(15);
}
function b16(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viddiiii(16);
}
function b17(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(17);
}
function b18(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(18);
}
function b19(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(19);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ddi = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_AT_sI_int,_AT_Stopping_Power_Mass_MeV_cm2_g_int,_AT_CSDA_range_difference_solver,_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m,_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m,__AT_dose_Bortfeld_Gy_negative,__AT_dose_Bortfeld_Gy_root,__AT_range_Bortfeld_Gy,b0,b0,_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy,_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy,_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy,_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy,_AT_RDD_Cucinotta_Ddelta_average_integrand_m,_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy,_AT_inverse_RDD_Cucinotta_solver_function_Gy,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_di = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_trust_avratio,b1,b1
,b1,_taus_get_double,b1];
var FUNCTION_TABLE_idii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_qr_presolve,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,_taus_get,b3,b3,b3,___stdio_close,b3,b3,___emscripten_stdout_close,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iidii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_lm_step,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iidiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,_fmt_fp,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iii = [b6,b6,b6,b6,b6,b6,b6,b6,_lm_init,_lm_preloop,b6,b6,b6,b6,_qr_alloc,_qr_init,b6,b6,_qr_rcond,b6,_init_diag_more,_update_diag_more,b6,b6,b6,_trust_rcond,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_compare_SPC_Pairs,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiidddddd = [b7,b7,b7,b7,b7,_brent_init,b7,b7];
var FUNCTION_TABLE_iiii = [b8,b8,b8,b8,b8,b8,b8,_lm_alloc_noaccel,b8,b8,b8,b8,b8,_lm_alloc_accel,b8,b8,b8,b8,b8,b8,b8,b8,_trust_alloc,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,___stdio_write,b8,b8,b8,_sn_write,b8,b8,b8,b8,b8,b8,b8,b8,__AT_chi2_range_fwhm_maxplat,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,_condest_invtriu,_condest_invtril,b8,b8,___stdio_read,_do_read,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiidd = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,_brent_init_3460];
var FUNCTION_TABLE_iiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_lm_preduction,b10,b10,b10,b10,b10,_qr_solve,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,___stdio_seek,b10,___emscripten_stdout_seek,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,_brent_iterate_3461,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiiiii = [b12,_AT_FromFile_wrapper,_AT_Bethe_wrapper,_AT_PSTAR_wrapper,_AT_ICRU_wrapper,b12,b12,b12];
var FUNCTION_TABLE_iiiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,_trust_init,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iiiiiiiii = [b14,b14,b14,b14,b14,b14,_brent_iterate,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_trust_iterate,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_vi = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_lm_free,b15,b15,b15,b15,b15,b15,_qr_free,b15,b15,b15,b15,b15,b15,b15,_trust_free,b15
,b15,b15,b15];
var FUNCTION_TABLE_viddiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_gsl_integration_qk15
,_gsl_integration_qk21,_gsl_integration_qk31,_gsl_integration_qk41,_gsl_integration_qk51,_gsl_integration_qk61];
var FUNCTION_TABLE_vii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_taus_set
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,_pop_arg_long_double,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_callback,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_viiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_no_error_handler,b19
,b19,b19,b19,b19,b19];

  return { _AT_A_from_particle_no: _AT_A_from_particle_no, _AT_A_from_particle_no_single: _AT_A_from_particle_no_single, _AT_Bethe_Stopping_Number: _AT_Bethe_Stopping_Number, _AT_Bethe_energy_loss_MeV_cm2_g: _AT_Bethe_energy_loss_MeV_cm2_g, _AT_Bethe_energy_loss_MeV_cm2_g_single: _AT_Bethe_energy_loss_MeV_cm2_g_single, _AT_Bethe_wrapper: _AT_Bethe_wrapper, _AT_CSDA_energy_after_slab_E_MeV_u_multi: _AT_CSDA_energy_after_slab_E_MeV_u_multi, _AT_CSDA_energy_after_slab_E_MeV_u_single: _AT_CSDA_energy_after_slab_E_MeV_u_single, _AT_CSDA_range_difference_solver: _AT_CSDA_range_difference_solver, _AT_CSDA_range_g_cm2_multi: _AT_CSDA_range_g_cm2_multi, _AT_CSDA_range_g_cm2_single: _AT_CSDA_range_g_cm2_single, _AT_D_RDD_Gy: _AT_D_RDD_Gy, _AT_D_RDD_Gy_int: _AT_D_RDD_Gy_int, _AT_Dyx: _AT_Dyx, _AT_ER_AM_RadDiff_range_g_cm2: _AT_ER_AM_RadDiff_range_g_cm2, _AT_ER_ButtsKatz_range_g_cm2: _AT_ER_ButtsKatz_range_g_cm2, _AT_ER_Edmund_range_g_cm2: _AT_ER_Edmund_range_g_cm2, _AT_ER_Geiss_range_g_cm2: _AT_ER_Geiss_range_g_cm2, _AT_ER_PowerLaw_alpha: _AT_ER_PowerLaw_alpha, _AT_ER_Scholz_new_range_g_cm2: _AT_ER_Scholz_new_range_g_cm2, _AT_ER_Scholz_range_g_cm2: _AT_ER_Scholz_range_g_cm2, _AT_ER_Tabata_constants: _AT_ER_Tabata_constants, _AT_ER_Tabata_range_g_cm2: _AT_ER_Tabata_range_g_cm2, _AT_ER_Waligorski_range_g_cm2: _AT_ER_Waligorski_range_g_cm2, _AT_E_MeV_from_E_MeV_u: _AT_E_MeV_from_E_MeV_u, _AT_E_MeV_u_from_E_MeV: _AT_E_MeV_u_from_E_MeV, _AT_E_MeV_u_from_momentum_MeV_c_u: _AT_E_MeV_u_from_momentum_MeV_c_u, _AT_E_MeV_u_from_momentum_single: _AT_E_MeV_u_from_momentum_single, _AT_E_RadicalDiffusion_MeV_u: _AT_E_RadicalDiffusion_MeV_u, _AT_E_from_beta: _AT_E_from_beta, _AT_E_from_beta_single: _AT_E_from_beta_single, _AT_E_from_gamma: _AT_E_from_gamma, _AT_E_from_gamma_single: _AT_E_from_gamma_single, _AT_Energy_MeV_u_from_Stopping_Power_single: _AT_Energy_MeV_u_from_Stopping_Power_single, _AT_FromFile_wrapper: _AT_FromFile_wrapper, _AT_GSM_dose_grid_from_particles_positions: _AT_GSM_dose_grid_from_particles_positions, _AT_GSM_local_dose_distrib: _AT_GSM_local_dose_distrib, _AT_GSM_local_dose_distrib_from_dose_grid: _AT_GSM_local_dose_distrib_from_dose_grid, _AT_GSM_multiple_local_dose_distrib: _AT_GSM_multiple_local_dose_distrib, _AT_GSM_response_grid_from_dose_grid: _AT_GSM_response_grid_from_dose_grid, _AT_GSM_sample_particle_positions: _AT_GSM_sample_particle_positions, _AT_Gamma_index_from_material_number: _AT_Gamma_index_from_material_number, _AT_Gamma_name_from_number: _AT_Gamma_name_from_number, _AT_Gamma_number_of_parameters: _AT_Gamma_number_of_parameters, _AT_Gauss_FWHM: _AT_Gauss_FWHM, _AT_Gauss_IDF: _AT_Gauss_IDF, _AT_Gauss_Mean: _AT_Gauss_Mean, _AT_Gauss_Mode: _AT_Gauss_Mode, _AT_Gauss_PDF: _AT_Gauss_PDF, _AT_Gauss_energy_loss_distribution: _AT_Gauss_energy_loss_distribution, _AT_Highland_angle: _AT_Highland_angle, _AT_Highland_angle_single: _AT_Highland_angle_single, _AT_ICRU_wrapper: _AT_ICRU_wrapper, _AT_I_eV_from_composition: _AT_I_eV_from_composition, _AT_I_eV_from_element_acronym: _AT_I_eV_from_element_acronym, _AT_I_eV_from_element_acronym_single: _AT_I_eV_from_element_acronym_single, _AT_I_eV_from_material_no: _AT_I_eV_from_material_no, _AT_I_eV_from_particle_no: _AT_I_eV_from_particle_no, _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m: _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m, _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2: _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2, _AT_KatzModel_CucinottaExtTarget_inactivation_probability: _AT_KatzModel_CucinottaExtTarget_inactivation_probability, _AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth: _AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth, _AT_KatzModel_KatzExtTarget_Zhang_TrackWidth: _AT_KatzModel_KatzExtTarget_Zhang_TrackWidth, _AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m: _AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m, _AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2: _AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2, _AT_KatzModel_KatzExtTarget_inactivation_probability: _AT_KatzModel_KatzExtTarget_inactivation_probability, _AT_KatzModel_inactivation_cross_section_approximation_m2: _AT_KatzModel_inactivation_cross_section_approximation_m2, _AT_KatzModel_inactivation_cross_section_m2: _AT_KatzModel_inactivation_cross_section_m2, _AT_KatzModel_inactivation_probability: _AT_KatzModel_inactivation_probability, _AT_KatzModel_mixed_field_survival: _AT_KatzModel_mixed_field_survival, _AT_KatzModel_single_field_survival: _AT_KatzModel_single_field_survival, _AT_KatzModel_single_field_survival_from_inactivation_cross_section: _AT_KatzModel_single_field_survival_from_inactivation_cross_section, _AT_KatzModel_single_field_survival_optimized_for_fluence_vector: _AT_KatzModel_single_field_survival_optimized_for_fluence_vector, _AT_Kellerer_folding: _AT_Kellerer_folding, _AT_Kellerer_interpolation: _AT_Kellerer_interpolation, _AT_Kellerer_normalize: _AT_Kellerer_normalize, _AT_Kellerer_reset: _AT_Kellerer_reset, _AT_Kellerer_shrink: _AT_Kellerer_shrink, _AT_Kellerer_zero: _AT_Kellerer_zero, _AT_LET_d_Wilkens_keV_um_multi: _AT_LET_d_Wilkens_keV_um_multi, _AT_LET_d_Wilkens_keV_um_single: _AT_LET_d_Wilkens_keV_um_single, _AT_LET_t_Wilkens_keV_um_multi: _AT_LET_t_Wilkens_keV_um_multi, _AT_LET_t_Wilkens_keV_um_single: _AT_LET_t_Wilkens_keV_um_single, _AT_Landau_IDF: _AT_Landau_IDF, _AT_Landau_PDF: _AT_Landau_PDF, _AT_Landau_energy_loss_distribution: _AT_Landau_energy_loss_distribution, _AT_Mass_Stopping_Power: _AT_Mass_Stopping_Power, _AT_Mass_Stopping_Power_with_no: _AT_Mass_Stopping_Power_with_no, _AT_Moliere_function_f0: _AT_Moliere_function_f0, _AT_Moliere_function_f1: _AT_Moliere_function_f1, _AT_Moliere_function_f2: _AT_Moliere_function_f2, _AT_N2_to_step: _AT_N2_to_step, _AT_PSTAR_wrapper: _AT_PSTAR_wrapper, _AT_P_RDD: _AT_P_RDD, _AT_RDD_CucinottaPoint_Gy: _AT_RDD_CucinottaPoint_Gy, _AT_RDD_Cucinotta_Cnorm: _AT_RDD_Cucinotta_Cnorm, _AT_RDD_Cucinotta_Ddelta_Gy: _AT_RDD_Cucinotta_Ddelta_Gy, _AT_RDD_Cucinotta_Ddelta_average_Gy: _AT_RDD_Cucinotta_Ddelta_average_Gy, _AT_RDD_Cucinotta_Ddelta_average_integrand_m: _AT_RDD_Cucinotta_Ddelta_average_integrand_m, _AT_RDD_Cucinotta_Dexc_Gy: _AT_RDD_Cucinotta_Dexc_Gy, _AT_RDD_Cucinotta_Dexc_average_Gy: _AT_RDD_Cucinotta_Dexc_average_Gy, _AT_RDD_Cucinotta_f_longRange: _AT_RDD_Cucinotta_f_longRange, _AT_RDD_Cucinotta_f_shortRange: _AT_RDD_Cucinotta_f_shortRange, _AT_RDD_ExtendedTarget_CucinottaPoint_Gy: _AT_RDD_ExtendedTarget_CucinottaPoint_Gy, _AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration: _AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration, _AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy: _AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy, _AT_RDD_ExtendedTarget_KatzPoint_Gy: _AT_RDD_ExtendedTarget_KatzPoint_Gy, _AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration: _AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration, _AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy: _AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy, _AT_RDD_Geiss_Gy: _AT_RDD_Geiss_Gy, _AT_RDD_Geiss_average_Gy: _AT_RDD_Geiss_average_Gy, _AT_RDD_KatzPoint_Gy: _AT_RDD_KatzPoint_Gy, _AT_RDD_KatzSite_Gy: _AT_RDD_KatzSite_Gy, _AT_RDD_Katz_LinearER_DSite_Gy: _AT_RDD_Katz_LinearER_DSite_Gy, _AT_RDD_Katz_LinearER_Daverage_Gy: _AT_RDD_Katz_LinearER_Daverage_Gy, _AT_RDD_Katz_LinearER_Dpoint_Gy: _AT_RDD_Katz_LinearER_Dpoint_Gy, _AT_RDD_Katz_LinearER_dEdx_J_m: _AT_RDD_Katz_LinearER_dEdx_J_m, _AT_RDD_Katz_PowerLawER_DSite_Gy: _AT_RDD_Katz_PowerLawER_DSite_Gy, _AT_RDD_Katz_PowerLawER_DaverageKernel: _AT_RDD_Katz_PowerLawER_DaverageKernel, _AT_RDD_Katz_PowerLawER_DaverageKernel_approx: _AT_RDD_Katz_PowerLawER_DaverageKernel_approx, _AT_RDD_Katz_PowerLawER_Daverage_Gy: _AT_RDD_Katz_PowerLawER_Daverage_Gy, _AT_RDD_Katz_PowerLawER_Dpoint_Gy: _AT_RDD_Katz_PowerLawER_Dpoint_Gy, _AT_RDD_Katz_PowerLawER_dEdx_J_m: _AT_RDD_Katz_PowerLawER_dEdx_J_m, _AT_RDD_Katz_coeff_Gy: _AT_RDD_Katz_coeff_Gy, _AT_RDD_Katz_coeff_Gy_general: _AT_RDD_Katz_coeff_Gy_general, _AT_RDD_RadicalDiffusion_Gy: _AT_RDD_RadicalDiffusion_Gy, _AT_RDD_RadicalDiffusion_get_energy_idx: _AT_RDD_RadicalDiffusion_get_energy_idx, _AT_RDD_Test_Gy: _AT_RDD_Test_Gy, _AT_RDD_a0_m: _AT_RDD_a0_m, _AT_RDD_d_max_Gy: _AT_RDD_d_max_Gy, _AT_RDD_d_min_Gy: _AT_RDD_d_min_Gy, _AT_RDD_f1_parameters_mixed_field: _AT_RDD_f1_parameters_mixed_field, _AT_RDD_f1_parameters_single_field: _AT_RDD_f1_parameters_single_field, _AT_RDD_index_from_RDD_number: _AT_RDD_index_from_RDD_number, _AT_RDD_name_from_number: _AT_RDD_name_from_number, _AT_RDD_number_from_name: _AT_RDD_number_from_name, _AT_RDD_number_of_parameters: _AT_RDD_number_of_parameters, _AT_RDD_precalculated_constant_Gy: _AT_RDD_precalculated_constant_Gy, _AT_RDD_r_min_m: _AT_RDD_r_min_m, _AT_Rutherford_SDCS: _AT_Rutherford_SDCS, _AT_Rutherford_scatter_cross_section: _AT_Rutherford_scatter_cross_section, _AT_SPC_decompose_data: _AT_SPC_decompose_data, _AT_SPC_decompose_header: _AT_SPC_decompose_header, _AT_SPC_decompose_size: _AT_SPC_decompose_size, _AT_SPC_fast_read_buffer: _AT_SPC_fast_read_buffer, _AT_SPC_get_number_of_bins_from_filename_fast: _AT_SPC_get_number_of_bins_from_filename_fast, _AT_SPC_get_number_of_bytes_in_file: _AT_SPC_get_number_of_bytes_in_file, _AT_SPC_number_of_bins_at_range: _AT_SPC_number_of_bins_at_range, _AT_SPC_read_data_from_filename_fast: _AT_SPC_read_data_from_filename_fast, _AT_SPC_read_from_filename_fast: _AT_SPC_read_from_filename_fast, _AT_SPC_read_header_from_filename_fast: _AT_SPC_read_header_from_filename_fast, _AT_SPC_spectrum_at_range: _AT_SPC_spectrum_at_range, _AT_Stopping_Power: _AT_Stopping_Power, _AT_Stopping_Power_Mass_MeV_cm2_g_int: _AT_Stopping_Power_Mass_MeV_cm2_g_int, _AT_Stopping_Power_with_no: _AT_Stopping_Power_with_no, _AT_SuccessiveConvolutions: _AT_SuccessiveConvolutions, _AT_Vavilov_IDF: _AT_Vavilov_IDF, _AT_Vavilov_PDF: _AT_Vavilov_PDF, _AT_Vavilov_energy_loss_distribution: _AT_Vavilov_energy_loss_distribution, _AT_WEPL_multi: _AT_WEPL_multi, _AT_WEPL_single: _AT_WEPL_single, _AT_Z_from_element_acronym: _AT_Z_from_element_acronym, _AT_Z_from_element_acronym_single: _AT_Z_from_element_acronym_single, _AT_Z_from_particle_no: _AT_Z_from_particle_no, _AT_Z_from_particle_no_single: _AT_Z_from_particle_no_single, _AT_alpha_g_cm2_MeV_from_material_no: _AT_alpha_g_cm2_MeV_from_material_no, _AT_atomic_weight_from_Z: _AT_atomic_weight_from_Z, _AT_atomic_weight_from_element_acronym: _AT_atomic_weight_from_element_acronym, _AT_atomic_weight_from_element_acronym_single: _AT_atomic_weight_from_element_acronym_single, _AT_atomic_weight_from_particle_no: _AT_atomic_weight_from_particle_no, _AT_average_A_from_composition: _AT_average_A_from_composition, _AT_average_A_from_material_no: _AT_average_A_from_material_no, _AT_average_Z_from_composition: _AT_average_Z_from_composition, _AT_average_Z_from_material_no: _AT_average_Z_from_material_no, _AT_beam_par_physical_to_technical: _AT_beam_par_physical_to_technical, _AT_beam_par_technical_to_physical: _AT_beam_par_technical_to_physical, _AT_beta_from_E: _AT_beta_from_E, _AT_beta_from_E_single: _AT_beta_from_E_single, _AT_characteristic_multiple_scattering_angle: _AT_characteristic_multiple_scattering_angle, _AT_characteristic_multiple_scattering_angle_single: _AT_characteristic_multiple_scattering_angle_single, _AT_characteristic_single_scattering_angle: _AT_characteristic_single_scattering_angle, _AT_characteristic_single_scattering_angle_single: _AT_characteristic_single_scattering_angle_single, _AT_check_energy_range_single_field: _AT_check_energy_range_single_field, _AT_check_energy_range_single_particle: _AT_check_energy_range_single_particle, _AT_check_particle_no_single_field: _AT_check_particle_no_single_field, _AT_check_particle_no_single_particle: _AT_check_particle_no_single_particle, _AT_d_max_RadicalDiffusion_Gy: _AT_d_max_RadicalDiffusion_Gy, _AT_d_min_RadicalDiffusion_Gy: _AT_d_min_RadicalDiffusion_Gy, _AT_density_g_cm3_from_element_acronym: _AT_density_g_cm3_from_element_acronym, _AT_density_g_cm3_from_element_acronym_single: _AT_density_g_cm3_from_element_acronym_single, _AT_density_g_cm3_from_material_no: _AT_density_g_cm3_from_material_no, _AT_dose_Bortfeld_Gy_multi: _AT_dose_Bortfeld_Gy_multi, _AT_dose_Bortfeld_Gy_single: _AT_dose_Bortfeld_Gy_single, _AT_dose_Gy_from_fluence_cm2: _AT_dose_Gy_from_fluence_cm2, _AT_dose_Gy_from_fluence_cm2_single: _AT_dose_Gy_from_fluence_cm2_single, _AT_dose_weighted_E_MeV_u: _AT_dose_weighted_E_MeV_u, _AT_dose_weighted_LET_MeV_cm2_g: _AT_dose_weighted_LET_MeV_cm2_g, _AT_effective_Z_from_composition: _AT_effective_Z_from_composition, _AT_effective_charge_from_E_MeV_u: _AT_effective_charge_from_E_MeV_u, _AT_effective_charge_from_E_MeV_u_single: _AT_effective_charge_from_E_MeV_u_single, _AT_effective_charge_from_beta: _AT_effective_charge_from_beta, _AT_effective_charge_from_beta_single: _AT_effective_charge_from_beta_single, _AT_effective_collision_number: _AT_effective_collision_number, _AT_effective_collision_number_single: _AT_effective_collision_number_single, _AT_el_energy_loss_leading_term_MeV_cm2_g: _AT_el_energy_loss_leading_term_MeV_cm2_g, _AT_electron_density_cm3_from_element_acronym: _AT_electron_density_cm3_from_element_acronym, _AT_electron_density_cm3_from_element_acronym_single: _AT_electron_density_cm3_from_element_acronym_single, _AT_electron_density_m3_from_composition: _AT_electron_density_m3_from_composition, _AT_electron_density_m3_from_material_no_multi: _AT_electron_density_m3_from_material_no_multi, _AT_electron_density_m3_from_material_no_single: _AT_electron_density_m3_from_material_no_single, _AT_electron_density_m3_multi: _AT_electron_density_m3_multi, _AT_electron_density_m3_single: _AT_electron_density_m3_single, _AT_element_acronym_from_Z: _AT_element_acronym_from_Z, _AT_element_acronym_from_Z_single: _AT_element_acronym_from_Z_single, _AT_energy_Bortfeld_MeV_u: _AT_energy_Bortfeld_MeV_u, _AT_energy_loss_FWHM: _AT_energy_loss_FWHM, _AT_energy_loss_distribution: _AT_energy_loss_distribution, _AT_energy_loss_from_lambda_gauss_multi: _AT_energy_loss_from_lambda_gauss_multi, _AT_energy_loss_from_lambda_landau_multi: _AT_energy_loss_from_lambda_landau_multi, _AT_energy_loss_from_lambda_landau_single: _AT_energy_loss_from_lambda_landau_single, _AT_energy_loss_from_lambda_vavilov_multi: _AT_energy_loss_from_lambda_vavilov_multi, _AT_energy_loss_keV_Landau_FWHM: _AT_energy_loss_keV_Landau_FWHM, _AT_energy_loss_keV_Landau_Mode: _AT_energy_loss_keV_Landau_Mode, _AT_energy_loss_keV_Vavilov_FWHM: _AT_energy_loss_keV_Vavilov_FWHM, _AT_energy_loss_mode: _AT_energy_loss_mode, _AT_energy_straggling_MeV2_cm2_g: _AT_energy_straggling_MeV2_cm2_g, _AT_energy_straggling_after_slab_E_MeV_u: _AT_energy_straggling_after_slab_E_MeV_u, _AT_fit_Bortfeld: _AT_fit_Bortfeld, _AT_fluence_cm2_from_dose_Gy: _AT_fluence_cm2_from_dose_Gy, _AT_fluence_cm2_from_dose_Gy_single: _AT_fluence_cm2_from_dose_Gy_single, _AT_fluence_weighted_E_MeV_u: _AT_fluence_weighted_E_MeV_u, _AT_fluence_weighted_LET_MeV_cm2_g: _AT_fluence_weighted_LET_MeV_cm2_g, _AT_fwhm_Bortfeld_cm: _AT_fwhm_Bortfeld_cm, _AT_gamma_: _AT_gamma_, _AT_gamma_from_E: _AT_gamma_from_E, _AT_gamma_from_E_single: _AT_gamma_from_E_single, _AT_gamma_response: _AT_gamma_response, _AT_get_DSB_distribution: _AT_get_DSB_distribution, _AT_get_error_msg: _AT_get_error_msg, _AT_get_gamma_response: _AT_get_gamma_response, _AT_get_gamma_response_for_average_dose: _AT_get_gamma_response_for_average_dose, _AT_get_interpolated_x_from_input_2d_table: _AT_get_interpolated_x_from_input_2d_table, _AT_get_interpolated_y_from_input_2d_table: _AT_get_interpolated_y_from_input_2d_table, _AT_get_interpolated_y_from_input_table: _AT_get_interpolated_y_from_input_table, _AT_get_interpolated_y_from_interval: _AT_get_interpolated_y_from_interval, _AT_get_ion_efficiency_from_dose_distribution: _AT_get_ion_efficiency_from_dose_distribution, _AT_get_ion_efficiency_from_response_distribution: _AT_get_ion_efficiency_from_response_distribution, _AT_get_ion_response_from_dose_distribution: _AT_get_ion_response_from_dose_distribution, _AT_get_ion_response_from_response_distribution: _AT_get_ion_response_from_response_distribution, _AT_get_material_data: _AT_get_material_data, _AT_get_materials_data: _AT_get_materials_data, _AT_get_response_distribution_from_dose_distribution: _AT_get_response_distribution_from_dose_distribution, _AT_gyroradius_m: _AT_gyroradius_m, _AT_histoOld_bin_no: _AT_histoOld_bin_no, _AT_histoOld_get_bin_width: _AT_histoOld_get_bin_width, _AT_histoOld_get_bin_widths: _AT_histoOld_get_bin_widths, _AT_histoOld_log_bin_width: _AT_histoOld_log_bin_width, _AT_histoOld_lower_bin_limit: _AT_histoOld_lower_bin_limit, _AT_histoOld_upper_bin_limit: _AT_histoOld_upper_bin_limit, _AT_histo_add_multi: _AT_histo_add_multi, _AT_histo_add_single: _AT_histo_add_single, _AT_histo_bin_no: _AT_histo_bin_no, _AT_histo_bin_width: _AT_histo_bin_width, _AT_histo_bin_widths: _AT_histo_bin_widths, _AT_histo_left_limit: _AT_histo_left_limit, _AT_histo_left_limits: _AT_histo_left_limits, _AT_histo_linear_bin_no: _AT_histo_linear_bin_no, _AT_histo_linear_bin_width: _AT_histo_linear_bin_width, _AT_histo_linear_left_limit: _AT_histo_linear_left_limit, _AT_histo_linear_midpoint: _AT_histo_linear_midpoint, _AT_histo_linear_n_bins: _AT_histo_linear_n_bins, _AT_histo_linear_step: _AT_histo_linear_step, _AT_histo_logarithmic_bin_no: _AT_histo_logarithmic_bin_no, _AT_histo_logarithmic_bin_width: _AT_histo_logarithmic_bin_width, _AT_histo_logarithmic_left_limit: _AT_histo_logarithmic_left_limit, _AT_histo_logarithmic_midpoint: _AT_histo_logarithmic_midpoint, _AT_histo_logarithmic_n_bins: _AT_histo_logarithmic_n_bins, _AT_histo_logarithmic_step: _AT_histo_logarithmic_step, _AT_histo_midpoint: _AT_histo_midpoint, _AT_histo_midpoints: _AT_histo_midpoints, _AT_histo_n_bins: _AT_histo_n_bins, _AT_histo_normalize: _AT_histo_normalize, _AT_histo_step: _AT_histo_step, _AT_histo_sum: _AT_histo_sum, _AT_interparticleDistance_m: _AT_interparticleDistance_m, _AT_inv_interparticleDistance_Gy: _AT_inv_interparticleDistance_Gy, _AT_inverse_RDD_Cucinotta_m: _AT_inverse_RDD_Cucinotta_m, _AT_inverse_RDD_Cucinotta_solver_function_Gy: _AT_inverse_RDD_Cucinotta_solver_function_Gy, _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m: _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m, _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy: _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy, _AT_inverse_RDD_ExtendedTarget_KatzPoint_m: _AT_inverse_RDD_ExtendedTarget_KatzPoint_m, _AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy: _AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy, _AT_inverse_RDD_Geiss_m: _AT_inverse_RDD_Geiss_m, _AT_inverse_RDD_KatzPoint_LinearER_m: _AT_inverse_RDD_KatzPoint_LinearER_m, _AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy: _AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy, _AT_inverse_RDD_KatzPoint_m: _AT_inverse_RDD_KatzPoint_m, _AT_inverse_RDD_KatzSite_m: _AT_inverse_RDD_KatzSite_m, _AT_inverse_RDD_Test_m: _AT_inverse_RDD_Test_m, _AT_inverse_RadicalDiffusion_m: _AT_inverse_RadicalDiffusion_m, _AT_kappa_multi: _AT_kappa_multi, _AT_kappa_single: _AT_kappa_single, _AT_kinetic_variable_single: _AT_kinetic_variable_single, _AT_lambda_Landau_FWHM: _AT_lambda_Landau_FWHM, _AT_lambda_Landau_FWHM_left: _AT_lambda_Landau_FWHM_left, _AT_lambda_Landau_FWHM_right: _AT_lambda_Landau_FWHM_right, _AT_lambda_Landau_Mean: _AT_lambda_Landau_Mean, _AT_lambda_Landau_Mode: _AT_lambda_Landau_Mode, _AT_lambda_Vavilov_FWHM: _AT_lambda_Vavilov_FWHM, _AT_lambda_Vavilov_FWHM_left: _AT_lambda_Vavilov_FWHM_left, _AT_lambda_Vavilov_FWHM_right: _AT_lambda_Vavilov_FWHM_right, _AT_lambda_Vavilov_Mean: _AT_lambda_Vavilov_Mean, _AT_lambda_Vavilov_Mode: _AT_lambda_Vavilov_Mode, _AT_lambda_Vavilov_Skewness: _AT_lambda_Vavilov_Skewness, _AT_lambda_Vavilov_Variance: _AT_lambda_Vavilov_Variance, _AT_lambda_landau_from_energy_loss_multi: _AT_lambda_landau_from_energy_loss_multi, _AT_lambda_landau_from_energy_loss_single: _AT_lambda_landau_from_energy_loss_single, _AT_lambda_max_multi: _AT_lambda_max_multi, _AT_lambda_max_single: _AT_lambda_max_single, _AT_lambda_mean_multi: _AT_lambda_mean_multi, _AT_lambda_mean_single: _AT_lambda_mean_single, _AT_lambda_vavilov_from_energy_loss_multi: _AT_lambda_vavilov_from_energy_loss_multi, _AT_lambda_vavilov_from_energy_loss_single: _AT_lambda_vavilov_from_energy_loss_single, _AT_low_fluence_local_dose_distribution: _AT_low_fluence_local_dose_distribution, _AT_m_g_cm2_from_material_no: _AT_m_g_cm2_from_material_no, _AT_mass_correction_terms: _AT_mass_correction_terms, _AT_mass_correction_terms_new: _AT_mass_correction_terms_new, _AT_material_index_from_material_number: _AT_material_index_from_material_number, _AT_material_name_from_number: _AT_material_name_from_number, _AT_material_number_from_name: _AT_material_number_from_name, _AT_max_E_transfer_MeV: _AT_max_E_transfer_MeV, _AT_max_E_transfer_MeV_new: _AT_max_E_transfer_MeV_new, _AT_max_E_transfer_MeV_new_single: _AT_max_E_transfer_MeV_new_single, _AT_max_E_transfer_MeV_single: _AT_max_E_transfer_MeV_single, _AT_max_classic_E_transfer_MeV_new_single: _AT_max_classic_E_transfer_MeV_new_single, _AT_max_classic_E_transfer_MeV_single: _AT_max_classic_E_transfer_MeV_single, _AT_max_electron_range_m: _AT_max_electron_range_m, _AT_max_electron_ranges_m: _AT_max_electron_ranges_m, _AT_max_plateau_Bortfeld: _AT_max_plateau_Bortfeld, _AT_max_relativistic_E_transfer_MeV_new_single: _AT_max_relativistic_E_transfer_MeV_new_single, _AT_max_relativistic_E_transfer_MeV_single: _AT_max_relativistic_E_transfer_MeV_single, _AT_mean_energy_loss_keV: _AT_mean_energy_loss_keV, _AT_mean_excitation_energy_eV_from_Z: _AT_mean_excitation_energy_eV_from_Z, _AT_mean_excitation_energy_eV_from_Z_single: _AT_mean_excitation_energy_eV_from_Z_single, _AT_mean_number_of_tracks_contrib: _AT_mean_number_of_tracks_contrib, _AT_momentum_MeV_c_u_from_E_MeV_u: _AT_momentum_MeV_c_u_from_E_MeV_u, _AT_momentum_from_E_MeV_c_u_single: _AT_momentum_from_E_MeV_c_u_single, _AT_n_bins_RadicalDiffusion: _AT_n_bins_RadicalDiffusion, _AT_n_bins_for_DSB_distribution: _AT_n_bins_for_DSB_distribution, _AT_n_bins_for_low_fluence_local_dose_distribution: _AT_n_bins_for_low_fluence_local_dose_distribution, _AT_n_bins_for_single_impact_local_dose_distrib: _AT_n_bins_for_single_impact_local_dose_distrib, _AT_normalize: _AT_normalize, _AT_nuclear_spin_from_Z_and_A: _AT_nuclear_spin_from_Z_and_A, _AT_nuclear_spin_from_particle_no_multi: _AT_nuclear_spin_from_particle_no_multi, _AT_nuclear_spin_from_particle_no_single: _AT_nuclear_spin_from_particle_no_single, _AT_p_MeV_from_material_no: _AT_p_MeV_from_material_no, _AT_particle_name_from_particle_no: _AT_particle_name_from_particle_no, _AT_particle_name_from_particle_no_single: _AT_particle_name_from_particle_no_single, _AT_particle_no_from_Z_and_A: _AT_particle_no_from_Z_and_A, _AT_particle_no_from_Z_and_A_single: _AT_particle_no_from_Z_and_A_single, _AT_particle_no_from_particle_name: _AT_particle_no_from_particle_name, _AT_particle_no_from_particle_name_single: _AT_particle_no_from_particle_name_single, _AT_phase_from_material_no: _AT_phase_from_material_no, _AT_plasma_energy_J_from_material_no: _AT_plasma_energy_J_from_material_no, _AT_plasma_energy_J_single: _AT_plasma_energy_J_single, _AT_proton_RBE_multi: _AT_proton_RBE_multi, _AT_proton_RBE_single: _AT_proton_RBE_single, _AT_r_RDD_m: _AT_r_RDD_m, _AT_r_max_RadicalDiffusion_m: _AT_r_max_RadicalDiffusion_m, _AT_r_min_RadicalDiffusion_m: _AT_r_min_RadicalDiffusion_m, _AT_range_Bortfeld_cm: _AT_range_Bortfeld_cm, _AT_range_straggling_convolution: _AT_range_straggling_convolution, _AT_reduced_target_thickness: _AT_reduced_target_thickness, _AT_reduced_target_thickness_single: _AT_reduced_target_thickness_single, _AT_run_CPPSC_method: _AT_run_CPPSC_method, _AT_run_CPPSS_method: _AT_run_CPPSS_method, _AT_run_GSM_method: _AT_run_GSM_method, _AT_run_IGK_method: _AT_run_IGK_method, _AT_sI_int: _AT_sI_int, _AT_scattering_angle_distribution: _AT_scattering_angle_distribution, _AT_scattering_angle_distribution_single: _AT_scattering_angle_distribution_single, _AT_screening_angle: _AT_screening_angle, _AT_screening_angle_single: _AT_screening_angle_single, _AT_set_user_material: _AT_set_user_material, _AT_set_user_material_from_composition: _AT_set_user_material_from_composition, _AT_single_impact_dose_Gy: _AT_single_impact_dose_Gy, _AT_single_impact_dose_Gy_single: _AT_single_impact_dose_Gy_single, _AT_single_impact_fluence_cm2: _AT_single_impact_fluence_cm2, _AT_single_impact_fluence_cm2_single: _AT_single_impact_fluence_cm2_single, _AT_single_impact_local_dose_distrib: _AT_single_impact_local_dose_distrib, _AT_step_to_N2: _AT_step_to_N2, _AT_stopping_power_ratio: _AT_stopping_power_ratio, _AT_stopping_power_source_model_name_from_number: _AT_stopping_power_source_model_name_from_number, _AT_stopping_power_source_model_number_from_name: _AT_stopping_power_source_model_number_from_name, _AT_sum: _AT_sum, _AT_test_fun: _AT_test_fun, _AT_total_D_Gy: _AT_total_D_Gy, _AT_total_fluence_cm2: _AT_total_fluence_cm2, _AT_translate_dose_into_DSB_distribution: _AT_translate_dose_into_DSB_distribution, _AT_xi_keV: _AT_xi_keV, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_environ: __get_environ, __get_timezone: __get_timezone, __get_tzname: __get_tzname, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, dynCall_ddi: dynCall_ddi, dynCall_di: dynCall_di, dynCall_idii: dynCall_idii, dynCall_ii: dynCall_ii, dynCall_iidii: dynCall_iidii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiidddddd: dynCall_iiidddddd, dynCall_iiii: dynCall_iiii, dynCall_iiiidd: dynCall_iiiidd, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_vi: dynCall_vi, dynCall_viddiiii: dynCall_viddiiii, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real__AT_A_from_particle_no = asm["_AT_A_from_particle_no"];
asm["_AT_A_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_A_from_particle_no.apply(null, arguments);
};

var real__AT_A_from_particle_no_single = asm["_AT_A_from_particle_no_single"];
asm["_AT_A_from_particle_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_A_from_particle_no_single.apply(null, arguments);
};

var real__AT_Bethe_Stopping_Number = asm["_AT_Bethe_Stopping_Number"];
asm["_AT_Bethe_Stopping_Number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Bethe_Stopping_Number.apply(null, arguments);
};

var real__AT_Bethe_energy_loss_MeV_cm2_g = asm["_AT_Bethe_energy_loss_MeV_cm2_g"];
asm["_AT_Bethe_energy_loss_MeV_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Bethe_energy_loss_MeV_cm2_g.apply(null, arguments);
};

var real__AT_Bethe_energy_loss_MeV_cm2_g_single = asm["_AT_Bethe_energy_loss_MeV_cm2_g_single"];
asm["_AT_Bethe_energy_loss_MeV_cm2_g_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Bethe_energy_loss_MeV_cm2_g_single.apply(null, arguments);
};

var real__AT_Bethe_wrapper = asm["_AT_Bethe_wrapper"];
asm["_AT_Bethe_wrapper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Bethe_wrapper.apply(null, arguments);
};

var real__AT_CSDA_energy_after_slab_E_MeV_u_multi = asm["_AT_CSDA_energy_after_slab_E_MeV_u_multi"];
asm["_AT_CSDA_energy_after_slab_E_MeV_u_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_energy_after_slab_E_MeV_u_multi.apply(null, arguments);
};

var real__AT_CSDA_energy_after_slab_E_MeV_u_single = asm["_AT_CSDA_energy_after_slab_E_MeV_u_single"];
asm["_AT_CSDA_energy_after_slab_E_MeV_u_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_energy_after_slab_E_MeV_u_single.apply(null, arguments);
};

var real__AT_CSDA_range_difference_solver = asm["_AT_CSDA_range_difference_solver"];
asm["_AT_CSDA_range_difference_solver"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_range_difference_solver.apply(null, arguments);
};

var real__AT_CSDA_range_g_cm2_multi = asm["_AT_CSDA_range_g_cm2_multi"];
asm["_AT_CSDA_range_g_cm2_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_range_g_cm2_multi.apply(null, arguments);
};

var real__AT_CSDA_range_g_cm2_single = asm["_AT_CSDA_range_g_cm2_single"];
asm["_AT_CSDA_range_g_cm2_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_CSDA_range_g_cm2_single.apply(null, arguments);
};

var real__AT_D_RDD_Gy = asm["_AT_D_RDD_Gy"];
asm["_AT_D_RDD_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_D_RDD_Gy.apply(null, arguments);
};

var real__AT_D_RDD_Gy_int = asm["_AT_D_RDD_Gy_int"];
asm["_AT_D_RDD_Gy_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_D_RDD_Gy_int.apply(null, arguments);
};

var real__AT_Dyx = asm["_AT_Dyx"];
asm["_AT_Dyx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Dyx.apply(null, arguments);
};

var real__AT_ER_AM_RadDiff_range_g_cm2 = asm["_AT_ER_AM_RadDiff_range_g_cm2"];
asm["_AT_ER_AM_RadDiff_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_AM_RadDiff_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_ButtsKatz_range_g_cm2 = asm["_AT_ER_ButtsKatz_range_g_cm2"];
asm["_AT_ER_ButtsKatz_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_ButtsKatz_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Edmund_range_g_cm2 = asm["_AT_ER_Edmund_range_g_cm2"];
asm["_AT_ER_Edmund_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Edmund_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Geiss_range_g_cm2 = asm["_AT_ER_Geiss_range_g_cm2"];
asm["_AT_ER_Geiss_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Geiss_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_PowerLaw_alpha = asm["_AT_ER_PowerLaw_alpha"];
asm["_AT_ER_PowerLaw_alpha"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_PowerLaw_alpha.apply(null, arguments);
};

var real__AT_ER_Scholz_new_range_g_cm2 = asm["_AT_ER_Scholz_new_range_g_cm2"];
asm["_AT_ER_Scholz_new_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Scholz_new_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Scholz_range_g_cm2 = asm["_AT_ER_Scholz_range_g_cm2"];
asm["_AT_ER_Scholz_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Scholz_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Tabata_constants = asm["_AT_ER_Tabata_constants"];
asm["_AT_ER_Tabata_constants"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Tabata_constants.apply(null, arguments);
};

var real__AT_ER_Tabata_range_g_cm2 = asm["_AT_ER_Tabata_range_g_cm2"];
asm["_AT_ER_Tabata_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Tabata_range_g_cm2.apply(null, arguments);
};

var real__AT_ER_Waligorski_range_g_cm2 = asm["_AT_ER_Waligorski_range_g_cm2"];
asm["_AT_ER_Waligorski_range_g_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ER_Waligorski_range_g_cm2.apply(null, arguments);
};

var real__AT_E_MeV_from_E_MeV_u = asm["_AT_E_MeV_from_E_MeV_u"];
asm["_AT_E_MeV_from_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_MeV_from_E_MeV_u.apply(null, arguments);
};

var real__AT_E_MeV_u_from_E_MeV = asm["_AT_E_MeV_u_from_E_MeV"];
asm["_AT_E_MeV_u_from_E_MeV"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_MeV_u_from_E_MeV.apply(null, arguments);
};

var real__AT_E_MeV_u_from_momentum_MeV_c_u = asm["_AT_E_MeV_u_from_momentum_MeV_c_u"];
asm["_AT_E_MeV_u_from_momentum_MeV_c_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_MeV_u_from_momentum_MeV_c_u.apply(null, arguments);
};

var real__AT_E_MeV_u_from_momentum_single = asm["_AT_E_MeV_u_from_momentum_single"];
asm["_AT_E_MeV_u_from_momentum_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_MeV_u_from_momentum_single.apply(null, arguments);
};

var real__AT_E_RadicalDiffusion_MeV_u = asm["_AT_E_RadicalDiffusion_MeV_u"];
asm["_AT_E_RadicalDiffusion_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_RadicalDiffusion_MeV_u.apply(null, arguments);
};

var real__AT_E_from_beta = asm["_AT_E_from_beta"];
asm["_AT_E_from_beta"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_from_beta.apply(null, arguments);
};

var real__AT_E_from_beta_single = asm["_AT_E_from_beta_single"];
asm["_AT_E_from_beta_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_from_beta_single.apply(null, arguments);
};

var real__AT_E_from_gamma = asm["_AT_E_from_gamma"];
asm["_AT_E_from_gamma"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_from_gamma.apply(null, arguments);
};

var real__AT_E_from_gamma_single = asm["_AT_E_from_gamma_single"];
asm["_AT_E_from_gamma_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_E_from_gamma_single.apply(null, arguments);
};

var real__AT_Energy_MeV_u_from_Stopping_Power_single = asm["_AT_Energy_MeV_u_from_Stopping_Power_single"];
asm["_AT_Energy_MeV_u_from_Stopping_Power_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Energy_MeV_u_from_Stopping_Power_single.apply(null, arguments);
};

var real__AT_FromFile_wrapper = asm["_AT_FromFile_wrapper"];
asm["_AT_FromFile_wrapper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_FromFile_wrapper.apply(null, arguments);
};

var real__AT_GSM_dose_grid_from_particles_positions = asm["_AT_GSM_dose_grid_from_particles_positions"];
asm["_AT_GSM_dose_grid_from_particles_positions"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_dose_grid_from_particles_positions.apply(null, arguments);
};

var real__AT_GSM_local_dose_distrib = asm["_AT_GSM_local_dose_distrib"];
asm["_AT_GSM_local_dose_distrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_local_dose_distrib.apply(null, arguments);
};

var real__AT_GSM_local_dose_distrib_from_dose_grid = asm["_AT_GSM_local_dose_distrib_from_dose_grid"];
asm["_AT_GSM_local_dose_distrib_from_dose_grid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_local_dose_distrib_from_dose_grid.apply(null, arguments);
};

var real__AT_GSM_multiple_local_dose_distrib = asm["_AT_GSM_multiple_local_dose_distrib"];
asm["_AT_GSM_multiple_local_dose_distrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_multiple_local_dose_distrib.apply(null, arguments);
};

var real__AT_GSM_response_grid_from_dose_grid = asm["_AT_GSM_response_grid_from_dose_grid"];
asm["_AT_GSM_response_grid_from_dose_grid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_response_grid_from_dose_grid.apply(null, arguments);
};

var real__AT_GSM_sample_particle_positions = asm["_AT_GSM_sample_particle_positions"];
asm["_AT_GSM_sample_particle_positions"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_GSM_sample_particle_positions.apply(null, arguments);
};

var real__AT_Gamma_index_from_material_number = asm["_AT_Gamma_index_from_material_number"];
asm["_AT_Gamma_index_from_material_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gamma_index_from_material_number.apply(null, arguments);
};

var real__AT_Gamma_name_from_number = asm["_AT_Gamma_name_from_number"];
asm["_AT_Gamma_name_from_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gamma_name_from_number.apply(null, arguments);
};

var real__AT_Gamma_number_of_parameters = asm["_AT_Gamma_number_of_parameters"];
asm["_AT_Gamma_number_of_parameters"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gamma_number_of_parameters.apply(null, arguments);
};

var real__AT_Gauss_FWHM = asm["_AT_Gauss_FWHM"];
asm["_AT_Gauss_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_FWHM.apply(null, arguments);
};

var real__AT_Gauss_IDF = asm["_AT_Gauss_IDF"];
asm["_AT_Gauss_IDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_IDF.apply(null, arguments);
};

var real__AT_Gauss_Mean = asm["_AT_Gauss_Mean"];
asm["_AT_Gauss_Mean"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_Mean.apply(null, arguments);
};

var real__AT_Gauss_Mode = asm["_AT_Gauss_Mode"];
asm["_AT_Gauss_Mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_Mode.apply(null, arguments);
};

var real__AT_Gauss_PDF = asm["_AT_Gauss_PDF"];
asm["_AT_Gauss_PDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_PDF.apply(null, arguments);
};

var real__AT_Gauss_energy_loss_distribution = asm["_AT_Gauss_energy_loss_distribution"];
asm["_AT_Gauss_energy_loss_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Gauss_energy_loss_distribution.apply(null, arguments);
};

var real__AT_Highland_angle = asm["_AT_Highland_angle"];
asm["_AT_Highland_angle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Highland_angle.apply(null, arguments);
};

var real__AT_Highland_angle_single = asm["_AT_Highland_angle_single"];
asm["_AT_Highland_angle_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Highland_angle_single.apply(null, arguments);
};

var real__AT_ICRU_wrapper = asm["_AT_ICRU_wrapper"];
asm["_AT_ICRU_wrapper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_ICRU_wrapper.apply(null, arguments);
};

var real__AT_I_eV_from_composition = asm["_AT_I_eV_from_composition"];
asm["_AT_I_eV_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_composition.apply(null, arguments);
};

var real__AT_I_eV_from_element_acronym = asm["_AT_I_eV_from_element_acronym"];
asm["_AT_I_eV_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_element_acronym.apply(null, arguments);
};

var real__AT_I_eV_from_element_acronym_single = asm["_AT_I_eV_from_element_acronym_single"];
asm["_AT_I_eV_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_element_acronym_single.apply(null, arguments);
};

var real__AT_I_eV_from_material_no = asm["_AT_I_eV_from_material_no"];
asm["_AT_I_eV_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_material_no.apply(null, arguments);
};

var real__AT_I_eV_from_particle_no = asm["_AT_I_eV_from_particle_no"];
asm["_AT_I_eV_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_I_eV_from_particle_no.apply(null, arguments);
};

var real__AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m"];
asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m.apply(null, arguments);
};

var real__AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2 = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2"];
asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2.apply(null, arguments);
};

var real__AT_KatzModel_CucinottaExtTarget_inactivation_probability = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_probability"];
asm["_AT_KatzModel_CucinottaExtTarget_inactivation_probability"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_CucinottaExtTarget_inactivation_probability.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth = asm["_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth"];
asm["_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_Zhang_TrackWidth = asm["_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth"];
asm["_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_Zhang_TrackWidth.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m = asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m"];
asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2 = asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2"];
asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2.apply(null, arguments);
};

var real__AT_KatzModel_KatzExtTarget_inactivation_probability = asm["_AT_KatzModel_KatzExtTarget_inactivation_probability"];
asm["_AT_KatzModel_KatzExtTarget_inactivation_probability"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_KatzExtTarget_inactivation_probability.apply(null, arguments);
};

var real__AT_KatzModel_inactivation_cross_section_approximation_m2 = asm["_AT_KatzModel_inactivation_cross_section_approximation_m2"];
asm["_AT_KatzModel_inactivation_cross_section_approximation_m2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_inactivation_cross_section_approximation_m2.apply(null, arguments);
};

var real__AT_KatzModel_inactivation_cross_section_m2 = asm["_AT_KatzModel_inactivation_cross_section_m2"];
asm["_AT_KatzModel_inactivation_cross_section_m2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_inactivation_cross_section_m2.apply(null, arguments);
};

var real__AT_KatzModel_inactivation_probability = asm["_AT_KatzModel_inactivation_probability"];
asm["_AT_KatzModel_inactivation_probability"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_inactivation_probability.apply(null, arguments);
};

var real__AT_KatzModel_mixed_field_survival = asm["_AT_KatzModel_mixed_field_survival"];
asm["_AT_KatzModel_mixed_field_survival"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_mixed_field_survival.apply(null, arguments);
};

var real__AT_KatzModel_single_field_survival = asm["_AT_KatzModel_single_field_survival"];
asm["_AT_KatzModel_single_field_survival"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_single_field_survival.apply(null, arguments);
};

var real__AT_KatzModel_single_field_survival_from_inactivation_cross_section = asm["_AT_KatzModel_single_field_survival_from_inactivation_cross_section"];
asm["_AT_KatzModel_single_field_survival_from_inactivation_cross_section"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_single_field_survival_from_inactivation_cross_section.apply(null, arguments);
};

var real__AT_KatzModel_single_field_survival_optimized_for_fluence_vector = asm["_AT_KatzModel_single_field_survival_optimized_for_fluence_vector"];
asm["_AT_KatzModel_single_field_survival_optimized_for_fluence_vector"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_KatzModel_single_field_survival_optimized_for_fluence_vector.apply(null, arguments);
};

var real__AT_Kellerer_folding = asm["_AT_Kellerer_folding"];
asm["_AT_Kellerer_folding"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_folding.apply(null, arguments);
};

var real__AT_Kellerer_interpolation = asm["_AT_Kellerer_interpolation"];
asm["_AT_Kellerer_interpolation"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_interpolation.apply(null, arguments);
};

var real__AT_Kellerer_normalize = asm["_AT_Kellerer_normalize"];
asm["_AT_Kellerer_normalize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_normalize.apply(null, arguments);
};

var real__AT_Kellerer_reset = asm["_AT_Kellerer_reset"];
asm["_AT_Kellerer_reset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_reset.apply(null, arguments);
};

var real__AT_Kellerer_shrink = asm["_AT_Kellerer_shrink"];
asm["_AT_Kellerer_shrink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_shrink.apply(null, arguments);
};

var real__AT_Kellerer_zero = asm["_AT_Kellerer_zero"];
asm["_AT_Kellerer_zero"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Kellerer_zero.apply(null, arguments);
};

var real__AT_LET_d_Wilkens_keV_um_multi = asm["_AT_LET_d_Wilkens_keV_um_multi"];
asm["_AT_LET_d_Wilkens_keV_um_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_LET_d_Wilkens_keV_um_multi.apply(null, arguments);
};

var real__AT_LET_d_Wilkens_keV_um_single = asm["_AT_LET_d_Wilkens_keV_um_single"];
asm["_AT_LET_d_Wilkens_keV_um_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_LET_d_Wilkens_keV_um_single.apply(null, arguments);
};

var real__AT_LET_t_Wilkens_keV_um_multi = asm["_AT_LET_t_Wilkens_keV_um_multi"];
asm["_AT_LET_t_Wilkens_keV_um_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_LET_t_Wilkens_keV_um_multi.apply(null, arguments);
};

var real__AT_LET_t_Wilkens_keV_um_single = asm["_AT_LET_t_Wilkens_keV_um_single"];
asm["_AT_LET_t_Wilkens_keV_um_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_LET_t_Wilkens_keV_um_single.apply(null, arguments);
};

var real__AT_Landau_IDF = asm["_AT_Landau_IDF"];
asm["_AT_Landau_IDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Landau_IDF.apply(null, arguments);
};

var real__AT_Landau_PDF = asm["_AT_Landau_PDF"];
asm["_AT_Landau_PDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Landau_PDF.apply(null, arguments);
};

var real__AT_Landau_energy_loss_distribution = asm["_AT_Landau_energy_loss_distribution"];
asm["_AT_Landau_energy_loss_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Landau_energy_loss_distribution.apply(null, arguments);
};

var real__AT_Mass_Stopping_Power = asm["_AT_Mass_Stopping_Power"];
asm["_AT_Mass_Stopping_Power"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Mass_Stopping_Power.apply(null, arguments);
};

var real__AT_Mass_Stopping_Power_with_no = asm["_AT_Mass_Stopping_Power_with_no"];
asm["_AT_Mass_Stopping_Power_with_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Mass_Stopping_Power_with_no.apply(null, arguments);
};

var real__AT_Moliere_function_f0 = asm["_AT_Moliere_function_f0"];
asm["_AT_Moliere_function_f0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Moliere_function_f0.apply(null, arguments);
};

var real__AT_Moliere_function_f1 = asm["_AT_Moliere_function_f1"];
asm["_AT_Moliere_function_f1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Moliere_function_f1.apply(null, arguments);
};

var real__AT_Moliere_function_f2 = asm["_AT_Moliere_function_f2"];
asm["_AT_Moliere_function_f2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Moliere_function_f2.apply(null, arguments);
};

var real__AT_N2_to_step = asm["_AT_N2_to_step"];
asm["_AT_N2_to_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_N2_to_step.apply(null, arguments);
};

var real__AT_PSTAR_wrapper = asm["_AT_PSTAR_wrapper"];
asm["_AT_PSTAR_wrapper"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_PSTAR_wrapper.apply(null, arguments);
};

var real__AT_P_RDD = asm["_AT_P_RDD"];
asm["_AT_P_RDD"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_P_RDD.apply(null, arguments);
};

var real__AT_RDD_CucinottaPoint_Gy = asm["_AT_RDD_CucinottaPoint_Gy"];
asm["_AT_RDD_CucinottaPoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_CucinottaPoint_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Cnorm = asm["_AT_RDD_Cucinotta_Cnorm"];
asm["_AT_RDD_Cucinotta_Cnorm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Cnorm.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Ddelta_Gy = asm["_AT_RDD_Cucinotta_Ddelta_Gy"];
asm["_AT_RDD_Cucinotta_Ddelta_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Ddelta_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Ddelta_average_Gy = asm["_AT_RDD_Cucinotta_Ddelta_average_Gy"];
asm["_AT_RDD_Cucinotta_Ddelta_average_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Ddelta_average_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Ddelta_average_integrand_m = asm["_AT_RDD_Cucinotta_Ddelta_average_integrand_m"];
asm["_AT_RDD_Cucinotta_Ddelta_average_integrand_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Ddelta_average_integrand_m.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Dexc_Gy = asm["_AT_RDD_Cucinotta_Dexc_Gy"];
asm["_AT_RDD_Cucinotta_Dexc_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Dexc_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_Dexc_average_Gy = asm["_AT_RDD_Cucinotta_Dexc_average_Gy"];
asm["_AT_RDD_Cucinotta_Dexc_average_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_Dexc_average_Gy.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_f_longRange = asm["_AT_RDD_Cucinotta_f_longRange"];
asm["_AT_RDD_Cucinotta_f_longRange"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_f_longRange.apply(null, arguments);
};

var real__AT_RDD_Cucinotta_f_shortRange = asm["_AT_RDD_Cucinotta_f_shortRange"];
asm["_AT_RDD_Cucinotta_f_shortRange"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Cucinotta_f_shortRange.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_CucinottaPoint_Gy = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy"];
asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_CucinottaPoint_Gy.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration"];
asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy"];
asm["_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_KatzPoint_Gy = asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy"];
asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_KatzPoint_Gy.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration = asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration"];
asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration.apply(null, arguments);
};

var real__AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy = asm["_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy"];
asm["_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy.apply(null, arguments);
};

var real__AT_RDD_Geiss_Gy = asm["_AT_RDD_Geiss_Gy"];
asm["_AT_RDD_Geiss_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Geiss_Gy.apply(null, arguments);
};

var real__AT_RDD_Geiss_average_Gy = asm["_AT_RDD_Geiss_average_Gy"];
asm["_AT_RDD_Geiss_average_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Geiss_average_Gy.apply(null, arguments);
};

var real__AT_RDD_KatzPoint_Gy = asm["_AT_RDD_KatzPoint_Gy"];
asm["_AT_RDD_KatzPoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_KatzPoint_Gy.apply(null, arguments);
};

var real__AT_RDD_KatzSite_Gy = asm["_AT_RDD_KatzSite_Gy"];
asm["_AT_RDD_KatzSite_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_KatzSite_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_LinearER_DSite_Gy = asm["_AT_RDD_Katz_LinearER_DSite_Gy"];
asm["_AT_RDD_Katz_LinearER_DSite_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_LinearER_DSite_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_LinearER_Daverage_Gy = asm["_AT_RDD_Katz_LinearER_Daverage_Gy"];
asm["_AT_RDD_Katz_LinearER_Daverage_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_LinearER_Daverage_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_LinearER_Dpoint_Gy = asm["_AT_RDD_Katz_LinearER_Dpoint_Gy"];
asm["_AT_RDD_Katz_LinearER_Dpoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_LinearER_Dpoint_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_LinearER_dEdx_J_m = asm["_AT_RDD_Katz_LinearER_dEdx_J_m"];
asm["_AT_RDD_Katz_LinearER_dEdx_J_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_LinearER_dEdx_J_m.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_DSite_Gy = asm["_AT_RDD_Katz_PowerLawER_DSite_Gy"];
asm["_AT_RDD_Katz_PowerLawER_DSite_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_DSite_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_DaverageKernel = asm["_AT_RDD_Katz_PowerLawER_DaverageKernel"];
asm["_AT_RDD_Katz_PowerLawER_DaverageKernel"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_DaverageKernel.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_DaverageKernel_approx = asm["_AT_RDD_Katz_PowerLawER_DaverageKernel_approx"];
asm["_AT_RDD_Katz_PowerLawER_DaverageKernel_approx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_DaverageKernel_approx.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_Daverage_Gy = asm["_AT_RDD_Katz_PowerLawER_Daverage_Gy"];
asm["_AT_RDD_Katz_PowerLawER_Daverage_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_Daverage_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_Dpoint_Gy = asm["_AT_RDD_Katz_PowerLawER_Dpoint_Gy"];
asm["_AT_RDD_Katz_PowerLawER_Dpoint_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_Dpoint_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_PowerLawER_dEdx_J_m = asm["_AT_RDD_Katz_PowerLawER_dEdx_J_m"];
asm["_AT_RDD_Katz_PowerLawER_dEdx_J_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_PowerLawER_dEdx_J_m.apply(null, arguments);
};

var real__AT_RDD_Katz_coeff_Gy = asm["_AT_RDD_Katz_coeff_Gy"];
asm["_AT_RDD_Katz_coeff_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_coeff_Gy.apply(null, arguments);
};

var real__AT_RDD_Katz_coeff_Gy_general = asm["_AT_RDD_Katz_coeff_Gy_general"];
asm["_AT_RDD_Katz_coeff_Gy_general"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Katz_coeff_Gy_general.apply(null, arguments);
};

var real__AT_RDD_RadicalDiffusion_Gy = asm["_AT_RDD_RadicalDiffusion_Gy"];
asm["_AT_RDD_RadicalDiffusion_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_RadicalDiffusion_Gy.apply(null, arguments);
};

var real__AT_RDD_RadicalDiffusion_get_energy_idx = asm["_AT_RDD_RadicalDiffusion_get_energy_idx"];
asm["_AT_RDD_RadicalDiffusion_get_energy_idx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_RadicalDiffusion_get_energy_idx.apply(null, arguments);
};

var real__AT_RDD_Test_Gy = asm["_AT_RDD_Test_Gy"];
asm["_AT_RDD_Test_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_Test_Gy.apply(null, arguments);
};

var real__AT_RDD_a0_m = asm["_AT_RDD_a0_m"];
asm["_AT_RDD_a0_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_a0_m.apply(null, arguments);
};

var real__AT_RDD_d_max_Gy = asm["_AT_RDD_d_max_Gy"];
asm["_AT_RDD_d_max_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_d_max_Gy.apply(null, arguments);
};

var real__AT_RDD_d_min_Gy = asm["_AT_RDD_d_min_Gy"];
asm["_AT_RDD_d_min_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_d_min_Gy.apply(null, arguments);
};

var real__AT_RDD_f1_parameters_mixed_field = asm["_AT_RDD_f1_parameters_mixed_field"];
asm["_AT_RDD_f1_parameters_mixed_field"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_f1_parameters_mixed_field.apply(null, arguments);
};

var real__AT_RDD_f1_parameters_single_field = asm["_AT_RDD_f1_parameters_single_field"];
asm["_AT_RDD_f1_parameters_single_field"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_f1_parameters_single_field.apply(null, arguments);
};

var real__AT_RDD_index_from_RDD_number = asm["_AT_RDD_index_from_RDD_number"];
asm["_AT_RDD_index_from_RDD_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_index_from_RDD_number.apply(null, arguments);
};

var real__AT_RDD_name_from_number = asm["_AT_RDD_name_from_number"];
asm["_AT_RDD_name_from_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_name_from_number.apply(null, arguments);
};

var real__AT_RDD_number_from_name = asm["_AT_RDD_number_from_name"];
asm["_AT_RDD_number_from_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_number_from_name.apply(null, arguments);
};

var real__AT_RDD_number_of_parameters = asm["_AT_RDD_number_of_parameters"];
asm["_AT_RDD_number_of_parameters"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_number_of_parameters.apply(null, arguments);
};

var real__AT_RDD_precalculated_constant_Gy = asm["_AT_RDD_precalculated_constant_Gy"];
asm["_AT_RDD_precalculated_constant_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_precalculated_constant_Gy.apply(null, arguments);
};

var real__AT_RDD_r_min_m = asm["_AT_RDD_r_min_m"];
asm["_AT_RDD_r_min_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_RDD_r_min_m.apply(null, arguments);
};

var real__AT_Rutherford_SDCS = asm["_AT_Rutherford_SDCS"];
asm["_AT_Rutherford_SDCS"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Rutherford_SDCS.apply(null, arguments);
};

var real__AT_Rutherford_scatter_cross_section = asm["_AT_Rutherford_scatter_cross_section"];
asm["_AT_Rutherford_scatter_cross_section"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Rutherford_scatter_cross_section.apply(null, arguments);
};

var real__AT_SPC_decompose_data = asm["_AT_SPC_decompose_data"];
asm["_AT_SPC_decompose_data"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_decompose_data.apply(null, arguments);
};

var real__AT_SPC_decompose_header = asm["_AT_SPC_decompose_header"];
asm["_AT_SPC_decompose_header"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_decompose_header.apply(null, arguments);
};

var real__AT_SPC_decompose_size = asm["_AT_SPC_decompose_size"];
asm["_AT_SPC_decompose_size"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_decompose_size.apply(null, arguments);
};

var real__AT_SPC_fast_read_buffer = asm["_AT_SPC_fast_read_buffer"];
asm["_AT_SPC_fast_read_buffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_fast_read_buffer.apply(null, arguments);
};

var real__AT_SPC_get_number_of_bins_from_filename_fast = asm["_AT_SPC_get_number_of_bins_from_filename_fast"];
asm["_AT_SPC_get_number_of_bins_from_filename_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_get_number_of_bins_from_filename_fast.apply(null, arguments);
};

var real__AT_SPC_get_number_of_bytes_in_file = asm["_AT_SPC_get_number_of_bytes_in_file"];
asm["_AT_SPC_get_number_of_bytes_in_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_get_number_of_bytes_in_file.apply(null, arguments);
};

var real__AT_SPC_number_of_bins_at_range = asm["_AT_SPC_number_of_bins_at_range"];
asm["_AT_SPC_number_of_bins_at_range"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_number_of_bins_at_range.apply(null, arguments);
};

var real__AT_SPC_read_data_from_filename_fast = asm["_AT_SPC_read_data_from_filename_fast"];
asm["_AT_SPC_read_data_from_filename_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_read_data_from_filename_fast.apply(null, arguments);
};

var real__AT_SPC_read_from_filename_fast = asm["_AT_SPC_read_from_filename_fast"];
asm["_AT_SPC_read_from_filename_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_read_from_filename_fast.apply(null, arguments);
};

var real__AT_SPC_read_header_from_filename_fast = asm["_AT_SPC_read_header_from_filename_fast"];
asm["_AT_SPC_read_header_from_filename_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_read_header_from_filename_fast.apply(null, arguments);
};

var real__AT_SPC_spectrum_at_range = asm["_AT_SPC_spectrum_at_range"];
asm["_AT_SPC_spectrum_at_range"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SPC_spectrum_at_range.apply(null, arguments);
};

var real__AT_Stopping_Power = asm["_AT_Stopping_Power"];
asm["_AT_Stopping_Power"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Stopping_Power.apply(null, arguments);
};

var real__AT_Stopping_Power_Mass_MeV_cm2_g_int = asm["_AT_Stopping_Power_Mass_MeV_cm2_g_int"];
asm["_AT_Stopping_Power_Mass_MeV_cm2_g_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Stopping_Power_Mass_MeV_cm2_g_int.apply(null, arguments);
};

var real__AT_Stopping_Power_with_no = asm["_AT_Stopping_Power_with_no"];
asm["_AT_Stopping_Power_with_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Stopping_Power_with_no.apply(null, arguments);
};

var real__AT_SuccessiveConvolutions = asm["_AT_SuccessiveConvolutions"];
asm["_AT_SuccessiveConvolutions"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_SuccessiveConvolutions.apply(null, arguments);
};

var real__AT_Vavilov_IDF = asm["_AT_Vavilov_IDF"];
asm["_AT_Vavilov_IDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Vavilov_IDF.apply(null, arguments);
};

var real__AT_Vavilov_PDF = asm["_AT_Vavilov_PDF"];
asm["_AT_Vavilov_PDF"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Vavilov_PDF.apply(null, arguments);
};

var real__AT_Vavilov_energy_loss_distribution = asm["_AT_Vavilov_energy_loss_distribution"];
asm["_AT_Vavilov_energy_loss_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Vavilov_energy_loss_distribution.apply(null, arguments);
};

var real__AT_WEPL_multi = asm["_AT_WEPL_multi"];
asm["_AT_WEPL_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_WEPL_multi.apply(null, arguments);
};

var real__AT_WEPL_single = asm["_AT_WEPL_single"];
asm["_AT_WEPL_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_WEPL_single.apply(null, arguments);
};

var real__AT_Z_from_element_acronym = asm["_AT_Z_from_element_acronym"];
asm["_AT_Z_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Z_from_element_acronym.apply(null, arguments);
};

var real__AT_Z_from_element_acronym_single = asm["_AT_Z_from_element_acronym_single"];
asm["_AT_Z_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Z_from_element_acronym_single.apply(null, arguments);
};

var real__AT_Z_from_particle_no = asm["_AT_Z_from_particle_no"];
asm["_AT_Z_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Z_from_particle_no.apply(null, arguments);
};

var real__AT_Z_from_particle_no_single = asm["_AT_Z_from_particle_no_single"];
asm["_AT_Z_from_particle_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_Z_from_particle_no_single.apply(null, arguments);
};

var real__AT_alpha_g_cm2_MeV_from_material_no = asm["_AT_alpha_g_cm2_MeV_from_material_no"];
asm["_AT_alpha_g_cm2_MeV_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_alpha_g_cm2_MeV_from_material_no.apply(null, arguments);
};

var real__AT_atomic_weight_from_Z = asm["_AT_atomic_weight_from_Z"];
asm["_AT_atomic_weight_from_Z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_atomic_weight_from_Z.apply(null, arguments);
};

var real__AT_atomic_weight_from_element_acronym = asm["_AT_atomic_weight_from_element_acronym"];
asm["_AT_atomic_weight_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_atomic_weight_from_element_acronym.apply(null, arguments);
};

var real__AT_atomic_weight_from_element_acronym_single = asm["_AT_atomic_weight_from_element_acronym_single"];
asm["_AT_atomic_weight_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_atomic_weight_from_element_acronym_single.apply(null, arguments);
};

var real__AT_atomic_weight_from_particle_no = asm["_AT_atomic_weight_from_particle_no"];
asm["_AT_atomic_weight_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_atomic_weight_from_particle_no.apply(null, arguments);
};

var real__AT_average_A_from_composition = asm["_AT_average_A_from_composition"];
asm["_AT_average_A_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_average_A_from_composition.apply(null, arguments);
};

var real__AT_average_A_from_material_no = asm["_AT_average_A_from_material_no"];
asm["_AT_average_A_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_average_A_from_material_no.apply(null, arguments);
};

var real__AT_average_Z_from_composition = asm["_AT_average_Z_from_composition"];
asm["_AT_average_Z_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_average_Z_from_composition.apply(null, arguments);
};

var real__AT_average_Z_from_material_no = asm["_AT_average_Z_from_material_no"];
asm["_AT_average_Z_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_average_Z_from_material_no.apply(null, arguments);
};

var real__AT_beam_par_physical_to_technical = asm["_AT_beam_par_physical_to_technical"];
asm["_AT_beam_par_physical_to_technical"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_beam_par_physical_to_technical.apply(null, arguments);
};

var real__AT_beam_par_technical_to_physical = asm["_AT_beam_par_technical_to_physical"];
asm["_AT_beam_par_technical_to_physical"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_beam_par_technical_to_physical.apply(null, arguments);
};

var real__AT_beta_from_E = asm["_AT_beta_from_E"];
asm["_AT_beta_from_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_beta_from_E.apply(null, arguments);
};

var real__AT_beta_from_E_single = asm["_AT_beta_from_E_single"];
asm["_AT_beta_from_E_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_beta_from_E_single.apply(null, arguments);
};

var real__AT_characteristic_multiple_scattering_angle = asm["_AT_characteristic_multiple_scattering_angle"];
asm["_AT_characteristic_multiple_scattering_angle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_characteristic_multiple_scattering_angle.apply(null, arguments);
};

var real__AT_characteristic_multiple_scattering_angle_single = asm["_AT_characteristic_multiple_scattering_angle_single"];
asm["_AT_characteristic_multiple_scattering_angle_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_characteristic_multiple_scattering_angle_single.apply(null, arguments);
};

var real__AT_characteristic_single_scattering_angle = asm["_AT_characteristic_single_scattering_angle"];
asm["_AT_characteristic_single_scattering_angle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_characteristic_single_scattering_angle.apply(null, arguments);
};

var real__AT_characteristic_single_scattering_angle_single = asm["_AT_characteristic_single_scattering_angle_single"];
asm["_AT_characteristic_single_scattering_angle_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_characteristic_single_scattering_angle_single.apply(null, arguments);
};

var real__AT_check_energy_range_single_field = asm["_AT_check_energy_range_single_field"];
asm["_AT_check_energy_range_single_field"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_check_energy_range_single_field.apply(null, arguments);
};

var real__AT_check_energy_range_single_particle = asm["_AT_check_energy_range_single_particle"];
asm["_AT_check_energy_range_single_particle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_check_energy_range_single_particle.apply(null, arguments);
};

var real__AT_check_particle_no_single_field = asm["_AT_check_particle_no_single_field"];
asm["_AT_check_particle_no_single_field"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_check_particle_no_single_field.apply(null, arguments);
};

var real__AT_check_particle_no_single_particle = asm["_AT_check_particle_no_single_particle"];
asm["_AT_check_particle_no_single_particle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_check_particle_no_single_particle.apply(null, arguments);
};

var real__AT_d_max_RadicalDiffusion_Gy = asm["_AT_d_max_RadicalDiffusion_Gy"];
asm["_AT_d_max_RadicalDiffusion_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_d_max_RadicalDiffusion_Gy.apply(null, arguments);
};

var real__AT_d_min_RadicalDiffusion_Gy = asm["_AT_d_min_RadicalDiffusion_Gy"];
asm["_AT_d_min_RadicalDiffusion_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_d_min_RadicalDiffusion_Gy.apply(null, arguments);
};

var real__AT_density_g_cm3_from_element_acronym = asm["_AT_density_g_cm3_from_element_acronym"];
asm["_AT_density_g_cm3_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_density_g_cm3_from_element_acronym.apply(null, arguments);
};

var real__AT_density_g_cm3_from_element_acronym_single = asm["_AT_density_g_cm3_from_element_acronym_single"];
asm["_AT_density_g_cm3_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_density_g_cm3_from_element_acronym_single.apply(null, arguments);
};

var real__AT_density_g_cm3_from_material_no = asm["_AT_density_g_cm3_from_material_no"];
asm["_AT_density_g_cm3_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_density_g_cm3_from_material_no.apply(null, arguments);
};

var real__AT_dose_Bortfeld_Gy_multi = asm["_AT_dose_Bortfeld_Gy_multi"];
asm["_AT_dose_Bortfeld_Gy_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_Bortfeld_Gy_multi.apply(null, arguments);
};

var real__AT_dose_Bortfeld_Gy_single = asm["_AT_dose_Bortfeld_Gy_single"];
asm["_AT_dose_Bortfeld_Gy_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_Bortfeld_Gy_single.apply(null, arguments);
};

var real__AT_dose_Gy_from_fluence_cm2 = asm["_AT_dose_Gy_from_fluence_cm2"];
asm["_AT_dose_Gy_from_fluence_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_Gy_from_fluence_cm2.apply(null, arguments);
};

var real__AT_dose_Gy_from_fluence_cm2_single = asm["_AT_dose_Gy_from_fluence_cm2_single"];
asm["_AT_dose_Gy_from_fluence_cm2_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_Gy_from_fluence_cm2_single.apply(null, arguments);
};

var real__AT_dose_weighted_E_MeV_u = asm["_AT_dose_weighted_E_MeV_u"];
asm["_AT_dose_weighted_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_weighted_E_MeV_u.apply(null, arguments);
};

var real__AT_dose_weighted_LET_MeV_cm2_g = asm["_AT_dose_weighted_LET_MeV_cm2_g"];
asm["_AT_dose_weighted_LET_MeV_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_dose_weighted_LET_MeV_cm2_g.apply(null, arguments);
};

var real__AT_effective_Z_from_composition = asm["_AT_effective_Z_from_composition"];
asm["_AT_effective_Z_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_Z_from_composition.apply(null, arguments);
};

var real__AT_effective_charge_from_E_MeV_u = asm["_AT_effective_charge_from_E_MeV_u"];
asm["_AT_effective_charge_from_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_charge_from_E_MeV_u.apply(null, arguments);
};

var real__AT_effective_charge_from_E_MeV_u_single = asm["_AT_effective_charge_from_E_MeV_u_single"];
asm["_AT_effective_charge_from_E_MeV_u_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_charge_from_E_MeV_u_single.apply(null, arguments);
};

var real__AT_effective_charge_from_beta = asm["_AT_effective_charge_from_beta"];
asm["_AT_effective_charge_from_beta"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_charge_from_beta.apply(null, arguments);
};

var real__AT_effective_charge_from_beta_single = asm["_AT_effective_charge_from_beta_single"];
asm["_AT_effective_charge_from_beta_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_charge_from_beta_single.apply(null, arguments);
};

var real__AT_effective_collision_number = asm["_AT_effective_collision_number"];
asm["_AT_effective_collision_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_collision_number.apply(null, arguments);
};

var real__AT_effective_collision_number_single = asm["_AT_effective_collision_number_single"];
asm["_AT_effective_collision_number_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_effective_collision_number_single.apply(null, arguments);
};

var real__AT_el_energy_loss_leading_term_MeV_cm2_g = asm["_AT_el_energy_loss_leading_term_MeV_cm2_g"];
asm["_AT_el_energy_loss_leading_term_MeV_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_el_energy_loss_leading_term_MeV_cm2_g.apply(null, arguments);
};

var real__AT_electron_density_cm3_from_element_acronym = asm["_AT_electron_density_cm3_from_element_acronym"];
asm["_AT_electron_density_cm3_from_element_acronym"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_cm3_from_element_acronym.apply(null, arguments);
};

var real__AT_electron_density_cm3_from_element_acronym_single = asm["_AT_electron_density_cm3_from_element_acronym_single"];
asm["_AT_electron_density_cm3_from_element_acronym_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_cm3_from_element_acronym_single.apply(null, arguments);
};

var real__AT_electron_density_m3_from_composition = asm["_AT_electron_density_m3_from_composition"];
asm["_AT_electron_density_m3_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_from_composition.apply(null, arguments);
};

var real__AT_electron_density_m3_from_material_no_multi = asm["_AT_electron_density_m3_from_material_no_multi"];
asm["_AT_electron_density_m3_from_material_no_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_from_material_no_multi.apply(null, arguments);
};

var real__AT_electron_density_m3_from_material_no_single = asm["_AT_electron_density_m3_from_material_no_single"];
asm["_AT_electron_density_m3_from_material_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_from_material_no_single.apply(null, arguments);
};

var real__AT_electron_density_m3_multi = asm["_AT_electron_density_m3_multi"];
asm["_AT_electron_density_m3_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_multi.apply(null, arguments);
};

var real__AT_electron_density_m3_single = asm["_AT_electron_density_m3_single"];
asm["_AT_electron_density_m3_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_electron_density_m3_single.apply(null, arguments);
};

var real__AT_element_acronym_from_Z = asm["_AT_element_acronym_from_Z"];
asm["_AT_element_acronym_from_Z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_element_acronym_from_Z.apply(null, arguments);
};

var real__AT_element_acronym_from_Z_single = asm["_AT_element_acronym_from_Z_single"];
asm["_AT_element_acronym_from_Z_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_element_acronym_from_Z_single.apply(null, arguments);
};

var real__AT_energy_Bortfeld_MeV_u = asm["_AT_energy_Bortfeld_MeV_u"];
asm["_AT_energy_Bortfeld_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_Bortfeld_MeV_u.apply(null, arguments);
};

var real__AT_energy_loss_FWHM = asm["_AT_energy_loss_FWHM"];
asm["_AT_energy_loss_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_FWHM.apply(null, arguments);
};

var real__AT_energy_loss_distribution = asm["_AT_energy_loss_distribution"];
asm["_AT_energy_loss_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_distribution.apply(null, arguments);
};

var real__AT_energy_loss_from_lambda_gauss_multi = asm["_AT_energy_loss_from_lambda_gauss_multi"];
asm["_AT_energy_loss_from_lambda_gauss_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_from_lambda_gauss_multi.apply(null, arguments);
};

var real__AT_energy_loss_from_lambda_landau_multi = asm["_AT_energy_loss_from_lambda_landau_multi"];
asm["_AT_energy_loss_from_lambda_landau_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_from_lambda_landau_multi.apply(null, arguments);
};

var real__AT_energy_loss_from_lambda_landau_single = asm["_AT_energy_loss_from_lambda_landau_single"];
asm["_AT_energy_loss_from_lambda_landau_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_from_lambda_landau_single.apply(null, arguments);
};

var real__AT_energy_loss_from_lambda_vavilov_multi = asm["_AT_energy_loss_from_lambda_vavilov_multi"];
asm["_AT_energy_loss_from_lambda_vavilov_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_from_lambda_vavilov_multi.apply(null, arguments);
};

var real__AT_energy_loss_keV_Landau_FWHM = asm["_AT_energy_loss_keV_Landau_FWHM"];
asm["_AT_energy_loss_keV_Landau_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_keV_Landau_FWHM.apply(null, arguments);
};

var real__AT_energy_loss_keV_Landau_Mode = asm["_AT_energy_loss_keV_Landau_Mode"];
asm["_AT_energy_loss_keV_Landau_Mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_keV_Landau_Mode.apply(null, arguments);
};

var real__AT_energy_loss_keV_Vavilov_FWHM = asm["_AT_energy_loss_keV_Vavilov_FWHM"];
asm["_AT_energy_loss_keV_Vavilov_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_keV_Vavilov_FWHM.apply(null, arguments);
};

var real__AT_energy_loss_mode = asm["_AT_energy_loss_mode"];
asm["_AT_energy_loss_mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_loss_mode.apply(null, arguments);
};

var real__AT_energy_straggling_MeV2_cm2_g = asm["_AT_energy_straggling_MeV2_cm2_g"];
asm["_AT_energy_straggling_MeV2_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_straggling_MeV2_cm2_g.apply(null, arguments);
};

var real__AT_energy_straggling_after_slab_E_MeV_u = asm["_AT_energy_straggling_after_slab_E_MeV_u"];
asm["_AT_energy_straggling_after_slab_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_energy_straggling_after_slab_E_MeV_u.apply(null, arguments);
};

var real__AT_fit_Bortfeld = asm["_AT_fit_Bortfeld"];
asm["_AT_fit_Bortfeld"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fit_Bortfeld.apply(null, arguments);
};

var real__AT_fluence_cm2_from_dose_Gy = asm["_AT_fluence_cm2_from_dose_Gy"];
asm["_AT_fluence_cm2_from_dose_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fluence_cm2_from_dose_Gy.apply(null, arguments);
};

var real__AT_fluence_cm2_from_dose_Gy_single = asm["_AT_fluence_cm2_from_dose_Gy_single"];
asm["_AT_fluence_cm2_from_dose_Gy_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fluence_cm2_from_dose_Gy_single.apply(null, arguments);
};

var real__AT_fluence_weighted_E_MeV_u = asm["_AT_fluence_weighted_E_MeV_u"];
asm["_AT_fluence_weighted_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fluence_weighted_E_MeV_u.apply(null, arguments);
};

var real__AT_fluence_weighted_LET_MeV_cm2_g = asm["_AT_fluence_weighted_LET_MeV_cm2_g"];
asm["_AT_fluence_weighted_LET_MeV_cm2_g"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fluence_weighted_LET_MeV_cm2_g.apply(null, arguments);
};

var real__AT_fwhm_Bortfeld_cm = asm["_AT_fwhm_Bortfeld_cm"];
asm["_AT_fwhm_Bortfeld_cm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_fwhm_Bortfeld_cm.apply(null, arguments);
};

var real__AT_gamma_ = asm["_AT_gamma_"];
asm["_AT_gamma_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gamma_.apply(null, arguments);
};

var real__AT_gamma_from_E = asm["_AT_gamma_from_E"];
asm["_AT_gamma_from_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gamma_from_E.apply(null, arguments);
};

var real__AT_gamma_from_E_single = asm["_AT_gamma_from_E_single"];
asm["_AT_gamma_from_E_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gamma_from_E_single.apply(null, arguments);
};

var real__AT_gamma_response = asm["_AT_gamma_response"];
asm["_AT_gamma_response"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gamma_response.apply(null, arguments);
};

var real__AT_get_DSB_distribution = asm["_AT_get_DSB_distribution"];
asm["_AT_get_DSB_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_DSB_distribution.apply(null, arguments);
};

var real__AT_get_error_msg = asm["_AT_get_error_msg"];
asm["_AT_get_error_msg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_error_msg.apply(null, arguments);
};

var real__AT_get_gamma_response = asm["_AT_get_gamma_response"];
asm["_AT_get_gamma_response"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_gamma_response.apply(null, arguments);
};

var real__AT_get_gamma_response_for_average_dose = asm["_AT_get_gamma_response_for_average_dose"];
asm["_AT_get_gamma_response_for_average_dose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_gamma_response_for_average_dose.apply(null, arguments);
};

var real__AT_get_interpolated_x_from_input_2d_table = asm["_AT_get_interpolated_x_from_input_2d_table"];
asm["_AT_get_interpolated_x_from_input_2d_table"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_interpolated_x_from_input_2d_table.apply(null, arguments);
};

var real__AT_get_interpolated_y_from_input_2d_table = asm["_AT_get_interpolated_y_from_input_2d_table"];
asm["_AT_get_interpolated_y_from_input_2d_table"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_interpolated_y_from_input_2d_table.apply(null, arguments);
};

var real__AT_get_interpolated_y_from_input_table = asm["_AT_get_interpolated_y_from_input_table"];
asm["_AT_get_interpolated_y_from_input_table"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_interpolated_y_from_input_table.apply(null, arguments);
};

var real__AT_get_interpolated_y_from_interval = asm["_AT_get_interpolated_y_from_interval"];
asm["_AT_get_interpolated_y_from_interval"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_interpolated_y_from_interval.apply(null, arguments);
};

var real__AT_get_ion_efficiency_from_dose_distribution = asm["_AT_get_ion_efficiency_from_dose_distribution"];
asm["_AT_get_ion_efficiency_from_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_ion_efficiency_from_dose_distribution.apply(null, arguments);
};

var real__AT_get_ion_efficiency_from_response_distribution = asm["_AT_get_ion_efficiency_from_response_distribution"];
asm["_AT_get_ion_efficiency_from_response_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_ion_efficiency_from_response_distribution.apply(null, arguments);
};

var real__AT_get_ion_response_from_dose_distribution = asm["_AT_get_ion_response_from_dose_distribution"];
asm["_AT_get_ion_response_from_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_ion_response_from_dose_distribution.apply(null, arguments);
};

var real__AT_get_ion_response_from_response_distribution = asm["_AT_get_ion_response_from_response_distribution"];
asm["_AT_get_ion_response_from_response_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_ion_response_from_response_distribution.apply(null, arguments);
};

var real__AT_get_material_data = asm["_AT_get_material_data"];
asm["_AT_get_material_data"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_material_data.apply(null, arguments);
};

var real__AT_get_materials_data = asm["_AT_get_materials_data"];
asm["_AT_get_materials_data"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_materials_data.apply(null, arguments);
};

var real__AT_get_response_distribution_from_dose_distribution = asm["_AT_get_response_distribution_from_dose_distribution"];
asm["_AT_get_response_distribution_from_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_get_response_distribution_from_dose_distribution.apply(null, arguments);
};

var real__AT_gyroradius_m = asm["_AT_gyroradius_m"];
asm["_AT_gyroradius_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_gyroradius_m.apply(null, arguments);
};

var real__AT_histoOld_bin_no = asm["_AT_histoOld_bin_no"];
asm["_AT_histoOld_bin_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_bin_no.apply(null, arguments);
};

var real__AT_histoOld_get_bin_width = asm["_AT_histoOld_get_bin_width"];
asm["_AT_histoOld_get_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_get_bin_width.apply(null, arguments);
};

var real__AT_histoOld_get_bin_widths = asm["_AT_histoOld_get_bin_widths"];
asm["_AT_histoOld_get_bin_widths"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_get_bin_widths.apply(null, arguments);
};

var real__AT_histoOld_log_bin_width = asm["_AT_histoOld_log_bin_width"];
asm["_AT_histoOld_log_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_log_bin_width.apply(null, arguments);
};

var real__AT_histoOld_lower_bin_limit = asm["_AT_histoOld_lower_bin_limit"];
asm["_AT_histoOld_lower_bin_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_lower_bin_limit.apply(null, arguments);
};

var real__AT_histoOld_upper_bin_limit = asm["_AT_histoOld_upper_bin_limit"];
asm["_AT_histoOld_upper_bin_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histoOld_upper_bin_limit.apply(null, arguments);
};

var real__AT_histo_add_multi = asm["_AT_histo_add_multi"];
asm["_AT_histo_add_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_add_multi.apply(null, arguments);
};

var real__AT_histo_add_single = asm["_AT_histo_add_single"];
asm["_AT_histo_add_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_add_single.apply(null, arguments);
};

var real__AT_histo_bin_no = asm["_AT_histo_bin_no"];
asm["_AT_histo_bin_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_bin_no.apply(null, arguments);
};

var real__AT_histo_bin_width = asm["_AT_histo_bin_width"];
asm["_AT_histo_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_bin_width.apply(null, arguments);
};

var real__AT_histo_bin_widths = asm["_AT_histo_bin_widths"];
asm["_AT_histo_bin_widths"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_bin_widths.apply(null, arguments);
};

var real__AT_histo_left_limit = asm["_AT_histo_left_limit"];
asm["_AT_histo_left_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_left_limit.apply(null, arguments);
};

var real__AT_histo_left_limits = asm["_AT_histo_left_limits"];
asm["_AT_histo_left_limits"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_left_limits.apply(null, arguments);
};

var real__AT_histo_linear_bin_no = asm["_AT_histo_linear_bin_no"];
asm["_AT_histo_linear_bin_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_bin_no.apply(null, arguments);
};

var real__AT_histo_linear_bin_width = asm["_AT_histo_linear_bin_width"];
asm["_AT_histo_linear_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_bin_width.apply(null, arguments);
};

var real__AT_histo_linear_left_limit = asm["_AT_histo_linear_left_limit"];
asm["_AT_histo_linear_left_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_left_limit.apply(null, arguments);
};

var real__AT_histo_linear_midpoint = asm["_AT_histo_linear_midpoint"];
asm["_AT_histo_linear_midpoint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_midpoint.apply(null, arguments);
};

var real__AT_histo_linear_n_bins = asm["_AT_histo_linear_n_bins"];
asm["_AT_histo_linear_n_bins"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_n_bins.apply(null, arguments);
};

var real__AT_histo_linear_step = asm["_AT_histo_linear_step"];
asm["_AT_histo_linear_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_linear_step.apply(null, arguments);
};

var real__AT_histo_logarithmic_bin_no = asm["_AT_histo_logarithmic_bin_no"];
asm["_AT_histo_logarithmic_bin_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_bin_no.apply(null, arguments);
};

var real__AT_histo_logarithmic_bin_width = asm["_AT_histo_logarithmic_bin_width"];
asm["_AT_histo_logarithmic_bin_width"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_bin_width.apply(null, arguments);
};

var real__AT_histo_logarithmic_left_limit = asm["_AT_histo_logarithmic_left_limit"];
asm["_AT_histo_logarithmic_left_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_left_limit.apply(null, arguments);
};

var real__AT_histo_logarithmic_midpoint = asm["_AT_histo_logarithmic_midpoint"];
asm["_AT_histo_logarithmic_midpoint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_midpoint.apply(null, arguments);
};

var real__AT_histo_logarithmic_n_bins = asm["_AT_histo_logarithmic_n_bins"];
asm["_AT_histo_logarithmic_n_bins"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_n_bins.apply(null, arguments);
};

var real__AT_histo_logarithmic_step = asm["_AT_histo_logarithmic_step"];
asm["_AT_histo_logarithmic_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_logarithmic_step.apply(null, arguments);
};

var real__AT_histo_midpoint = asm["_AT_histo_midpoint"];
asm["_AT_histo_midpoint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_midpoint.apply(null, arguments);
};

var real__AT_histo_midpoints = asm["_AT_histo_midpoints"];
asm["_AT_histo_midpoints"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_midpoints.apply(null, arguments);
};

var real__AT_histo_n_bins = asm["_AT_histo_n_bins"];
asm["_AT_histo_n_bins"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_n_bins.apply(null, arguments);
};

var real__AT_histo_normalize = asm["_AT_histo_normalize"];
asm["_AT_histo_normalize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_normalize.apply(null, arguments);
};

var real__AT_histo_step = asm["_AT_histo_step"];
asm["_AT_histo_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_step.apply(null, arguments);
};

var real__AT_histo_sum = asm["_AT_histo_sum"];
asm["_AT_histo_sum"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_histo_sum.apply(null, arguments);
};

var real__AT_interparticleDistance_m = asm["_AT_interparticleDistance_m"];
asm["_AT_interparticleDistance_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_interparticleDistance_m.apply(null, arguments);
};

var real__AT_inv_interparticleDistance_Gy = asm["_AT_inv_interparticleDistance_Gy"];
asm["_AT_inv_interparticleDistance_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inv_interparticleDistance_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_Cucinotta_m = asm["_AT_inverse_RDD_Cucinotta_m"];
asm["_AT_inverse_RDD_Cucinotta_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_Cucinotta_m.apply(null, arguments);
};

var real__AT_inverse_RDD_Cucinotta_solver_function_Gy = asm["_AT_inverse_RDD_Cucinotta_solver_function_Gy"];
asm["_AT_inverse_RDD_Cucinotta_solver_function_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_Cucinotta_solver_function_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m = asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m"];
asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m.apply(null, arguments);
};

var real__AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy = asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy"];
asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_ExtendedTarget_KatzPoint_m = asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_m"];
asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_ExtendedTarget_KatzPoint_m.apply(null, arguments);
};

var real__AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy = asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy"];
asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_Geiss_m = asm["_AT_inverse_RDD_Geiss_m"];
asm["_AT_inverse_RDD_Geiss_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_Geiss_m.apply(null, arguments);
};

var real__AT_inverse_RDD_KatzPoint_LinearER_m = asm["_AT_inverse_RDD_KatzPoint_LinearER_m"];
asm["_AT_inverse_RDD_KatzPoint_LinearER_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_KatzPoint_LinearER_m.apply(null, arguments);
};

var real__AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy = asm["_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy"];
asm["_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy.apply(null, arguments);
};

var real__AT_inverse_RDD_KatzPoint_m = asm["_AT_inverse_RDD_KatzPoint_m"];
asm["_AT_inverse_RDD_KatzPoint_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_KatzPoint_m.apply(null, arguments);
};

var real__AT_inverse_RDD_KatzSite_m = asm["_AT_inverse_RDD_KatzSite_m"];
asm["_AT_inverse_RDD_KatzSite_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_KatzSite_m.apply(null, arguments);
};

var real__AT_inverse_RDD_Test_m = asm["_AT_inverse_RDD_Test_m"];
asm["_AT_inverse_RDD_Test_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RDD_Test_m.apply(null, arguments);
};

var real__AT_inverse_RadicalDiffusion_m = asm["_AT_inverse_RadicalDiffusion_m"];
asm["_AT_inverse_RadicalDiffusion_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_inverse_RadicalDiffusion_m.apply(null, arguments);
};

var real__AT_kappa_multi = asm["_AT_kappa_multi"];
asm["_AT_kappa_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_kappa_multi.apply(null, arguments);
};

var real__AT_kappa_single = asm["_AT_kappa_single"];
asm["_AT_kappa_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_kappa_single.apply(null, arguments);
};

var real__AT_kinetic_variable_single = asm["_AT_kinetic_variable_single"];
asm["_AT_kinetic_variable_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_kinetic_variable_single.apply(null, arguments);
};

var real__AT_lambda_Landau_FWHM = asm["_AT_lambda_Landau_FWHM"];
asm["_AT_lambda_Landau_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_FWHM.apply(null, arguments);
};

var real__AT_lambda_Landau_FWHM_left = asm["_AT_lambda_Landau_FWHM_left"];
asm["_AT_lambda_Landau_FWHM_left"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_FWHM_left.apply(null, arguments);
};

var real__AT_lambda_Landau_FWHM_right = asm["_AT_lambda_Landau_FWHM_right"];
asm["_AT_lambda_Landau_FWHM_right"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_FWHM_right.apply(null, arguments);
};

var real__AT_lambda_Landau_Mean = asm["_AT_lambda_Landau_Mean"];
asm["_AT_lambda_Landau_Mean"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_Mean.apply(null, arguments);
};

var real__AT_lambda_Landau_Mode = asm["_AT_lambda_Landau_Mode"];
asm["_AT_lambda_Landau_Mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Landau_Mode.apply(null, arguments);
};

var real__AT_lambda_Vavilov_FWHM = asm["_AT_lambda_Vavilov_FWHM"];
asm["_AT_lambda_Vavilov_FWHM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_FWHM.apply(null, arguments);
};

var real__AT_lambda_Vavilov_FWHM_left = asm["_AT_lambda_Vavilov_FWHM_left"];
asm["_AT_lambda_Vavilov_FWHM_left"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_FWHM_left.apply(null, arguments);
};

var real__AT_lambda_Vavilov_FWHM_right = asm["_AT_lambda_Vavilov_FWHM_right"];
asm["_AT_lambda_Vavilov_FWHM_right"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_FWHM_right.apply(null, arguments);
};

var real__AT_lambda_Vavilov_Mean = asm["_AT_lambda_Vavilov_Mean"];
asm["_AT_lambda_Vavilov_Mean"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_Mean.apply(null, arguments);
};

var real__AT_lambda_Vavilov_Mode = asm["_AT_lambda_Vavilov_Mode"];
asm["_AT_lambda_Vavilov_Mode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_Mode.apply(null, arguments);
};

var real__AT_lambda_Vavilov_Skewness = asm["_AT_lambda_Vavilov_Skewness"];
asm["_AT_lambda_Vavilov_Skewness"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_Skewness.apply(null, arguments);
};

var real__AT_lambda_Vavilov_Variance = asm["_AT_lambda_Vavilov_Variance"];
asm["_AT_lambda_Vavilov_Variance"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_Vavilov_Variance.apply(null, arguments);
};

var real__AT_lambda_landau_from_energy_loss_multi = asm["_AT_lambda_landau_from_energy_loss_multi"];
asm["_AT_lambda_landau_from_energy_loss_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_landau_from_energy_loss_multi.apply(null, arguments);
};

var real__AT_lambda_landau_from_energy_loss_single = asm["_AT_lambda_landau_from_energy_loss_single"];
asm["_AT_lambda_landau_from_energy_loss_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_landau_from_energy_loss_single.apply(null, arguments);
};

var real__AT_lambda_max_multi = asm["_AT_lambda_max_multi"];
asm["_AT_lambda_max_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_max_multi.apply(null, arguments);
};

var real__AT_lambda_max_single = asm["_AT_lambda_max_single"];
asm["_AT_lambda_max_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_max_single.apply(null, arguments);
};

var real__AT_lambda_mean_multi = asm["_AT_lambda_mean_multi"];
asm["_AT_lambda_mean_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_mean_multi.apply(null, arguments);
};

var real__AT_lambda_mean_single = asm["_AT_lambda_mean_single"];
asm["_AT_lambda_mean_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_mean_single.apply(null, arguments);
};

var real__AT_lambda_vavilov_from_energy_loss_multi = asm["_AT_lambda_vavilov_from_energy_loss_multi"];
asm["_AT_lambda_vavilov_from_energy_loss_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_vavilov_from_energy_loss_multi.apply(null, arguments);
};

var real__AT_lambda_vavilov_from_energy_loss_single = asm["_AT_lambda_vavilov_from_energy_loss_single"];
asm["_AT_lambda_vavilov_from_energy_loss_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_lambda_vavilov_from_energy_loss_single.apply(null, arguments);
};

var real__AT_low_fluence_local_dose_distribution = asm["_AT_low_fluence_local_dose_distribution"];
asm["_AT_low_fluence_local_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_low_fluence_local_dose_distribution.apply(null, arguments);
};

var real__AT_m_g_cm2_from_material_no = asm["_AT_m_g_cm2_from_material_no"];
asm["_AT_m_g_cm2_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_m_g_cm2_from_material_no.apply(null, arguments);
};

var real__AT_mass_correction_terms = asm["_AT_mass_correction_terms"];
asm["_AT_mass_correction_terms"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mass_correction_terms.apply(null, arguments);
};

var real__AT_mass_correction_terms_new = asm["_AT_mass_correction_terms_new"];
asm["_AT_mass_correction_terms_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mass_correction_terms_new.apply(null, arguments);
};

var real__AT_material_index_from_material_number = asm["_AT_material_index_from_material_number"];
asm["_AT_material_index_from_material_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_material_index_from_material_number.apply(null, arguments);
};

var real__AT_material_name_from_number = asm["_AT_material_name_from_number"];
asm["_AT_material_name_from_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_material_name_from_number.apply(null, arguments);
};

var real__AT_material_number_from_name = asm["_AT_material_number_from_name"];
asm["_AT_material_number_from_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_material_number_from_name.apply(null, arguments);
};

var real__AT_max_E_transfer_MeV = asm["_AT_max_E_transfer_MeV"];
asm["_AT_max_E_transfer_MeV"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_E_transfer_MeV.apply(null, arguments);
};

var real__AT_max_E_transfer_MeV_new = asm["_AT_max_E_transfer_MeV_new"];
asm["_AT_max_E_transfer_MeV_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_E_transfer_MeV_new.apply(null, arguments);
};

var real__AT_max_E_transfer_MeV_new_single = asm["_AT_max_E_transfer_MeV_new_single"];
asm["_AT_max_E_transfer_MeV_new_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_E_transfer_MeV_new_single.apply(null, arguments);
};

var real__AT_max_E_transfer_MeV_single = asm["_AT_max_E_transfer_MeV_single"];
asm["_AT_max_E_transfer_MeV_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_E_transfer_MeV_single.apply(null, arguments);
};

var real__AT_max_classic_E_transfer_MeV_new_single = asm["_AT_max_classic_E_transfer_MeV_new_single"];
asm["_AT_max_classic_E_transfer_MeV_new_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_classic_E_transfer_MeV_new_single.apply(null, arguments);
};

var real__AT_max_classic_E_transfer_MeV_single = asm["_AT_max_classic_E_transfer_MeV_single"];
asm["_AT_max_classic_E_transfer_MeV_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_classic_E_transfer_MeV_single.apply(null, arguments);
};

var real__AT_max_electron_range_m = asm["_AT_max_electron_range_m"];
asm["_AT_max_electron_range_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_electron_range_m.apply(null, arguments);
};

var real__AT_max_electron_ranges_m = asm["_AT_max_electron_ranges_m"];
asm["_AT_max_electron_ranges_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_electron_ranges_m.apply(null, arguments);
};

var real__AT_max_plateau_Bortfeld = asm["_AT_max_plateau_Bortfeld"];
asm["_AT_max_plateau_Bortfeld"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_plateau_Bortfeld.apply(null, arguments);
};

var real__AT_max_relativistic_E_transfer_MeV_new_single = asm["_AT_max_relativistic_E_transfer_MeV_new_single"];
asm["_AT_max_relativistic_E_transfer_MeV_new_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_relativistic_E_transfer_MeV_new_single.apply(null, arguments);
};

var real__AT_max_relativistic_E_transfer_MeV_single = asm["_AT_max_relativistic_E_transfer_MeV_single"];
asm["_AT_max_relativistic_E_transfer_MeV_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_max_relativistic_E_transfer_MeV_single.apply(null, arguments);
};

var real__AT_mean_energy_loss_keV = asm["_AT_mean_energy_loss_keV"];
asm["_AT_mean_energy_loss_keV"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mean_energy_loss_keV.apply(null, arguments);
};

var real__AT_mean_excitation_energy_eV_from_Z = asm["_AT_mean_excitation_energy_eV_from_Z"];
asm["_AT_mean_excitation_energy_eV_from_Z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mean_excitation_energy_eV_from_Z.apply(null, arguments);
};

var real__AT_mean_excitation_energy_eV_from_Z_single = asm["_AT_mean_excitation_energy_eV_from_Z_single"];
asm["_AT_mean_excitation_energy_eV_from_Z_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mean_excitation_energy_eV_from_Z_single.apply(null, arguments);
};

var real__AT_mean_number_of_tracks_contrib = asm["_AT_mean_number_of_tracks_contrib"];
asm["_AT_mean_number_of_tracks_contrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_mean_number_of_tracks_contrib.apply(null, arguments);
};

var real__AT_momentum_MeV_c_u_from_E_MeV_u = asm["_AT_momentum_MeV_c_u_from_E_MeV_u"];
asm["_AT_momentum_MeV_c_u_from_E_MeV_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_momentum_MeV_c_u_from_E_MeV_u.apply(null, arguments);
};

var real__AT_momentum_from_E_MeV_c_u_single = asm["_AT_momentum_from_E_MeV_c_u_single"];
asm["_AT_momentum_from_E_MeV_c_u_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_momentum_from_E_MeV_c_u_single.apply(null, arguments);
};

var real__AT_n_bins_RadicalDiffusion = asm["_AT_n_bins_RadicalDiffusion"];
asm["_AT_n_bins_RadicalDiffusion"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_n_bins_RadicalDiffusion.apply(null, arguments);
};

var real__AT_n_bins_for_DSB_distribution = asm["_AT_n_bins_for_DSB_distribution"];
asm["_AT_n_bins_for_DSB_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_n_bins_for_DSB_distribution.apply(null, arguments);
};

var real__AT_n_bins_for_low_fluence_local_dose_distribution = asm["_AT_n_bins_for_low_fluence_local_dose_distribution"];
asm["_AT_n_bins_for_low_fluence_local_dose_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_n_bins_for_low_fluence_local_dose_distribution.apply(null, arguments);
};

var real__AT_n_bins_for_single_impact_local_dose_distrib = asm["_AT_n_bins_for_single_impact_local_dose_distrib"];
asm["_AT_n_bins_for_single_impact_local_dose_distrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_n_bins_for_single_impact_local_dose_distrib.apply(null, arguments);
};

var real__AT_normalize = asm["_AT_normalize"];
asm["_AT_normalize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_normalize.apply(null, arguments);
};

var real__AT_nuclear_spin_from_Z_and_A = asm["_AT_nuclear_spin_from_Z_and_A"];
asm["_AT_nuclear_spin_from_Z_and_A"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_nuclear_spin_from_Z_and_A.apply(null, arguments);
};

var real__AT_nuclear_spin_from_particle_no_multi = asm["_AT_nuclear_spin_from_particle_no_multi"];
asm["_AT_nuclear_spin_from_particle_no_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_nuclear_spin_from_particle_no_multi.apply(null, arguments);
};

var real__AT_nuclear_spin_from_particle_no_single = asm["_AT_nuclear_spin_from_particle_no_single"];
asm["_AT_nuclear_spin_from_particle_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_nuclear_spin_from_particle_no_single.apply(null, arguments);
};

var real__AT_p_MeV_from_material_no = asm["_AT_p_MeV_from_material_no"];
asm["_AT_p_MeV_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_p_MeV_from_material_no.apply(null, arguments);
};

var real__AT_particle_name_from_particle_no = asm["_AT_particle_name_from_particle_no"];
asm["_AT_particle_name_from_particle_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_name_from_particle_no.apply(null, arguments);
};

var real__AT_particle_name_from_particle_no_single = asm["_AT_particle_name_from_particle_no_single"];
asm["_AT_particle_name_from_particle_no_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_name_from_particle_no_single.apply(null, arguments);
};

var real__AT_particle_no_from_Z_and_A = asm["_AT_particle_no_from_Z_and_A"];
asm["_AT_particle_no_from_Z_and_A"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_no_from_Z_and_A.apply(null, arguments);
};

var real__AT_particle_no_from_Z_and_A_single = asm["_AT_particle_no_from_Z_and_A_single"];
asm["_AT_particle_no_from_Z_and_A_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_no_from_Z_and_A_single.apply(null, arguments);
};

var real__AT_particle_no_from_particle_name = asm["_AT_particle_no_from_particle_name"];
asm["_AT_particle_no_from_particle_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_no_from_particle_name.apply(null, arguments);
};

var real__AT_particle_no_from_particle_name_single = asm["_AT_particle_no_from_particle_name_single"];
asm["_AT_particle_no_from_particle_name_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_particle_no_from_particle_name_single.apply(null, arguments);
};

var real__AT_phase_from_material_no = asm["_AT_phase_from_material_no"];
asm["_AT_phase_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_phase_from_material_no.apply(null, arguments);
};

var real__AT_plasma_energy_J_from_material_no = asm["_AT_plasma_energy_J_from_material_no"];
asm["_AT_plasma_energy_J_from_material_no"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_plasma_energy_J_from_material_no.apply(null, arguments);
};

var real__AT_plasma_energy_J_single = asm["_AT_plasma_energy_J_single"];
asm["_AT_plasma_energy_J_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_plasma_energy_J_single.apply(null, arguments);
};

var real__AT_proton_RBE_multi = asm["_AT_proton_RBE_multi"];
asm["_AT_proton_RBE_multi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_proton_RBE_multi.apply(null, arguments);
};

var real__AT_proton_RBE_single = asm["_AT_proton_RBE_single"];
asm["_AT_proton_RBE_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_proton_RBE_single.apply(null, arguments);
};

var real__AT_r_RDD_m = asm["_AT_r_RDD_m"];
asm["_AT_r_RDD_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_r_RDD_m.apply(null, arguments);
};

var real__AT_r_max_RadicalDiffusion_m = asm["_AT_r_max_RadicalDiffusion_m"];
asm["_AT_r_max_RadicalDiffusion_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_r_max_RadicalDiffusion_m.apply(null, arguments);
};

var real__AT_r_min_RadicalDiffusion_m = asm["_AT_r_min_RadicalDiffusion_m"];
asm["_AT_r_min_RadicalDiffusion_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_r_min_RadicalDiffusion_m.apply(null, arguments);
};

var real__AT_range_Bortfeld_cm = asm["_AT_range_Bortfeld_cm"];
asm["_AT_range_Bortfeld_cm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_range_Bortfeld_cm.apply(null, arguments);
};

var real__AT_range_straggling_convolution = asm["_AT_range_straggling_convolution"];
asm["_AT_range_straggling_convolution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_range_straggling_convolution.apply(null, arguments);
};

var real__AT_reduced_target_thickness = asm["_AT_reduced_target_thickness"];
asm["_AT_reduced_target_thickness"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_reduced_target_thickness.apply(null, arguments);
};

var real__AT_reduced_target_thickness_single = asm["_AT_reduced_target_thickness_single"];
asm["_AT_reduced_target_thickness_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_reduced_target_thickness_single.apply(null, arguments);
};

var real__AT_run_CPPSC_method = asm["_AT_run_CPPSC_method"];
asm["_AT_run_CPPSC_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_run_CPPSC_method.apply(null, arguments);
};

var real__AT_run_CPPSS_method = asm["_AT_run_CPPSS_method"];
asm["_AT_run_CPPSS_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_run_CPPSS_method.apply(null, arguments);
};

var real__AT_run_GSM_method = asm["_AT_run_GSM_method"];
asm["_AT_run_GSM_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_run_GSM_method.apply(null, arguments);
};

var real__AT_run_IGK_method = asm["_AT_run_IGK_method"];
asm["_AT_run_IGK_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_run_IGK_method.apply(null, arguments);
};

var real__AT_sI_int = asm["_AT_sI_int"];
asm["_AT_sI_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_sI_int.apply(null, arguments);
};

var real__AT_scattering_angle_distribution = asm["_AT_scattering_angle_distribution"];
asm["_AT_scattering_angle_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_scattering_angle_distribution.apply(null, arguments);
};

var real__AT_scattering_angle_distribution_single = asm["_AT_scattering_angle_distribution_single"];
asm["_AT_scattering_angle_distribution_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_scattering_angle_distribution_single.apply(null, arguments);
};

var real__AT_screening_angle = asm["_AT_screening_angle"];
asm["_AT_screening_angle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_screening_angle.apply(null, arguments);
};

var real__AT_screening_angle_single = asm["_AT_screening_angle_single"];
asm["_AT_screening_angle_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_screening_angle_single.apply(null, arguments);
};

var real__AT_set_user_material = asm["_AT_set_user_material"];
asm["_AT_set_user_material"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_set_user_material.apply(null, arguments);
};

var real__AT_set_user_material_from_composition = asm["_AT_set_user_material_from_composition"];
asm["_AT_set_user_material_from_composition"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_set_user_material_from_composition.apply(null, arguments);
};

var real__AT_single_impact_dose_Gy = asm["_AT_single_impact_dose_Gy"];
asm["_AT_single_impact_dose_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_dose_Gy.apply(null, arguments);
};

var real__AT_single_impact_dose_Gy_single = asm["_AT_single_impact_dose_Gy_single"];
asm["_AT_single_impact_dose_Gy_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_dose_Gy_single.apply(null, arguments);
};

var real__AT_single_impact_fluence_cm2 = asm["_AT_single_impact_fluence_cm2"];
asm["_AT_single_impact_fluence_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_fluence_cm2.apply(null, arguments);
};

var real__AT_single_impact_fluence_cm2_single = asm["_AT_single_impact_fluence_cm2_single"];
asm["_AT_single_impact_fluence_cm2_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_fluence_cm2_single.apply(null, arguments);
};

var real__AT_single_impact_local_dose_distrib = asm["_AT_single_impact_local_dose_distrib"];
asm["_AT_single_impact_local_dose_distrib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_single_impact_local_dose_distrib.apply(null, arguments);
};

var real__AT_step_to_N2 = asm["_AT_step_to_N2"];
asm["_AT_step_to_N2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_step_to_N2.apply(null, arguments);
};

var real__AT_stopping_power_ratio = asm["_AT_stopping_power_ratio"];
asm["_AT_stopping_power_ratio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_stopping_power_ratio.apply(null, arguments);
};

var real__AT_stopping_power_source_model_name_from_number = asm["_AT_stopping_power_source_model_name_from_number"];
asm["_AT_stopping_power_source_model_name_from_number"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_stopping_power_source_model_name_from_number.apply(null, arguments);
};

var real__AT_stopping_power_source_model_number_from_name = asm["_AT_stopping_power_source_model_number_from_name"];
asm["_AT_stopping_power_source_model_number_from_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_stopping_power_source_model_number_from_name.apply(null, arguments);
};

var real__AT_sum = asm["_AT_sum"];
asm["_AT_sum"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_sum.apply(null, arguments);
};

var real__AT_test_fun = asm["_AT_test_fun"];
asm["_AT_test_fun"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_test_fun.apply(null, arguments);
};

var real__AT_total_D_Gy = asm["_AT_total_D_Gy"];
asm["_AT_total_D_Gy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_total_D_Gy.apply(null, arguments);
};

var real__AT_total_fluence_cm2 = asm["_AT_total_fluence_cm2"];
asm["_AT_total_fluence_cm2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_total_fluence_cm2.apply(null, arguments);
};

var real__AT_translate_dose_into_DSB_distribution = asm["_AT_translate_dose_into_DSB_distribution"];
asm["_AT_translate_dose_into_DSB_distribution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_translate_dose_into_DSB_distribution.apply(null, arguments);
};

var real__AT_xi_keV = asm["_AT_xi_keV"];
asm["_AT_xi_keV"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__AT_xi_keV.apply(null, arguments);
};

var real____emscripten_environ_constructor = asm["___emscripten_environ_constructor"];
asm["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_environ_constructor.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_daylight = asm["__get_daylight"];
asm["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_environ = asm["__get_environ"];
asm["__get_environ"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_environ.apply(null, arguments);
};

var real___get_timezone = asm["__get_timezone"];
asm["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real___get_tzname = asm["__get_tzname"];
asm["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_get_sbrk_ptr = asm["_emscripten_get_sbrk_ptr"];
asm["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_sbrk_ptr.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"];
asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var _AT_A_from_particle_no = Module["_AT_A_from_particle_no"] = asm["_AT_A_from_particle_no"];
var _AT_A_from_particle_no_single = Module["_AT_A_from_particle_no_single"] = asm["_AT_A_from_particle_no_single"];
var _AT_Bethe_Stopping_Number = Module["_AT_Bethe_Stopping_Number"] = asm["_AT_Bethe_Stopping_Number"];
var _AT_Bethe_energy_loss_MeV_cm2_g = Module["_AT_Bethe_energy_loss_MeV_cm2_g"] = asm["_AT_Bethe_energy_loss_MeV_cm2_g"];
var _AT_Bethe_energy_loss_MeV_cm2_g_single = Module["_AT_Bethe_energy_loss_MeV_cm2_g_single"] = asm["_AT_Bethe_energy_loss_MeV_cm2_g_single"];
var _AT_Bethe_wrapper = Module["_AT_Bethe_wrapper"] = asm["_AT_Bethe_wrapper"];
var _AT_CSDA_energy_after_slab_E_MeV_u_multi = Module["_AT_CSDA_energy_after_slab_E_MeV_u_multi"] = asm["_AT_CSDA_energy_after_slab_E_MeV_u_multi"];
var _AT_CSDA_energy_after_slab_E_MeV_u_single = Module["_AT_CSDA_energy_after_slab_E_MeV_u_single"] = asm["_AT_CSDA_energy_after_slab_E_MeV_u_single"];
var _AT_CSDA_range_difference_solver = Module["_AT_CSDA_range_difference_solver"] = asm["_AT_CSDA_range_difference_solver"];
var _AT_CSDA_range_g_cm2_multi = Module["_AT_CSDA_range_g_cm2_multi"] = asm["_AT_CSDA_range_g_cm2_multi"];
var _AT_CSDA_range_g_cm2_single = Module["_AT_CSDA_range_g_cm2_single"] = asm["_AT_CSDA_range_g_cm2_single"];
var _AT_D_RDD_Gy = Module["_AT_D_RDD_Gy"] = asm["_AT_D_RDD_Gy"];
var _AT_D_RDD_Gy_int = Module["_AT_D_RDD_Gy_int"] = asm["_AT_D_RDD_Gy_int"];
var _AT_Dyx = Module["_AT_Dyx"] = asm["_AT_Dyx"];
var _AT_ER_AM_RadDiff_range_g_cm2 = Module["_AT_ER_AM_RadDiff_range_g_cm2"] = asm["_AT_ER_AM_RadDiff_range_g_cm2"];
var _AT_ER_ButtsKatz_range_g_cm2 = Module["_AT_ER_ButtsKatz_range_g_cm2"] = asm["_AT_ER_ButtsKatz_range_g_cm2"];
var _AT_ER_Edmund_range_g_cm2 = Module["_AT_ER_Edmund_range_g_cm2"] = asm["_AT_ER_Edmund_range_g_cm2"];
var _AT_ER_Geiss_range_g_cm2 = Module["_AT_ER_Geiss_range_g_cm2"] = asm["_AT_ER_Geiss_range_g_cm2"];
var _AT_ER_PowerLaw_alpha = Module["_AT_ER_PowerLaw_alpha"] = asm["_AT_ER_PowerLaw_alpha"];
var _AT_ER_Scholz_new_range_g_cm2 = Module["_AT_ER_Scholz_new_range_g_cm2"] = asm["_AT_ER_Scholz_new_range_g_cm2"];
var _AT_ER_Scholz_range_g_cm2 = Module["_AT_ER_Scholz_range_g_cm2"] = asm["_AT_ER_Scholz_range_g_cm2"];
var _AT_ER_Tabata_constants = Module["_AT_ER_Tabata_constants"] = asm["_AT_ER_Tabata_constants"];
var _AT_ER_Tabata_range_g_cm2 = Module["_AT_ER_Tabata_range_g_cm2"] = asm["_AT_ER_Tabata_range_g_cm2"];
var _AT_ER_Waligorski_range_g_cm2 = Module["_AT_ER_Waligorski_range_g_cm2"] = asm["_AT_ER_Waligorski_range_g_cm2"];
var _AT_E_MeV_from_E_MeV_u = Module["_AT_E_MeV_from_E_MeV_u"] = asm["_AT_E_MeV_from_E_MeV_u"];
var _AT_E_MeV_u_from_E_MeV = Module["_AT_E_MeV_u_from_E_MeV"] = asm["_AT_E_MeV_u_from_E_MeV"];
var _AT_E_MeV_u_from_momentum_MeV_c_u = Module["_AT_E_MeV_u_from_momentum_MeV_c_u"] = asm["_AT_E_MeV_u_from_momentum_MeV_c_u"];
var _AT_E_MeV_u_from_momentum_single = Module["_AT_E_MeV_u_from_momentum_single"] = asm["_AT_E_MeV_u_from_momentum_single"];
var _AT_E_RadicalDiffusion_MeV_u = Module["_AT_E_RadicalDiffusion_MeV_u"] = asm["_AT_E_RadicalDiffusion_MeV_u"];
var _AT_E_from_beta = Module["_AT_E_from_beta"] = asm["_AT_E_from_beta"];
var _AT_E_from_beta_single = Module["_AT_E_from_beta_single"] = asm["_AT_E_from_beta_single"];
var _AT_E_from_gamma = Module["_AT_E_from_gamma"] = asm["_AT_E_from_gamma"];
var _AT_E_from_gamma_single = Module["_AT_E_from_gamma_single"] = asm["_AT_E_from_gamma_single"];
var _AT_Energy_MeV_u_from_Stopping_Power_single = Module["_AT_Energy_MeV_u_from_Stopping_Power_single"] = asm["_AT_Energy_MeV_u_from_Stopping_Power_single"];
var _AT_FromFile_wrapper = Module["_AT_FromFile_wrapper"] = asm["_AT_FromFile_wrapper"];
var _AT_GSM_dose_grid_from_particles_positions = Module["_AT_GSM_dose_grid_from_particles_positions"] = asm["_AT_GSM_dose_grid_from_particles_positions"];
var _AT_GSM_local_dose_distrib = Module["_AT_GSM_local_dose_distrib"] = asm["_AT_GSM_local_dose_distrib"];
var _AT_GSM_local_dose_distrib_from_dose_grid = Module["_AT_GSM_local_dose_distrib_from_dose_grid"] = asm["_AT_GSM_local_dose_distrib_from_dose_grid"];
var _AT_GSM_multiple_local_dose_distrib = Module["_AT_GSM_multiple_local_dose_distrib"] = asm["_AT_GSM_multiple_local_dose_distrib"];
var _AT_GSM_response_grid_from_dose_grid = Module["_AT_GSM_response_grid_from_dose_grid"] = asm["_AT_GSM_response_grid_from_dose_grid"];
var _AT_GSM_sample_particle_positions = Module["_AT_GSM_sample_particle_positions"] = asm["_AT_GSM_sample_particle_positions"];
var _AT_Gamma_index_from_material_number = Module["_AT_Gamma_index_from_material_number"] = asm["_AT_Gamma_index_from_material_number"];
var _AT_Gamma_name_from_number = Module["_AT_Gamma_name_from_number"] = asm["_AT_Gamma_name_from_number"];
var _AT_Gamma_number_of_parameters = Module["_AT_Gamma_number_of_parameters"] = asm["_AT_Gamma_number_of_parameters"];
var _AT_Gauss_FWHM = Module["_AT_Gauss_FWHM"] = asm["_AT_Gauss_FWHM"];
var _AT_Gauss_IDF = Module["_AT_Gauss_IDF"] = asm["_AT_Gauss_IDF"];
var _AT_Gauss_Mean = Module["_AT_Gauss_Mean"] = asm["_AT_Gauss_Mean"];
var _AT_Gauss_Mode = Module["_AT_Gauss_Mode"] = asm["_AT_Gauss_Mode"];
var _AT_Gauss_PDF = Module["_AT_Gauss_PDF"] = asm["_AT_Gauss_PDF"];
var _AT_Gauss_energy_loss_distribution = Module["_AT_Gauss_energy_loss_distribution"] = asm["_AT_Gauss_energy_loss_distribution"];
var _AT_Highland_angle = Module["_AT_Highland_angle"] = asm["_AT_Highland_angle"];
var _AT_Highland_angle_single = Module["_AT_Highland_angle_single"] = asm["_AT_Highland_angle_single"];
var _AT_ICRU_wrapper = Module["_AT_ICRU_wrapper"] = asm["_AT_ICRU_wrapper"];
var _AT_I_eV_from_composition = Module["_AT_I_eV_from_composition"] = asm["_AT_I_eV_from_composition"];
var _AT_I_eV_from_element_acronym = Module["_AT_I_eV_from_element_acronym"] = asm["_AT_I_eV_from_element_acronym"];
var _AT_I_eV_from_element_acronym_single = Module["_AT_I_eV_from_element_acronym_single"] = asm["_AT_I_eV_from_element_acronym_single"];
var _AT_I_eV_from_material_no = Module["_AT_I_eV_from_material_no"] = asm["_AT_I_eV_from_material_no"];
var _AT_I_eV_from_particle_no = Module["_AT_I_eV_from_particle_no"] = asm["_AT_I_eV_from_particle_no"];
var _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m = Module["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m"] = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_integrand_m"];
var _AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2 = Module["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2"] = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_cross_section_m2"];
var _AT_KatzModel_CucinottaExtTarget_inactivation_probability = Module["_AT_KatzModel_CucinottaExtTarget_inactivation_probability"] = asm["_AT_KatzModel_CucinottaExtTarget_inactivation_probability"];
var _AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth = Module["_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth"] = asm["_AT_KatzModel_KatzExtTarget_ButtsKatz_TrackWidth"];
var _AT_KatzModel_KatzExtTarget_Zhang_TrackWidth = Module["_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth"] = asm["_AT_KatzModel_KatzExtTarget_Zhang_TrackWidth"];
var _AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m = Module["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m"] = asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_integrand_m"];
var _AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2 = Module["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2"] = asm["_AT_KatzModel_KatzExtTarget_inactivation_cross_section_m2"];
var _AT_KatzModel_KatzExtTarget_inactivation_probability = Module["_AT_KatzModel_KatzExtTarget_inactivation_probability"] = asm["_AT_KatzModel_KatzExtTarget_inactivation_probability"];
var _AT_KatzModel_inactivation_cross_section_approximation_m2 = Module["_AT_KatzModel_inactivation_cross_section_approximation_m2"] = asm["_AT_KatzModel_inactivation_cross_section_approximation_m2"];
var _AT_KatzModel_inactivation_cross_section_m2 = Module["_AT_KatzModel_inactivation_cross_section_m2"] = asm["_AT_KatzModel_inactivation_cross_section_m2"];
var _AT_KatzModel_inactivation_probability = Module["_AT_KatzModel_inactivation_probability"] = asm["_AT_KatzModel_inactivation_probability"];
var _AT_KatzModel_mixed_field_survival = Module["_AT_KatzModel_mixed_field_survival"] = asm["_AT_KatzModel_mixed_field_survival"];
var _AT_KatzModel_single_field_survival = Module["_AT_KatzModel_single_field_survival"] = asm["_AT_KatzModel_single_field_survival"];
var _AT_KatzModel_single_field_survival_from_inactivation_cross_section = Module["_AT_KatzModel_single_field_survival_from_inactivation_cross_section"] = asm["_AT_KatzModel_single_field_survival_from_inactivation_cross_section"];
var _AT_KatzModel_single_field_survival_optimized_for_fluence_vector = Module["_AT_KatzModel_single_field_survival_optimized_for_fluence_vector"] = asm["_AT_KatzModel_single_field_survival_optimized_for_fluence_vector"];
var _AT_Kellerer_folding = Module["_AT_Kellerer_folding"] = asm["_AT_Kellerer_folding"];
var _AT_Kellerer_interpolation = Module["_AT_Kellerer_interpolation"] = asm["_AT_Kellerer_interpolation"];
var _AT_Kellerer_normalize = Module["_AT_Kellerer_normalize"] = asm["_AT_Kellerer_normalize"];
var _AT_Kellerer_reset = Module["_AT_Kellerer_reset"] = asm["_AT_Kellerer_reset"];
var _AT_Kellerer_shrink = Module["_AT_Kellerer_shrink"] = asm["_AT_Kellerer_shrink"];
var _AT_Kellerer_zero = Module["_AT_Kellerer_zero"] = asm["_AT_Kellerer_zero"];
var _AT_LET_d_Wilkens_keV_um_multi = Module["_AT_LET_d_Wilkens_keV_um_multi"] = asm["_AT_LET_d_Wilkens_keV_um_multi"];
var _AT_LET_d_Wilkens_keV_um_single = Module["_AT_LET_d_Wilkens_keV_um_single"] = asm["_AT_LET_d_Wilkens_keV_um_single"];
var _AT_LET_t_Wilkens_keV_um_multi = Module["_AT_LET_t_Wilkens_keV_um_multi"] = asm["_AT_LET_t_Wilkens_keV_um_multi"];
var _AT_LET_t_Wilkens_keV_um_single = Module["_AT_LET_t_Wilkens_keV_um_single"] = asm["_AT_LET_t_Wilkens_keV_um_single"];
var _AT_Landau_IDF = Module["_AT_Landau_IDF"] = asm["_AT_Landau_IDF"];
var _AT_Landau_PDF = Module["_AT_Landau_PDF"] = asm["_AT_Landau_PDF"];
var _AT_Landau_energy_loss_distribution = Module["_AT_Landau_energy_loss_distribution"] = asm["_AT_Landau_energy_loss_distribution"];
var _AT_Mass_Stopping_Power = Module["_AT_Mass_Stopping_Power"] = asm["_AT_Mass_Stopping_Power"];
var _AT_Mass_Stopping_Power_with_no = Module["_AT_Mass_Stopping_Power_with_no"] = asm["_AT_Mass_Stopping_Power_with_no"];
var _AT_Moliere_function_f0 = Module["_AT_Moliere_function_f0"] = asm["_AT_Moliere_function_f0"];
var _AT_Moliere_function_f1 = Module["_AT_Moliere_function_f1"] = asm["_AT_Moliere_function_f1"];
var _AT_Moliere_function_f2 = Module["_AT_Moliere_function_f2"] = asm["_AT_Moliere_function_f2"];
var _AT_N2_to_step = Module["_AT_N2_to_step"] = asm["_AT_N2_to_step"];
var _AT_PSTAR_wrapper = Module["_AT_PSTAR_wrapper"] = asm["_AT_PSTAR_wrapper"];
var _AT_P_RDD = Module["_AT_P_RDD"] = asm["_AT_P_RDD"];
var _AT_RDD_CucinottaPoint_Gy = Module["_AT_RDD_CucinottaPoint_Gy"] = asm["_AT_RDD_CucinottaPoint_Gy"];
var _AT_RDD_Cucinotta_Cnorm = Module["_AT_RDD_Cucinotta_Cnorm"] = asm["_AT_RDD_Cucinotta_Cnorm"];
var _AT_RDD_Cucinotta_Ddelta_Gy = Module["_AT_RDD_Cucinotta_Ddelta_Gy"] = asm["_AT_RDD_Cucinotta_Ddelta_Gy"];
var _AT_RDD_Cucinotta_Ddelta_average_Gy = Module["_AT_RDD_Cucinotta_Ddelta_average_Gy"] = asm["_AT_RDD_Cucinotta_Ddelta_average_Gy"];
var _AT_RDD_Cucinotta_Ddelta_average_integrand_m = Module["_AT_RDD_Cucinotta_Ddelta_average_integrand_m"] = asm["_AT_RDD_Cucinotta_Ddelta_average_integrand_m"];
var _AT_RDD_Cucinotta_Dexc_Gy = Module["_AT_RDD_Cucinotta_Dexc_Gy"] = asm["_AT_RDD_Cucinotta_Dexc_Gy"];
var _AT_RDD_Cucinotta_Dexc_average_Gy = Module["_AT_RDD_Cucinotta_Dexc_average_Gy"] = asm["_AT_RDD_Cucinotta_Dexc_average_Gy"];
var _AT_RDD_Cucinotta_f_longRange = Module["_AT_RDD_Cucinotta_f_longRange"] = asm["_AT_RDD_Cucinotta_f_longRange"];
var _AT_RDD_Cucinotta_f_shortRange = Module["_AT_RDD_Cucinotta_f_shortRange"] = asm["_AT_RDD_Cucinotta_f_shortRange"];
var _AT_RDD_ExtendedTarget_CucinottaPoint_Gy = Module["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy"] = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy"];
var _AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration = Module["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration"] = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_Gy_by_integration"];
var _AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy = Module["_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy"] = asm["_AT_RDD_ExtendedTarget_CucinottaPoint_integrand_Gy"];
var _AT_RDD_ExtendedTarget_KatzPoint_Gy = Module["_AT_RDD_ExtendedTarget_KatzPoint_Gy"] = asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy"];
var _AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration = Module["_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration"] = asm["_AT_RDD_ExtendedTarget_KatzPoint_Gy_by_integration"];
var _AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy = Module["_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy"] = asm["_AT_RDD_ExtendedTarget_KatzPoint_integrand_Gy"];
var _AT_RDD_Geiss_Gy = Module["_AT_RDD_Geiss_Gy"] = asm["_AT_RDD_Geiss_Gy"];
var _AT_RDD_Geiss_average_Gy = Module["_AT_RDD_Geiss_average_Gy"] = asm["_AT_RDD_Geiss_average_Gy"];
var _AT_RDD_KatzPoint_Gy = Module["_AT_RDD_KatzPoint_Gy"] = asm["_AT_RDD_KatzPoint_Gy"];
var _AT_RDD_KatzSite_Gy = Module["_AT_RDD_KatzSite_Gy"] = asm["_AT_RDD_KatzSite_Gy"];
var _AT_RDD_Katz_LinearER_DSite_Gy = Module["_AT_RDD_Katz_LinearER_DSite_Gy"] = asm["_AT_RDD_Katz_LinearER_DSite_Gy"];
var _AT_RDD_Katz_LinearER_Daverage_Gy = Module["_AT_RDD_Katz_LinearER_Daverage_Gy"] = asm["_AT_RDD_Katz_LinearER_Daverage_Gy"];
var _AT_RDD_Katz_LinearER_Dpoint_Gy = Module["_AT_RDD_Katz_LinearER_Dpoint_Gy"] = asm["_AT_RDD_Katz_LinearER_Dpoint_Gy"];
var _AT_RDD_Katz_LinearER_dEdx_J_m = Module["_AT_RDD_Katz_LinearER_dEdx_J_m"] = asm["_AT_RDD_Katz_LinearER_dEdx_J_m"];
var _AT_RDD_Katz_PowerLawER_DSite_Gy = Module["_AT_RDD_Katz_PowerLawER_DSite_Gy"] = asm["_AT_RDD_Katz_PowerLawER_DSite_Gy"];
var _AT_RDD_Katz_PowerLawER_DaverageKernel = Module["_AT_RDD_Katz_PowerLawER_DaverageKernel"] = asm["_AT_RDD_Katz_PowerLawER_DaverageKernel"];
var _AT_RDD_Katz_PowerLawER_DaverageKernel_approx = Module["_AT_RDD_Katz_PowerLawER_DaverageKernel_approx"] = asm["_AT_RDD_Katz_PowerLawER_DaverageKernel_approx"];
var _AT_RDD_Katz_PowerLawER_Daverage_Gy = Module["_AT_RDD_Katz_PowerLawER_Daverage_Gy"] = asm["_AT_RDD_Katz_PowerLawER_Daverage_Gy"];
var _AT_RDD_Katz_PowerLawER_Dpoint_Gy = Module["_AT_RDD_Katz_PowerLawER_Dpoint_Gy"] = asm["_AT_RDD_Katz_PowerLawER_Dpoint_Gy"];
var _AT_RDD_Katz_PowerLawER_dEdx_J_m = Module["_AT_RDD_Katz_PowerLawER_dEdx_J_m"] = asm["_AT_RDD_Katz_PowerLawER_dEdx_J_m"];
var _AT_RDD_Katz_coeff_Gy = Module["_AT_RDD_Katz_coeff_Gy"] = asm["_AT_RDD_Katz_coeff_Gy"];
var _AT_RDD_Katz_coeff_Gy_general = Module["_AT_RDD_Katz_coeff_Gy_general"] = asm["_AT_RDD_Katz_coeff_Gy_general"];
var _AT_RDD_RadicalDiffusion_Gy = Module["_AT_RDD_RadicalDiffusion_Gy"] = asm["_AT_RDD_RadicalDiffusion_Gy"];
var _AT_RDD_RadicalDiffusion_get_energy_idx = Module["_AT_RDD_RadicalDiffusion_get_energy_idx"] = asm["_AT_RDD_RadicalDiffusion_get_energy_idx"];
var _AT_RDD_Test_Gy = Module["_AT_RDD_Test_Gy"] = asm["_AT_RDD_Test_Gy"];
var _AT_RDD_a0_m = Module["_AT_RDD_a0_m"] = asm["_AT_RDD_a0_m"];
var _AT_RDD_d_max_Gy = Module["_AT_RDD_d_max_Gy"] = asm["_AT_RDD_d_max_Gy"];
var _AT_RDD_d_min_Gy = Module["_AT_RDD_d_min_Gy"] = asm["_AT_RDD_d_min_Gy"];
var _AT_RDD_f1_parameters_mixed_field = Module["_AT_RDD_f1_parameters_mixed_field"] = asm["_AT_RDD_f1_parameters_mixed_field"];
var _AT_RDD_f1_parameters_single_field = Module["_AT_RDD_f1_parameters_single_field"] = asm["_AT_RDD_f1_parameters_single_field"];
var _AT_RDD_index_from_RDD_number = Module["_AT_RDD_index_from_RDD_number"] = asm["_AT_RDD_index_from_RDD_number"];
var _AT_RDD_name_from_number = Module["_AT_RDD_name_from_number"] = asm["_AT_RDD_name_from_number"];
var _AT_RDD_number_from_name = Module["_AT_RDD_number_from_name"] = asm["_AT_RDD_number_from_name"];
var _AT_RDD_number_of_parameters = Module["_AT_RDD_number_of_parameters"] = asm["_AT_RDD_number_of_parameters"];
var _AT_RDD_precalculated_constant_Gy = Module["_AT_RDD_precalculated_constant_Gy"] = asm["_AT_RDD_precalculated_constant_Gy"];
var _AT_RDD_r_min_m = Module["_AT_RDD_r_min_m"] = asm["_AT_RDD_r_min_m"];
var _AT_Rutherford_SDCS = Module["_AT_Rutherford_SDCS"] = asm["_AT_Rutherford_SDCS"];
var _AT_Rutherford_scatter_cross_section = Module["_AT_Rutherford_scatter_cross_section"] = asm["_AT_Rutherford_scatter_cross_section"];
var _AT_SPC_decompose_data = Module["_AT_SPC_decompose_data"] = asm["_AT_SPC_decompose_data"];
var _AT_SPC_decompose_header = Module["_AT_SPC_decompose_header"] = asm["_AT_SPC_decompose_header"];
var _AT_SPC_decompose_size = Module["_AT_SPC_decompose_size"] = asm["_AT_SPC_decompose_size"];
var _AT_SPC_fast_read_buffer = Module["_AT_SPC_fast_read_buffer"] = asm["_AT_SPC_fast_read_buffer"];
var _AT_SPC_get_number_of_bins_from_filename_fast = Module["_AT_SPC_get_number_of_bins_from_filename_fast"] = asm["_AT_SPC_get_number_of_bins_from_filename_fast"];
var _AT_SPC_get_number_of_bytes_in_file = Module["_AT_SPC_get_number_of_bytes_in_file"] = asm["_AT_SPC_get_number_of_bytes_in_file"];
var _AT_SPC_number_of_bins_at_range = Module["_AT_SPC_number_of_bins_at_range"] = asm["_AT_SPC_number_of_bins_at_range"];
var _AT_SPC_read_data_from_filename_fast = Module["_AT_SPC_read_data_from_filename_fast"] = asm["_AT_SPC_read_data_from_filename_fast"];
var _AT_SPC_read_from_filename_fast = Module["_AT_SPC_read_from_filename_fast"] = asm["_AT_SPC_read_from_filename_fast"];
var _AT_SPC_read_header_from_filename_fast = Module["_AT_SPC_read_header_from_filename_fast"] = asm["_AT_SPC_read_header_from_filename_fast"];
var _AT_SPC_spectrum_at_range = Module["_AT_SPC_spectrum_at_range"] = asm["_AT_SPC_spectrum_at_range"];
var _AT_Stopping_Power = Module["_AT_Stopping_Power"] = asm["_AT_Stopping_Power"];
var _AT_Stopping_Power_Mass_MeV_cm2_g_int = Module["_AT_Stopping_Power_Mass_MeV_cm2_g_int"] = asm["_AT_Stopping_Power_Mass_MeV_cm2_g_int"];
var _AT_Stopping_Power_with_no = Module["_AT_Stopping_Power_with_no"] = asm["_AT_Stopping_Power_with_no"];
var _AT_SuccessiveConvolutions = Module["_AT_SuccessiveConvolutions"] = asm["_AT_SuccessiveConvolutions"];
var _AT_Vavilov_IDF = Module["_AT_Vavilov_IDF"] = asm["_AT_Vavilov_IDF"];
var _AT_Vavilov_PDF = Module["_AT_Vavilov_PDF"] = asm["_AT_Vavilov_PDF"];
var _AT_Vavilov_energy_loss_distribution = Module["_AT_Vavilov_energy_loss_distribution"] = asm["_AT_Vavilov_energy_loss_distribution"];
var _AT_WEPL_multi = Module["_AT_WEPL_multi"] = asm["_AT_WEPL_multi"];
var _AT_WEPL_single = Module["_AT_WEPL_single"] = asm["_AT_WEPL_single"];
var _AT_Z_from_element_acronym = Module["_AT_Z_from_element_acronym"] = asm["_AT_Z_from_element_acronym"];
var _AT_Z_from_element_acronym_single = Module["_AT_Z_from_element_acronym_single"] = asm["_AT_Z_from_element_acronym_single"];
var _AT_Z_from_particle_no = Module["_AT_Z_from_particle_no"] = asm["_AT_Z_from_particle_no"];
var _AT_Z_from_particle_no_single = Module["_AT_Z_from_particle_no_single"] = asm["_AT_Z_from_particle_no_single"];
var _AT_alpha_g_cm2_MeV_from_material_no = Module["_AT_alpha_g_cm2_MeV_from_material_no"] = asm["_AT_alpha_g_cm2_MeV_from_material_no"];
var _AT_atomic_weight_from_Z = Module["_AT_atomic_weight_from_Z"] = asm["_AT_atomic_weight_from_Z"];
var _AT_atomic_weight_from_element_acronym = Module["_AT_atomic_weight_from_element_acronym"] = asm["_AT_atomic_weight_from_element_acronym"];
var _AT_atomic_weight_from_element_acronym_single = Module["_AT_atomic_weight_from_element_acronym_single"] = asm["_AT_atomic_weight_from_element_acronym_single"];
var _AT_atomic_weight_from_particle_no = Module["_AT_atomic_weight_from_particle_no"] = asm["_AT_atomic_weight_from_particle_no"];
var _AT_average_A_from_composition = Module["_AT_average_A_from_composition"] = asm["_AT_average_A_from_composition"];
var _AT_average_A_from_material_no = Module["_AT_average_A_from_material_no"] = asm["_AT_average_A_from_material_no"];
var _AT_average_Z_from_composition = Module["_AT_average_Z_from_composition"] = asm["_AT_average_Z_from_composition"];
var _AT_average_Z_from_material_no = Module["_AT_average_Z_from_material_no"] = asm["_AT_average_Z_from_material_no"];
var _AT_beam_par_physical_to_technical = Module["_AT_beam_par_physical_to_technical"] = asm["_AT_beam_par_physical_to_technical"];
var _AT_beam_par_technical_to_physical = Module["_AT_beam_par_technical_to_physical"] = asm["_AT_beam_par_technical_to_physical"];
var _AT_beta_from_E = Module["_AT_beta_from_E"] = asm["_AT_beta_from_E"];
var _AT_beta_from_E_single = Module["_AT_beta_from_E_single"] = asm["_AT_beta_from_E_single"];
var _AT_characteristic_multiple_scattering_angle = Module["_AT_characteristic_multiple_scattering_angle"] = asm["_AT_characteristic_multiple_scattering_angle"];
var _AT_characteristic_multiple_scattering_angle_single = Module["_AT_characteristic_multiple_scattering_angle_single"] = asm["_AT_characteristic_multiple_scattering_angle_single"];
var _AT_characteristic_single_scattering_angle = Module["_AT_characteristic_single_scattering_angle"] = asm["_AT_characteristic_single_scattering_angle"];
var _AT_characteristic_single_scattering_angle_single = Module["_AT_characteristic_single_scattering_angle_single"] = asm["_AT_characteristic_single_scattering_angle_single"];
var _AT_check_energy_range_single_field = Module["_AT_check_energy_range_single_field"] = asm["_AT_check_energy_range_single_field"];
var _AT_check_energy_range_single_particle = Module["_AT_check_energy_range_single_particle"] = asm["_AT_check_energy_range_single_particle"];
var _AT_check_particle_no_single_field = Module["_AT_check_particle_no_single_field"] = asm["_AT_check_particle_no_single_field"];
var _AT_check_particle_no_single_particle = Module["_AT_check_particle_no_single_particle"] = asm["_AT_check_particle_no_single_particle"];
var _AT_d_max_RadicalDiffusion_Gy = Module["_AT_d_max_RadicalDiffusion_Gy"] = asm["_AT_d_max_RadicalDiffusion_Gy"];
var _AT_d_min_RadicalDiffusion_Gy = Module["_AT_d_min_RadicalDiffusion_Gy"] = asm["_AT_d_min_RadicalDiffusion_Gy"];
var _AT_density_g_cm3_from_element_acronym = Module["_AT_density_g_cm3_from_element_acronym"] = asm["_AT_density_g_cm3_from_element_acronym"];
var _AT_density_g_cm3_from_element_acronym_single = Module["_AT_density_g_cm3_from_element_acronym_single"] = asm["_AT_density_g_cm3_from_element_acronym_single"];
var _AT_density_g_cm3_from_material_no = Module["_AT_density_g_cm3_from_material_no"] = asm["_AT_density_g_cm3_from_material_no"];
var _AT_dose_Bortfeld_Gy_multi = Module["_AT_dose_Bortfeld_Gy_multi"] = asm["_AT_dose_Bortfeld_Gy_multi"];
var _AT_dose_Bortfeld_Gy_single = Module["_AT_dose_Bortfeld_Gy_single"] = asm["_AT_dose_Bortfeld_Gy_single"];
var _AT_dose_Gy_from_fluence_cm2 = Module["_AT_dose_Gy_from_fluence_cm2"] = asm["_AT_dose_Gy_from_fluence_cm2"];
var _AT_dose_Gy_from_fluence_cm2_single = Module["_AT_dose_Gy_from_fluence_cm2_single"] = asm["_AT_dose_Gy_from_fluence_cm2_single"];
var _AT_dose_weighted_E_MeV_u = Module["_AT_dose_weighted_E_MeV_u"] = asm["_AT_dose_weighted_E_MeV_u"];
var _AT_dose_weighted_LET_MeV_cm2_g = Module["_AT_dose_weighted_LET_MeV_cm2_g"] = asm["_AT_dose_weighted_LET_MeV_cm2_g"];
var _AT_effective_Z_from_composition = Module["_AT_effective_Z_from_composition"] = asm["_AT_effective_Z_from_composition"];
var _AT_effective_charge_from_E_MeV_u = Module["_AT_effective_charge_from_E_MeV_u"] = asm["_AT_effective_charge_from_E_MeV_u"];
var _AT_effective_charge_from_E_MeV_u_single = Module["_AT_effective_charge_from_E_MeV_u_single"] = asm["_AT_effective_charge_from_E_MeV_u_single"];
var _AT_effective_charge_from_beta = Module["_AT_effective_charge_from_beta"] = asm["_AT_effective_charge_from_beta"];
var _AT_effective_charge_from_beta_single = Module["_AT_effective_charge_from_beta_single"] = asm["_AT_effective_charge_from_beta_single"];
var _AT_effective_collision_number = Module["_AT_effective_collision_number"] = asm["_AT_effective_collision_number"];
var _AT_effective_collision_number_single = Module["_AT_effective_collision_number_single"] = asm["_AT_effective_collision_number_single"];
var _AT_el_energy_loss_leading_term_MeV_cm2_g = Module["_AT_el_energy_loss_leading_term_MeV_cm2_g"] = asm["_AT_el_energy_loss_leading_term_MeV_cm2_g"];
var _AT_electron_density_cm3_from_element_acronym = Module["_AT_electron_density_cm3_from_element_acronym"] = asm["_AT_electron_density_cm3_from_element_acronym"];
var _AT_electron_density_cm3_from_element_acronym_single = Module["_AT_electron_density_cm3_from_element_acronym_single"] = asm["_AT_electron_density_cm3_from_element_acronym_single"];
var _AT_electron_density_m3_from_composition = Module["_AT_electron_density_m3_from_composition"] = asm["_AT_electron_density_m3_from_composition"];
var _AT_electron_density_m3_from_material_no_multi = Module["_AT_electron_density_m3_from_material_no_multi"] = asm["_AT_electron_density_m3_from_material_no_multi"];
var _AT_electron_density_m3_from_material_no_single = Module["_AT_electron_density_m3_from_material_no_single"] = asm["_AT_electron_density_m3_from_material_no_single"];
var _AT_electron_density_m3_multi = Module["_AT_electron_density_m3_multi"] = asm["_AT_electron_density_m3_multi"];
var _AT_electron_density_m3_single = Module["_AT_electron_density_m3_single"] = asm["_AT_electron_density_m3_single"];
var _AT_element_acronym_from_Z = Module["_AT_element_acronym_from_Z"] = asm["_AT_element_acronym_from_Z"];
var _AT_element_acronym_from_Z_single = Module["_AT_element_acronym_from_Z_single"] = asm["_AT_element_acronym_from_Z_single"];
var _AT_energy_Bortfeld_MeV_u = Module["_AT_energy_Bortfeld_MeV_u"] = asm["_AT_energy_Bortfeld_MeV_u"];
var _AT_energy_loss_FWHM = Module["_AT_energy_loss_FWHM"] = asm["_AT_energy_loss_FWHM"];
var _AT_energy_loss_distribution = Module["_AT_energy_loss_distribution"] = asm["_AT_energy_loss_distribution"];
var _AT_energy_loss_from_lambda_gauss_multi = Module["_AT_energy_loss_from_lambda_gauss_multi"] = asm["_AT_energy_loss_from_lambda_gauss_multi"];
var _AT_energy_loss_from_lambda_landau_multi = Module["_AT_energy_loss_from_lambda_landau_multi"] = asm["_AT_energy_loss_from_lambda_landau_multi"];
var _AT_energy_loss_from_lambda_landau_single = Module["_AT_energy_loss_from_lambda_landau_single"] = asm["_AT_energy_loss_from_lambda_landau_single"];
var _AT_energy_loss_from_lambda_vavilov_multi = Module["_AT_energy_loss_from_lambda_vavilov_multi"] = asm["_AT_energy_loss_from_lambda_vavilov_multi"];
var _AT_energy_loss_keV_Landau_FWHM = Module["_AT_energy_loss_keV_Landau_FWHM"] = asm["_AT_energy_loss_keV_Landau_FWHM"];
var _AT_energy_loss_keV_Landau_Mode = Module["_AT_energy_loss_keV_Landau_Mode"] = asm["_AT_energy_loss_keV_Landau_Mode"];
var _AT_energy_loss_keV_Vavilov_FWHM = Module["_AT_energy_loss_keV_Vavilov_FWHM"] = asm["_AT_energy_loss_keV_Vavilov_FWHM"];
var _AT_energy_loss_mode = Module["_AT_energy_loss_mode"] = asm["_AT_energy_loss_mode"];
var _AT_energy_straggling_MeV2_cm2_g = Module["_AT_energy_straggling_MeV2_cm2_g"] = asm["_AT_energy_straggling_MeV2_cm2_g"];
var _AT_energy_straggling_after_slab_E_MeV_u = Module["_AT_energy_straggling_after_slab_E_MeV_u"] = asm["_AT_energy_straggling_after_slab_E_MeV_u"];
var _AT_fit_Bortfeld = Module["_AT_fit_Bortfeld"] = asm["_AT_fit_Bortfeld"];
var _AT_fluence_cm2_from_dose_Gy = Module["_AT_fluence_cm2_from_dose_Gy"] = asm["_AT_fluence_cm2_from_dose_Gy"];
var _AT_fluence_cm2_from_dose_Gy_single = Module["_AT_fluence_cm2_from_dose_Gy_single"] = asm["_AT_fluence_cm2_from_dose_Gy_single"];
var _AT_fluence_weighted_E_MeV_u = Module["_AT_fluence_weighted_E_MeV_u"] = asm["_AT_fluence_weighted_E_MeV_u"];
var _AT_fluence_weighted_LET_MeV_cm2_g = Module["_AT_fluence_weighted_LET_MeV_cm2_g"] = asm["_AT_fluence_weighted_LET_MeV_cm2_g"];
var _AT_fwhm_Bortfeld_cm = Module["_AT_fwhm_Bortfeld_cm"] = asm["_AT_fwhm_Bortfeld_cm"];
var _AT_gamma_ = Module["_AT_gamma_"] = asm["_AT_gamma_"];
var _AT_gamma_from_E = Module["_AT_gamma_from_E"] = asm["_AT_gamma_from_E"];
var _AT_gamma_from_E_single = Module["_AT_gamma_from_E_single"] = asm["_AT_gamma_from_E_single"];
var _AT_gamma_response = Module["_AT_gamma_response"] = asm["_AT_gamma_response"];
var _AT_get_DSB_distribution = Module["_AT_get_DSB_distribution"] = asm["_AT_get_DSB_distribution"];
var _AT_get_error_msg = Module["_AT_get_error_msg"] = asm["_AT_get_error_msg"];
var _AT_get_gamma_response = Module["_AT_get_gamma_response"] = asm["_AT_get_gamma_response"];
var _AT_get_gamma_response_for_average_dose = Module["_AT_get_gamma_response_for_average_dose"] = asm["_AT_get_gamma_response_for_average_dose"];
var _AT_get_interpolated_x_from_input_2d_table = Module["_AT_get_interpolated_x_from_input_2d_table"] = asm["_AT_get_interpolated_x_from_input_2d_table"];
var _AT_get_interpolated_y_from_input_2d_table = Module["_AT_get_interpolated_y_from_input_2d_table"] = asm["_AT_get_interpolated_y_from_input_2d_table"];
var _AT_get_interpolated_y_from_input_table = Module["_AT_get_interpolated_y_from_input_table"] = asm["_AT_get_interpolated_y_from_input_table"];
var _AT_get_interpolated_y_from_interval = Module["_AT_get_interpolated_y_from_interval"] = asm["_AT_get_interpolated_y_from_interval"];
var _AT_get_ion_efficiency_from_dose_distribution = Module["_AT_get_ion_efficiency_from_dose_distribution"] = asm["_AT_get_ion_efficiency_from_dose_distribution"];
var _AT_get_ion_efficiency_from_response_distribution = Module["_AT_get_ion_efficiency_from_response_distribution"] = asm["_AT_get_ion_efficiency_from_response_distribution"];
var _AT_get_ion_response_from_dose_distribution = Module["_AT_get_ion_response_from_dose_distribution"] = asm["_AT_get_ion_response_from_dose_distribution"];
var _AT_get_ion_response_from_response_distribution = Module["_AT_get_ion_response_from_response_distribution"] = asm["_AT_get_ion_response_from_response_distribution"];
var _AT_get_material_data = Module["_AT_get_material_data"] = asm["_AT_get_material_data"];
var _AT_get_materials_data = Module["_AT_get_materials_data"] = asm["_AT_get_materials_data"];
var _AT_get_response_distribution_from_dose_distribution = Module["_AT_get_response_distribution_from_dose_distribution"] = asm["_AT_get_response_distribution_from_dose_distribution"];
var _AT_gyroradius_m = Module["_AT_gyroradius_m"] = asm["_AT_gyroradius_m"];
var _AT_histoOld_bin_no = Module["_AT_histoOld_bin_no"] = asm["_AT_histoOld_bin_no"];
var _AT_histoOld_get_bin_width = Module["_AT_histoOld_get_bin_width"] = asm["_AT_histoOld_get_bin_width"];
var _AT_histoOld_get_bin_widths = Module["_AT_histoOld_get_bin_widths"] = asm["_AT_histoOld_get_bin_widths"];
var _AT_histoOld_log_bin_width = Module["_AT_histoOld_log_bin_width"] = asm["_AT_histoOld_log_bin_width"];
var _AT_histoOld_lower_bin_limit = Module["_AT_histoOld_lower_bin_limit"] = asm["_AT_histoOld_lower_bin_limit"];
var _AT_histoOld_upper_bin_limit = Module["_AT_histoOld_upper_bin_limit"] = asm["_AT_histoOld_upper_bin_limit"];
var _AT_histo_add_multi = Module["_AT_histo_add_multi"] = asm["_AT_histo_add_multi"];
var _AT_histo_add_single = Module["_AT_histo_add_single"] = asm["_AT_histo_add_single"];
var _AT_histo_bin_no = Module["_AT_histo_bin_no"] = asm["_AT_histo_bin_no"];
var _AT_histo_bin_width = Module["_AT_histo_bin_width"] = asm["_AT_histo_bin_width"];
var _AT_histo_bin_widths = Module["_AT_histo_bin_widths"] = asm["_AT_histo_bin_widths"];
var _AT_histo_left_limit = Module["_AT_histo_left_limit"] = asm["_AT_histo_left_limit"];
var _AT_histo_left_limits = Module["_AT_histo_left_limits"] = asm["_AT_histo_left_limits"];
var _AT_histo_linear_bin_no = Module["_AT_histo_linear_bin_no"] = asm["_AT_histo_linear_bin_no"];
var _AT_histo_linear_bin_width = Module["_AT_histo_linear_bin_width"] = asm["_AT_histo_linear_bin_width"];
var _AT_histo_linear_left_limit = Module["_AT_histo_linear_left_limit"] = asm["_AT_histo_linear_left_limit"];
var _AT_histo_linear_midpoint = Module["_AT_histo_linear_midpoint"] = asm["_AT_histo_linear_midpoint"];
var _AT_histo_linear_n_bins = Module["_AT_histo_linear_n_bins"] = asm["_AT_histo_linear_n_bins"];
var _AT_histo_linear_step = Module["_AT_histo_linear_step"] = asm["_AT_histo_linear_step"];
var _AT_histo_logarithmic_bin_no = Module["_AT_histo_logarithmic_bin_no"] = asm["_AT_histo_logarithmic_bin_no"];
var _AT_histo_logarithmic_bin_width = Module["_AT_histo_logarithmic_bin_width"] = asm["_AT_histo_logarithmic_bin_width"];
var _AT_histo_logarithmic_left_limit = Module["_AT_histo_logarithmic_left_limit"] = asm["_AT_histo_logarithmic_left_limit"];
var _AT_histo_logarithmic_midpoint = Module["_AT_histo_logarithmic_midpoint"] = asm["_AT_histo_logarithmic_midpoint"];
var _AT_histo_logarithmic_n_bins = Module["_AT_histo_logarithmic_n_bins"] = asm["_AT_histo_logarithmic_n_bins"];
var _AT_histo_logarithmic_step = Module["_AT_histo_logarithmic_step"] = asm["_AT_histo_logarithmic_step"];
var _AT_histo_midpoint = Module["_AT_histo_midpoint"] = asm["_AT_histo_midpoint"];
var _AT_histo_midpoints = Module["_AT_histo_midpoints"] = asm["_AT_histo_midpoints"];
var _AT_histo_n_bins = Module["_AT_histo_n_bins"] = asm["_AT_histo_n_bins"];
var _AT_histo_normalize = Module["_AT_histo_normalize"] = asm["_AT_histo_normalize"];
var _AT_histo_step = Module["_AT_histo_step"] = asm["_AT_histo_step"];
var _AT_histo_sum = Module["_AT_histo_sum"] = asm["_AT_histo_sum"];
var _AT_interparticleDistance_m = Module["_AT_interparticleDistance_m"] = asm["_AT_interparticleDistance_m"];
var _AT_inv_interparticleDistance_Gy = Module["_AT_inv_interparticleDistance_Gy"] = asm["_AT_inv_interparticleDistance_Gy"];
var _AT_inverse_RDD_Cucinotta_m = Module["_AT_inverse_RDD_Cucinotta_m"] = asm["_AT_inverse_RDD_Cucinotta_m"];
var _AT_inverse_RDD_Cucinotta_solver_function_Gy = Module["_AT_inverse_RDD_Cucinotta_solver_function_Gy"] = asm["_AT_inverse_RDD_Cucinotta_solver_function_Gy"];
var _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m = Module["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m"] = asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_m"];
var _AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy = Module["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy"] = asm["_AT_inverse_RDD_ExtendedTarget_CucinottaPoint_solver_function_Gy"];
var _AT_inverse_RDD_ExtendedTarget_KatzPoint_m = Module["_AT_inverse_RDD_ExtendedTarget_KatzPoint_m"] = asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_m"];
var _AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy = Module["_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy"] = asm["_AT_inverse_RDD_ExtendedTarget_KatzPoint_solver_function_Gy"];
var _AT_inverse_RDD_Geiss_m = Module["_AT_inverse_RDD_Geiss_m"] = asm["_AT_inverse_RDD_Geiss_m"];
var _AT_inverse_RDD_KatzPoint_LinearER_m = Module["_AT_inverse_RDD_KatzPoint_LinearER_m"] = asm["_AT_inverse_RDD_KatzPoint_LinearER_m"];
var _AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy = Module["_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy"] = asm["_AT_inverse_RDD_KatzPoint_PowerLawER_solver_function_Gy"];
var _AT_inverse_RDD_KatzPoint_m = Module["_AT_inverse_RDD_KatzPoint_m"] = asm["_AT_inverse_RDD_KatzPoint_m"];
var _AT_inverse_RDD_KatzSite_m = Module["_AT_inverse_RDD_KatzSite_m"] = asm["_AT_inverse_RDD_KatzSite_m"];
var _AT_inverse_RDD_Test_m = Module["_AT_inverse_RDD_Test_m"] = asm["_AT_inverse_RDD_Test_m"];
var _AT_inverse_RadicalDiffusion_m = Module["_AT_inverse_RadicalDiffusion_m"] = asm["_AT_inverse_RadicalDiffusion_m"];
var _AT_kappa_multi = Module["_AT_kappa_multi"] = asm["_AT_kappa_multi"];
var _AT_kappa_single = Module["_AT_kappa_single"] = asm["_AT_kappa_single"];
var _AT_kinetic_variable_single = Module["_AT_kinetic_variable_single"] = asm["_AT_kinetic_variable_single"];
var _AT_lambda_Landau_FWHM = Module["_AT_lambda_Landau_FWHM"] = asm["_AT_lambda_Landau_FWHM"];
var _AT_lambda_Landau_FWHM_left = Module["_AT_lambda_Landau_FWHM_left"] = asm["_AT_lambda_Landau_FWHM_left"];
var _AT_lambda_Landau_FWHM_right = Module["_AT_lambda_Landau_FWHM_right"] = asm["_AT_lambda_Landau_FWHM_right"];
var _AT_lambda_Landau_Mean = Module["_AT_lambda_Landau_Mean"] = asm["_AT_lambda_Landau_Mean"];
var _AT_lambda_Landau_Mode = Module["_AT_lambda_Landau_Mode"] = asm["_AT_lambda_Landau_Mode"];
var _AT_lambda_Vavilov_FWHM = Module["_AT_lambda_Vavilov_FWHM"] = asm["_AT_lambda_Vavilov_FWHM"];
var _AT_lambda_Vavilov_FWHM_left = Module["_AT_lambda_Vavilov_FWHM_left"] = asm["_AT_lambda_Vavilov_FWHM_left"];
var _AT_lambda_Vavilov_FWHM_right = Module["_AT_lambda_Vavilov_FWHM_right"] = asm["_AT_lambda_Vavilov_FWHM_right"];
var _AT_lambda_Vavilov_Mean = Module["_AT_lambda_Vavilov_Mean"] = asm["_AT_lambda_Vavilov_Mean"];
var _AT_lambda_Vavilov_Mode = Module["_AT_lambda_Vavilov_Mode"] = asm["_AT_lambda_Vavilov_Mode"];
var _AT_lambda_Vavilov_Skewness = Module["_AT_lambda_Vavilov_Skewness"] = asm["_AT_lambda_Vavilov_Skewness"];
var _AT_lambda_Vavilov_Variance = Module["_AT_lambda_Vavilov_Variance"] = asm["_AT_lambda_Vavilov_Variance"];
var _AT_lambda_landau_from_energy_loss_multi = Module["_AT_lambda_landau_from_energy_loss_multi"] = asm["_AT_lambda_landau_from_energy_loss_multi"];
var _AT_lambda_landau_from_energy_loss_single = Module["_AT_lambda_landau_from_energy_loss_single"] = asm["_AT_lambda_landau_from_energy_loss_single"];
var _AT_lambda_max_multi = Module["_AT_lambda_max_multi"] = asm["_AT_lambda_max_multi"];
var _AT_lambda_max_single = Module["_AT_lambda_max_single"] = asm["_AT_lambda_max_single"];
var _AT_lambda_mean_multi = Module["_AT_lambda_mean_multi"] = asm["_AT_lambda_mean_multi"];
var _AT_lambda_mean_single = Module["_AT_lambda_mean_single"] = asm["_AT_lambda_mean_single"];
var _AT_lambda_vavilov_from_energy_loss_multi = Module["_AT_lambda_vavilov_from_energy_loss_multi"] = asm["_AT_lambda_vavilov_from_energy_loss_multi"];
var _AT_lambda_vavilov_from_energy_loss_single = Module["_AT_lambda_vavilov_from_energy_loss_single"] = asm["_AT_lambda_vavilov_from_energy_loss_single"];
var _AT_low_fluence_local_dose_distribution = Module["_AT_low_fluence_local_dose_distribution"] = asm["_AT_low_fluence_local_dose_distribution"];
var _AT_m_g_cm2_from_material_no = Module["_AT_m_g_cm2_from_material_no"] = asm["_AT_m_g_cm2_from_material_no"];
var _AT_mass_correction_terms = Module["_AT_mass_correction_terms"] = asm["_AT_mass_correction_terms"];
var _AT_mass_correction_terms_new = Module["_AT_mass_correction_terms_new"] = asm["_AT_mass_correction_terms_new"];
var _AT_material_index_from_material_number = Module["_AT_material_index_from_material_number"] = asm["_AT_material_index_from_material_number"];
var _AT_material_name_from_number = Module["_AT_material_name_from_number"] = asm["_AT_material_name_from_number"];
var _AT_material_number_from_name = Module["_AT_material_number_from_name"] = asm["_AT_material_number_from_name"];
var _AT_max_E_transfer_MeV = Module["_AT_max_E_transfer_MeV"] = asm["_AT_max_E_transfer_MeV"];
var _AT_max_E_transfer_MeV_new = Module["_AT_max_E_transfer_MeV_new"] = asm["_AT_max_E_transfer_MeV_new"];
var _AT_max_E_transfer_MeV_new_single = Module["_AT_max_E_transfer_MeV_new_single"] = asm["_AT_max_E_transfer_MeV_new_single"];
var _AT_max_E_transfer_MeV_single = Module["_AT_max_E_transfer_MeV_single"] = asm["_AT_max_E_transfer_MeV_single"];
var _AT_max_classic_E_transfer_MeV_new_single = Module["_AT_max_classic_E_transfer_MeV_new_single"] = asm["_AT_max_classic_E_transfer_MeV_new_single"];
var _AT_max_classic_E_transfer_MeV_single = Module["_AT_max_classic_E_transfer_MeV_single"] = asm["_AT_max_classic_E_transfer_MeV_single"];
var _AT_max_electron_range_m = Module["_AT_max_electron_range_m"] = asm["_AT_max_electron_range_m"];
var _AT_max_electron_ranges_m = Module["_AT_max_electron_ranges_m"] = asm["_AT_max_electron_ranges_m"];
var _AT_max_plateau_Bortfeld = Module["_AT_max_plateau_Bortfeld"] = asm["_AT_max_plateau_Bortfeld"];
var _AT_max_relativistic_E_transfer_MeV_new_single = Module["_AT_max_relativistic_E_transfer_MeV_new_single"] = asm["_AT_max_relativistic_E_transfer_MeV_new_single"];
var _AT_max_relativistic_E_transfer_MeV_single = Module["_AT_max_relativistic_E_transfer_MeV_single"] = asm["_AT_max_relativistic_E_transfer_MeV_single"];
var _AT_mean_energy_loss_keV = Module["_AT_mean_energy_loss_keV"] = asm["_AT_mean_energy_loss_keV"];
var _AT_mean_excitation_energy_eV_from_Z = Module["_AT_mean_excitation_energy_eV_from_Z"] = asm["_AT_mean_excitation_energy_eV_from_Z"];
var _AT_mean_excitation_energy_eV_from_Z_single = Module["_AT_mean_excitation_energy_eV_from_Z_single"] = asm["_AT_mean_excitation_energy_eV_from_Z_single"];
var _AT_mean_number_of_tracks_contrib = Module["_AT_mean_number_of_tracks_contrib"] = asm["_AT_mean_number_of_tracks_contrib"];
var _AT_momentum_MeV_c_u_from_E_MeV_u = Module["_AT_momentum_MeV_c_u_from_E_MeV_u"] = asm["_AT_momentum_MeV_c_u_from_E_MeV_u"];
var _AT_momentum_from_E_MeV_c_u_single = Module["_AT_momentum_from_E_MeV_c_u_single"] = asm["_AT_momentum_from_E_MeV_c_u_single"];
var _AT_n_bins_RadicalDiffusion = Module["_AT_n_bins_RadicalDiffusion"] = asm["_AT_n_bins_RadicalDiffusion"];
var _AT_n_bins_for_DSB_distribution = Module["_AT_n_bins_for_DSB_distribution"] = asm["_AT_n_bins_for_DSB_distribution"];
var _AT_n_bins_for_low_fluence_local_dose_distribution = Module["_AT_n_bins_for_low_fluence_local_dose_distribution"] = asm["_AT_n_bins_for_low_fluence_local_dose_distribution"];
var _AT_n_bins_for_single_impact_local_dose_distrib = Module["_AT_n_bins_for_single_impact_local_dose_distrib"] = asm["_AT_n_bins_for_single_impact_local_dose_distrib"];
var _AT_normalize = Module["_AT_normalize"] = asm["_AT_normalize"];
var _AT_nuclear_spin_from_Z_and_A = Module["_AT_nuclear_spin_from_Z_and_A"] = asm["_AT_nuclear_spin_from_Z_and_A"];
var _AT_nuclear_spin_from_particle_no_multi = Module["_AT_nuclear_spin_from_particle_no_multi"] = asm["_AT_nuclear_spin_from_particle_no_multi"];
var _AT_nuclear_spin_from_particle_no_single = Module["_AT_nuclear_spin_from_particle_no_single"] = asm["_AT_nuclear_spin_from_particle_no_single"];
var _AT_p_MeV_from_material_no = Module["_AT_p_MeV_from_material_no"] = asm["_AT_p_MeV_from_material_no"];
var _AT_particle_name_from_particle_no = Module["_AT_particle_name_from_particle_no"] = asm["_AT_particle_name_from_particle_no"];
var _AT_particle_name_from_particle_no_single = Module["_AT_particle_name_from_particle_no_single"] = asm["_AT_particle_name_from_particle_no_single"];
var _AT_particle_no_from_Z_and_A = Module["_AT_particle_no_from_Z_and_A"] = asm["_AT_particle_no_from_Z_and_A"];
var _AT_particle_no_from_Z_and_A_single = Module["_AT_particle_no_from_Z_and_A_single"] = asm["_AT_particle_no_from_Z_and_A_single"];
var _AT_particle_no_from_particle_name = Module["_AT_particle_no_from_particle_name"] = asm["_AT_particle_no_from_particle_name"];
var _AT_particle_no_from_particle_name_single = Module["_AT_particle_no_from_particle_name_single"] = asm["_AT_particle_no_from_particle_name_single"];
var _AT_phase_from_material_no = Module["_AT_phase_from_material_no"] = asm["_AT_phase_from_material_no"];
var _AT_plasma_energy_J_from_material_no = Module["_AT_plasma_energy_J_from_material_no"] = asm["_AT_plasma_energy_J_from_material_no"];
var _AT_plasma_energy_J_single = Module["_AT_plasma_energy_J_single"] = asm["_AT_plasma_energy_J_single"];
var _AT_proton_RBE_multi = Module["_AT_proton_RBE_multi"] = asm["_AT_proton_RBE_multi"];
var _AT_proton_RBE_single = Module["_AT_proton_RBE_single"] = asm["_AT_proton_RBE_single"];
var _AT_r_RDD_m = Module["_AT_r_RDD_m"] = asm["_AT_r_RDD_m"];
var _AT_r_max_RadicalDiffusion_m = Module["_AT_r_max_RadicalDiffusion_m"] = asm["_AT_r_max_RadicalDiffusion_m"];
var _AT_r_min_RadicalDiffusion_m = Module["_AT_r_min_RadicalDiffusion_m"] = asm["_AT_r_min_RadicalDiffusion_m"];
var _AT_range_Bortfeld_cm = Module["_AT_range_Bortfeld_cm"] = asm["_AT_range_Bortfeld_cm"];
var _AT_range_straggling_convolution = Module["_AT_range_straggling_convolution"] = asm["_AT_range_straggling_convolution"];
var _AT_reduced_target_thickness = Module["_AT_reduced_target_thickness"] = asm["_AT_reduced_target_thickness"];
var _AT_reduced_target_thickness_single = Module["_AT_reduced_target_thickness_single"] = asm["_AT_reduced_target_thickness_single"];
var _AT_run_CPPSC_method = Module["_AT_run_CPPSC_method"] = asm["_AT_run_CPPSC_method"];
var _AT_run_CPPSS_method = Module["_AT_run_CPPSS_method"] = asm["_AT_run_CPPSS_method"];
var _AT_run_GSM_method = Module["_AT_run_GSM_method"] = asm["_AT_run_GSM_method"];
var _AT_run_IGK_method = Module["_AT_run_IGK_method"] = asm["_AT_run_IGK_method"];
var _AT_sI_int = Module["_AT_sI_int"] = asm["_AT_sI_int"];
var _AT_scattering_angle_distribution = Module["_AT_scattering_angle_distribution"] = asm["_AT_scattering_angle_distribution"];
var _AT_scattering_angle_distribution_single = Module["_AT_scattering_angle_distribution_single"] = asm["_AT_scattering_angle_distribution_single"];
var _AT_screening_angle = Module["_AT_screening_angle"] = asm["_AT_screening_angle"];
var _AT_screening_angle_single = Module["_AT_screening_angle_single"] = asm["_AT_screening_angle_single"];
var _AT_set_user_material = Module["_AT_set_user_material"] = asm["_AT_set_user_material"];
var _AT_set_user_material_from_composition = Module["_AT_set_user_material_from_composition"] = asm["_AT_set_user_material_from_composition"];
var _AT_single_impact_dose_Gy = Module["_AT_single_impact_dose_Gy"] = asm["_AT_single_impact_dose_Gy"];
var _AT_single_impact_dose_Gy_single = Module["_AT_single_impact_dose_Gy_single"] = asm["_AT_single_impact_dose_Gy_single"];
var _AT_single_impact_fluence_cm2 = Module["_AT_single_impact_fluence_cm2"] = asm["_AT_single_impact_fluence_cm2"];
var _AT_single_impact_fluence_cm2_single = Module["_AT_single_impact_fluence_cm2_single"] = asm["_AT_single_impact_fluence_cm2_single"];
var _AT_single_impact_local_dose_distrib = Module["_AT_single_impact_local_dose_distrib"] = asm["_AT_single_impact_local_dose_distrib"];
var _AT_step_to_N2 = Module["_AT_step_to_N2"] = asm["_AT_step_to_N2"];
var _AT_stopping_power_ratio = Module["_AT_stopping_power_ratio"] = asm["_AT_stopping_power_ratio"];
var _AT_stopping_power_source_model_name_from_number = Module["_AT_stopping_power_source_model_name_from_number"] = asm["_AT_stopping_power_source_model_name_from_number"];
var _AT_stopping_power_source_model_number_from_name = Module["_AT_stopping_power_source_model_number_from_name"] = asm["_AT_stopping_power_source_model_number_from_name"];
var _AT_sum = Module["_AT_sum"] = asm["_AT_sum"];
var _AT_test_fun = Module["_AT_test_fun"] = asm["_AT_test_fun"];
var _AT_total_D_Gy = Module["_AT_total_D_Gy"] = asm["_AT_total_D_Gy"];
var _AT_total_fluence_cm2 = Module["_AT_total_fluence_cm2"] = asm["_AT_total_fluence_cm2"];
var _AT_translate_dose_into_DSB_distribution = Module["_AT_translate_dose_into_DSB_distribution"] = asm["_AT_translate_dose_into_DSB_distribution"];
var _AT_xi_keV = Module["_AT_xi_keV"] = asm["_AT_xi_keV"];
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ddi = Module["dynCall_ddi"] = asm["dynCall_ddi"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_idii = Module["dynCall_idii"] = asm["dynCall_idii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidii = Module["dynCall_iidii"] = asm["dynCall_iidii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiidddddd = Module["dynCall_iiidddddd"] = asm["dynCall_iiidddddd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiidd = Module["dynCall_iiiidd"] = asm["dynCall_iiiidd"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viddiiii = Module["dynCall_viddiiii"] = asm["dynCall_viddiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "calledRun")) Object.defineProperty(Module, "calledRun", { configurable: true, get: function() { abort("'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



